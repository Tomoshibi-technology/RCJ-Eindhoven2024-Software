
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab8  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c50  08004c50  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c50  08004c50  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  2000000c  08004c68  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08004c68  00006578  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013304  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264b  00000000  00000000  00019338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b08  00000000  00000000  0001c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017635  00000000  00000000  0001d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011582  00000000  00000000  000348ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d00b  00000000  00000000  00045e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  000d2e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004b58 	.word	0x08004b58

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004b58 	.word	0x08004b58

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <_ZN3LEDC1EP6WS2812>:
#include "led.h"

LED::LED(WS2812* neopixel){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	683a      	ldr	r2, [r7, #0]
 8000226:	601a      	str	r2, [r3, #0]
}
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	0018      	movs	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	b002      	add	sp, #8
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	Neopixel.do_forwardRewrite();
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 800023e:	0018      	movs	r0, r3
 8000240:	f000 ff20 	bl	8001084 <_ZN6WS281217do_forwardRewriteEv>
}
 8000244:	46c0      	nop			@ (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001c0 	.word	0x200001c0

08000250 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	Neopixel.do_backRewrite();
 8000258:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 800025a:	0018      	movs	r0, r3
 800025c:	f000 ffbc 	bl	80011d8 <_ZN6WS281214do_backRewriteEv>
}
 8000260:	46c0      	nop			@ (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	b002      	add	sp, #8
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200001c0 	.word	0x200001c0

0800026c <_Z6readIDv>:

uint8_t readID(){
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	uint8_t ID = 0;
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){
 8000278:	2380      	movs	r3, #128	@ 0x80
 800027a:	015a      	lsls	r2, r3, #5
 800027c:	23a0      	movs	r3, #160	@ 0xa0
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	0011      	movs	r1, r2
 8000282:	0018      	movs	r0, r3
 8000284:	f001 fe34 	bl	8001ef0 <HAL_GPIO_ReadPin>
 8000288:	0003      	movs	r3, r0
 800028a:	3b01      	subs	r3, #1
 800028c:	425a      	negs	r2, r3
 800028e:	4153      	adcs	r3, r2
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d005      	beq.n	80002a2 <_Z6readIDv+0x36>
		ID+=1;
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	1dfa      	adds	r2, r7, #7
 800029a:	7812      	ldrb	r2, [r2, #0]
 800029c:	3201      	adds	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e046      	b.n	8000330 <_Z6readIDv+0xc4>
	}else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){
 80002a2:	4b26      	ldr	r3, [pc, #152]	@ (800033c <_Z6readIDv+0xd0>)
 80002a4:	2108      	movs	r1, #8
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 fe22 	bl	8001ef0 <HAL_GPIO_ReadPin>
 80002ac:	0003      	movs	r3, r0
 80002ae:	3b01      	subs	r3, #1
 80002b0:	425a      	negs	r2, r3
 80002b2:	4153      	adcs	r3, r2
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d005      	beq.n	80002c6 <_Z6readIDv+0x5a>
		ID+=2;
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	1dfa      	adds	r2, r7, #7
 80002be:	7812      	ldrb	r2, [r2, #0]
 80002c0:	3202      	adds	r2, #2
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	e034      	b.n	8000330 <_Z6readIDv+0xc4>
	}else if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){
 80002c6:	4b1d      	ldr	r3, [pc, #116]	@ (800033c <_Z6readIDv+0xd0>)
 80002c8:	2110      	movs	r1, #16
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fe10 	bl	8001ef0 <HAL_GPIO_ReadPin>
 80002d0:	0003      	movs	r3, r0
 80002d2:	3b01      	subs	r3, #1
 80002d4:	425a      	negs	r2, r3
 80002d6:	4153      	adcs	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d005      	beq.n	80002ea <_Z6readIDv+0x7e>
		ID+=4;
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	1dfa      	adds	r2, r7, #7
 80002e2:	7812      	ldrb	r2, [r2, #0]
 80002e4:	3204      	adds	r2, #4
 80002e6:	701a      	strb	r2, [r3, #0]
 80002e8:	e022      	b.n	8000330 <_Z6readIDv+0xc4>
	}else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <_Z6readIDv+0xd0>)
 80002ec:	2120      	movs	r1, #32
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 fdfe 	bl	8001ef0 <HAL_GPIO_ReadPin>
 80002f4:	0003      	movs	r3, r0
 80002f6:	3b01      	subs	r3, #1
 80002f8:	425a      	negs	r2, r3
 80002fa:	4153      	adcs	r3, r2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d005      	beq.n	800030e <_Z6readIDv+0xa2>
		ID+=8;
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	1dfa      	adds	r2, r7, #7
 8000306:	7812      	ldrb	r2, [r2, #0]
 8000308:	3208      	adds	r2, #8
 800030a:	701a      	strb	r2, [r3, #0]
 800030c:	e010      	b.n	8000330 <_Z6readIDv+0xc4>
	}else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <_Z6readIDv+0xd0>)
 8000310:	2140      	movs	r1, #64	@ 0x40
 8000312:	0018      	movs	r0, r3
 8000314:	f001 fdec 	bl	8001ef0 <HAL_GPIO_ReadPin>
 8000318:	0003      	movs	r3, r0
 800031a:	3b01      	subs	r3, #1
 800031c:	425a      	negs	r2, r3
 800031e:	4153      	adcs	r3, r2
 8000320:	b2db      	uxtb	r3, r3
 8000322:	2b00      	cmp	r3, #0
 8000324:	d004      	beq.n	8000330 <_Z6readIDv+0xc4>
		ID+=16;
 8000326:	1dfb      	adds	r3, r7, #7
 8000328:	1dfa      	adds	r2, r7, #7
 800032a:	7812      	ldrb	r2, [r2, #0]
 800032c:	3210      	adds	r2, #16
 800032e:	701a      	strb	r2, [r3, #0]
	}
	return ID;
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}
 800033c:	50000400 	.word	0x50000400

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08a      	sub	sp, #40	@ 0x28
 8000344:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f001 f82b 	bl	80013a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  for(uint8_t i=0; i<64; i++){
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	e009      	b.n	8000366 <main+0x26>
	  rxBuf[i] = 255;
 8000352:	1dfb      	adds	r3, r7, #7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4a2f      	ldr	r2, [pc, #188]	@ (8000414 <main+0xd4>)
 8000358:	21ff      	movs	r1, #255	@ 0xff
 800035a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0; i<64; i++){
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	3201      	adds	r2, #1
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b3f      	cmp	r3, #63	@ 0x3f
 800036c:	d9f1      	bls.n	8000352 <main+0x12>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036e:	f000 f863 	bl	8000438 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000372:	f000 f9ad 	bl	80006d0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000376:	f000 f985 	bl	8000684 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800037a:	f000 f94b 	bl	8000614 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 800037e:	f000 f8b7 	bl	80004f0 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, rxBuf, 64);
 8000382:	4924      	ldr	r1, [pc, #144]	@ (8000414 <main+0xd4>)
 8000384:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <main+0xd8>)
 8000386:	2240      	movs	r2, #64	@ 0x40
 8000388:	0018      	movs	r0, r3
 800038a:	f003 fdbf 	bl	8003f0c <HAL_UART_Receive_DMA>
  HAL_Delay(1);
 800038e:	2001      	movs	r0, #1
 8000390:	f001 f88c 	bl	80014ac <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	readBuf(&huart2, rxBuf, 64, Data, 12, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 30);
 8000394:	4a21      	ldr	r2, [pc, #132]	@ (800041c <main+0xdc>)
 8000396:	491f      	ldr	r1, [pc, #124]	@ (8000414 <main+0xd4>)
 8000398:	481f      	ldr	r0, [pc, #124]	@ (8000418 <main+0xd8>)
 800039a:	231e      	movs	r3, #30
 800039c:	9306      	str	r3, [sp, #24]
 800039e:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <main+0xe0>)
 80003a0:	9305      	str	r3, [sp, #20]
 80003a2:	4b20      	ldr	r3, [pc, #128]	@ (8000424 <main+0xe4>)
 80003a4:	9304      	str	r3, [sp, #16]
 80003a6:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <main+0xe8>)
 80003a8:	9303      	str	r3, [sp, #12]
 80003aa:	4b20      	ldr	r3, [pc, #128]	@ (800042c <main+0xec>)
 80003ac:	9302      	str	r3, [sp, #8]
 80003ae:	2300      	movs	r3, #0
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	230c      	movs	r3, #12
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	0013      	movs	r3, r2
 80003b8:	2240      	movs	r2, #64	@ 0x40
 80003ba:	f000 f9f9 	bl	80007b0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>
	myid = readID();
 80003be:	f7ff ff55 	bl	800026c <_Z6readIDv>
 80003c2:	0003      	movs	r3, r0
 80003c4:	b25a      	sxtb	r2, r3
 80003c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000430 <main+0xf0>)
 80003c8:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Neopixel.clear();
 80003ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000434 <main+0xf4>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fd4b 	bl	8000e68 <_ZN6WS28125clearEv>
	  for(uint16_t i=0; i<256; i++){
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	801a      	strh	r2, [r3, #0]
 80003d8:	e012      	b.n	8000400 <main+0xc0>
		  Neopixel.set_hsv(i, (i*8)%256, 250, 10);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	b2d9      	uxtb	r1, r3
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	00db      	lsls	r3, r3, #3
 80003e6:	22ff      	movs	r2, #255	@ 0xff
 80003e8:	401a      	ands	r2, r3
 80003ea:	4812      	ldr	r0, [pc, #72]	@ (8000434 <main+0xf4>)
 80003ec:	230a      	movs	r3, #10
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	23fa      	movs	r3, #250	@ 0xfa
 80003f2:	f000 fd69 	bl	8000ec8 <_ZN6WS28127set_hsvEhiii>
	  for(uint16_t i=0; i<256; i++){
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	881a      	ldrh	r2, [r3, #0]
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	3201      	adds	r2, #1
 80003fe:	801a      	strh	r2, [r3, #0]
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	2bff      	cmp	r3, #255	@ 0xff
 8000406:	d9e8      	bls.n	80003da <main+0x9a>
	  }
	  Neopixel.show();
 8000408:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <main+0xf4>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fca4 	bl	8000d58 <_ZN6WS28124showEv>





  }
 8000410:	e7c0      	b.n	8000394 <main+0x54>
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	20000524 	.word	0x20000524
 8000418:	200000d0 	.word	0x200000d0
 800041c:	20000564 	.word	0x20000564
 8000420:	20000520 	.word	0x20000520
 8000424:	2000051e 	.word	0x2000051e
 8000428:	2000051d 	.word	0x2000051d
 800042c:	2000051c 	.word	0x2000051c
 8000430:	20000570 	.word	0x20000570
 8000434:	200001c0 	.word	0x200001c0

08000438 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b093      	sub	sp, #76	@ 0x4c
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	2414      	movs	r4, #20
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2334      	movs	r3, #52	@ 0x34
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f004 fb59 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	0018      	movs	r0, r3
 8000452:	2310      	movs	r3, #16
 8000454:	001a      	movs	r2, r3
 8000456:	2100      	movs	r1, #0
 8000458:	f004 fb52 	bl	8004b00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800045c:	2380      	movs	r3, #128	@ 0x80
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	0018      	movs	r0, r3
 8000462:	f001 fd7f 	bl	8001f64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	22a0      	movs	r2, #160	@ 0xa0
 8000470:	02d2      	lsls	r2, r2, #11
 8000472:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000474:	0021      	movs	r1, r4
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2202      	movs	r2, #2
 800047a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2203      	movs	r2, #3
 8000480:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2200      	movs	r2, #0
 8000486:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2209      	movs	r2, #9
 800048c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	0292      	lsls	r2, r2, #10
 8000494:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	05d2      	lsls	r2, r2, #23
 800049c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fdab 	bl	8001ffc <HAL_RCC_OscConfig>
 80004a6:	0003      	movs	r3, r0
 80004a8:	1e5a      	subs	r2, r3, #1
 80004aa:	4193      	sbcs	r3, r2
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80004b2:	f000 fa93 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	2202      	movs	r2, #2
 80004c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2101      	movs	r1, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 f8a2 	bl	800261c <HAL_RCC_ClockConfig>
 80004d8:	0003      	movs	r3, r0
 80004da:	1e5a      	subs	r2, r3, #1
 80004dc:	4193      	sbcs	r3, r2
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80004e4:	f000 fa7a 	bl	80009dc <Error_Handler>
  }
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b013      	add	sp, #76	@ 0x4c
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08e      	sub	sp, #56	@ 0x38
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	2328      	movs	r3, #40	@ 0x28
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2310      	movs	r3, #16
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f004 fafd 	bl	8004b00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000506:	231c      	movs	r3, #28
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	230c      	movs	r3, #12
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f004 faf5 	bl	8004b00 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	231c      	movs	r3, #28
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f004 faee 	bl	8004b00 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000524:	4b39      	ldr	r3, [pc, #228]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 8000526:	4a3a      	ldr	r2, [pc, #232]	@ (8000610 <_ZL12MX_TIM3_Initv+0x120>)
 8000528:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800052a:	4b38      	ldr	r3, [pc, #224]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 800052c:	2203      	movs	r2, #3
 800052e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000530:	4b36      	ldr	r3, [pc, #216]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 8000538:	220e      	movs	r2, #14
 800053a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053c:	4b33      	ldr	r3, [pc, #204]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b32      	ldr	r3, [pc, #200]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000548:	4b30      	ldr	r3, [pc, #192]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 800054a:	0018      	movs	r0, r3
 800054c:	f002 fa0e 	bl	800296c <HAL_TIM_Base_Init>
 8000550:	0003      	movs	r3, r0
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4193      	sbcs	r3, r2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 800055c:	f000 fa3e 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000560:	2128      	movs	r1, #40	@ 0x28
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	0152      	lsls	r2, r2, #5
 8000568:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800056a:	187a      	adds	r2, r7, r1
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fe8b 	bl	800328c <HAL_TIM_ConfigClockSource>
 8000576:	0003      	movs	r3, r0
 8000578:	1e5a      	subs	r2, r3, #1
 800057a:	4193      	sbcs	r3, r2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000582:	f000 fa2b 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000586:	4b21      	ldr	r3, [pc, #132]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fa47 	bl	8002a1c <HAL_TIM_PWM_Init>
 800058e:	0003      	movs	r3, r0
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	4193      	sbcs	r3, r2
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800059a:	f000 fa1f 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059e:	211c      	movs	r1, #28
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ac:	187a      	adds	r2, r7, r1
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f003 fbf2 	bl	8003d9c <HAL_TIMEx_MasterConfigSynchronization>
 80005b8:	0003      	movs	r3, r0
 80005ba:	1e5a      	subs	r2, r3, #1
 80005bc:	4193      	sbcs	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80005c4:	f000 fa0a 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2260      	movs	r2, #96	@ 0x60
 80005cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005ce:	003b      	movs	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d4:	003b      	movs	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80005da:	003b      	movs	r3, r7
 80005dc:	2204      	movs	r2, #4
 80005de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005e0:	0039      	movs	r1, r7
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	0018      	movs	r0, r3
 80005e8:	f002 fd50 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 80005ec:	0003      	movs	r3, r0
 80005ee:	1e5a      	subs	r2, r3, #1
 80005f0:	4193      	sbcs	r3, r2
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 80005f8:	f000 f9f0 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <_ZL12MX_TIM3_Initv+0x11c>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fa94 	bl	8000b2c <HAL_TIM_MspPostInit>

}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b00e      	add	sp, #56	@ 0x38
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000028 	.word	0x20000028
 8000610:	40000400 	.word	0x40000400

08000614 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 800061a:	4a19      	ldr	r2, [pc, #100]	@ (8000680 <_ZL19MX_USART2_UART_Initv+0x6c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b17      	ldr	r3, [pc, #92]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000620:	22e1      	movs	r2, #225	@ 0xe1
 8000622:	0252      	lsls	r2, r2, #9
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b15      	ldr	r3, [pc, #84]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 8000658:	2200      	movs	r2, #0
 800065a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <_ZL19MX_USART2_UART_Initv+0x68>)
 800065e:	0018      	movs	r0, r3
 8000660:	f003 fbfe 	bl	8003e60 <HAL_UART_Init>
 8000664:	0003      	movs	r3, r0
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	4193      	sbcs	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000670:	f000 f9b4 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000674:	46c0      	nop			@ (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	200000d0 	.word	0x200000d0
 8000680:	40004400 	.word	0x40004400

08000684 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <_ZL11MX_DMA_Initv+0x48>)
 800068c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <_ZL11MX_DMA_Initv+0x48>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	639a      	str	r2, [r3, #56]	@ 0x38
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <_ZL11MX_DMA_Initv+0x48>)
 8000698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2009      	movs	r0, #9
 80006a8:	f000 ffd0 	bl	800164c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ac:	2009      	movs	r0, #9
 80006ae:	f000 ffe2 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200a      	movs	r0, #10
 80006b8:	f000 ffc8 	bl	800164c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006bc:	200a      	movs	r0, #10
 80006be:	f000 ffda 	bl	8001676 <HAL_NVIC_EnableIRQ>

}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	@ 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f004 fa0d 	bl	8004b00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ea:	4b2f      	ldr	r3, [pc, #188]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 80006ec:	2104      	movs	r1, #4
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f6:	2204      	movs	r2, #4
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000702:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	635a      	str	r2, [r3, #52]	@ 0x34
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 800070c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 800071c:	2102      	movs	r1, #2
 800071e:	430a      	orrs	r2, r1
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34
 8000722:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <_ZL12MX_GPIO_Initv+0xd8>)
 8000724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000726:	2202      	movs	r2, #2
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800072e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000730:	2200      	movs	r2, #0
 8000732:	2104      	movs	r1, #4
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fbf8 	bl	8001f2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2204      	movs	r2, #4
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000752:	193b      	adds	r3, r7, r4
 8000754:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000756:	0019      	movs	r1, r3
 8000758:	0010      	movs	r0, r2
 800075a:	f001 fa65 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2280      	movs	r2, #128	@ 0x80
 8000762:	0152      	lsls	r2, r2, #5
 8000764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000772:	193a      	adds	r2, r7, r4
 8000774:	23a0      	movs	r3, #160	@ 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fa54 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2278      	movs	r2, #120	@ 0x78
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <_ZL12MX_GPIO_Initv+0xdc>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f001 fa45 	bl	8001c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b009      	add	sp, #36	@ 0x24
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	46c0      	nop			@ (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000
 80007ac:	50000400 	.word	0x50000400

080007b0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

/* USER CODE BEGIN 4 */

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2280      	movs	r2, #128	@ 0x80
 80007c2:	589b      	ldr	r3, [r3, r2]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追??��?��?付かれてな??��?��?
 80007d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	001a      	movs	r2, r3
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	4293      	cmp	r3, r2
 80007dc:	d032      	beq.n	8000844 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x94>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな??��?��?=追??��?��?越されてな??��?��?
 80007de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	001a      	movs	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	189b      	adds	r3, r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2bff      	cmp	r3, #255	@ 0xff
 80007ec:	d116      	bne.n	800081c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6c>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�???��?��んだ=受信した
 80007ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	001a      	movs	r2, r3
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d006      	beq.n	8000808 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x58>
//正常
				*stop_counter = 0;
 80007fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007fc:	2200      	movs	r2, #0
 80007fe:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000806:	e04b      	b.n	80008a0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
			}else{//wrt_ptが�???��?��んでな??��?��?=受信してな??��?��?
//受信してな??��?��?
				(*stop_counter)++;
 8000808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	b29a      	uxth	r2, r3
 8000810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000812:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800081a:	e041      	b.n	80008a0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
			}
		}else{//p_rdptが書き換えられた=追??��?��?越された
//追??��?��?越された
			(*error_counter)++;
 800081c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000826:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8000828:	2350      	movs	r3, #80	@ 0x50
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8000834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000836:	2b00      	cmp	r3, #0
 8000838:	da32      	bge.n	80008a0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
 800083a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	18d3      	adds	r3, r2, r3
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000842:	e02d      	b.n	80008a0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
		}
	}else{//wrtに追??��?��?付かれた,追??��?��?付い??��?��?
		int front_pt = wrt_pt + 1;
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	3301      	adds	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	429a      	cmp	r2, r3
 8000850:	dc03      	bgt.n	800085a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xaa>
 8000852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	1ad3      	subs	r3, r2, r3
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 800085a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	18d3      	adds	r3, r2, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2bff      	cmp	r3, #255	@ 0xff
 8000864:	d109      	bne.n	800087a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xca>
//追??��?��?付い??��?��?
			(*stop_counter)++;
 8000866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000870:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8000872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000878:	e012      	b.n	80008a0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
		}else{
//追??��?��?付かれた
			(*error_counter)++;
 800087a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	b29a      	uxth	r2, r3
 8000882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000884:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8000886:	2350      	movs	r3, #80	@ 0x50
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8000892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000894:	2b00      	cmp	r3, #0
 8000896:	da03      	bge.n	80008a0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
 8000898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	18d3      	adds	r3, r2, r3
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 80008a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4a4c      	ldr	r2, [pc, #304]	@ (80009d8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x228>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d903      	bls.n	80008b2 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x102>
 80008aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008ac:	2224      	movs	r2, #36	@ 0x24
 80008ae:	4252      	negs	r2, r2
 80008b0:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 80008b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	4a48      	ldr	r2, [pc, #288]	@ (80009d8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x228>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d903      	bls.n	80008c4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
 80008bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008be:	2224      	movs	r2, #36	@ 0x24
 80008c0:	4252      	negs	r2, r2
 80008c2:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 80008cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da03      	bge.n	80008da <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x12a>
 80008d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	18d3      	adds	r3, r2, r3
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 80008da:	2350      	movs	r3, #80	@ 0x50
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	001a      	movs	r2, r3
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	4293      	cmp	r3, r2
 80008ea:	dd67      	ble.n	80009bc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x20c>

		rd_pt++;
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	3301      	adds	r3, #1
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dc03      	bgt.n	8000902 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x152>
 80008fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 8000902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	001a      	movs	r2, r3
 800090c:	233c      	movs	r3, #60	@ 0x3c
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	33fa      	adds	r3, #250	@ 0xfa
 8000914:	429a      	cmp	r2, r3
 8000916:	d14b      	bne.n	80009b0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x200>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな??��?��?,25以上も??��?��???��?��?
 8000918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800091a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800091c:	18d3      	adds	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	429a      	cmp	r2, r3
 8000926:	dc03      	bgt.n	8000930 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x180>
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 8000930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000932:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 8000934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	18d3      	adds	r3, r2, r3
 800093a:	22ff      	movs	r2, #255	@ 0xff
 800093c:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	e01a      	b.n	800097a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1ca>
				temp_rdpt += 1;
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	3301      	adds	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	429a      	cmp	r2, r3
 8000950:	dc03      	bgt.n	800095a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1aa>
 8000952:	6a3a      	ldr	r2, [r7, #32]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	18d2      	adds	r2, r2, r3
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	18cb      	adds	r3, r1, r3
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	22ff      	movs	r2, #255	@ 0xff
 8000972:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	3301      	adds	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800097e:	429a      	cmp	r2, r3
 8000980:	dbe0      	blt.n	8000944 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x194>
			}

			rd_pt = temp_rdpt;
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	2b00      	cmp	r3, #0
 8000992:	da03      	bge.n	800099c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1ec>
 8000994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da00      	bge.n	80009a4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f4>
 80009a2:	3301      	adds	r3, #1
 80009a4:	105b      	asrs	r3, r3, #1
 80009a6:	001a      	movs	r2, r3
 80009a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009aa:	4293      	cmp	r3, r2
 80009ac:	da8a      	bge.n	80008c4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
			else{break;}
 80009ae:	e006      	b.n	80009be <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x20e>
		}else{buf[rd_pt] = 255;}
 80009b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	18d3      	adds	r3, r2, r3
 80009b6:	22ff      	movs	r2, #255	@ 0xff
 80009b8:	701a      	strb	r2, [r3, #0]
	}
 80009ba:	e783      	b.n	80008c4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
		if(dif_pt <= go_back/2){break;}
 80009bc:	46c0      	nop			@ (mov r8, r8)

	*p_rdpt = rd_pt;
 80009be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009c4:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b00c      	add	sp, #48	@ 0x30
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	0000ffdc 	.word	0x0000ffdc

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d10f      	bne.n	8000a18 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d10b      	bne.n	8000a18 <_Z41__static_initialization_and_destruction_0ii+0x30>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000a02:	4909      	ldr	r1, [pc, #36]	@ (8000a28 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	f000 f980 	bl	8000d0c <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fc00 	bl	8000218 <_ZN3LEDC1EP6WS2812>
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0000ffff 	.word	0x0000ffff
 8000a24:	20000074 	.word	0x20000074
 8000a28:	20000028 	.word	0x20000028
 8000a2c:	200001c0 	.word	0x200001c0
 8000a30:	20000504 	.word	0x20000504

08000a34 <_GLOBAL__sub_I_htim3>:
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <_GLOBAL__sub_I_htim3+0x14>)
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff ffd3 	bl	80009e8 <_Z41__static_initialization_and_destruction_0ii>
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	0000ffff 	.word	0x0000ffff

08000a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0549      	lsls	r1, r1, #21
 8000a74:	430a      	orrs	r2, r1
 8000a76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	055b      	lsls	r3, r3, #21
 8000a80:	4013      	ands	r3, r2
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <HAL_TIM_Base_MspInit+0x88>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d136      	bne.n	8000b14 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b20 <HAL_TIM_Base_MspInit+0x8c>)
 8000aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <HAL_TIM_Base_MspInit+0x8c>)
 8000aac:	2102      	movs	r1, #2
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b20 <HAL_TIM_Base_MspInit+0x8c>)
 8000ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000ac0:	4a19      	ldr	r2, [pc, #100]	@ (8000b28 <HAL_TIM_Base_MspInit+0x94>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000ac6:	2221      	movs	r2, #33	@ 0x21
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000acc:	2210      	movs	r2, #16
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000aec:	2220      	movs	r2, #32
 8000aee:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000af2:	22c0      	movs	r2, #192	@ 0xc0
 8000af4:	0192      	lsls	r2, r2, #6
 8000af6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fdd8 	bl	80016b0 <HAL_DMA_Init>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8000b04:	f7ff ff6a 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a06      	ldr	r2, [pc, #24]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_TIM_Base_MspInit+0x90>)
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b004      	add	sp, #16
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40000400 	.word	0x40000400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	20000074 	.word	0x20000074
 8000b28:	4002001c 	.word	0x4002001c

08000b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	240c      	movs	r4, #12
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 ffde 	bl	8004b00 <memset>
  if(htim->Instance==TIM3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a14      	ldr	r2, [pc, #80]	@ (8000b9c <HAL_TIM_MspPostInit+0x70>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d122      	bne.n	8000b94 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_TIM_MspPostInit+0x74>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <HAL_TIM_MspPostInit+0x74>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_TIM_MspPostInit+0x74>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b66:	0021      	movs	r1, r4
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	187a      	adds	r2, r7, r1
 8000b88:	23a0      	movs	r3, #160	@ 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 f84a 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b009      	add	sp, #36	@ 0x24
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b08b      	sub	sp, #44	@ 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2414      	movs	r4, #20
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	2314      	movs	r3, #20
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f003 ffa2 	bl	8004b00 <memset>
  if(huart->Instance==USART2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a31      	ldr	r2, [pc, #196]	@ (8000c88 <HAL_UART_MspInit+0xe4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d15b      	bne.n	8000c7e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <HAL_UART_MspInit+0xe8>)
 8000bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bca:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <HAL_UART_MspInit+0xe8>)
 8000bcc:	2180      	movs	r1, #128	@ 0x80
 8000bce:	0289      	lsls	r1, r1, #10
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <HAL_UART_MspInit+0xe8>)
 8000bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <HAL_UART_MspInit+0xe8>)
 8000be4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be6:	4b29      	ldr	r3, [pc, #164]	@ (8000c8c <HAL_UART_MspInit+0xe8>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bee:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <HAL_UART_MspInit+0xe8>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	4a24      	ldr	r2, [pc, #144]	@ (8000c90 <HAL_UART_MspInit+0xec>)
 8000c00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2202      	movs	r2, #2
 8000c06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2201      	movs	r2, #1
 8000c18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	187a      	adds	r2, r7, r1
 8000c1c:	23a0      	movs	r3, #160	@ 0xa0
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	0011      	movs	r1, r2
 8000c22:	0018      	movs	r0, r3
 8000c24:	f001 f800 	bl	8001c28 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <HAL_UART_MspInit+0xf4>)
 8000c2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c30:	2234      	movs	r2, #52	@ 0x34
 8000c32:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c42:	2280      	movs	r2, #128	@ 0x80
 8000c44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c54:	2220      	movs	r2, #32
 8000c56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	0192      	lsls	r2, r2, #6
 8000c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 fd24 	bl	80016b0 <HAL_DMA_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c6c:	f7ff feb6 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c76:	505a      	str	r2, [r3, r1]
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_UART_MspInit+0xf0>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b00b      	add	sp, #44	@ 0x2c
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	00008004 	.word	0x00008004
 8000c94:	20000164 	.word	0x20000164
 8000c98:	40020008 	.word	0x40020008

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 fbd6 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <DMA1_Channel1_IRQHandler+0x14>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fe64 	bl	80019a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000164 	.word	0x20000164

08000ce8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <DMA1_Channel2_3_IRQHandler+0x14>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 fe58 	bl	80019a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	20000074 	.word	0x20000074

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: famil
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 8000d1e:	189b      	adds	r3, r3, r2
 8000d20:	2230      	movs	r2, #48	@ 0x30
 8000d22:	2100      	movs	r1, #0
 8000d24:	0018      	movs	r0, r3
 8000d26:	f003 feeb 	bl	8004b00 <memset>
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	23d0      	movs	r3, #208	@ 0xd0
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	2100      	movs	r1, #0
 8000d32:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	609a      	str	r2, [r3, #8]
}
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	0000030f 	.word	0x0000030f

08000d58 <_ZN6WS28124showEv>:


void WS2812::show(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	23d0      	movs	r3, #208	@ 0xd0
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	58d3      	ldr	r3, [r2, r3]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d106      	bne.n	8000d7a <_ZN6WS28124showEv+0x22>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2225      	movs	r2, #37	@ 0x25
 8000d72:	5c9b      	ldrb	r3, [r3, r2]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d001      	beq.n	8000d7e <_ZN6WS28124showEv+0x26>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <_ZN6WS28124showEv+0x28>
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d025      	beq.n	8000dd0 <_ZN6WS28124showEv+0x78>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	0010      	movs	r0, r2
 8000d90:	f002 f892 	bl	8002eb8 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	23d0      	movs	r3, #208	@ 0xd0
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e00d      	b.n	8000dc4 <_ZN6WS28124showEv+0x6c>
 8000da8:	200f      	movs	r0, #15
 8000daa:	183b      	adds	r3, r7, r0
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	492c      	ldr	r1, [pc, #176]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000db2:	18d3      	adds	r3, r2, r3
 8000db4:	185b      	adds	r3, r3, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dcc:	d9ec      	bls.n	8000da8 <_ZN6WS28124showEv+0x50>
        return;
 8000dce:	e045      	b.n	8000e5c <_ZN6WS28124showEv+0x104>
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e031      	b.n	8000e3a <_ZN6WS28124showEv+0xe2>
        wr_buf[i   ] = 0;
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4922      	ldr	r1, [pc, #136]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	18d3      	adds	r3, r2, r3
 8000dde:	185b      	adds	r3, r3, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3308      	adds	r3, #8
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	491e      	ldr	r1, [pc, #120]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000dec:	18d3      	adds	r3, r2, r3
 8000dee:	185b      	adds	r3, r3, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3310      	adds	r3, #16
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	491a      	ldr	r1, [pc, #104]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	185b      	adds	r3, r3, r1
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3318      	adds	r3, #24
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	4916      	ldr	r1, [pc, #88]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	185b      	adds	r3, r3, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3320      	adds	r3, #32
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4912      	ldr	r1, [pc, #72]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	185b      	adds	r3, r3, r1
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3328      	adds	r3, #40	@ 0x28
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	490e      	ldr	r1, [pc, #56]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	185b      	adds	r3, r3, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	3301      	adds	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d9ca      	bls.n	8000dd6 <_ZN6WS28124showEv+0x7e>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6858      	ldr	r0, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	0019      	movs	r1, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <_ZN6WS28124showEv+0x10c>)
 8000e4e:	189a      	adds	r2, r3, r2
 8000e50:	2330      	movs	r3, #48	@ 0x30
 8000e52:	f001 fe43 	bl	8002adc <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 8000e56:	2008      	movs	r0, #8
 8000e58:	f000 fb28 	bl	80014ac <HAL_Delay>
}
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	0000030f 	.word	0x0000030f

08000e68 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e01d      	b.n	8000eb2 <_ZN6WS28125clearEv+0x4a>
        rgb_buf[i][0]=0;
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	189b      	adds	r3, r3, r2
 8000e80:	18cb      	adds	r3, r1, r3
 8000e82:	330c      	adds	r3, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	189b      	adds	r3, r3, r2
 8000e92:	18cb      	adds	r3, r1, r3
 8000e94:	330d      	adds	r3, #13
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	189b      	adds	r3, r3, r2
 8000ea4:	18cb      	adds	r3, r1, r3
 8000ea6:	330e      	adds	r3, #14
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dddc      	ble.n	8000e76 <_ZN6WS28125clearEv+0xe>
    }
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <_ZN6WS28127set_hsvEhiii>:

void WS2812::set_hsv(uint8_t id, int h, int s, int v){
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b08e      	sub	sp, #56	@ 0x38
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	1c0a      	adds	r2, r1, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	int r,g,b;
	if (s == 0) {
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d106      	bne.n	8000ef0 <_ZN6WS28127set_hsvEhiii+0x28>
	    r = g = b = v;
 8000ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eee:	e077      	b.n	8000fe0 <_ZN6WS28127set_hsvEhiii+0x118>
	}else{
	    h = h * 6; // sector 0 to 5
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
	    int i = h / 256;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	da00      	bge.n	8000f04 <_ZN6WS28127set_hsvEhiii+0x3c>
 8000f02:	33ff      	adds	r3, #255	@ 0xff
 8000f04:	121b      	asrs	r3, r3, #8
 8000f06:	623b      	str	r3, [r7, #32]
	    int f = h % 256;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001008 <_ZN6WS28127set_hsvEhiii+0x140>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d503      	bpl.n	8000f18 <_ZN6WS28127set_hsvEhiii+0x50>
 8000f10:	3b01      	subs	r3, #1
 8000f12:	4a3e      	ldr	r2, [pc, #248]	@ (800100c <_ZN6WS28127set_hsvEhiii+0x144>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
	    int p = (v * (256 - s)) / 256;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	0052      	lsls	r2, r2, #1
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f24:	4353      	muls	r3, r2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da00      	bge.n	8000f2c <_ZN6WS28127set_hsvEhiii+0x64>
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	121b      	asrs	r3, r3, #8
 8000f2e:	61bb      	str	r3, [r7, #24]
	    int q = (v * (256 - (s * f) / 256)) / 256;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	69fa      	ldr	r2, [r7, #28]
 8000f34:	4353      	muls	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da00      	bge.n	8000f3c <_ZN6WS28127set_hsvEhiii+0x74>
 8000f3a:	33ff      	adds	r3, #255	@ 0xff
 8000f3c:	121b      	asrs	r3, r3, #8
 8000f3e:	425b      	negs	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	33ff      	adds	r3, #255	@ 0xff
 8000f44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f46:	4353      	muls	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da00      	bge.n	8000f4e <_ZN6WS28127set_hsvEhiii+0x86>
 8000f4c:	33ff      	adds	r3, #255	@ 0xff
 8000f4e:	121b      	asrs	r3, r3, #8
 8000f50:	617b      	str	r3, [r7, #20]
	    int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	0052      	lsls	r2, r2, #1
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4353      	muls	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da00      	bge.n	8000f64 <_ZN6WS28127set_hsvEhiii+0x9c>
 8000f62:	33ff      	adds	r3, #255	@ 0xff
 8000f64:	121b      	asrs	r3, r3, #8
 8000f66:	425b      	negs	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	33ff      	adds	r3, #255	@ 0xff
 8000f6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f6e:	4353      	muls	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da00      	bge.n	8000f76 <_ZN6WS28127set_hsvEhiii+0xae>
 8000f74:	33ff      	adds	r3, #255	@ 0xff
 8000f76:	121b      	asrs	r3, r3, #8
 8000f78:	613b      	str	r3, [r7, #16]

	    switch (i) {
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d828      	bhi.n	8000fd2 <_ZN6WS28127set_hsvEhiii+0x10a>
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	009a      	lsls	r2, r3, #2
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <_ZN6WS28127set_hsvEhiii+0x148>)
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	469f      	mov	pc, r3
	        case 0: r = v; g = t; b = p; break;
 8000f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f98:	e022      	b.n	8000fe0 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 1: r = q; g = v; b = p; break;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fa6:	e01b      	b.n	8000fe0 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 2: r = p; g = v; b = t; break;
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fb4:	e014      	b.n	8000fe0 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 3: r = p; g = q; b = v; break;
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc2:	e00d      	b.n	8000fe0 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 4: r = t; g = p; b = v; break;
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd0:	e006      	b.n	8000fe0 <_ZN6WS28127set_hsvEhiii+0x118>
	        default: r = v; g = p;b = q; break;
 8000fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fde:	46c0      	nop			@ (mov r8, r8)
	    }
	}
	set_rgb(id, r, g, b);
 8000fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe2:	b2dc      	uxtb	r4, r3
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe6:	b2dd      	uxtb	r5, r3
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	220b      	movs	r2, #11
 8000fee:	18ba      	adds	r2, r7, r2
 8000ff0:	7811      	ldrb	r1, [r2, #0]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	002b      	movs	r3, r5
 8000ff8:	0022      	movs	r2, r4
 8000ffa:	f000 f80b 	bl	8001014 <_ZN6WS28127set_rgbEhhhh>

}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b00c      	add	sp, #48	@ 0x30
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	800000ff 	.word	0x800000ff
 800100c:	ffffff00 	.word	0xffffff00
 8001010:	08004bd0 	.word	0x08004bd0

08001014 <_ZN6WS28127set_rgbEhhhh>:

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	000c      	movs	r4, r1
 800101e:	0010      	movs	r0, r2
 8001020:	0019      	movs	r1, r3
 8001022:	1cfb      	adds	r3, r7, #3
 8001024:	1c22      	adds	r2, r4, #0
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	1cbb      	adds	r3, r7, #2
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	1c7b      	adds	r3, r7, #1
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8001034:	1cfb      	adds	r3, r7, #3
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	0013      	movs	r3, r2
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	189b      	adds	r3, r3, r2
 8001040:	18cb      	adds	r3, r1, r3
 8001042:	330c      	adds	r3, #12
 8001044:	1cba      	adds	r2, r7, #2
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 800104a:	1cfb      	adds	r3, r7, #3
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	0013      	movs	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	189b      	adds	r3, r3, r2
 8001056:	18cb      	adds	r3, r1, r3
 8001058:	330d      	adds	r3, #13
 800105a:	1c7a      	adds	r2, r7, #1
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 8001060:	1cfb      	adds	r3, r7, #3
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	0013      	movs	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	189b      	adds	r3, r3, r2
 800106c:	18cb      	adds	r3, r1, r3
 800106e:	330e      	adds	r3, #14
 8001070:	001a      	movs	r2, r3
 8001072:	2318      	movs	r3, #24
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	7013      	strb	r3, [r2, #0]
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b003      	add	sp, #12
 8001080:	bd90      	pop	{r4, r7, pc}
	...

08001084 <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	23d0      	movs	r3, #208	@ 0xd0
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	58d2      	ldr	r2, [r2, r3]
 8001094:	2380      	movs	r3, #128	@ 0x80
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	429a      	cmp	r2, r3
 800109a:	d86e      	bhi.n	800117a <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e05e      	b.n	8001160 <_ZN6WS281217do_forwardRewriteEv+0xdc>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	23d0      	movs	r3, #208	@ 0xd0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	58d2      	ldr	r2, [r2, r3]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	0013      	movs	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	189b      	adds	r3, r3, r2
 80010b2:	18cb      	adds	r3, r1, r3
 80010b4:	330d      	adds	r3, #13
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	0019      	movs	r1, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2207      	movs	r2, #7
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4119      	asrs	r1, r3
 80010c2:	000b      	movs	r3, r1
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	d001      	beq.n	80010ce <_ZN6WS281217do_forwardRewriteEv+0x4a>
 80010ca:	200a      	movs	r0, #10
 80010cc:	e000      	b.n	80010d0 <_ZN6WS281217do_forwardRewriteEv+0x4c>
 80010ce:	2005      	movs	r0, #5
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4940      	ldr	r1, [pc, #256]	@ (80011d4 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	18d3      	adds	r3, r2, r3
 80010d8:	185b      	adds	r3, r3, r1
 80010da:	1c02      	adds	r2, r0, #0
 80010dc:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	23d0      	movs	r3, #208	@ 0xd0
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	58d2      	ldr	r2, [r2, r3]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	0013      	movs	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	189b      	adds	r3, r3, r2
 80010ee:	18cb      	adds	r3, r1, r3
 80010f0:	330c      	adds	r3, #12
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	0019      	movs	r1, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2207      	movs	r2, #7
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4119      	asrs	r1, r3
 80010fe:	000b      	movs	r3, r1
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	d001      	beq.n	800110a <_ZN6WS281217do_forwardRewriteEv+0x86>
 8001106:	200a      	movs	r0, #10
 8001108:	e000      	b.n	800110c <_ZN6WS281217do_forwardRewriteEv+0x88>
 800110a:	2005      	movs	r0, #5
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3308      	adds	r3, #8
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4930      	ldr	r1, [pc, #192]	@ (80011d4 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001114:	18d3      	adds	r3, r2, r3
 8001116:	185b      	adds	r3, r3, r1
 8001118:	1c02      	adds	r2, r0, #0
 800111a:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	23d0      	movs	r3, #208	@ 0xd0
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	58d2      	ldr	r2, [r2, r3]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	0013      	movs	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	189b      	adds	r3, r3, r2
 800112c:	18cb      	adds	r3, r1, r3
 800112e:	330e      	adds	r3, #14
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0019      	movs	r1, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2207      	movs	r2, #7
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4119      	asrs	r1, r3
 800113c:	000b      	movs	r3, r1
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	d001      	beq.n	8001148 <_ZN6WS281217do_forwardRewriteEv+0xc4>
 8001144:	200a      	movs	r0, #10
 8001146:	e000      	b.n	800114a <_ZN6WS281217do_forwardRewriteEv+0xc6>
 8001148:	2005      	movs	r0, #5
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3310      	adds	r3, #16
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	4920      	ldr	r1, [pc, #128]	@ (80011d4 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	185b      	adds	r3, r3, r1
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d99d      	bls.n	80010a2 <_ZN6WS281217do_forwardRewriteEv+0x1e>
        }
        wr_buf_p++;
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	23d0      	movs	r3, #208	@ 0xd0
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	58d3      	ldr	r3, [r2, r3]
 800116e:	1c59      	adds	r1, r3, #1
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	23d0      	movs	r3, #208	@ 0xd0
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 8001178:	e028      	b.n	80011cc <_ZN6WS281217do_forwardRewriteEv+0x148>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	23d0      	movs	r3, #208	@ 0xd0
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	58d2      	ldr	r2, [r2, r3]
 8001182:	2381      	movs	r3, #129	@ 0x81
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	429a      	cmp	r2, r3
 8001188:	d820      	bhi.n	80011cc <_ZN6WS281217do_forwardRewriteEv+0x148>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 800118a:	230b      	movs	r3, #11
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e00d      	b.n	80011b0 <_ZN6WS281217do_forwardRewriteEv+0x12c>
 8001194:	200b      	movs	r0, #11
 8001196:	183b      	adds	r3, r7, r0
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	185b      	adds	r3, r3, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	183b      	adds	r3, r7, r0
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	183b      	adds	r3, r7, r0
 80011ac:	3201      	adds	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	230b      	movs	r3, #11
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b17      	cmp	r3, #23
 80011b8:	d9ec      	bls.n	8001194 <_ZN6WS281217do_forwardRewriteEv+0x110>
        wr_buf_p++;
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	23d0      	movs	r3, #208	@ 0xd0
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	58d3      	ldr	r3, [r2, r3]
 80011c2:	1c59      	adds	r1, r3, #1
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	23d0      	movs	r3, #208	@ 0xd0
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	50d1      	str	r1, [r2, r3]
}
 80011cc:	46c0      	nop			@ (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0000030f 	.word	0x0000030f

080011d8 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	23d0      	movs	r3, #208	@ 0xd0
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	58d2      	ldr	r2, [r2, r3]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d86f      	bhi.n	80012d0 <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e05f      	b.n	80012b6 <_ZN6WS281214do_backRewriteEv+0xde>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	23d0      	movs	r3, #208	@ 0xd0
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	58d2      	ldr	r2, [r2, r3]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	0013      	movs	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	189b      	adds	r3, r3, r2
 8001206:	18cb      	adds	r3, r1, r3
 8001208:	330d      	adds	r3, #13
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0019      	movs	r1, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2207      	movs	r2, #7
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4119      	asrs	r1, r3
 8001216:	000b      	movs	r3, r1
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	d001      	beq.n	8001222 <_ZN6WS281214do_backRewriteEv+0x4a>
 800121e:	200a      	movs	r0, #10
 8001220:	e000      	b.n	8001224 <_ZN6WS281214do_backRewriteEv+0x4c>
 8001222:	2005      	movs	r0, #5
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3318      	adds	r3, #24
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	4947      	ldr	r1, [pc, #284]	@ (8001348 <_ZN6WS281214do_backRewriteEv+0x170>)
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	185b      	adds	r3, r3, r1
 8001230:	1c02      	adds	r2, r0, #0
 8001232:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	23d0      	movs	r3, #208	@ 0xd0
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	58d2      	ldr	r2, [r2, r3]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	0013      	movs	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	189b      	adds	r3, r3, r2
 8001244:	18cb      	adds	r3, r1, r3
 8001246:	330c      	adds	r3, #12
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0019      	movs	r1, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2207      	movs	r2, #7
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4119      	asrs	r1, r3
 8001254:	000b      	movs	r3, r1
 8001256:	2201      	movs	r2, #1
 8001258:	4013      	ands	r3, r2
 800125a:	d001      	beq.n	8001260 <_ZN6WS281214do_backRewriteEv+0x88>
 800125c:	200a      	movs	r0, #10
 800125e:	e000      	b.n	8001262 <_ZN6WS281214do_backRewriteEv+0x8a>
 8001260:	2005      	movs	r0, #5
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3320      	adds	r3, #32
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4937      	ldr	r1, [pc, #220]	@ (8001348 <_ZN6WS281214do_backRewriteEv+0x170>)
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	185b      	adds	r3, r3, r1
 800126e:	1c02      	adds	r2, r0, #0
 8001270:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	23d0      	movs	r3, #208	@ 0xd0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	58d2      	ldr	r2, [r2, r3]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	0013      	movs	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	189b      	adds	r3, r3, r2
 8001282:	18cb      	adds	r3, r1, r3
 8001284:	330e      	adds	r3, #14
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	0019      	movs	r1, r3
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2207      	movs	r2, #7
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4119      	asrs	r1, r3
 8001292:	000b      	movs	r3, r1
 8001294:	2201      	movs	r2, #1
 8001296:	4013      	ands	r3, r2
 8001298:	d001      	beq.n	800129e <_ZN6WS281214do_backRewriteEv+0xc6>
 800129a:	200a      	movs	r0, #10
 800129c:	e000      	b.n	80012a0 <_ZN6WS281214do_backRewriteEv+0xc8>
 800129e:	2005      	movs	r0, #5
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3328      	adds	r3, #40	@ 0x28
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4928      	ldr	r1, [pc, #160]	@ (8001348 <_ZN6WS281214do_backRewriteEv+0x170>)
 80012a8:	18d3      	adds	r3, r2, r3
 80012aa:	185b      	adds	r3, r3, r1
 80012ac:	1c02      	adds	r2, r0, #0
 80012ae:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	d99c      	bls.n	80011f6 <_ZN6WS281214do_backRewriteEv+0x1e>
        }
        wr_buf_p++;
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	23d0      	movs	r3, #208	@ 0xd0
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	58d3      	ldr	r3, [r2, r3]
 80012c4:	1c59      	adds	r1, r3, #1
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	23d0      	movs	r3, #208	@ 0xd0
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 80012ce:	e036      	b.n	800133e <_ZN6WS281214do_backRewriteEv+0x166>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23d0      	movs	r3, #208	@ 0xd0
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	58d2      	ldr	r2, [r2, r3]
 80012d8:	2381      	movs	r3, #129	@ 0x81
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	429a      	cmp	r2, r3
 80012de:	d821      	bhi.n	8001324 <_ZN6WS281214do_backRewriteEv+0x14c>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 80012e0:	230b      	movs	r3, #11
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2218      	movs	r2, #24
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e00d      	b.n	8001306 <_ZN6WS281214do_backRewriteEv+0x12e>
 80012ea:	200b      	movs	r0, #11
 80012ec:	183b      	adds	r3, r7, r0
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4915      	ldr	r1, [pc, #84]	@ (8001348 <_ZN6WS281214do_backRewriteEv+0x170>)
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	185b      	adds	r3, r3, r1
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	183b      	adds	r3, r7, r0
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	183b      	adds	r3, r7, r0
 8001302:	3201      	adds	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	230b      	movs	r3, #11
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b2f      	cmp	r3, #47	@ 0x2f
 800130e:	d9ec      	bls.n	80012ea <_ZN6WS281214do_backRewriteEv+0x112>
        wr_buf_p++;
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	23d0      	movs	r3, #208	@ 0xd0
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	58d3      	ldr	r3, [r2, r3]
 8001318:	1c59      	adds	r1, r3, #1
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	23d0      	movs	r3, #208	@ 0xd0
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	50d1      	str	r1, [r2, r3]
}
 8001322:	e00c      	b.n	800133e <_ZN6WS281214do_backRewriteEv+0x166>
        wr_buf_p = 0;
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	23d0      	movs	r3, #208	@ 0xd0
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	2100      	movs	r1, #0
 800132c:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	0019      	movs	r1, r3
 8001338:	0010      	movs	r0, r2
 800133a:	f001 fdbd 	bl	8002eb8 <HAL_TIM_PWM_Stop_DMA>
}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	0000030f 	.word	0x0000030f

0800134c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800134e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001350:	f7ff fcd6 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopForever+0x6>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopForever+0xe>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopForever+0x16>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800137a:	f003 fbc9 	bl	8004b10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800137e:	f7fe ffdf 	bl	8000340 <main>

08001382 <LoopForever>:

LoopForever:
  b LoopForever
 8001382:	e7fe      	b.n	8001382 <LoopForever>
  ldr   r0, =_estack
 8001384:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001390:	08004c5c 	.word	0x08004c5c
  ldr r2, =_sbss
 8001394:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001398:	20000578 	.word	0x20000578

0800139c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_Init+0x3c>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_Init+0x3c>)
 80013b2:	2180      	movs	r1, #128	@ 0x80
 80013b4:	0049      	lsls	r1, r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f810 	bl	80013e0 <HAL_InitTick>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d003      	beq.n	80013cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e001      	b.n	80013d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80013cc:	f7ff fb3e 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_InitTick+0x88>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d02b      	beq.n	8001450 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013f8:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <HAL_InitTick+0x8c>)
 80013fa:	681c      	ldr	r4, [r3, #0]
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_InitTick+0x88>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	0019      	movs	r1, r3
 8001402:	23fa      	movs	r3, #250	@ 0xfa
 8001404:	0098      	lsls	r0, r3, #2
 8001406:	f7fe fe7b 	bl	8000100 <__udivsi3>
 800140a:	0003      	movs	r3, r0
 800140c:	0019      	movs	r1, r3
 800140e:	0020      	movs	r0, r4
 8001410:	f7fe fe76 	bl	8000100 <__udivsi3>
 8001414:	0003      	movs	r3, r0
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f93d 	bl	8001696 <HAL_SYSTICK_Config>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d112      	bne.n	8001446 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d80a      	bhi.n	800143c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2301      	movs	r3, #1
 800142a:	425b      	negs	r3, r3
 800142c:	2200      	movs	r2, #0
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f90c 	bl	800164c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_InitTick+0x90>)
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e00d      	b.n	8001458 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800143c:	230f      	movs	r3, #15
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e008      	b.n	8001458 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e003      	b.n	8001458 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001458:	230f      	movs	r3, #15
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781b      	ldrb	r3, [r3, #0]
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b005      	add	sp, #20
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_IncTick+0x1c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	001a      	movs	r2, r3
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_IncTick+0x20>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	18d2      	adds	r2, r2, r3
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_IncTick+0x20>)
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	20000008 	.word	0x20000008
 8001494:	20000574 	.word	0x20000574

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b02      	ldr	r3, [pc, #8]	@ (80014a8 <HAL_GetTick+0x10>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	20000574 	.word	0x20000574

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff fff0 	bl	8001498 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3301      	adds	r3, #1
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	001a      	movs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	f7ff ffe0 	bl	8001498 <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b004      	add	sp, #16
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	20000008 	.word	0x20000008

080014f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	0002      	movs	r2, r0
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b7f      	cmp	r3, #127	@ 0x7f
 8001506:	d809      	bhi.n	800151c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	001a      	movs	r2, r3
 800150e:	231f      	movs	r3, #31
 8001510:	401a      	ands	r2, r3
 8001512:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_EnableIRQ+0x30>)
 8001514:	2101      	movs	r1, #1
 8001516:	4091      	lsls	r1, r2
 8001518:	000a      	movs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	0002      	movs	r2, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001536:	1dfb      	adds	r3, r7, #7
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b7f      	cmp	r3, #127	@ 0x7f
 800153c:	d828      	bhi.n	8001590 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800153e:	4a2f      	ldr	r2, [pc, #188]	@ (80015fc <__NVIC_SetPriority+0xd4>)
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b25b      	sxtb	r3, r3
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	33c0      	adds	r3, #192	@ 0xc0
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	589b      	ldr	r3, [r3, r2]
 800154e:	1dfa      	adds	r2, r7, #7
 8001550:	7812      	ldrb	r2, [r2, #0]
 8001552:	0011      	movs	r1, r2
 8001554:	2203      	movs	r2, #3
 8001556:	400a      	ands	r2, r1
 8001558:	00d2      	lsls	r2, r2, #3
 800155a:	21ff      	movs	r1, #255	@ 0xff
 800155c:	4091      	lsls	r1, r2
 800155e:	000a      	movs	r2, r1
 8001560:	43d2      	mvns	r2, r2
 8001562:	401a      	ands	r2, r3
 8001564:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	019b      	lsls	r3, r3, #6
 800156a:	22ff      	movs	r2, #255	@ 0xff
 800156c:	401a      	ands	r2, r3
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0018      	movs	r0, r3
 8001574:	2303      	movs	r3, #3
 8001576:	4003      	ands	r3, r0
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800157c:	481f      	ldr	r0, [pc, #124]	@ (80015fc <__NVIC_SetPriority+0xd4>)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b25b      	sxtb	r3, r3
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	430a      	orrs	r2, r1
 8001588:	33c0      	adds	r3, #192	@ 0xc0
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800158e:	e031      	b.n	80015f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001590:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <__NVIC_SetPriority+0xd8>)
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	0019      	movs	r1, r3
 8001598:	230f      	movs	r3, #15
 800159a:	400b      	ands	r3, r1
 800159c:	3b08      	subs	r3, #8
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3306      	adds	r3, #6
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	3304      	adds	r3, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1dfa      	adds	r2, r7, #7
 80015ac:	7812      	ldrb	r2, [r2, #0]
 80015ae:	0011      	movs	r1, r2
 80015b0:	2203      	movs	r2, #3
 80015b2:	400a      	ands	r2, r1
 80015b4:	00d2      	lsls	r2, r2, #3
 80015b6:	21ff      	movs	r1, #255	@ 0xff
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	43d2      	mvns	r2, r2
 80015be:	401a      	ands	r2, r3
 80015c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	22ff      	movs	r2, #255	@ 0xff
 80015c8:	401a      	ands	r2, r3
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	0018      	movs	r0, r3
 80015d0:	2303      	movs	r3, #3
 80015d2:	4003      	ands	r3, r0
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d8:	4809      	ldr	r0, [pc, #36]	@ (8001600 <__NVIC_SetPriority+0xd8>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	001c      	movs	r4, r3
 80015e0:	230f      	movs	r3, #15
 80015e2:	4023      	ands	r3, r4
 80015e4:	3b08      	subs	r3, #8
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	430a      	orrs	r2, r1
 80015ea:	3306      	adds	r3, #6
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	18c3      	adds	r3, r0, r3
 80015f0:	3304      	adds	r3, #4
 80015f2:	601a      	str	r2, [r3, #0]
}
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b003      	add	sp, #12
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	045b      	lsls	r3, r3, #17
 8001614:	429a      	cmp	r2, r3
 8001616:	d301      	bcc.n	800161c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001618:	2301      	movs	r3, #1
 800161a:	e010      	b.n	800163e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <SysTick_Config+0x44>)
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	3a01      	subs	r2, #1
 8001622:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001624:	2301      	movs	r3, #1
 8001626:	425b      	negs	r3, r3
 8001628:	2103      	movs	r1, #3
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff ff7c 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <SysTick_Config+0x44>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <SysTick_Config+0x44>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	210f      	movs	r1, #15
 8001658:	187b      	adds	r3, r7, r1
 800165a:	1c02      	adds	r2, r0, #0
 800165c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	187b      	adds	r3, r7, r1
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b25b      	sxtb	r3, r3
 8001666:	0011      	movs	r1, r2
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	0002      	movs	r2, r0
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25b      	sxtb	r3, r3
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff ff33 	bl	80014f4 <__NVIC_EnableIRQ>
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff ffaf 	bl	8001604 <SysTick_Config>
 80016a6:	0003      	movs	r3, r0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e077      	b.n	80017b2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a3d      	ldr	r2, [pc, #244]	@ (80017bc <HAL_DMA_Init+0x10c>)
 80016c8:	4694      	mov	ip, r2
 80016ca:	4463      	add	r3, ip
 80016cc:	2114      	movs	r1, #20
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7fe fd16 	bl	8000100 <__udivsi3>
 80016d4:	0003      	movs	r3, r0
 80016d6:	009a      	lsls	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2225      	movs	r2, #37	@ 0x25
 80016e0:	2102      	movs	r1, #2
 80016e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4934      	ldr	r1, [pc, #208]	@ (80017c0 <HAL_DMA_Init+0x110>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0018      	movs	r0, r3
 800172e:	f000 fa2b 	bl	8001b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	01db      	lsls	r3, r3, #7
 800173a:	429a      	cmp	r2, r3
 800173c:	d102      	bne.n	8001744 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174c:	213f      	movs	r1, #63	@ 0x3f
 800174e:	400a      	ands	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800175a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d011      	beq.n	8001788 <HAL_DMA_Init+0xd8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d80d      	bhi.n	8001788 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fa36 	bl	8001be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e008      	b.n	800179a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2225      	movs	r2, #37	@ 0x25
 80017a4:	2101      	movs	r1, #1
 80017a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2224      	movs	r2, #36	@ 0x24
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	bffdfff8 	.word	0xbffdfff8
 80017c0:	ffff800f 	.word	0xffff800f

080017c4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017d2:	2317      	movs	r3, #23
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2224      	movs	r2, #36	@ 0x24
 80017de:	5c9b      	ldrb	r3, [r3, r2]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_DMA_Start_IT+0x24>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e06f      	b.n	80018c8 <HAL_DMA_Start_IT+0x104>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2224      	movs	r2, #36	@ 0x24
 80017ec:	2101      	movs	r1, #1
 80017ee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2225      	movs	r2, #37	@ 0x25
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d157      	bne.n	80018ac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2225      	movs	r2, #37	@ 0x25
 8001800:	2102      	movs	r1, #2
 8001802:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	438a      	bics	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f971 	bl	8001b08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	210e      	movs	r1, #14
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00f      	b.n	8001860 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2104      	movs	r1, #4
 800184c:	438a      	bics	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	210a      	movs	r1, #10
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	@ 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	d008      	beq.n	8001880 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	0049      	lsls	r1, r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	0049      	lsls	r1, r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e00a      	b.n	80018c2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2224      	movs	r2, #36	@ 0x24
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80018ba:	2317      	movs	r3, #23
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80018c2:	2317      	movs	r3, #23
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	781b      	ldrb	r3, [r3, #0]
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b006      	add	sp, #24
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	210f      	movs	r1, #15
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2225      	movs	r2, #37	@ 0x25
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d006      	beq.n	80018fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2204      	movs	r2, #4
 80018f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e049      	b.n	800198e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210e      	movs	r1, #14
 8001906:	438a      	bics	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	438a      	bics	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	491d      	ldr	r1, [pc, #116]	@ (800199c <HAL_DMA_Abort_IT+0xcc>)
 8001926:	400a      	ands	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_DMA_Abort_IT+0xd0>)
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	221c      	movs	r2, #28
 8001934:	4013      	ands	r3, r2
 8001936:	2201      	movs	r2, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_DMA_Abort_IT+0xd0>)
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001948:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195c:	490f      	ldr	r1, [pc, #60]	@ (800199c <HAL_DMA_Abort_IT+0xcc>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800196a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2225      	movs	r2, #37	@ 0x25
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	@ 0x24
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	0010      	movs	r0, r2
 800198c:	4798      	blx	r3
    }
  }
  return status;
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	fffffeff 	.word	0xfffffeff
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80019ac:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	221c      	movs	r2, #28
 80019c0:	4013      	ands	r3, r2
 80019c2:	2204      	movs	r2, #4
 80019c4:	409a      	lsls	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	d027      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x7a>
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2204      	movs	r2, #4
 80019d2:	4013      	ands	r3, r2
 80019d4:	d023      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2220      	movs	r2, #32
 80019de:	4013      	ands	r3, r2
 80019e0:	d107      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2104      	movs	r1, #4
 80019ee:	438a      	bics	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	221c      	movs	r2, #28
 80019fc:	4013      	ands	r3, r2
 80019fe:	2204      	movs	r2, #4
 8001a00:	409a      	lsls	r2, r3
 8001a02:	4b40      	ldr	r3, [pc, #256]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d100      	bne.n	8001a12 <HAL_DMA_IRQHandler+0x6e>
 8001a10:	e073      	b.n	8001afa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	0010      	movs	r0, r2
 8001a1a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001a1c:	e06d      	b.n	8001afa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	221c      	movs	r2, #28
 8001a24:	4013      	ands	r3, r2
 8001a26:	2202      	movs	r2, #2
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d02e      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xec>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d02a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	4013      	ands	r3, r2
 8001a44:	d10b      	bne.n	8001a5e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	210a      	movs	r1, #10
 8001a52:	438a      	bics	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2225      	movs	r2, #37	@ 0x25
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001a5e:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	221c      	movs	r2, #28
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	@ 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d03a      	beq.n	8001afa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001a8e:	e034      	b.n	8001afa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	221c      	movs	r2, #28
 8001a96:	4013      	ands	r3, r2
 8001a98:	2208      	movs	r2, #8
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d02b      	beq.n	8001afc <HAL_DMA_IRQHandler+0x158>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d027      	beq.n	8001afc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	210e      	movs	r1, #14
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	221c      	movs	r2, #28
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2201      	movs	r2, #1
 8001aca:	409a      	lsls	r2, r3
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_DMA_IRQHandler+0x160>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2225      	movs	r2, #37	@ 0x25
 8001adc:	2101      	movs	r1, #1
 8001ade:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	@ 0x24
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	0010      	movs	r0, r2
 8001af8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	46c0      	nop			@ (mov r8, r8)
}
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40020000 	.word	0x40020000

08001b08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b30:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <DMA_SetConfig+0x7c>)
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	221c      	movs	r2, #28
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2201      	movs	r2, #1
 8001b40:	409a      	lsls	r2, r3
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <DMA_SetConfig+0x7c>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d108      	bne.n	8001b6a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b68:	e007      	b.n	8001b7a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	60da      	str	r2, [r3, #12]
}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	40020000 	.word	0x40020000

08001b88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b98:	4694      	mov	ip, r2
 8001b9a:	4463      	add	r3, ip
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	001a      	movs	r2, r3
 8001baa:	23ff      	movs	r3, #255	@ 0xff
 8001bac:	4013      	ands	r3, r2
 8001bae:	3b08      	subs	r3, #8
 8001bb0:	2114      	movs	r1, #20
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7fe faa4 	bl	8000100 <__udivsi3>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001bc0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	221f      	movs	r2, #31
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2201      	movs	r2, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	10008200 	.word	0x10008200
 8001bdc:	40020880 	.word	0x40020880

08001be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	223f      	movs	r2, #63	@ 0x3f
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bf6:	4694      	mov	ip, r2
 8001bf8:	4463      	add	r3, ip
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	001a      	movs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2201      	movs	r2, #1
 8001c12:	409a      	lsls	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	1000823f 	.word	0x1000823f
 8001c24:	40020940 	.word	0x40020940

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	e147      	b.n	8001ec8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4091      	lsls	r1, r2
 8001c42:	000a      	movs	r2, r1
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d100      	bne.n	8001c50 <HAL_GPIO_Init+0x28>
 8001c4e:	e138      	b.n	8001ec2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d005      	beq.n	8001c68 <HAL_GPIO_Init+0x40>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d130      	bne.n	8001cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	409a      	lsls	r2, r3
 8001c76:	0013      	movs	r3, r2
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d017      	beq.n	8001d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d123      	bne.n	8001d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	0092      	lsls	r2, r2, #2
 8001d1c:	58d3      	ldr	r3, [r2, r3]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2207      	movs	r2, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	0013      	movs	r3, r2
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2107      	movs	r1, #7
 8001d3e:	400b      	ands	r3, r1
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	6939      	ldr	r1, [r7, #16]
 8001d58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	409a      	lsls	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	401a      	ands	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	23c0      	movs	r3, #192	@ 0xc0
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	4013      	ands	r3, r2
 8001d98:	d100      	bne.n	8001d9c <HAL_GPIO_Init+0x174>
 8001d9a:	e092      	b.n	8001ec2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3318      	adds	r3, #24
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	589b      	ldr	r3, [r3, r2]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	220f      	movs	r2, #15
 8001db4:	409a      	lsls	r2, r3
 8001db6:	0013      	movs	r3, r2
 8001db8:	43da      	mvns	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	23a0      	movs	r3, #160	@ 0xa0
 8001dc4:	05db      	lsls	r3, r3, #23
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x1ca>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <HAL_GPIO_Init+0x2bc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x1c6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a44      	ldr	r2, [pc, #272]	@ (8001ee8 <HAL_GPIO_Init+0x2c0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x1c2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a43      	ldr	r2, [pc, #268]	@ (8001eec <HAL_GPIO_Init+0x2c4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x1be>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x1cc>
 8001de6:	2305      	movs	r3, #5
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x1cc>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x1cc>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x1cc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	2103      	movs	r1, #3
 8001df8:	400a      	ands	r2, r1
 8001dfa:	00d2      	lsls	r2, r2, #3
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e04:	4936      	ldr	r1, [pc, #216]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e12:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	2380      	movs	r3, #128	@ 0x80
 8001e28:	035b      	lsls	r3, r3, #13
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2380      	movs	r3, #128	@ 0x80
 8001e52:	039b      	lsls	r3, r3, #14
 8001e54:	4013      	ands	r3, r2
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e68:	2384      	movs	r3, #132	@ 0x84
 8001e6a:	58d3      	ldr	r3, [r2, r3]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43da      	mvns	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8c:	4914      	ldr	r1, [pc, #80]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e8e:	2284      	movs	r2, #132	@ 0x84
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e94:	4a12      	ldr	r2, [pc, #72]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	58d3      	ldr	r3, [r2, r3]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eba:	4909      	ldr	r1, [pc, #36]	@ (8001ee0 <HAL_GPIO_Init+0x2b8>)
 8001ebc:	2280      	movs	r2, #128	@ 0x80
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	40da      	lsrs	r2, r3
 8001ed0:	1e13      	subs	r3, r2, #0
 8001ed2:	d000      	beq.n	8001ed6 <HAL_GPIO_Init+0x2ae>
 8001ed4:	e6b0      	b.n	8001c38 <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46c0      	nop			@ (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b006      	add	sp, #24
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	50000400 	.word	0x50000400
 8001ee8:	50000800 	.word	0x50000800
 8001eec:	50000c00 	.word	0x50000c00

08001ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	000a      	movs	r2, r1
 8001efa:	1cbb      	adds	r3, r7, #2
 8001efc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	1cba      	adds	r2, r7, #2
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	4013      	ands	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f14:	230f      	movs	r3, #15
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
}
 8001f22:	0018      	movs	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b004      	add	sp, #16
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	0008      	movs	r0, r1
 8001f34:	0011      	movs	r1, r2
 8001f36:	1cbb      	adds	r3, r7, #2
 8001f38:	1c02      	adds	r2, r0, #0
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	1c7b      	adds	r3, r7, #1
 8001f3e:	1c0a      	adds	r2, r1, #0
 8001f40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f42:	1c7b      	adds	r3, r7, #1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4a:	1cbb      	adds	r3, r7, #2
 8001f4c:	881a      	ldrh	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f52:	e003      	b.n	8001f5c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f54:	1cbb      	adds	r3, r7, #2
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f6c:	4b19      	ldr	r3, [pc, #100]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d11f      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f88:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	189b      	adds	r3, r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4912      	ldr	r1, [pc, #72]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7fe f8b2 	bl	8000100 <__udivsi3>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa2:	e008      	b.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e001      	b.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e009      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d0ed      	beq.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	fffff9ff 	.word	0xfffff9ff
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	000f4240 	.word	0x000f4240

08001fe4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	23e0      	movs	r3, #224	@ 0xe0
 8001fee:	01db      	lsls	r3, r3, #7
 8001ff0:	4013      	ands	r3, r2
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e2f3      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x1e>
 8002018:	e07c      	b.n	8002114 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4bc3      	ldr	r3, [pc, #780]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2238      	movs	r2, #56	@ 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4bc0      	ldr	r3, [pc, #768]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d102      	bne.n	800203a <HAL_RCC_OscConfig+0x3e>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d002      	beq.n	8002040 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	4bb9      	ldr	r3, [pc, #740]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	d062      	beq.n	8002112 <HAL_RCC_OscConfig+0x116>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d15e      	bne.n	8002112 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e2ce      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x78>
 8002064:	4bb0      	ldr	r3, [pc, #704]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4baf      	ldr	r3, [pc, #700]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	0249      	lsls	r1, r1, #9
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e020      	b.n	80020b6 <HAL_RCC_OscConfig+0xba>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	23a0      	movs	r3, #160	@ 0xa0
 800207a:	02db      	lsls	r3, r3, #11
 800207c:	429a      	cmp	r2, r3
 800207e:	d10e      	bne.n	800209e <HAL_RCC_OscConfig+0xa2>
 8002080:	4ba9      	ldr	r3, [pc, #676]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4ba8      	ldr	r3, [pc, #672]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	02c9      	lsls	r1, r1, #11
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	4ba6      	ldr	r3, [pc, #664]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4ba5      	ldr	r3, [pc, #660]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	0249      	lsls	r1, r1, #9
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0xba>
 800209e:	4ba2      	ldr	r3, [pc, #648]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4ba1      	ldr	r3, [pc, #644]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	49a1      	ldr	r1, [pc, #644]	@ (800232c <HAL_RCC_OscConfig+0x330>)
 80020a6:	400a      	ands	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	4b9f      	ldr	r3, [pc, #636]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b9e      	ldr	r3, [pc, #632]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80020b0:	499f      	ldr	r1, [pc, #636]	@ (8002330 <HAL_RCC_OscConfig+0x334>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d014      	beq.n	80020e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff f9eb 	bl	8001498 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c8:	f7ff f9e6 	bl	8001498 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	@ 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e28d      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	4b93      	ldr	r3, [pc, #588]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	029b      	lsls	r3, r3, #10
 80020e2:	4013      	ands	r3, r2
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xcc>
 80020e6:	e015      	b.n	8002114 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7ff f9d6 	bl	8001498 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f2:	f7ff f9d1 	bl	8001498 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	@ 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e278      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002104:	4b88      	ldr	r3, [pc, #544]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	4013      	ands	r3, r2
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0xf6>
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002112:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d100      	bne.n	8002120 <HAL_RCC_OscConfig+0x124>
 800211e:	e099      	b.n	8002254 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002120:	4b81      	ldr	r3, [pc, #516]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2238      	movs	r2, #56	@ 0x38
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212a:	4b7f      	ldr	r3, [pc, #508]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d102      	bne.n	8002140 <HAL_RCC_OscConfig+0x144>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d002      	beq.n	8002146 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d135      	bne.n	80021b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002146:	4b78      	ldr	r3, [pc, #480]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4013      	ands	r3, r2
 8002150:	d005      	beq.n	800215e <HAL_RCC_OscConfig+0x162>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e24b      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b72      	ldr	r3, [pc, #456]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a74      	ldr	r2, [pc, #464]	@ (8002334 <HAL_RCC_OscConfig+0x338>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	4b6e      	ldr	r3, [pc, #440]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d112      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800217a:	4b6b      	ldr	r3, [pc, #428]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_RCC_OscConfig+0x33c>)
 8002180:	4013      	ands	r3, r2
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	4b67      	ldr	r3, [pc, #412]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800218e:	4b66      	ldr	r3, [pc, #408]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0adb      	lsrs	r3, r3, #11
 8002194:	2207      	movs	r2, #7
 8002196:	4013      	ands	r3, r2
 8002198:	4a68      	ldr	r2, [pc, #416]	@ (800233c <HAL_RCC_OscConfig+0x340>)
 800219a:	40da      	lsrs	r2, r3
 800219c:	4b68      	ldr	r3, [pc, #416]	@ (8002340 <HAL_RCC_OscConfig+0x344>)
 800219e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021a0:	4b68      	ldr	r3, [pc, #416]	@ (8002344 <HAL_RCC_OscConfig+0x348>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff f91b 	bl	80013e0 <HAL_InitTick>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d051      	beq.n	8002252 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e221      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d030      	beq.n	800221c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5e      	ldr	r2, [pc, #376]	@ (8002338 <HAL_RCC_OscConfig+0x33c>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b57      	ldr	r3, [pc, #348]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021ce:	4b56      	ldr	r3, [pc, #344]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b55      	ldr	r3, [pc, #340]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80021d4:	2180      	movs	r1, #128	@ 0x80
 80021d6:	0049      	lsls	r1, r1, #1
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f95c 	bl	8001498 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff f957 	bl	8001498 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1fe      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4013      	ands	r3, r2
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b48      	ldr	r3, [pc, #288]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a4a      	ldr	r2, [pc, #296]	@ (8002334 <HAL_RCC_OscConfig+0x338>)
 800220a:	4013      	ands	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	021a      	lsls	r2, r3, #8
 8002214:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	e01b      	b.n	8002254 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800221c:	4b42      	ldr	r3, [pc, #264]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002222:	4949      	ldr	r1, [pc, #292]	@ (8002348 <HAL_RCC_OscConfig+0x34c>)
 8002224:	400a      	ands	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f936 	bl	8001498 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff f931 	bl	8001498 <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1d8      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002244:	4b38      	ldr	r3, [pc, #224]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4013      	ands	r3, r2
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x236>
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002252:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2208      	movs	r2, #8
 800225a:	4013      	ands	r3, r2
 800225c:	d047      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800225e:	4b32      	ldr	r3, [pc, #200]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2238      	movs	r2, #56	@ 0x38
 8002264:	4013      	ands	r3, r2
 8002266:	2b18      	cmp	r3, #24
 8002268:	d10a      	bne.n	8002280 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800226a:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800226c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d138      	bne.n	80022ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e1ba      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d019      	beq.n	80022bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002288:	4b27      	ldr	r3, [pc, #156]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800228a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800228c:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 800228e:	2101      	movs	r1, #1
 8002290:	430a      	orrs	r2, r1
 8002292:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff f900 	bl	8001498 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7ff f8fb 	bl	8001498 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1a2      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d0f1      	beq.n	800229e <HAL_RCC_OscConfig+0x2a2>
 80022ba:	e018      	b.n	80022ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80022be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022c0:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	438a      	bics	r2, r1
 80022c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff f8e6 	bl	8001498 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff f8e1 	bl	8001498 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e188      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f1      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2204      	movs	r2, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_OscConfig+0x2fe>
 80022f8:	e0c6      	b.n	8002488 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	231f      	movs	r3, #31
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2238      	movs	r2, #56	@ 0x38
 8002308:	4013      	ands	r3, r2
 800230a:	2b20      	cmp	r3, #32
 800230c:	d11e      	bne.n	800234c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_RCC_OscConfig+0x32c>)
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	2202      	movs	r2, #2
 8002314:	4013      	ands	r3, r2
 8002316:	d100      	bne.n	800231a <HAL_RCC_OscConfig+0x31e>
 8002318:	e0b6      	b.n	8002488 <HAL_RCC_OscConfig+0x48c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d000      	beq.n	8002324 <HAL_RCC_OscConfig+0x328>
 8002322:	e0b1      	b.n	8002488 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e166      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
 8002328:	40021000 	.word	0x40021000
 800232c:	fffeffff 	.word	0xfffeffff
 8002330:	fffbffff 	.word	0xfffbffff
 8002334:	ffff80ff 	.word	0xffff80ff
 8002338:	ffffc7ff 	.word	0xffffc7ff
 800233c:	00f42400 	.word	0x00f42400
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004
 8002348:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800234c:	4bac      	ldr	r3, [pc, #688]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800234e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	055b      	lsls	r3, r3, #21
 8002354:	4013      	ands	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_RCC_OscConfig+0x360>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x362>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d011      	beq.n	8002386 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4ba7      	ldr	r3, [pc, #668]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002366:	4ba6      	ldr	r3, [pc, #664]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0549      	lsls	r1, r1, #21
 800236c:	430a      	orrs	r2, r1
 800236e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002370:	4ba3      	ldr	r3, [pc, #652]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002372:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	055b      	lsls	r3, r3, #21
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800237e:	231f      	movs	r3, #31
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002386:	4b9f      	ldr	r3, [pc, #636]	@ (8002604 <HAL_RCC_OscConfig+0x608>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d11a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002392:	4b9c      	ldr	r3, [pc, #624]	@ (8002604 <HAL_RCC_OscConfig+0x608>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b9b      	ldr	r3, [pc, #620]	@ (8002604 <HAL_RCC_OscConfig+0x608>)
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	0049      	lsls	r1, r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023a0:	f7ff f87a 	bl	8001498 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7ff f875 	bl	8001498 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e11c      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b91      	ldr	r3, [pc, #580]	@ (8002604 <HAL_RCC_OscConfig+0x608>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	@ 0x80
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4013      	ands	r3, r2
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x3e2>
 80023d0:	4b8b      	ldr	r3, [pc, #556]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80023d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	430a      	orrs	r2, r1
 80023da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023dc:	e01c      	b.n	8002418 <HAL_RCC_OscConfig+0x41c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x404>
 80023e6:	4b86      	ldr	r3, [pc, #536]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80023e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023ea:	4b85      	ldr	r3, [pc, #532]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80023ec:	2104      	movs	r1, #4
 80023ee:	430a      	orrs	r2, r1
 80023f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023f2:	4b83      	ldr	r3, [pc, #524]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80023f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023f6:	4b82      	ldr	r3, [pc, #520]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	430a      	orrs	r2, r1
 80023fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x41c>
 8002400:	4b7f      	ldr	r3, [pc, #508]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002402:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002404:	4b7e      	ldr	r3, [pc, #504]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002406:	2101      	movs	r1, #1
 8002408:	438a      	bics	r2, r1
 800240a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800240c:	4b7c      	ldr	r3, [pc, #496]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800240e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002410:	4b7b      	ldr	r3, [pc, #492]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002412:	2104      	movs	r1, #4
 8002414:	438a      	bics	r2, r1
 8002416:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d014      	beq.n	800244a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f83a 	bl	8001498 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	e009      	b.n	800243e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff f835 	bl	8001498 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a74      	ldr	r2, [pc, #464]	@ (8002608 <HAL_RCC_OscConfig+0x60c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0db      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	4b70      	ldr	r3, [pc, #448]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x42e>
 8002448:	e013      	b.n	8002472 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff f825 	bl	8001498 <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002452:	e009      	b.n	8002468 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7ff f820 	bl	8001498 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	4a6a      	ldr	r2, [pc, #424]	@ (8002608 <HAL_RCC_OscConfig+0x60c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0c6      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	4b65      	ldr	r3, [pc, #404]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002472:	231f      	movs	r3, #31
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800247c:	4b60      	ldr	r3, [pc, #384]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800247e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002480:	4b5f      	ldr	r3, [pc, #380]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002482:	4962      	ldr	r1, [pc, #392]	@ (800260c <HAL_RCC_OscConfig+0x610>)
 8002484:	400a      	ands	r2, r1
 8002486:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d100      	bne.n	8002492 <HAL_RCC_OscConfig+0x496>
 8002490:	e0b0      	b.n	80025f4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002492:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2238      	movs	r2, #56	@ 0x38
 8002498:	4013      	ands	r3, r2
 800249a:	2b10      	cmp	r3, #16
 800249c:	d100      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4a4>
 800249e:	e078      	b.n	8002592 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d153      	bne.n	8002550 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b55      	ldr	r3, [pc, #340]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b54      	ldr	r3, [pc, #336]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80024ae:	4958      	ldr	r1, [pc, #352]	@ (8002610 <HAL_RCC_OscConfig+0x614>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fff0 	bl	8001498 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe ffeb 	bl	8001498 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e092      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	049b      	lsls	r3, r3, #18
 80024d8:	4013      	ands	r3, r2
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024dc:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002614 <HAL_RCC_OscConfig+0x618>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	431a      	orrs	r2, r3
 8002504:	4b3e      	ldr	r3, [pc, #248]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250a:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b3c      	ldr	r3, [pc, #240]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002510:	2180      	movs	r1, #128	@ 0x80
 8002512:	0449      	lsls	r1, r1, #17
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800251e:	2180      	movs	r1, #128	@ 0x80
 8002520:	0549      	lsls	r1, r1, #21
 8002522:	430a      	orrs	r2, r1
 8002524:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe ffb7 	bl	8001498 <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe ffb2 	bl	8001498 <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e059      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002542:	4b2f      	ldr	r3, [pc, #188]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	049b      	lsls	r3, r3, #18
 800254a:	4013      	ands	r3, r2
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x534>
 800254e:	e051      	b.n	80025f4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002556:	492e      	ldr	r1, [pc, #184]	@ (8002610 <HAL_RCC_OscConfig+0x614>)
 8002558:	400a      	ands	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe ff9c 	bl	8001498 <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe ff97 	bl	8001498 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e03e      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	4b21      	ldr	r3, [pc, #132]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	049b      	lsls	r3, r3, #18
 8002580:	4013      	ands	r3, r2
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002584:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 800258a:	4923      	ldr	r1, [pc, #140]	@ (8002618 <HAL_RCC_OscConfig+0x61c>)
 800258c:	400a      	ands	r2, r1
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	e030      	b.n	80025f4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e02b      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_RCC_OscConfig+0x604>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2203      	movs	r2, #3
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d11e      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2270      	movs	r2, #112	@ 0x70
 80025b6:	401a      	ands	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d117      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	23fe      	movs	r3, #254	@ 0xfe
 80025c4:	01db      	lsls	r3, r3, #7
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10e      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	23f8      	movs	r3, #248	@ 0xf8
 80025d6:	039b      	lsls	r3, r3, #14
 80025d8:	401a      	ands	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	0f5b      	lsrs	r3, r3, #29
 80025e6:	075a      	lsls	r2, r3, #29
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b008      	add	sp, #32
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			@ (mov r8, r8)
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
 8002608:	00001388 	.word	0x00001388
 800260c:	efffffff 	.word	0xefffffff
 8002610:	feffffff 	.word	0xfeffffff
 8002614:	1fc1808c 	.word	0x1fc1808c
 8002618:	effefffc 	.word	0xeffefffc

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0e9      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2207      	movs	r2, #7
 8002636:	4013      	ands	r3, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d91e      	bls.n	800267c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b73      	ldr	r3, [pc, #460]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2207      	movs	r2, #7
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	4b70      	ldr	r3, [pc, #448]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002650:	f7fe ff22 	bl	8001498 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002658:	e009      	b.n	800266e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265a:	f7fe ff1d 	bl	8001498 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a6a      	ldr	r2, [pc, #424]	@ (8002810 <HAL_RCC_ClockConfig+0x1f4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0ca      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800266e:	4b67      	ldr	r3, [pc, #412]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2207      	movs	r2, #7
 8002674:	4013      	ands	r3, r2
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2204      	movs	r2, #4
 800268c:	4013      	ands	r3, r2
 800268e:	d006      	beq.n	800269e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002690:	4b60      	ldr	r3, [pc, #384]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b5f      	ldr	r3, [pc, #380]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 8002696:	21e0      	movs	r1, #224	@ 0xe0
 8002698:	01c9      	lsls	r1, r1, #7
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002818 <HAL_RCC_ClockConfig+0x1fc>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	4b59      	ldr	r3, [pc, #356]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d057      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c4:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	4013      	ands	r3, r2
 80026ce:	d12b      	bne.n	8002728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e097      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d107      	bne.n	80026ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	049b      	lsls	r3, r3, #18
 80026e4:	4013      	ands	r3, r2
 80026e6:	d11f      	bne.n	8002728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e08b      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f4:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4013      	ands	r3, r2
 80026fe:	d113      	bne.n	8002728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e07f      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d106      	bne.n	800271a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270c:	4b41      	ldr	r3, [pc, #260]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 800270e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002710:	2202      	movs	r2, #2
 8002712:	4013      	ands	r3, r2
 8002714:	d108      	bne.n	8002728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e074      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	4b3e      	ldr	r3, [pc, #248]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e06d      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002728:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2207      	movs	r2, #7
 800272e:	4393      	bics	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7fe feac 	bl	8001498 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002744:	e009      	b.n	800275a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002746:	f7fe fea7 	bl	8001498 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	4a2f      	ldr	r2, [pc, #188]	@ (8002810 <HAL_RCC_ClockConfig+0x1f4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e054      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	@ 0x38
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	429a      	cmp	r2, r3
 800276a:	d1ec      	bne.n	8002746 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276c:	4b27      	ldr	r3, [pc, #156]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2207      	movs	r2, #7
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d21e      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2207      	movs	r2, #7
 8002780:	4393      	bics	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800278c:	f7fe fe84 	bl	8001498 <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002794:	e009      	b.n	80027aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002796:	f7fe fe7f 	bl	8001498 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <HAL_RCC_ClockConfig+0x1f4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e02c      	b.n	8002804 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027aa:	4b18      	ldr	r3, [pc, #96]	@ (800280c <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2207      	movs	r2, #7
 80027b0:	4013      	ands	r3, r2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1ee      	bne.n	8002796 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2204      	movs	r2, #4
 80027be:	4013      	ands	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a15      	ldr	r2, [pc, #84]	@ (800281c <HAL_RCC_ClockConfig+0x200>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027d6:	f000 f829 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027da:	0001      	movs	r1, r0
 80027dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_RCC_ClockConfig+0x1f8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	220f      	movs	r2, #15
 80027e4:	401a      	ands	r2, r3
 80027e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_RCC_ClockConfig+0x204>)
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	58d3      	ldr	r3, [r2, r3]
 80027ec:	221f      	movs	r2, #31
 80027ee:	4013      	ands	r3, r2
 80027f0:	000a      	movs	r2, r1
 80027f2:	40da      	lsrs	r2, r3
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCC_ClockConfig+0x208>)
 80027f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <HAL_RCC_ClockConfig+0x20c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fe fdef 	bl	80013e0 <HAL_InitTick>
 8002802:	0003      	movs	r3, r0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b004      	add	sp, #16
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40022000 	.word	0x40022000
 8002810:	00001388 	.word	0x00001388
 8002814:	40021000 	.word	0x40021000
 8002818:	fffff0ff 	.word	0xfffff0ff
 800281c:	ffff8fff 	.word	0xffff8fff
 8002820:	08004b70 	.word	0x08004b70
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002832:	4b3c      	ldr	r3, [pc, #240]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2238      	movs	r2, #56	@ 0x38
 8002838:	4013      	ands	r3, r2
 800283a:	d10f      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800283c:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0adb      	lsrs	r3, r3, #11
 8002842:	2207      	movs	r2, #7
 8002844:	4013      	ands	r3, r2
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	0013      	movs	r3, r2
 800284c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	4835      	ldr	r0, [pc, #212]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002852:	f7fd fc55 	bl	8000100 <__udivsi3>
 8002856:	0003      	movs	r3, r0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	e05d      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800285c:	4b31      	ldr	r3, [pc, #196]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2238      	movs	r2, #56	@ 0x38
 8002862:	4013      	ands	r3, r2
 8002864:	2b08      	cmp	r3, #8
 8002866:	d102      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002868:	4b2f      	ldr	r3, [pc, #188]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xfc>)
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e054      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286e:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2238      	movs	r2, #56	@ 0x38
 8002874:	4013      	ands	r3, r2
 8002876:	2b10      	cmp	r3, #16
 8002878:	d138      	bne.n	80028ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800287a:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2203      	movs	r2, #3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	2207      	movs	r2, #7
 800288c:	4013      	ands	r3, r2
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d10d      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4823      	ldr	r0, [pc, #140]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xfc>)
 800289c:	f7fd fc30 	bl	8000100 <__udivsi3>
 80028a0:	0003      	movs	r3, r0
 80028a2:	0019      	movs	r1, r3
 80028a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	227f      	movs	r2, #127	@ 0x7f
 80028ac:	4013      	ands	r3, r2
 80028ae:	434b      	muls	r3, r1
 80028b0:	617b      	str	r3, [r7, #20]
        break;
 80028b2:	e00d      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	481c      	ldr	r0, [pc, #112]	@ (8002928 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028b8:	f7fd fc22 	bl	8000100 <__udivsi3>
 80028bc:	0003      	movs	r3, r0
 80028be:	0019      	movs	r1, r3
 80028c0:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	227f      	movs	r2, #127	@ 0x7f
 80028c8:	4013      	ands	r3, r2
 80028ca:	434b      	muls	r3, r1
 80028cc:	617b      	str	r3, [r7, #20]
        break;
 80028ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80028d0:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0f5b      	lsrs	r3, r3, #29
 80028d6:	2207      	movs	r2, #7
 80028d8:	4013      	ands	r3, r2
 80028da:	3301      	adds	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	6978      	ldr	r0, [r7, #20]
 80028e2:	f7fd fc0d 	bl	8000100 <__udivsi3>
 80028e6:	0003      	movs	r3, r0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e015      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2238      	movs	r2, #56	@ 0x38
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d103      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002900:	4b08      	ldr	r3, [pc, #32]	@ (8002924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2238      	movs	r2, #56	@ 0x38
 8002906:	4013      	ands	r3, r2
 8002908:	2b18      	cmp	r3, #24
 800290a:	d103      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800290c:	23fa      	movs	r3, #250	@ 0xfa
 800290e:	01db      	lsls	r3, r3, #7
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e001      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002918:	693b      	ldr	r3, [r7, #16]
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b006      	add	sp, #24
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	40021000 	.word	0x40021000
 8002928:	00f42400 	.word	0x00f42400

0800292c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b02      	ldr	r3, [pc, #8]	@ (800293c <HAL_RCC_GetHCLKFreq+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002944:	f7ff fff2 	bl	800292c <HAL_RCC_GetHCLKFreq>
 8002948:	0004      	movs	r4, r0
 800294a:	f7ff fb4b 	bl	8001fe4 <LL_RCC_GetAPB1Prescaler>
 800294e:	0003      	movs	r3, r0
 8002950:	0b1a      	lsrs	r2, r3, #12
 8002952:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	58d3      	ldr	r3, [r2, r3]
 8002958:	221f      	movs	r2, #31
 800295a:	4013      	ands	r3, r2
 800295c:	40dc      	lsrs	r4, r3
 800295e:	0023      	movs	r3, r4
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	bdb0      	pop	{r4, r5, r7, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	08004bb0 	.word	0x08004bb0

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04a      	b.n	8002a14 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	223d      	movs	r2, #61	@ 0x3d
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	223c      	movs	r2, #60	@ 0x3c
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe f87d 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	223d      	movs	r2, #61	@ 0x3d
 800299e:	2102      	movs	r1, #2
 80029a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f000 fe1f 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2248      	movs	r2, #72	@ 0x48
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	223e      	movs	r2, #62	@ 0x3e
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223f      	movs	r2, #63	@ 0x3f
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2240      	movs	r2, #64	@ 0x40
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2241      	movs	r2, #65	@ 0x41
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2242      	movs	r2, #66	@ 0x42
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2243      	movs	r2, #67	@ 0x43
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2244      	movs	r2, #68	@ 0x44
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2245      	movs	r2, #69	@ 0x45
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2246      	movs	r2, #70	@ 0x46
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2247      	movs	r2, #71	@ 0x47
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	223d      	movs	r2, #61	@ 0x3d
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e04a      	b.n	8002ac4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223d      	movs	r2, #61	@ 0x3d
 8002a32:	5c9b      	ldrb	r3, [r3, r2]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223c      	movs	r2, #60	@ 0x3c
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f841 	bl	8002acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	223d      	movs	r2, #61	@ 0x3d
 8002a4e:	2102      	movs	r1, #2
 8002a50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	0010      	movs	r0, r2
 8002a5e:	f000 fdc7 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2248      	movs	r2, #72	@ 0x48
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223e      	movs	r2, #62	@ 0x3e
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	223f      	movs	r2, #63	@ 0x3f
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2241      	movs	r2, #65	@ 0x41
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2242      	movs	r2, #66	@ 0x42
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2243      	movs	r2, #67	@ 0x43
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2244      	movs	r2, #68	@ 0x44
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2245      	movs	r2, #69	@ 0x45
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2246      	movs	r2, #70	@ 0x46
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2247      	movs	r2, #71	@ 0x47
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	223d      	movs	r2, #61	@ 0x3d
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	001a      	movs	r2, r3
 8002aea:	1cbb      	adds	r3, r7, #2
 8002aec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2317      	movs	r3, #23
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d108      	bne.n	8002b0e <HAL_TIM_PWM_Start_DMA+0x32>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	223e      	movs	r2, #62	@ 0x3e
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3b02      	subs	r3, #2
 8002b06:	425a      	negs	r2, r3
 8002b08:	4153      	adcs	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e037      	b.n	8002b7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d108      	bne.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	223f      	movs	r2, #63	@ 0x3f
 8002b18:	5c9b      	ldrb	r3, [r3, r2]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	3b02      	subs	r3, #2
 8002b1e:	425a      	negs	r2, r3
 8002b20:	4153      	adcs	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	e02b      	b.n	8002b7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d108      	bne.n	8002b3e <HAL_TIM_PWM_Start_DMA+0x62>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	5c9b      	ldrb	r3, [r3, r2]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3b02      	subs	r3, #2
 8002b36:	425a      	negs	r2, r3
 8002b38:	4153      	adcs	r3, r2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	e01f      	b.n	8002b7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	d108      	bne.n	8002b56 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2241      	movs	r2, #65	@ 0x41
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3b02      	subs	r3, #2
 8002b4e:	425a      	negs	r2, r3
 8002b50:	4153      	adcs	r3, r2
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e013      	b.n	8002b7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d108      	bne.n	8002b6e <HAL_TIM_PWM_Start_DMA+0x92>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2242      	movs	r2, #66	@ 0x42
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3b02      	subs	r3, #2
 8002b66:	425a      	negs	r2, r3
 8002b68:	4153      	adcs	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e007      	b.n	8002b7e <HAL_TIM_PWM_Start_DMA+0xa2>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2243      	movs	r2, #67	@ 0x43
 8002b72:	5c9b      	ldrb	r3, [r3, r2]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3b02      	subs	r3, #2
 8002b78:	425a      	negs	r2, r3
 8002b7a:	4153      	adcs	r3, r2
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	e183      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <HAL_TIM_PWM_Start_DMA+0xc2>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	223e      	movs	r2, #62	@ 0x3e
 8002b90:	5c9b      	ldrb	r3, [r3, r2]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	425a      	negs	r2, r3
 8002b98:	4153      	adcs	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e037      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x132>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d108      	bne.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0xda>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	223f      	movs	r2, #63	@ 0x3f
 8002ba8:	5c9b      	ldrb	r3, [r3, r2]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	425a      	negs	r2, r3
 8002bb0:	4153      	adcs	r3, r2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e02b      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x132>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d108      	bne.n	8002bce <HAL_TIM_PWM_Start_DMA+0xf2>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	5c9b      	ldrb	r3, [r3, r2]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	425a      	negs	r2, r3
 8002bc8:	4153      	adcs	r3, r2
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e01f      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x132>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d108      	bne.n	8002be6 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2241      	movs	r2, #65	@ 0x41
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	425a      	negs	r2, r3
 8002be0:	4153      	adcs	r3, r2
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e013      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x132>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d108      	bne.n	8002bfe <HAL_TIM_PWM_Start_DMA+0x122>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2242      	movs	r2, #66	@ 0x42
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	4153      	adcs	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e007      	b.n	8002c0e <HAL_TIM_PWM_Start_DMA+0x132>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2243      	movs	r2, #67	@ 0x43
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	425a      	negs	r2, r3
 8002c0a:	4153      	adcs	r3, r2
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d035      	beq.n	8002c7e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_TIM_PWM_Start_DMA+0x144>
 8002c18:	1cbb      	adds	r3, r7, #2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e134      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <HAL_TIM_PWM_Start_DMA+0x158>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	223e      	movs	r2, #62	@ 0x3e
 8002c2e:	2102      	movs	r1, #2
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	e026      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d104      	bne.n	8002c44 <HAL_TIM_PWM_Start_DMA+0x168>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	223f      	movs	r2, #63	@ 0x3f
 8002c3e:	2102      	movs	r1, #2
 8002c40:	5499      	strb	r1, [r3, r2]
 8002c42:	e01e      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d104      	bne.n	8002c54 <HAL_TIM_PWM_Start_DMA+0x178>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2240      	movs	r2, #64	@ 0x40
 8002c4e:	2102      	movs	r1, #2
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	e016      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d104      	bne.n	8002c64 <HAL_TIM_PWM_Start_DMA+0x188>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2241      	movs	r2, #65	@ 0x41
 8002c5e:	2102      	movs	r1, #2
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	e00e      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d104      	bne.n	8002c74 <HAL_TIM_PWM_Start_DMA+0x198>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2242      	movs	r2, #66	@ 0x42
 8002c6e:	2102      	movs	r1, #2
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	e006      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2243      	movs	r2, #67	@ 0x43
 8002c78:	2102      	movs	r1, #2
 8002c7a:	5499      	strb	r1, [r3, r2]
 8002c7c:	e001      	b.n	8002c82 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e105      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d100      	bne.n	8002c8a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002c88:	e080      	b.n	8002d8c <HAL_TIM_PWM_Start_DMA+0x2b0>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d900      	bls.n	8002c92 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8002c90:	e0a1      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d054      	beq.n	8002d42 <HAL_TIM_PWM_Start_DMA+0x266>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d900      	bls.n	8002ca0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8002c9e:	e09a      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_PWM_Start_DMA+0x1d2>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d025      	beq.n	8002cf8 <HAL_TIM_PWM_Start_DMA+0x21c>
 8002cac:	e093      	b.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	4a79      	ldr	r2, [pc, #484]	@ (8002e98 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	4a78      	ldr	r2, [pc, #480]	@ (8002e9c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	4a77      	ldr	r2, [pc, #476]	@ (8002ea0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3334      	adds	r3, #52	@ 0x34
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	1cbb      	adds	r3, r7, #2
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	f7fe fd74 	bl	80017c4 <HAL_DMA_Start_IT>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d4      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2180      	movs	r1, #128	@ 0x80
 8002cf0:	0089      	lsls	r1, r1, #2
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	60da      	str	r2, [r3, #12]
      break;
 8002cf6:	e073      	b.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	4a66      	ldr	r2, [pc, #408]	@ (8002e98 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	4a65      	ldr	r2, [pc, #404]	@ (8002e9c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	4a64      	ldr	r2, [pc, #400]	@ (8002ea0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002d0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3338      	adds	r3, #56	@ 0x38
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	1cbb      	adds	r3, r7, #2
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	f7fe fd4f 	bl	80017c4 <HAL_DMA_Start_IT>
 8002d26:	1e03      	subs	r3, r0, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0af      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	00c9      	lsls	r1, r1, #3
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]
      break;
 8002d40:	e04e      	b.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	4a53      	ldr	r2, [pc, #332]	@ (8002e9c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	4a52      	ldr	r2, [pc, #328]	@ (8002ea0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	333c      	adds	r3, #60	@ 0x3c
 8002d66:	001a      	movs	r2, r3
 8002d68:	1cbb      	adds	r3, r7, #2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	f7fe fd2a 	bl	80017c4 <HAL_DMA_Start_IT>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e08a      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2180      	movs	r1, #128	@ 0x80
 8002d84:	0109      	lsls	r1, r1, #4
 8002d86:	430a      	orrs	r2, r1
 8002d88:	60da      	str	r2, [r3, #12]
      break;
 8002d8a:	e029      	b.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	4a41      	ldr	r2, [pc, #260]	@ (8002e98 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002d92:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	4a40      	ldr	r2, [pc, #256]	@ (8002e9c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ea0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002da2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3340      	adds	r3, #64	@ 0x40
 8002db0:	001a      	movs	r2, r3
 8002db2:	1cbb      	adds	r3, r7, #2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	f7fe fd05 	bl	80017c4 <HAL_DMA_Start_IT>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e065      	b.n	8002e8e <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	0149      	lsls	r1, r1, #5
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]
      break;
 8002dd4:	e004      	b.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002dd6:	2317      	movs	r3, #23
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
      break;
 8002dde:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002de0:	2317      	movs	r3, #23
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d14e      	bne.n	8002e88 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	2201      	movs	r2, #1
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 ffae 	bl	8003d54 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a26      	ldr	r2, [pc, #152]	@ (8002eac <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d101      	bne.n	8002e1a <HAL_TIM_PWM_Start_DMA+0x33e>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_TIM_PWM_Start_DMA+0x340>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2180      	movs	r1, #128	@ 0x80
 8002e2c:	0209      	lsls	r1, r1, #8
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_TIM_PWM_Start_DMA+0x36a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d116      	bne.n	8002e74 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d016      	beq.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d011      	beq.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e72:	e008      	b.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2101      	movs	r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e000      	b.n	8002e88 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e86:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002e88:	2317      	movs	r3, #23
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	080034dd 	.word	0x080034dd
 8002e9c:	08003587 	.word	0x08003587
 8002ea0:	08003449 	.word	0x08003449
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	40014800 	.word	0x40014800
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	00010007 	.word	0x00010007

08002eb8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d039      	beq.n	8002f44 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d844      	bhi.n	8002f60 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d025      	beq.n	8002f28 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d83e      	bhi.n	8002f60 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d00e      	beq.n	8002f0c <HAL_TIM_PWM_Stop_DMA+0x54>
 8002eee:	e037      	b.n	8002f60 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	495a      	ldr	r1, [pc, #360]	@ (8003064 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7fe fce3 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 8002f0a:	e02e      	b.n	8002f6a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4954      	ldr	r1, [pc, #336]	@ (8003068 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fe fcd5 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 8002f26:	e020      	b.n	8002f6a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	494e      	ldr	r1, [pc, #312]	@ (800306c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fe fcc7 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 8002f42:	e012      	b.n	8002f6a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4948      	ldr	r1, [pc, #288]	@ (8003070 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7fe fcb9 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 8002f5e:	e004      	b.n	8002f6a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
      break;
 8002f68:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002f6a:	230f      	movs	r3, #15
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d000      	beq.n	8002f76 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002f74:	e06e      	b.n	8003054 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f000 fee8 	bl	8003d54 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3a      	ldr	r2, [pc, #232]	@ (8003074 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a39      	ldr	r2, [pc, #228]	@ (8003078 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a37      	ldr	r2, [pc, #220]	@ (800307c <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a33      	ldr	r2, [pc, #204]	@ (8003080 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a31      	ldr	r2, [pc, #196]	@ (8003084 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	492e      	ldr	r1, [pc, #184]	@ (8003088 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a29      	ldr	r2, [pc, #164]	@ (8003080 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d10d      	bne.n	8002ffc <HAL_TIM_PWM_Stop_DMA+0x144>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	@ (8003084 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_PWM_Stop_DMA+0x144>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <HAL_TIM_PWM_Stop_DMA+0x154>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223e      	movs	r2, #62	@ 0x3e
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	e023      	b.n	8003054 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d104      	bne.n	800301c <HAL_TIM_PWM_Stop_DMA+0x164>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223f      	movs	r2, #63	@ 0x3f
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	e01b      	b.n	8003054 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b08      	cmp	r3, #8
 8003020:	d104      	bne.n	800302c <HAL_TIM_PWM_Stop_DMA+0x174>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2240      	movs	r2, #64	@ 0x40
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
 800302a:	e013      	b.n	8003054 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	d104      	bne.n	800303c <HAL_TIM_PWM_Stop_DMA+0x184>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2241      	movs	r2, #65	@ 0x41
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	e00b      	b.n	8003054 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b10      	cmp	r3, #16
 8003040:	d104      	bne.n	800304c <HAL_TIM_PWM_Stop_DMA+0x194>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2242      	movs	r2, #66	@ 0x42
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
 800304a:	e003      	b.n	8003054 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2243      	movs	r2, #67	@ 0x43
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	781b      	ldrb	r3, [r3, #0]
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	fffffdff 	.word	0xfffffdff
 8003068:	fffffbff 	.word	0xfffffbff
 800306c:	fffff7ff 	.word	0xfffff7ff
 8003070:	ffffefff 	.word	0xffffefff
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800
 8003080:	00001111 	.word	0x00001111
 8003084:	00000444 	.word	0x00000444
 8003088:	ffff7fff 	.word	0xffff7fff

0800308c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2317      	movs	r3, #23
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	223c      	movs	r2, #60	@ 0x3c
 80030a4:	5c9b      	ldrb	r3, [r3, r2]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0e5      	b.n	800327a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	223c      	movs	r2, #60	@ 0x3c
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b14      	cmp	r3, #20
 80030ba:	d900      	bls.n	80030be <HAL_TIM_PWM_ConfigChannel+0x32>
 80030bc:	e0d1      	b.n	8003262 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	009a      	lsls	r2, r3, #2
 80030c2:	4b70      	ldr	r3, [pc, #448]	@ (8003284 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	0011      	movs	r1, r2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 fb06 	bl	80036e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2108      	movs	r1, #8
 80030e4:	430a      	orrs	r2, r1
 80030e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2104      	movs	r1, #4
 80030f4:	438a      	bics	r2, r1
 80030f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6999      	ldr	r1, [r3, #24]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	619a      	str	r2, [r3, #24]
      break;
 800310a:	e0af      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	0011      	movs	r1, r2
 8003114:	0018      	movs	r0, r3
 8003116:	f000 fb65 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	0109      	lsls	r1, r1, #4
 8003128:	430a      	orrs	r2, r1
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4954      	ldr	r1, [pc, #336]	@ (8003288 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003138:	400a      	ands	r2, r1
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	021a      	lsls	r2, r3, #8
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	619a      	str	r2, [r3, #24]
      break;
 8003150:	e08c      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	0011      	movs	r1, r2
 800315a:	0018      	movs	r0, r3
 800315c:	f000 fbc0 	bl	80038e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2108      	movs	r1, #8
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2104      	movs	r1, #4
 800317c:	438a      	bics	r2, r1
 800317e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69d9      	ldr	r1, [r3, #28]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	61da      	str	r2, [r3, #28]
      break;
 8003192:	e06b      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	0011      	movs	r1, r2
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fc21 	bl	80039e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2180      	movs	r1, #128	@ 0x80
 80031ae:	0109      	lsls	r1, r1, #4
 80031b0:	430a      	orrs	r2, r1
 80031b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4932      	ldr	r1, [pc, #200]	@ (8003288 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69d9      	ldr	r1, [r3, #28]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	021a      	lsls	r2, r3, #8
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	61da      	str	r2, [r3, #28]
      break;
 80031d8:	e048      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f000 fc62 	bl	8003aac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2108      	movs	r1, #8
 80031f4:	430a      	orrs	r2, r1
 80031f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2104      	movs	r1, #4
 8003204:	438a      	bics	r2, r1
 8003206:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800321a:	e027      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	0011      	movs	r1, r2
 8003224:	0018      	movs	r0, r3
 8003226:	f000 fc9b 	bl	8003b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	0109      	lsls	r1, r1, #4
 8003238:	430a      	orrs	r2, r1
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4910      	ldr	r1, [pc, #64]	@ (8003288 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003248:	400a      	ands	r2, r1
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	021a      	lsls	r2, r3, #8
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003260:	e004      	b.n	800326c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003262:	2317      	movs	r3, #23
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
      break;
 800326a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	223c      	movs	r2, #60	@ 0x3c
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

  return status;
 8003274:	2317      	movs	r3, #23
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	08004be4 	.word	0x08004be4
 8003288:	fffffbff 	.word	0xfffffbff

0800328c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	230f      	movs	r3, #15
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223c      	movs	r2, #60	@ 0x3c
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_ConfigClockSource+0x20>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0bc      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x19a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223c      	movs	r2, #60	@ 0x3c
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	223d      	movs	r2, #61	@ 0x3d
 80032b8:	2102      	movs	r1, #2
 80032ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003430 <HAL_TIM_ConfigClockSource+0x1a4>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4a59      	ldr	r2, [pc, #356]	@ (8003434 <HAL_TIM_ConfigClockSource+0x1a8>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2280      	movs	r2, #128	@ 0x80
 80032e2:	0192      	lsls	r2, r2, #6
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d040      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xde>
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	0192      	lsls	r2, r2, #6
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d900      	bls.n	80032f2 <HAL_TIM_ConfigClockSource+0x66>
 80032f0:	e088      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 80032f2:	2280      	movs	r2, #128	@ 0x80
 80032f4:	0152      	lsls	r2, r2, #5
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d100      	bne.n	80032fc <HAL_TIM_ConfigClockSource+0x70>
 80032fa:	e088      	b.n	800340e <HAL_TIM_ConfigClockSource+0x182>
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	0152      	lsls	r2, r2, #5
 8003300:	4293      	cmp	r3, r2
 8003302:	d900      	bls.n	8003306 <HAL_TIM_ConfigClockSource+0x7a>
 8003304:	e07e      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 8003306:	2b70      	cmp	r3, #112	@ 0x70
 8003308:	d018      	beq.n	800333c <HAL_TIM_ConfigClockSource+0xb0>
 800330a:	d900      	bls.n	800330e <HAL_TIM_ConfigClockSource+0x82>
 800330c:	e07a      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 800330e:	2b60      	cmp	r3, #96	@ 0x60
 8003310:	d04f      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x126>
 8003312:	d900      	bls.n	8003316 <HAL_TIM_ConfigClockSource+0x8a>
 8003314:	e076      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 8003316:	2b50      	cmp	r3, #80	@ 0x50
 8003318:	d03b      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x106>
 800331a:	d900      	bls.n	800331e <HAL_TIM_ConfigClockSource+0x92>
 800331c:	e072      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d057      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x146>
 8003322:	d900      	bls.n	8003326 <HAL_TIM_ConfigClockSource+0x9a>
 8003324:	e06e      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 8003326:	2b30      	cmp	r3, #48	@ 0x30
 8003328:	d063      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x166>
 800332a:	d86b      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d060      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x166>
 8003330:	d868      	bhi.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d05d      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x166>
 8003336:	2b10      	cmp	r3, #16
 8003338:	d05b      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x166>
 800333a:	e063      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	f000 fce2 	bl	8003d14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2277      	movs	r2, #119	@ 0x77
 800335c:	4313      	orrs	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e052      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800337a:	f000 fccb 	bl	8003d14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2180      	movs	r1, #128	@ 0x80
 800338a:	01c9      	lsls	r1, r1, #7
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
      break;
 8003390:	e03e      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800339e:	001a      	movs	r2, r3
 80033a0:	f000 fc3c 	bl	8003c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2150      	movs	r1, #80	@ 0x50
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 fc96 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 80033b0:	e02e      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033be:	001a      	movs	r2, r3
 80033c0:	f000 fc5a 	bl	8003c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2160      	movs	r1, #96	@ 0x60
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 fc86 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 80033d0:	e01e      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033de:	001a      	movs	r2, r3
 80033e0:	f000 fc1c 	bl	8003c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2140      	movs	r1, #64	@ 0x40
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 fc76 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 80033f0:	e00e      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	0019      	movs	r1, r3
 80033fc:	0010      	movs	r0, r2
 80033fe:	f000 fc6d 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 8003402:	e005      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003404:	230f      	movs	r3, #15
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
      break;
 800340c:	e000      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800340e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	223d      	movs	r2, #61	@ 0x3d
 8003414:	2101      	movs	r1, #1
 8003416:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	223c      	movs	r2, #60	@ 0x3c
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

  return status;
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	ffceff88 	.word	0xffceff88
 8003434:	ffff00ff 	.word	0xffff00ff

08003438 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003440:	46c0      	nop			@ (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	223e      	movs	r2, #62	@ 0x3e
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	e02a      	b.n	80034c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d107      	bne.n	800348a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2202      	movs	r2, #2
 800347e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	223f      	movs	r2, #63	@ 0x3f
 8003484:	2101      	movs	r1, #1
 8003486:	5499      	strb	r1, [r3, r2]
 8003488:	e01d      	b.n	80034c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2204      	movs	r2, #4
 8003498:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2240      	movs	r2, #64	@ 0x40
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	e010      	b.n	80034c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d107      	bne.n	80034be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2208      	movs	r2, #8
 80034b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2241      	movs	r2, #65	@ 0x41
 80034b8:	2101      	movs	r1, #1
 80034ba:	5499      	strb	r1, [r3, r2]
 80034bc:	e003      	b.n	80034c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	223d      	movs	r2, #61	@ 0x3d
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff ffb5 	bl	8003438 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}

080034dc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d10b      	bne.n	800350c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d136      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	223e      	movs	r2, #62	@ 0x3e
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	e031      	b.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d10b      	bne.n	800352e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2202      	movs	r2, #2
 800351a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d125      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	223f      	movs	r2, #63	@ 0x3f
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]
 800352c:	e020      	b.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d10b      	bne.n	8003550 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2204      	movs	r2, #4
 800353c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d114      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2240      	movs	r2, #64	@ 0x40
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	e00f      	b.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d10a      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2208      	movs	r2, #8
 800355e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2241      	movs	r2, #65	@ 0x41
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	0018      	movs	r0, r3
 8003574:	f7fc fe6c 	bl	8000250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	771a      	strb	r2, [r3, #28]
}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}

08003586 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d103      	bne.n	80035a6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	771a      	strb	r2, [r3, #28]
 80035a4:	e019      	b.n	80035da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d103      	bne.n	80035b8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2202      	movs	r2, #2
 80035b4:	771a      	strb	r2, [r3, #28]
 80035b6:	e010      	b.n	80035da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d103      	bne.n	80035ca <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2204      	movs	r2, #4
 80035c6:	771a      	strb	r2, [r3, #28]
 80035c8:	e007      	b.n	80035da <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d102      	bne.n	80035da <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2208      	movs	r2, #8
 80035d8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fc fe29 	bl	8000234 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
}
 80035e8:	46c0      	nop			@ (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b004      	add	sp, #16
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a32      	ldr	r2, [pc, #200]	@ (80036cc <TIM_Base_SetConfig+0xdc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_Base_SetConfig+0x20>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a31      	ldr	r2, [pc, #196]	@ (80036d0 <TIM_Base_SetConfig+0xe0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d108      	bne.n	8003622 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2270      	movs	r2, #112	@ 0x70
 8003614:	4393      	bics	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a29      	ldr	r2, [pc, #164]	@ (80036cc <TIM_Base_SetConfig+0xdc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00f      	beq.n	800364a <TIM_Base_SetConfig+0x5a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a28      	ldr	r2, [pc, #160]	@ (80036d0 <TIM_Base_SetConfig+0xe0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <TIM_Base_SetConfig+0x5a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <TIM_Base_SetConfig+0xe4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <TIM_Base_SetConfig+0x5a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a26      	ldr	r2, [pc, #152]	@ (80036d8 <TIM_Base_SetConfig+0xe8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <TIM_Base_SetConfig+0x5a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a25      	ldr	r2, [pc, #148]	@ (80036dc <TIM_Base_SetConfig+0xec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d108      	bne.n	800365c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <TIM_Base_SetConfig+0xf0>)
 800364e:	4013      	ands	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2280      	movs	r2, #128	@ 0x80
 8003660:	4393      	bics	r3, r2
 8003662:	001a      	movs	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a11      	ldr	r2, [pc, #68]	@ (80036cc <TIM_Base_SetConfig+0xdc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0xaa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a12      	ldr	r2, [pc, #72]	@ (80036d8 <TIM_Base_SetConfig+0xe8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0xaa>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a11      	ldr	r2, [pc, #68]	@ (80036dc <TIM_Base_SetConfig+0xec>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d103      	bne.n	80036a2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4393      	bics	r3, r2
 80036bc:	001a      	movs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]
  }
}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40002000 	.word	0x40002000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800
 80036e0:	fffffcff 	.word	0xfffffcff

080036e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	2201      	movs	r2, #1
 80036fa:	4393      	bics	r3, r2
 80036fc:	001a      	movs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a2e      	ldr	r2, [pc, #184]	@ (80037cc <TIM_OC1_SetConfig+0xe8>)
 8003712:	4013      	ands	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2203      	movs	r2, #3
 800371a:	4393      	bics	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2202      	movs	r2, #2
 800372c:	4393      	bics	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a24      	ldr	r2, [pc, #144]	@ (80037d0 <TIM_OC1_SetConfig+0xec>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_OC1_SetConfig+0x6e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a23      	ldr	r2, [pc, #140]	@ (80037d4 <TIM_OC1_SetConfig+0xf0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_OC1_SetConfig+0x6e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a22      	ldr	r2, [pc, #136]	@ (80037d8 <TIM_OC1_SetConfig+0xf4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10c      	bne.n	800376c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2208      	movs	r2, #8
 8003756:	4393      	bics	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2204      	movs	r2, #4
 8003768:	4393      	bics	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a18      	ldr	r2, [pc, #96]	@ (80037d0 <TIM_OC1_SetConfig+0xec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d007      	beq.n	8003784 <TIM_OC1_SetConfig+0xa0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <TIM_OC1_SetConfig+0xf0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_OC1_SetConfig+0xa0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <TIM_OC1_SetConfig+0xf4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d111      	bne.n	80037a8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4a15      	ldr	r2, [pc, #84]	@ (80037dc <TIM_OC1_SetConfig+0xf8>)
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <TIM_OC1_SetConfig+0xfc>)
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	fffeff8f 	.word	0xfffeff8f
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800
 80037dc:	fffffeff 	.word	0xfffffeff
 80037e0:	fffffdff 	.word	0xfffffdff

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	2210      	movs	r2, #16
 80037fa:	4393      	bics	r3, r2
 80037fc:	001a      	movs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a2c      	ldr	r2, [pc, #176]	@ (80038c4 <TIM_OC2_SetConfig+0xe0>)
 8003812:	4013      	ands	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a2b      	ldr	r2, [pc, #172]	@ (80038c8 <TIM_OC2_SetConfig+0xe4>)
 800381a:	4013      	ands	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2220      	movs	r2, #32
 800382e:	4393      	bics	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a22      	ldr	r2, [pc, #136]	@ (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10d      	bne.n	8003862 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2280      	movs	r2, #128	@ 0x80
 800384a:	4393      	bics	r3, r2
 800384c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2240      	movs	r2, #64	@ 0x40
 800385e:	4393      	bics	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <TIM_OC2_SetConfig+0x96>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <TIM_OC2_SetConfig+0xec>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_OC2_SetConfig+0x96>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <TIM_OC2_SetConfig+0xf0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d113      	bne.n	80038a2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4a16      	ldr	r2, [pc, #88]	@ (80038d8 <TIM_OC2_SetConfig+0xf4>)
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4a15      	ldr	r2, [pc, #84]	@ (80038dc <TIM_OC2_SetConfig+0xf8>)
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	621a      	str	r2, [r3, #32]
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	feff8fff 	.word	0xfeff8fff
 80038c8:	fffffcff 	.word	0xfffffcff
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800
 80038d8:	fffffbff 	.word	0xfffffbff
 80038dc:	fffff7ff 	.word	0xfffff7ff

080038e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4a31      	ldr	r2, [pc, #196]	@ (80039bc <TIM_OC3_SetConfig+0xdc>)
 80038f6:	401a      	ands	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <TIM_OC3_SetConfig+0xe0>)
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2203      	movs	r2, #3
 8003914:	4393      	bics	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <TIM_OC3_SetConfig+0xe4>)
 8003926:	4013      	ands	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <TIM_OC3_SetConfig+0xe8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10d      	bne.n	800395a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	4a22      	ldr	r2, [pc, #136]	@ (80039cc <TIM_OC3_SetConfig+0xec>)
 8003942:	4013      	ands	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	4a1e      	ldr	r2, [pc, #120]	@ (80039d0 <TIM_OC3_SetConfig+0xf0>)
 8003956:	4013      	ands	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <TIM_OC3_SetConfig+0xe8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_OC3_SetConfig+0x92>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1b      	ldr	r2, [pc, #108]	@ (80039d4 <TIM_OC3_SetConfig+0xf4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_OC3_SetConfig+0x92>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1a      	ldr	r2, [pc, #104]	@ (80039d8 <TIM_OC3_SetConfig+0xf8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4a19      	ldr	r2, [pc, #100]	@ (80039dc <TIM_OC3_SetConfig+0xfc>)
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4a18      	ldr	r2, [pc, #96]	@ (80039e0 <TIM_OC3_SetConfig+0x100>)
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b006      	add	sp, #24
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fffffeff 	.word	0xfffffeff
 80039c0:	fffeff8f 	.word	0xfffeff8f
 80039c4:	fffffdff 	.word	0xfffffdff
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	fffff7ff 	.word	0xfffff7ff
 80039d0:	fffffbff 	.word	0xfffffbff
 80039d4:	40014400 	.word	0x40014400
 80039d8:	40014800 	.word	0x40014800
 80039dc:	ffffefff 	.word	0xffffefff
 80039e0:	ffffdfff 	.word	0xffffdfff

080039e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a24      	ldr	r2, [pc, #144]	@ (8003a8c <TIM_OC4_SetConfig+0xa8>)
 80039fa:	401a      	ands	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a20      	ldr	r2, [pc, #128]	@ (8003a90 <TIM_OC4_SetConfig+0xac>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <TIM_OC4_SetConfig+0xb0>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <TIM_OC4_SetConfig+0xb4>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	031b      	lsls	r3, r3, #12
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a17      	ldr	r2, [pc, #92]	@ (8003a9c <TIM_OC4_SetConfig+0xb8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_OC4_SetConfig+0x70>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a16      	ldr	r2, [pc, #88]	@ (8003aa0 <TIM_OC4_SetConfig+0xbc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_OC4_SetConfig+0x70>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	@ (8003aa4 <TIM_OC4_SetConfig+0xc0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d109      	bne.n	8003a68 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4a14      	ldr	r2, [pc, #80]	@ (8003aa8 <TIM_OC4_SetConfig+0xc4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	019b      	lsls	r3, r3, #6
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b006      	add	sp, #24
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	ffffefff 	.word	0xffffefff
 8003a90:	feff8fff 	.word	0xfeff8fff
 8003a94:	fffffcff 	.word	0xfffffcff
 8003a98:	ffffdfff 	.word	0xffffdfff
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800
 8003aa8:	ffffbfff 	.word	0xffffbfff

08003aac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4a21      	ldr	r2, [pc, #132]	@ (8003b48 <TIM_OC5_SetConfig+0x9c>)
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <TIM_OC5_SetConfig+0xa0>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	@ (8003b50 <TIM_OC5_SetConfig+0xa4>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a15      	ldr	r2, [pc, #84]	@ (8003b54 <TIM_OC5_SetConfig+0xa8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_OC5_SetConfig+0x66>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <TIM_OC5_SetConfig+0xac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC5_SetConfig+0x66>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	@ (8003b5c <TIM_OC5_SetConfig+0xb0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d109      	bne.n	8003b26 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <TIM_OC5_SetConfig+0x9c>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b006      	add	sp, #24
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	fffeffff 	.word	0xfffeffff
 8003b4c:	fffeff8f 	.word	0xfffeff8f
 8003b50:	fffdffff 	.word	0xfffdffff
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <TIM_OC6_SetConfig+0xa0>)
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <TIM_OC6_SetConfig+0xa4>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c08 <TIM_OC6_SetConfig+0xa8>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	051b      	lsls	r3, r3, #20
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <TIM_OC6_SetConfig+0xac>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x68>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <TIM_OC6_SetConfig+0xb0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x68>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <TIM_OC6_SetConfig+0xb4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4a13      	ldr	r2, [pc, #76]	@ (8003c18 <TIM_OC6_SetConfig+0xb8>)
 8003bcc:	4013      	ands	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b006      	add	sp, #24
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	ffefffff 	.word	0xffefffff
 8003c04:	feff8fff 	.word	0xfeff8fff
 8003c08:	ffdfffff 	.word	0xffdfffff
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800
 8003c18:	fffbffff 	.word	0xfffbffff

08003c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	2201      	movs	r2, #1
 8003c34:	4393      	bics	r3, r2
 8003c36:	001a      	movs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	22f0      	movs	r2, #240	@ 0xf0
 8003c46:	4393      	bics	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	220a      	movs	r2, #10
 8003c58:	4393      	bics	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	46c0      	nop			@ (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b006      	add	sp, #24
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	2210      	movs	r2, #16
 8003c90:	4393      	bics	r3, r2
 8003c92:	001a      	movs	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <TIM_TI2_ConfigInputStage+0x60>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	22a0      	movs	r2, #160	@ 0xa0
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b006      	add	sp, #24
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	ffff0fff 	.word	0xffff0fff

08003cdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a08      	ldr	r2, [pc, #32]	@ (8003d10 <TIM_ITRx_SetConfig+0x34>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	2207      	movs	r2, #7
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	ffcfff8f 	.word	0xffcfff8f

08003d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4a09      	ldr	r2, [pc, #36]	@ (8003d50 <TIM_ETR_SetConfig+0x3c>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	021a      	lsls	r2, r3, #8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b006      	add	sp, #24
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	ffff00ff 	.word	0xffff00ff

08003d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	221f      	movs	r2, #31
 8003d64:	4013      	ands	r3, r2
 8003d66:	2201      	movs	r2, #1
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	43d2      	mvns	r2, r2
 8003d76:	401a      	ands	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	211f      	movs	r1, #31
 8003d84:	400b      	ands	r3, r1
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4099      	lsls	r1, r3
 8003d8a:	000b      	movs	r3, r1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b006      	add	sp, #24
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	223c      	movs	r2, #60	@ 0x3c
 8003daa:	5c9b      	ldrb	r3, [r3, r2]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e04a      	b.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	223c      	movs	r2, #60	@ 0x3c
 8003db8:	2101      	movs	r1, #1
 8003dba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	223d      	movs	r2, #61	@ 0x3d
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2270      	movs	r2, #112	@ 0x70
 8003df4:	4393      	bics	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a11      	ldr	r2, [pc, #68]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a10      	ldr	r2, [pc, #64]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10c      	bne.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	4393      	bics	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	223d      	movs	r2, #61	@ 0x3d
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	223c      	movs	r2, #60	@ 0x3c
 8003e44:	2100      	movs	r1, #0
 8003e46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b004      	add	sp, #16
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	40012c00 	.word	0x40012c00
 8003e58:	ff0fffff 	.word	0xff0fffff
 8003e5c:	40000400 	.word	0x40000400

08003e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e046      	b.n	8003f00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2288      	movs	r2, #136	@ 0x88
 8003e76:	589b      	ldr	r3, [r3, r2]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2284      	movs	r2, #132	@ 0x84
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc fe8c 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2288      	movs	r2, #136	@ 0x88
 8003e90:	2124      	movs	r1, #36	@ 0x24
 8003e92:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 fa10 	bl	80042d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 f8a2 	bl	8004000 <UART_SetConfig>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e01c      	b.n	8003f00 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	490d      	ldr	r1, [pc, #52]	@ (8003f08 <HAL_UART_Init+0xa8>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	212a      	movs	r1, #42	@ 0x2a
 8003ee2:	438a      	bics	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fa9f 	bl	800443c <UART_CheckIdleState>
 8003efe:	0003      	movs	r3, r0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	ffffb7ff 	.word	0xffffb7ff

08003f0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	1dbb      	adds	r3, r7, #6
 8003f18:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	228c      	movs	r2, #140	@ 0x8c
 8003f1e:	589b      	ldr	r3, [r3, r2]
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d145      	bne.n	8003fb0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_UART_Receive_DMA+0x26>
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e03d      	b.n	8003fb2 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	2380      	movs	r3, #128	@ 0x80
 8003f3c:	015b      	lsls	r3, r3, #5
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d109      	bne.n	8003f56 <HAL_UART_Receive_DMA+0x4a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d001      	beq.n	8003f56 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e02d      	b.n	8003fb2 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	4013      	ands	r3, r2
 8003f68:	d019      	beq.n	8003f9e <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f70:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2180      	movs	r1, #128	@ 0x80
 8003f8c:	04c9      	lsls	r1, r1, #19
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f9e:	1dbb      	adds	r3, r7, #6
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 fb62 	bl	8004670 <UART_Start_Receive_DMA>
 8003fac:	0003      	movs	r3, r0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b008      	add	sp, #32
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	000a      	movs	r2, r1
 8003ff4:	1cbb      	adds	r3, r7, #2
 8003ff6:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004008:	231a      	movs	r3, #26
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4313      	orrs	r3, r2
 8004026:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4aa1      	ldr	r2, [pc, #644]	@ (80042b4 <UART_SetConfig+0x2b4>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a9c      	ldr	r2, [pc, #624]	@ (80042b8 <UART_SetConfig+0x2b8>)
 8004046:	4013      	ands	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	4313      	orrs	r3, r2
 8004064:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a93      	ldr	r2, [pc, #588]	@ (80042bc <UART_SetConfig+0x2bc>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	220f      	movs	r2, #15
 8004084:	4393      	bics	r3, r2
 8004086:	0019      	movs	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a89      	ldr	r2, [pc, #548]	@ (80042c0 <UART_SetConfig+0x2c0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d127      	bne.n	80040ee <UART_SetConfig+0xee>
 800409e:	4b89      	ldr	r3, [pc, #548]	@ (80042c4 <UART_SetConfig+0x2c4>)
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	2203      	movs	r2, #3
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d017      	beq.n	80040da <UART_SetConfig+0xda>
 80040aa:	d81b      	bhi.n	80040e4 <UART_SetConfig+0xe4>
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d00a      	beq.n	80040c6 <UART_SetConfig+0xc6>
 80040b0:	d818      	bhi.n	80040e4 <UART_SetConfig+0xe4>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <UART_SetConfig+0xbc>
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d00a      	beq.n	80040d0 <UART_SetConfig+0xd0>
 80040ba:	e013      	b.n	80040e4 <UART_SetConfig+0xe4>
 80040bc:	231b      	movs	r3, #27
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e021      	b.n	800410a <UART_SetConfig+0x10a>
 80040c6:	231b      	movs	r3, #27
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	e01c      	b.n	800410a <UART_SetConfig+0x10a>
 80040d0:	231b      	movs	r3, #27
 80040d2:	18fb      	adds	r3, r7, r3
 80040d4:	2204      	movs	r2, #4
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e017      	b.n	800410a <UART_SetConfig+0x10a>
 80040da:	231b      	movs	r3, #27
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	2208      	movs	r2, #8
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e012      	b.n	800410a <UART_SetConfig+0x10a>
 80040e4:	231b      	movs	r3, #27
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	2210      	movs	r2, #16
 80040ea:	701a      	strb	r2, [r3, #0]
 80040ec:	e00d      	b.n	800410a <UART_SetConfig+0x10a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a75      	ldr	r2, [pc, #468]	@ (80042c8 <UART_SetConfig+0x2c8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d104      	bne.n	8004102 <UART_SetConfig+0x102>
 80040f8:	231b      	movs	r3, #27
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
 8004100:	e003      	b.n	800410a <UART_SetConfig+0x10a>
 8004102:	231b      	movs	r3, #27
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2210      	movs	r2, #16
 8004108:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	429a      	cmp	r2, r3
 8004114:	d000      	beq.n	8004118 <UART_SetConfig+0x118>
 8004116:	e065      	b.n	80041e4 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004118:	231b      	movs	r3, #27
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d015      	beq.n	800414e <UART_SetConfig+0x14e>
 8004122:	dc18      	bgt.n	8004156 <UART_SetConfig+0x156>
 8004124:	2b04      	cmp	r3, #4
 8004126:	d00d      	beq.n	8004144 <UART_SetConfig+0x144>
 8004128:	dc15      	bgt.n	8004156 <UART_SetConfig+0x156>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <UART_SetConfig+0x134>
 800412e:	2b02      	cmp	r3, #2
 8004130:	d005      	beq.n	800413e <UART_SetConfig+0x13e>
 8004132:	e010      	b.n	8004156 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004134:	f7fe fc04 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8004138:	0003      	movs	r3, r0
 800413a:	617b      	str	r3, [r7, #20]
        break;
 800413c:	e012      	b.n	8004164 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800413e:	4b63      	ldr	r3, [pc, #396]	@ (80042cc <UART_SetConfig+0x2cc>)
 8004140:	617b      	str	r3, [r7, #20]
        break;
 8004142:	e00f      	b.n	8004164 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004144:	f7fe fb72 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8004148:	0003      	movs	r3, r0
 800414a:	617b      	str	r3, [r7, #20]
        break;
 800414c:	e00a      	b.n	8004164 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	617b      	str	r3, [r7, #20]
        break;
 8004154:	e006      	b.n	8004164 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800415a:	231a      	movs	r3, #26
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
        break;
 8004162:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d100      	bne.n	800416c <UART_SetConfig+0x16c>
 800416a:	e08d      	b.n	8004288 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004170:	4b57      	ldr	r3, [pc, #348]	@ (80042d0 <UART_SetConfig+0x2d0>)
 8004172:	0052      	lsls	r2, r2, #1
 8004174:	5ad3      	ldrh	r3, [r2, r3]
 8004176:	0019      	movs	r1, r3
 8004178:	6978      	ldr	r0, [r7, #20]
 800417a:	f7fb ffc1 	bl	8000100 <__udivsi3>
 800417e:	0003      	movs	r3, r0
 8004180:	005a      	lsls	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	18d2      	adds	r2, r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0019      	movs	r1, r3
 8004190:	0010      	movs	r0, r2
 8004192:	f7fb ffb5 	bl	8000100 <__udivsi3>
 8004196:	0003      	movs	r3, r0
 8004198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b0f      	cmp	r3, #15
 800419e:	d91c      	bls.n	80041da <UART_SetConfig+0x1da>
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d217      	bcs.n	80041da <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	200e      	movs	r0, #14
 80041b0:	183b      	adds	r3, r7, r0
 80041b2:	210f      	movs	r1, #15
 80041b4:	438a      	bics	r2, r1
 80041b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2207      	movs	r2, #7
 80041c0:	4013      	ands	r3, r2
 80041c2:	b299      	uxth	r1, r3
 80041c4:	183b      	adds	r3, r7, r0
 80041c6:	183a      	adds	r2, r7, r0
 80041c8:	8812      	ldrh	r2, [r2, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	183a      	adds	r2, r7, r0
 80041d4:	8812      	ldrh	r2, [r2, #0]
 80041d6:	60da      	str	r2, [r3, #12]
 80041d8:	e056      	b.n	8004288 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80041da:	231a      	movs	r3, #26
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e051      	b.n	8004288 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041e4:	231b      	movs	r3, #27
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d015      	beq.n	800421a <UART_SetConfig+0x21a>
 80041ee:	dc18      	bgt.n	8004222 <UART_SetConfig+0x222>
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d00d      	beq.n	8004210 <UART_SetConfig+0x210>
 80041f4:	dc15      	bgt.n	8004222 <UART_SetConfig+0x222>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <UART_SetConfig+0x200>
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d005      	beq.n	800420a <UART_SetConfig+0x20a>
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe fb9e 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8004204:	0003      	movs	r3, r0
 8004206:	617b      	str	r3, [r7, #20]
        break;
 8004208:	e012      	b.n	8004230 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420a:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <UART_SetConfig+0x2cc>)
 800420c:	617b      	str	r3, [r7, #20]
        break;
 800420e:	e00f      	b.n	8004230 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004210:	f7fe fb0c 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8004214:	0003      	movs	r3, r0
 8004216:	617b      	str	r3, [r7, #20]
        break;
 8004218:	e00a      	b.n	8004230 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	617b      	str	r3, [r7, #20]
        break;
 8004220:	e006      	b.n	8004230 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004226:	231a      	movs	r3, #26
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
        break;
 800422e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d028      	beq.n	8004288 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800423a:	4b25      	ldr	r3, [pc, #148]	@ (80042d0 <UART_SetConfig+0x2d0>)
 800423c:	0052      	lsls	r2, r2, #1
 800423e:	5ad3      	ldrh	r3, [r2, r3]
 8004240:	0019      	movs	r1, r3
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f7fb ff5c 	bl	8000100 <__udivsi3>
 8004248:	0003      	movs	r3, r0
 800424a:	001a      	movs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	18d2      	adds	r2, r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0019      	movs	r1, r3
 800425a:	0010      	movs	r0, r2
 800425c:	f7fb ff50 	bl	8000100 <__udivsi3>
 8004260:	0003      	movs	r3, r0
 8004262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	2b0f      	cmp	r3, #15
 8004268:	d90a      	bls.n	8004280 <UART_SetConfig+0x280>
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	2380      	movs	r3, #128	@ 0x80
 800426e:	025b      	lsls	r3, r3, #9
 8004270:	429a      	cmp	r2, r3
 8004272:	d205      	bcs.n	8004280 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	e003      	b.n	8004288 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004280:	231a      	movs	r3, #26
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	226a      	movs	r2, #106	@ 0x6a
 800428c:	2101      	movs	r1, #1
 800428e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2268      	movs	r2, #104	@ 0x68
 8004294:	2101      	movs	r1, #1
 8004296:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042a4:	231a      	movs	r3, #26
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	781b      	ldrb	r3, [r3, #0]
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b008      	add	sp, #32
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	cfff69f3 	.word	0xcfff69f3
 80042b8:	ffffcfff 	.word	0xffffcfff
 80042bc:	11fff4ff 	.word	0x11fff4ff
 80042c0:	40013800 	.word	0x40013800
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40004400 	.word	0x40004400
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	08004c38 	.word	0x08004c38

080042d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e0:	2208      	movs	r2, #8
 80042e2:	4013      	ands	r3, r2
 80042e4:	d00b      	beq.n	80042fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004418 <UART_AdvFeatureConfig+0x144>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	2201      	movs	r2, #1
 8004304:	4013      	ands	r3, r2
 8004306:	d00b      	beq.n	8004320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a43      	ldr	r2, [pc, #268]	@ (800441c <UART_AdvFeatureConfig+0x148>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	2202      	movs	r2, #2
 8004326:	4013      	ands	r3, r2
 8004328:	d00b      	beq.n	8004342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a3b      	ldr	r2, [pc, #236]	@ (8004420 <UART_AdvFeatureConfig+0x14c>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	2204      	movs	r2, #4
 8004348:	4013      	ands	r3, r2
 800434a:	d00b      	beq.n	8004364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4a34      	ldr	r2, [pc, #208]	@ (8004424 <UART_AdvFeatureConfig+0x150>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	2210      	movs	r2, #16
 800436a:	4013      	ands	r3, r2
 800436c:	d00b      	beq.n	8004386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a2c      	ldr	r2, [pc, #176]	@ (8004428 <UART_AdvFeatureConfig+0x154>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438a:	2220      	movs	r2, #32
 800438c:	4013      	ands	r3, r2
 800438e:	d00b      	beq.n	80043a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4a25      	ldr	r2, [pc, #148]	@ (800442c <UART_AdvFeatureConfig+0x158>)
 8004398:	4013      	ands	r3, r2
 800439a:	0019      	movs	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	2240      	movs	r2, #64	@ 0x40
 80043ae:	4013      	ands	r3, r2
 80043b0:	d01d      	beq.n	80043ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004430 <UART_AdvFeatureConfig+0x15c>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	0019      	movs	r1, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ce:	2380      	movs	r3, #128	@ 0x80
 80043d0:	035b      	lsls	r3, r3, #13
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d10b      	bne.n	80043ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <UART_AdvFeatureConfig+0x160>)
 80043de:	4013      	ands	r3, r2
 80043e0:	0019      	movs	r1, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	4013      	ands	r3, r2
 80043f6:	d00b      	beq.n	8004410 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004438 <UART_AdvFeatureConfig+0x164>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }
}
 8004410:	46c0      	nop			@ (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}
 8004418:	ffff7fff 	.word	0xffff7fff
 800441c:	fffdffff 	.word	0xfffdffff
 8004420:	fffeffff 	.word	0xfffeffff
 8004424:	fffbffff 	.word	0xfffbffff
 8004428:	ffffefff 	.word	0xffffefff
 800442c:	ffffdfff 	.word	0xffffdfff
 8004430:	ffefffff 	.word	0xffefffff
 8004434:	ff9fffff 	.word	0xff9fffff
 8004438:	fff7ffff 	.word	0xfff7ffff

0800443c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b092      	sub	sp, #72	@ 0x48
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2290      	movs	r2, #144	@ 0x90
 8004448:	2100      	movs	r1, #0
 800444a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800444c:	f7fd f824 	bl	8001498 <HAL_GetTick>
 8004450:	0003      	movs	r3, r0
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2208      	movs	r2, #8
 800445c:	4013      	ands	r3, r2
 800445e:	2b08      	cmp	r3, #8
 8004460:	d12d      	bne.n	80044be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004464:	2280      	movs	r2, #128	@ 0x80
 8004466:	0391      	lsls	r1, r2, #14
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4a47      	ldr	r2, [pc, #284]	@ (8004588 <UART_CheckIdleState+0x14c>)
 800446c:	9200      	str	r2, [sp, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	f000 f88e 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d022      	beq.n	80044be <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004478:	f3ef 8310 	mrs	r3, PRIMASK
 800447c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004482:	2301      	movs	r3, #1
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			@ (mov r8, r8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2180      	movs	r1, #128	@ 0x80
 800449a:	438a      	bics	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a4:	f383 8810 	msr	PRIMASK, r3
}
 80044a8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2288      	movs	r2, #136	@ 0x88
 80044ae:	2120      	movs	r1, #32
 80044b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2284      	movs	r2, #132	@ 0x84
 80044b6:	2100      	movs	r1, #0
 80044b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e060      	b.n	8004580 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2204      	movs	r2, #4
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d146      	bne.n	800455a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ce:	2280      	movs	r2, #128	@ 0x80
 80044d0:	03d1      	lsls	r1, r2, #15
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004588 <UART_CheckIdleState+0x14c>)
 80044d6:	9200      	str	r2, [sp, #0]
 80044d8:	2200      	movs	r2, #0
 80044da:	f000 f859 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 80044de:	1e03      	subs	r3, r0, #0
 80044e0:	d03b      	beq.n	800455a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e2:	f3ef 8310 	mrs	r3, PRIMASK
 80044e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044e8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ec:	2301      	movs	r3, #1
 80044ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f383 8810 	msr	PRIMASK, r3
}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4922      	ldr	r1, [pc, #136]	@ (800458c <UART_CheckIdleState+0x150>)
 8004504:	400a      	ands	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004514:	f3ef 8310 	mrs	r3, PRIMASK
 8004518:	61bb      	str	r3, [r7, #24]
  return(result);
 800451a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	633b      	str	r3, [r7, #48]	@ 0x30
 800451e:	2301      	movs	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	438a      	bics	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	228c      	movs	r2, #140	@ 0x8c
 800454a:	2120      	movs	r1, #32
 800454c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2284      	movs	r2, #132	@ 0x84
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e012      	b.n	8004580 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2288      	movs	r2, #136	@ 0x88
 800455e:	2120      	movs	r1, #32
 8004560:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	228c      	movs	r2, #140	@ 0x8c
 8004566:	2120      	movs	r1, #32
 8004568:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2284      	movs	r2, #132	@ 0x84
 800457a:	2100      	movs	r1, #0
 800457c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b010      	add	sp, #64	@ 0x40
 8004586:	bd80      	pop	{r7, pc}
 8004588:	01ffffff 	.word	0x01ffffff
 800458c:	fffffedf 	.word	0xfffffedf

08004590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	1dfb      	adds	r3, r7, #7
 800459e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a0:	e051      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3301      	adds	r3, #1
 80045a6:	d04e      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fc ff76 	bl	8001498 <HAL_GetTick>
 80045ac:	0002      	movs	r2, r0
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <UART_WaitOnFlagUntilTimeout+0x2e>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e051      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2204      	movs	r2, #4
 80045ca:	4013      	ands	r3, r2
 80045cc:	d03b      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b80      	cmp	r3, #128	@ 0x80
 80045d2:	d038      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b40      	cmp	r3, #64	@ 0x40
 80045d8:	d035      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	2208      	movs	r2, #8
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d111      	bne.n	800460c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2208      	movs	r2, #8
 80045ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 f922 	bl	800483c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2290      	movs	r2, #144	@ 0x90
 80045fc:	2108      	movs	r1, #8
 80045fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2284      	movs	r2, #132	@ 0x84
 8004604:	2100      	movs	r1, #0
 8004606:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e02c      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	401a      	ands	r2, r3
 8004618:	2380      	movs	r3, #128	@ 0x80
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	429a      	cmp	r2, r3
 800461e:	d112      	bne.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2280      	movs	r2, #128	@ 0x80
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	0018      	movs	r0, r3
 800462e:	f000 f905 	bl	800483c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2290      	movs	r2, #144	@ 0x90
 8004636:	2120      	movs	r1, #32
 8004638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2284      	movs	r2, #132	@ 0x84
 800463e:	2100      	movs	r1, #0
 8004640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e00f      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	425a      	negs	r2, r3
 8004656:	4153      	adcs	r3, r2
 8004658:	b2db      	uxtb	r3, r3
 800465a:	001a      	movs	r2, r3
 800465c:	1dfb      	adds	r3, r7, #7
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d09e      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b004      	add	sp, #16
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b090      	sub	sp, #64	@ 0x40
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	1dbb      	adds	r3, r7, #6
 800467c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1dba      	adds	r2, r7, #6
 8004688:	215c      	movs	r1, #92	@ 0x5c
 800468a:	8812      	ldrh	r2, [r2, #0]
 800468c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2290      	movs	r2, #144	@ 0x90
 8004692:	2100      	movs	r1, #0
 8004694:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	228c      	movs	r2, #140	@ 0x8c
 800469a:	2122      	movs	r1, #34	@ 0x22
 800469c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2280      	movs	r2, #128	@ 0x80
 80046a2:	589b      	ldr	r3, [r3, r2]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02d      	beq.n	8004704 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2280      	movs	r2, #128	@ 0x80
 80046ac:	589b      	ldr	r3, [r3, r2]
 80046ae:	4a40      	ldr	r2, [pc, #256]	@ (80047b0 <UART_Start_Receive_DMA+0x140>)
 80046b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2280      	movs	r2, #128	@ 0x80
 80046b6:	589b      	ldr	r3, [r3, r2]
 80046b8:	4a3e      	ldr	r2, [pc, #248]	@ (80047b4 <UART_Start_Receive_DMA+0x144>)
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2280      	movs	r2, #128	@ 0x80
 80046c0:	589b      	ldr	r3, [r3, r2]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	@ (80047b8 <UART_Start_Receive_DMA+0x148>)
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2280      	movs	r2, #128	@ 0x80
 80046ca:	589b      	ldr	r3, [r3, r2]
 80046cc:	2200      	movs	r2, #0
 80046ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2280      	movs	r2, #128	@ 0x80
 80046d4:	5898      	ldr	r0, [r3, r2]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3324      	adds	r3, #36	@ 0x24
 80046dc:	0019      	movs	r1, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e2:	001a      	movs	r2, r3
 80046e4:	1dbb      	adds	r3, r7, #6
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	f7fd f86c 	bl	80017c4 <HAL_DMA_Start_IT>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d009      	beq.n	8004704 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2290      	movs	r2, #144	@ 0x90
 80046f4:	2110      	movs	r1, #16
 80046f6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	228c      	movs	r2, #140	@ 0x8c
 80046fc:	2120      	movs	r1, #32
 80046fe:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e050      	b.n	80047a6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d019      	beq.n	8004740 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470c:	f3ef 8310 	mrs	r3, PRIMASK
 8004710:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004716:	2301      	movs	r3, #1
 8004718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			@ (mov r8, r8)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2180      	movs	r1, #128	@ 0x80
 800472e:	0049      	lsls	r1, r1, #1
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004736:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004740:	f3ef 8310 	mrs	r3, PRIMASK
 8004744:	613b      	str	r3, [r7, #16]
  return(result);
 8004746:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004772:	f3ef 8310 	mrs	r3, PRIMASK
 8004776:	61fb      	str	r3, [r7, #28]
  return(result);
 8004778:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
 800477c:	2301      	movs	r3, #1
 800477e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2140      	movs	r1, #64	@ 0x40
 8004794:	430a      	orrs	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b010      	add	sp, #64	@ 0x40
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	08004909 	.word	0x08004909
 80047b4:	08004a39 	.word	0x08004a39
 80047b8:	08004a7b 	.word	0x08004a7b

080047bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c4:	f3ef 8310 	mrs	r3, PRIMASK
 80047c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ca:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	2301      	movs	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f383 8810 	msr	PRIMASK, r3
}
 80047d8:	46c0      	nop			@ (mov r8, r8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	21c0      	movs	r1, #192	@ 0xc0
 80047e6:	438a      	bics	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f383 8810 	msr	PRIMASK, r3
}
 80047f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f6:	f3ef 8310 	mrs	r3, PRIMASK
 80047fa:	617b      	str	r3, [r7, #20]
  return(result);
 80047fc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	2301      	movs	r3, #1
 8004802:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4908      	ldr	r1, [pc, #32]	@ (8004838 <UART_EndTxTransfer+0x7c>)
 8004818:	400a      	ands	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2288      	movs	r2, #136	@ 0x88
 800482c:	2120      	movs	r1, #32
 800482e:	5099      	str	r1, [r3, r2]
}
 8004830:	46c0      	nop			@ (mov r8, r8)
 8004832:	46bd      	mov	sp, r7
 8004834:	b00a      	add	sp, #40	@ 0x28
 8004836:	bd80      	pop	{r7, pc}
 8004838:	ff7fffff 	.word	0xff7fffff

0800483c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	@ 0x38
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004844:	f3ef 8310 	mrs	r3, PRIMASK
 8004848:	617b      	str	r3, [r7, #20]
  return(result);
 800484a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
 800484e:	2301      	movs	r3, #1
 8004850:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			@ (mov r8, r8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4926      	ldr	r1, [pc, #152]	@ (8004900 <UART_EndRxTransfer+0xc4>)
 8004866:	400a      	ands	r2, r1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f383 8810 	msr	PRIMASK, r3
}
 8004874:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004876:	f3ef 8310 	mrs	r3, PRIMASK
 800487a:	623b      	str	r3, [r7, #32]
  return(result);
 800487c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	491b      	ldr	r1, [pc, #108]	@ (8004904 <UART_EndRxTransfer+0xc8>)
 8004898:	400a      	ands	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	f383 8810 	msr	PRIMASK, r3
}
 80048a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d118      	bne.n	80048e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b0:	f3ef 8310 	mrs	r3, PRIMASK
 80048b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80048b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ba:	2301      	movs	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f383 8810 	msr	PRIMASK, r3
}
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2110      	movs	r1, #16
 80048d2:	438a      	bics	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f383 8810 	msr	PRIMASK, r3
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	228c      	movs	r2, #140	@ 0x8c
 80048e6:	2120      	movs	r1, #32
 80048e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b00e      	add	sp, #56	@ 0x38
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	fffffedf 	.word	0xfffffedf
 8004904:	effffffe 	.word	0xeffffffe

08004908 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b094      	sub	sp, #80	@ 0x50
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004914:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2220      	movs	r2, #32
 800491e:	4013      	ands	r3, r2
 8004920:	d16f      	bne.n	8004a02 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004924:	225e      	movs	r2, #94	@ 0x5e
 8004926:	2100      	movs	r1, #0
 8004928:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492a:	f3ef 8310 	mrs	r3, PRIMASK
 800492e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004930:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004934:	2301      	movs	r3, #1
 8004936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	493a      	ldr	r1, [pc, #232]	@ (8004a34 <UART_DMAReceiveCplt+0x12c>)
 800494c:	400a      	ands	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004952:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	f383 8810 	msr	PRIMASK, r3
}
 800495a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	647b      	str	r3, [r7, #68]	@ 0x44
 8004966:	2301      	movs	r3, #1
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			@ (mov r8, r8)
 8004972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	438a      	bics	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	643b      	str	r3, [r7, #64]	@ 0x40
 8004998:	2301      	movs	r3, #1
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2140      	movs	r1, #64	@ 0x40
 80049b0:	438a      	bics	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c2:	228c      	movs	r2, #140	@ 0x8c
 80049c4:	2120      	movs	r1, #32
 80049c6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d118      	bne.n	8004a02 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d0:	f3ef 8310 	mrs	r3, PRIMASK
 80049d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049d6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049da:	2301      	movs	r3, #1
 80049dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f383 8810 	msr	PRIMASK, r3
}
 80049e4:	46c0      	nop			@ (mov r8, r8)
 80049e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2110      	movs	r1, #16
 80049f2:	438a      	bics	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a04:	2200      	movs	r2, #0
 8004a06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a12:	225c      	movs	r2, #92	@ 0x5c
 8004a14:	5a9a      	ldrh	r2, [r3, r2]
 8004a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff fae5 	bl	8003fea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a20:	e003      	b.n	8004a2a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff fac8 	bl	8003fba <HAL_UART_RxCpltCallback>
}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b014      	add	sp, #80	@ 0x50
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	fffffeff 	.word	0xfffffeff

08004a38 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10a      	bne.n	8004a6a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	225c      	movs	r2, #92	@ 0x5c
 8004a58:	5a9b      	ldrh	r3, [r3, r2]
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	0011      	movs	r1, r2
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7ff fac1 	bl	8003fea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a68:	e003      	b.n	8004a72 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff faac 	bl	8003fca <HAL_UART_RxHalfCpltCallback>
}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2288      	movs	r2, #136	@ 0x88
 8004a8c:	589b      	ldr	r3, [r3, r2]
 8004a8e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	228c      	movs	r2, #140	@ 0x8c
 8004a94:	589b      	ldr	r3, [r3, r2]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2280      	movs	r2, #128	@ 0x80
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b80      	cmp	r3, #128	@ 0x80
 8004aa4:	d10a      	bne.n	8004abc <UART_DMAError+0x42>
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b21      	cmp	r3, #33	@ 0x21
 8004aaa:	d107      	bne.n	8004abc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2256      	movs	r2, #86	@ 0x56
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7ff fe80 	bl	80047bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2240      	movs	r2, #64	@ 0x40
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	d10a      	bne.n	8004ae0 <UART_DMAError+0x66>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b22      	cmp	r3, #34	@ 0x22
 8004ace:	d107      	bne.n	8004ae0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	225e      	movs	r2, #94	@ 0x5e
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff feae 	bl	800483c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2290      	movs	r2, #144	@ 0x90
 8004ae4:	589b      	ldr	r3, [r3, r2]
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2190      	movs	r1, #144	@ 0x90
 8004aee:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7ff fa71 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <memset>:
 8004b00:	0003      	movs	r3, r0
 8004b02:	1882      	adds	r2, r0, r2
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	7019      	strb	r1, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	2600      	movs	r6, #0
 8004b14:	4c0c      	ldr	r4, [pc, #48]	@ (8004b48 <__libc_init_array+0x38>)
 8004b16:	4d0d      	ldr	r5, [pc, #52]	@ (8004b4c <__libc_init_array+0x3c>)
 8004b18:	1b64      	subs	r4, r4, r5
 8004b1a:	10a4      	asrs	r4, r4, #2
 8004b1c:	42a6      	cmp	r6, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	2600      	movs	r6, #0
 8004b22:	f000 f819 	bl	8004b58 <_init>
 8004b26:	4c0a      	ldr	r4, [pc, #40]	@ (8004b50 <__libc_init_array+0x40>)
 8004b28:	4d0a      	ldr	r5, [pc, #40]	@ (8004b54 <__libc_init_array+0x44>)
 8004b2a:	1b64      	subs	r4, r4, r5
 8004b2c:	10a4      	asrs	r4, r4, #2
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	00b3      	lsls	r3, r6, #2
 8004b36:	58eb      	ldr	r3, [r5, r3]
 8004b38:	4798      	blx	r3
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	00b3      	lsls	r3, r6, #2
 8004b40:	58eb      	ldr	r3, [r5, r3]
 8004b42:	4798      	blx	r3
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08004c50 	.word	0x08004c50
 8004b4c:	08004c50 	.word	0x08004c50
 8004b50:	08004c58 	.word	0x08004c58
 8004b54:	08004c50 	.word	0x08004c50

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
