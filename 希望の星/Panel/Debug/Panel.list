
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080057b8  080057b8  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005898  08005898  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005898  08005898  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005898  08005898  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005898  08005898  00006898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058a0  080058a0  000068a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000000c  080058b0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080058b0  000075dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d37  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cf  00000000  00000000  0001ad6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b12  00000000  00000000  0001e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001783a  00000000  00000000  0001ef62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d16  00000000  00000000  0003679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d09d  00000000  00000000  000484b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d554f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b8  00000000  00000000  000d5594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080057a0 	.word	0x080057a0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080057a0 	.word	0x080057a0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f8ab 	bl	800037c <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f89d 	bl	800037c <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			@ (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f893 	bl	800037c <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			@ (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f839 	bl	80002dc <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82f 	bl	80002dc <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	024e      	lsls	r6, r1, #9
 8000292:	004c      	lsls	r4, r1, #1
 8000294:	0245      	lsls	r5, r0, #9
 8000296:	0a6d      	lsrs	r5, r5, #9
 8000298:	0e12      	lsrs	r2, r2, #24
 800029a:	0fc3      	lsrs	r3, r0, #31
 800029c:	0a76      	lsrs	r6, r6, #9
 800029e:	0e24      	lsrs	r4, r4, #24
 80002a0:	0fc9      	lsrs	r1, r1, #31
 80002a2:	2aff      	cmp	r2, #255	@ 0xff
 80002a4:	d010      	beq.n	80002c8 <__eqsf2+0x3c>
 80002a6:	2cff      	cmp	r4, #255	@ 0xff
 80002a8:	d00c      	beq.n	80002c4 <__eqsf2+0x38>
 80002aa:	2001      	movs	r0, #1
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d10a      	bne.n	80002c6 <__eqsf2+0x3a>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d108      	bne.n	80002c6 <__eqsf2+0x3a>
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d00f      	beq.n	80002d8 <__eqsf2+0x4c>
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d104      	bne.n	80002c6 <__eqsf2+0x3a>
 80002bc:	0028      	movs	r0, r5
 80002be:	1e43      	subs	r3, r0, #1
 80002c0:	4198      	sbcs	r0, r3
 80002c2:	e000      	b.n	80002c6 <__eqsf2+0x3a>
 80002c4:	2001      	movs	r0, #1
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	2001      	movs	r0, #1
 80002ca:	2cff      	cmp	r4, #255	@ 0xff
 80002cc:	d1fb      	bne.n	80002c6 <__eqsf2+0x3a>
 80002ce:	4335      	orrs	r5, r6
 80002d0:	d1f9      	bne.n	80002c6 <__eqsf2+0x3a>
 80002d2:	404b      	eors	r3, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	e7f6      	b.n	80002c6 <__eqsf2+0x3a>
 80002d8:	2000      	movs	r0, #0
 80002da:	e7f4      	b.n	80002c6 <__eqsf2+0x3a>

080002dc <__gesf2>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	0042      	lsls	r2, r0, #1
 80002e0:	0244      	lsls	r4, r0, #9
 80002e2:	024d      	lsls	r5, r1, #9
 80002e4:	0fc3      	lsrs	r3, r0, #31
 80002e6:	0048      	lsls	r0, r1, #1
 80002e8:	0a64      	lsrs	r4, r4, #9
 80002ea:	0e12      	lsrs	r2, r2, #24
 80002ec:	0a6d      	lsrs	r5, r5, #9
 80002ee:	0e00      	lsrs	r0, r0, #24
 80002f0:	0fc9      	lsrs	r1, r1, #31
 80002f2:	2aff      	cmp	r2, #255	@ 0xff
 80002f4:	d019      	beq.n	800032a <__gesf2+0x4e>
 80002f6:	28ff      	cmp	r0, #255	@ 0xff
 80002f8:	d00b      	beq.n	8000312 <__gesf2+0x36>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d11e      	bne.n	800033c <__gesf2+0x60>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d10b      	bne.n	800031a <__gesf2+0x3e>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d027      	beq.n	8000356 <__gesf2+0x7a>
 8000306:	2c00      	cmp	r4, #0
 8000308:	d134      	bne.n	8000374 <__gesf2+0x98>
 800030a:	2900      	cmp	r1, #0
 800030c:	d02f      	beq.n	800036e <__gesf2+0x92>
 800030e:	0008      	movs	r0, r1
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	2d00      	cmp	r5, #0
 8000314:	d128      	bne.n	8000368 <__gesf2+0x8c>
 8000316:	2a00      	cmp	r2, #0
 8000318:	d101      	bne.n	800031e <__gesf2+0x42>
 800031a:	2c00      	cmp	r4, #0
 800031c:	d0f5      	beq.n	800030a <__gesf2+0x2e>
 800031e:	428b      	cmp	r3, r1
 8000320:	d107      	bne.n	8000332 <__gesf2+0x56>
 8000322:	2b00      	cmp	r3, #0
 8000324:	d023      	beq.n	800036e <__gesf2+0x92>
 8000326:	0018      	movs	r0, r3
 8000328:	e7f2      	b.n	8000310 <__gesf2+0x34>
 800032a:	2c00      	cmp	r4, #0
 800032c:	d11c      	bne.n	8000368 <__gesf2+0x8c>
 800032e:	28ff      	cmp	r0, #255	@ 0xff
 8000330:	d014      	beq.n	800035c <__gesf2+0x80>
 8000332:	1e58      	subs	r0, r3, #1
 8000334:	2302      	movs	r3, #2
 8000336:	4018      	ands	r0, r3
 8000338:	3801      	subs	r0, #1
 800033a:	e7e9      	b.n	8000310 <__gesf2+0x34>
 800033c:	2800      	cmp	r0, #0
 800033e:	d0f8      	beq.n	8000332 <__gesf2+0x56>
 8000340:	428b      	cmp	r3, r1
 8000342:	d1f6      	bne.n	8000332 <__gesf2+0x56>
 8000344:	4282      	cmp	r2, r0
 8000346:	dcf4      	bgt.n	8000332 <__gesf2+0x56>
 8000348:	dbeb      	blt.n	8000322 <__gesf2+0x46>
 800034a:	42ac      	cmp	r4, r5
 800034c:	d8f1      	bhi.n	8000332 <__gesf2+0x56>
 800034e:	2000      	movs	r0, #0
 8000350:	42ac      	cmp	r4, r5
 8000352:	d2dd      	bcs.n	8000310 <__gesf2+0x34>
 8000354:	e7e5      	b.n	8000322 <__gesf2+0x46>
 8000356:	2c00      	cmp	r4, #0
 8000358:	d0da      	beq.n	8000310 <__gesf2+0x34>
 800035a:	e7ea      	b.n	8000332 <__gesf2+0x56>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d103      	bne.n	8000368 <__gesf2+0x8c>
 8000360:	428b      	cmp	r3, r1
 8000362:	d1e6      	bne.n	8000332 <__gesf2+0x56>
 8000364:	2000      	movs	r0, #0
 8000366:	e7d3      	b.n	8000310 <__gesf2+0x34>
 8000368:	2002      	movs	r0, #2
 800036a:	4240      	negs	r0, r0
 800036c:	e7d0      	b.n	8000310 <__gesf2+0x34>
 800036e:	2001      	movs	r0, #1
 8000370:	4240      	negs	r0, r0
 8000372:	e7cd      	b.n	8000310 <__gesf2+0x34>
 8000374:	428b      	cmp	r3, r1
 8000376:	d0e8      	beq.n	800034a <__gesf2+0x6e>
 8000378:	e7db      	b.n	8000332 <__gesf2+0x56>
 800037a:	46c0      	nop			@ (mov r8, r8)

0800037c <__lesf2>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	0042      	lsls	r2, r0, #1
 8000380:	0244      	lsls	r4, r0, #9
 8000382:	024d      	lsls	r5, r1, #9
 8000384:	0fc3      	lsrs	r3, r0, #31
 8000386:	0048      	lsls	r0, r1, #1
 8000388:	0a64      	lsrs	r4, r4, #9
 800038a:	0e12      	lsrs	r2, r2, #24
 800038c:	0a6d      	lsrs	r5, r5, #9
 800038e:	0e00      	lsrs	r0, r0, #24
 8000390:	0fc9      	lsrs	r1, r1, #31
 8000392:	2aff      	cmp	r2, #255	@ 0xff
 8000394:	d01a      	beq.n	80003cc <__lesf2+0x50>
 8000396:	28ff      	cmp	r0, #255	@ 0xff
 8000398:	d00e      	beq.n	80003b8 <__lesf2+0x3c>
 800039a:	2a00      	cmp	r2, #0
 800039c:	d11e      	bne.n	80003dc <__lesf2+0x60>
 800039e:	2800      	cmp	r0, #0
 80003a0:	d10e      	bne.n	80003c0 <__lesf2+0x44>
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d02a      	beq.n	80003fc <__lesf2+0x80>
 80003a6:	2c00      	cmp	r4, #0
 80003a8:	d00c      	beq.n	80003c4 <__lesf2+0x48>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d01d      	beq.n	80003ea <__lesf2+0x6e>
 80003ae:	1e58      	subs	r0, r3, #1
 80003b0:	2302      	movs	r3, #2
 80003b2:	4018      	ands	r0, r3
 80003b4:	3801      	subs	r0, #1
 80003b6:	e010      	b.n	80003da <__lesf2+0x5e>
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d10d      	bne.n	80003d8 <__lesf2+0x5c>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	d120      	bne.n	8000402 <__lesf2+0x86>
 80003c0:	2c00      	cmp	r4, #0
 80003c2:	d11e      	bne.n	8000402 <__lesf2+0x86>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d023      	beq.n	8000410 <__lesf2+0x94>
 80003c8:	0008      	movs	r0, r1
 80003ca:	e006      	b.n	80003da <__lesf2+0x5e>
 80003cc:	2c00      	cmp	r4, #0
 80003ce:	d103      	bne.n	80003d8 <__lesf2+0x5c>
 80003d0:	28ff      	cmp	r0, #255	@ 0xff
 80003d2:	d1ec      	bne.n	80003ae <__lesf2+0x32>
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d017      	beq.n	8000408 <__lesf2+0x8c>
 80003d8:	2002      	movs	r0, #2
 80003da:	bd30      	pop	{r4, r5, pc}
 80003dc:	2800      	cmp	r0, #0
 80003de:	d0e6      	beq.n	80003ae <__lesf2+0x32>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d1e4      	bne.n	80003ae <__lesf2+0x32>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	dce2      	bgt.n	80003ae <__lesf2+0x32>
 80003e8:	db04      	blt.n	80003f4 <__lesf2+0x78>
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	d8df      	bhi.n	80003ae <__lesf2+0x32>
 80003ee:	2000      	movs	r0, #0
 80003f0:	42ac      	cmp	r4, r5
 80003f2:	d2f2      	bcs.n	80003da <__lesf2+0x5e>
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00b      	beq.n	8000410 <__lesf2+0x94>
 80003f8:	0018      	movs	r0, r3
 80003fa:	e7ee      	b.n	80003da <__lesf2+0x5e>
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d0ec      	beq.n	80003da <__lesf2+0x5e>
 8000400:	e7d5      	b.n	80003ae <__lesf2+0x32>
 8000402:	428b      	cmp	r3, r1
 8000404:	d1d3      	bne.n	80003ae <__lesf2+0x32>
 8000406:	e7f5      	b.n	80003f4 <__lesf2+0x78>
 8000408:	2000      	movs	r0, #0
 800040a:	428b      	cmp	r3, r1
 800040c:	d0e5      	beq.n	80003da <__lesf2+0x5e>
 800040e:	e7ce      	b.n	80003ae <__lesf2+0x32>
 8000410:	2001      	movs	r0, #1
 8000412:	4240      	negs	r0, r0
 8000414:	e7e1      	b.n	80003da <__lesf2+0x5e>
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_i2f>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	2800      	cmp	r0, #0
 800041c:	d013      	beq.n	8000446 <__aeabi_i2f+0x2e>
 800041e:	17c3      	asrs	r3, r0, #31
 8000420:	18c5      	adds	r5, r0, r3
 8000422:	405d      	eors	r5, r3
 8000424:	0fc4      	lsrs	r4, r0, #31
 8000426:	0028      	movs	r0, r5
 8000428:	f000 fb74 	bl	8000b14 <__clzsi2>
 800042c:	239e      	movs	r3, #158	@ 0x9e
 800042e:	0001      	movs	r1, r0
 8000430:	1a1b      	subs	r3, r3, r0
 8000432:	2b96      	cmp	r3, #150	@ 0x96
 8000434:	dc0f      	bgt.n	8000456 <__aeabi_i2f+0x3e>
 8000436:	2808      	cmp	r0, #8
 8000438:	d034      	beq.n	80004a4 <__aeabi_i2f+0x8c>
 800043a:	3908      	subs	r1, #8
 800043c:	408d      	lsls	r5, r1
 800043e:	026d      	lsls	r5, r5, #9
 8000440:	0a6d      	lsrs	r5, r5, #9
 8000442:	b2d8      	uxtb	r0, r3
 8000444:	e002      	b.n	800044c <__aeabi_i2f+0x34>
 8000446:	2400      	movs	r4, #0
 8000448:	2000      	movs	r0, #0
 800044a:	2500      	movs	r5, #0
 800044c:	05c0      	lsls	r0, r0, #23
 800044e:	4328      	orrs	r0, r5
 8000450:	07e4      	lsls	r4, r4, #31
 8000452:	4320      	orrs	r0, r4
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	2b99      	cmp	r3, #153	@ 0x99
 8000458:	dc16      	bgt.n	8000488 <__aeabi_i2f+0x70>
 800045a:	1f42      	subs	r2, r0, #5
 800045c:	2805      	cmp	r0, #5
 800045e:	d000      	beq.n	8000462 <__aeabi_i2f+0x4a>
 8000460:	4095      	lsls	r5, r2
 8000462:	002a      	movs	r2, r5
 8000464:	4811      	ldr	r0, [pc, #68]	@ (80004ac <__aeabi_i2f+0x94>)
 8000466:	4002      	ands	r2, r0
 8000468:	076e      	lsls	r6, r5, #29
 800046a:	d009      	beq.n	8000480 <__aeabi_i2f+0x68>
 800046c:	260f      	movs	r6, #15
 800046e:	4035      	ands	r5, r6
 8000470:	2d04      	cmp	r5, #4
 8000472:	d005      	beq.n	8000480 <__aeabi_i2f+0x68>
 8000474:	3204      	adds	r2, #4
 8000476:	0155      	lsls	r5, r2, #5
 8000478:	d502      	bpl.n	8000480 <__aeabi_i2f+0x68>
 800047a:	239f      	movs	r3, #159	@ 0x9f
 800047c:	4002      	ands	r2, r0
 800047e:	1a5b      	subs	r3, r3, r1
 8000480:	0192      	lsls	r2, r2, #6
 8000482:	0a55      	lsrs	r5, r2, #9
 8000484:	b2d8      	uxtb	r0, r3
 8000486:	e7e1      	b.n	800044c <__aeabi_i2f+0x34>
 8000488:	2205      	movs	r2, #5
 800048a:	1a12      	subs	r2, r2, r0
 800048c:	0028      	movs	r0, r5
 800048e:	40d0      	lsrs	r0, r2
 8000490:	0002      	movs	r2, r0
 8000492:	0008      	movs	r0, r1
 8000494:	301b      	adds	r0, #27
 8000496:	4085      	lsls	r5, r0
 8000498:	0028      	movs	r0, r5
 800049a:	1e45      	subs	r5, r0, #1
 800049c:	41a8      	sbcs	r0, r5
 800049e:	4302      	orrs	r2, r0
 80004a0:	0015      	movs	r5, r2
 80004a2:	e7de      	b.n	8000462 <__aeabi_i2f+0x4a>
 80004a4:	026d      	lsls	r5, r5, #9
 80004a6:	2096      	movs	r0, #150	@ 0x96
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	e7cf      	b.n	800044c <__aeabi_i2f+0x34>
 80004ac:	fbffffff 	.word	0xfbffffff

080004b0 <__aeabi_dmul>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	4657      	mov	r7, sl
 80004b4:	46de      	mov	lr, fp
 80004b6:	464e      	mov	r6, r9
 80004b8:	4645      	mov	r5, r8
 80004ba:	b5e0      	push	{r5, r6, r7, lr}
 80004bc:	001f      	movs	r7, r3
 80004be:	030b      	lsls	r3, r1, #12
 80004c0:	0b1b      	lsrs	r3, r3, #12
 80004c2:	0016      	movs	r6, r2
 80004c4:	469a      	mov	sl, r3
 80004c6:	0fca      	lsrs	r2, r1, #31
 80004c8:	004b      	lsls	r3, r1, #1
 80004ca:	0004      	movs	r4, r0
 80004cc:	4693      	mov	fp, r2
 80004ce:	b087      	sub	sp, #28
 80004d0:	0d5b      	lsrs	r3, r3, #21
 80004d2:	d100      	bne.n	80004d6 <__aeabi_dmul+0x26>
 80004d4:	e0d5      	b.n	8000682 <__aeabi_dmul+0x1d2>
 80004d6:	4abb      	ldr	r2, [pc, #748]	@ (80007c4 <__aeabi_dmul+0x314>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d100      	bne.n	80004de <__aeabi_dmul+0x2e>
 80004dc:	e0f8      	b.n	80006d0 <__aeabi_dmul+0x220>
 80004de:	4651      	mov	r1, sl
 80004e0:	0f42      	lsrs	r2, r0, #29
 80004e2:	00c9      	lsls	r1, r1, #3
 80004e4:	430a      	orrs	r2, r1
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	0409      	lsls	r1, r1, #16
 80004ea:	4311      	orrs	r1, r2
 80004ec:	00c2      	lsls	r2, r0, #3
 80004ee:	4691      	mov	r9, r2
 80004f0:	4ab5      	ldr	r2, [pc, #724]	@ (80007c8 <__aeabi_dmul+0x318>)
 80004f2:	468a      	mov	sl, r1
 80004f4:	189d      	adds	r5, r3, r2
 80004f6:	2300      	movs	r3, #0
 80004f8:	4698      	mov	r8, r3
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	033c      	lsls	r4, r7, #12
 80004fe:	007b      	lsls	r3, r7, #1
 8000500:	0ffa      	lsrs	r2, r7, #31
 8000502:	0030      	movs	r0, r6
 8000504:	0b24      	lsrs	r4, r4, #12
 8000506:	0d5b      	lsrs	r3, r3, #21
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	d100      	bne.n	800050e <__aeabi_dmul+0x5e>
 800050c:	e096      	b.n	800063c <__aeabi_dmul+0x18c>
 800050e:	4aad      	ldr	r2, [pc, #692]	@ (80007c4 <__aeabi_dmul+0x314>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d031      	beq.n	8000578 <__aeabi_dmul+0xc8>
 8000514:	0f72      	lsrs	r2, r6, #29
 8000516:	00e4      	lsls	r4, r4, #3
 8000518:	4322      	orrs	r2, r4
 800051a:	2480      	movs	r4, #128	@ 0x80
 800051c:	0424      	lsls	r4, r4, #16
 800051e:	4314      	orrs	r4, r2
 8000520:	4aa9      	ldr	r2, [pc, #676]	@ (80007c8 <__aeabi_dmul+0x318>)
 8000522:	00f0      	lsls	r0, r6, #3
 8000524:	4694      	mov	ip, r2
 8000526:	4463      	add	r3, ip
 8000528:	195b      	adds	r3, r3, r5
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	9201      	str	r2, [sp, #4]
 800052e:	4642      	mov	r2, r8
 8000530:	2600      	movs	r6, #0
 8000532:	2a0a      	cmp	r2, #10
 8000534:	dc42      	bgt.n	80005bc <__aeabi_dmul+0x10c>
 8000536:	465a      	mov	r2, fp
 8000538:	9900      	ldr	r1, [sp, #0]
 800053a:	404a      	eors	r2, r1
 800053c:	4693      	mov	fp, r2
 800053e:	4642      	mov	r2, r8
 8000540:	2a02      	cmp	r2, #2
 8000542:	dc32      	bgt.n	80005aa <__aeabi_dmul+0xfa>
 8000544:	3a01      	subs	r2, #1
 8000546:	2a01      	cmp	r2, #1
 8000548:	d900      	bls.n	800054c <__aeabi_dmul+0x9c>
 800054a:	e149      	b.n	80007e0 <__aeabi_dmul+0x330>
 800054c:	2e02      	cmp	r6, #2
 800054e:	d100      	bne.n	8000552 <__aeabi_dmul+0xa2>
 8000550:	e0ca      	b.n	80006e8 <__aeabi_dmul+0x238>
 8000552:	2e01      	cmp	r6, #1
 8000554:	d13d      	bne.n	80005d2 <__aeabi_dmul+0x122>
 8000556:	2300      	movs	r3, #0
 8000558:	2400      	movs	r4, #0
 800055a:	2200      	movs	r2, #0
 800055c:	0010      	movs	r0, r2
 800055e:	465a      	mov	r2, fp
 8000560:	051b      	lsls	r3, r3, #20
 8000562:	4323      	orrs	r3, r4
 8000564:	07d2      	lsls	r2, r2, #31
 8000566:	4313      	orrs	r3, r2
 8000568:	0019      	movs	r1, r3
 800056a:	b007      	add	sp, #28
 800056c:	bcf0      	pop	{r4, r5, r6, r7}
 800056e:	46bb      	mov	fp, r7
 8000570:	46b2      	mov	sl, r6
 8000572:	46a9      	mov	r9, r5
 8000574:	46a0      	mov	r8, r4
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000578:	4b92      	ldr	r3, [pc, #584]	@ (80007c4 <__aeabi_dmul+0x314>)
 800057a:	4326      	orrs	r6, r4
 800057c:	18eb      	adds	r3, r5, r3
 800057e:	2e00      	cmp	r6, #0
 8000580:	d100      	bne.n	8000584 <__aeabi_dmul+0xd4>
 8000582:	e0bb      	b.n	80006fc <__aeabi_dmul+0x24c>
 8000584:	2203      	movs	r2, #3
 8000586:	4641      	mov	r1, r8
 8000588:	4311      	orrs	r1, r2
 800058a:	465a      	mov	r2, fp
 800058c:	4688      	mov	r8, r1
 800058e:	9900      	ldr	r1, [sp, #0]
 8000590:	404a      	eors	r2, r1
 8000592:	2180      	movs	r1, #128	@ 0x80
 8000594:	0109      	lsls	r1, r1, #4
 8000596:	468c      	mov	ip, r1
 8000598:	0029      	movs	r1, r5
 800059a:	4461      	add	r1, ip
 800059c:	9101      	str	r1, [sp, #4]
 800059e:	4641      	mov	r1, r8
 80005a0:	290a      	cmp	r1, #10
 80005a2:	dd00      	ble.n	80005a6 <__aeabi_dmul+0xf6>
 80005a4:	e233      	b.n	8000a0e <__aeabi_dmul+0x55e>
 80005a6:	4693      	mov	fp, r2
 80005a8:	2603      	movs	r6, #3
 80005aa:	4642      	mov	r2, r8
 80005ac:	2701      	movs	r7, #1
 80005ae:	4097      	lsls	r7, r2
 80005b0:	21a6      	movs	r1, #166	@ 0xa6
 80005b2:	003a      	movs	r2, r7
 80005b4:	00c9      	lsls	r1, r1, #3
 80005b6:	400a      	ands	r2, r1
 80005b8:	420f      	tst	r7, r1
 80005ba:	d031      	beq.n	8000620 <__aeabi_dmul+0x170>
 80005bc:	9e02      	ldr	r6, [sp, #8]
 80005be:	2e02      	cmp	r6, #2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dmul+0x114>
 80005c2:	e235      	b.n	8000a30 <__aeabi_dmul+0x580>
 80005c4:	2e03      	cmp	r6, #3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dmul+0x11a>
 80005c8:	e1d2      	b.n	8000970 <__aeabi_dmul+0x4c0>
 80005ca:	4654      	mov	r4, sl
 80005cc:	4648      	mov	r0, r9
 80005ce:	2e01      	cmp	r6, #1
 80005d0:	d0c1      	beq.n	8000556 <__aeabi_dmul+0xa6>
 80005d2:	9a01      	ldr	r2, [sp, #4]
 80005d4:	4b7d      	ldr	r3, [pc, #500]	@ (80007cc <__aeabi_dmul+0x31c>)
 80005d6:	4694      	mov	ip, r2
 80005d8:	4463      	add	r3, ip
 80005da:	2b00      	cmp	r3, #0
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_dmul+0x130>
 80005de:	e0c0      	b.n	8000762 <__aeabi_dmul+0x2b2>
 80005e0:	0742      	lsls	r2, r0, #29
 80005e2:	d009      	beq.n	80005f8 <__aeabi_dmul+0x148>
 80005e4:	220f      	movs	r2, #15
 80005e6:	4002      	ands	r2, r0
 80005e8:	2a04      	cmp	r2, #4
 80005ea:	d005      	beq.n	80005f8 <__aeabi_dmul+0x148>
 80005ec:	1d02      	adds	r2, r0, #4
 80005ee:	4282      	cmp	r2, r0
 80005f0:	4180      	sbcs	r0, r0
 80005f2:	4240      	negs	r0, r0
 80005f4:	1824      	adds	r4, r4, r0
 80005f6:	0010      	movs	r0, r2
 80005f8:	01e2      	lsls	r2, r4, #7
 80005fa:	d506      	bpl.n	800060a <__aeabi_dmul+0x15a>
 80005fc:	4b74      	ldr	r3, [pc, #464]	@ (80007d0 <__aeabi_dmul+0x320>)
 80005fe:	9a01      	ldr	r2, [sp, #4]
 8000600:	401c      	ands	r4, r3
 8000602:	2380      	movs	r3, #128	@ 0x80
 8000604:	4694      	mov	ip, r2
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	4463      	add	r3, ip
 800060a:	4a72      	ldr	r2, [pc, #456]	@ (80007d4 <__aeabi_dmul+0x324>)
 800060c:	4293      	cmp	r3, r2
 800060e:	dc6b      	bgt.n	80006e8 <__aeabi_dmul+0x238>
 8000610:	0762      	lsls	r2, r4, #29
 8000612:	08c0      	lsrs	r0, r0, #3
 8000614:	0264      	lsls	r4, r4, #9
 8000616:	055b      	lsls	r3, r3, #21
 8000618:	4302      	orrs	r2, r0
 800061a:	0b24      	lsrs	r4, r4, #12
 800061c:	0d5b      	lsrs	r3, r3, #21
 800061e:	e79d      	b.n	800055c <__aeabi_dmul+0xac>
 8000620:	2190      	movs	r1, #144	@ 0x90
 8000622:	0089      	lsls	r1, r1, #2
 8000624:	420f      	tst	r7, r1
 8000626:	d163      	bne.n	80006f0 <__aeabi_dmul+0x240>
 8000628:	2288      	movs	r2, #136	@ 0x88
 800062a:	423a      	tst	r2, r7
 800062c:	d100      	bne.n	8000630 <__aeabi_dmul+0x180>
 800062e:	e0d7      	b.n	80007e0 <__aeabi_dmul+0x330>
 8000630:	9b00      	ldr	r3, [sp, #0]
 8000632:	46a2      	mov	sl, r4
 8000634:	469b      	mov	fp, r3
 8000636:	4681      	mov	r9, r0
 8000638:	9602      	str	r6, [sp, #8]
 800063a:	e7bf      	b.n	80005bc <__aeabi_dmul+0x10c>
 800063c:	0023      	movs	r3, r4
 800063e:	4333      	orrs	r3, r6
 8000640:	d100      	bne.n	8000644 <__aeabi_dmul+0x194>
 8000642:	e07f      	b.n	8000744 <__aeabi_dmul+0x294>
 8000644:	2c00      	cmp	r4, #0
 8000646:	d100      	bne.n	800064a <__aeabi_dmul+0x19a>
 8000648:	e1ad      	b.n	80009a6 <__aeabi_dmul+0x4f6>
 800064a:	0020      	movs	r0, r4
 800064c:	f000 fa62 	bl	8000b14 <__clzsi2>
 8000650:	0002      	movs	r2, r0
 8000652:	0003      	movs	r3, r0
 8000654:	3a0b      	subs	r2, #11
 8000656:	201d      	movs	r0, #29
 8000658:	0019      	movs	r1, r3
 800065a:	1a82      	subs	r2, r0, r2
 800065c:	0030      	movs	r0, r6
 800065e:	3908      	subs	r1, #8
 8000660:	40d0      	lsrs	r0, r2
 8000662:	408c      	lsls	r4, r1
 8000664:	4304      	orrs	r4, r0
 8000666:	0030      	movs	r0, r6
 8000668:	4088      	lsls	r0, r1
 800066a:	4a5b      	ldr	r2, [pc, #364]	@ (80007d8 <__aeabi_dmul+0x328>)
 800066c:	1aeb      	subs	r3, r5, r3
 800066e:	4694      	mov	ip, r2
 8000670:	4463      	add	r3, ip
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	4642      	mov	r2, r8
 8000678:	2600      	movs	r6, #0
 800067a:	2a0a      	cmp	r2, #10
 800067c:	dc00      	bgt.n	8000680 <__aeabi_dmul+0x1d0>
 800067e:	e75a      	b.n	8000536 <__aeabi_dmul+0x86>
 8000680:	e79c      	b.n	80005bc <__aeabi_dmul+0x10c>
 8000682:	4653      	mov	r3, sl
 8000684:	4303      	orrs	r3, r0
 8000686:	4699      	mov	r9, r3
 8000688:	d054      	beq.n	8000734 <__aeabi_dmul+0x284>
 800068a:	4653      	mov	r3, sl
 800068c:	2b00      	cmp	r3, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_dmul+0x1e2>
 8000690:	e177      	b.n	8000982 <__aeabi_dmul+0x4d2>
 8000692:	4650      	mov	r0, sl
 8000694:	f000 fa3e 	bl	8000b14 <__clzsi2>
 8000698:	230b      	movs	r3, #11
 800069a:	425b      	negs	r3, r3
 800069c:	469c      	mov	ip, r3
 800069e:	0002      	movs	r2, r0
 80006a0:	4484      	add	ip, r0
 80006a2:	0011      	movs	r1, r2
 80006a4:	4650      	mov	r0, sl
 80006a6:	3908      	subs	r1, #8
 80006a8:	4088      	lsls	r0, r1
 80006aa:	231d      	movs	r3, #29
 80006ac:	4680      	mov	r8, r0
 80006ae:	4660      	mov	r0, ip
 80006b0:	1a1b      	subs	r3, r3, r0
 80006b2:	0020      	movs	r0, r4
 80006b4:	40d8      	lsrs	r0, r3
 80006b6:	0003      	movs	r3, r0
 80006b8:	4640      	mov	r0, r8
 80006ba:	4303      	orrs	r3, r0
 80006bc:	469a      	mov	sl, r3
 80006be:	0023      	movs	r3, r4
 80006c0:	408b      	lsls	r3, r1
 80006c2:	4699      	mov	r9, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	4d44      	ldr	r5, [pc, #272]	@ (80007d8 <__aeabi_dmul+0x328>)
 80006c8:	4698      	mov	r8, r3
 80006ca:	1aad      	subs	r5, r5, r2
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	e715      	b.n	80004fc <__aeabi_dmul+0x4c>
 80006d0:	4652      	mov	r2, sl
 80006d2:	4302      	orrs	r2, r0
 80006d4:	4691      	mov	r9, r2
 80006d6:	d126      	bne.n	8000726 <__aeabi_dmul+0x276>
 80006d8:	2200      	movs	r2, #0
 80006da:	001d      	movs	r5, r3
 80006dc:	2302      	movs	r3, #2
 80006de:	4692      	mov	sl, r2
 80006e0:	3208      	adds	r2, #8
 80006e2:	4690      	mov	r8, r2
 80006e4:	9302      	str	r3, [sp, #8]
 80006e6:	e709      	b.n	80004fc <__aeabi_dmul+0x4c>
 80006e8:	2400      	movs	r4, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	4b35      	ldr	r3, [pc, #212]	@ (80007c4 <__aeabi_dmul+0x314>)
 80006ee:	e735      	b.n	800055c <__aeabi_dmul+0xac>
 80006f0:	2300      	movs	r3, #0
 80006f2:	2480      	movs	r4, #128	@ 0x80
 80006f4:	469b      	mov	fp, r3
 80006f6:	0324      	lsls	r4, r4, #12
 80006f8:	4b32      	ldr	r3, [pc, #200]	@ (80007c4 <__aeabi_dmul+0x314>)
 80006fa:	e72f      	b.n	800055c <__aeabi_dmul+0xac>
 80006fc:	2202      	movs	r2, #2
 80006fe:	4641      	mov	r1, r8
 8000700:	4311      	orrs	r1, r2
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	4694      	mov	ip, r2
 8000708:	002a      	movs	r2, r5
 800070a:	4462      	add	r2, ip
 800070c:	4688      	mov	r8, r1
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	290a      	cmp	r1, #10
 8000712:	dd00      	ble.n	8000716 <__aeabi_dmul+0x266>
 8000714:	e752      	b.n	80005bc <__aeabi_dmul+0x10c>
 8000716:	465a      	mov	r2, fp
 8000718:	2000      	movs	r0, #0
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	0004      	movs	r4, r0
 800071e:	404a      	eors	r2, r1
 8000720:	4693      	mov	fp, r2
 8000722:	2602      	movs	r6, #2
 8000724:	e70b      	b.n	800053e <__aeabi_dmul+0x8e>
 8000726:	220c      	movs	r2, #12
 8000728:	001d      	movs	r5, r3
 800072a:	2303      	movs	r3, #3
 800072c:	4681      	mov	r9, r0
 800072e:	4690      	mov	r8, r2
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	e6e3      	b.n	80004fc <__aeabi_dmul+0x4c>
 8000734:	2300      	movs	r3, #0
 8000736:	469a      	mov	sl, r3
 8000738:	3304      	adds	r3, #4
 800073a:	4698      	mov	r8, r3
 800073c:	3b03      	subs	r3, #3
 800073e:	2500      	movs	r5, #0
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	e6db      	b.n	80004fc <__aeabi_dmul+0x4c>
 8000744:	4642      	mov	r2, r8
 8000746:	3301      	adds	r3, #1
 8000748:	431a      	orrs	r2, r3
 800074a:	002b      	movs	r3, r5
 800074c:	4690      	mov	r8, r2
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	9201      	str	r2, [sp, #4]
 8000752:	4642      	mov	r2, r8
 8000754:	2400      	movs	r4, #0
 8000756:	2000      	movs	r0, #0
 8000758:	2601      	movs	r6, #1
 800075a:	2a0a      	cmp	r2, #10
 800075c:	dc00      	bgt.n	8000760 <__aeabi_dmul+0x2b0>
 800075e:	e6ea      	b.n	8000536 <__aeabi_dmul+0x86>
 8000760:	e72c      	b.n	80005bc <__aeabi_dmul+0x10c>
 8000762:	2201      	movs	r2, #1
 8000764:	1ad2      	subs	r2, r2, r3
 8000766:	2a38      	cmp	r2, #56	@ 0x38
 8000768:	dd00      	ble.n	800076c <__aeabi_dmul+0x2bc>
 800076a:	e6f4      	b.n	8000556 <__aeabi_dmul+0xa6>
 800076c:	2a1f      	cmp	r2, #31
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dmul+0x2c2>
 8000770:	e12a      	b.n	80009c8 <__aeabi_dmul+0x518>
 8000772:	211f      	movs	r1, #31
 8000774:	4249      	negs	r1, r1
 8000776:	1acb      	subs	r3, r1, r3
 8000778:	0021      	movs	r1, r4
 800077a:	40d9      	lsrs	r1, r3
 800077c:	000b      	movs	r3, r1
 800077e:	2a20      	cmp	r2, #32
 8000780:	d005      	beq.n	800078e <__aeabi_dmul+0x2de>
 8000782:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <__aeabi_dmul+0x32c>)
 8000784:	9d01      	ldr	r5, [sp, #4]
 8000786:	4694      	mov	ip, r2
 8000788:	4465      	add	r5, ip
 800078a:	40ac      	lsls	r4, r5
 800078c:	4320      	orrs	r0, r4
 800078e:	1e42      	subs	r2, r0, #1
 8000790:	4190      	sbcs	r0, r2
 8000792:	4318      	orrs	r0, r3
 8000794:	2307      	movs	r3, #7
 8000796:	0019      	movs	r1, r3
 8000798:	2400      	movs	r4, #0
 800079a:	4001      	ands	r1, r0
 800079c:	4203      	tst	r3, r0
 800079e:	d00c      	beq.n	80007ba <__aeabi_dmul+0x30a>
 80007a0:	230f      	movs	r3, #15
 80007a2:	4003      	ands	r3, r0
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d100      	bne.n	80007aa <__aeabi_dmul+0x2fa>
 80007a8:	e140      	b.n	8000a2c <__aeabi_dmul+0x57c>
 80007aa:	1d03      	adds	r3, r0, #4
 80007ac:	4283      	cmp	r3, r0
 80007ae:	41a4      	sbcs	r4, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	4264      	negs	r4, r4
 80007b4:	0761      	lsls	r1, r4, #29
 80007b6:	0264      	lsls	r4, r4, #9
 80007b8:	0b24      	lsrs	r4, r4, #12
 80007ba:	08c2      	lsrs	r2, r0, #3
 80007bc:	2300      	movs	r3, #0
 80007be:	430a      	orrs	r2, r1
 80007c0:	e6cc      	b.n	800055c <__aeabi_dmul+0xac>
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	000007ff 	.word	0x000007ff
 80007c8:	fffffc01 	.word	0xfffffc01
 80007cc:	000003ff 	.word	0x000003ff
 80007d0:	feffffff 	.word	0xfeffffff
 80007d4:	000007fe 	.word	0x000007fe
 80007d8:	fffffc0d 	.word	0xfffffc0d
 80007dc:	0000043e 	.word	0x0000043e
 80007e0:	4649      	mov	r1, r9
 80007e2:	464a      	mov	r2, r9
 80007e4:	0409      	lsls	r1, r1, #16
 80007e6:	0c09      	lsrs	r1, r1, #16
 80007e8:	000d      	movs	r5, r1
 80007ea:	0c16      	lsrs	r6, r2, #16
 80007ec:	0c02      	lsrs	r2, r0, #16
 80007ee:	0400      	lsls	r0, r0, #16
 80007f0:	0c00      	lsrs	r0, r0, #16
 80007f2:	4345      	muls	r5, r0
 80007f4:	46ac      	mov	ip, r5
 80007f6:	0005      	movs	r5, r0
 80007f8:	4375      	muls	r5, r6
 80007fa:	46a8      	mov	r8, r5
 80007fc:	0015      	movs	r5, r2
 80007fe:	000f      	movs	r7, r1
 8000800:	4375      	muls	r5, r6
 8000802:	9200      	str	r2, [sp, #0]
 8000804:	9502      	str	r5, [sp, #8]
 8000806:	002a      	movs	r2, r5
 8000808:	9d00      	ldr	r5, [sp, #0]
 800080a:	436f      	muls	r7, r5
 800080c:	4665      	mov	r5, ip
 800080e:	0c2d      	lsrs	r5, r5, #16
 8000810:	46a9      	mov	r9, r5
 8000812:	4447      	add	r7, r8
 8000814:	444f      	add	r7, r9
 8000816:	45b8      	cmp	r8, r7
 8000818:	d905      	bls.n	8000826 <__aeabi_dmul+0x376>
 800081a:	0015      	movs	r5, r2
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	0252      	lsls	r2, r2, #9
 8000820:	4690      	mov	r8, r2
 8000822:	4445      	add	r5, r8
 8000824:	9502      	str	r5, [sp, #8]
 8000826:	0c3d      	lsrs	r5, r7, #16
 8000828:	9503      	str	r5, [sp, #12]
 800082a:	4665      	mov	r5, ip
 800082c:	042d      	lsls	r5, r5, #16
 800082e:	043f      	lsls	r7, r7, #16
 8000830:	0c2d      	lsrs	r5, r5, #16
 8000832:	46ac      	mov	ip, r5
 8000834:	003d      	movs	r5, r7
 8000836:	4465      	add	r5, ip
 8000838:	9504      	str	r5, [sp, #16]
 800083a:	0c25      	lsrs	r5, r4, #16
 800083c:	0424      	lsls	r4, r4, #16
 800083e:	0c24      	lsrs	r4, r4, #16
 8000840:	46ac      	mov	ip, r5
 8000842:	0025      	movs	r5, r4
 8000844:	4375      	muls	r5, r6
 8000846:	46a8      	mov	r8, r5
 8000848:	4665      	mov	r5, ip
 800084a:	000f      	movs	r7, r1
 800084c:	4369      	muls	r1, r5
 800084e:	4441      	add	r1, r8
 8000850:	4689      	mov	r9, r1
 8000852:	4367      	muls	r7, r4
 8000854:	0c39      	lsrs	r1, r7, #16
 8000856:	4449      	add	r1, r9
 8000858:	436e      	muls	r6, r5
 800085a:	4588      	cmp	r8, r1
 800085c:	d903      	bls.n	8000866 <__aeabi_dmul+0x3b6>
 800085e:	2280      	movs	r2, #128	@ 0x80
 8000860:	0252      	lsls	r2, r2, #9
 8000862:	4690      	mov	r8, r2
 8000864:	4446      	add	r6, r8
 8000866:	0c0d      	lsrs	r5, r1, #16
 8000868:	46a8      	mov	r8, r5
 800086a:	0035      	movs	r5, r6
 800086c:	4445      	add	r5, r8
 800086e:	9505      	str	r5, [sp, #20]
 8000870:	9d03      	ldr	r5, [sp, #12]
 8000872:	043f      	lsls	r7, r7, #16
 8000874:	46a8      	mov	r8, r5
 8000876:	0c3f      	lsrs	r7, r7, #16
 8000878:	0409      	lsls	r1, r1, #16
 800087a:	19c9      	adds	r1, r1, r7
 800087c:	4488      	add	r8, r1
 800087e:	4645      	mov	r5, r8
 8000880:	9503      	str	r5, [sp, #12]
 8000882:	4655      	mov	r5, sl
 8000884:	042e      	lsls	r6, r5, #16
 8000886:	0c36      	lsrs	r6, r6, #16
 8000888:	0c2f      	lsrs	r7, r5, #16
 800088a:	0035      	movs	r5, r6
 800088c:	4345      	muls	r5, r0
 800088e:	4378      	muls	r0, r7
 8000890:	4681      	mov	r9, r0
 8000892:	0038      	movs	r0, r7
 8000894:	46a8      	mov	r8, r5
 8000896:	0c2d      	lsrs	r5, r5, #16
 8000898:	46aa      	mov	sl, r5
 800089a:	9a00      	ldr	r2, [sp, #0]
 800089c:	4350      	muls	r0, r2
 800089e:	4372      	muls	r2, r6
 80008a0:	444a      	add	r2, r9
 80008a2:	4452      	add	r2, sl
 80008a4:	4591      	cmp	r9, r2
 80008a6:	d903      	bls.n	80008b0 <__aeabi_dmul+0x400>
 80008a8:	2580      	movs	r5, #128	@ 0x80
 80008aa:	026d      	lsls	r5, r5, #9
 80008ac:	46a9      	mov	r9, r5
 80008ae:	4448      	add	r0, r9
 80008b0:	0c15      	lsrs	r5, r2, #16
 80008b2:	46a9      	mov	r9, r5
 80008b4:	4645      	mov	r5, r8
 80008b6:	042d      	lsls	r5, r5, #16
 80008b8:	0c2d      	lsrs	r5, r5, #16
 80008ba:	46a8      	mov	r8, r5
 80008bc:	4665      	mov	r5, ip
 80008be:	437d      	muls	r5, r7
 80008c0:	0412      	lsls	r2, r2, #16
 80008c2:	4448      	add	r0, r9
 80008c4:	4490      	add	r8, r2
 80008c6:	46a9      	mov	r9, r5
 80008c8:	0032      	movs	r2, r6
 80008ca:	4665      	mov	r5, ip
 80008cc:	4362      	muls	r2, r4
 80008ce:	436e      	muls	r6, r5
 80008d0:	437c      	muls	r4, r7
 80008d2:	0c17      	lsrs	r7, r2, #16
 80008d4:	1936      	adds	r6, r6, r4
 80008d6:	19bf      	adds	r7, r7, r6
 80008d8:	42bc      	cmp	r4, r7
 80008da:	d903      	bls.n	80008e4 <__aeabi_dmul+0x434>
 80008dc:	2480      	movs	r4, #128	@ 0x80
 80008de:	0264      	lsls	r4, r4, #9
 80008e0:	46a4      	mov	ip, r4
 80008e2:	44e1      	add	r9, ip
 80008e4:	9c02      	ldr	r4, [sp, #8]
 80008e6:	9e03      	ldr	r6, [sp, #12]
 80008e8:	46a4      	mov	ip, r4
 80008ea:	9d05      	ldr	r5, [sp, #20]
 80008ec:	4466      	add	r6, ip
 80008ee:	428e      	cmp	r6, r1
 80008f0:	4189      	sbcs	r1, r1
 80008f2:	46ac      	mov	ip, r5
 80008f4:	0412      	lsls	r2, r2, #16
 80008f6:	043c      	lsls	r4, r7, #16
 80008f8:	0c12      	lsrs	r2, r2, #16
 80008fa:	18a2      	adds	r2, r4, r2
 80008fc:	4462      	add	r2, ip
 80008fe:	4249      	negs	r1, r1
 8000900:	1854      	adds	r4, r2, r1
 8000902:	4446      	add	r6, r8
 8000904:	46a4      	mov	ip, r4
 8000906:	4546      	cmp	r6, r8
 8000908:	41a4      	sbcs	r4, r4
 800090a:	4682      	mov	sl, r0
 800090c:	4264      	negs	r4, r4
 800090e:	46a0      	mov	r8, r4
 8000910:	42aa      	cmp	r2, r5
 8000912:	4192      	sbcs	r2, r2
 8000914:	458c      	cmp	ip, r1
 8000916:	4189      	sbcs	r1, r1
 8000918:	44e2      	add	sl, ip
 800091a:	44d0      	add	r8, sl
 800091c:	4249      	negs	r1, r1
 800091e:	4252      	negs	r2, r2
 8000920:	430a      	orrs	r2, r1
 8000922:	45a0      	cmp	r8, r4
 8000924:	41a4      	sbcs	r4, r4
 8000926:	4582      	cmp	sl, r0
 8000928:	4189      	sbcs	r1, r1
 800092a:	4264      	negs	r4, r4
 800092c:	4249      	negs	r1, r1
 800092e:	430c      	orrs	r4, r1
 8000930:	4641      	mov	r1, r8
 8000932:	0c3f      	lsrs	r7, r7, #16
 8000934:	19d2      	adds	r2, r2, r7
 8000936:	1912      	adds	r2, r2, r4
 8000938:	0dcc      	lsrs	r4, r1, #23
 800093a:	9904      	ldr	r1, [sp, #16]
 800093c:	0270      	lsls	r0, r6, #9
 800093e:	4308      	orrs	r0, r1
 8000940:	1e41      	subs	r1, r0, #1
 8000942:	4188      	sbcs	r0, r1
 8000944:	4641      	mov	r1, r8
 8000946:	444a      	add	r2, r9
 8000948:	0df6      	lsrs	r6, r6, #23
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	4330      	orrs	r0, r6
 800094e:	0249      	lsls	r1, r1, #9
 8000950:	4314      	orrs	r4, r2
 8000952:	4308      	orrs	r0, r1
 8000954:	01d2      	lsls	r2, r2, #7
 8000956:	d535      	bpl.n	80009c4 <__aeabi_dmul+0x514>
 8000958:	2201      	movs	r2, #1
 800095a:	0843      	lsrs	r3, r0, #1
 800095c:	4002      	ands	r2, r0
 800095e:	4313      	orrs	r3, r2
 8000960:	07e0      	lsls	r0, r4, #31
 8000962:	4318      	orrs	r0, r3
 8000964:	0864      	lsrs	r4, r4, #1
 8000966:	e634      	b.n	80005d2 <__aeabi_dmul+0x122>
 8000968:	9b00      	ldr	r3, [sp, #0]
 800096a:	46a2      	mov	sl, r4
 800096c:	469b      	mov	fp, r3
 800096e:	4681      	mov	r9, r0
 8000970:	2480      	movs	r4, #128	@ 0x80
 8000972:	4653      	mov	r3, sl
 8000974:	0324      	lsls	r4, r4, #12
 8000976:	431c      	orrs	r4, r3
 8000978:	0324      	lsls	r4, r4, #12
 800097a:	464a      	mov	r2, r9
 800097c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a38 <__aeabi_dmul+0x588>)
 800097e:	0b24      	lsrs	r4, r4, #12
 8000980:	e5ec      	b.n	800055c <__aeabi_dmul+0xac>
 8000982:	f000 f8c7 	bl	8000b14 <__clzsi2>
 8000986:	2315      	movs	r3, #21
 8000988:	469c      	mov	ip, r3
 800098a:	4484      	add	ip, r0
 800098c:	0002      	movs	r2, r0
 800098e:	4663      	mov	r3, ip
 8000990:	3220      	adds	r2, #32
 8000992:	2b1c      	cmp	r3, #28
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dmul+0x4e8>
 8000996:	e684      	b.n	80006a2 <__aeabi_dmul+0x1f2>
 8000998:	2300      	movs	r3, #0
 800099a:	4699      	mov	r9, r3
 800099c:	0023      	movs	r3, r4
 800099e:	3808      	subs	r0, #8
 80009a0:	4083      	lsls	r3, r0
 80009a2:	469a      	mov	sl, r3
 80009a4:	e68e      	b.n	80006c4 <__aeabi_dmul+0x214>
 80009a6:	f000 f8b5 	bl	8000b14 <__clzsi2>
 80009aa:	0002      	movs	r2, r0
 80009ac:	0003      	movs	r3, r0
 80009ae:	3215      	adds	r2, #21
 80009b0:	3320      	adds	r3, #32
 80009b2:	2a1c      	cmp	r2, #28
 80009b4:	dc00      	bgt.n	80009b8 <__aeabi_dmul+0x508>
 80009b6:	e64e      	b.n	8000656 <__aeabi_dmul+0x1a6>
 80009b8:	0002      	movs	r2, r0
 80009ba:	0034      	movs	r4, r6
 80009bc:	3a08      	subs	r2, #8
 80009be:	2000      	movs	r0, #0
 80009c0:	4094      	lsls	r4, r2
 80009c2:	e652      	b.n	800066a <__aeabi_dmul+0x1ba>
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	e604      	b.n	80005d2 <__aeabi_dmul+0x122>
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <__aeabi_dmul+0x58c>)
 80009ca:	0021      	movs	r1, r4
 80009cc:	469c      	mov	ip, r3
 80009ce:	0003      	movs	r3, r0
 80009d0:	9d01      	ldr	r5, [sp, #4]
 80009d2:	40d3      	lsrs	r3, r2
 80009d4:	4465      	add	r5, ip
 80009d6:	40a9      	lsls	r1, r5
 80009d8:	4319      	orrs	r1, r3
 80009da:	0003      	movs	r3, r0
 80009dc:	40ab      	lsls	r3, r5
 80009de:	1e58      	subs	r0, r3, #1
 80009e0:	4183      	sbcs	r3, r0
 80009e2:	4319      	orrs	r1, r3
 80009e4:	0008      	movs	r0, r1
 80009e6:	40d4      	lsrs	r4, r2
 80009e8:	074b      	lsls	r3, r1, #29
 80009ea:	d009      	beq.n	8000a00 <__aeabi_dmul+0x550>
 80009ec:	230f      	movs	r3, #15
 80009ee:	400b      	ands	r3, r1
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d005      	beq.n	8000a00 <__aeabi_dmul+0x550>
 80009f4:	1d0b      	adds	r3, r1, #4
 80009f6:	428b      	cmp	r3, r1
 80009f8:	4180      	sbcs	r0, r0
 80009fa:	4240      	negs	r0, r0
 80009fc:	1824      	adds	r4, r4, r0
 80009fe:	0018      	movs	r0, r3
 8000a00:	0223      	lsls	r3, r4, #8
 8000a02:	d400      	bmi.n	8000a06 <__aeabi_dmul+0x556>
 8000a04:	e6d6      	b.n	80007b4 <__aeabi_dmul+0x304>
 8000a06:	2301      	movs	r3, #1
 8000a08:	2400      	movs	r4, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	e5a6      	b.n	800055c <__aeabi_dmul+0xac>
 8000a0e:	290f      	cmp	r1, #15
 8000a10:	d1aa      	bne.n	8000968 <__aeabi_dmul+0x4b8>
 8000a12:	2380      	movs	r3, #128	@ 0x80
 8000a14:	4652      	mov	r2, sl
 8000a16:	031b      	lsls	r3, r3, #12
 8000a18:	421a      	tst	r2, r3
 8000a1a:	d0a9      	beq.n	8000970 <__aeabi_dmul+0x4c0>
 8000a1c:	421c      	tst	r4, r3
 8000a1e:	d1a7      	bne.n	8000970 <__aeabi_dmul+0x4c0>
 8000a20:	431c      	orrs	r4, r3
 8000a22:	9b00      	ldr	r3, [sp, #0]
 8000a24:	0002      	movs	r2, r0
 8000a26:	469b      	mov	fp, r3
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <__aeabi_dmul+0x588>)
 8000a2a:	e597      	b.n	800055c <__aeabi_dmul+0xac>
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	e6c1      	b.n	80007b4 <__aeabi_dmul+0x304>
 8000a30:	2400      	movs	r4, #0
 8000a32:	4b01      	ldr	r3, [pc, #4]	@ (8000a38 <__aeabi_dmul+0x588>)
 8000a34:	0022      	movs	r2, r4
 8000a36:	e591      	b.n	800055c <__aeabi_dmul+0xac>
 8000a38:	000007ff 	.word	0x000007ff
 8000a3c:	0000041e 	.word	0x0000041e

08000a40 <__aeabi_d2iz>:
 8000a40:	000b      	movs	r3, r1
 8000a42:	0002      	movs	r2, r0
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	4d16      	ldr	r5, [pc, #88]	@ (8000aa0 <__aeabi_d2iz+0x60>)
 8000a48:	030c      	lsls	r4, r1, #12
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	0049      	lsls	r1, r1, #1
 8000a4e:	2000      	movs	r0, #0
 8000a50:	9200      	str	r2, [sp, #0]
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	0b24      	lsrs	r4, r4, #12
 8000a56:	0d49      	lsrs	r1, r1, #21
 8000a58:	0fde      	lsrs	r6, r3, #31
 8000a5a:	42a9      	cmp	r1, r5
 8000a5c:	dd04      	ble.n	8000a68 <__aeabi_d2iz+0x28>
 8000a5e:	4811      	ldr	r0, [pc, #68]	@ (8000aa4 <__aeabi_d2iz+0x64>)
 8000a60:	4281      	cmp	r1, r0
 8000a62:	dd03      	ble.n	8000a6c <__aeabi_d2iz+0x2c>
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <__aeabi_d2iz+0x68>)
 8000a66:	18f0      	adds	r0, r6, r3
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	2080      	movs	r0, #128	@ 0x80
 8000a6e:	0340      	lsls	r0, r0, #13
 8000a70:	4320      	orrs	r0, r4
 8000a72:	4c0e      	ldr	r4, [pc, #56]	@ (8000aac <__aeabi_d2iz+0x6c>)
 8000a74:	1a64      	subs	r4, r4, r1
 8000a76:	2c1f      	cmp	r4, #31
 8000a78:	dd08      	ble.n	8000a8c <__aeabi_d2iz+0x4c>
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <__aeabi_d2iz+0x70>)
 8000a7c:	1a5b      	subs	r3, r3, r1
 8000a7e:	40d8      	lsrs	r0, r3
 8000a80:	0003      	movs	r3, r0
 8000a82:	4258      	negs	r0, r3
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d1ef      	bne.n	8000a68 <__aeabi_d2iz+0x28>
 8000a88:	0018      	movs	r0, r3
 8000a8a:	e7ed      	b.n	8000a68 <__aeabi_d2iz+0x28>
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <__aeabi_d2iz+0x74>)
 8000a8e:	9a00      	ldr	r2, [sp, #0]
 8000a90:	469c      	mov	ip, r3
 8000a92:	0003      	movs	r3, r0
 8000a94:	4461      	add	r1, ip
 8000a96:	408b      	lsls	r3, r1
 8000a98:	40e2      	lsrs	r2, r4
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	e7f1      	b.n	8000a82 <__aeabi_d2iz+0x42>
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	000003fe 	.word	0x000003fe
 8000aa4:	0000041d 	.word	0x0000041d
 8000aa8:	7fffffff 	.word	0x7fffffff
 8000aac:	00000433 	.word	0x00000433
 8000ab0:	00000413 	.word	0x00000413
 8000ab4:	fffffbed 	.word	0xfffffbed

08000ab8 <__aeabi_i2d>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d016      	beq.n	8000aec <__aeabi_i2d+0x34>
 8000abe:	17c3      	asrs	r3, r0, #31
 8000ac0:	18c5      	adds	r5, r0, r3
 8000ac2:	405d      	eors	r5, r3
 8000ac4:	0fc4      	lsrs	r4, r0, #31
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	f000 f824 	bl	8000b14 <__clzsi2>
 8000acc:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <__aeabi_i2d+0x58>)
 8000ace:	1a1b      	subs	r3, r3, r0
 8000ad0:	055b      	lsls	r3, r3, #21
 8000ad2:	0d5b      	lsrs	r3, r3, #21
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	dc14      	bgt.n	8000b02 <__aeabi_i2d+0x4a>
 8000ad8:	0002      	movs	r2, r0
 8000ada:	002e      	movs	r6, r5
 8000adc:	3215      	adds	r2, #21
 8000ade:	4096      	lsls	r6, r2
 8000ae0:	220b      	movs	r2, #11
 8000ae2:	1a12      	subs	r2, r2, r0
 8000ae4:	40d5      	lsrs	r5, r2
 8000ae6:	032d      	lsls	r5, r5, #12
 8000ae8:	0b2d      	lsrs	r5, r5, #12
 8000aea:	e003      	b.n	8000af4 <__aeabi_i2d+0x3c>
 8000aec:	2400      	movs	r4, #0
 8000aee:	2300      	movs	r3, #0
 8000af0:	2500      	movs	r5, #0
 8000af2:	2600      	movs	r6, #0
 8000af4:	051b      	lsls	r3, r3, #20
 8000af6:	432b      	orrs	r3, r5
 8000af8:	07e4      	lsls	r4, r4, #31
 8000afa:	4323      	orrs	r3, r4
 8000afc:	0030      	movs	r0, r6
 8000afe:	0019      	movs	r1, r3
 8000b00:	bd70      	pop	{r4, r5, r6, pc}
 8000b02:	380b      	subs	r0, #11
 8000b04:	4085      	lsls	r5, r0
 8000b06:	032d      	lsls	r5, r5, #12
 8000b08:	2600      	movs	r6, #0
 8000b0a:	0b2d      	lsrs	r5, r5, #12
 8000b0c:	e7f2      	b.n	8000af4 <__aeabi_i2d+0x3c>
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	0000041e 	.word	0x0000041e

08000b14 <__clzsi2>:
 8000b14:	211c      	movs	r1, #28
 8000b16:	2301      	movs	r3, #1
 8000b18:	041b      	lsls	r3, r3, #16
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d301      	bcc.n	8000b22 <__clzsi2+0xe>
 8000b1e:	0c00      	lsrs	r0, r0, #16
 8000b20:	3910      	subs	r1, #16
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	4298      	cmp	r0, r3
 8000b26:	d301      	bcc.n	8000b2c <__clzsi2+0x18>
 8000b28:	0a00      	lsrs	r0, r0, #8
 8000b2a:	3908      	subs	r1, #8
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	4298      	cmp	r0, r3
 8000b30:	d301      	bcc.n	8000b36 <__clzsi2+0x22>
 8000b32:	0900      	lsrs	r0, r0, #4
 8000b34:	3904      	subs	r1, #4
 8000b36:	a202      	add	r2, pc, #8	@ (adr r2, 8000b40 <__clzsi2+0x2c>)
 8000b38:	5c10      	ldrb	r0, [r2, r0]
 8000b3a:	1840      	adds	r0, r0, r1
 8000b3c:	4770      	bx	lr
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	02020304 	.word	0x02020304
 8000b44:	01010101 	.word	0x01010101
	...

08000b50 <_ZN3LEDC1EP6WS2812>:
#include "led.h"

LED::LED(WS2812* neopixel){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_ZN3LED4initEh>:

void LED::init(uint8_t panel_id){
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	000a      	movs	r2, r1
 8000b74:	1cfb      	adds	r3, r7, #3
 8000b76:	701a      	strb	r2, [r3, #0]
    NEOPIXEL->clear();
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f000 ff97 	bl	8001ab0 <_ZN6WS28125clearEv>
    if	   (panel_id==0){PANEL_START_X = 0; PANEL_START_Z = 0;}
 8000b82:	1cfb      	adds	r3, r7, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <_ZN3LED4initEh+0x2e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	71da      	strb	r2, [r3, #7]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	721a      	strb	r2, [r3, #8]
    else if(panel_id==5){PANEL_START_X = 16; PANEL_START_Z = 32;}

    else if(panel_id==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
    else if(panel_id==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
    else if(panel_id==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
}
 8000b96:	e056      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==1){PANEL_START_X = 0; PANEL_START_Z = 16;}
 8000b98:	1cfb      	adds	r3, r7, #3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <_ZN3LED4initEh+0x44>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	71da      	strb	r2, [r3, #7]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2210      	movs	r2, #16
 8000baa:	721a      	strb	r2, [r3, #8]
}
 8000bac:	e04b      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==2){PANEL_START_X = 0; PANEL_START_Z = 32;}
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d106      	bne.n	8000bc4 <_ZN3LED4initEh+0x5a>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	71da      	strb	r2, [r3, #7]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	721a      	strb	r2, [r3, #8]
}
 8000bc2:	e040      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==3){PANEL_START_X = 16; PANEL_START_Z = 0;}
 8000bc4:	1cfb      	adds	r3, r7, #3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d106      	bne.n	8000bda <_ZN3LED4initEh+0x70>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2210      	movs	r2, #16
 8000bd0:	71da      	strb	r2, [r3, #7]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	721a      	strb	r2, [r3, #8]
}
 8000bd8:	e035      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==4){PANEL_START_X = 16; PANEL_START_Z = 16;}
 8000bda:	1cfb      	adds	r3, r7, #3
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d106      	bne.n	8000bf0 <_ZN3LED4initEh+0x86>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2210      	movs	r2, #16
 8000be6:	71da      	strb	r2, [r3, #7]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2210      	movs	r2, #16
 8000bec:	721a      	strb	r2, [r3, #8]
}
 8000bee:	e02a      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==5){PANEL_START_X = 16; PANEL_START_Z = 32;}
 8000bf0:	1cfb      	adds	r3, r7, #3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b05      	cmp	r3, #5
 8000bf6:	d106      	bne.n	8000c06 <_ZN3LED4initEh+0x9c>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	71da      	strb	r2, [r3, #7]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2220      	movs	r2, #32
 8000c02:	721a      	strb	r2, [r3, #8]
}
 8000c04:	e01f      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
 8000c06:	1cfb      	adds	r3, r7, #3
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d106      	bne.n	8000c1c <_ZN3LED4initEh+0xb2>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2220      	movs	r2, #32
 8000c12:	71da      	strb	r2, [r3, #7]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	721a      	strb	r2, [r3, #8]
}
 8000c1a:	e014      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
 8000c1c:	1cfb      	adds	r3, r7, #3
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b07      	cmp	r3, #7
 8000c22:	d106      	bne.n	8000c32 <_ZN3LED4initEh+0xc8>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2220      	movs	r2, #32
 8000c28:	71da      	strb	r2, [r3, #7]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	721a      	strb	r2, [r3, #8]
}
 8000c30:	e009      	b.n	8000c46 <_ZN3LED4initEh+0xdc>
    else if(panel_id==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
 8000c32:	1cfb      	adds	r3, r7, #3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d105      	bne.n	8000c46 <_ZN3LED4initEh+0xdc>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	71da      	strb	r2, [r3, #7]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2220      	movs	r2, #32
 8000c44:	721a      	strb	r2, [r3, #8]
}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_ZN3LED4showEiiiiii>:

void LED::show(int travel_x, int circle_x, int circle_z, int circle_r, int hue, int hue_of_back){
 8000c4e:	b590      	push	{r4, r7, lr}
 8000c50:	b08d      	sub	sp, #52	@ 0x34
 8000c52:	af04      	add	r7, sp, #16
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	603b      	str	r3, [r7, #0]
    NEOPIXEL->clear();
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 ff25 	bl	8001ab0 <_ZN6WS28125clearEv>
    for(int px=0; px<16; px++){
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	e039      	b.n	8000ce0 <_ZN3LED4showEiiiiii+0x92>
        for(int pz=0; pz<16; pz++){
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	e030      	b.n	8000cd4 <_ZN3LED4showEiiiiii+0x86>
            int x = px + PANEL_START_X + travel_x;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	79db      	ldrb	r3, [r3, #7]
 8000c76:	001a      	movs	r2, r3
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
            int z = pz + PANEL_START_Z;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	7a1b      	ldrb	r3, [r3, #8]
 8000c86:	001a      	movs	r2, r3
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	189b      	adds	r3, r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]

            set_under(hue_of_back);
 8000c8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 f87e 	bl	8000d96 <_ZN3LED9set_underEi>
            set_circle(x, z, circle_x, circle_z, circle_r, hue);
 8000c9a:	687c      	ldr	r4, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	6979      	ldr	r1, [r7, #20]
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	0023      	movs	r3, r4
 8000cb0:	f000 f822 	bl	8000cf8 <_ZN3LED10set_circleEiiiiii>
            set_color(change_coord_to_num(px, pz));
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	69f9      	ldr	r1, [r7, #28]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 f897 	bl	8000dee <_ZN3LED19change_coord_to_numEii>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 f876 	bl	8000dba <_ZN3LED9set_colorEt>
        for(int pz=0; pz<16; pz++){
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	ddcb      	ble.n	8000c72 <_ZN3LED4showEiiiiii+0x24>
    for(int px=0; px<16; px++){
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	ddc2      	ble.n	8000c6c <_ZN3LED4showEiiiiii+0x1e>
        }
    }
    NEOPIXEL->show();
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 fe58 	bl	80019a0 <_ZN6WS28124showEv>
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b009      	add	sp, #36	@ 0x24
 8000cf6:	bd90      	pop	{r4, r7, pc}

08000cf8 <_ZN3LED10set_circleEiiiiii>:

void LED::set_circle(int x, int z, int cx, int cz, int ro, int h){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
    float distance = (x-cx)*(x-cx)+(z-cz)*(z-cz);
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	435a      	muls	r2, r3
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	1acb      	subs	r3, r1, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	6a39      	ldr	r1, [r7, #32]
 8000d1e:	1a41      	subs	r1, r0, r1
 8000d20:	434b      	muls	r3, r1
 8000d22:	18d3      	adds	r3, r2, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff fb77 	bl	8000418 <__aeabi_i2f>
 8000d2a:	1c03      	adds	r3, r0, #0
 8000d2c:	617b      	str	r3, [r7, #20]
    if(ro*ro>=distance){
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d30:	435b      	muls	r3, r3
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fb70 	bl	8000418 <__aeabi_i2f>
 8000d38:	1c03      	adds	r3, r0, #0
 8000d3a:	1c19      	adds	r1, r3, #0
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff fa87 	bl	8000250 <__aeabi_fcmple>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d100      	bne.n	8000d48 <_ZN3LED10set_circleEiiiiii+0x50>
//        red = 10; green = 0; blue = 0;
    	hue = h; sat = 240; val = 20;
    }else{}
}
 8000d46:	e008      	b.n	8000d5a <_ZN3LED10set_circleEiiiiii+0x62>
    	hue = h; sat = 240; val = 20;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	22f0      	movs	r2, #240	@ 0xf0
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2214      	movs	r2, #20
 8000d58:	615a      	str	r2, [r3, #20]
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_ZN3LED17do_forwardRewriteEv>:

void LED::do_forwardRewrite(){
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
    NEOPIXEL->do_forwardRewrite();
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 ffac 	bl	8001ccc <_ZN6WS281217do_forwardRewriteEv>
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_ZN3LED14do_backRewriteEv>:

void LED::do_backRewrite(){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    NEOPIXEL->do_backRewrite();
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f001 f849 	bl	8001e20 <_ZN6WS281214do_backRewriteEv>
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_ZN3LED9set_underEi>:

void LED::set_under(int hue_of_back){
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
    hue = hue_of_back;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	60da      	str	r2, [r3, #12]
    sat = 230;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	22e6      	movs	r2, #230	@ 0xe6
 8000daa:	611a      	str	r2, [r3, #16]
    val = 8;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2208      	movs	r2, #8
 8000db0:	615a      	str	r2, [r3, #20]
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZN3LED9set_colorEt>:

void LED::set_color(uint16_t pixel_num){
 8000dba:	b590      	push	{r4, r7, lr}
 8000dbc:	b085      	sub	sp, #20
 8000dbe:	af02      	add	r7, sp, #8
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	801a      	strh	r2, [r3, #0]
//    NEOPIXEL->set_rgb(pixel_num, red, green, blue);
	NEOPIXEL->set_hsv(pixel_num, hue, sat, val);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b2d9      	uxtb	r1, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691c      	ldr	r4, [r3, #16]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	0023      	movs	r3, r4
 8000de2:	f000 fe95 	bl	8001b10 <_ZN6WS28127set_hsvEhiii>
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b003      	add	sp, #12
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <_ZN3LED19change_coord_to_numEii>:

int LED::change_coord_to_num(int px, int pz){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
    int return_pixel_num = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]

    if(pz%2 == 0){
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	4013      	ands	r3, r2
 8000e04:	d105      	bne.n	8000e12 <_ZN3LED19change_coord_to_numEii+0x24>
        return_pixel_num = pz*16 + px;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	18d3      	adds	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e006      	b.n	8000e20 <_ZN3LED19change_coord_to_numEii+0x32>
    }
    else{
        return_pixel_num = pz*16 + 15 - px;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	330f      	adds	r3, #15
 8000e18:	001a      	movs	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
    }

    return return_pixel_num;
 8000e20:	697b      	ldr	r3, [r7, #20]
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b006      	add	sp, #24
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	led.do_forwardRewrite();
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8000e36:	0018      	movs	r0, r3
 8000e38:	f7ff ff93 	bl	8000d62 <_ZN3LED17do_forwardRewriteEv>
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000504 	.word	0x20000504

08000e48 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	led.do_backRewrite();
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff ff92 	bl	8000d7c <_ZN3LED14do_backRewriteEv>
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000504 	.word	0x20000504

08000e64 <_Z6readIDv>:

uint8_t readID(){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint8_t ID = 0;
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){ID=0;}
 8000e70:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <_Z6readIDv+0xcc>)
 8000e72:	2110      	movs	r1, #16
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 fe5f 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	425a      	negs	r2, r3
 8000e80:	4153      	adcs	r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <_Z6readIDv+0x2c>
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e01e      	b.n	8000ece <_Z6readIDv+0x6a>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){ID=1;}
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <_Z6readIDv+0xcc>)
 8000e92:	2120      	movs	r1, #32
 8000e94:	0018      	movs	r0, r3
 8000e96:	f001 fe4f 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	425a      	negs	r2, r3
 8000ea0:	4153      	adcs	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <_Z6readIDv+0x4c>
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e00e      	b.n	8000ece <_Z6readIDv+0x6a>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){ID=2;}
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <_Z6readIDv+0xcc>)
 8000eb2:	2140      	movs	r1, #64	@ 0x40
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 fe3f 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	425a      	negs	r2, r3
 8000ec0:	4153      	adcs	r3, r2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <_Z6readIDv+0x6a>
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){ID=ID+3;}
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	015a      	lsls	r2, r3, #5
 8000ed2:	23a0      	movs	r3, #160	@ 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fe2d 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	425a      	negs	r2, r3
 8000ee4:	4153      	adcs	r3, r2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <_Z6readIDv+0x94>
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	3203      	adds	r2, #3
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e015      	b.n	8000f24 <_Z6readIDv+0xc0>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){ID=ID+6;}
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <_Z6readIDv+0xcc>)
 8000efa:	2108      	movs	r1, #8
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 fe1b 	bl	8002b38 <HAL_GPIO_ReadPin>
 8000f02:	0003      	movs	r3, r0
 8000f04:	3b01      	subs	r3, #1
 8000f06:	425a      	negs	r2, r3
 8000f08:	4153      	adcs	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <_Z6readIDv+0xb8>
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	1dfa      	adds	r2, r7, #7
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	3206      	adds	r2, #6
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	e003      	b.n	8000f24 <_Z6readIDv+0xc0>
	else{ID = ID;}
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	1dfa      	adds	r2, r7, #7
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	701a      	strb	r2, [r3, #0]
	return ID;
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	50000400 	.word	0x50000400

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 f855 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f879 	bl	8001034 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f9c3 	bl	80012cc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000f46:	f000 f99b 	bl	8001280 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000f4a:	f000 f961 	bl	8001210 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000f4e:	f000 f8cd 	bl	80010ec <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  led.init(readID());
 8000f52:	f7ff ff87 	bl	8000e64 <_Z6readIDv>
 8000f56:	0003      	movs	r3, r0
 8000f58:	001a      	movs	r2, r3
 8000f5a:	4b30      	ldr	r3, [pc, #192]	@ (800101c <main+0xe8>)
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fe03 	bl	8000b6a <_ZN3LED4initEh>
  id = readID();
 8000f64:	f7ff ff7e 	bl	8000e64 <_Z6readIDv>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <main+0xec>)
 8000f6e:	601a      	str	r2, [r3, #0]
  fromMother.begin_dma();
 8000f70:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <main+0xf0>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fa79 	bl	800146a <_ZN13SDMA_TRANSMIT9begin_dmaEv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    fromMother.check_buf();
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <main+0xf0>)
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fa88 	bl	8001490 <_ZN13SDMA_TRANSMIT9check_bufEv>
    out_hue1 = 2.5 * fromMother.in_hue1;
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <main+0xf0>)
 8000f82:	22a8      	movs	r2, #168	@ 0xa8
 8000f84:	589b      	ldr	r3, [r3, r2]
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fd96 	bl	8000ab8 <__aeabi_i2d>
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <main+0xf4>)
 8000f90:	f7ff fa8e 	bl	80004b0 <__aeabi_dmul>
 8000f94:	0002      	movs	r2, r0
 8000f96:	000b      	movs	r3, r1
 8000f98:	0010      	movs	r0, r2
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	f7ff fd50 	bl	8000a40 <__aeabi_d2iz>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <main+0xf8>)
 8000fa4:	601a      	str	r2, [r3, #0]
    if(out_hue1>=255){out_hue1 = 255;}
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <main+0xf8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fac:	dd02      	ble.n	8000fb4 <main+0x80>
 8000fae:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <main+0xf8>)
 8000fb0:	22ff      	movs	r2, #255	@ 0xff
 8000fb2:	601a      	str	r2, [r3, #0]
    out_hue2 = 2.5 * fromMother.in_hue2;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <main+0xf0>)
 8000fb6:	22ac      	movs	r2, #172	@ 0xac
 8000fb8:	589b      	ldr	r3, [r3, r2]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff fd7c 	bl	8000ab8 <__aeabi_i2d>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <main+0xf4>)
 8000fc4:	f7ff fa74 	bl	80004b0 <__aeabi_dmul>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	000b      	movs	r3, r1
 8000fcc:	0010      	movs	r0, r2
 8000fce:	0019      	movs	r1, r3
 8000fd0:	f7ff fd36 	bl	8000a40 <__aeabi_d2iz>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <main+0xfc>)
 8000fd8:	601a      	str	r2, [r3, #0]
    if(out_hue2>=255){out_hue2 = 255;}
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <main+0xfc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fe0:	dd02      	ble.n	8000fe8 <main+0xb4>
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <main+0xfc>)
 8000fe4:	22ff      	movs	r2, #255	@ 0xff
 8000fe6:	601a      	str	r2, [r3, #0]
     led.show(fromMother.travel_x, fromMother.circle_x, fromMother.circle_z, fromMother.radius, out_hue1, out_hue2);
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <main+0xf0>)
 8000fea:	2298      	movs	r2, #152	@ 0x98
 8000fec:	5899      	ldr	r1, [r3, r2]
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <main+0xf0>)
 8000ff0:	229c      	movs	r2, #156	@ 0x9c
 8000ff2:	589c      	ldr	r4, [r3, r2]
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <main+0xf0>)
 8000ff6:	22a0      	movs	r2, #160	@ 0xa0
 8000ff8:	589d      	ldr	r5, [r3, r2]
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <main+0xf0>)
 8000ffc:	22a4      	movs	r2, #164	@ 0xa4
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	001e      	movs	r6, r3
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <main+0xf8>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <main+0xfc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <main+0xe8>)
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9600      	str	r6, [sp, #0]
 8001012:	002b      	movs	r3, r5
 8001014:	0022      	movs	r2, r4
 8001016:	f7ff fe1a 	bl	8000c4e <_ZN3LED4showEiiiiii>
    fromMother.check_buf();
 800101a:	e7ad      	b.n	8000f78 <main+0x44>
 800101c:	20000504 	.word	0x20000504
 8001020:	200005d4 	.word	0x200005d4
 8001024:	2000051c 	.word	0x2000051c
 8001028:	40040000 	.word	0x40040000
 800102c:	200005cc 	.word	0x200005cc
 8001030:	200005d0 	.word	0x200005d0

08001034 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b093      	sub	sp, #76	@ 0x4c
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	2414      	movs	r4, #20
 800103c:	193b      	adds	r3, r7, r4
 800103e:	0018      	movs	r0, r3
 8001040:	2334      	movs	r3, #52	@ 0x34
 8001042:	001a      	movs	r2, r3
 8001044:	2100      	movs	r1, #0
 8001046:	f004 fb7f 	bl	8005748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	0018      	movs	r0, r3
 800104e:	2310      	movs	r3, #16
 8001050:	001a      	movs	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	f004 fb78 	bl	8005748 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fda5 	bl	8002bac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	22a0      	movs	r2, #160	@ 0xa0
 800106c:	02d2      	lsls	r2, r2, #11
 800106e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001070:	0021      	movs	r1, r4
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2202      	movs	r2, #2
 8001076:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2203      	movs	r2, #3
 800107c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2209      	movs	r2, #9
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	0292      	lsls	r2, r2, #10
 8001090:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	05d2      	lsls	r2, r2, #23
 8001098:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	187b      	adds	r3, r7, r1
 800109c:	0018      	movs	r0, r3
 800109e:	f001 fdd1 	bl	8002c44 <HAL_RCC_OscConfig>
 80010a2:	0003      	movs	r3, r0
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	4193      	sbcs	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 80010ae:	f000 f97d 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2202      	movs	r2, #2
 80010bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2101      	movs	r1, #1
 80010ce:	0018      	movs	r0, r3
 80010d0:	f002 f8c8 	bl	8003264 <HAL_RCC_ClockConfig>
 80010d4:	0003      	movs	r3, r0
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	4193      	sbcs	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80010e0:	f000 f964 	bl	80013ac <Error_Handler>
  }
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b013      	add	sp, #76	@ 0x4c
 80010ea:	bd90      	pop	{r4, r7, pc}

080010ec <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	@ 0x38
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	2328      	movs	r3, #40	@ 0x28
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	0018      	movs	r0, r3
 80010f8:	2310      	movs	r3, #16
 80010fa:	001a      	movs	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	f004 fb23 	bl	8005748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	231c      	movs	r3, #28
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	0018      	movs	r0, r3
 8001108:	230c      	movs	r3, #12
 800110a:	001a      	movs	r2, r3
 800110c:	2100      	movs	r1, #0
 800110e:	f004 fb1b 	bl	8005748 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001112:	003b      	movs	r3, r7
 8001114:	0018      	movs	r0, r3
 8001116:	231c      	movs	r3, #28
 8001118:	001a      	movs	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	f004 fb14 	bl	8005748 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 8001122:	4a3a      	ldr	r2, [pc, #232]	@ (800120c <_ZL12MX_TIM3_Initv+0x120>)
 8001124:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8001126:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 8001128:	2203      	movs	r2, #3
 800112a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8001132:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 8001134:	220e      	movs	r2, #14
 8001136:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b33      	ldr	r3, [pc, #204]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001144:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 8001146:	0018      	movs	r0, r3
 8001148:	f002 fa34 	bl	80035b4 <HAL_TIM_Base_Init>
 800114c:	0003      	movs	r3, r0
 800114e:	1e5a      	subs	r2, r3, #1
 8001150:	4193      	sbcs	r3, r2
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001158:	f000 f928 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	2128      	movs	r1, #40	@ 0x28
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2280      	movs	r2, #128	@ 0x80
 8001162:	0152      	lsls	r2, r2, #5
 8001164:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001166:	187a      	adds	r2, r7, r1
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f002 feb1 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8001172:	0003      	movs	r3, r0
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	4193      	sbcs	r3, r2
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 800117e:	f000 f915 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 8001184:	0018      	movs	r0, r3
 8001186:	f002 fa6d 	bl	8003664 <HAL_TIM_PWM_Init>
 800118a:	0003      	movs	r3, r0
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001196:	f000 f909 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	211c      	movs	r1, #28
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a8:	187a      	adds	r2, r7, r1
 80011aa:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f003 fc18 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	0003      	movs	r3, r0
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	4193      	sbcs	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80011c0:	f000 f8f4 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	003b      	movs	r3, r7
 80011c6:	2260      	movs	r2, #96	@ 0x60
 80011c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80011ca:	003b      	movs	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d0:	003b      	movs	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011d6:	003b      	movs	r3, r7
 80011d8:	2204      	movs	r2, #4
 80011da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011dc:	0039      	movs	r1, r7
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	0018      	movs	r0, r3
 80011e4:	f002 fd76 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	0003      	movs	r3, r0
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4193      	sbcs	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 80011f4:	f000 f8da 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <_ZL12MX_TIM3_Initv+0x11c>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 faba 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b00e      	add	sp, #56	@ 0x38
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000028 	.word	0x20000028
 800120c:	40000400 	.word	0x40000400

08001210 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001216:	4a19      	ldr	r2, [pc, #100]	@ (800127c <_ZL19MX_USART2_UART_Initv+0x6c>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 800121c:	22e1      	movs	r2, #225	@ 0xe1
 800121e:	0252      	lsls	r2, r2, #9
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <_ZL19MX_USART2_UART_Initv+0x68>)
 800125a:	0018      	movs	r0, r3
 800125c:	f003 fc24 	bl	8004aa8 <HAL_UART_Init>
 8001260:	0003      	movs	r3, r0
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	4193      	sbcs	r3, r2
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 800126c:	f000 f89e 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	200000d0 	.word	0x200000d0
 800127c:	40004400 	.word	0x40004400

08001280 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_ZL11MX_DMA_Initv+0x48>)
 8001288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <_ZL11MX_DMA_Initv+0x48>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <_ZL11MX_DMA_Initv+0x48>)
 8001294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2009      	movs	r0, #9
 80012a4:	f000 fff6 	bl	8002294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012a8:	2009      	movs	r0, #9
 80012aa:	f001 f808 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200a      	movs	r0, #10
 80012b4:	f000 ffee 	bl	8002294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80012b8:	200a      	movs	r0, #10
 80012ba:	f001 f800 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	40021000 	.word	0x40021000

080012cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	@ 0x24
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	240c      	movs	r4, #12
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	0018      	movs	r0, r3
 80012d8:	2314      	movs	r3, #20
 80012da:	001a      	movs	r2, r3
 80012dc:	2100      	movs	r1, #0
 80012de:	f004 fa33 	bl	8005748 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 80012e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 80012e8:	2104      	movs	r1, #4
 80012ea:	430a      	orrs	r2, r1
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 80012f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f2:	2204      	movs	r2, #4
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	@ 0x34
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001318:	2102      	movs	r1, #2
 800131a:	430a      	orrs	r2, r1
 800131c:	635a      	str	r2, [r3, #52]	@ 0x34
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <_ZL12MX_GPIO_Initv+0xd8>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001322:	2202      	movs	r2, #2
 8001324:	4013      	ands	r3, r2
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <_ZL12MX_GPIO_Initv+0xdc>)
 800132c:	2200      	movs	r2, #0
 800132e:	2104      	movs	r1, #4
 8001330:	0018      	movs	r0, r3
 8001332:	f001 fc1e 	bl	8002b72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2204      	movs	r2, #4
 800133a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2201      	movs	r2, #1
 8001340:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	193b      	adds	r3, r7, r4
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	193b      	adds	r3, r7, r4
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800134e:	193b      	adds	r3, r7, r4
 8001350:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <_ZL12MX_GPIO_Initv+0xdc>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f001 fa8b 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	0152      	lsls	r2, r2, #5
 8001360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	193b      	adds	r3, r7, r4
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	193b      	adds	r3, r7, r4
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800136e:	193a      	adds	r2, r7, r4
 8001370:	23a0      	movs	r3, #160	@ 0xa0
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	0011      	movs	r1, r2
 8001376:	0018      	movs	r0, r3
 8001378:	f001 fa7a 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin;
 800137c:	193b      	adds	r3, r7, r4
 800137e:	2278      	movs	r2, #120	@ 0x78
 8001380:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	193b      	adds	r3, r7, r4
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	193b      	adds	r3, r7, r4
 8001390:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <_ZL12MX_GPIO_Initv+0xdc>)
 8001392:	0019      	movs	r1, r3
 8001394:	0010      	movs	r0, r2
 8001396:	f001 fa6b 	bl	8002870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b009      	add	sp, #36	@ 0x24
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	40021000 	.word	0x40021000
 80013a8:	50000400 	.word	0x50000400

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d115      	bne.n	80013f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4a0c      	ldr	r2, [pc, #48]	@ (80013fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d111      	bne.n	80013f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80013d2:	490c      	ldr	r1, [pc, #48]	@ (8001404 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80013d6:	2204      	movs	r2, #4
 80013d8:	f000 fabc 	bl	8001954 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 80013dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fbb4 	bl	8000b50 <_ZN3LEDC1EP6WS2812>
SDMA_TRANSMIT fromMother(&huart2,0);
 80013e8:	4909      	ldr	r1, [pc, #36]	@ (8001410 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 f81e 	bl	8001430 <_ZN13SDMA_TRANSMITC1EP20__UART_HandleTypeDefh>
}
 80013f4:	46c0      	nop			@ (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0000ffff 	.word	0x0000ffff
 8001400:	20000074 	.word	0x20000074
 8001404:	20000028 	.word	0x20000028
 8001408:	200001c0 	.word	0x200001c0
 800140c:	20000504 	.word	0x20000504
 8001410:	200000d0 	.word	0x200000d0
 8001414:	2000051c 	.word	0x2000051c

08001418 <_GLOBAL__sub_I_htim3>:
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <_GLOBAL__sub_I_htim3+0x14>)
 800141e:	0019      	movs	r1, r3
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff ffc9 	bl	80013b8 <_Z41__static_initialization_and_destruction_0ii>
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	0000ffff 	.word	0x0000ffff

08001430 <_ZN13SDMA_TRANSMITC1EP20__UART_HandleTypeDefh>:

#include "sdma_transmit.h"

SDMA_TRANSMIT::SDMA_TRANSMIT(UART_HandleTypeDef* uart, uint8_t id){
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	2100      	movs	r1, #0
 8001444:	5099      	str	r1, [r3, r2]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2284      	movs	r2, #132	@ 0x84
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]
    UART = uart;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2190      	movs	r1, #144	@ 0x90
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	505a      	str	r2, [r3, r1]
    ID = id;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1dfa      	adds	r2, r7, #7
 800145a:	2185      	movs	r1, #133	@ 0x85
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	545a      	strb	r2, [r3, r1]
}
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}

0800146a <_ZN13SDMA_TRANSMIT9begin_dmaEv>:

void SDMA_TRANSMIT::begin_dma(){
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(UART, rxBuf, sizeof(rxBuf));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2290      	movs	r2, #144	@ 0x90
 8001476:	589b      	ldr	r3, [r3, r2]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	0018      	movs	r0, r3
 800147e:	f003 fb69 	bl	8004b54 <HAL_UART_Receive_DMA>
    HAL_Delay(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 fe36 	bl	80020f4 <HAL_Delay>
}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <_ZN13SDMA_TRANSMIT9check_bufEv>:

void SDMA_TRANSMIT::check_buf(){
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	index = UART->hdmarx->Instance->CNDTR;//バッファー残容量
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2290      	movs	r2, #144	@ 0x90
 800149c:	589b      	ldr	r3, [r3, r2]
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	589b      	ldr	r3, [r3, r2]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0019      	movs	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2294      	movs	r2, #148	@ 0x94
 80014ac:	5099      	str	r1, [r3, r2]
 	index = sizeof(rxBuf) - index;//最新の受信データ位置
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2294      	movs	r2, #148	@ 0x94
 80014b2:	589b      	ldr	r3, [r3, r2]
 80014b4:	001a      	movs	r2, r3
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2294      	movs	r2, #148	@ 0x94
 80014c0:	5099      	str	r1, [r3, r2]

 	int check_buf_point = index - 21;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2294      	movs	r2, #148	@ 0x94
 80014c6:	589b      	ldr	r3, [r3, r2]
 80014c8:	3b15      	subs	r3, #21
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
 	if(check_buf_point < 0){check_buf_point = check_buf_point + sizeof(rxBuf);}
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da02      	bge.n	80014d8 <_ZN13SDMA_TRANSMIT9check_bufEv+0x48>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	3380      	adds	r3, #128	@ 0x80
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
 	//読み込み済みデータ位置より最新の受信データ位置が前にある時(バッファー内で受信データが一周してた場合)値を補正

	while(1){
		readData = rxBuf[check_buf_point];
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	18d3      	adds	r3, r2, r3
 80014de:	7819      	ldrb	r1, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2284      	movs	r2, #132	@ 0x84
 80014e4:	5499      	strb	r1, [r3, r2]
		if(readData == 220+ID){
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2284      	movs	r2, #132	@ 0x84
 80014ea:	5c9b      	ldrb	r3, [r3, r2]
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2285      	movs	r2, #133	@ 0x85
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	33dc      	adds	r3, #220	@ 0xdc
 80014f6:	4299      	cmp	r1, r3
 80014f8:	d11f      	bne.n	800153a <_ZN13SDMA_TRANSMIT9check_bufEv+0xaa>
			for(int i=1; i<10; i++){
 80014fa:	2301      	movs	r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	e018      	b.n	8001532 <_ZN13SDMA_TRANSMIT9check_bufEv+0xa2>
				int read_buf_point = check_buf_point + i;
 8001500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	18d3      	adds	r3, r2, r3
 8001506:	61fb      	str	r3, [r7, #28]
				if(read_buf_point>sizeof(rxBuf)-1){read_buf_point = read_buf_point - sizeof(rxBuf);}
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b7f      	cmp	r3, #127	@ 0x7f
 800150c:	d902      	bls.n	8001514 <_ZN13SDMA_TRANSMIT9check_bufEv+0x84>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b80      	subs	r3, #128	@ 0x80
 8001512:	61fb      	str	r3, [r7, #28]
				rcvBuf[i-1] = rxBuf[read_buf_point];
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	3b01      	subs	r3, #1
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	188a      	adds	r2, r1, r2
 800151e:	7810      	ldrb	r0, [r2, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	2186      	movs	r1, #134	@ 0x86
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	185b      	adds	r3, r3, r1
 8001528:	1c02      	adds	r2, r0, #0
 800152a:	701a      	strb	r2, [r3, #0]
			for(int i=1; i<10; i++){
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	3301      	adds	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2b09      	cmp	r3, #9
 8001536:	dde3      	ble.n	8001500 <_ZN13SDMA_TRANSMIT9check_bufEv+0x70>
			}
			break;
 8001538:	e010      	b.n	800155c <_ZN13SDMA_TRANSMIT9check_bufEv+0xcc>
		}
		check_buf_point++;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
		if(check_buf_point>sizeof(rxBuf)-1){check_buf_point = check_buf_point - sizeof(rxBuf);}
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	2b7f      	cmp	r3, #127	@ 0x7f
 8001544:	d902      	bls.n	800154c <_ZN13SDMA_TRANSMIT9check_bufEv+0xbc>
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	3b80      	subs	r3, #128	@ 0x80
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
		if(check_buf_point==index){break;}
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2294      	movs	r2, #148	@ 0x94
 8001550:	589b      	ldr	r3, [r3, r2]
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	429a      	cmp	r2, r3
 8001556:	d000      	beq.n	800155a <_ZN13SDMA_TRANSMIT9check_bufEv+0xca>
	}
 8001558:	e7be      	b.n	80014d8 <_ZN13SDMA_TRANSMIT9check_bufEv+0x48>
		if(check_buf_point==index){break;}
 800155a:	46c0      	nop			@ (mov r8, r8)

 	travel_x = 0; int hyaku = 1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2298      	movs	r2, #152	@ 0x98
 8001560:	2100      	movs	r1, #0
 8001562:	5099      	str	r1, [r3, r2]
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i <2 ; i++){
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e016      	b.n	800159c <_ZN13SDMA_TRANSMIT9check_bufEv+0x10c>
		travel_x = travel_x + (rcvBuf[i]*hyaku);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2298      	movs	r2, #152	@ 0x98
 8001572:	589a      	ldr	r2, [r3, r2]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	2086      	movs	r0, #134	@ 0x86
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	18cb      	adds	r3, r1, r3
 800157c:	181b      	adds	r3, r3, r0
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	0019      	movs	r1, r3
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	434b      	muls	r3, r1
 8001586:	18d2      	adds	r2, r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2198      	movs	r1, #152	@ 0x98
 800158c:	505a      	str	r2, [r3, r1]
		hyaku = hyaku*100;
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2264      	movs	r2, #100	@ 0x64
 8001592:	4353      	muls	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i <2 ; i++){
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	dde5      	ble.n	800156e <_ZN13SDMA_TRANSMIT9check_bufEv+0xde>
	}
	travel_x -= 5000;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2298      	movs	r2, #152	@ 0x98
 80015a6:	589b      	ldr	r3, [r3, r2]
 80015a8:	4a39      	ldr	r2, [pc, #228]	@ (8001690 <_ZN13SDMA_TRANSMIT9check_bufEv+0x200>)
 80015aa:	189a      	adds	r2, r3, r2
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2198      	movs	r1, #152	@ 0x98
 80015b0:	505a      	str	r2, [r3, r1]

	circle_x = 0; hyaku = 1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	229c      	movs	r2, #156	@ 0x9c
 80015b6:	2100      	movs	r1, #0
 80015b8:	5099      	str	r1, [r3, r2]
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
	for(int i = 2; i <4 ; i++){
 80015be:	2302      	movs	r3, #2
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	e016      	b.n	80015f2 <_ZN13SDMA_TRANSMIT9check_bufEv+0x162>
		circle_x = circle_x + (rcvBuf[i]*hyaku);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	229c      	movs	r2, #156	@ 0x9c
 80015c8:	589a      	ldr	r2, [r3, r2]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2086      	movs	r0, #134	@ 0x86
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	18cb      	adds	r3, r1, r3
 80015d2:	181b      	adds	r3, r3, r0
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	0019      	movs	r1, r3
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	434b      	muls	r3, r1
 80015dc:	18d2      	adds	r2, r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	219c      	movs	r1, #156	@ 0x9c
 80015e2:	505a      	str	r2, [r3, r1]
		hyaku = hyaku*100;
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2264      	movs	r2, #100	@ 0x64
 80015e8:	4353      	muls	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
	for(int i = 2; i <4 ; i++){
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	3301      	adds	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	dde5      	ble.n	80015c4 <_ZN13SDMA_TRANSMIT9check_bufEv+0x134>
	}
	circle_x -= 5000;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	229c      	movs	r2, #156	@ 0x9c
 80015fc:	589b      	ldr	r3, [r3, r2]
 80015fe:	4a24      	ldr	r2, [pc, #144]	@ (8001690 <_ZN13SDMA_TRANSMIT9check_bufEv+0x200>)
 8001600:	189a      	adds	r2, r3, r2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	219c      	movs	r1, #156	@ 0x9c
 8001606:	505a      	str	r2, [r3, r1]

	circle_z = 0; hyaku = 1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	22a0      	movs	r2, #160	@ 0xa0
 800160c:	2100      	movs	r1, #0
 800160e:	5099      	str	r1, [r3, r2]
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
	for(int i = 4; i <6 ; i++){
 8001614:	2304      	movs	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e016      	b.n	8001648 <_ZN13SDMA_TRANSMIT9check_bufEv+0x1b8>
		circle_z = circle_z + (rcvBuf[i]*hyaku);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	22a0      	movs	r2, #160	@ 0xa0
 800161e:	589a      	ldr	r2, [r3, r2]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	2086      	movs	r0, #134	@ 0x86
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	18cb      	adds	r3, r1, r3
 8001628:	181b      	adds	r3, r3, r0
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	0019      	movs	r1, r3
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	434b      	muls	r3, r1
 8001632:	18d2      	adds	r2, r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	21a0      	movs	r1, #160	@ 0xa0
 8001638:	505a      	str	r2, [r3, r1]
		hyaku = hyaku*100;
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2264      	movs	r2, #100	@ 0x64
 800163e:	4353      	muls	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
	for(int i = 4; i <6 ; i++){
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3301      	adds	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b05      	cmp	r3, #5
 800164c:	dde5      	ble.n	800161a <_ZN13SDMA_TRANSMIT9check_bufEv+0x18a>
	}
	circle_z -= 5000;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	22a0      	movs	r2, #160	@ 0xa0
 8001652:	589b      	ldr	r3, [r3, r2]
 8001654:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <_ZN13SDMA_TRANSMIT9check_bufEv+0x200>)
 8001656:	189a      	adds	r2, r3, r2
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	21a0      	movs	r1, #160	@ 0xa0
 800165c:	505a      	str	r2, [r3, r1]

	radius = rcvBuf[6];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	228c      	movs	r2, #140	@ 0x8c
 8001662:	5c99      	ldrb	r1, [r3, r2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	22a4      	movs	r2, #164	@ 0xa4
 8001668:	5499      	strb	r1, [r3, r2]
	in_hue1 = rcvBuf[7];
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	228d      	movs	r2, #141	@ 0x8d
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	22a8      	movs	r2, #168	@ 0xa8
 8001676:	5099      	str	r1, [r3, r2]
	in_hue2 = rcvBuf[8];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	228e      	movs	r2, #142	@ 0x8e
 800167c:	5c9b      	ldrb	r3, [r3, r2]
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	22ac      	movs	r2, #172	@ 0xac
 8001684:	5099      	str	r1, [r3, r2]

}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b00a      	add	sp, #40	@ 0x28
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	ffffec78 	.word	0xffffec78

08001694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_MspInit+0x44>)
 800169c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x44>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_MspInit+0x44>)
 80016b8:	2180      	movs	r1, #128	@ 0x80
 80016ba:	0549      	lsls	r1, r1, #21
 80016bc:	430a      	orrs	r2, r1
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_MspInit+0x44>)
 80016c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	055b      	lsls	r3, r3, #21
 80016c8:	4013      	ands	r3, r2
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <HAL_TIM_Base_MspInit+0x88>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d136      	bne.n	800175c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_TIM_Base_MspInit+0x8c>)
 80016f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_TIM_Base_MspInit+0x8c>)
 80016f4:	2102      	movs	r1, #2
 80016f6:	430a      	orrs	r2, r1
 80016f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_TIM_Base_MspInit+0x8c>)
 80016fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001708:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <HAL_TIM_Base_MspInit+0x94>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800170c:	4b17      	ldr	r3, [pc, #92]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 800170e:	2221      	movs	r2, #33	@ 0x21
 8001710:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001714:	2210      	movs	r2, #16
 8001716:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001726:	2280      	movs	r2, #128	@ 0x80
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001734:	2220      	movs	r2, #32
 8001736:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 800173a:	22c0      	movs	r2, #192	@ 0xc0
 800173c:	0192      	lsls	r2, r2, #6
 800173e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001742:	0018      	movs	r0, r3
 8001744:	f000 fdd8 	bl	80022f8 <HAL_DMA_Init>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d001      	beq.n	8001750 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800174c:	f7ff fe2e 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a06      	ldr	r2, [pc, #24]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_TIM_Base_MspInit+0x90>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b004      	add	sp, #16
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40000400 	.word	0x40000400
 8001768:	40021000 	.word	0x40021000
 800176c:	20000074 	.word	0x20000074
 8001770:	4002001c 	.word	0x4002001c

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	240c      	movs	r4, #12
 800177e:	193b      	adds	r3, r7, r4
 8001780:	0018      	movs	r0, r3
 8001782:	2314      	movs	r3, #20
 8001784:	001a      	movs	r2, r3
 8001786:	2100      	movs	r1, #0
 8001788:	f003 ffde 	bl	8005748 <memset>
  if(htim->Instance==TIM3)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <HAL_TIM_MspPostInit+0x70>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d122      	bne.n	80017dc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_TIM_MspPostInit+0x74>)
 8001798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <HAL_TIM_MspPostInit+0x74>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a2:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_TIM_MspPostInit+0x74>)
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017ae:	0021      	movs	r1, r4
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2280      	movs	r2, #128	@ 0x80
 80017b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2202      	movs	r2, #2
 80017ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2201      	movs	r2, #1
 80017cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	187a      	adds	r2, r7, r1
 80017d0:	23a0      	movs	r3, #160	@ 0xa0
 80017d2:	05db      	lsls	r3, r3, #23
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f001 f84a 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017dc:	46c0      	nop			@ (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b009      	add	sp, #36	@ 0x24
 80017e2:	bd90      	pop	{r4, r7, pc}
 80017e4:	40000400 	.word	0x40000400
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08b      	sub	sp, #44	@ 0x2c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	2414      	movs	r4, #20
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f003 ffa2 	bl	8005748 <memset>
  if(huart->Instance==USART2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a31      	ldr	r2, [pc, #196]	@ (80018d0 <HAL_UART_MspInit+0xe4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d15b      	bne.n	80018c6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 8001810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001812:	4b30      	ldr	r3, [pc, #192]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0289      	lsls	r1, r1, #10
 8001818:	430a      	orrs	r2, r1
 800181a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800181c:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 800181e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800182e:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <HAL_UART_MspInit+0xe8>)
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001842:	0021      	movs	r1, r4
 8001844:	187b      	adds	r3, r7, r1
 8001846:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <HAL_UART_MspInit+0xec>)
 8001848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2202      	movs	r2, #2
 800184e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800185c:	187b      	adds	r3, r7, r1
 800185e:	2201      	movs	r2, #1
 8001860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	187a      	adds	r2, r7, r1
 8001864:	23a0      	movs	r3, #160	@ 0xa0
 8001866:	05db      	lsls	r3, r3, #23
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f001 f800 	bl	8002870 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 8001872:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <HAL_UART_MspInit+0xf4>)
 8001874:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 8001878:	2234      	movs	r2, #52	@ 0x34
 800187a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 800188a:	2280      	movs	r2, #128	@ 0x80
 800188c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 800189c:	2220      	movs	r2, #32
 800189e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	0192      	lsls	r2, r2, #6
 80018a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 fd24 	bl	80022f8 <HAL_DMA_Init>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80018b4:	f7ff fd7a 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2180      	movs	r1, #128	@ 0x80
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 80018be:	505a      	str	r2, [r3, r1]
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_UART_MspInit+0xf0>)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b00b      	add	sp, #44	@ 0x2c
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40021000 	.word	0x40021000
 80018d8:	00008004 	.word	0x00008004
 80018dc:	20000164 	.word	0x20000164
 80018e0:	40020008 	.word	0x40020008

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190c:	f000 fbd6 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <DMA1_Channel1_IRQHandler+0x14>)
 800191e:	0018      	movs	r0, r3
 8001920:	f000 fe64 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	20000164 	.word	0x20000164

08001930 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001936:	0018      	movs	r0, r3
 8001938:	f000 fe58 	bl	80025ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	20000074 	.word	0x20000074

08001948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	46c0      	nop			@ (mov r8, r8)
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: famil
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a0d      	ldr	r2, [pc, #52]	@ (800199c <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 8001966:	189b      	adds	r3, r3, r2
 8001968:	2230      	movs	r2, #48	@ 0x30
 800196a:	2100      	movs	r1, #0
 800196c:	0018      	movs	r0, r3
 800196e:	f003 feeb 	bl	8005748 <memset>
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	23d0      	movs	r3, #208	@ 0xd0
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	2100      	movs	r1, #0
 800197a:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b004      	add	sp, #16
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	0000030f 	.word	0x0000030f

080019a0 <_ZN6WS28124showEv>:


void WS2812::show(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	23d0      	movs	r3, #208	@ 0xd0
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	58d3      	ldr	r3, [r2, r3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <_ZN6WS28124showEv+0x22>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2225      	movs	r2, #37	@ 0x25
 80019ba:	5c9b      	ldrb	r3, [r3, r2]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d001      	beq.n	80019c6 <_ZN6WS28124showEv+0x26>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <_ZN6WS28124showEv+0x28>
 80019c6:	2300      	movs	r3, #0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d025      	beq.n	8001a18 <_ZN6WS28124showEv+0x78>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	0019      	movs	r1, r3
 80019d6:	0010      	movs	r0, r2
 80019d8:	f002 f892 	bl	8003b00 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	23d0      	movs	r3, #208	@ 0xd0
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	2100      	movs	r1, #0
 80019e4:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e00d      	b.n	8001a0c <_ZN6WS28124showEv+0x6c>
 80019f0:	200f      	movs	r0, #15
 80019f2:	183b      	adds	r3, r7, r0
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	492c      	ldr	r1, [pc, #176]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	185b      	adds	r3, r3, r1
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	3201      	adds	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a14:	d9ec      	bls.n	80019f0 <_ZN6WS28124showEv+0x50>
        return;
 8001a16:	e045      	b.n	8001aa4 <_ZN6WS28124showEv+0x104>
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e031      	b.n	8001a82 <_ZN6WS28124showEv+0xe2>
        wr_buf[i   ] = 0;
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4922      	ldr	r1, [pc, #136]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	18d3      	adds	r3, r2, r3
 8001a26:	185b      	adds	r3, r3, r1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3308      	adds	r3, #8
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	491e      	ldr	r1, [pc, #120]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a34:	18d3      	adds	r3, r2, r3
 8001a36:	185b      	adds	r3, r3, r1
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3310      	adds	r3, #16
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	491a      	ldr	r1, [pc, #104]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	185b      	adds	r3, r3, r1
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3318      	adds	r3, #24
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4916      	ldr	r1, [pc, #88]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	185b      	adds	r3, r3, r1
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3320      	adds	r3, #32
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4912      	ldr	r1, [pc, #72]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a64:	18d3      	adds	r3, r2, r3
 8001a66:	185b      	adds	r3, r3, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3328      	adds	r3, #40	@ 0x28
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	490e      	ldr	r1, [pc, #56]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a74:	18d3      	adds	r3, r2, r3
 8001a76:	185b      	adds	r3, r3, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b07      	cmp	r3, #7
 8001a86:	d9ca      	bls.n	8001a1e <_ZN6WS28124showEv+0x7e>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6858      	ldr	r0, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_ZN6WS28124showEv+0x10c>)
 8001a96:	189a      	adds	r2, r3, r2
 8001a98:	2330      	movs	r3, #48	@ 0x30
 8001a9a:	f001 fe43 	bl	8003724 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 8001a9e:	2008      	movs	r0, #8
 8001aa0:	f000 fb28 	bl	80020f4 <HAL_Delay>
}
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	0000030f 	.word	0x0000030f

08001ab0 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e01d      	b.n	8001afa <_ZN6WS28125clearEv+0x4a>
        rgb_buf[i][0]=0;
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	189b      	adds	r3, r3, r2
 8001ac8:	18cb      	adds	r3, r1, r3
 8001aca:	330c      	adds	r3, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	189b      	adds	r3, r3, r2
 8001ada:	18cb      	adds	r3, r1, r3
 8001adc:	330d      	adds	r3, #13
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	0013      	movs	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	189b      	adds	r3, r3, r2
 8001aec:	18cb      	adds	r3, r1, r3
 8001aee:	330e      	adds	r3, #14
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	429a      	cmp	r2, r3
 8001b02:	dddc      	ble.n	8001abe <_ZN6WS28125clearEv+0xe>
    }
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <_ZN6WS28127set_hsvEhiii>:

void WS2812::set_hsv(uint8_t id, int h, int s, int v){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b08e      	sub	sp, #56	@ 0x38
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	230b      	movs	r3, #11
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	1c0a      	adds	r2, r1, #0
 8001b22:	701a      	strb	r2, [r3, #0]
	int r,g,b;
	if (s == 0) {
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <_ZN6WS28127set_hsvEhiii+0x28>
	    r = g = b = v;
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b36:	e077      	b.n	8001c28 <_ZN6WS28127set_hsvEhiii+0x118>
	}else{
	    h = h * 6; // sector 0 to 5
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	189b      	adds	r3, r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
	    int i = h / 256;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da00      	bge.n	8001b4c <_ZN6WS28127set_hsvEhiii+0x3c>
 8001b4a:	33ff      	adds	r3, #255	@ 0xff
 8001b4c:	121b      	asrs	r3, r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
	    int f = h % 256;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3f      	ldr	r2, [pc, #252]	@ (8001c50 <_ZN6WS28127set_hsvEhiii+0x140>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	d503      	bpl.n	8001b60 <_ZN6WS28127set_hsvEhiii+0x50>
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c54 <_ZN6WS28127set_hsvEhiii+0x144>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	3301      	adds	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
	    int p = (v * (256 - s)) / 256;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2280      	movs	r2, #128	@ 0x80
 8001b66:	0052      	lsls	r2, r2, #1
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b6c:	4353      	muls	r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da00      	bge.n	8001b74 <_ZN6WS28127set_hsvEhiii+0x64>
 8001b72:	33ff      	adds	r3, #255	@ 0xff
 8001b74:	121b      	asrs	r3, r3, #8
 8001b76:	61bb      	str	r3, [r7, #24]
	    int q = (v * (256 - (s * f) / 256)) / 256;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	4353      	muls	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da00      	bge.n	8001b84 <_ZN6WS28127set_hsvEhiii+0x74>
 8001b82:	33ff      	adds	r3, #255	@ 0xff
 8001b84:	121b      	asrs	r3, r3, #8
 8001b86:	425b      	negs	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	33ff      	adds	r3, #255	@ 0xff
 8001b8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b8e:	4353      	muls	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da00      	bge.n	8001b96 <_ZN6WS28127set_hsvEhiii+0x86>
 8001b94:	33ff      	adds	r3, #255	@ 0xff
 8001b96:	121b      	asrs	r3, r3, #8
 8001b98:	617b      	str	r3, [r7, #20]
	    int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2280      	movs	r2, #128	@ 0x80
 8001b9e:	0052      	lsls	r2, r2, #1
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4353      	muls	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da00      	bge.n	8001bac <_ZN6WS28127set_hsvEhiii+0x9c>
 8001baa:	33ff      	adds	r3, #255	@ 0xff
 8001bac:	121b      	asrs	r3, r3, #8
 8001bae:	425b      	negs	r3, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	33ff      	adds	r3, #255	@ 0xff
 8001bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bb6:	4353      	muls	r3, r2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da00      	bge.n	8001bbe <_ZN6WS28127set_hsvEhiii+0xae>
 8001bbc:	33ff      	adds	r3, #255	@ 0xff
 8001bbe:	121b      	asrs	r3, r3, #8
 8001bc0:	613b      	str	r3, [r7, #16]

	    switch (i) {
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d828      	bhi.n	8001c1a <_ZN6WS28127set_hsvEhiii+0x10a>
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	009a      	lsls	r2, r3, #2
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <_ZN6WS28127set_hsvEhiii+0x148>)
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	469f      	mov	pc, r3
	        case 0: r = v; g = t; b = p; break;
 8001bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be0:	e022      	b.n	8001c28 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 1: r = q; g = v; b = p; break;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bee:	e01b      	b.n	8001c28 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 2: r = p; g = v; b = t; break;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bfc:	e014      	b.n	8001c28 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 3: r = p; g = q; b = v; break;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0a:	e00d      	b.n	8001c28 <_ZN6WS28127set_hsvEhiii+0x118>
	        case 4: r = t; g = p; b = v; break;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	e006      	b.n	8001c28 <_ZN6WS28127set_hsvEhiii+0x118>
	        default: r = v; g = p;b = q; break;
 8001c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c26:	46c0      	nop			@ (mov r8, r8)
	    }
	}
	set_rgb(id, r, g, b);
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	b2dc      	uxtb	r4, r3
 8001c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2e:	b2dd      	uxtb	r5, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	220b      	movs	r2, #11
 8001c36:	18ba      	adds	r2, r7, r2
 8001c38:	7811      	ldrb	r1, [r2, #0]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	002b      	movs	r3, r5
 8001c40:	0022      	movs	r2, r4
 8001c42:	f000 f80b 	bl	8001c5c <_ZN6WS28127set_rgbEhhhh>

}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b00c      	add	sp, #48	@ 0x30
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	800000ff 	.word	0x800000ff
 8001c54:	ffffff00 	.word	0xffffff00
 8001c58:	08005818 	.word	0x08005818

08001c5c <_ZN6WS28127set_rgbEhhhh>:

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	000c      	movs	r4, r1
 8001c66:	0010      	movs	r0, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	1cfb      	adds	r3, r7, #3
 8001c6c:	1c22      	adds	r2, r4, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	1c7b      	adds	r3, r7, #1
 8001c78:	1c0a      	adds	r2, r1, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8001c7c:	1cfb      	adds	r3, r7, #3
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	0013      	movs	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	189b      	adds	r3, r3, r2
 8001c88:	18cb      	adds	r3, r1, r3
 8001c8a:	330c      	adds	r3, #12
 8001c8c:	1cba      	adds	r2, r7, #2
 8001c8e:	7812      	ldrb	r2, [r2, #0]
 8001c90:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 8001c92:	1cfb      	adds	r3, r7, #3
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	0013      	movs	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	189b      	adds	r3, r3, r2
 8001c9e:	18cb      	adds	r3, r1, r3
 8001ca0:	330d      	adds	r3, #13
 8001ca2:	1c7a      	adds	r2, r7, #1
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 8001ca8:	1cfb      	adds	r3, r7, #3
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	0013      	movs	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	189b      	adds	r3, r3, r2
 8001cb4:	18cb      	adds	r3, r1, r3
 8001cb6:	330e      	adds	r3, #14
 8001cb8:	001a      	movs	r2, r3
 8001cba:	2318      	movs	r3, #24
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	7013      	strb	r3, [r2, #0]
}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b003      	add	sp, #12
 8001cc8:	bd90      	pop	{r4, r7, pc}
	...

08001ccc <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	23d0      	movs	r3, #208	@ 0xd0
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	58d2      	ldr	r2, [r2, r3]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d86e      	bhi.n	8001dc2 <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e05e      	b.n	8001da8 <_ZN6WS281217do_forwardRewriteEv+0xdc>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	23d0      	movs	r3, #208	@ 0xd0
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	58d2      	ldr	r2, [r2, r3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	189b      	adds	r3, r3, r2
 8001cfa:	18cb      	adds	r3, r1, r3
 8001cfc:	330d      	adds	r3, #13
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2207      	movs	r2, #7
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	4119      	asrs	r1, r3
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d001      	beq.n	8001d16 <_ZN6WS281217do_forwardRewriteEv+0x4a>
 8001d12:	200a      	movs	r0, #10
 8001d14:	e000      	b.n	8001d18 <_ZN6WS281217do_forwardRewriteEv+0x4c>
 8001d16:	2005      	movs	r0, #5
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4940      	ldr	r1, [pc, #256]	@ (8001e1c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	18d3      	adds	r3, r2, r3
 8001d20:	185b      	adds	r3, r3, r1
 8001d22:	1c02      	adds	r2, r0, #0
 8001d24:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	23d0      	movs	r3, #208	@ 0xd0
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	58d2      	ldr	r2, [r2, r3]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	0013      	movs	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	189b      	adds	r3, r3, r2
 8001d36:	18cb      	adds	r3, r1, r3
 8001d38:	330c      	adds	r3, #12
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2207      	movs	r2, #7
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4119      	asrs	r1, r3
 8001d46:	000b      	movs	r3, r1
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d001      	beq.n	8001d52 <_ZN6WS281217do_forwardRewriteEv+0x86>
 8001d4e:	200a      	movs	r0, #10
 8001d50:	e000      	b.n	8001d54 <_ZN6WS281217do_forwardRewriteEv+0x88>
 8001d52:	2005      	movs	r0, #5
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3308      	adds	r3, #8
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4930      	ldr	r1, [pc, #192]	@ (8001e1c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	185b      	adds	r3, r3, r1
 8001d60:	1c02      	adds	r2, r0, #0
 8001d62:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	23d0      	movs	r3, #208	@ 0xd0
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	58d2      	ldr	r2, [r2, r3]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	0013      	movs	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	189b      	adds	r3, r3, r2
 8001d74:	18cb      	adds	r3, r1, r3
 8001d76:	330e      	adds	r3, #14
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4119      	asrs	r1, r3
 8001d84:	000b      	movs	r3, r1
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d001      	beq.n	8001d90 <_ZN6WS281217do_forwardRewriteEv+0xc4>
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	e000      	b.n	8001d92 <_ZN6WS281217do_forwardRewriteEv+0xc6>
 8001d90:	2005      	movs	r0, #5
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3310      	adds	r3, #16
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4920      	ldr	r1, [pc, #128]	@ (8001e1c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001d9a:	18d3      	adds	r3, r2, r3
 8001d9c:	185b      	adds	r3, r3, r1
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b07      	cmp	r3, #7
 8001dac:	d99d      	bls.n	8001cea <_ZN6WS281217do_forwardRewriteEv+0x1e>
        }
        wr_buf_p++;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	23d0      	movs	r3, #208	@ 0xd0
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	58d3      	ldr	r3, [r2, r3]
 8001db6:	1c59      	adds	r1, r3, #1
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	23d0      	movs	r3, #208	@ 0xd0
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 8001dc0:	e028      	b.n	8001e14 <_ZN6WS281217do_forwardRewriteEv+0x148>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	23d0      	movs	r3, #208	@ 0xd0
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	58d2      	ldr	r2, [r2, r3]
 8001dca:	2381      	movs	r3, #129	@ 0x81
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d820      	bhi.n	8001e14 <_ZN6WS281217do_forwardRewriteEv+0x148>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 8001dd2:	230b      	movs	r3, #11
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e00d      	b.n	8001df8 <_ZN6WS281217do_forwardRewriteEv+0x12c>
 8001ddc:	200b      	movs	r0, #11
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	185b      	adds	r3, r3, r1
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	183b      	adds	r3, r7, r0
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	3201      	adds	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	230b      	movs	r3, #11
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b17      	cmp	r3, #23
 8001e00:	d9ec      	bls.n	8001ddc <_ZN6WS281217do_forwardRewriteEv+0x110>
        wr_buf_p++;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	23d0      	movs	r3, #208	@ 0xd0
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	58d3      	ldr	r3, [r2, r3]
 8001e0a:	1c59      	adds	r1, r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	23d0      	movs	r3, #208	@ 0xd0
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	50d1      	str	r1, [r2, r3]
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b004      	add	sp, #16
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	0000030f 	.word	0x0000030f

08001e20 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	23d0      	movs	r3, #208	@ 0xd0
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	58d2      	ldr	r2, [r2, r3]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d86f      	bhi.n	8001f18 <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e05f      	b.n	8001efe <_ZN6WS281214do_backRewriteEv+0xde>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	23d0      	movs	r3, #208	@ 0xd0
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	58d2      	ldr	r2, [r2, r3]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	0013      	movs	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	189b      	adds	r3, r3, r2
 8001e4e:	18cb      	adds	r3, r1, r3
 8001e50:	330d      	adds	r3, #13
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	0019      	movs	r1, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2207      	movs	r2, #7
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4119      	asrs	r1, r3
 8001e5e:	000b      	movs	r3, r1
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d001      	beq.n	8001e6a <_ZN6WS281214do_backRewriteEv+0x4a>
 8001e66:	200a      	movs	r0, #10
 8001e68:	e000      	b.n	8001e6c <_ZN6WS281214do_backRewriteEv+0x4c>
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3318      	adds	r3, #24
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4947      	ldr	r1, [pc, #284]	@ (8001f90 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	185b      	adds	r3, r3, r1
 8001e78:	1c02      	adds	r2, r0, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	23d0      	movs	r3, #208	@ 0xd0
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	58d2      	ldr	r2, [r2, r3]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	0013      	movs	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	18cb      	adds	r3, r1, r3
 8001e8e:	330c      	adds	r3, #12
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	0019      	movs	r1, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2207      	movs	r2, #7
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4119      	asrs	r1, r3
 8001e9c:	000b      	movs	r3, r1
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d001      	beq.n	8001ea8 <_ZN6WS281214do_backRewriteEv+0x88>
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	e000      	b.n	8001eaa <_ZN6WS281214do_backRewriteEv+0x8a>
 8001ea8:	2005      	movs	r0, #5
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3320      	adds	r3, #32
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4937      	ldr	r1, [pc, #220]	@ (8001f90 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001eb2:	18d3      	adds	r3, r2, r3
 8001eb4:	185b      	adds	r3, r3, r1
 8001eb6:	1c02      	adds	r2, r0, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	23d0      	movs	r3, #208	@ 0xd0
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	58d2      	ldr	r2, [r2, r3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	0013      	movs	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	189b      	adds	r3, r3, r2
 8001eca:	18cb      	adds	r3, r1, r3
 8001ecc:	330e      	adds	r3, #14
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4119      	asrs	r1, r3
 8001eda:	000b      	movs	r3, r1
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d001      	beq.n	8001ee6 <_ZN6WS281214do_backRewriteEv+0xc6>
 8001ee2:	200a      	movs	r0, #10
 8001ee4:	e000      	b.n	8001ee8 <_ZN6WS281214do_backRewriteEv+0xc8>
 8001ee6:	2005      	movs	r0, #5
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3328      	adds	r3, #40	@ 0x28
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4928      	ldr	r1, [pc, #160]	@ (8001f90 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001ef0:	18d3      	adds	r3, r2, r3
 8001ef2:	185b      	adds	r3, r3, r1
 8001ef4:	1c02      	adds	r2, r0, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3301      	adds	r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	d99c      	bls.n	8001e3e <_ZN6WS281214do_backRewriteEv+0x1e>
        }
        wr_buf_p++;
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	23d0      	movs	r3, #208	@ 0xd0
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	58d3      	ldr	r3, [r2, r3]
 8001f0c:	1c59      	adds	r1, r3, #1
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	23d0      	movs	r3, #208	@ 0xd0
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 8001f16:	e036      	b.n	8001f86 <_ZN6WS281214do_backRewriteEv+0x166>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	23d0      	movs	r3, #208	@ 0xd0
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	58d2      	ldr	r2, [r2, r3]
 8001f20:	2381      	movs	r3, #129	@ 0x81
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d821      	bhi.n	8001f6c <_ZN6WS281214do_backRewriteEv+0x14c>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 8001f28:	230b      	movs	r3, #11
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2218      	movs	r2, #24
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e00d      	b.n	8001f4e <_ZN6WS281214do_backRewriteEv+0x12e>
 8001f32:	200b      	movs	r0, #11
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4915      	ldr	r1, [pc, #84]	@ (8001f90 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	185b      	adds	r3, r3, r1
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	183b      	adds	r3, r7, r0
 8001f46:	781a      	ldrb	r2, [r3, #0]
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	3201      	adds	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	230b      	movs	r3, #11
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f56:	d9ec      	bls.n	8001f32 <_ZN6WS281214do_backRewriteEv+0x112>
        wr_buf_p++;
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	23d0      	movs	r3, #208	@ 0xd0
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	58d3      	ldr	r3, [r2, r3]
 8001f60:	1c59      	adds	r1, r3, #1
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	23d0      	movs	r3, #208	@ 0xd0
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	50d1      	str	r1, [r2, r3]
}
 8001f6a:	e00c      	b.n	8001f86 <_ZN6WS281214do_backRewriteEv+0x166>
        wr_buf_p = 0;
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	23d0      	movs	r3, #208	@ 0xd0
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	2100      	movs	r1, #0
 8001f74:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0019      	movs	r1, r3
 8001f80:	0010      	movs	r0, r2
 8001f82:	f001 fdbd 	bl	8003b00 <HAL_TIM_PWM_Stop_DMA>
}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	0000030f 	.word	0x0000030f

08001f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f94:	480d      	ldr	r0, [pc, #52]	@ (8001fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f98:	f7ff fcd6 	bl	8001948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	@ (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fc2:	f003 fbc9 	bl	8005758 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fc6:	f7fe ffb5 	bl	8000f34 <main>

08001fca <LoopForever>:

LoopForever:
  b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   r0, =_estack
 8001fcc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fd8:	080058a4 	.word	0x080058a4
  ldr r2, =_sbss
 8001fdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fe0:	200005dc 	.word	0x200005dc

08001fe4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_Init+0x3c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_Init+0x3c>)
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	0049      	lsls	r1, r1, #1
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002002:	2003      	movs	r0, #3
 8002004:	f000 f810 	bl	8002028 <HAL_InitTick>
 8002008:	1e03      	subs	r3, r0, #0
 800200a:	d003      	beq.n	8002014 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800200c:	1dfb      	adds	r3, r7, #7
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e001      	b.n	8002018 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff fb3e 	bl	8001694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002018:	1dfb      	adds	r3, r7, #7
 800201a:	781b      	ldrb	r3, [r3, #0]
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002030:	230f      	movs	r3, #15
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_InitTick+0x88>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d02b      	beq.n	8002098 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002040:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <HAL_InitTick+0x8c>)
 8002042:	681c      	ldr	r4, [r3, #0]
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_InitTick+0x88>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	0019      	movs	r1, r3
 800204a:	23fa      	movs	r3, #250	@ 0xfa
 800204c:	0098      	lsls	r0, r3, #2
 800204e:	f7fe f857 	bl	8000100 <__udivsi3>
 8002052:	0003      	movs	r3, r0
 8002054:	0019      	movs	r1, r3
 8002056:	0020      	movs	r0, r4
 8002058:	f7fe f852 	bl	8000100 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	0018      	movs	r0, r3
 8002060:	f000 f93d 	bl	80022de <HAL_SYSTICK_Config>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d112      	bne.n	800208e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d80a      	bhi.n	8002084 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	2301      	movs	r3, #1
 8002072:	425b      	negs	r3, r3
 8002074:	2200      	movs	r2, #0
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f90c 	bl	8002294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_InitTick+0x90>)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e00d      	b.n	80020a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002084:	230f      	movs	r3, #15
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e008      	b.n	80020a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800208e:	230f      	movs	r3, #15
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e003      	b.n	80020a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002098:	230f      	movs	r3, #15
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020a0:	230f      	movs	r3, #15
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b005      	add	sp, #20
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_IncTick+0x1c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	001a      	movs	r2, r3
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_IncTick+0x20>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	18d2      	adds	r2, r2, r3
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_IncTick+0x20>)
 80020ce:	601a      	str	r2, [r3, #0]
}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	20000008 	.word	0x20000008
 80020dc:	200005d8 	.word	0x200005d8

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <HAL_GetTick+0x10>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	200005d8 	.word	0x200005d8

080020f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_Delay+0x44>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	001a      	movs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	189b      	adds	r3, r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	f7ff ffe0 	bl	80020e0 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f7      	bhi.n	800211c <HAL_Delay+0x28>
  {
  }
}
 800212c:	46c0      	nop			@ (mov r8, r8)
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			@ (mov r8, r8)
 8002138:	20000008 	.word	0x20000008

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	0002      	movs	r2, r0
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002148:	1dfb      	adds	r3, r7, #7
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b7f      	cmp	r3, #127	@ 0x7f
 800214e:	d809      	bhi.n	8002164 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	001a      	movs	r2, r3
 8002156:	231f      	movs	r3, #31
 8002158:	401a      	ands	r2, r3
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <__NVIC_EnableIRQ+0x30>)
 800215c:	2101      	movs	r1, #1
 800215e:	4091      	lsls	r1, r2
 8002160:	000a      	movs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002164:	46c0      	nop			@ (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	0002      	movs	r2, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b7f      	cmp	r3, #127	@ 0x7f
 8002184:	d828      	bhi.n	80021d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002186:	4a2f      	ldr	r2, [pc, #188]	@ (8002244 <__NVIC_SetPriority+0xd4>)
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b25b      	sxtb	r3, r3
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	33c0      	adds	r3, #192	@ 0xc0
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	589b      	ldr	r3, [r3, r2]
 8002196:	1dfa      	adds	r2, r7, #7
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	0011      	movs	r1, r2
 800219c:	2203      	movs	r2, #3
 800219e:	400a      	ands	r2, r1
 80021a0:	00d2      	lsls	r2, r2, #3
 80021a2:	21ff      	movs	r1, #255	@ 0xff
 80021a4:	4091      	lsls	r1, r2
 80021a6:	000a      	movs	r2, r1
 80021a8:	43d2      	mvns	r2, r2
 80021aa:	401a      	ands	r2, r3
 80021ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	22ff      	movs	r2, #255	@ 0xff
 80021b4:	401a      	ands	r2, r3
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	0018      	movs	r0, r3
 80021bc:	2303      	movs	r3, #3
 80021be:	4003      	ands	r3, r0
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021c4:	481f      	ldr	r0, [pc, #124]	@ (8002244 <__NVIC_SetPriority+0xd4>)
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	430a      	orrs	r2, r1
 80021d0:	33c0      	adds	r3, #192	@ 0xc0
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021d6:	e031      	b.n	800223c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <__NVIC_SetPriority+0xd8>)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	0019      	movs	r1, r3
 80021e0:	230f      	movs	r3, #15
 80021e2:	400b      	ands	r3, r1
 80021e4:	3b08      	subs	r3, #8
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3306      	adds	r3, #6
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	3304      	adds	r3, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1dfa      	adds	r2, r7, #7
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	0011      	movs	r1, r2
 80021f8:	2203      	movs	r2, #3
 80021fa:	400a      	ands	r2, r1
 80021fc:	00d2      	lsls	r2, r2, #3
 80021fe:	21ff      	movs	r1, #255	@ 0xff
 8002200:	4091      	lsls	r1, r2
 8002202:	000a      	movs	r2, r1
 8002204:	43d2      	mvns	r2, r2
 8002206:	401a      	ands	r2, r3
 8002208:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	22ff      	movs	r2, #255	@ 0xff
 8002210:	401a      	ands	r2, r3
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	0018      	movs	r0, r3
 8002218:	2303      	movs	r3, #3
 800221a:	4003      	ands	r3, r0
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002220:	4809      	ldr	r0, [pc, #36]	@ (8002248 <__NVIC_SetPriority+0xd8>)
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	001c      	movs	r4, r3
 8002228:	230f      	movs	r3, #15
 800222a:	4023      	ands	r3, r4
 800222c:	3b08      	subs	r3, #8
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	430a      	orrs	r2, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	18c3      	adds	r3, r0, r3
 8002238:	3304      	adds	r3, #4
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b003      	add	sp, #12
 8002242:	bd90      	pop	{r4, r7, pc}
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1e5a      	subs	r2, r3, #1
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	045b      	lsls	r3, r3, #17
 800225c:	429a      	cmp	r2, r3
 800225e:	d301      	bcc.n	8002264 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002260:	2301      	movs	r3, #1
 8002262:	e010      	b.n	8002286 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <SysTick_Config+0x44>)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	3a01      	subs	r2, #1
 800226a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226c:	2301      	movs	r3, #1
 800226e:	425b      	negs	r3, r3
 8002270:	2103      	movs	r1, #3
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff ff7c 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <SysTick_Config+0x44>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <SysTick_Config+0x44>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b002      	add	sp, #8
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	210f      	movs	r1, #15
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	1c02      	adds	r2, r0, #0
 80022a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	0011      	movs	r1, r2
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	0002      	movs	r2, r0
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff ff33 	bl	800213c <__NVIC_EnableIRQ>
}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff ffaf 	bl	800224c <SysTick_Config>
 80022ee:	0003      	movs	r3, r0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e077      	b.n	80023fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3d      	ldr	r2, [pc, #244]	@ (8002404 <HAL_DMA_Init+0x10c>)
 8002310:	4694      	mov	ip, r2
 8002312:	4463      	add	r3, ip
 8002314:	2114      	movs	r1, #20
 8002316:	0018      	movs	r0, r3
 8002318:	f7fd fef2 	bl	8000100 <__udivsi3>
 800231c:	0003      	movs	r3, r0
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2225      	movs	r2, #37	@ 0x25
 8002328:	2102      	movs	r1, #2
 800232a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4934      	ldr	r1, [pc, #208]	@ (8002408 <HAL_DMA_Init+0x110>)
 8002338:	400a      	ands	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fa2b 	bl	80027d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	01db      	lsls	r3, r3, #7
 8002382:	429a      	cmp	r2, r3
 8002384:	d102      	bne.n	800238c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002394:	213f      	movs	r1, #63	@ 0x3f
 8002396:	400a      	ands	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d011      	beq.n	80023d0 <HAL_DMA_Init+0xd8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d80d      	bhi.n	80023d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fa36 	bl	8002828 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e008      	b.n	80023e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2225      	movs	r2, #37	@ 0x25
 80023ec:	2101      	movs	r1, #1
 80023ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2224      	movs	r2, #36	@ 0x24
 80023f4:	2100      	movs	r1, #0
 80023f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	bffdfff8 	.word	0xbffdfff8
 8002408:	ffff800f 	.word	0xffff800f

0800240c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241a:	2317      	movs	r3, #23
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2224      	movs	r2, #36	@ 0x24
 8002426:	5c9b      	ldrb	r3, [r3, r2]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Start_IT+0x24>
 800242c:	2302      	movs	r3, #2
 800242e:	e06f      	b.n	8002510 <HAL_DMA_Start_IT+0x104>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2224      	movs	r2, #36	@ 0x24
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2225      	movs	r2, #37	@ 0x25
 800243c:	5c9b      	ldrb	r3, [r3, r2]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	d157      	bne.n	80024f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2225      	movs	r2, #37	@ 0x25
 8002448:	2102      	movs	r1, #2
 800244a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	438a      	bics	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f971 	bl	8002750 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	210e      	movs	r1, #14
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e00f      	b.n	80024a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2104      	movs	r1, #4
 8002494:	438a      	bics	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	210a      	movs	r1, #10
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	025b      	lsls	r3, r3, #9
 80024b2:	4013      	ands	r3, r2
 80024b4:	d008      	beq.n	80024c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	2180      	movs	r1, #128	@ 0x80
 80024c2:	0049      	lsls	r1, r1, #1
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024da:	2180      	movs	r1, #128	@ 0x80
 80024dc:	0049      	lsls	r1, r1, #1
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	430a      	orrs	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e00a      	b.n	800250a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2224      	movs	r2, #36	@ 0x24
 80024fe:	2100      	movs	r1, #0
 8002500:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002502:	2317      	movs	r3, #23
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800250a:	2317      	movs	r3, #23
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	b006      	add	sp, #24
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002520:	210f      	movs	r1, #15
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2225      	movs	r2, #37	@ 0x25
 800252c:	5c9b      	ldrb	r3, [r3, r2]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d006      	beq.n	8002542 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e049      	b.n	80025d6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	210e      	movs	r1, #14
 800254e:	438a      	bics	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	438a      	bics	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	491d      	ldr	r1, [pc, #116]	@ (80025e4 <HAL_DMA_Abort_IT+0xcc>)
 800256e:	400a      	ands	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_DMA_Abort_IT+0xd0>)
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	221c      	movs	r2, #28
 800257c:	4013      	ands	r3, r2
 800257e:	2201      	movs	r2, #1
 8002580:	409a      	lsls	r2, r3
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_DMA_Abort_IT+0xd0>)
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002590:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a4:	490f      	ldr	r1, [pc, #60]	@ (80025e4 <HAL_DMA_Abort_IT+0xcc>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80025b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2225      	movs	r2, #37	@ 0x25
 80025b8:	2101      	movs	r1, #1
 80025ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	@ 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	0010      	movs	r0, r2
 80025d4:	4798      	blx	r3
    }
  }
  return status;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fffffeff 	.word	0xfffffeff
 80025e8:	40020000 	.word	0x40020000

080025ec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80025f4:	4b55      	ldr	r3, [pc, #340]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	221c      	movs	r2, #28
 8002608:	4013      	ands	r3, r2
 800260a:	2204      	movs	r2, #4
 800260c:	409a      	lsls	r2, r3
 800260e:	0013      	movs	r3, r2
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_IRQHandler+0x7a>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2204      	movs	r2, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d023      	beq.n	8002666 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2220      	movs	r2, #32
 8002626:	4013      	ands	r3, r2
 8002628:	d107      	bne.n	800263a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2104      	movs	r1, #4
 8002636:	438a      	bics	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800263a:	4b44      	ldr	r3, [pc, #272]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	221c      	movs	r2, #28
 8002644:	4013      	ands	r3, r2
 8002646:	2204      	movs	r2, #4
 8002648:	409a      	lsls	r2, r3
 800264a:	4b40      	ldr	r3, [pc, #256]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	2b00      	cmp	r3, #0
 8002656:	d100      	bne.n	800265a <HAL_DMA_IRQHandler+0x6e>
 8002658:	e073      	b.n	8002742 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	0010      	movs	r0, r2
 8002662:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002664:	e06d      	b.n	8002742 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	221c      	movs	r2, #28
 800266c:	4013      	ands	r3, r2
 800266e:	2202      	movs	r2, #2
 8002670:	409a      	lsls	r2, r3
 8002672:	0013      	movs	r3, r2
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	d02e      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xec>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2202      	movs	r2, #2
 800267e:	4013      	ands	r3, r2
 8002680:	d02a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2220      	movs	r2, #32
 800268a:	4013      	ands	r3, r2
 800268c:	d10b      	bne.n	80026a6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	210a      	movs	r1, #10
 800269a:	438a      	bics	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2225      	movs	r2, #37	@ 0x25
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80026a6:	4b29      	ldr	r3, [pc, #164]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	221c      	movs	r2, #28
 80026b0:	4013      	ands	r3, r2
 80026b2:	2202      	movs	r2, #2
 80026b4:	409a      	lsls	r2, r3
 80026b6:	4b25      	ldr	r3, [pc, #148]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d03a      	beq.n	8002742 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	0010      	movs	r0, r2
 80026d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80026d6:	e034      	b.n	8002742 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	221c      	movs	r2, #28
 80026de:	4013      	ands	r3, r2
 80026e0:	2208      	movs	r2, #8
 80026e2:	409a      	lsls	r2, r3
 80026e4:	0013      	movs	r3, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	d02b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x158>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2208      	movs	r2, #8
 80026f0:	4013      	ands	r3, r2
 80026f2:	d027      	beq.n	8002744 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	210e      	movs	r1, #14
 8002700:	438a      	bics	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	221c      	movs	r2, #28
 800270e:	4013      	ands	r3, r2
 8002710:	2201      	movs	r2, #1
 8002712:	409a      	lsls	r2, r3
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_DMA_IRQHandler+0x160>)
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2225      	movs	r2, #37	@ 0x25
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	@ 0x24
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	0010      	movs	r0, r2
 8002740:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	46c0      	nop			@ (mov r8, r8)
}
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40020000 	.word	0x40020000

08002750 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002766:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002778:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <DMA_SetConfig+0x7c>)
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	221c      	movs	r2, #28
 8002784:	4013      	ands	r3, r2
 8002786:	2201      	movs	r2, #1
 8002788:	409a      	lsls	r2, r3
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <DMA_SetConfig+0x7c>)
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b10      	cmp	r3, #16
 800279e:	d108      	bne.n	80027b2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027b0:	e007      	b.n	80027c2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	60da      	str	r2, [r3, #12]
}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	40020000 	.word	0x40020000

080027d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	4a10      	ldr	r2, [pc, #64]	@ (8002820 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80027e0:	4694      	mov	ip, r2
 80027e2:	4463      	add	r3, ip
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	001a      	movs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	001a      	movs	r2, r3
 80027f2:	23ff      	movs	r3, #255	@ 0xff
 80027f4:	4013      	ands	r3, r2
 80027f6:	3b08      	subs	r3, #8
 80027f8:	2114      	movs	r1, #20
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fc80 	bl	8000100 <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002808:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	221f      	movs	r2, #31
 800280e:	4013      	ands	r3, r2
 8002810:	2201      	movs	r2, #1
 8002812:	409a      	lsls	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	10008200 	.word	0x10008200
 8002824:	40020880 	.word	0x40020880

08002828 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	223f      	movs	r2, #63	@ 0x3f
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800283e:	4694      	mov	ip, r2
 8002840:	4463      	add	r3, ip
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	001a      	movs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a07      	ldr	r2, [pc, #28]	@ (800286c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3b01      	subs	r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	4013      	ands	r3, r2
 8002858:	2201      	movs	r2, #1
 800285a:	409a      	lsls	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002860:	46c0      	nop			@ (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}
 8002868:	1000823f 	.word	0x1000823f
 800286c:	40020940 	.word	0x40020940

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287e:	e147      	b.n	8002b10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4091      	lsls	r1, r2
 800288a:	000a      	movs	r2, r1
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d100      	bne.n	8002898 <HAL_GPIO_Init+0x28>
 8002896:	e138      	b.n	8002b0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2203      	movs	r2, #3
 800289e:	4013      	ands	r3, r2
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d005      	beq.n	80028b0 <HAL_GPIO_Init+0x40>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	409a      	lsls	r2, r3
 80028be:	0013      	movs	r3, r2
 80028c0:	43da      	mvns	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	409a      	lsls	r2, r3
 80028d2:	0013      	movs	r3, r2
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028e6:	2201      	movs	r2, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	43da      	mvns	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	2201      	movs	r2, #1
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
 8002904:	0013      	movs	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2203      	movs	r2, #3
 8002918:	4013      	ands	r3, r2
 800291a:	2b03      	cmp	r3, #3
 800291c:	d017      	beq.n	800294e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	409a      	lsls	r2, r3
 800292c:	0013      	movs	r3, r2
 800292e:	43da      	mvns	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	4013      	ands	r3, r2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d123      	bne.n	80029a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	58d3      	ldr	r3, [r2, r3]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2207      	movs	r2, #7
 800296c:	4013      	ands	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	409a      	lsls	r2, r3
 8002974:	0013      	movs	r3, r2
 8002976:	43da      	mvns	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2107      	movs	r1, #7
 8002986:	400b      	ands	r3, r1
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	409a      	lsls	r2, r3
 800298c:	0013      	movs	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	6939      	ldr	r1, [r7, #16]
 80029a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	43da      	mvns	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	401a      	ands	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	23c0      	movs	r3, #192	@ 0xc0
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d100      	bne.n	80029e4 <HAL_GPIO_Init+0x174>
 80029e2:	e092      	b.n	8002b0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80029e4:	4a50      	ldr	r2, [pc, #320]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3318      	adds	r3, #24
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	589b      	ldr	r3, [r3, r2]
 80029f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2203      	movs	r2, #3
 80029f6:	4013      	ands	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	220f      	movs	r2, #15
 80029fc:	409a      	lsls	r2, r3
 80029fe:	0013      	movs	r3, r2
 8002a00:	43da      	mvns	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	23a0      	movs	r3, #160	@ 0xa0
 8002a0c:	05db      	lsls	r3, r3, #23
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x1ca>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a45      	ldr	r2, [pc, #276]	@ (8002b2c <HAL_GPIO_Init+0x2bc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x1c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a44      	ldr	r2, [pc, #272]	@ (8002b30 <HAL_GPIO_Init+0x2c0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x1c2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a43      	ldr	r2, [pc, #268]	@ (8002b34 <HAL_GPIO_Init+0x2c4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x1be>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x1cc>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x1cc>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x1cc>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x1cc>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	400a      	ands	r2, r1
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	4093      	lsls	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a4c:	4936      	ldr	r1, [pc, #216]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3318      	adds	r3, #24
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a5a:	4b33      	ldr	r3, [pc, #204]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	035b      	lsls	r3, r3, #13
 8002a72:	4013      	ands	r3, r2
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a84:	4b28      	ldr	r3, [pc, #160]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	039b      	lsls	r3, r3, #14
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aae:	4a1e      	ldr	r2, [pc, #120]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002ab0:	2384      	movs	r3, #132	@ 0x84
 8002ab2:	58d3      	ldr	r3, [r2, r3]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	029b      	lsls	r3, r3, #10
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad4:	4914      	ldr	r1, [pc, #80]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002ad6:	2284      	movs	r2, #132	@ 0x84
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	58d3      	ldr	r3, [r2, r3]
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	025b      	lsls	r3, r3, #9
 8002af6:	4013      	ands	r3, r2
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b02:	4909      	ldr	r1, [pc, #36]	@ (8002b28 <HAL_GPIO_Init+0x2b8>)
 8002b04:	2280      	movs	r2, #128	@ 0x80
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	40da      	lsrs	r2, r3
 8002b18:	1e13      	subs	r3, r2, #0
 8002b1a:	d000      	beq.n	8002b1e <HAL_GPIO_Init+0x2ae>
 8002b1c:	e6b0      	b.n	8002880 <HAL_GPIO_Init+0x10>
  }
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b006      	add	sp, #24
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021800 	.word	0x40021800
 8002b2c:	50000400 	.word	0x50000400
 8002b30:	50000800 	.word	0x50000800
 8002b34:	50000c00 	.word	0x50000c00

08002b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	000a      	movs	r2, r1
 8002b42:	1cbb      	adds	r3, r7, #2
 8002b44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	1cba      	adds	r2, r7, #2
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d004      	beq.n	8002b5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b52:	230f      	movs	r3, #15
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e003      	b.n	8002b64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b004      	add	sp, #16
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	0008      	movs	r0, r1
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	1cbb      	adds	r3, r7, #2
 8002b80:	1c02      	adds	r2, r0, #0
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	1c7b      	adds	r3, r7, #1
 8002b86:	1c0a      	adds	r2, r1, #0
 8002b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b8a:	1c7b      	adds	r3, r7, #1
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b92:	1cbb      	adds	r3, r7, #2
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b9a:	e003      	b.n	8002ba4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9c:	1cbb      	adds	r3, r7, #2
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d11f      	bne.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4912      	ldr	r1, [pc, #72]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fd fa8e 	bl	8000100 <__udivsi3>
 8002be4:	0003      	movs	r3, r0
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bea:	e008      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e001      	b.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e009      	b.n	8002c12 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfe:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	401a      	ands	r2, r3
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0ed      	beq.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	fffff9ff 	.word	0xfffff9ff
 8002c24:	20000000 	.word	0x20000000
 8002c28:	000f4240 	.word	0x000f4240

08002c2c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	23e0      	movs	r3, #224	@ 0xe0
 8002c36:	01db      	lsls	r3, r3, #7
 8002c38:	4013      	ands	r3, r2
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e2f3      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d100      	bne.n	8002c62 <HAL_RCC_OscConfig+0x1e>
 8002c60:	e07c      	b.n	8002d5c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c62:	4bc3      	ldr	r3, [pc, #780]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2238      	movs	r2, #56	@ 0x38
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c6c:	4bc0      	ldr	r3, [pc, #768]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2203      	movs	r2, #3
 8002c72:	4013      	ands	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_OscConfig+0x3e>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	4bb9      	ldr	r3, [pc, #740]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	4013      	ands	r3, r2
 8002c92:	d062      	beq.n	8002d5a <HAL_RCC_OscConfig+0x116>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d15e      	bne.n	8002d5a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e2ce      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_OscConfig+0x78>
 8002cac:	4bb0      	ldr	r3, [pc, #704]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4baf      	ldr	r3, [pc, #700]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cb2:	2180      	movs	r1, #128	@ 0x80
 8002cb4:	0249      	lsls	r1, r1, #9
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e020      	b.n	8002cfe <HAL_RCC_OscConfig+0xba>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	23a0      	movs	r3, #160	@ 0xa0
 8002cc2:	02db      	lsls	r3, r3, #11
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_RCC_OscConfig+0xa2>
 8002cc8:	4ba9      	ldr	r3, [pc, #676]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4ba8      	ldr	r3, [pc, #672]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	2180      	movs	r1, #128	@ 0x80
 8002cd0:	02c9      	lsls	r1, r1, #11
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	4ba6      	ldr	r3, [pc, #664]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4ba5      	ldr	r3, [pc, #660]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	2180      	movs	r1, #128	@ 0x80
 8002cde:	0249      	lsls	r1, r1, #9
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0xba>
 8002ce6:	4ba2      	ldr	r3, [pc, #648]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4ba1      	ldr	r3, [pc, #644]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cec:	49a1      	ldr	r1, [pc, #644]	@ (8002f74 <HAL_RCC_OscConfig+0x330>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	4b9f      	ldr	r3, [pc, #636]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002cf8:	499f      	ldr	r1, [pc, #636]	@ (8002f78 <HAL_RCC_OscConfig+0x334>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d014      	beq.n	8002d30 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7ff f9eb 	bl	80020e0 <HAL_GetTick>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff f9e6 	bl	80020e0 <HAL_GetTick>
 8002d14:	0002      	movs	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e28d      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d22:	4b93      	ldr	r3, [pc, #588]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	029b      	lsls	r3, r3, #10
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xcc>
 8002d2e:	e015      	b.n	8002d5c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f9d6 	bl	80020e0 <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3a:	f7ff f9d1 	bl	80020e0 <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	@ 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e278      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4c:	4b88      	ldr	r3, [pc, #544]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	029b      	lsls	r3, r3, #10
 8002d54:	4013      	ands	r3, r2
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCC_OscConfig+0xf6>
 8002d58:	e000      	b.n	8002d5c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	d100      	bne.n	8002d68 <HAL_RCC_OscConfig+0x124>
 8002d66:	e099      	b.n	8002e9c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d68:	4b81      	ldr	r3, [pc, #516]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2238      	movs	r2, #56	@ 0x38
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d72:	4b7f      	ldr	r3, [pc, #508]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2203      	movs	r2, #3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b10      	cmp	r3, #16
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_OscConfig+0x144>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d002      	beq.n	8002d8e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d135      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8e:	4b78      	ldr	r3, [pc, #480]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4013      	ands	r3, r2
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x162>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e24b      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a74      	ldr	r2, [pc, #464]	@ (8002f7c <HAL_RCC_OscConfig+0x338>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	021a      	lsls	r2, r3, #8
 8002db6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d112      	bne.n	8002de8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002f80 <HAL_RCC_OscConfig+0x33c>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dd6:	4b66      	ldr	r3, [pc, #408]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0adb      	lsrs	r3, r3, #11
 8002ddc:	2207      	movs	r2, #7
 8002dde:	4013      	ands	r3, r2
 8002de0:	4a68      	ldr	r2, [pc, #416]	@ (8002f84 <HAL_RCC_OscConfig+0x340>)
 8002de2:	40da      	lsrs	r2, r3
 8002de4:	4b68      	ldr	r3, [pc, #416]	@ (8002f88 <HAL_RCC_OscConfig+0x344>)
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002de8:	4b68      	ldr	r3, [pc, #416]	@ (8002f8c <HAL_RCC_OscConfig+0x348>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff f91b 	bl	8002028 <HAL_InitTick>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d051      	beq.n	8002e9a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e221      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d030      	beq.n	8002e64 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e02:	4b5b      	ldr	r3, [pc, #364]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5e      	ldr	r2, [pc, #376]	@ (8002f80 <HAL_RCC_OscConfig+0x33c>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	4b57      	ldr	r3, [pc, #348]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e16:	4b56      	ldr	r3, [pc, #344]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b55      	ldr	r3, [pc, #340]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	0049      	lsls	r1, r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7ff f95c 	bl	80020e0 <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7ff f957 	bl	80020e0 <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1fe      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b48      	ldr	r3, [pc, #288]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a4a      	ldr	r2, [pc, #296]	@ (8002f7c <HAL_RCC_OscConfig+0x338>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	4b44      	ldr	r3, [pc, #272]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	e01b      	b.n	8002e9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e64:	4b42      	ldr	r3, [pc, #264]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b41      	ldr	r3, [pc, #260]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	4949      	ldr	r1, [pc, #292]	@ (8002f90 <HAL_RCC_OscConfig+0x34c>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff f936 	bl	80020e0 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7ff f931 	bl	80020e0 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1d8      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e8c:	4b38      	ldr	r3, [pc, #224]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4013      	ands	r3, r2
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x236>
 8002e98:	e000      	b.n	8002e9c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e9a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d047      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ea6:	4b32      	ldr	r3, [pc, #200]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2238      	movs	r2, #56	@ 0x38
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b18      	cmp	r3, #24
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d03c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2f2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d138      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e1ba      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d019      	beq.n	8002f04 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ed4:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7ff f900 	bl	80020e0 <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7ff f8fb 	bl	80020e0 <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a2      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efc:	2202      	movs	r2, #2
 8002efe:	4013      	ands	r3, r2
 8002f00:	d0f1      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2a2>
 8002f02:	e018      	b.n	8002f36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f04:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002f06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7ff f8e6 	bl	80020e0 <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7ff f8e1 	bl	80020e0 <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e188      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d1f1      	bne.n	8002f1a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2fe>
 8002f40:	e0c6      	b.n	80030d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	231f      	movs	r3, #31
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f4a:	4b09      	ldr	r3, [pc, #36]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2238      	movs	r2, #56	@ 0x38
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d11e      	bne.n	8002f94 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_OscConfig+0x32c>)
 8002f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d100      	bne.n	8002f62 <HAL_RCC_OscConfig+0x31e>
 8002f60:	e0b6      	b.n	80030d0 <HAL_RCC_OscConfig+0x48c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d000      	beq.n	8002f6c <HAL_RCC_OscConfig+0x328>
 8002f6a:	e0b1      	b.n	80030d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e166      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	fffeffff 	.word	0xfffeffff
 8002f78:	fffbffff 	.word	0xfffbffff
 8002f7c:	ffff80ff 	.word	0xffff80ff
 8002f80:	ffffc7ff 	.word	0xffffc7ff
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004
 8002f90:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f94:	4bac      	ldr	r3, [pc, #688]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8002f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	055b      	lsls	r3, r3, #21
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x360>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x362>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4ba7      	ldr	r3, [pc, #668]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8002fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fae:	4ba6      	ldr	r3, [pc, #664]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8002fb0:	2180      	movs	r1, #128	@ 0x80
 8002fb2:	0549      	lsls	r1, r1, #21
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002fb8:	4ba3      	ldr	r3, [pc, #652]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8002fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	055b      	lsls	r3, r3, #21
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fce:	4b9f      	ldr	r3, [pc, #636]	@ (800324c <HAL_RCC_OscConfig+0x608>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d11a      	bne.n	8003010 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fda:	4b9c      	ldr	r3, [pc, #624]	@ (800324c <HAL_RCC_OscConfig+0x608>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b9b      	ldr	r3, [pc, #620]	@ (800324c <HAL_RCC_OscConfig+0x608>)
 8002fe0:	2180      	movs	r1, #128	@ 0x80
 8002fe2:	0049      	lsls	r1, r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fe8:	f7ff f87a 	bl	80020e0 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7ff f875 	bl	80020e0 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e11c      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003004:	4b91      	ldr	r3, [pc, #580]	@ (800324c <HAL_RCC_OscConfig+0x608>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x3e2>
 8003018:	4b8b      	ldr	r3, [pc, #556]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800301a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800301c:	4b8a      	ldr	r3, [pc, #552]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003024:	e01c      	b.n	8003060 <HAL_RCC_OscConfig+0x41c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x404>
 800302e:	4b86      	ldr	r3, [pc, #536]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003030:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003032:	4b85      	ldr	r3, [pc, #532]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003034:	2104      	movs	r1, #4
 8003036:	430a      	orrs	r2, r1
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
 800303a:	4b83      	ldr	r3, [pc, #524]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800303c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800303e:	4b82      	ldr	r3, [pc, #520]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003040:	2101      	movs	r1, #1
 8003042:	430a      	orrs	r2, r1
 8003044:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003046:	e00b      	b.n	8003060 <HAL_RCC_OscConfig+0x41c>
 8003048:	4b7f      	ldr	r3, [pc, #508]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800304a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800304c:	4b7e      	ldr	r3, [pc, #504]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800304e:	2101      	movs	r1, #1
 8003050:	438a      	bics	r2, r1
 8003052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003054:	4b7c      	ldr	r3, [pc, #496]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003056:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003058:	4b7b      	ldr	r3, [pc, #492]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800305a:	2104      	movs	r1, #4
 800305c:	438a      	bics	r2, r1
 800305e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d014      	beq.n	8003092 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7ff f83a 	bl	80020e0 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003070:	e009      	b.n	8003086 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7ff f835 	bl	80020e0 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a74      	ldr	r2, [pc, #464]	@ (8003250 <HAL_RCC_OscConfig+0x60c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0db      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003086:	4b70      	ldr	r3, [pc, #448]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	2202      	movs	r2, #2
 800308c:	4013      	ands	r3, r2
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x42e>
 8003090:	e013      	b.n	80030ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7ff f825 	bl	80020e0 <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309a:	e009      	b.n	80030b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7ff f820 	bl	80020e0 <HAL_GetTick>
 80030a0:	0002      	movs	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	4a6a      	ldr	r2, [pc, #424]	@ (8003250 <HAL_RCC_OscConfig+0x60c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0c6      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b0:	4b65      	ldr	r3, [pc, #404]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030ba:	231f      	movs	r3, #31
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d105      	bne.n	80030d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030c4:	4b60      	ldr	r3, [pc, #384]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80030c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80030ca:	4962      	ldr	r1, [pc, #392]	@ (8003254 <HAL_RCC_OscConfig+0x610>)
 80030cc:	400a      	ands	r2, r1
 80030ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d100      	bne.n	80030da <HAL_RCC_OscConfig+0x496>
 80030d8:	e0b0      	b.n	800323c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030da:	4b5b      	ldr	r3, [pc, #364]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2238      	movs	r2, #56	@ 0x38
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d100      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4a4>
 80030e6:	e078      	b.n	80031da <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d153      	bne.n	8003198 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f0:	4b55      	ldr	r3, [pc, #340]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b54      	ldr	r3, [pc, #336]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80030f6:	4958      	ldr	r1, [pc, #352]	@ (8003258 <HAL_RCC_OscConfig+0x614>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fff0 	bl	80020e0 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe ffeb 	bl	80020e0 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e092      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003118:	4b4b      	ldr	r3, [pc, #300]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	@ 0x80
 800311e:	049b      	lsls	r3, r3, #18
 8003120:	4013      	ands	r3, r2
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003124:	4b48      	ldr	r3, [pc, #288]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a4c      	ldr	r2, [pc, #304]	@ (800325c <HAL_RCC_OscConfig+0x618>)
 800312a:	4013      	ands	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	431a      	orrs	r2, r3
 800314c:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800314e:	430a      	orrs	r2, r1
 8003150:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003152:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b3c      	ldr	r3, [pc, #240]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003158:	2180      	movs	r1, #128	@ 0x80
 800315a:	0449      	lsls	r1, r1, #17
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003160:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4b38      	ldr	r3, [pc, #224]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	0549      	lsls	r1, r1, #21
 800316a:	430a      	orrs	r2, r1
 800316c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe ffb7 	bl	80020e0 <HAL_GetTick>
 8003172:	0003      	movs	r3, r0
 8003174:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe ffb2 	bl	80020e0 <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e059      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	049b      	lsls	r3, r3, #18
 8003192:	4013      	ands	r3, r2
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x534>
 8003196:	e051      	b.n	800323c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 800319e:	492e      	ldr	r1, [pc, #184]	@ (8003258 <HAL_RCC_OscConfig+0x614>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe ff9c 	bl	80020e0 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe ff97 	bl	80020e0 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03e      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	4b21      	ldr	r3, [pc, #132]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	049b      	lsls	r3, r3, #18
 80031c8:	4013      	ands	r3, r2
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80031cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80031d2:	4923      	ldr	r1, [pc, #140]	@ (8003260 <HAL_RCC_OscConfig+0x61c>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e030      	b.n	800323c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e02b      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80031e6:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <HAL_RCC_OscConfig+0x604>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2203      	movs	r2, #3
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d11e      	bne.n	8003238 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2270      	movs	r2, #112	@ 0x70
 80031fe:	401a      	ands	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d117      	bne.n	8003238 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	23fe      	movs	r3, #254	@ 0xfe
 800320c:	01db      	lsls	r3, r3, #7
 800320e:	401a      	ands	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d10e      	bne.n	8003238 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	23f8      	movs	r3, #248	@ 0xf8
 800321e:	039b      	lsls	r3, r3, #14
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d106      	bne.n	8003238 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	0f5b      	lsrs	r3, r3, #29
 800322e:	075a      	lsls	r2, r3, #29
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b008      	add	sp, #32
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
 8003250:	00001388 	.word	0x00001388
 8003254:	efffffff 	.word	0xefffffff
 8003258:	feffffff 	.word	0xfeffffff
 800325c:	1fc1808c 	.word	0x1fc1808c
 8003260:	effefffc 	.word	0xeffefffc

08003264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0e9      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b76      	ldr	r3, [pc, #472]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2207      	movs	r2, #7
 800327e:	4013      	ands	r3, r2
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d91e      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b73      	ldr	r3, [pc, #460]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2207      	movs	r2, #7
 800328c:	4393      	bics	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	4b70      	ldr	r3, [pc, #448]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003298:	f7fe ff22 	bl	80020e0 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032a0:	e009      	b.n	80032b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a2:	f7fe ff1d 	bl	80020e0 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003458 <HAL_RCC_ClockConfig+0x1f4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0ca      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032b6:	4b67      	ldr	r3, [pc, #412]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2207      	movs	r2, #7
 80032bc:	4013      	ands	r3, r2
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1ee      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2202      	movs	r2, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	d006      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032d8:	4b60      	ldr	r3, [pc, #384]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b5f      	ldr	r3, [pc, #380]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	21e0      	movs	r1, #224	@ 0xe0
 80032e0:	01c9      	lsls	r1, r1, #7
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e6:	4b5d      	ldr	r3, [pc, #372]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003460 <HAL_RCC_ClockConfig+0x1fc>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b59      	ldr	r3, [pc, #356]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	4013      	ands	r3, r2
 8003302:	d057      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330c:	4b53      	ldr	r3, [pc, #332]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	4013      	ands	r3, r2
 8003316:	d12b      	bne.n	8003370 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e097      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d107      	bne.n	8003334 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003324:	4b4d      	ldr	r3, [pc, #308]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	049b      	lsls	r3, r3, #18
 800332c:	4013      	ands	r3, r2
 800332e:	d11f      	bne.n	8003370 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e08b      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333c:	4b47      	ldr	r3, [pc, #284]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	2380      	movs	r3, #128	@ 0x80
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4013      	ands	r3, r2
 8003346:	d113      	bne.n	8003370 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e07f      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d106      	bne.n	8003362 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003358:	2202      	movs	r2, #2
 800335a:	4013      	ands	r3, r2
 800335c:	d108      	bne.n	8003370 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e074      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	2202      	movs	r2, #2
 8003368:	4013      	ands	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e06d      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003370:	4b3a      	ldr	r3, [pc, #232]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2207      	movs	r2, #7
 8003376:	4393      	bics	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4b37      	ldr	r3, [pc, #220]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003384:	f7fe feac 	bl	80020e0 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338c:	e009      	b.n	80033a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338e:	f7fe fea7 	bl	80020e0 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	4a2f      	ldr	r2, [pc, #188]	@ (8003458 <HAL_RCC_ClockConfig+0x1f4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e054      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b2e      	ldr	r3, [pc, #184]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2238      	movs	r2, #56	@ 0x38
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1ec      	bne.n	800338e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2207      	movs	r2, #7
 80033ba:	4013      	ands	r3, r2
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d21e      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2207      	movs	r2, #7
 80033c8:	4393      	bics	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fe84 	bl	80020e0 <HAL_GetTick>
 80033d8:	0003      	movs	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033dc:	e009      	b.n	80033f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033de:	f7fe fe7f 	bl	80020e0 <HAL_GetTick>
 80033e2:	0002      	movs	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003458 <HAL_RCC_ClockConfig+0x1f4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e02c      	b.n	800344c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033f2:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2207      	movs	r2, #7
 80033f8:	4013      	ands	r3, r2
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d1ee      	bne.n	80033de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2204      	movs	r2, #4
 8003406:	4013      	ands	r3, r2
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800340a:	4b14      	ldr	r3, [pc, #80]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <HAL_RCC_ClockConfig+0x200>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800341e:	f000 f829 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003422:	0001      	movs	r1, r0
 8003424:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	220f      	movs	r2, #15
 800342c:	401a      	ands	r2, r3
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <HAL_RCC_ClockConfig+0x204>)
 8003430:	0092      	lsls	r2, r2, #2
 8003432:	58d3      	ldr	r3, [r2, r3]
 8003434:	221f      	movs	r2, #31
 8003436:	4013      	ands	r3, r2
 8003438:	000a      	movs	r2, r1
 800343a:	40da      	lsrs	r2, r3
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_RCC_ClockConfig+0x208>)
 800343e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x20c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0018      	movs	r0, r3
 8003446:	f7fe fdef 	bl	8002028 <HAL_InitTick>
 800344a:	0003      	movs	r3, r0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40022000 	.word	0x40022000
 8003458:	00001388 	.word	0x00001388
 800345c:	40021000 	.word	0x40021000
 8003460:	fffff0ff 	.word	0xfffff0ff
 8003464:	ffff8fff 	.word	0xffff8fff
 8003468:	080057b8 	.word	0x080057b8
 800346c:	20000000 	.word	0x20000000
 8003470:	20000004 	.word	0x20000004

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347a:	4b3c      	ldr	r3, [pc, #240]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2238      	movs	r2, #56	@ 0x38
 8003480:	4013      	ands	r3, r2
 8003482:	d10f      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003484:	4b39      	ldr	r3, [pc, #228]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0adb      	lsrs	r3, r3, #11
 800348a:	2207      	movs	r2, #7
 800348c:	4013      	ands	r3, r2
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
 8003492:	0013      	movs	r3, r2
 8003494:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	4835      	ldr	r0, [pc, #212]	@ (8003570 <HAL_RCC_GetSysClockFreq+0xfc>)
 800349a:	f7fc fe31 	bl	8000100 <__udivsi3>
 800349e:	0003      	movs	r3, r0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e05d      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a4:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2238      	movs	r2, #56	@ 0x38
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003570 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e054      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b6:	4b2d      	ldr	r3, [pc, #180]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2238      	movs	r2, #56	@ 0x38
 80034bc:	4013      	ands	r3, r2
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d138      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80034c2:	4b2a      	ldr	r3, [pc, #168]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2203      	movs	r2, #3
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034cc:	4b27      	ldr	r3, [pc, #156]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	2207      	movs	r2, #7
 80034d4:	4013      	ands	r3, r2
 80034d6:	3301      	adds	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d10d      	bne.n	80034fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	4823      	ldr	r0, [pc, #140]	@ (8003570 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034e4:	f7fc fe0c 	bl	8000100 <__udivsi3>
 80034e8:	0003      	movs	r3, r0
 80034ea:	0019      	movs	r1, r3
 80034ec:	4b1f      	ldr	r3, [pc, #124]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	227f      	movs	r2, #127	@ 0x7f
 80034f4:	4013      	ands	r3, r2
 80034f6:	434b      	muls	r3, r1
 80034f8:	617b      	str	r3, [r7, #20]
        break;
 80034fa:	e00d      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	481c      	ldr	r0, [pc, #112]	@ (8003570 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003500:	f7fc fdfe 	bl	8000100 <__udivsi3>
 8003504:	0003      	movs	r3, r0
 8003506:	0019      	movs	r1, r3
 8003508:	4b18      	ldr	r3, [pc, #96]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	227f      	movs	r2, #127	@ 0x7f
 8003510:	4013      	ands	r3, r2
 8003512:	434b      	muls	r3, r1
 8003514:	617b      	str	r3, [r7, #20]
        break;
 8003516:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003518:	4b14      	ldr	r3, [pc, #80]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0f5b      	lsrs	r3, r3, #29
 800351e:	2207      	movs	r2, #7
 8003520:	4013      	ands	r3, r2
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	6978      	ldr	r0, [r7, #20]
 800352a:	f7fc fde9 	bl	8000100 <__udivsi3>
 800352e:	0003      	movs	r3, r0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e015      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003534:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2238      	movs	r2, #56	@ 0x38
 800353a:	4013      	ands	r3, r2
 800353c:	2b20      	cmp	r3, #32
 800353e:	d103      	bne.n	8003548 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003548:	4b08      	ldr	r3, [pc, #32]	@ (800356c <HAL_RCC_GetSysClockFreq+0xf8>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2238      	movs	r2, #56	@ 0x38
 800354e:	4013      	ands	r3, r2
 8003550:	2b18      	cmp	r3, #24
 8003552:	d103      	bne.n	800355c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003554:	23fa      	movs	r3, #250	@ 0xfa
 8003556:	01db      	lsls	r3, r3, #7
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	e001      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003560:	693b      	ldr	r3, [r7, #16]
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	40021000 	.word	0x40021000
 8003570:	00f42400 	.word	0x00f42400

08003574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b02      	ldr	r3, [pc, #8]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x10>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800358c:	f7ff fff2 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003590:	0004      	movs	r4, r0
 8003592:	f7ff fb4b 	bl	8002c2c <LL_RCC_GetAPB1Prescaler>
 8003596:	0003      	movs	r3, r0
 8003598:	0b1a      	lsrs	r2, r3, #12
 800359a:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	58d3      	ldr	r3, [r2, r3]
 80035a0:	221f      	movs	r2, #31
 80035a2:	4013      	ands	r3, r2
 80035a4:	40dc      	lsrs	r4, r3
 80035a6:	0023      	movs	r3, r4
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bdb0      	pop	{r4, r5, r7, pc}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	080057f8 	.word	0x080057f8

080035b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e04a      	b.n	800365c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223d      	movs	r2, #61	@ 0x3d
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	223c      	movs	r2, #60	@ 0x3c
 80035d6:	2100      	movs	r1, #0
 80035d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fe f87d 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	223d      	movs	r2, #61	@ 0x3d
 80035e6:	2102      	movs	r1, #2
 80035e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	0019      	movs	r1, r3
 80035f4:	0010      	movs	r0, r2
 80035f6:	f000 fe1f 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2248      	movs	r2, #72	@ 0x48
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	223e      	movs	r2, #62	@ 0x3e
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	223f      	movs	r2, #63	@ 0x3f
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2240      	movs	r2, #64	@ 0x40
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2241      	movs	r2, #65	@ 0x41
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2242      	movs	r2, #66	@ 0x42
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2243      	movs	r2, #67	@ 0x43
 800362e:	2101      	movs	r1, #1
 8003630:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2244      	movs	r2, #68	@ 0x44
 8003636:	2101      	movs	r1, #1
 8003638:	5499      	strb	r1, [r3, r2]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2245      	movs	r2, #69	@ 0x45
 800363e:	2101      	movs	r1, #1
 8003640:	5499      	strb	r1, [r3, r2]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2246      	movs	r2, #70	@ 0x46
 8003646:	2101      	movs	r1, #1
 8003648:	5499      	strb	r1, [r3, r2]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2247      	movs	r2, #71	@ 0x47
 800364e:	2101      	movs	r1, #1
 8003650:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	223d      	movs	r2, #61	@ 0x3d
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e04a      	b.n	800370c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	223d      	movs	r2, #61	@ 0x3d
 800367a:	5c9b      	ldrb	r3, [r3, r2]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	223c      	movs	r2, #60	@ 0x3c
 8003686:	2100      	movs	r1, #0
 8003688:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f841 	bl	8003714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	223d      	movs	r2, #61	@ 0x3d
 8003696:	2102      	movs	r1, #2
 8003698:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	0019      	movs	r1, r3
 80036a4:	0010      	movs	r0, r2
 80036a6:	f000 fdc7 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2248      	movs	r2, #72	@ 0x48
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223e      	movs	r2, #62	@ 0x3e
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	223f      	movs	r2, #63	@ 0x3f
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2240      	movs	r2, #64	@ 0x40
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2241      	movs	r2, #65	@ 0x41
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2242      	movs	r2, #66	@ 0x42
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2243      	movs	r2, #67	@ 0x43
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2244      	movs	r2, #68	@ 0x44
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2245      	movs	r2, #69	@ 0x45
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2246      	movs	r2, #70	@ 0x46
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2247      	movs	r2, #71	@ 0x47
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223d      	movs	r2, #61	@ 0x3d
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	001a      	movs	r2, r3
 8003732:	1cbb      	adds	r3, r7, #2
 8003734:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2317      	movs	r3, #23
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <HAL_TIM_PWM_Start_DMA+0x32>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	223e      	movs	r2, #62	@ 0x3e
 8003748:	5c9b      	ldrb	r3, [r3, r2]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3b02      	subs	r3, #2
 800374e:	425a      	negs	r2, r3
 8003750:	4153      	adcs	r3, r2
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e037      	b.n	80037c6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d108      	bne.n	800376e <HAL_TIM_PWM_Start_DMA+0x4a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	223f      	movs	r2, #63	@ 0x3f
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3b02      	subs	r3, #2
 8003766:	425a      	negs	r2, r3
 8003768:	4153      	adcs	r3, r2
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e02b      	b.n	80037c6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d108      	bne.n	8003786 <HAL_TIM_PWM_Start_DMA+0x62>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3b02      	subs	r3, #2
 800377e:	425a      	negs	r2, r3
 8003780:	4153      	adcs	r3, r2
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e01f      	b.n	80037c6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	d108      	bne.n	800379e <HAL_TIM_PWM_Start_DMA+0x7a>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2241      	movs	r2, #65	@ 0x41
 8003790:	5c9b      	ldrb	r3, [r3, r2]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	3b02      	subs	r3, #2
 8003796:	425a      	negs	r2, r3
 8003798:	4153      	adcs	r3, r2
 800379a:	b2db      	uxtb	r3, r3
 800379c:	e013      	b.n	80037c6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d108      	bne.n	80037b6 <HAL_TIM_PWM_Start_DMA+0x92>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2242      	movs	r2, #66	@ 0x42
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3b02      	subs	r3, #2
 80037ae:	425a      	negs	r2, r3
 80037b0:	4153      	adcs	r3, r2
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e007      	b.n	80037c6 <HAL_TIM_PWM_Start_DMA+0xa2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2243      	movs	r2, #67	@ 0x43
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	3b02      	subs	r3, #2
 80037c0:	425a      	negs	r2, r3
 80037c2:	4153      	adcs	r3, r2
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
 80037cc:	e183      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d108      	bne.n	80037e6 <HAL_TIM_PWM_Start_DMA+0xc2>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	223e      	movs	r2, #62	@ 0x3e
 80037d8:	5c9b      	ldrb	r3, [r3, r2]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	425a      	negs	r2, r3
 80037e0:	4153      	adcs	r3, r2
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e037      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x132>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d108      	bne.n	80037fe <HAL_TIM_PWM_Start_DMA+0xda>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	223f      	movs	r2, #63	@ 0x3f
 80037f0:	5c9b      	ldrb	r3, [r3, r2]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	425a      	negs	r2, r3
 80037f8:	4153      	adcs	r3, r2
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e02b      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x132>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d108      	bne.n	8003816 <HAL_TIM_PWM_Start_DMA+0xf2>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2240      	movs	r2, #64	@ 0x40
 8003808:	5c9b      	ldrb	r3, [r3, r2]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	425a      	negs	r2, r3
 8003810:	4153      	adcs	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e01f      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x132>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b0c      	cmp	r3, #12
 800381a:	d108      	bne.n	800382e <HAL_TIM_PWM_Start_DMA+0x10a>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2241      	movs	r2, #65	@ 0x41
 8003820:	5c9b      	ldrb	r3, [r3, r2]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	425a      	negs	r2, r3
 8003828:	4153      	adcs	r3, r2
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e013      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x132>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b10      	cmp	r3, #16
 8003832:	d108      	bne.n	8003846 <HAL_TIM_PWM_Start_DMA+0x122>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2242      	movs	r2, #66	@ 0x42
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	425a      	negs	r2, r3
 8003840:	4153      	adcs	r3, r2
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e007      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x132>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2243      	movs	r2, #67	@ 0x43
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	425a      	negs	r2, r3
 8003852:	4153      	adcs	r3, r2
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d035      	beq.n	80038c6 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_TIM_PWM_Start_DMA+0x144>
 8003860:	1cbb      	adds	r3, r7, #2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e134      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_TIM_PWM_Start_DMA+0x158>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	223e      	movs	r2, #62	@ 0x3e
 8003876:	2102      	movs	r1, #2
 8003878:	5499      	strb	r1, [r3, r2]
 800387a:	e026      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d104      	bne.n	800388c <HAL_TIM_PWM_Start_DMA+0x168>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	223f      	movs	r2, #63	@ 0x3f
 8003886:	2102      	movs	r1, #2
 8003888:	5499      	strb	r1, [r3, r2]
 800388a:	e01e      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b08      	cmp	r3, #8
 8003890:	d104      	bne.n	800389c <HAL_TIM_PWM_Start_DMA+0x178>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2240      	movs	r2, #64	@ 0x40
 8003896:	2102      	movs	r1, #2
 8003898:	5499      	strb	r1, [r3, r2]
 800389a:	e016      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d104      	bne.n	80038ac <HAL_TIM_PWM_Start_DMA+0x188>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2241      	movs	r2, #65	@ 0x41
 80038a6:	2102      	movs	r1, #2
 80038a8:	5499      	strb	r1, [r3, r2]
 80038aa:	e00e      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d104      	bne.n	80038bc <HAL_TIM_PWM_Start_DMA+0x198>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2242      	movs	r2, #66	@ 0x42
 80038b6:	2102      	movs	r1, #2
 80038b8:	5499      	strb	r1, [r3, r2]
 80038ba:	e006      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x1a6>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2243      	movs	r2, #67	@ 0x43
 80038c0:	2102      	movs	r1, #2
 80038c2:	5499      	strb	r1, [r3, r2]
 80038c4:	e001      	b.n	80038ca <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e105      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d100      	bne.n	80038d2 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80038d0:	e080      	b.n	80039d4 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d900      	bls.n	80038da <HAL_TIM_PWM_Start_DMA+0x1b6>
 80038d8:	e0a1      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x2fa>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d054      	beq.n	800398a <HAL_TIM_PWM_Start_DMA+0x266>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d900      	bls.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80038e6:	e09a      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x2fa>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d025      	beq.n	8003940 <HAL_TIM_PWM_Start_DMA+0x21c>
 80038f4:	e093      	b.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	4a79      	ldr	r2, [pc, #484]	@ (8003ae0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80038fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	4a78      	ldr	r2, [pc, #480]	@ (8003ae4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	4a77      	ldr	r2, [pc, #476]	@ (8003ae8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800390c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3334      	adds	r3, #52	@ 0x34
 800391a:	001a      	movs	r2, r3
 800391c:	1cbb      	adds	r3, r7, #2
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f7fe fd74 	bl	800240c <HAL_DMA_Start_IT>
 8003924:	1e03      	subs	r3, r0, #0
 8003926:	d001      	beq.n	800392c <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0d4      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2180      	movs	r1, #128	@ 0x80
 8003938:	0089      	lsls	r1, r1, #2
 800393a:	430a      	orrs	r2, r1
 800393c:	60da      	str	r2, [r3, #12]
      break;
 800393e:	e073      	b.n	8003a28 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003944:	4a66      	ldr	r2, [pc, #408]	@ (8003ae0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	4a65      	ldr	r2, [pc, #404]	@ (8003ae4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	4a64      	ldr	r2, [pc, #400]	@ (8003ae8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003956:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3338      	adds	r3, #56	@ 0x38
 8003964:	001a      	movs	r2, r3
 8003966:	1cbb      	adds	r3, r7, #2
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	f7fe fd4f 	bl	800240c <HAL_DMA_Start_IT>
 800396e:	1e03      	subs	r3, r0, #0
 8003970:	d001      	beq.n	8003976 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0af      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2180      	movs	r1, #128	@ 0x80
 8003982:	00c9      	lsls	r1, r1, #3
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]
      break;
 8003988:	e04e      	b.n	8003a28 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	4a54      	ldr	r2, [pc, #336]	@ (8003ae0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	4a53      	ldr	r2, [pc, #332]	@ (8003ae4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003998:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399e:	4a52      	ldr	r2, [pc, #328]	@ (8003ae8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	333c      	adds	r3, #60	@ 0x3c
 80039ae:	001a      	movs	r2, r3
 80039b0:	1cbb      	adds	r3, r7, #2
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	f7fe fd2a 	bl	800240c <HAL_DMA_Start_IT>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e08a      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2180      	movs	r1, #128	@ 0x80
 80039cc:	0109      	lsls	r1, r1, #4
 80039ce:	430a      	orrs	r2, r1
 80039d0:	60da      	str	r2, [r3, #12]
      break;
 80039d2:	e029      	b.n	8003a28 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	4a41      	ldr	r2, [pc, #260]	@ (8003ae0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80039da:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	4a40      	ldr	r2, [pc, #256]	@ (8003ae4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80039ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3340      	adds	r3, #64	@ 0x40
 80039f8:	001a      	movs	r2, r3
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	f7fe fd05 	bl	800240c <HAL_DMA_Start_IT>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e065      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2180      	movs	r1, #128	@ 0x80
 8003a16:	0149      	lsls	r1, r1, #5
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]
      break;
 8003a1c:	e004      	b.n	8003a28 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8003a1e:	2317      	movs	r3, #23
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
      break;
 8003a26:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003a28:	2317      	movs	r3, #23
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d14e      	bne.n	8003ad0 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 ffae 	bl	800499c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_TIM_PWM_Start_DMA+0x33a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIM_PWM_Start_DMA+0x33a>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_TIM_PWM_Start_DMA+0x33e>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_TIM_PWM_Start_DMA+0x340>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2180      	movs	r1, #128	@ 0x80
 8003a74:	0209      	lsls	r1, r1, #8
 8003a76:	430a      	orrs	r2, r1
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_PWM_Start_DMA+0x36a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1b      	ldr	r2, [pc, #108]	@ (8003af8 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d116      	bne.n	8003abc <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d016      	beq.n	8003ace <HAL_TIM_PWM_Start_DMA+0x3aa>
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	025b      	lsls	r3, r3, #9
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d011      	beq.n	8003ace <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	e008      	b.n	8003ace <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e000      	b.n	8003ad0 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003ad0:	2317      	movs	r3, #23
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	781b      	ldrb	r3, [r3, #0]
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b006      	add	sp, #24
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	08004125 	.word	0x08004125
 8003ae4:	080041cf 	.word	0x080041cf
 8003ae8:	08004091 	.word	0x08004091
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800
 8003af8:	40000400 	.word	0x40000400
 8003afc:	00010007 	.word	0x00010007

08003b00 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	d039      	beq.n	8003b8c <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d844      	bhi.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d025      	beq.n	8003b70 <HAL_TIM_PWM_Stop_DMA+0x70>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d83e      	bhi.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d00e      	beq.n	8003b54 <HAL_TIM_PWM_Stop_DMA+0x54>
 8003b36:	e037      	b.n	8003ba8 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	495a      	ldr	r1, [pc, #360]	@ (8003cac <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7fe fce3 	bl	8002518 <HAL_DMA_Abort_IT>
      break;
 8003b52:	e02e      	b.n	8003bb2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4954      	ldr	r1, [pc, #336]	@ (8003cb0 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003b60:	400a      	ands	r2, r1
 8003b62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fe fcd5 	bl	8002518 <HAL_DMA_Abort_IT>
      break;
 8003b6e:	e020      	b.n	8003bb2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	494e      	ldr	r1, [pc, #312]	@ (8003cb4 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7fe fcc7 	bl	8002518 <HAL_DMA_Abort_IT>
      break;
 8003b8a:	e012      	b.n	8003bb2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4948      	ldr	r1, [pc, #288]	@ (8003cb8 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fe fcb9 	bl	8002518 <HAL_DMA_Abort_IT>
      break;
 8003ba6:	e004      	b.n	8003bb2 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003ba8:	230f      	movs	r3, #15
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
      break;
 8003bb0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003bb2:	230f      	movs	r3, #15
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d000      	beq.n	8003bbe <HAL_TIM_PWM_Stop_DMA+0xbe>
 8003bbc:	e06e      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6839      	ldr	r1, [r7, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 fee8 	bl	800499c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8003cbc <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_PWM_Stop_DMA+0xea>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a39      	ldr	r2, [pc, #228]	@ (8003cc0 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_PWM_Stop_DMA+0xea>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a37      	ldr	r2, [pc, #220]	@ (8003cc4 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_Stop_DMA+0xee>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	4a33      	ldr	r2, [pc, #204]	@ (8003cc8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d10d      	bne.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4a31      	ldr	r2, [pc, #196]	@ (8003ccc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	492e      	ldr	r1, [pc, #184]	@ (8003cd0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	d10d      	bne.n	8003c44 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a27      	ldr	r2, [pc, #156]	@ (8003ccc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	438a      	bics	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	223e      	movs	r2, #62	@ 0x3e
 8003c4e:	2101      	movs	r1, #1
 8003c50:	5499      	strb	r1, [r3, r2]
 8003c52:	e023      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d104      	bne.n	8003c64 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223f      	movs	r2, #63	@ 0x3f
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]
 8003c62:	e01b      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d104      	bne.n	8003c74 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2240      	movs	r2, #64	@ 0x40
 8003c6e:	2101      	movs	r1, #1
 8003c70:	5499      	strb	r1, [r3, r2]
 8003c72:	e013      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d104      	bne.n	8003c84 <HAL_TIM_PWM_Stop_DMA+0x184>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2241      	movs	r2, #65	@ 0x41
 8003c7e:	2101      	movs	r1, #1
 8003c80:	5499      	strb	r1, [r3, r2]
 8003c82:	e00b      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b10      	cmp	r3, #16
 8003c88:	d104      	bne.n	8003c94 <HAL_TIM_PWM_Stop_DMA+0x194>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2242      	movs	r2, #66	@ 0x42
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]
 8003c92:	e003      	b.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2243      	movs	r2, #67	@ 0x43
 8003c98:	2101      	movs	r1, #1
 8003c9a:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	781b      	ldrb	r3, [r3, #0]
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b004      	add	sp, #16
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	fffffdff 	.word	0xfffffdff
 8003cb0:	fffffbff 	.word	0xfffffbff
 8003cb4:	fffff7ff 	.word	0xfffff7ff
 8003cb8:	ffffefff 	.word	0xffffefff
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800
 8003cc8:	00001111 	.word	0x00001111
 8003ccc:	00000444 	.word	0x00000444
 8003cd0:	ffff7fff 	.word	0xffff7fff

08003cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2317      	movs	r3, #23
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	223c      	movs	r2, #60	@ 0x3c
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0e5      	b.n	8003ec2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	223c      	movs	r2, #60	@ 0x3c
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b14      	cmp	r3, #20
 8003d02:	d900      	bls.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d04:	e0d1      	b.n	8003eaa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	009a      	lsls	r2, r3, #2
 8003d0a:	4b70      	ldr	r3, [pc, #448]	@ (8003ecc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003d0c:	18d3      	adds	r3, r2, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 fb06 	bl	800432c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2108      	movs	r1, #8
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	619a      	str	r2, [r3, #24]
      break;
 8003d52:	e0af      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	0011      	movs	r1, r2
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 fb65 	bl	800442c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2180      	movs	r1, #128	@ 0x80
 8003d6e:	0109      	lsls	r1, r1, #4
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4954      	ldr	r1, [pc, #336]	@ (8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6999      	ldr	r1, [r3, #24]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	619a      	str	r2, [r3, #24]
      break;
 8003d98:	e08c      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 fbc0 	bl	8004528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2108      	movs	r1, #8
 8003db4:	430a      	orrs	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69d9      	ldr	r1, [r3, #28]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	61da      	str	r2, [r3, #28]
      break;
 8003dda:	e06b      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 fc21 	bl	800462c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2180      	movs	r1, #128	@ 0x80
 8003df6:	0109      	lsls	r1, r1, #4
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4932      	ldr	r1, [pc, #200]	@ (8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e08:	400a      	ands	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69d9      	ldr	r1, [r3, #28]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	021a      	lsls	r2, r3, #8
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	61da      	str	r2, [r3, #28]
      break;
 8003e20:	e048      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 fc62 	bl	80046f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2104      	movs	r1, #4
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e62:	e027      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	0011      	movs	r1, r2
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 fc9b 	bl	80047a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2180      	movs	r1, #128	@ 0x80
 8003e7e:	0109      	lsls	r1, r1, #4
 8003e80:	430a      	orrs	r2, r1
 8003e82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4910      	ldr	r1, [pc, #64]	@ (8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ea8:	e004      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003eaa:	2317      	movs	r3, #23
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
      break;
 8003eb2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	223c      	movs	r2, #60	@ 0x3c
 8003eb8:	2100      	movs	r1, #0
 8003eba:	5499      	strb	r1, [r3, r2]

  return status;
 8003ebc:	2317      	movs	r3, #23
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	781b      	ldrb	r3, [r3, #0]
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b006      	add	sp, #24
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	0800582c 	.word	0x0800582c
 8003ed0:	fffffbff 	.word	0xfffffbff

08003ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	230f      	movs	r3, #15
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223c      	movs	r2, #60	@ 0x3c
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIM_ConfigClockSource+0x20>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0bc      	b.n	800406e <HAL_TIM_ConfigClockSource+0x19a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223c      	movs	r2, #60	@ 0x3c
 8003ef8:	2101      	movs	r1, #1
 8003efa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	223d      	movs	r2, #61	@ 0x3d
 8003f00:	2102      	movs	r1, #2
 8003f02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a5a      	ldr	r2, [pc, #360]	@ (8004078 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a59      	ldr	r2, [pc, #356]	@ (800407c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2280      	movs	r2, #128	@ 0x80
 8003f2a:	0192      	lsls	r2, r2, #6
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d040      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0xde>
 8003f30:	2280      	movs	r2, #128	@ 0x80
 8003f32:	0192      	lsls	r2, r2, #6
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d900      	bls.n	8003f3a <HAL_TIM_ConfigClockSource+0x66>
 8003f38:	e088      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	0152      	lsls	r2, r2, #5
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d100      	bne.n	8003f44 <HAL_TIM_ConfigClockSource+0x70>
 8003f42:	e088      	b.n	8004056 <HAL_TIM_ConfigClockSource+0x182>
 8003f44:	2280      	movs	r2, #128	@ 0x80
 8003f46:	0152      	lsls	r2, r2, #5
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d900      	bls.n	8003f4e <HAL_TIM_ConfigClockSource+0x7a>
 8003f4c:	e07e      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f4e:	2b70      	cmp	r3, #112	@ 0x70
 8003f50:	d018      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0xb0>
 8003f52:	d900      	bls.n	8003f56 <HAL_TIM_ConfigClockSource+0x82>
 8003f54:	e07a      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f56:	2b60      	cmp	r3, #96	@ 0x60
 8003f58:	d04f      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x126>
 8003f5a:	d900      	bls.n	8003f5e <HAL_TIM_ConfigClockSource+0x8a>
 8003f5c:	e076      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f5e:	2b50      	cmp	r3, #80	@ 0x50
 8003f60:	d03b      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x106>
 8003f62:	d900      	bls.n	8003f66 <HAL_TIM_ConfigClockSource+0x92>
 8003f64:	e072      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f66:	2b40      	cmp	r3, #64	@ 0x40
 8003f68:	d057      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x146>
 8003f6a:	d900      	bls.n	8003f6e <HAL_TIM_ConfigClockSource+0x9a>
 8003f6c:	e06e      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f6e:	2b30      	cmp	r3, #48	@ 0x30
 8003f70:	d063      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f72:	d86b      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d060      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f78:	d868      	bhi.n	800404c <HAL_TIM_ConfigClockSource+0x178>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d05d      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d05b      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x166>
 8003f82:	e063      	b.n	800404c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f94:	f000 fce2 	bl	800495c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2277      	movs	r2, #119	@ 0x77
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
      break;
 8003fb0:	e052      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc2:	f000 fccb 	bl	800495c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2180      	movs	r1, #128	@ 0x80
 8003fd2:	01c9      	lsls	r1, r1, #7
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
      break;
 8003fd8:	e03e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	f000 fc3c 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2150      	movs	r1, #80	@ 0x50
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 fc96 	bl	8004924 <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e02e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004006:	001a      	movs	r2, r3
 8004008:	f000 fc5a 	bl	80048c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2160      	movs	r1, #96	@ 0x60
 8004012:	0018      	movs	r0, r3
 8004014:	f000 fc86 	bl	8004924 <TIM_ITRx_SetConfig>
      break;
 8004018:	e01e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	001a      	movs	r2, r3
 8004028:	f000 fc1c 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2140      	movs	r1, #64	@ 0x40
 8004032:	0018      	movs	r0, r3
 8004034:	f000 fc76 	bl	8004924 <TIM_ITRx_SetConfig>
      break;
 8004038:	e00e      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	0019      	movs	r1, r3
 8004044:	0010      	movs	r0, r2
 8004046:	f000 fc6d 	bl	8004924 <TIM_ITRx_SetConfig>
      break;
 800404a:	e005      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800404c:	230f      	movs	r3, #15
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
      break;
 8004054:	e000      	b.n	8004058 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004056:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	223d      	movs	r2, #61	@ 0x3d
 800405c:	2101      	movs	r1, #1
 800405e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	223c      	movs	r2, #60	@ 0x3c
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

  return status;
 8004068:	230f      	movs	r3, #15
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	ffceff88 	.word	0xffceff88
 800407c:	ffff00ff 	.word	0xffff00ff

08004080 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}

08004090 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d107      	bne.n	80040b8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	223e      	movs	r2, #62	@ 0x3e
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]
 80040b6:	e02a      	b.n	800410e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d107      	bne.n	80040d2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	223f      	movs	r2, #63	@ 0x3f
 80040cc:	2101      	movs	r1, #1
 80040ce:	5499      	strb	r1, [r3, r2]
 80040d0:	e01d      	b.n	800410e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2204      	movs	r2, #4
 80040e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2240      	movs	r2, #64	@ 0x40
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	e010      	b.n	800410e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d107      	bne.n	8004106 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2208      	movs	r2, #8
 80040fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2241      	movs	r2, #65	@ 0x41
 8004100:	2101      	movs	r1, #1
 8004102:	5499      	strb	r1, [r3, r2]
 8004104:	e003      	b.n	800410e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	223d      	movs	r2, #61	@ 0x3d
 800410a:	2101      	movs	r1, #1
 800410c:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	0018      	movs	r0, r3
 8004112:	f7ff ffb5 	bl	8004080 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
}
 800411c:	46c0      	nop			@ (mov r8, r8)
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}

08004124 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d10b      	bne.n	8004154 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d136      	bne.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	223e      	movs	r2, #62	@ 0x3e
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]
 8004152:	e031      	b.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d10b      	bne.n	8004176 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2202      	movs	r2, #2
 8004162:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d125      	bne.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	223f      	movs	r2, #63	@ 0x3f
 8004170:	2101      	movs	r1, #1
 8004172:	5499      	strb	r1, [r3, r2]
 8004174:	e020      	b.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d10b      	bne.n	8004198 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2204      	movs	r2, #4
 8004184:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d114      	bne.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2240      	movs	r2, #64	@ 0x40
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]
 8004196:	e00f      	b.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d10a      	bne.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2241      	movs	r2, #65	@ 0x41
 80041b4:	2101      	movs	r1, #1
 80041b6:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fc fe44 	bl	8000e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b004      	add	sp, #16
 80041cc:	bd80      	pop	{r7, pc}

080041ce <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d103      	bne.n	80041ee <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	771a      	strb	r2, [r3, #28]
 80041ec:	e019      	b.n	8004222 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d103      	bne.n	8004200 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2202      	movs	r2, #2
 80041fc:	771a      	strb	r2, [r3, #28]
 80041fe:	e010      	b.n	8004222 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d103      	bne.n	8004212 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2204      	movs	r2, #4
 800420e:	771a      	strb	r2, [r3, #28]
 8004210:	e007      	b.n	8004222 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d102      	bne.n	8004222 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2208      	movs	r2, #8
 8004220:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	0018      	movs	r0, r3
 8004226:	f7fc fe01 	bl	8000e2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
}
 8004230:	46c0      	nop			@ (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bd80      	pop	{r7, pc}

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <TIM_Base_SetConfig+0xdc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0x20>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <TIM_Base_SetConfig+0xe0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2270      	movs	r2, #112	@ 0x70
 800425c:	4393      	bics	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <TIM_Base_SetConfig+0xdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0x5a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a28      	ldr	r2, [pc, #160]	@ (8004318 <TIM_Base_SetConfig+0xe0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x5a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a27      	ldr	r2, [pc, #156]	@ (800431c <TIM_Base_SetConfig+0xe4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x5a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a26      	ldr	r2, [pc, #152]	@ (8004320 <TIM_Base_SetConfig+0xe8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x5a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a25      	ldr	r2, [pc, #148]	@ (8004324 <TIM_Base_SetConfig+0xec>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a24      	ldr	r2, [pc, #144]	@ (8004328 <TIM_Base_SetConfig+0xf0>)
 8004296:	4013      	ands	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2280      	movs	r2, #128	@ 0x80
 80042a8:	4393      	bics	r3, r2
 80042aa:	001a      	movs	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <TIM_Base_SetConfig+0xdc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_Base_SetConfig+0xaa>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <TIM_Base_SetConfig+0xe8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_Base_SetConfig+0xaa>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <TIM_Base_SetConfig+0xec>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d103      	bne.n	80042ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2201      	movs	r2, #1
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2201      	movs	r2, #1
 8004302:	4393      	bics	r3, r2
 8004304:	001a      	movs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	611a      	str	r2, [r3, #16]
  }
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40002000 	.word	0x40002000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800
 8004328:	fffffcff 	.word	0xfffffcff

0800432c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	2201      	movs	r2, #1
 8004342:	4393      	bics	r3, r2
 8004344:	001a      	movs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a2e      	ldr	r2, [pc, #184]	@ (8004414 <TIM_OC1_SetConfig+0xe8>)
 800435a:	4013      	ands	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2203      	movs	r2, #3
 8004362:	4393      	bics	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2202      	movs	r2, #2
 8004374:	4393      	bics	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <TIM_OC1_SetConfig+0xec>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <TIM_OC1_SetConfig+0x6e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a23      	ldr	r2, [pc, #140]	@ (800441c <TIM_OC1_SetConfig+0xf0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_OC1_SetConfig+0x6e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a22      	ldr	r2, [pc, #136]	@ (8004420 <TIM_OC1_SetConfig+0xf4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10c      	bne.n	80043b4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2208      	movs	r2, #8
 800439e:	4393      	bics	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2204      	movs	r2, #4
 80043b0:	4393      	bics	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a18      	ldr	r2, [pc, #96]	@ (8004418 <TIM_OC1_SetConfig+0xec>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_OC1_SetConfig+0xa0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a17      	ldr	r2, [pc, #92]	@ (800441c <TIM_OC1_SetConfig+0xf0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC1_SetConfig+0xa0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <TIM_OC1_SetConfig+0xf4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d111      	bne.n	80043f0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4a15      	ldr	r2, [pc, #84]	@ (8004424 <TIM_OC1_SetConfig+0xf8>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <TIM_OC1_SetConfig+0xfc>)
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b006      	add	sp, #24
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	fffeff8f 	.word	0xfffeff8f
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800
 8004424:	fffffeff 	.word	0xfffffeff
 8004428:	fffffdff 	.word	0xfffffdff

0800442c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	2210      	movs	r2, #16
 8004442:	4393      	bics	r3, r2
 8004444:	001a      	movs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4a2c      	ldr	r2, [pc, #176]	@ (800450c <TIM_OC2_SetConfig+0xe0>)
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a2b      	ldr	r2, [pc, #172]	@ (8004510 <TIM_OC2_SetConfig+0xe4>)
 8004462:	4013      	ands	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2220      	movs	r2, #32
 8004476:	4393      	bics	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a22      	ldr	r2, [pc, #136]	@ (8004514 <TIM_OC2_SetConfig+0xe8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d10d      	bne.n	80044aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2280      	movs	r2, #128	@ 0x80
 8004492:	4393      	bics	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2240      	movs	r2, #64	@ 0x40
 80044a6:	4393      	bics	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a19      	ldr	r2, [pc, #100]	@ (8004514 <TIM_OC2_SetConfig+0xe8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_OC2_SetConfig+0x96>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a18      	ldr	r2, [pc, #96]	@ (8004518 <TIM_OC2_SetConfig+0xec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC2_SetConfig+0x96>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a17      	ldr	r2, [pc, #92]	@ (800451c <TIM_OC2_SetConfig+0xf0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d113      	bne.n	80044ea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <TIM_OC2_SetConfig+0xf4>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <TIM_OC2_SetConfig+0xf8>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	621a      	str	r2, [r3, #32]
}
 8004504:	46c0      	nop			@ (mov r8, r8)
 8004506:	46bd      	mov	sp, r7
 8004508:	b006      	add	sp, #24
 800450a:	bd80      	pop	{r7, pc}
 800450c:	feff8fff 	.word	0xfeff8fff
 8004510:	fffffcff 	.word	0xfffffcff
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40014400 	.word	0x40014400
 800451c:	40014800 	.word	0x40014800
 8004520:	fffffbff 	.word	0xfffffbff
 8004524:	fffff7ff 	.word	0xfffff7ff

08004528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	4a31      	ldr	r2, [pc, #196]	@ (8004604 <TIM_OC3_SetConfig+0xdc>)
 800453e:	401a      	ands	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a2d      	ldr	r2, [pc, #180]	@ (8004608 <TIM_OC3_SetConfig+0xe0>)
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2203      	movs	r2, #3
 800455c:	4393      	bics	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4a27      	ldr	r2, [pc, #156]	@ (800460c <TIM_OC3_SetConfig+0xe4>)
 800456e:	4013      	ands	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a23      	ldr	r2, [pc, #140]	@ (8004610 <TIM_OC3_SetConfig+0xe8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10d      	bne.n	80045a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4a22      	ldr	r2, [pc, #136]	@ (8004614 <TIM_OC3_SetConfig+0xec>)
 800458a:	4013      	ands	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <TIM_OC3_SetConfig+0xf0>)
 800459e:	4013      	ands	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <TIM_OC3_SetConfig+0xe8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_OC3_SetConfig+0x92>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	@ (800461c <TIM_OC3_SetConfig+0xf4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_OC3_SetConfig+0x92>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004620 <TIM_OC3_SetConfig+0xf8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d113      	bne.n	80045e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4a19      	ldr	r2, [pc, #100]	@ (8004624 <TIM_OC3_SetConfig+0xfc>)
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <TIM_OC3_SetConfig+0x100>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b006      	add	sp, #24
 8004602:	bd80      	pop	{r7, pc}
 8004604:	fffffeff 	.word	0xfffffeff
 8004608:	fffeff8f 	.word	0xfffeff8f
 800460c:	fffffdff 	.word	0xfffffdff
 8004610:	40012c00 	.word	0x40012c00
 8004614:	fffff7ff 	.word	0xfffff7ff
 8004618:	fffffbff 	.word	0xfffffbff
 800461c:	40014400 	.word	0x40014400
 8004620:	40014800 	.word	0x40014800
 8004624:	ffffefff 	.word	0xffffefff
 8004628:	ffffdfff 	.word	0xffffdfff

0800462c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a24      	ldr	r2, [pc, #144]	@ (80046d4 <TIM_OC4_SetConfig+0xa8>)
 8004642:	401a      	ands	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a20      	ldr	r2, [pc, #128]	@ (80046d8 <TIM_OC4_SetConfig+0xac>)
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <TIM_OC4_SetConfig+0xb0>)
 8004660:	4013      	ands	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4a1b      	ldr	r2, [pc, #108]	@ (80046e0 <TIM_OC4_SetConfig+0xb4>)
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a17      	ldr	r2, [pc, #92]	@ (80046e4 <TIM_OC4_SetConfig+0xb8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC4_SetConfig+0x70>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a16      	ldr	r2, [pc, #88]	@ (80046e8 <TIM_OC4_SetConfig+0xbc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC4_SetConfig+0x70>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a15      	ldr	r2, [pc, #84]	@ (80046ec <TIM_OC4_SetConfig+0xc0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d109      	bne.n	80046b0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <TIM_OC4_SetConfig+0xc4>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b006      	add	sp, #24
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	ffffefff 	.word	0xffffefff
 80046d8:	feff8fff 	.word	0xfeff8fff
 80046dc:	fffffcff 	.word	0xfffffcff
 80046e0:	ffffdfff 	.word	0xffffdfff
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800
 80046f0:	ffffbfff 	.word	0xffffbfff

080046f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	4a21      	ldr	r2, [pc, #132]	@ (8004790 <TIM_OC5_SetConfig+0x9c>)
 800470a:	401a      	ands	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <TIM_OC5_SetConfig+0xa0>)
 8004720:	4013      	ands	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <TIM_OC5_SetConfig+0xa4>)
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a15      	ldr	r2, [pc, #84]	@ (800479c <TIM_OC5_SetConfig+0xa8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_OC5_SetConfig+0x66>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a14      	ldr	r2, [pc, #80]	@ (80047a0 <TIM_OC5_SetConfig+0xac>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_OC5_SetConfig+0x66>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a13      	ldr	r2, [pc, #76]	@ (80047a4 <TIM_OC5_SetConfig+0xb0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d109      	bne.n	800476e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <TIM_OC5_SetConfig+0x9c>)
 800475e:	4013      	ands	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	621a      	str	r2, [r3, #32]
}
 8004788:	46c0      	nop			@ (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b006      	add	sp, #24
 800478e:	bd80      	pop	{r7, pc}
 8004790:	fffeffff 	.word	0xfffeffff
 8004794:	fffeff8f 	.word	0xfffeff8f
 8004798:	fffdffff 	.word	0xfffdffff
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	4a22      	ldr	r2, [pc, #136]	@ (8004848 <TIM_OC6_SetConfig+0xa0>)
 80047be:	401a      	ands	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <TIM_OC6_SetConfig+0xa4>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004850 <TIM_OC6_SetConfig+0xa8>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <TIM_OC6_SetConfig+0xac>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_OC6_SetConfig+0x68>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a15      	ldr	r2, [pc, #84]	@ (8004858 <TIM_OC6_SetConfig+0xb0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_OC6_SetConfig+0x68>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a14      	ldr	r2, [pc, #80]	@ (800485c <TIM_OC6_SetConfig+0xb4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d109      	bne.n	8004824 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <TIM_OC6_SetConfig+0xb8>)
 8004814:	4013      	ands	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	46bd      	mov	sp, r7
 8004842:	b006      	add	sp, #24
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	ffefffff 	.word	0xffefffff
 800484c:	feff8fff 	.word	0xfeff8fff
 8004850:	ffdfffff 	.word	0xffdfffff
 8004854:	40012c00 	.word	0x40012c00
 8004858:	40014400 	.word	0x40014400
 800485c:	40014800 	.word	0x40014800
 8004860:	fffbffff 	.word	0xfffbffff

08004864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	2201      	movs	r2, #1
 800487c:	4393      	bics	r3, r2
 800487e:	001a      	movs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	22f0      	movs	r2, #240	@ 0xf0
 800488e:	4393      	bics	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	220a      	movs	r2, #10
 80048a0:	4393      	bics	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b006      	add	sp, #24
 80048be:	bd80      	pop	{r7, pc}

080048c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	2210      	movs	r2, #16
 80048d8:	4393      	bics	r3, r2
 80048da:	001a      	movs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004920 <TIM_TI2_ConfigInputStage+0x60>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	031b      	lsls	r3, r3, #12
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	22a0      	movs	r2, #160	@ 0xa0
 80048fc:	4393      	bics	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	621a      	str	r2, [r3, #32]
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b006      	add	sp, #24
 800491c:	bd80      	pop	{r7, pc}
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	ffff0fff 	.word	0xffff0fff

08004924 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a08      	ldr	r2, [pc, #32]	@ (8004958 <TIM_ITRx_SetConfig+0x34>)
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	2207      	movs	r2, #7
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	609a      	str	r2, [r3, #8]
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b004      	add	sp, #16
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	ffcfff8f 	.word	0xffcfff8f

0800495c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4a09      	ldr	r2, [pc, #36]	@ (8004998 <TIM_ETR_SetConfig+0x3c>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	431a      	orrs	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b006      	add	sp, #24
 8004996:	bd80      	pop	{r7, pc}
 8004998:	ffff00ff 	.word	0xffff00ff

0800499c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	221f      	movs	r2, #31
 80049ac:	4013      	ands	r3, r2
 80049ae:	2201      	movs	r2, #1
 80049b0:	409a      	lsls	r2, r3
 80049b2:	0013      	movs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	43d2      	mvns	r2, r2
 80049be:	401a      	ands	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	211f      	movs	r1, #31
 80049cc:	400b      	ands	r3, r1
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4099      	lsls	r1, r3
 80049d2:	000b      	movs	r3, r1
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b006      	add	sp, #24
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	223c      	movs	r2, #60	@ 0x3c
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e04a      	b.n	8004a92 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	223c      	movs	r2, #60	@ 0x3c
 8004a00:	2101      	movs	r1, #1
 8004a02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	223d      	movs	r2, #61	@ 0x3d
 8004a08:	2102      	movs	r1, #2
 8004a0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2270      	movs	r2, #112	@ 0x70
 8004a3c:	4393      	bics	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a11      	ldr	r2, [pc, #68]	@ (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10c      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2280      	movs	r2, #128	@ 0x80
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	223d      	movs	r2, #61	@ 0x3d
 8004a84:	2101      	movs	r1, #1
 8004a86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	223c      	movs	r2, #60	@ 0x3c
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b004      	add	sp, #16
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	ff0fffff 	.word	0xff0fffff
 8004aa4:	40000400 	.word	0x40000400

08004aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e046      	b.n	8004b48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2288      	movs	r2, #136	@ 0x88
 8004abe:	589b      	ldr	r3, [r3, r2]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2284      	movs	r2, #132	@ 0x84
 8004ac8:	2100      	movs	r1, #0
 8004aca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7fc fe8c 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2288      	movs	r2, #136	@ 0x88
 8004ad8:	2124      	movs	r1, #36	@ 0x24
 8004ada:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	438a      	bics	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 fa10 	bl	8004f1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 f8a2 	bl	8004c48 <UART_SetConfig>
 8004b04:	0003      	movs	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e01c      	b.n	8004b48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	490d      	ldr	r1, [pc, #52]	@ (8004b50 <HAL_UART_Init+0xa8>)
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	212a      	movs	r1, #42	@ 0x2a
 8004b2a:	438a      	bics	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 fa9f 	bl	8005084 <UART_CheckIdleState>
 8004b46:	0003      	movs	r3, r0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	ffffb7ff 	.word	0xffffb7ff

08004b54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	1dbb      	adds	r3, r7, #6
 8004b60:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	228c      	movs	r2, #140	@ 0x8c
 8004b66:	589b      	ldr	r3, [r3, r2]
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d145      	bne.n	8004bf8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_Receive_DMA+0x26>
 8004b72:	1dbb      	adds	r3, r7, #6
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e03d      	b.n	8004bfa <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	015b      	lsls	r3, r3, #5
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d109      	bne.n	8004b9e <HAL_UART_Receive_DMA+0x4a>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4013      	ands	r3, r2
 8004b98:	d001      	beq.n	8004b9e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e02d      	b.n	8004bfa <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	2380      	movs	r3, #128	@ 0x80
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d019      	beq.n	8004be6 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	613b      	str	r3, [r7, #16]
  return(result);
 8004bb8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2180      	movs	r1, #128	@ 0x80
 8004bd4:	04c9      	lsls	r1, r1, #19
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f383 8810 	msr	PRIMASK, r3
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004be6:	1dbb      	adds	r3, r7, #6
 8004be8:	881a      	ldrh	r2, [r3, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 fb62 	bl	80052b8 <UART_Start_Receive_DMA>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b008      	add	sp, #32
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	000a      	movs	r2, r1
 8004c3c:	1cbb      	adds	r3, r7, #2
 8004c3e:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c40:	46c0      	nop			@ (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b002      	add	sp, #8
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c50:	231a      	movs	r3, #26
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4aa1      	ldr	r2, [pc, #644]	@ (8004efc <UART_SetConfig+0x2b4>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a9c      	ldr	r2, [pc, #624]	@ (8004f00 <UART_SetConfig+0x2b8>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a93      	ldr	r2, [pc, #588]	@ (8004f04 <UART_SetConfig+0x2bc>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	220f      	movs	r2, #15
 8004ccc:	4393      	bics	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a89      	ldr	r2, [pc, #548]	@ (8004f08 <UART_SetConfig+0x2c0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d127      	bne.n	8004d36 <UART_SetConfig+0xee>
 8004ce6:	4b89      	ldr	r3, [pc, #548]	@ (8004f0c <UART_SetConfig+0x2c4>)
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cea:	2203      	movs	r2, #3
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d017      	beq.n	8004d22 <UART_SetConfig+0xda>
 8004cf2:	d81b      	bhi.n	8004d2c <UART_SetConfig+0xe4>
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d00a      	beq.n	8004d0e <UART_SetConfig+0xc6>
 8004cf8:	d818      	bhi.n	8004d2c <UART_SetConfig+0xe4>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0xbc>
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d00a      	beq.n	8004d18 <UART_SetConfig+0xd0>
 8004d02:	e013      	b.n	8004d2c <UART_SetConfig+0xe4>
 8004d04:	231b      	movs	r3, #27
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e021      	b.n	8004d52 <UART_SetConfig+0x10a>
 8004d0e:	231b      	movs	r3, #27
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2202      	movs	r2, #2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e01c      	b.n	8004d52 <UART_SetConfig+0x10a>
 8004d18:	231b      	movs	r3, #27
 8004d1a:	18fb      	adds	r3, r7, r3
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e017      	b.n	8004d52 <UART_SetConfig+0x10a>
 8004d22:	231b      	movs	r3, #27
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	2208      	movs	r2, #8
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e012      	b.n	8004d52 <UART_SetConfig+0x10a>
 8004d2c:	231b      	movs	r3, #27
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	2210      	movs	r2, #16
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	e00d      	b.n	8004d52 <UART_SetConfig+0x10a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a75      	ldr	r2, [pc, #468]	@ (8004f10 <UART_SetConfig+0x2c8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d104      	bne.n	8004d4a <UART_SetConfig+0x102>
 8004d40:	231b      	movs	r3, #27
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e003      	b.n	8004d52 <UART_SetConfig+0x10a>
 8004d4a:	231b      	movs	r3, #27
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	2210      	movs	r2, #16
 8004d50:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	2380      	movs	r3, #128	@ 0x80
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d000      	beq.n	8004d60 <UART_SetConfig+0x118>
 8004d5e:	e065      	b.n	8004e2c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004d60:	231b      	movs	r3, #27
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d015      	beq.n	8004d96 <UART_SetConfig+0x14e>
 8004d6a:	dc18      	bgt.n	8004d9e <UART_SetConfig+0x156>
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d00d      	beq.n	8004d8c <UART_SetConfig+0x144>
 8004d70:	dc15      	bgt.n	8004d9e <UART_SetConfig+0x156>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <UART_SetConfig+0x134>
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d005      	beq.n	8004d86 <UART_SetConfig+0x13e>
 8004d7a:	e010      	b.n	8004d9e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fe fc04 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8004d80:	0003      	movs	r3, r0
 8004d82:	617b      	str	r3, [r7, #20]
        break;
 8004d84:	e012      	b.n	8004dac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d86:	4b63      	ldr	r3, [pc, #396]	@ (8004f14 <UART_SetConfig+0x2cc>)
 8004d88:	617b      	str	r3, [r7, #20]
        break;
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8c:	f7fe fb72 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8004d90:	0003      	movs	r3, r0
 8004d92:	617b      	str	r3, [r7, #20]
        break;
 8004d94:	e00a      	b.n	8004dac <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	617b      	str	r3, [r7, #20]
        break;
 8004d9c:	e006      	b.n	8004dac <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004da2:	231a      	movs	r3, #26
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
        break;
 8004daa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d100      	bne.n	8004db4 <UART_SetConfig+0x16c>
 8004db2:	e08d      	b.n	8004ed0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004db8:	4b57      	ldr	r3, [pc, #348]	@ (8004f18 <UART_SetConfig+0x2d0>)
 8004dba:	0052      	lsls	r2, r2, #1
 8004dbc:	5ad3      	ldrh	r3, [r2, r3]
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	6978      	ldr	r0, [r7, #20]
 8004dc2:	f7fb f99d 	bl	8000100 <__udivsi3>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	005a      	lsls	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	18d2      	adds	r2, r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	0010      	movs	r0, r2
 8004dda:	f7fb f991 	bl	8000100 <__udivsi3>
 8004dde:	0003      	movs	r3, r0
 8004de0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b0f      	cmp	r3, #15
 8004de6:	d91c      	bls.n	8004e22 <UART_SetConfig+0x1da>
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d217      	bcs.n	8004e22 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	200e      	movs	r0, #14
 8004df8:	183b      	adds	r3, r7, r0
 8004dfa:	210f      	movs	r1, #15
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2207      	movs	r2, #7
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b299      	uxth	r1, r3
 8004e0c:	183b      	adds	r3, r7, r0
 8004e0e:	183a      	adds	r2, r7, r0
 8004e10:	8812      	ldrh	r2, [r2, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	183a      	adds	r2, r7, r0
 8004e1c:	8812      	ldrh	r2, [r2, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e056      	b.n	8004ed0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004e22:	231a      	movs	r3, #26
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e051      	b.n	8004ed0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e2c:	231b      	movs	r3, #27
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d015      	beq.n	8004e62 <UART_SetConfig+0x21a>
 8004e36:	dc18      	bgt.n	8004e6a <UART_SetConfig+0x222>
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d00d      	beq.n	8004e58 <UART_SetConfig+0x210>
 8004e3c:	dc15      	bgt.n	8004e6a <UART_SetConfig+0x222>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <UART_SetConfig+0x200>
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d005      	beq.n	8004e52 <UART_SetConfig+0x20a>
 8004e46:	e010      	b.n	8004e6a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7fe fb9e 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	617b      	str	r3, [r7, #20]
        break;
 8004e50:	e012      	b.n	8004e78 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e52:	4b30      	ldr	r3, [pc, #192]	@ (8004f14 <UART_SetConfig+0x2cc>)
 8004e54:	617b      	str	r3, [r7, #20]
        break;
 8004e56:	e00f      	b.n	8004e78 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e58:	f7fe fb0c 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	617b      	str	r3, [r7, #20]
        break;
 8004e60:	e00a      	b.n	8004e78 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	617b      	str	r3, [r7, #20]
        break;
 8004e68:	e006      	b.n	8004e78 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e6e:	231a      	movs	r3, #26
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
        break;
 8004e76:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d028      	beq.n	8004ed0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e82:	4b25      	ldr	r3, [pc, #148]	@ (8004f18 <UART_SetConfig+0x2d0>)
 8004e84:	0052      	lsls	r2, r2, #1
 8004e86:	5ad3      	ldrh	r3, [r2, r3]
 8004e88:	0019      	movs	r1, r3
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f7fb f938 	bl	8000100 <__udivsi3>
 8004e90:	0003      	movs	r3, r0
 8004e92:	001a      	movs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	18d2      	adds	r2, r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	0010      	movs	r0, r2
 8004ea4:	f7fb f92c 	bl	8000100 <__udivsi3>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b0f      	cmp	r3, #15
 8004eb0:	d90a      	bls.n	8004ec8 <UART_SetConfig+0x280>
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	2380      	movs	r3, #128	@ 0x80
 8004eb6:	025b      	lsls	r3, r3, #9
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d205      	bcs.n	8004ec8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60da      	str	r2, [r3, #12]
 8004ec6:	e003      	b.n	8004ed0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec8:	231a      	movs	r3, #26
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	226a      	movs	r2, #106	@ 0x6a
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2268      	movs	r2, #104	@ 0x68
 8004edc:	2101      	movs	r1, #1
 8004ede:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004eec:	231a      	movs	r3, #26
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b008      	add	sp, #32
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	cfff69f3 	.word	0xcfff69f3
 8004f00:	ffffcfff 	.word	0xffffcfff
 8004f04:	11fff4ff 	.word	0x11fff4ff
 8004f08:	40013800 	.word	0x40013800
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40004400 	.word	0x40004400
 8004f14:	00f42400 	.word	0x00f42400
 8004f18:	08005880 	.word	0x08005880

08004f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	2208      	movs	r2, #8
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d00b      	beq.n	8004f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a4a      	ldr	r2, [pc, #296]	@ (8005060 <UART_AdvFeatureConfig+0x144>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4a43      	ldr	r2, [pc, #268]	@ (8005064 <UART_AdvFeatureConfig+0x148>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a3b      	ldr	r2, [pc, #236]	@ (8005068 <UART_AdvFeatureConfig+0x14c>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	2204      	movs	r2, #4
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00b      	beq.n	8004fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a34      	ldr	r2, [pc, #208]	@ (800506c <UART_AdvFeatureConfig+0x150>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005070 <UART_AdvFeatureConfig+0x154>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d00b      	beq.n	8004ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	4a25      	ldr	r2, [pc, #148]	@ (8005074 <UART_AdvFeatureConfig+0x158>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	0019      	movs	r1, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	2240      	movs	r2, #64	@ 0x40
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d01d      	beq.n	8005036 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <UART_AdvFeatureConfig+0x15c>)
 8005002:	4013      	ands	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005016:	2380      	movs	r3, #128	@ 0x80
 8005018:	035b      	lsls	r3, r3, #13
 800501a:	429a      	cmp	r2, r3
 800501c:	d10b      	bne.n	8005036 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a15      	ldr	r2, [pc, #84]	@ (800507c <UART_AdvFeatureConfig+0x160>)
 8005026:	4013      	ands	r3, r2
 8005028:	0019      	movs	r1, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	2280      	movs	r2, #128	@ 0x80
 800503c:	4013      	ands	r3, r2
 800503e:	d00b      	beq.n	8005058 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4a0e      	ldr	r2, [pc, #56]	@ (8005080 <UART_AdvFeatureConfig+0x164>)
 8005048:	4013      	ands	r3, r2
 800504a:	0019      	movs	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }
}
 8005058:	46c0      	nop			@ (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}
 8005060:	ffff7fff 	.word	0xffff7fff
 8005064:	fffdffff 	.word	0xfffdffff
 8005068:	fffeffff 	.word	0xfffeffff
 800506c:	fffbffff 	.word	0xfffbffff
 8005070:	ffffefff 	.word	0xffffefff
 8005074:	ffffdfff 	.word	0xffffdfff
 8005078:	ffefffff 	.word	0xffefffff
 800507c:	ff9fffff 	.word	0xff9fffff
 8005080:	fff7ffff 	.word	0xfff7ffff

08005084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b092      	sub	sp, #72	@ 0x48
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2290      	movs	r2, #144	@ 0x90
 8005090:	2100      	movs	r1, #0
 8005092:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005094:	f7fd f824 	bl	80020e0 <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2208      	movs	r2, #8
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d12d      	bne.n	8005106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ac:	2280      	movs	r2, #128	@ 0x80
 80050ae:	0391      	lsls	r1, r2, #14
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4a47      	ldr	r2, [pc, #284]	@ (80051d0 <UART_CheckIdleState+0x14c>)
 80050b4:	9200      	str	r2, [sp, #0]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f000 f88e 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 80050bc:	1e03      	subs	r3, r0, #0
 80050be:	d022      	beq.n	8005106 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c0:	f3ef 8310 	mrs	r3, PRIMASK
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ca:	2301      	movs	r3, #1
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			@ (mov r8, r8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2180      	movs	r1, #128	@ 0x80
 80050e2:	438a      	bics	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2288      	movs	r2, #136	@ 0x88
 80050f6:	2120      	movs	r1, #32
 80050f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2284      	movs	r2, #132	@ 0x84
 80050fe:	2100      	movs	r1, #0
 8005100:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e060      	b.n	80051c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2204      	movs	r2, #4
 800510e:	4013      	ands	r3, r2
 8005110:	2b04      	cmp	r3, #4
 8005112:	d146      	bne.n	80051a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005116:	2280      	movs	r2, #128	@ 0x80
 8005118:	03d1      	lsls	r1, r2, #15
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4a2c      	ldr	r2, [pc, #176]	@ (80051d0 <UART_CheckIdleState+0x14c>)
 800511e:	9200      	str	r2, [sp, #0]
 8005120:	2200      	movs	r2, #0
 8005122:	f000 f859 	bl	80051d8 <UART_WaitOnFlagUntilTimeout>
 8005126:	1e03      	subs	r3, r0, #0
 8005128:	d03b      	beq.n	80051a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512a:	f3ef 8310 	mrs	r3, PRIMASK
 800512e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005130:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
 8005134:	2301      	movs	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f383 8810 	msr	PRIMASK, r3
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4922      	ldr	r1, [pc, #136]	@ (80051d4 <UART_CheckIdleState+0x150>)
 800514c:	400a      	ands	r2, r1
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f383 8810 	msr	PRIMASK, r3
}
 800515a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800515c:	f3ef 8310 	mrs	r3, PRIMASK
 8005160:	61bb      	str	r3, [r7, #24]
  return(result);
 8005162:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005164:	633b      	str	r3, [r7, #48]	@ 0x30
 8005166:	2301      	movs	r3, #1
 8005168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f383 8810 	msr	PRIMASK, r3
}
 8005170:	46c0      	nop			@ (mov r8, r8)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2101      	movs	r1, #1
 800517e:	438a      	bics	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
 8005182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f383 8810 	msr	PRIMASK, r3
}
 800518c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	228c      	movs	r2, #140	@ 0x8c
 8005192:	2120      	movs	r1, #32
 8005194:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2284      	movs	r2, #132	@ 0x84
 800519a:	2100      	movs	r1, #0
 800519c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e012      	b.n	80051c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2288      	movs	r2, #136	@ 0x88
 80051a6:	2120      	movs	r1, #32
 80051a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	228c      	movs	r2, #140	@ 0x8c
 80051ae:	2120      	movs	r1, #32
 80051b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2284      	movs	r2, #132	@ 0x84
 80051c2:	2100      	movs	r1, #0
 80051c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b010      	add	sp, #64	@ 0x40
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	01ffffff 	.word	0x01ffffff
 80051d4:	fffffedf 	.word	0xfffffedf

080051d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	1dfb      	adds	r3, r7, #7
 80051e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	e051      	b.n	800528e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	3301      	adds	r3, #1
 80051ee:	d04e      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7fc ff76 	bl	80020e0 <HAL_GetTick>
 80051f4:	0002      	movs	r2, r0
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e051      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2204      	movs	r2, #4
 8005212:	4013      	ands	r3, r2
 8005214:	d03b      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b80      	cmp	r3, #128	@ 0x80
 800521a:	d038      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0xb6>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b40      	cmp	r3, #64	@ 0x40
 8005220:	d035      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2208      	movs	r2, #8
 800522a:	4013      	ands	r3, r2
 800522c:	2b08      	cmp	r3, #8
 800522e:	d111      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2208      	movs	r2, #8
 8005236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	0018      	movs	r0, r3
 800523c:	f000 f922 	bl	8005484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2290      	movs	r2, #144	@ 0x90
 8005244:	2108      	movs	r1, #8
 8005246:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2284      	movs	r2, #132	@ 0x84
 800524c:	2100      	movs	r1, #0
 800524e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e02c      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	2380      	movs	r3, #128	@ 0x80
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	401a      	ands	r2, r3
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	429a      	cmp	r2, r3
 8005266:	d112      	bne.n	800528e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2280      	movs	r2, #128	@ 0x80
 800526e:	0112      	lsls	r2, r2, #4
 8005270:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	0018      	movs	r0, r3
 8005276:	f000 f905 	bl	8005484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2290      	movs	r2, #144	@ 0x90
 800527e:	2120      	movs	r1, #32
 8005280:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2284      	movs	r2, #132	@ 0x84
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e00f      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	425a      	negs	r2, r3
 800529e:	4153      	adcs	r3, r2
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	001a      	movs	r2, r3
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d09e      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b004      	add	sp, #16
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b090      	sub	sp, #64	@ 0x40
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	1dbb      	adds	r3, r7, #6
 80052c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1dba      	adds	r2, r7, #6
 80052d0:	215c      	movs	r1, #92	@ 0x5c
 80052d2:	8812      	ldrh	r2, [r2, #0]
 80052d4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2290      	movs	r2, #144	@ 0x90
 80052da:	2100      	movs	r1, #0
 80052dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	228c      	movs	r2, #140	@ 0x8c
 80052e2:	2122      	movs	r1, #34	@ 0x22
 80052e4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2280      	movs	r2, #128	@ 0x80
 80052ea:	589b      	ldr	r3, [r3, r2]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02d      	beq.n	800534c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2280      	movs	r2, #128	@ 0x80
 80052f4:	589b      	ldr	r3, [r3, r2]
 80052f6:	4a40      	ldr	r2, [pc, #256]	@ (80053f8 <UART_Start_Receive_DMA+0x140>)
 80052f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2280      	movs	r2, #128	@ 0x80
 80052fe:	589b      	ldr	r3, [r3, r2]
 8005300:	4a3e      	ldr	r2, [pc, #248]	@ (80053fc <UART_Start_Receive_DMA+0x144>)
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2280      	movs	r2, #128	@ 0x80
 8005308:	589b      	ldr	r3, [r3, r2]
 800530a:	4a3d      	ldr	r2, [pc, #244]	@ (8005400 <UART_Start_Receive_DMA+0x148>)
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2280      	movs	r2, #128	@ 0x80
 8005312:	589b      	ldr	r3, [r3, r2]
 8005314:	2200      	movs	r2, #0
 8005316:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2280      	movs	r2, #128	@ 0x80
 800531c:	5898      	ldr	r0, [r3, r2]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3324      	adds	r3, #36	@ 0x24
 8005324:	0019      	movs	r1, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	001a      	movs	r2, r3
 800532c:	1dbb      	adds	r3, r7, #6
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	f7fd f86c 	bl	800240c <HAL_DMA_Start_IT>
 8005334:	1e03      	subs	r3, r0, #0
 8005336:	d009      	beq.n	800534c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2290      	movs	r2, #144	@ 0x90
 800533c:	2110      	movs	r1, #16
 800533e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	228c      	movs	r2, #140	@ 0x8c
 8005344:	2120      	movs	r1, #32
 8005346:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e050      	b.n	80053ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d019      	beq.n	8005388 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535e:	2301      	movs	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2180      	movs	r1, #128	@ 0x80
 8005376:	0049      	lsls	r1, r1, #1
 8005378:	430a      	orrs	r2, r1
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	613b      	str	r3, [r7, #16]
  return(result);
 800538e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005392:	2301      	movs	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			@ (mov r8, r8)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	430a      	orrs	r2, r1
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ba:	f3ef 8310 	mrs	r3, PRIMASK
 80053be:	61fb      	str	r3, [r7, #28]
  return(result);
 80053c0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c4:	2301      	movs	r3, #1
 80053c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	46c0      	nop			@ (mov r8, r8)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2140      	movs	r1, #64	@ 0x40
 80053dc:	430a      	orrs	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b010      	add	sp, #64	@ 0x40
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	08005551 	.word	0x08005551
 80053fc:	08005681 	.word	0x08005681
 8005400:	080056c3 	.word	0x080056c3

08005404 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	@ 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540c:	f3ef 8310 	mrs	r3, PRIMASK
 8005410:	60bb      	str	r3, [r7, #8]
  return(result);
 8005412:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
 8005416:	2301      	movs	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f383 8810 	msr	PRIMASK, r3
}
 8005420:	46c0      	nop			@ (mov r8, r8)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	21c0      	movs	r1, #192	@ 0xc0
 800542e:	438a      	bics	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f383 8810 	msr	PRIMASK, r3
}
 800543c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543e:	f3ef 8310 	mrs	r3, PRIMASK
 8005442:	617b      	str	r3, [r7, #20]
  return(result);
 8005444:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005446:	623b      	str	r3, [r7, #32]
 8005448:	2301      	movs	r3, #1
 800544a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f383 8810 	msr	PRIMASK, r3
}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4908      	ldr	r1, [pc, #32]	@ (8005480 <UART_EndTxTransfer+0x7c>)
 8005460:	400a      	ands	r2, r1
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2288      	movs	r2, #136	@ 0x88
 8005474:	2120      	movs	r1, #32
 8005476:	5099      	str	r1, [r3, r2]
}
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	b00a      	add	sp, #40	@ 0x28
 800547e:	bd80      	pop	{r7, pc}
 8005480:	ff7fffff 	.word	0xff7fffff

08005484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	@ 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800548c:	f3ef 8310 	mrs	r3, PRIMASK
 8005490:	617b      	str	r3, [r7, #20]
  return(result);
 8005492:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005494:	637b      	str	r3, [r7, #52]	@ 0x34
 8005496:	2301      	movs	r3, #1
 8005498:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	46c0      	nop			@ (mov r8, r8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4926      	ldr	r1, [pc, #152]	@ (8005548 <UART_EndRxTransfer+0xc4>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054be:	f3ef 8310 	mrs	r3, PRIMASK
 80054c2:	623b      	str	r3, [r7, #32]
  return(result);
 80054c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c8:	2301      	movs	r3, #1
 80054ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	491b      	ldr	r1, [pc, #108]	@ (800554c <UART_EndRxTransfer+0xc8>)
 80054e0:	400a      	ands	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d118      	bne.n	800552a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f8:	f3ef 8310 	mrs	r3, PRIMASK
 80054fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005502:	2301      	movs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f383 8810 	msr	PRIMASK, r3
}
 800550c:	46c0      	nop			@ (mov r8, r8)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2110      	movs	r1, #16
 800551a:	438a      	bics	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	228c      	movs	r2, #140	@ 0x8c
 800552e:	2120      	movs	r1, #32
 8005530:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800553e:	46c0      	nop			@ (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b00e      	add	sp, #56	@ 0x38
 8005544:	bd80      	pop	{r7, pc}
 8005546:	46c0      	nop			@ (mov r8, r8)
 8005548:	fffffedf 	.word	0xfffffedf
 800554c:	effffffe 	.word	0xeffffffe

08005550 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b094      	sub	sp, #80	@ 0x50
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2220      	movs	r2, #32
 8005566:	4013      	ands	r3, r2
 8005568:	d16f      	bne.n	800564a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800556a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556c:	225e      	movs	r2, #94	@ 0x5e
 800556e:	2100      	movs	r1, #0
 8005570:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	61bb      	str	r3, [r7, #24]
  return(result);
 8005578:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800557c:	2301      	movs	r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	493a      	ldr	r1, [pc, #232]	@ (800567c <UART_DMAReceiveCplt+0x12c>)
 8005594:	400a      	ands	r2, r1
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800559a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a4:	f3ef 8310 	mrs	r3, PRIMASK
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ae:	2301      	movs	r3, #1
 80055b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			@ (mov r8, r8)
 80055ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2101      	movs	r1, #1
 80055c6:	438a      	bics	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d0:	f383 8810 	msr	PRIMASK, r3
}
 80055d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d6:	f3ef 8310 	mrs	r3, PRIMASK
 80055da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055de:	643b      	str	r3, [r7, #64]	@ 0x40
 80055e0:	2301      	movs	r3, #1
 80055e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	f383 8810 	msr	PRIMASK, r3
}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2140      	movs	r1, #64	@ 0x40
 80055f8:	438a      	bics	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	f383 8810 	msr	PRIMASK, r3
}
 8005606:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560a:	228c      	movs	r2, #140	@ 0x8c
 800560c:	2120      	movs	r1, #32
 800560e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d118      	bne.n	800564a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005618:	f3ef 8310 	mrs	r3, PRIMASK
 800561c:	60fb      	str	r3, [r7, #12]
  return(result);
 800561e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005622:	2301      	movs	r3, #1
 8005624:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			@ (mov r8, r8)
 800562e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2110      	movs	r1, #16
 800563a:	438a      	bics	r2, r1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f383 8810 	msr	PRIMASK, r3
}
 8005648:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800564a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564c:	2200      	movs	r2, #0
 800564e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d108      	bne.n	800566a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565a:	225c      	movs	r2, #92	@ 0x5c
 800565c:	5a9a      	ldrh	r2, [r3, r2]
 800565e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff fae5 	bl	8004c32 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005668:	e003      	b.n	8005672 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800566a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800566c:	0018      	movs	r0, r3
 800566e:	f7ff fac8 	bl	8004c02 <HAL_UART_RxCpltCallback>
}
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	46bd      	mov	sp, r7
 8005676:	b014      	add	sp, #80	@ 0x50
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	fffffeff 	.word	0xfffffeff

08005680 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2201      	movs	r2, #1
 8005692:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10a      	bne.n	80056b2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	225c      	movs	r2, #92	@ 0x5c
 80056a0:	5a9b      	ldrh	r3, [r3, r2]
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	0011      	movs	r1, r2
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7ff fac1 	bl	8004c32 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056b0:	e003      	b.n	80056ba <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff faac 	bl	8004c12 <HAL_UART_RxHalfCpltCallback>
}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	46bd      	mov	sp, r7
 80056be:	b004      	add	sp, #16
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2288      	movs	r2, #136	@ 0x88
 80056d4:	589b      	ldr	r3, [r3, r2]
 80056d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	228c      	movs	r2, #140	@ 0x8c
 80056dc:	589b      	ldr	r3, [r3, r2]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2280      	movs	r2, #128	@ 0x80
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b80      	cmp	r3, #128	@ 0x80
 80056ec:	d10a      	bne.n	8005704 <UART_DMAError+0x42>
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b21      	cmp	r3, #33	@ 0x21
 80056f2:	d107      	bne.n	8005704 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2256      	movs	r2, #86	@ 0x56
 80056f8:	2100      	movs	r1, #0
 80056fa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0018      	movs	r0, r3
 8005700:	f7ff fe80 	bl	8005404 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2240      	movs	r2, #64	@ 0x40
 800570c:	4013      	ands	r3, r2
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	d10a      	bne.n	8005728 <UART_DMAError+0x66>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b22      	cmp	r3, #34	@ 0x22
 8005716:	d107      	bne.n	8005728 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	225e      	movs	r2, #94	@ 0x5e
 800571c:	2100      	movs	r1, #0
 800571e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff feae 	bl	8005484 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2290      	movs	r2, #144	@ 0x90
 800572c:	589b      	ldr	r3, [r3, r2]
 800572e:	2210      	movs	r2, #16
 8005730:	431a      	orrs	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2190      	movs	r1, #144	@ 0x90
 8005736:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff fa71 	bl	8004c22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005740:	46c0      	nop			@ (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b006      	add	sp, #24
 8005746:	bd80      	pop	{r7, pc}

08005748 <memset>:
 8005748:	0003      	movs	r3, r0
 800574a:	1882      	adds	r2, r0, r2
 800574c:	4293      	cmp	r3, r2
 800574e:	d100      	bne.n	8005752 <memset+0xa>
 8005750:	4770      	bx	lr
 8005752:	7019      	strb	r1, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	e7f9      	b.n	800574c <memset+0x4>

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	2600      	movs	r6, #0
 800575c:	4c0c      	ldr	r4, [pc, #48]	@ (8005790 <__libc_init_array+0x38>)
 800575e:	4d0d      	ldr	r5, [pc, #52]	@ (8005794 <__libc_init_array+0x3c>)
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	42a6      	cmp	r6, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	2600      	movs	r6, #0
 800576a:	f000 f819 	bl	80057a0 <_init>
 800576e:	4c0a      	ldr	r4, [pc, #40]	@ (8005798 <__libc_init_array+0x40>)
 8005770:	4d0a      	ldr	r5, [pc, #40]	@ (800579c <__libc_init_array+0x44>)
 8005772:	1b64      	subs	r4, r4, r5
 8005774:	10a4      	asrs	r4, r4, #2
 8005776:	42a6      	cmp	r6, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	00b3      	lsls	r3, r6, #2
 800577e:	58eb      	ldr	r3, [r5, r3]
 8005780:	4798      	blx	r3
 8005782:	3601      	adds	r6, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	00b3      	lsls	r3, r6, #2
 8005788:	58eb      	ldr	r3, [r5, r3]
 800578a:	4798      	blx	r3
 800578c:	3601      	adds	r6, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	08005898 	.word	0x08005898
 8005794:	08005898 	.word	0x08005898
 8005798:	080058a0 	.word	0x080058a0
 800579c:	08005898 	.word	0x08005898

080057a0 <_init>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr

080057ac <_fini>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr
