
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005304  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080053bc  080053bc  000063bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  0800549c  0800549c  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800549c  0800549c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080054a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  2000006c  08005514  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08005514  00007648  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001361a  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002634  00000000  00000000  0001a6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b08  00000000  00000000  0001dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001762d  00000000  00000000  0001e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118e2  00000000  00000000  00035c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d08e  00000000  00000000  000474e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000d45b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d7888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000006c 	.word	0x2000006c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080053a4 	.word	0x080053a4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000070 	.word	0x20000070
 80000fc:	080053a4 	.word	0x080053a4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f8ab 	bl	800037c <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f89d 	bl	800037c <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			@ (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f893 	bl	800037c <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			@ (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f839 	bl	80002dc <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82f 	bl	80002dc <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	024e      	lsls	r6, r1, #9
 8000292:	004c      	lsls	r4, r1, #1
 8000294:	0245      	lsls	r5, r0, #9
 8000296:	0a6d      	lsrs	r5, r5, #9
 8000298:	0e12      	lsrs	r2, r2, #24
 800029a:	0fc3      	lsrs	r3, r0, #31
 800029c:	0a76      	lsrs	r6, r6, #9
 800029e:	0e24      	lsrs	r4, r4, #24
 80002a0:	0fc9      	lsrs	r1, r1, #31
 80002a2:	2aff      	cmp	r2, #255	@ 0xff
 80002a4:	d010      	beq.n	80002c8 <__eqsf2+0x3c>
 80002a6:	2cff      	cmp	r4, #255	@ 0xff
 80002a8:	d00c      	beq.n	80002c4 <__eqsf2+0x38>
 80002aa:	2001      	movs	r0, #1
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d10a      	bne.n	80002c6 <__eqsf2+0x3a>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d108      	bne.n	80002c6 <__eqsf2+0x3a>
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d00f      	beq.n	80002d8 <__eqsf2+0x4c>
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d104      	bne.n	80002c6 <__eqsf2+0x3a>
 80002bc:	0028      	movs	r0, r5
 80002be:	1e43      	subs	r3, r0, #1
 80002c0:	4198      	sbcs	r0, r3
 80002c2:	e000      	b.n	80002c6 <__eqsf2+0x3a>
 80002c4:	2001      	movs	r0, #1
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	2001      	movs	r0, #1
 80002ca:	2cff      	cmp	r4, #255	@ 0xff
 80002cc:	d1fb      	bne.n	80002c6 <__eqsf2+0x3a>
 80002ce:	4335      	orrs	r5, r6
 80002d0:	d1f9      	bne.n	80002c6 <__eqsf2+0x3a>
 80002d2:	404b      	eors	r3, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	e7f6      	b.n	80002c6 <__eqsf2+0x3a>
 80002d8:	2000      	movs	r0, #0
 80002da:	e7f4      	b.n	80002c6 <__eqsf2+0x3a>

080002dc <__gesf2>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	0042      	lsls	r2, r0, #1
 80002e0:	0244      	lsls	r4, r0, #9
 80002e2:	024d      	lsls	r5, r1, #9
 80002e4:	0fc3      	lsrs	r3, r0, #31
 80002e6:	0048      	lsls	r0, r1, #1
 80002e8:	0a64      	lsrs	r4, r4, #9
 80002ea:	0e12      	lsrs	r2, r2, #24
 80002ec:	0a6d      	lsrs	r5, r5, #9
 80002ee:	0e00      	lsrs	r0, r0, #24
 80002f0:	0fc9      	lsrs	r1, r1, #31
 80002f2:	2aff      	cmp	r2, #255	@ 0xff
 80002f4:	d019      	beq.n	800032a <__gesf2+0x4e>
 80002f6:	28ff      	cmp	r0, #255	@ 0xff
 80002f8:	d00b      	beq.n	8000312 <__gesf2+0x36>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d11e      	bne.n	800033c <__gesf2+0x60>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d10b      	bne.n	800031a <__gesf2+0x3e>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d027      	beq.n	8000356 <__gesf2+0x7a>
 8000306:	2c00      	cmp	r4, #0
 8000308:	d134      	bne.n	8000374 <__gesf2+0x98>
 800030a:	2900      	cmp	r1, #0
 800030c:	d02f      	beq.n	800036e <__gesf2+0x92>
 800030e:	0008      	movs	r0, r1
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	2d00      	cmp	r5, #0
 8000314:	d128      	bne.n	8000368 <__gesf2+0x8c>
 8000316:	2a00      	cmp	r2, #0
 8000318:	d101      	bne.n	800031e <__gesf2+0x42>
 800031a:	2c00      	cmp	r4, #0
 800031c:	d0f5      	beq.n	800030a <__gesf2+0x2e>
 800031e:	428b      	cmp	r3, r1
 8000320:	d107      	bne.n	8000332 <__gesf2+0x56>
 8000322:	2b00      	cmp	r3, #0
 8000324:	d023      	beq.n	800036e <__gesf2+0x92>
 8000326:	0018      	movs	r0, r3
 8000328:	e7f2      	b.n	8000310 <__gesf2+0x34>
 800032a:	2c00      	cmp	r4, #0
 800032c:	d11c      	bne.n	8000368 <__gesf2+0x8c>
 800032e:	28ff      	cmp	r0, #255	@ 0xff
 8000330:	d014      	beq.n	800035c <__gesf2+0x80>
 8000332:	1e58      	subs	r0, r3, #1
 8000334:	2302      	movs	r3, #2
 8000336:	4018      	ands	r0, r3
 8000338:	3801      	subs	r0, #1
 800033a:	e7e9      	b.n	8000310 <__gesf2+0x34>
 800033c:	2800      	cmp	r0, #0
 800033e:	d0f8      	beq.n	8000332 <__gesf2+0x56>
 8000340:	428b      	cmp	r3, r1
 8000342:	d1f6      	bne.n	8000332 <__gesf2+0x56>
 8000344:	4282      	cmp	r2, r0
 8000346:	dcf4      	bgt.n	8000332 <__gesf2+0x56>
 8000348:	dbeb      	blt.n	8000322 <__gesf2+0x46>
 800034a:	42ac      	cmp	r4, r5
 800034c:	d8f1      	bhi.n	8000332 <__gesf2+0x56>
 800034e:	2000      	movs	r0, #0
 8000350:	42ac      	cmp	r4, r5
 8000352:	d2dd      	bcs.n	8000310 <__gesf2+0x34>
 8000354:	e7e5      	b.n	8000322 <__gesf2+0x46>
 8000356:	2c00      	cmp	r4, #0
 8000358:	d0da      	beq.n	8000310 <__gesf2+0x34>
 800035a:	e7ea      	b.n	8000332 <__gesf2+0x56>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d103      	bne.n	8000368 <__gesf2+0x8c>
 8000360:	428b      	cmp	r3, r1
 8000362:	d1e6      	bne.n	8000332 <__gesf2+0x56>
 8000364:	2000      	movs	r0, #0
 8000366:	e7d3      	b.n	8000310 <__gesf2+0x34>
 8000368:	2002      	movs	r0, #2
 800036a:	4240      	negs	r0, r0
 800036c:	e7d0      	b.n	8000310 <__gesf2+0x34>
 800036e:	2001      	movs	r0, #1
 8000370:	4240      	negs	r0, r0
 8000372:	e7cd      	b.n	8000310 <__gesf2+0x34>
 8000374:	428b      	cmp	r3, r1
 8000376:	d0e8      	beq.n	800034a <__gesf2+0x6e>
 8000378:	e7db      	b.n	8000332 <__gesf2+0x56>
 800037a:	46c0      	nop			@ (mov r8, r8)

0800037c <__lesf2>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	0042      	lsls	r2, r0, #1
 8000380:	0244      	lsls	r4, r0, #9
 8000382:	024d      	lsls	r5, r1, #9
 8000384:	0fc3      	lsrs	r3, r0, #31
 8000386:	0048      	lsls	r0, r1, #1
 8000388:	0a64      	lsrs	r4, r4, #9
 800038a:	0e12      	lsrs	r2, r2, #24
 800038c:	0a6d      	lsrs	r5, r5, #9
 800038e:	0e00      	lsrs	r0, r0, #24
 8000390:	0fc9      	lsrs	r1, r1, #31
 8000392:	2aff      	cmp	r2, #255	@ 0xff
 8000394:	d01a      	beq.n	80003cc <__lesf2+0x50>
 8000396:	28ff      	cmp	r0, #255	@ 0xff
 8000398:	d00e      	beq.n	80003b8 <__lesf2+0x3c>
 800039a:	2a00      	cmp	r2, #0
 800039c:	d11e      	bne.n	80003dc <__lesf2+0x60>
 800039e:	2800      	cmp	r0, #0
 80003a0:	d10e      	bne.n	80003c0 <__lesf2+0x44>
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d02a      	beq.n	80003fc <__lesf2+0x80>
 80003a6:	2c00      	cmp	r4, #0
 80003a8:	d00c      	beq.n	80003c4 <__lesf2+0x48>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d01d      	beq.n	80003ea <__lesf2+0x6e>
 80003ae:	1e58      	subs	r0, r3, #1
 80003b0:	2302      	movs	r3, #2
 80003b2:	4018      	ands	r0, r3
 80003b4:	3801      	subs	r0, #1
 80003b6:	e010      	b.n	80003da <__lesf2+0x5e>
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d10d      	bne.n	80003d8 <__lesf2+0x5c>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	d120      	bne.n	8000402 <__lesf2+0x86>
 80003c0:	2c00      	cmp	r4, #0
 80003c2:	d11e      	bne.n	8000402 <__lesf2+0x86>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d023      	beq.n	8000410 <__lesf2+0x94>
 80003c8:	0008      	movs	r0, r1
 80003ca:	e006      	b.n	80003da <__lesf2+0x5e>
 80003cc:	2c00      	cmp	r4, #0
 80003ce:	d103      	bne.n	80003d8 <__lesf2+0x5c>
 80003d0:	28ff      	cmp	r0, #255	@ 0xff
 80003d2:	d1ec      	bne.n	80003ae <__lesf2+0x32>
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d017      	beq.n	8000408 <__lesf2+0x8c>
 80003d8:	2002      	movs	r0, #2
 80003da:	bd30      	pop	{r4, r5, pc}
 80003dc:	2800      	cmp	r0, #0
 80003de:	d0e6      	beq.n	80003ae <__lesf2+0x32>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d1e4      	bne.n	80003ae <__lesf2+0x32>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	dce2      	bgt.n	80003ae <__lesf2+0x32>
 80003e8:	db04      	blt.n	80003f4 <__lesf2+0x78>
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	d8df      	bhi.n	80003ae <__lesf2+0x32>
 80003ee:	2000      	movs	r0, #0
 80003f0:	42ac      	cmp	r4, r5
 80003f2:	d2f2      	bcs.n	80003da <__lesf2+0x5e>
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00b      	beq.n	8000410 <__lesf2+0x94>
 80003f8:	0018      	movs	r0, r3
 80003fa:	e7ee      	b.n	80003da <__lesf2+0x5e>
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d0ec      	beq.n	80003da <__lesf2+0x5e>
 8000400:	e7d5      	b.n	80003ae <__lesf2+0x32>
 8000402:	428b      	cmp	r3, r1
 8000404:	d1d3      	bne.n	80003ae <__lesf2+0x32>
 8000406:	e7f5      	b.n	80003f4 <__lesf2+0x78>
 8000408:	2000      	movs	r0, #0
 800040a:	428b      	cmp	r3, r1
 800040c:	d0e5      	beq.n	80003da <__lesf2+0x5e>
 800040e:	e7ce      	b.n	80003ae <__lesf2+0x32>
 8000410:	2001      	movs	r0, #1
 8000412:	4240      	negs	r0, r0
 8000414:	e7e1      	b.n	80003da <__lesf2+0x5e>
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_i2f>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	2800      	cmp	r0, #0
 800041c:	d013      	beq.n	8000446 <__aeabi_i2f+0x2e>
 800041e:	17c3      	asrs	r3, r0, #31
 8000420:	18c5      	adds	r5, r0, r3
 8000422:	405d      	eors	r5, r3
 8000424:	0fc4      	lsrs	r4, r0, #31
 8000426:	0028      	movs	r0, r5
 8000428:	f000 f842 	bl	80004b0 <__clzsi2>
 800042c:	239e      	movs	r3, #158	@ 0x9e
 800042e:	0001      	movs	r1, r0
 8000430:	1a1b      	subs	r3, r3, r0
 8000432:	2b96      	cmp	r3, #150	@ 0x96
 8000434:	dc0f      	bgt.n	8000456 <__aeabi_i2f+0x3e>
 8000436:	2808      	cmp	r0, #8
 8000438:	d034      	beq.n	80004a4 <__aeabi_i2f+0x8c>
 800043a:	3908      	subs	r1, #8
 800043c:	408d      	lsls	r5, r1
 800043e:	026d      	lsls	r5, r5, #9
 8000440:	0a6d      	lsrs	r5, r5, #9
 8000442:	b2d8      	uxtb	r0, r3
 8000444:	e002      	b.n	800044c <__aeabi_i2f+0x34>
 8000446:	2400      	movs	r4, #0
 8000448:	2000      	movs	r0, #0
 800044a:	2500      	movs	r5, #0
 800044c:	05c0      	lsls	r0, r0, #23
 800044e:	4328      	orrs	r0, r5
 8000450:	07e4      	lsls	r4, r4, #31
 8000452:	4320      	orrs	r0, r4
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	2b99      	cmp	r3, #153	@ 0x99
 8000458:	dc16      	bgt.n	8000488 <__aeabi_i2f+0x70>
 800045a:	1f42      	subs	r2, r0, #5
 800045c:	2805      	cmp	r0, #5
 800045e:	d000      	beq.n	8000462 <__aeabi_i2f+0x4a>
 8000460:	4095      	lsls	r5, r2
 8000462:	002a      	movs	r2, r5
 8000464:	4811      	ldr	r0, [pc, #68]	@ (80004ac <__aeabi_i2f+0x94>)
 8000466:	4002      	ands	r2, r0
 8000468:	076e      	lsls	r6, r5, #29
 800046a:	d009      	beq.n	8000480 <__aeabi_i2f+0x68>
 800046c:	260f      	movs	r6, #15
 800046e:	4035      	ands	r5, r6
 8000470:	2d04      	cmp	r5, #4
 8000472:	d005      	beq.n	8000480 <__aeabi_i2f+0x68>
 8000474:	3204      	adds	r2, #4
 8000476:	0155      	lsls	r5, r2, #5
 8000478:	d502      	bpl.n	8000480 <__aeabi_i2f+0x68>
 800047a:	239f      	movs	r3, #159	@ 0x9f
 800047c:	4002      	ands	r2, r0
 800047e:	1a5b      	subs	r3, r3, r1
 8000480:	0192      	lsls	r2, r2, #6
 8000482:	0a55      	lsrs	r5, r2, #9
 8000484:	b2d8      	uxtb	r0, r3
 8000486:	e7e1      	b.n	800044c <__aeabi_i2f+0x34>
 8000488:	2205      	movs	r2, #5
 800048a:	1a12      	subs	r2, r2, r0
 800048c:	0028      	movs	r0, r5
 800048e:	40d0      	lsrs	r0, r2
 8000490:	0002      	movs	r2, r0
 8000492:	0008      	movs	r0, r1
 8000494:	301b      	adds	r0, #27
 8000496:	4085      	lsls	r5, r0
 8000498:	0028      	movs	r0, r5
 800049a:	1e45      	subs	r5, r0, #1
 800049c:	41a8      	sbcs	r0, r5
 800049e:	4302      	orrs	r2, r0
 80004a0:	0015      	movs	r5, r2
 80004a2:	e7de      	b.n	8000462 <__aeabi_i2f+0x4a>
 80004a4:	026d      	lsls	r5, r5, #9
 80004a6:	2096      	movs	r0, #150	@ 0x96
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	e7cf      	b.n	800044c <__aeabi_i2f+0x34>
 80004ac:	fbffffff 	.word	0xfbffffff

080004b0 <__clzsi2>:
 80004b0:	211c      	movs	r1, #28
 80004b2:	2301      	movs	r3, #1
 80004b4:	041b      	lsls	r3, r3, #16
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d301      	bcc.n	80004be <__clzsi2+0xe>
 80004ba:	0c00      	lsrs	r0, r0, #16
 80004bc:	3910      	subs	r1, #16
 80004be:	0a1b      	lsrs	r3, r3, #8
 80004c0:	4298      	cmp	r0, r3
 80004c2:	d301      	bcc.n	80004c8 <__clzsi2+0x18>
 80004c4:	0a00      	lsrs	r0, r0, #8
 80004c6:	3908      	subs	r1, #8
 80004c8:	091b      	lsrs	r3, r3, #4
 80004ca:	4298      	cmp	r0, r3
 80004cc:	d301      	bcc.n	80004d2 <__clzsi2+0x22>
 80004ce:	0900      	lsrs	r0, r0, #4
 80004d0:	3904      	subs	r1, #4
 80004d2:	a202      	add	r2, pc, #8	@ (adr r2, 80004dc <__clzsi2+0x2c>)
 80004d4:	5c10      	ldrb	r0, [r2, r0]
 80004d6:	1840      	adds	r0, r0, r1
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	02020304 	.word	0x02020304
 80004e0:	01010101 	.word	0x01010101
	...

080004ec <_ZN3LEDC1EP6WS2812>:
#include "led.h"

LED::LED(WS2812* neopixel){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	Neopixel.do_forwardRewrite();
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8000512:	0018      	movs	r0, r3
 8000514:	f001 f9dc 	bl	80018d0 <_ZN6WS281217do_forwardRewriteEv>
}
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000220 	.word	0x20000220

08000524 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	Neopixel.do_backRewrite();
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 800052e:	0018      	movs	r0, r3
 8000530:	f001 fa78 	bl	8001a24 <_ZN6WS281214do_backRewriteEv>
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000220 	.word	0x20000220

08000540 <_Z6readIDv>:

uint8_t readID(){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
	uint8_t ID = 0;
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){
 800054c:	2380      	movs	r3, #128	@ 0x80
 800054e:	015a      	lsls	r2, r3, #5
 8000550:	23a0      	movs	r3, #160	@ 0xa0
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f002 f8f0 	bl	800273c <HAL_GPIO_ReadPin>
 800055c:	0003      	movs	r3, r0
 800055e:	3b01      	subs	r3, #1
 8000560:	425a      	negs	r2, r3
 8000562:	4153      	adcs	r3, r2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d004      	beq.n	8000574 <_Z6readIDv+0x34>
		ID+=1;
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	1dfa      	adds	r2, r7, #7
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	3201      	adds	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <_Z6readIDv+0xa8>)
 8000576:	2108      	movs	r1, #8
 8000578:	0018      	movs	r0, r3
 800057a:	f002 f8df 	bl	800273c <HAL_GPIO_ReadPin>
 800057e:	0003      	movs	r3, r0
 8000580:	3b01      	subs	r3, #1
 8000582:	425a      	negs	r2, r3
 8000584:	4153      	adcs	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d004      	beq.n	8000596 <_Z6readIDv+0x56>
		ID+=2;
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	1dfa      	adds	r2, r7, #7
 8000590:	7812      	ldrb	r2, [r2, #0]
 8000592:	3202      	adds	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <_Z6readIDv+0xa8>)
 8000598:	2110      	movs	r1, #16
 800059a:	0018      	movs	r0, r3
 800059c:	f002 f8ce 	bl	800273c <HAL_GPIO_ReadPin>
 80005a0:	0003      	movs	r3, r0
 80005a2:	3b01      	subs	r3, #1
 80005a4:	425a      	negs	r2, r3
 80005a6:	4153      	adcs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d004      	beq.n	80005b8 <_Z6readIDv+0x78>
		ID+=4;
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	1dfa      	adds	r2, r7, #7
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	3204      	adds	r2, #4
 80005b6:	701a      	strb	r2, [r3, #0]
	}
	//養生5番はここを消す。ハード故障。
//	if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){
//		ID+=8;
//	}
	if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <_Z6readIDv+0xa8>)
 80005ba:	2140      	movs	r1, #64	@ 0x40
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 f8bd 	bl	800273c <HAL_GPIO_ReadPin>
 80005c2:	0003      	movs	r3, r0
 80005c4:	3b01      	subs	r3, #1
 80005c6:	425a      	negs	r2, r3
 80005c8:	4153      	adcs	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <_Z6readIDv+0x9a>
		ID+=16;
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	1dfa      	adds	r2, r7, #7
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	3210      	adds	r2, #16
 80005d8:	701a      	strb	r2, [r3, #0]
	}
	return ID;
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	50000400 	.word	0x50000400

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	b099      	sub	sp, #100	@ 0x64
 80005f0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 fafb 	bl	8001bec <HAL_Init>

  /* USER CODE BEGIN Init */
  for(uint8_t i=0; i<128; i++){
 80005f6:	233f      	movs	r3, #63	@ 0x3f
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	e00a      	b.n	8000616 <main+0x2a>
	  rxBuf[i] = 255;
 8000600:	203f      	movs	r0, #63	@ 0x3f
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4a9c      	ldr	r2, [pc, #624]	@ (8000878 <main+0x28c>)
 8000608:	21ff      	movs	r1, #255	@ 0xff
 800060a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0; i<128; i++){
 800060c:	183b      	adds	r3, r7, r0
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	183b      	adds	r3, r7, r0
 8000612:	3201      	adds	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	233f      	movs	r3, #63	@ 0x3f
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b25b      	sxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	daee      	bge.n	8000600 <main+0x14>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 fb2f 	bl	8000c84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fc79 	bl	8000f1c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800062a:	f000 fc51 	bl	8000ed0 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800062e:	f000 fc17 	bl	8000e60 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000632:	f000 fb83 	bl	8000d3c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, rxBuf, 128);
 8000636:	4990      	ldr	r1, [pc, #576]	@ (8000878 <main+0x28c>)
 8000638:	4b90      	ldr	r3, [pc, #576]	@ (800087c <main+0x290>)
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	0018      	movs	r0, r3
 800063e:	f004 f88b 	bl	8004758 <HAL_UART_Receive_DMA>
  HAL_Delay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f001 fb58 	bl	8001cf8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	readBuf(&huart2, rxBuf, 128, Data, 30, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 60);
 8000648:	4a8d      	ldr	r2, [pc, #564]	@ (8000880 <main+0x294>)
 800064a:	498b      	ldr	r1, [pc, #556]	@ (8000878 <main+0x28c>)
 800064c:	488b      	ldr	r0, [pc, #556]	@ (800087c <main+0x290>)
 800064e:	233c      	movs	r3, #60	@ 0x3c
 8000650:	9306      	str	r3, [sp, #24]
 8000652:	4b8c      	ldr	r3, [pc, #560]	@ (8000884 <main+0x298>)
 8000654:	9305      	str	r3, [sp, #20]
 8000656:	4b8c      	ldr	r3, [pc, #560]	@ (8000888 <main+0x29c>)
 8000658:	9304      	str	r3, [sp, #16]
 800065a:	4b8c      	ldr	r3, [pc, #560]	@ (800088c <main+0x2a0>)
 800065c:	9303      	str	r3, [sp, #12]
 800065e:	4b8c      	ldr	r3, [pc, #560]	@ (8000890 <main+0x2a4>)
 8000660:	9302      	str	r3, [sp, #8]
 8000662:	2300      	movs	r3, #0
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	231e      	movs	r3, #30
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	0013      	movs	r3, r2
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	f000 fcc5 	bl	8000ffc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>
	myid = readID();
 8000672:	f7ff ff65 	bl	8000540 <_Z6readIDv>
 8000676:	0003      	movs	r3, r0
 8000678:	b25a      	sxtb	r2, r3
 800067a:	4b86      	ldr	r3, [pc, #536]	@ (8000894 <main+0x2a8>)
 800067c:	701a      	strb	r2, [r3, #0]


	circle_x = Data[0]-100;
 800067e:	4b80      	ldr	r3, [pc, #512]	@ (8000880 <main+0x294>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3b64      	subs	r3, #100	@ 0x64
 8000684:	b29b      	uxth	r3, r3
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b83      	ldr	r3, [pc, #524]	@ (8000898 <main+0x2ac>)
 800068a:	801a      	strh	r2, [r3, #0]
	circle_z = Data[1]-100;
 800068c:	4b7c      	ldr	r3, [pc, #496]	@ (8000880 <main+0x294>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	3b64      	subs	r3, #100	@ 0x64
 8000692:	b29b      	uxth	r3, r3
 8000694:	b21a      	sxth	r2, r3
 8000696:	4b81      	ldr	r3, [pc, #516]	@ (800089c <main+0x2b0>)
 8000698:	801a      	strh	r2, [r3, #0]
	circle_r = Data[2];
 800069a:	4b79      	ldr	r3, [pc, #484]	@ (8000880 <main+0x294>)
 800069c:	789a      	ldrb	r2, [r3, #2]
 800069e:	4b80      	ldr	r3, [pc, #512]	@ (80008a0 <main+0x2b4>)
 80006a0:	701a      	strb	r2, [r3, #0]
	circle_h = Data[3];
 80006a2:	4b77      	ldr	r3, [pc, #476]	@ (8000880 <main+0x294>)
 80006a4:	78da      	ldrb	r2, [r3, #3]
 80006a6:	4b7f      	ldr	r3, [pc, #508]	@ (80008a4 <main+0x2b8>)
 80006a8:	701a      	strb	r2, [r3, #0]
	circle_s = Data[4];
 80006aa:	4b75      	ldr	r3, [pc, #468]	@ (8000880 <main+0x294>)
 80006ac:	791a      	ldrb	r2, [r3, #4]
 80006ae:	4b7e      	ldr	r3, [pc, #504]	@ (80008a8 <main+0x2bc>)
 80006b0:	701a      	strb	r2, [r3, #0]
	circle_v = Data[5];
 80006b2:	4b73      	ldr	r3, [pc, #460]	@ (8000880 <main+0x294>)
 80006b4:	795a      	ldrb	r2, [r3, #5]
 80006b6:	4b7d      	ldr	r3, [pc, #500]	@ (80008ac <main+0x2c0>)
 80006b8:	701a      	strb	r2, [r3, #0]
	back_h = Data[6];
 80006ba:	4b71      	ldr	r3, [pc, #452]	@ (8000880 <main+0x294>)
 80006bc:	799a      	ldrb	r2, [r3, #6]
 80006be:	4b7c      	ldr	r3, [pc, #496]	@ (80008b0 <main+0x2c4>)
 80006c0:	701a      	strb	r2, [r3, #0]
	back_s = Data[7];
 80006c2:	4b6f      	ldr	r3, [pc, #444]	@ (8000880 <main+0x294>)
 80006c4:	79da      	ldrb	r2, [r3, #7]
 80006c6:	4b7b      	ldr	r3, [pc, #492]	@ (80008b4 <main+0x2c8>)
 80006c8:	701a      	strb	r2, [r3, #0]
	back_v = Data[8];
 80006ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000880 <main+0x294>)
 80006cc:	7a1a      	ldrb	r2, [r3, #8]
 80006ce:	4b7a      	ldr	r3, [pc, #488]	@ (80008b8 <main+0x2cc>)
 80006d0:	701a      	strb	r2, [r3, #0]
	square_h = Data[9];
 80006d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000880 <main+0x294>)
 80006d4:	7a5a      	ldrb	r2, [r3, #9]
 80006d6:	4b79      	ldr	r3, [pc, #484]	@ (80008bc <main+0x2d0>)
 80006d8:	701a      	strb	r2, [r3, #0]
	square_s = Data[10];
 80006da:	4b69      	ldr	r3, [pc, #420]	@ (8000880 <main+0x294>)
 80006dc:	7a9a      	ldrb	r2, [r3, #10]
 80006de:	4b78      	ldr	r3, [pc, #480]	@ (80008c0 <main+0x2d4>)
 80006e0:	701a      	strb	r2, [r3, #0]
	square_v = Data[11];
 80006e2:	4b67      	ldr	r3, [pc, #412]	@ (8000880 <main+0x294>)
 80006e4:	7ada      	ldrb	r2, [r3, #11]
 80006e6:	4b77      	ldr	r3, [pc, #476]	@ (80008c4 <main+0x2d8>)
 80006e8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<6; i++){
 80006ea:	233e      	movs	r3, #62	@ 0x3e
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	e02e      	b.n	8000752 <main+0x166>
		image_id[i] = Data[12+(i*3)];
 80006f4:	203e      	movs	r0, #62	@ 0x3e
 80006f6:	183b      	adds	r3, r7, r0
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	0013      	movs	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	189b      	adds	r3, r3, r2
 8000700:	330c      	adds	r3, #12
 8000702:	001a      	movs	r2, r3
 8000704:	183b      	adds	r3, r7, r0
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	495d      	ldr	r1, [pc, #372]	@ (8000880 <main+0x294>)
 800070a:	5c89      	ldrb	r1, [r1, r2]
 800070c:	4a6e      	ldr	r2, [pc, #440]	@ (80008c8 <main+0x2dc>)
 800070e:	54d1      	strb	r1, [r2, r3]
		image_x[i] = Data[13+(i*3)]-100;
 8000710:	183b      	adds	r3, r7, r0
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	0013      	movs	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	189b      	adds	r3, r3, r2
 800071a:	330d      	adds	r3, #13
 800071c:	4a58      	ldr	r2, [pc, #352]	@ (8000880 <main+0x294>)
 800071e:	5cd2      	ldrb	r2, [r2, r3]
 8000720:	183b      	adds	r3, r7, r0
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3a64      	subs	r2, #100	@ 0x64
 8000726:	b2d1      	uxtb	r1, r2
 8000728:	4a68      	ldr	r2, [pc, #416]	@ (80008cc <main+0x2e0>)
 800072a:	54d1      	strb	r1, [r2, r3]
		image_z[i] = Data[14+(i*3)]-100;
 800072c:	183b      	adds	r3, r7, r0
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	0013      	movs	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	189b      	adds	r3, r3, r2
 8000736:	330e      	adds	r3, #14
 8000738:	4a51      	ldr	r2, [pc, #324]	@ (8000880 <main+0x294>)
 800073a:	5cd2      	ldrb	r2, [r2, r3]
 800073c:	183b      	adds	r3, r7, r0
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	3a64      	subs	r2, #100	@ 0x64
 8000742:	b2d1      	uxtb	r1, r2
 8000744:	4a62      	ldr	r2, [pc, #392]	@ (80008d0 <main+0x2e4>)
 8000746:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<6; i++){
 8000748:	183b      	adds	r3, r7, r0
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	183b      	adds	r3, r7, r0
 800074e:	3201      	adds	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	233e      	movs	r3, #62	@ 0x3e
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b05      	cmp	r3, #5
 800075a:	d9cb      	bls.n	80006f4 <main+0x108>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Neopixel.clear();
 800075c:	4b5d      	ldr	r3, [pc, #372]	@ (80008d4 <main+0x2e8>)
 800075e:	0018      	movs	r0, r3
 8000760:	f000 ffa8 	bl	80016b4 <_ZN6WS28125clearEv>


	  //----------------------------------------------
	  uint16_t PANEL_START_X = 0;
 8000764:	213c      	movs	r1, #60	@ 0x3c
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	801a      	strh	r2, [r3, #0]
	  uint16_t PANEL_START_Z = 0;
 800076c:	203a      	movs	r0, #58	@ 0x3a
 800076e:	183b      	adds	r3, r7, r0
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]

	  if	 (myid==0){PANEL_START_X = 0; PANEL_START_Z = 0;}
 8000774:	4b47      	ldr	r3, [pc, #284]	@ (8000894 <main+0x2a8>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d106      	bne.n	800078c <main+0x1a0>
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	801a      	strh	r2, [r3, #0]
 8000784:	183b      	adds	r3, r7, r0
 8000786:	2200      	movs	r2, #0
 8000788:	801a      	strh	r2, [r3, #0]
 800078a:	e06e      	b.n	800086a <main+0x27e>
	  else if(myid==1){PANEL_START_X = 0; PANEL_START_Z = 16;}
 800078c:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <main+0x2a8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	2b01      	cmp	r3, #1
 8000794:	d108      	bne.n	80007a8 <main+0x1bc>
 8000796:	233c      	movs	r3, #60	@ 0x3c
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	2200      	movs	r2, #0
 800079c:	801a      	strh	r2, [r3, #0]
 800079e:	233a      	movs	r3, #58	@ 0x3a
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2210      	movs	r2, #16
 80007a4:	801a      	strh	r2, [r3, #0]
 80007a6:	e060      	b.n	800086a <main+0x27e>
	  else if(myid==2){PANEL_START_X = 0; PANEL_START_Z = 32;}
 80007a8:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <main+0x2a8>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d108      	bne.n	80007c4 <main+0x1d8>
 80007b2:	233c      	movs	r3, #60	@ 0x3c
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	801a      	strh	r2, [r3, #0]
 80007ba:	233a      	movs	r3, #58	@ 0x3a
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	2220      	movs	r2, #32
 80007c0:	801a      	strh	r2, [r3, #0]
 80007c2:	e052      	b.n	800086a <main+0x27e>

	  else if(myid==3){PANEL_START_X = 16; PANEL_START_Z = 0;}
 80007c4:	4b33      	ldr	r3, [pc, #204]	@ (8000894 <main+0x2a8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d108      	bne.n	80007e0 <main+0x1f4>
 80007ce:	233c      	movs	r3, #60	@ 0x3c
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	2210      	movs	r2, #16
 80007d4:	801a      	strh	r2, [r3, #0]
 80007d6:	233a      	movs	r3, #58	@ 0x3a
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	e044      	b.n	800086a <main+0x27e>
	  else if(myid==4){PANEL_START_X = 16; PANEL_START_Z = 16;}
 80007e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <main+0x2a8>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d108      	bne.n	80007fc <main+0x210>
 80007ea:	233c      	movs	r3, #60	@ 0x3c
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2210      	movs	r2, #16
 80007f0:	801a      	strh	r2, [r3, #0]
 80007f2:	233a      	movs	r3, #58	@ 0x3a
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2210      	movs	r2, #16
 80007f8:	801a      	strh	r2, [r3, #0]
 80007fa:	e036      	b.n	800086a <main+0x27e>
	  else if(myid==5){PANEL_START_X = 16; PANEL_START_Z = 32;}
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <main+0x2a8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b25b      	sxtb	r3, r3
 8000802:	2b05      	cmp	r3, #5
 8000804:	d108      	bne.n	8000818 <main+0x22c>
 8000806:	233c      	movs	r3, #60	@ 0x3c
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	2210      	movs	r2, #16
 800080c:	801a      	strh	r2, [r3, #0]
 800080e:	233a      	movs	r3, #58	@ 0x3a
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	2220      	movs	r2, #32
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	e028      	b.n	800086a <main+0x27e>

	  else if(myid==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <main+0x2a8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	2b06      	cmp	r3, #6
 8000820:	d108      	bne.n	8000834 <main+0x248>
 8000822:	233c      	movs	r3, #60	@ 0x3c
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	2220      	movs	r2, #32
 8000828:	801a      	strh	r2, [r3, #0]
 800082a:	233a      	movs	r3, #58	@ 0x3a
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	2200      	movs	r2, #0
 8000830:	801a      	strh	r2, [r3, #0]
 8000832:	e01a      	b.n	800086a <main+0x27e>
	  else if(myid==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <main+0x2a8>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	2b07      	cmp	r3, #7
 800083c:	d108      	bne.n	8000850 <main+0x264>
 800083e:	233c      	movs	r3, #60	@ 0x3c
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	2220      	movs	r2, #32
 8000844:	801a      	strh	r2, [r3, #0]
 8000846:	233a      	movs	r3, #58	@ 0x3a
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	2210      	movs	r2, #16
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	e00c      	b.n	800086a <main+0x27e>
	  else if(myid==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <main+0x2a8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25b      	sxtb	r3, r3
 8000856:	2b08      	cmp	r3, #8
 8000858:	d107      	bne.n	800086a <main+0x27e>
 800085a:	233c      	movs	r3, #60	@ 0x3c
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	2220      	movs	r2, #32
 8000860:	801a      	strh	r2, [r3, #0]
 8000862:	233a      	movs	r3, #58	@ 0x3a
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	2220      	movs	r2, #32
 8000868:	801a      	strh	r2, [r3, #0]

//	  void LED::show(int travel_x, int circle_x, int circle_z, int circle_r, int hue, int hue_of_back){
//	      NEOPIXEL->clear();
	  for(int px=0; px<16; px++){
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	@ 0x34
 800086e:	e1dd      	b.n	8000c2c <main+0x640>
		  for(int pz=0; pz<16; pz++){
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
 8000874:	e1d3      	b.n	8000c1e <main+0x632>
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	20000584 	.word	0x20000584
 800087c:	20000130 	.word	0x20000130
 8000880:	20000604 	.word	0x20000604
 8000884:	20000580 	.word	0x20000580
 8000888:	2000057e 	.word	0x2000057e
 800088c:	2000057d 	.word	0x2000057d
 8000890:	2000057c 	.word	0x2000057c
 8000894:	20000622 	.word	0x20000622
 8000898:	20000624 	.word	0x20000624
 800089c:	20000626 	.word	0x20000626
 80008a0:	20000628 	.word	0x20000628
 80008a4:	20000629 	.word	0x20000629
 80008a8:	2000005a 	.word	0x2000005a
 80008ac:	2000005b 	.word	0x2000005b
 80008b0:	2000062a 	.word	0x2000062a
 80008b4:	2000005c 	.word	0x2000005c
 80008b8:	2000005d 	.word	0x2000005d
 80008bc:	2000062b 	.word	0x2000062b
 80008c0:	2000005e 	.word	0x2000005e
 80008c4:	2000005f 	.word	0x2000005f
 80008c8:	2000062c 	.word	0x2000062c
 80008cc:	20000634 	.word	0x20000634
 80008d0:	2000063c 	.word	0x2000063c
 80008d4:	20000220 	.word	0x20000220
			  int x = px + PANEL_START_X;
 80008d8:	233c      	movs	r3, #60	@ 0x3c
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008e0:	18d3      	adds	r3, r2, r3
 80008e2:	61fb      	str	r3, [r7, #28]
			  int z = pz + PANEL_START_Z;
 80008e4:	233a      	movs	r3, #58	@ 0x3a
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	61bb      	str	r3, [r7, #24]

			  //BACK_GROUND
			  int hue=back_h;
 80008f0:	4bd3      	ldr	r3, [pc, #844]	@ (8000c40 <main+0x654>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  int sat=back_s;
 80008f6:	4bd3      	ldr	r3, [pc, #844]	@ (8000c44 <main+0x658>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			  int val=back_v;
 80008fc:	4bd2      	ldr	r3, [pc, #840]	@ (8000c48 <main+0x65c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24

			  //square
			  if((x==0 || x==1)||(x==46 || x==47)){
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d008      	beq.n	800091a <main+0x32e>
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d005      	beq.n	800091a <main+0x32e>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	2b2e      	cmp	r3, #46	@ 0x2e
 8000912:	d002      	beq.n	800091a <main+0x32e>
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	2b2f      	cmp	r3, #47	@ 0x2f
 8000918:	d108      	bne.n	800092c <main+0x340>
					hue = square_h; sat = square_s; val = square_v;
 800091a:	4bcc      	ldr	r3, [pc, #816]	@ (8000c4c <main+0x660>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000920:	4bcb      	ldr	r3, [pc, #812]	@ (8000c50 <main+0x664>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000926:	4bcb      	ldr	r3, [pc, #812]	@ (8000c54 <main+0x668>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
			  }
			  if((z==0 || z==1)||(z==46 || z==47)){
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d008      	beq.n	8000944 <main+0x358>
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <main+0x358>
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2b2e      	cmp	r3, #46	@ 0x2e
 800093c:	d002      	beq.n	8000944 <main+0x358>
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	2b2f      	cmp	r3, #47	@ 0x2f
 8000942:	d108      	bne.n	8000956 <main+0x36a>
			  		hue = square_h; sat = square_s; val = square_v;
 8000944:	4bc1      	ldr	r3, [pc, #772]	@ (8000c4c <main+0x660>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800094a:	4bc1      	ldr	r3, [pc, #772]	@ (8000c50 <main+0x664>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000950:	4bc0      	ldr	r3, [pc, #768]	@ (8000c54 <main+0x668>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
			  }

			  //CIRCLE
			  if(circle_r != 0){
 8000956:	4bc0      	ldr	r3, [pc, #768]	@ (8000c58 <main+0x66c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d056      	beq.n	8000a0c <main+0x420>
				  int8_t cx = 47-circle_x;
 800095e:	4bbf      	ldr	r3, [pc, #764]	@ (8000c5c <main+0x670>)
 8000960:	2200      	movs	r2, #0
 8000962:	5e9b      	ldrsh	r3, [r3, r2]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	222f      	movs	r2, #47	@ 0x2f
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	b2da      	uxtb	r2, r3
 800096c:	2117      	movs	r1, #23
 800096e:	187b      	adds	r3, r7, r1
 8000970:	701a      	strb	r2, [r3, #0]
				  int8_t cz = circle_z;
 8000972:	4bbb      	ldr	r3, [pc, #748]	@ (8000c60 <main+0x674>)
 8000974:	2200      	movs	r2, #0
 8000976:	5e9a      	ldrsh	r2, [r3, r2]
 8000978:	2416      	movs	r4, #22
 800097a:	193b      	adds	r3, r7, r4
 800097c:	701a      	strb	r2, [r3, #0]
				  uint8_t cr = circle_r;
 800097e:	2515      	movs	r5, #21
 8000980:	197b      	adds	r3, r7, r5
 8000982:	4ab5      	ldr	r2, [pc, #724]	@ (8000c58 <main+0x66c>)
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	701a      	strb	r2, [r3, #0]
				  uint8_t myx = x;
 8000988:	2614      	movs	r6, #20
 800098a:	19bb      	adds	r3, r7, r6
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	701a      	strb	r2, [r3, #0]
				  uint8_t myz = z;
 8000990:	2013      	movs	r0, #19
 8000992:	183b      	adds	r3, r7, r0
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	701a      	strb	r2, [r3, #0]
				  float distance = (myx-cx)*(myx-cx)+(myz-cz)*(myz-cz);
 8000998:	19bb      	adds	r3, r7, r6
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	0008      	movs	r0, r1
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	19ba      	adds	r2, r7, r6
 80009a8:	7811      	ldrb	r1, [r2, #0]
 80009aa:	183a      	adds	r2, r7, r0
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	b252      	sxtb	r2, r2
 80009b0:	1a8a      	subs	r2, r1, r2
 80009b2:	435a      	muls	r2, r3
 80009b4:	2013      	movs	r0, #19
 80009b6:	183b      	adds	r3, r7, r0
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	1acb      	subs	r3, r1, r3
 80009c2:	1839      	adds	r1, r7, r0
 80009c4:	7808      	ldrb	r0, [r1, #0]
 80009c6:	1939      	adds	r1, r7, r4
 80009c8:	7809      	ldrb	r1, [r1, #0]
 80009ca:	b249      	sxtb	r1, r1
 80009cc:	1a41      	subs	r1, r0, r1
 80009ce:	434b      	muls	r3, r1
 80009d0:	18d3      	adds	r3, r2, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fd20 	bl	8000418 <__aeabi_i2f>
 80009d8:	1c03      	adds	r3, r0, #0
 80009da:	60fb      	str	r3, [r7, #12]
				  if(cr*cr>=distance){
 80009dc:	197b      	adds	r3, r7, r5
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	197a      	adds	r2, r7, r5
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	4353      	muls	r3, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fd16 	bl	8000418 <__aeabi_i2f>
 80009ec:	1c03      	adds	r3, r0, #0
 80009ee:	1c19      	adds	r1, r3, #0
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff fc2d 	bl	8000250 <__aeabi_fcmple>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d008      	beq.n	8000a0c <main+0x420>
					hue = circle_h; sat = circle_s; val = circle_v;
 80009fa:	4b9a      	ldr	r3, [pc, #616]	@ (8000c64 <main+0x678>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a00:	4b99      	ldr	r3, [pc, #612]	@ (8000c68 <main+0x67c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a06:	4b99      	ldr	r3, [pc, #612]	@ (8000c6c <main+0x680>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
				  }
			  }

			  //image
			  for(uint8_t i=0; i<6; i++){
 8000a0c:	2323      	movs	r3, #35	@ 0x23
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e0d0      	b.n	8000bb8 <main+0x5cc>
				  if(image_id[i] != 0){
 8000a16:	2123      	movs	r1, #35	@ 0x23
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4a94      	ldr	r2, [pc, #592]	@ (8000c70 <main+0x684>)
 8000a1e:	5cd3      	ldrb	r3, [r2, r3]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d100      	bne.n	8000a26 <main+0x43a>
 8000a24:	e0c2      	b.n	8000bac <main+0x5c0>
					  int8_t cx = 47-image_x[i];
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4a92      	ldr	r2, [pc, #584]	@ (8000c74 <main+0x688>)
 8000a2c:	5cd3      	ldrb	r3, [r2, r3]
 8000a2e:	222f      	movs	r2, #47	@ 0x2f
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	200b      	movs	r0, #11
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	701a      	strb	r2, [r3, #0]
					  int8_t cz = image_z[i];
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4a8e      	ldr	r2, [pc, #568]	@ (8000c78 <main+0x68c>)
 8000a40:	5cd2      	ldrb	r2, [r2, r3]
 8000a42:	240a      	movs	r4, #10
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	701a      	strb	r2, [r3, #0]
					  if(image_id[i] == 1){ //fish_15x6[6][15]
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4a88      	ldr	r2, [pc, #544]	@ (8000c70 <main+0x684>)
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d14f      	bne.n	8000af4 <main+0x508>
						  // xが　cxからcx+15の間かどうか
						  //cxからの距離
						  int8_t xx = x - cx;
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	183b      	adds	r3, r7, r0
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	701a      	strb	r2, [r3, #0]
						  int8_t zz = z - cz;
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	701a      	strb	r2, [r3, #0]
						  if((0<=xx && xx<15) && (0<=zz && zz<6)){
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a7a:	d900      	bls.n	8000a7e <main+0x492>
 8000a7c:	e096      	b.n	8000bac <main+0x5c0>
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	2b0e      	cmp	r3, #14
 8000a86:	dd00      	ble.n	8000a8a <main+0x49e>
 8000a88:	e090      	b.n	8000bac <main+0x5c0>
 8000a8a:	1dbb      	adds	r3, r7, #6
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a90:	d900      	bls.n	8000a94 <main+0x4a8>
 8000a92:	e08b      	b.n	8000bac <main+0x5c0>
 8000a94:	1dbb      	adds	r3, r7, #6
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	dd00      	ble.n	8000aa0 <main+0x4b4>
 8000a9e:	e085      	b.n	8000bac <main+0x5c0>
							  //範囲内。色をつけよう。
							  if(fish_15x6[zz][xx] == 1){ //目ん玉
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	569a      	ldrsb	r2, [r3, r2]
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5659      	ldrsb	r1, [r3, r1]
 8000aac:	4873      	ldr	r0, [pc, #460]	@ (8000c7c <main+0x690>)
 8000aae:	0013      	movs	r3, r2
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	18c3      	adds	r3, r0, r3
 8000ab6:	5c5b      	ldrb	r3, [r3, r1]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d106      	bne.n	8000aca <main+0x4de>
								hue = 90; sat = 250; val = 200;
 8000abc:	235a      	movs	r3, #90	@ 0x5a
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ac0:	23fa      	movs	r3, #250	@ 0xfa
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ac4:	23c8      	movs	r3, #200	@ 0xc8
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ac8:	e070      	b.n	8000bac <main+0x5c0>
							  }else if(fish_15x6[zz][xx] == 2){ //体
 8000aca:	1dbb      	adds	r3, r7, #6
 8000acc:	2200      	movs	r2, #0
 8000ace:	569a      	ldrsb	r2, [r3, r2]
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	5659      	ldrsb	r1, [r3, r1]
 8000ad6:	4869      	ldr	r0, [pc, #420]	@ (8000c7c <main+0x690>)
 8000ad8:	0013      	movs	r3, r2
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	1a9b      	subs	r3, r3, r2
 8000ade:	18c3      	adds	r3, r0, r3
 8000ae0:	5c5b      	ldrb	r3, [r3, r1]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d162      	bne.n	8000bac <main+0x5c0>
								hue = 14; sat = 255; val = 150;
 8000ae6:	230e      	movs	r3, #14
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000aea:	23ff      	movs	r3, #255	@ 0xff
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aee:	2396      	movs	r3, #150	@ 0x96
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af2:	e05b      	b.n	8000bac <main+0x5c0>
							  }
						  }
					  }else if(image_id[i] == 2){ //fish_15x6[6][15]
 8000af4:	2323      	movs	r3, #35	@ 0x23
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4a5d      	ldr	r2, [pc, #372]	@ (8000c70 <main+0x684>)
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d154      	bne.n	8000bac <main+0x5c0>
						  // xが　cxからcx+15の間かどうか
						  //cxからの距離
						  int8_t xx = x - cx;
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	230b      	movs	r3, #11
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	2109      	movs	r1, #9
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	701a      	strb	r2, [r3, #0]
						  int8_t zz = z - cz;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	2008      	movs	r0, #8
 8000b26:	183b      	adds	r3, r7, r0
 8000b28:	701a      	strb	r2, [r3, #0]
						  if((0<=xx && xx<15) && (0<=zz && zz<6)){
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b30:	d83c      	bhi.n	8000bac <main+0x5c0>
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	2b0e      	cmp	r3, #14
 8000b3a:	dc37      	bgt.n	8000bac <main+0x5c0>
 8000b3c:	183b      	adds	r3, r7, r0
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b42:	d833      	bhi.n	8000bac <main+0x5c0>
 8000b44:	183b      	adds	r3, r7, r0
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	dc2e      	bgt.n	8000bac <main+0x5c0>
							  //範囲内。色をつけよう。
							  if(fish_15x6[zz][14-xx] == 1){ //目ん玉
 8000b4e:	183b      	adds	r3, r7, r0
 8000b50:	2200      	movs	r2, #0
 8000b52:	569a      	ldrsb	r2, [r3, r2]
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	210e      	movs	r1, #14
 8000b5c:	1ac9      	subs	r1, r1, r3
 8000b5e:	4847      	ldr	r0, [pc, #284]	@ (8000c7c <main+0x690>)
 8000b60:	0013      	movs	r3, r2
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	18c3      	adds	r3, r0, r3
 8000b68:	5c5b      	ldrb	r3, [r3, r1]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d106      	bne.n	8000b7c <main+0x590>
								hue = 90; sat = 250; val = 200;
 8000b6e:	235a      	movs	r3, #90	@ 0x5a
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b72:	23fa      	movs	r3, #250	@ 0xfa
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b76:	23c8      	movs	r3, #200	@ 0xc8
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7a:	e017      	b.n	8000bac <main+0x5c0>
							  }else if(fish_15x6[zz][14-xx] == 2){ //体
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2200      	movs	r2, #0
 8000b82:	569a      	ldrsb	r2, [r3, r2]
 8000b84:	2309      	movs	r3, #9
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	1ac9      	subs	r1, r1, r3
 8000b90:	483a      	ldr	r0, [pc, #232]	@ (8000c7c <main+0x690>)
 8000b92:	0013      	movs	r3, r2
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	1a9b      	subs	r3, r3, r2
 8000b98:	18c3      	adds	r3, r0, r3
 8000b9a:	5c5b      	ldrb	r3, [r3, r1]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d105      	bne.n	8000bac <main+0x5c0>
								hue = 14; sat = 255; val = 150;
 8000ba0:	230e      	movs	r3, #14
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ba4:	23ff      	movs	r3, #255	@ 0xff
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ba8:	2396      	movs	r3, #150	@ 0x96
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
			  for(uint8_t i=0; i<6; i++){
 8000bac:	2123      	movs	r1, #35	@ 0x23
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	3201      	adds	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	2323      	movs	r3, #35	@ 0x23
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d800      	bhi.n	8000bc4 <main+0x5d8>
 8000bc2:	e728      	b.n	8000a16 <main+0x42a>
					  }
				  }
			  }

			  //SET
			  uint16_t pixel_num = 0;
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	183b      	adds	r3, r7, r0
 8000bc8:	2200      	movs	r2, #0
 8000bca:	801a      	strh	r2, [r3, #0]
			  if(pz%2 == 0){
 8000bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d109      	bne.n	8000be8 <main+0x5fc>
				   pixel_num = pz*16 + px;
 8000bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	b299      	uxth	r1, r3
 8000bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	188a      	adds	r2, r1, r2
 8000be4:	801a      	strh	r2, [r3, #0]
 8000be6:	e00b      	b.n	8000c00 <main+0x614>
			  }else{
				  pixel_num = pz*16 + 15 - px;
 8000be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	320f      	adds	r2, #15
 8000bfe:	801a      	strh	r2, [r3, #0]
			  }
			  Neopixel.set_hsv(pixel_num, hue, sat, val);
 8000c00:	2320      	movs	r3, #32
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b2d9      	uxtb	r1, r3
 8000c08:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8000c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c0c:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <main+0x694>)
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	0023      	movs	r3, r4
 8000c14:	f000 fd7e 	bl	8001714 <_ZN6WS28127set_hsvEhiii>
		  for(int pz=0; pz<16; pz++){
 8000c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	dc00      	bgt.n	8000c26 <main+0x63a>
 8000c24:	e658      	b.n	80008d8 <main+0x2ec>
	  for(int px=0; px<16; px++){
 8000c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c28:	3301      	adds	r3, #1
 8000c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	dc00      	bgt.n	8000c34 <main+0x648>
 8000c32:	e61d      	b.n	8000870 <main+0x284>
		  }
	  }
	  Neopixel.show();
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <main+0x694>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fcb4 	bl	80015a4 <_ZN6WS28124showEv>





  }
 8000c3c:	e504      	b.n	8000648 <main+0x5c>
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	2000062a 	.word	0x2000062a
 8000c44:	2000005c 	.word	0x2000005c
 8000c48:	2000005d 	.word	0x2000005d
 8000c4c:	2000062b 	.word	0x2000062b
 8000c50:	2000005e 	.word	0x2000005e
 8000c54:	2000005f 	.word	0x2000005f
 8000c58:	20000628 	.word	0x20000628
 8000c5c:	20000624 	.word	0x20000624
 8000c60:	20000626 	.word	0x20000626
 8000c64:	20000629 	.word	0x20000629
 8000c68:	2000005a 	.word	0x2000005a
 8000c6c:	2000005b 	.word	0x2000005b
 8000c70:	2000062c 	.word	0x2000062c
 8000c74:	20000634 	.word	0x20000634
 8000c78:	2000063c 	.word	0x2000063c
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000220 	.word	0x20000220

08000c84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b093      	sub	sp, #76	@ 0x4c
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	2414      	movs	r4, #20
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	0018      	movs	r0, r3
 8000c90:	2334      	movs	r3, #52	@ 0x34
 8000c92:	001a      	movs	r2, r3
 8000c94:	2100      	movs	r1, #0
 8000c96:	f004 fb59 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f004 fb52 	bl	800534c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	2380      	movs	r3, #128	@ 0x80
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f001 fd7f 	bl	80027b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	22a0      	movs	r2, #160	@ 0xa0
 8000cbc:	02d2      	lsls	r2, r2, #11
 8000cbe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2209      	movs	r2, #9
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2280      	movs	r2, #128	@ 0x80
 8000cde:	0292      	lsls	r2, r2, #10
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	05d2      	lsls	r2, r2, #23
 8000ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	0018      	movs	r0, r3
 8000cee:	f001 fdab 	bl	8002848 <HAL_RCC_OscConfig>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	4193      	sbcs	r3, r2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 fa93 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 f8a2 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000d24:	0003      	movs	r3, r0
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	4193      	sbcs	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000d30:	f000 fa7a 	bl	8001228 <Error_Handler>
  }
}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b013      	add	sp, #76	@ 0x4c
 8000d3a:	bd90      	pop	{r4, r7, pc}

08000d3c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	@ 0x38
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	2328      	movs	r3, #40	@ 0x28
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	0018      	movs	r0, r3
 8000d48:	2310      	movs	r3, #16
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f004 fafd 	bl	800534c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d52:	231c      	movs	r3, #28
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	0018      	movs	r0, r3
 8000d58:	230c      	movs	r3, #12
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	f004 faf5 	bl	800534c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	003b      	movs	r3, r7
 8000d64:	0018      	movs	r0, r3
 8000d66:	231c      	movs	r3, #28
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f004 faee 	bl	800534c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d70:	4b39      	ldr	r3, [pc, #228]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d72:	4a3a      	ldr	r2, [pc, #232]	@ (8000e5c <_ZL12MX_TIM3_Initv+0x120>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000d76:	4b38      	ldr	r3, [pc, #224]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000d82:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d84:	220e      	movs	r2, #14
 8000d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b32      	ldr	r3, [pc, #200]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d94:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 fa0e 	bl	80031b8 <HAL_TIM_Base_Init>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	1e5a      	subs	r2, r3, #1
 8000da0:	4193      	sbcs	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000da8:	f000 fa3e 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	2128      	movs	r1, #40	@ 0x28
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	0152      	lsls	r2, r2, #5
 8000db4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db6:	187a      	adds	r2, r7, r1
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f002 fe8b 	bl	8003ad8 <HAL_TIM_ConfigClockSource>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	4193      	sbcs	r3, r2
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000dce:	f000 fa2b 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 fa47 	bl	8003268 <HAL_TIM_PWM_Init>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	4193      	sbcs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8000de6:	f000 fa1f 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	211c      	movs	r1, #28
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000df8:	187a      	adds	r2, r7, r1
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f003 fbf2 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	0003      	movs	r3, r0
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	4193      	sbcs	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000e10:	f000 fa0a 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2260      	movs	r2, #96	@ 0x60
 8000e18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2204      	movs	r2, #4
 8000e2a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2c:	0039      	movs	r1, r7
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 fd50 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	1e5a      	subs	r2, r3, #1
 8000e3c:	4193      	sbcs	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8000e44:	f000 f9f0 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <_ZL12MX_TIM3_Initv+0x11c>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fa94 	bl	8001378 <HAL_TIM_MspPostInit>

}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b00e      	add	sp, #56	@ 0x38
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000088 	.word	0x20000088
 8000e5c:	40000400 	.word	0x40000400

08000e60 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e66:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <_ZL19MX_USART2_UART_Initv+0x6c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e6c:	22e1      	movs	r2, #225	@ 0xe1
 8000e6e:	0252      	lsls	r2, r2, #9
 8000e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f003 fbfe 	bl	80046ac <HAL_UART_Init>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	4193      	sbcs	r3, r2
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000ebc:	f000 f9b4 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	20000130 	.word	0x20000130
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <_ZL11MX_DMA_Initv+0x48>)
 8000ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <_ZL11MX_DMA_Initv+0x48>)
 8000edc:	2101      	movs	r1, #1
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <_ZL11MX_DMA_Initv+0x48>)
 8000ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2009      	movs	r0, #9
 8000ef4:	f000 ffd0 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ef8:	2009      	movs	r0, #9
 8000efa:	f000 ffe2 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200a      	movs	r0, #10
 8000f04:	f000 ffc8 	bl	8001e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f000 ffda 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000

08000f1c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	240c      	movs	r4, #12
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	0018      	movs	r0, r3
 8000f28:	2314      	movs	r3, #20
 8000f2a:	001a      	movs	r2, r3
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f004 fa0d 	bl	800534c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b30      	ldr	r3, [pc, #192]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f38:	2104      	movs	r1, #4
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f42:	2204      	movs	r2, #4
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f56:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f68:	2102      	movs	r1, #2
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f72:	2202      	movs	r2, #2
 8000f74:	4013      	ands	r3, r2
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2104      	movs	r1, #4
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 fbf8 	bl	8002776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2204      	movs	r2, #4
 8000f8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2201      	movs	r2, #1
 8000f90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	0010      	movs	r0, r2
 8000fa6:	f001 fa65 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2280      	movs	r2, #128	@ 0x80
 8000fae:	0152      	lsls	r2, r2, #5
 8000fb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	193a      	adds	r2, r7, r4
 8000fc0:	23a0      	movs	r3, #160	@ 0xa0
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f001 fa54 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin;
 8000fcc:	193b      	adds	r3, r7, r4
 8000fce:	2278      	movs	r2, #120	@ 0x78
 8000fd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	193b      	adds	r3, r7, r4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	193b      	adds	r3, r7, r4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_ZL12MX_GPIO_Initv+0xdc>)
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	f001 fa45 	bl	8002474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b009      	add	sp, #36	@ 0x24
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	50000400 	.word	0x50000400

08000ffc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

/* USER CODE BEGIN 4 */

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2280      	movs	r2, #128	@ 0x80
 800100e:	589b      	ldr	r3, [r3, r2]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追??��?��?付かれてな??��?��?
 800101e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	001a      	movs	r2, r3
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	4293      	cmp	r3, r2
 8001028:	d032      	beq.n	8001090 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x94>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな??��?��?=追??��?��?越されてな??��?��?
 800102a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	001a      	movs	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	189b      	adds	r3, r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2bff      	cmp	r3, #255	@ 0xff
 8001038:	d116      	bne.n	8001068 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6c>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�???��?��んだ=受信した
 800103a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001a      	movs	r2, r3
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4293      	cmp	r3, r2
 8001044:	d006      	beq.n	8001054 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x58>
//正常
				*stop_counter = 0;
 8001046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001048:	2200      	movs	r2, #0
 800104a:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 800104c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001052:	e04b      	b.n	80010ec <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
			}else{//wrt_ptが�???��?��んでな??��?��?=受信してな??��?��?
//受信してな??��?��?
				(*stop_counter)++;
 8001054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800105e:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8001060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001066:	e041      	b.n	80010ec <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
			}
		}else{//p_rdptが書き換えられた=追??��?��?越された
//追??��?��?越された
			(*error_counter)++;
 8001068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b29a      	uxth	r2, r3
 8001070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001072:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8001074:	2350      	movs	r3, #80	@ 0x50
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8001080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001082:	2b00      	cmp	r3, #0
 8001084:	da32      	bge.n	80010ec <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
 8001086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	18d3      	adds	r3, r2, r3
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800108e:	e02d      	b.n	80010ec <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
		}
	}else{//wrtに追??��?��?付かれた,追??��?��?付い??��?��?
		int front_pt = wrt_pt + 1;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3301      	adds	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800109a:	429a      	cmp	r2, r3
 800109c:	dc03      	bgt.n	80010a6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xaa>
 800109e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 80010a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	18d3      	adds	r3, r2, r3
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2bff      	cmp	r3, #255	@ 0xff
 80010b0:	d109      	bne.n	80010c6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xca>
//追??��?��?付い??��?��?
			(*stop_counter)++;
 80010b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010bc:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 80010be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010c4:	e012      	b.n	80010ec <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
		}else{
//追??��?��?付かれた
			(*error_counter)++;
 80010c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010d0:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 80010d2:	2350      	movs	r3, #80	@ 0x50
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 80010de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da03      	bge.n	80010ec <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
 80010e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 80010ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001224 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x228>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d903      	bls.n	80010fe <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x102>
 80010f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010f8:	2224      	movs	r2, #36	@ 0x24
 80010fa:	4252      	negs	r2, r2
 80010fc:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 80010fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4a48      	ldr	r2, [pc, #288]	@ (8001224 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x228>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d903      	bls.n	8001110 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
 8001108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800110a:	2224      	movs	r2, #36	@ 0x24
 800110c:	4252      	negs	r2, r2
 800110e:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	2b00      	cmp	r3, #0
 800111c:	da03      	bge.n	8001126 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x12a>
 800111e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	18d3      	adds	r3, r2, r3
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 8001126:	2350      	movs	r3, #80	@ 0x50
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	001a      	movs	r2, r3
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	4293      	cmp	r3, r2
 8001136:	dd67      	ble.n	8001208 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x20c>

		rd_pt++;
 8001138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113a:	3301      	adds	r3, #1
 800113c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001142:	429a      	cmp	r2, r3
 8001144:	dc03      	bgt.n	800114e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x152>
 8001146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 800114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	001a      	movs	r2, r3
 8001158:	233c      	movs	r3, #60	@ 0x3c
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	33fa      	adds	r3, #250	@ 0xfa
 8001160:	429a      	cmp	r2, r3
 8001162:	d14b      	bne.n	80011fc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x200>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな??��?��?,25以上も??��?��???��?��?
 8001164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	dc03      	bgt.n	800117c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x180>
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 800117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117e:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 8001180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	22ff      	movs	r2, #255	@ 0xff
 8001188:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e01a      	b.n	80011c6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1ca>
				temp_rdpt += 1;
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	3301      	adds	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	429a      	cmp	r2, r3
 800119c:	dc03      	bgt.n	80011a6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1aa>
 800119e:	6a3a      	ldr	r2, [r7, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	18d2      	adds	r2, r2, r3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	18cb      	adds	r3, r1, r3
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	18d3      	adds	r3, r2, r3
 80011bc:	22ff      	movs	r2, #255	@ 0xff
 80011be:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dbe0      	blt.n	8001190 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x194>
			}

			rd_pt = temp_rdpt;
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da03      	bge.n	80011e8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1ec>
 80011e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	da00      	bge.n	80011f0 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f4>
 80011ee:	3301      	adds	r3, #1
 80011f0:	105b      	asrs	r3, r3, #1
 80011f2:	001a      	movs	r2, r3
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	4293      	cmp	r3, r2
 80011f8:	da8a      	bge.n	8001110 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
			else{break;}
 80011fa:	e006      	b.n	800120a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x20e>
		}else{buf[rd_pt] = 255;}
 80011fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	22ff      	movs	r2, #255	@ 0xff
 8001204:	701a      	strb	r2, [r3, #0]
	}
 8001206:	e783      	b.n	8001110 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
		if(dif_pt <= go_back/2){break;}
 8001208:	46c0      	nop			@ (mov r8, r8)

	*p_rdpt = rd_pt;
 800120a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120c:	b2da      	uxtb	r2, r3
 800120e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001210:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001218:	701a      	strb	r2, [r3, #0]
}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b00c      	add	sp, #48	@ 0x30
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	0000ffdc 	.word	0x0000ffdc

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	e7fd      	b.n	8001230 <Error_Handler+0x8>

08001234 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d10f      	bne.n	8001264 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4a09      	ldr	r2, [pc, #36]	@ (800126c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d10b      	bne.n	8001264 <_Z41__static_initialization_and_destruction_0ii+0x30>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800124e:	4909      	ldr	r1, [pc, #36]	@ (8001274 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001252:	2204      	movs	r2, #4
 8001254:	f000 f980 	bl	8001558 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800125c:	0011      	movs	r1, r2
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff f944 	bl	80004ec <_ZN3LEDC1EP6WS2812>
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0000ffff 	.word	0x0000ffff
 8001270:	200000d4 	.word	0x200000d4
 8001274:	20000088 	.word	0x20000088
 8001278:	20000220 	.word	0x20000220
 800127c:	20000564 	.word	0x20000564

08001280 <_GLOBAL__sub_I_fish_15x6>:
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <_GLOBAL__sub_I_fish_15x6+0x14>)
 8001286:	0019      	movs	r1, r3
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff ffd3 	bl	8001234 <_Z41__static_initialization_and_destruction_0ii>
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	0000ffff 	.word	0x0000ffff

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_MspInit+0x44>)
 80012a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_MspInit+0x44>)
 80012a4:	2101      	movs	r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_MspInit+0x44>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	2201      	movs	r2, #1
 80012b0:	4013      	ands	r3, r2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_MspInit+0x44>)
 80012b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_MspInit+0x44>)
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	0549      	lsls	r1, r1, #21
 80012c0:	430a      	orrs	r2, r1
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_MspInit+0x44>)
 80012c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c8:	2380      	movs	r3, #128	@ 0x80
 80012ca:	055b      	lsls	r3, r3, #21
 80012cc:	4013      	ands	r3, r2
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_TIM_Base_MspInit+0x88>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d136      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <HAL_TIM_Base_MspInit+0x8c>)
 80012f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_TIM_Base_MspInit+0x8c>)
 80012f8:	2102      	movs	r1, #2
 80012fa:	430a      	orrs	r2, r1
 80012fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012fe:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_TIM_Base_MspInit+0x8c>)
 8001300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 800130c:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_TIM_Base_MspInit+0x94>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001312:	2221      	movs	r2, #33	@ 0x21
 8001314:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001318:	2210      	movs	r2, #16
 800131a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001338:	2220      	movs	r2, #32
 800133a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 800133e:	22c0      	movs	r2, #192	@ 0xc0
 8001340:	0192      	lsls	r2, r2, #6
 8001342:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fdd8 	bl	8001efc <HAL_DMA_Init>
 800134c:	1e03      	subs	r3, r0, #0
 800134e:	d001      	beq.n	8001354 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8001350:	f7ff ff6a 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_TIM_Base_MspInit+0x90>)
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001360:	46c0      	nop			@ (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40000400 	.word	0x40000400
 800136c:	40021000 	.word	0x40021000
 8001370:	200000d4 	.word	0x200000d4
 8001374:	4002001c 	.word	0x4002001c

08001378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	240c      	movs	r4, #12
 8001382:	193b      	adds	r3, r7, r4
 8001384:	0018      	movs	r0, r3
 8001386:	2314      	movs	r3, #20
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f003 ffde 	bl	800534c <memset>
  if(htim->Instance==TIM3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <HAL_TIM_MspPostInit+0x70>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d122      	bne.n	80013e0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_TIM_MspPostInit+0x74>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <HAL_TIM_MspPostInit+0x74>)
 80013a0:	2101      	movs	r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <HAL_TIM_MspPostInit+0x74>)
 80013a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013aa:	2201      	movs	r2, #1
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b2:	0021      	movs	r1, r4
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2202      	movs	r2, #2
 80013be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2201      	movs	r2, #1
 80013d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	187a      	adds	r2, r7, r1
 80013d4:	23a0      	movs	r3, #160	@ 0xa0
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f001 f84a 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b009      	add	sp, #36	@ 0x24
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b08b      	sub	sp, #44	@ 0x2c
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	2414      	movs	r4, #20
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	0018      	movs	r0, r3
 80013fe:	2314      	movs	r3, #20
 8001400:	001a      	movs	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	f003 ffa2 	bl	800534c <memset>
  if(huart->Instance==USART2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a31      	ldr	r2, [pc, #196]	@ (80014d4 <HAL_UART_MspInit+0xe4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d15b      	bne.n	80014ca <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_UART_MspInit+0xe8>)
 8001414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <HAL_UART_MspInit+0xe8>)
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	0289      	lsls	r1, r1, #10
 800141c:	430a      	orrs	r2, r1
 800141e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_UART_MspInit+0xe8>)
 8001422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_UART_MspInit+0xe8>)
 8001430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <HAL_UART_MspInit+0xe8>)
 8001434:	2101      	movs	r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	@ 0x34
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <HAL_UART_MspInit+0xe8>)
 800143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143e:	2201      	movs	r2, #1
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001446:	0021      	movs	r1, r4
 8001448:	187b      	adds	r3, r7, r1
 800144a:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <HAL_UART_MspInit+0xec>)
 800144c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2202      	movs	r2, #2
 8001452:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2201      	movs	r2, #1
 8001464:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	187a      	adds	r2, r7, r1
 8001468:	23a0      	movs	r3, #160	@ 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f001 f800 	bl	8002474 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 8001476:	4a1b      	ldr	r2, [pc, #108]	@ (80014e4 <HAL_UART_MspInit+0xf4>)
 8001478:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 800147c:	2234      	movs	r2, #52	@ 0x34
 800147e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148c:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 80014a0:	2220      	movs	r2, #32
 80014a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	0192      	lsls	r2, r2, #6
 80014aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 fd24 	bl	8001efc <HAL_DMA_Init>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80014b8:	f7ff feb6 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2180      	movs	r1, #128	@ 0x80
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 80014c2:	505a      	str	r2, [r3, r1]
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_UART_MspInit+0xf0>)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b00b      	add	sp, #44	@ 0x2c
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	00008004 	.word	0x00008004
 80014e0:	200001c4 	.word	0x200001c4
 80014e4:	40020008 	.word	0x40020008

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 fbd6 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	46c0      	nop			@ (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <DMA1_Channel1_IRQHandler+0x14>)
 8001522:	0018      	movs	r0, r3
 8001524:	f000 fe64 	bl	80021f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001528:	46c0      	nop			@ (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			@ (mov r8, r8)
 8001530:	200001c4 	.word	0x200001c4

08001534 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <DMA1_Channel2_3_IRQHandler+0x14>)
 800153a:	0018      	movs	r0, r3
 800153c:	f000 fe58 	bl	80021f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	200000d4 	.word	0x200000d4

0800154c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	46c0      	nop			@ (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: famil
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 800156a:	189b      	adds	r3, r3, r2
 800156c:	2230      	movs	r2, #48	@ 0x30
 800156e:	2100      	movs	r1, #0
 8001570:	0018      	movs	r0, r3
 8001572:	f003 feeb 	bl	800534c <memset>
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	23d0      	movs	r3, #208	@ 0xd0
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	2100      	movs	r1, #0
 800157e:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	0000030f 	.word	0x0000030f

080015a4 <_ZN6WS28124showEv>:


void WS2812::show(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	23d0      	movs	r3, #208	@ 0xd0
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	58d3      	ldr	r3, [r2, r3]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d106      	bne.n	80015c6 <_ZN6WS28124showEv+0x22>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2225      	movs	r2, #37	@ 0x25
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d001      	beq.n	80015ca <_ZN6WS28124showEv+0x26>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <_ZN6WS28124showEv+0x28>
 80015ca:	2300      	movs	r3, #0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d025      	beq.n	800161c <_ZN6WS28124showEv+0x78>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	0019      	movs	r1, r3
 80015da:	0010      	movs	r0, r2
 80015dc:	f002 f892 	bl	8003704 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	23d0      	movs	r3, #208	@ 0xd0
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	2100      	movs	r1, #0
 80015e8:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	e00d      	b.n	8001610 <_ZN6WS28124showEv+0x6c>
 80015f4:	200f      	movs	r0, #15
 80015f6:	183b      	adds	r3, r7, r0
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	492c      	ldr	r1, [pc, #176]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 80015fe:	18d3      	adds	r3, r2, r3
 8001600:	185b      	adds	r3, r3, r1
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	183b      	adds	r3, r7, r0
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	183b      	adds	r3, r7, r0
 800160c:	3201      	adds	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b2f      	cmp	r3, #47	@ 0x2f
 8001618:	d9ec      	bls.n	80015f4 <_ZN6WS28124showEv+0x50>
        return;
 800161a:	e045      	b.n	80016a8 <_ZN6WS28124showEv+0x104>
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	e031      	b.n	8001686 <_ZN6WS28124showEv+0xe2>
        wr_buf[i   ] = 0;
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4922      	ldr	r1, [pc, #136]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	185b      	adds	r3, r3, r1
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3308      	adds	r3, #8
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	491e      	ldr	r1, [pc, #120]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	185b      	adds	r3, r3, r1
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	3310      	adds	r3, #16
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	491a      	ldr	r1, [pc, #104]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	185b      	adds	r3, r3, r1
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3318      	adds	r3, #24
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4916      	ldr	r1, [pc, #88]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	185b      	adds	r3, r3, r1
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3320      	adds	r3, #32
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4912      	ldr	r1, [pc, #72]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	185b      	adds	r3, r3, r1
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3328      	adds	r3, #40	@ 0x28
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	490e      	ldr	r1, [pc, #56]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	185b      	adds	r3, r3, r1
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b07      	cmp	r3, #7
 800168a:	d9ca      	bls.n	8001622 <_ZN6WS28124showEv+0x7e>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6858      	ldr	r0, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	0019      	movs	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <_ZN6WS28124showEv+0x10c>)
 800169a:	189a      	adds	r2, r3, r2
 800169c:	2330      	movs	r3, #48	@ 0x30
 800169e:	f001 fe43 	bl	8003328 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 80016a2:	2008      	movs	r0, #8
 80016a4:	f000 fb28 	bl	8001cf8 <HAL_Delay>
}
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	0000030f 	.word	0x0000030f

080016b4 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e01d      	b.n	80016fe <_ZN6WS28125clearEv+0x4a>
        rgb_buf[i][0]=0;
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	0013      	movs	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	189b      	adds	r3, r3, r2
 80016cc:	18cb      	adds	r3, r1, r3
 80016ce:	330c      	adds	r3, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	0013      	movs	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	189b      	adds	r3, r3, r2
 80016de:	18cb      	adds	r3, r1, r3
 80016e0:	330d      	adds	r3, #13
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	0013      	movs	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	189b      	adds	r3, r3, r2
 80016f0:	18cb      	adds	r3, r1, r3
 80016f2:	330e      	adds	r3, #14
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	429a      	cmp	r2, r3
 8001706:	dddc      	ble.n	80016c2 <_ZN6WS28125clearEv+0xe>
    }
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <_ZN6WS28127set_hsvEhiii>:

void WS2812::set_hsv(uint8_t id, int h, int s, int v){
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b08e      	sub	sp, #56	@ 0x38
 8001718:	af02      	add	r7, sp, #8
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	230b      	movs	r3, #11
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	1c0a      	adds	r2, r1, #0
 8001726:	701a      	strb	r2, [r3, #0]
	int r,g,b;
	if (s == 0) {
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <_ZN6WS28127set_hsvEhiii+0x28>
	    r = g = b = v;
 800172e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800173a:	e077      	b.n	800182c <_ZN6WS28127set_hsvEhiii+0x118>
	}else{
	    h = h * 6; // sector 0 to 5
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	0013      	movs	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	189b      	adds	r3, r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
	    int i = h / 256;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	da00      	bge.n	8001750 <_ZN6WS28127set_hsvEhiii+0x3c>
 800174e:	33ff      	adds	r3, #255	@ 0xff
 8001750:	121b      	asrs	r3, r3, #8
 8001752:	623b      	str	r3, [r7, #32]
	    int f = h % 256;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3f      	ldr	r2, [pc, #252]	@ (8001854 <_ZN6WS28127set_hsvEhiii+0x140>)
 8001758:	4013      	ands	r3, r2
 800175a:	d503      	bpl.n	8001764 <_ZN6WS28127set_hsvEhiii+0x50>
 800175c:	3b01      	subs	r3, #1
 800175e:	4a3e      	ldr	r2, [pc, #248]	@ (8001858 <_ZN6WS28127set_hsvEhiii+0x144>)
 8001760:	4313      	orrs	r3, r2
 8001762:	3301      	adds	r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
	    int p = (v * (256 - s)) / 256;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2280      	movs	r2, #128	@ 0x80
 800176a:	0052      	lsls	r2, r2, #1
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001770:	4353      	muls	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	da00      	bge.n	8001778 <_ZN6WS28127set_hsvEhiii+0x64>
 8001776:	33ff      	adds	r3, #255	@ 0xff
 8001778:	121b      	asrs	r3, r3, #8
 800177a:	61bb      	str	r3, [r7, #24]
	    int q = (v * (256 - (s * f) / 256)) / 256;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4353      	muls	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	da00      	bge.n	8001788 <_ZN6WS28127set_hsvEhiii+0x74>
 8001786:	33ff      	adds	r3, #255	@ 0xff
 8001788:	121b      	asrs	r3, r3, #8
 800178a:	425b      	negs	r3, r3
 800178c:	3301      	adds	r3, #1
 800178e:	33ff      	adds	r3, #255	@ 0xff
 8001790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001792:	4353      	muls	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	da00      	bge.n	800179a <_ZN6WS28127set_hsvEhiii+0x86>
 8001798:	33ff      	adds	r3, #255	@ 0xff
 800179a:	121b      	asrs	r3, r3, #8
 800179c:	617b      	str	r3, [r7, #20]
	    int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2280      	movs	r2, #128	@ 0x80
 80017a2:	0052      	lsls	r2, r2, #1
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	4353      	muls	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da00      	bge.n	80017b0 <_ZN6WS28127set_hsvEhiii+0x9c>
 80017ae:	33ff      	adds	r3, #255	@ 0xff
 80017b0:	121b      	asrs	r3, r3, #8
 80017b2:	425b      	negs	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	33ff      	adds	r3, #255	@ 0xff
 80017b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017ba:	4353      	muls	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da00      	bge.n	80017c2 <_ZN6WS28127set_hsvEhiii+0xae>
 80017c0:	33ff      	adds	r3, #255	@ 0xff
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	613b      	str	r3, [r7, #16]

	    switch (i) {
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d828      	bhi.n	800181e <_ZN6WS28127set_hsvEhiii+0x10a>
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	009a      	lsls	r2, r3, #2
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <_ZN6WS28127set_hsvEhiii+0x148>)
 80017d2:	18d3      	adds	r3, r2, r3
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	469f      	mov	pc, r3
	        case 0: r = v; g = t; b = p; break;
 80017d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e4:	e022      	b.n	800182c <_ZN6WS28127set_hsvEhiii+0x118>
	        case 1: r = q; g = v; b = p; break;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f2:	e01b      	b.n	800182c <_ZN6WS28127set_hsvEhiii+0x118>
	        case 2: r = p; g = v; b = t; break;
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001800:	e014      	b.n	800182c <_ZN6WS28127set_hsvEhiii+0x118>
	        case 3: r = p; g = q; b = v; break;
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	e00d      	b.n	800182c <_ZN6WS28127set_hsvEhiii+0x118>
	        case 4: r = t; g = p; b = v; break;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
 800181c:	e006      	b.n	800182c <_ZN6WS28127set_hsvEhiii+0x118>
	        default: r = v; g = p;b = q; break;
 800181e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
 800182a:	46c0      	nop			@ (mov r8, r8)
	    }
	}
	set_rgb(id, r, g, b);
 800182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182e:	b2dc      	uxtb	r4, r3
 8001830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001832:	b2dd      	uxtb	r5, r3
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	b2db      	uxtb	r3, r3
 8001838:	220b      	movs	r2, #11
 800183a:	18ba      	adds	r2, r7, r2
 800183c:	7811      	ldrb	r1, [r2, #0]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	002b      	movs	r3, r5
 8001844:	0022      	movs	r2, r4
 8001846:	f000 f80b 	bl	8001860 <_ZN6WS28127set_rgbEhhhh>

}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b00c      	add	sp, #48	@ 0x30
 8001850:	bdb0      	pop	{r4, r5, r7, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)
 8001854:	800000ff 	.word	0x800000ff
 8001858:	ffffff00 	.word	0xffffff00
 800185c:	0800541c 	.word	0x0800541c

08001860 <_ZN6WS28127set_rgbEhhhh>:

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	000c      	movs	r4, r1
 800186a:	0010      	movs	r0, r2
 800186c:	0019      	movs	r1, r3
 800186e:	1cfb      	adds	r3, r7, #3
 8001870:	1c22      	adds	r2, r4, #0
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	1cbb      	adds	r3, r7, #2
 8001876:	1c02      	adds	r2, r0, #0
 8001878:	701a      	strb	r2, [r3, #0]
 800187a:	1c7b      	adds	r3, r7, #1
 800187c:	1c0a      	adds	r2, r1, #0
 800187e:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8001880:	1cfb      	adds	r3, r7, #3
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	0013      	movs	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	189b      	adds	r3, r3, r2
 800188c:	18cb      	adds	r3, r1, r3
 800188e:	330c      	adds	r3, #12
 8001890:	1cba      	adds	r2, r7, #2
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 8001896:	1cfb      	adds	r3, r7, #3
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	0013      	movs	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	189b      	adds	r3, r3, r2
 80018a2:	18cb      	adds	r3, r1, r3
 80018a4:	330d      	adds	r3, #13
 80018a6:	1c7a      	adds	r2, r7, #1
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 80018ac:	1cfb      	adds	r3, r7, #3
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	0013      	movs	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	189b      	adds	r3, r3, r2
 80018b8:	18cb      	adds	r3, r1, r3
 80018ba:	330e      	adds	r3, #14
 80018bc:	001a      	movs	r2, r3
 80018be:	2318      	movs	r3, #24
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	7013      	strb	r3, [r2, #0]
}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b003      	add	sp, #12
 80018cc:	bd90      	pop	{r4, r7, pc}
	...

080018d0 <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	23d0      	movs	r3, #208	@ 0xd0
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	58d2      	ldr	r2, [r2, r3]
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d86e      	bhi.n	80019c6 <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e05e      	b.n	80019ac <_ZN6WS281217do_forwardRewriteEv+0xdc>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	23d0      	movs	r3, #208	@ 0xd0
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	58d2      	ldr	r2, [r2, r3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	0013      	movs	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	189b      	adds	r3, r3, r2
 80018fe:	18cb      	adds	r3, r1, r3
 8001900:	330d      	adds	r3, #13
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	0019      	movs	r1, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2207      	movs	r2, #7
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4119      	asrs	r1, r3
 800190e:	000b      	movs	r3, r1
 8001910:	2201      	movs	r2, #1
 8001912:	4013      	ands	r3, r2
 8001914:	d001      	beq.n	800191a <_ZN6WS281217do_forwardRewriteEv+0x4a>
 8001916:	200a      	movs	r0, #10
 8001918:	e000      	b.n	800191c <_ZN6WS281217do_forwardRewriteEv+0x4c>
 800191a:	2005      	movs	r0, #5
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4940      	ldr	r1, [pc, #256]	@ (8001a20 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	18d3      	adds	r3, r2, r3
 8001924:	185b      	adds	r3, r3, r1
 8001926:	1c02      	adds	r2, r0, #0
 8001928:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	23d0      	movs	r3, #208	@ 0xd0
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	58d2      	ldr	r2, [r2, r3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	0013      	movs	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	189b      	adds	r3, r3, r2
 800193a:	18cb      	adds	r3, r1, r3
 800193c:	330c      	adds	r3, #12
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	0019      	movs	r1, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2207      	movs	r2, #7
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	4119      	asrs	r1, r3
 800194a:	000b      	movs	r3, r1
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	d001      	beq.n	8001956 <_ZN6WS281217do_forwardRewriteEv+0x86>
 8001952:	200a      	movs	r0, #10
 8001954:	e000      	b.n	8001958 <_ZN6WS281217do_forwardRewriteEv+0x88>
 8001956:	2005      	movs	r0, #5
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3308      	adds	r3, #8
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4930      	ldr	r1, [pc, #192]	@ (8001a20 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 8001960:	18d3      	adds	r3, r2, r3
 8001962:	185b      	adds	r3, r3, r1
 8001964:	1c02      	adds	r2, r0, #0
 8001966:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	23d0      	movs	r3, #208	@ 0xd0
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	58d2      	ldr	r2, [r2, r3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	0013      	movs	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	189b      	adds	r3, r3, r2
 8001978:	18cb      	adds	r3, r1, r3
 800197a:	330e      	adds	r3, #14
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	0019      	movs	r1, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2207      	movs	r2, #7
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	4119      	asrs	r1, r3
 8001988:	000b      	movs	r3, r1
 800198a:	2201      	movs	r2, #1
 800198c:	4013      	ands	r3, r2
 800198e:	d001      	beq.n	8001994 <_ZN6WS281217do_forwardRewriteEv+0xc4>
 8001990:	200a      	movs	r0, #10
 8001992:	e000      	b.n	8001996 <_ZN6WS281217do_forwardRewriteEv+0xc6>
 8001994:	2005      	movs	r0, #5
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3310      	adds	r3, #16
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4920      	ldr	r1, [pc, #128]	@ (8001a20 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800199e:	18d3      	adds	r3, r2, r3
 80019a0:	185b      	adds	r3, r3, r1
 80019a2:	1c02      	adds	r2, r0, #0
 80019a4:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d99d      	bls.n	80018ee <_ZN6WS281217do_forwardRewriteEv+0x1e>
        }
        wr_buf_p++;
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	23d0      	movs	r3, #208	@ 0xd0
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	58d3      	ldr	r3, [r2, r3]
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	23d0      	movs	r3, #208	@ 0xd0
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 80019c4:	e028      	b.n	8001a18 <_ZN6WS281217do_forwardRewriteEv+0x148>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	23d0      	movs	r3, #208	@ 0xd0
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	58d2      	ldr	r2, [r2, r3]
 80019ce:	2381      	movs	r3, #129	@ 0x81
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d820      	bhi.n	8001a18 <_ZN6WS281217do_forwardRewriteEv+0x148>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 80019d6:	230b      	movs	r3, #11
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e00d      	b.n	80019fc <_ZN6WS281217do_forwardRewriteEv+0x12c>
 80019e0:	200b      	movs	r0, #11
 80019e2:	183b      	adds	r3, r7, r0
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80019ea:	18d3      	adds	r3, r2, r3
 80019ec:	185b      	adds	r3, r3, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	183b      	adds	r3, r7, r0
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	183b      	adds	r3, r7, r0
 80019f8:	3201      	adds	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	230b      	movs	r3, #11
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b17      	cmp	r3, #23
 8001a04:	d9ec      	bls.n	80019e0 <_ZN6WS281217do_forwardRewriteEv+0x110>
        wr_buf_p++;
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	23d0      	movs	r3, #208	@ 0xd0
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	58d3      	ldr	r3, [r2, r3]
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	23d0      	movs	r3, #208	@ 0xd0
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	50d1      	str	r1, [r2, r3]
}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	0000030f 	.word	0x0000030f

08001a24 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	23d0      	movs	r3, #208	@ 0xd0
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	58d2      	ldr	r2, [r2, r3]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d86f      	bhi.n	8001b1c <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e05f      	b.n	8001b02 <_ZN6WS281214do_backRewriteEv+0xde>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	23d0      	movs	r3, #208	@ 0xd0
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	58d2      	ldr	r2, [r2, r3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	189b      	adds	r3, r3, r2
 8001a52:	18cb      	adds	r3, r1, r3
 8001a54:	330d      	adds	r3, #13
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0019      	movs	r1, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4119      	asrs	r1, r3
 8001a62:	000b      	movs	r3, r1
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	d001      	beq.n	8001a6e <_ZN6WS281214do_backRewriteEv+0x4a>
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	e000      	b.n	8001a70 <_ZN6WS281214do_backRewriteEv+0x4c>
 8001a6e:	2005      	movs	r0, #5
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3318      	adds	r3, #24
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4947      	ldr	r1, [pc, #284]	@ (8001b94 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001a78:	18d3      	adds	r3, r2, r3
 8001a7a:	185b      	adds	r3, r3, r1
 8001a7c:	1c02      	adds	r2, r0, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	23d0      	movs	r3, #208	@ 0xd0
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	58d2      	ldr	r2, [r2, r3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	189b      	adds	r3, r3, r2
 8001a90:	18cb      	adds	r3, r1, r3
 8001a92:	330c      	adds	r3, #12
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	0019      	movs	r1, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	4119      	asrs	r1, r3
 8001aa0:	000b      	movs	r3, r1
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d001      	beq.n	8001aac <_ZN6WS281214do_backRewriteEv+0x88>
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	e000      	b.n	8001aae <_ZN6WS281214do_backRewriteEv+0x8a>
 8001aac:	2005      	movs	r0, #5
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3320      	adds	r3, #32
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4937      	ldr	r1, [pc, #220]	@ (8001b94 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001ab6:	18d3      	adds	r3, r2, r3
 8001ab8:	185b      	adds	r3, r3, r1
 8001aba:	1c02      	adds	r2, r0, #0
 8001abc:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	23d0      	movs	r3, #208	@ 0xd0
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	58d2      	ldr	r2, [r2, r3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	0013      	movs	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	189b      	adds	r3, r3, r2
 8001ace:	18cb      	adds	r3, r1, r3
 8001ad0:	330e      	adds	r3, #14
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4119      	asrs	r1, r3
 8001ade:	000b      	movs	r3, r1
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d001      	beq.n	8001aea <_ZN6WS281214do_backRewriteEv+0xc6>
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	e000      	b.n	8001aec <_ZN6WS281214do_backRewriteEv+0xc8>
 8001aea:	2005      	movs	r0, #5
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3328      	adds	r3, #40	@ 0x28
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4928      	ldr	r1, [pc, #160]	@ (8001b94 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001af4:	18d3      	adds	r3, r2, r3
 8001af6:	185b      	adds	r3, r3, r1
 8001af8:	1c02      	adds	r2, r0, #0
 8001afa:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2b07      	cmp	r3, #7
 8001b06:	d99c      	bls.n	8001a42 <_ZN6WS281214do_backRewriteEv+0x1e>
        }
        wr_buf_p++;
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	23d0      	movs	r3, #208	@ 0xd0
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	58d3      	ldr	r3, [r2, r3]
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	23d0      	movs	r3, #208	@ 0xd0
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 8001b1a:	e036      	b.n	8001b8a <_ZN6WS281214do_backRewriteEv+0x166>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	23d0      	movs	r3, #208	@ 0xd0
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	58d2      	ldr	r2, [r2, r3]
 8001b24:	2381      	movs	r3, #129	@ 0x81
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d821      	bhi.n	8001b70 <_ZN6WS281214do_backRewriteEv+0x14c>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 8001b2c:	230b      	movs	r3, #11
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2218      	movs	r2, #24
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e00d      	b.n	8001b52 <_ZN6WS281214do_backRewriteEv+0x12e>
 8001b36:	200b      	movs	r0, #11
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4915      	ldr	r1, [pc, #84]	@ (8001b94 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	185b      	adds	r3, r3, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	3201      	adds	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	230b      	movs	r3, #11
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b5a:	d9ec      	bls.n	8001b36 <_ZN6WS281214do_backRewriteEv+0x112>
        wr_buf_p++;
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	23d0      	movs	r3, #208	@ 0xd0
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	58d3      	ldr	r3, [r2, r3]
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	23d0      	movs	r3, #208	@ 0xd0
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	50d1      	str	r1, [r2, r3]
}
 8001b6e:	e00c      	b.n	8001b8a <_ZN6WS281214do_backRewriteEv+0x166>
        wr_buf_p = 0;
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	23d0      	movs	r3, #208	@ 0xd0
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	2100      	movs	r1, #0
 8001b78:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	0019      	movs	r1, r3
 8001b84:	0010      	movs	r0, r2
 8001b86:	f001 fdbd 	bl	8003704 <HAL_TIM_PWM_Stop_DMA>
}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b004      	add	sp, #16
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	0000030f 	.word	0x0000030f

08001b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b98:	480d      	ldr	r0, [pc, #52]	@ (8001bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b9c:	f7ff fcd6 	bl	800154c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	@ (8001bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <LoopForever+0xe>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001be4 <LoopForever+0x16>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bc6:	f003 fbc9 	bl	800535c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bca:	f7fe fd0f 	bl	80005ec <main>

08001bce <LoopForever>:

LoopForever:
  b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   r0, =_estack
 8001bd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bdc:	080054a8 	.word	0x080054a8
  ldr r2, =_sbss
 8001be0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001be4:	20000648 	.word	0x20000648

08001be8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_IRQHandler>
	...

08001bec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_Init+0x3c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_Init+0x3c>)
 8001bfe:	2180      	movs	r1, #128	@ 0x80
 8001c00:	0049      	lsls	r1, r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 f810 	bl	8001c2c <HAL_InitTick>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c10:	1dfb      	adds	r3, r7, #7
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e001      	b.n	8001c1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fb3e 	bl	8001298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	230f      	movs	r3, #15
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_InitTick+0x88>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02b      	beq.n	8001c9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <HAL_InitTick+0x8c>)
 8001c46:	681c      	ldr	r4, [r3, #0]
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_InitTick+0x88>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	23fa      	movs	r3, #250	@ 0xfa
 8001c50:	0098      	lsls	r0, r3, #2
 8001c52:	f7fe fa55 	bl	8000100 <__udivsi3>
 8001c56:	0003      	movs	r3, r0
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	f7fe fa50 	bl	8000100 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 f93d 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c68:	1e03      	subs	r3, r0, #0
 8001c6a:	d112      	bne.n	8001c92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d80a      	bhi.n	8001c88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	2301      	movs	r3, #1
 8001c76:	425b      	negs	r3, r3
 8001c78:	2200      	movs	r2, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 f90c 	bl	8001e98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <HAL_InitTick+0x90>)
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e00d      	b.n	8001ca4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e008      	b.n	8001ca4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c92:	230f      	movs	r3, #15
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e003      	b.n	8001ca4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b005      	add	sp, #20
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	20000068 	.word	0x20000068
 8001cb8:	20000060 	.word	0x20000060
 8001cbc:	20000064 	.word	0x20000064

08001cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_IncTick+0x1c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	18d2      	adds	r2, r2, r3
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cd2:	601a      	str	r2, [r3, #0]
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	20000068 	.word	0x20000068
 8001ce0:	20000644 	.word	0x20000644

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b02      	ldr	r3, [pc, #8]	@ (8001cf4 <HAL_GetTick+0x10>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	20000644 	.word	0x20000644

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	001a      	movs	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	189b      	adds	r3, r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	f7ff ffe0 	bl	8001ce4 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	20000068 	.word	0x20000068

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	0002      	movs	r2, r0
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	1dfb      	adds	r3, r7, #7
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d52:	d809      	bhi.n	8001d68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	001a      	movs	r2, r3
 8001d5a:	231f      	movs	r3, #31
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	4b04      	ldr	r3, [pc, #16]	@ (8001d70 <__NVIC_EnableIRQ+0x30>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	4091      	lsls	r1, r2
 8001d64:	000a      	movs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d68:	46c0      	nop			@ (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d88:	d828      	bhi.n	8001ddc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e48 <__NVIC_SetPriority+0xd4>)
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	33c0      	adds	r3, #192	@ 0xc0
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	589b      	ldr	r3, [r3, r2]
 8001d9a:	1dfa      	adds	r2, r7, #7
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	0011      	movs	r1, r2
 8001da0:	2203      	movs	r2, #3
 8001da2:	400a      	ands	r2, r1
 8001da4:	00d2      	lsls	r2, r2, #3
 8001da6:	21ff      	movs	r1, #255	@ 0xff
 8001da8:	4091      	lsls	r1, r2
 8001daa:	000a      	movs	r2, r1
 8001dac:	43d2      	mvns	r2, r2
 8001dae:	401a      	ands	r2, r3
 8001db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	22ff      	movs	r2, #255	@ 0xff
 8001db8:	401a      	ands	r2, r3
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	4003      	ands	r3, r0
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc8:	481f      	ldr	r0, [pc, #124]	@ (8001e48 <__NVIC_SetPriority+0xd4>)
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	33c0      	adds	r3, #192	@ 0xc0
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dda:	e031      	b.n	8001e40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e4c <__NVIC_SetPriority+0xd8>)
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	0019      	movs	r1, r3
 8001de4:	230f      	movs	r3, #15
 8001de6:	400b      	ands	r3, r1
 8001de8:	3b08      	subs	r3, #8
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3306      	adds	r3, #6
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	18d3      	adds	r3, r2, r3
 8001df2:	3304      	adds	r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	1dfa      	adds	r2, r7, #7
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	400a      	ands	r2, r1
 8001e00:	00d2      	lsls	r2, r2, #3
 8001e02:	21ff      	movs	r1, #255	@ 0xff
 8001e04:	4091      	lsls	r1, r2
 8001e06:	000a      	movs	r2, r1
 8001e08:	43d2      	mvns	r2, r2
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	019b      	lsls	r3, r3, #6
 8001e12:	22ff      	movs	r2, #255	@ 0xff
 8001e14:	401a      	ands	r2, r3
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	4003      	ands	r3, r0
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e24:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <__NVIC_SetPriority+0xd8>)
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	001c      	movs	r4, r3
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	4023      	ands	r3, r4
 8001e30:	3b08      	subs	r3, #8
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	430a      	orrs	r2, r1
 8001e36:	3306      	adds	r3, #6
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	18c3      	adds	r3, r0, r3
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b003      	add	sp, #12
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	1e5a      	subs	r2, r3, #1
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	045b      	lsls	r3, r3, #17
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d301      	bcc.n	8001e68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e64:	2301      	movs	r3, #1
 8001e66:	e010      	b.n	8001e8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e68:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <SysTick_Config+0x44>)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	3a01      	subs	r2, #1
 8001e6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e70:	2301      	movs	r3, #1
 8001e72:	425b      	negs	r3, r3
 8001e74:	2103      	movs	r1, #3
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7ff ff7c 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <SysTick_Config+0x44>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SysTick_Config+0x44>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	1c02      	adds	r2, r0, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	187b      	adds	r3, r7, r1
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	0002      	movs	r2, r0
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff ff33 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff ffaf 	bl	8001e50 <SysTick_Config>
 8001ef2:	0003      	movs	r3, r0
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e077      	b.n	8001ffe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3d      	ldr	r2, [pc, #244]	@ (8002008 <HAL_DMA_Init+0x10c>)
 8001f14:	4694      	mov	ip, r2
 8001f16:	4463      	add	r3, ip
 8001f18:	2114      	movs	r1, #20
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7fe f8f0 	bl	8000100 <__udivsi3>
 8001f20:	0003      	movs	r3, r0
 8001f22:	009a      	lsls	r2, r3, #2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2225      	movs	r2, #37	@ 0x25
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4934      	ldr	r1, [pc, #208]	@ (800200c <HAL_DMA_Init+0x110>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 fa2b 	bl	80023d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d102      	bne.n	8001f90 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f98:	213f      	movs	r1, #63	@ 0x3f
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fa6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d011      	beq.n	8001fd4 <HAL_DMA_Init+0xd8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d80d      	bhi.n	8001fd4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fa36 	bl	800242c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	e008      	b.n	8001fe6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2225      	movs	r2, #37	@ 0x25
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	@ 0x24
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	bffdfff8 	.word	0xbffdfff8
 800200c:	ffff800f 	.word	0xffff800f

08002010 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2317      	movs	r3, #23
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2224      	movs	r2, #36	@ 0x24
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Start_IT+0x24>
 8002030:	2302      	movs	r3, #2
 8002032:	e06f      	b.n	8002114 <HAL_DMA_Start_IT+0x104>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2224      	movs	r2, #36	@ 0x24
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2225      	movs	r2, #37	@ 0x25
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d157      	bne.n	80020f8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2225      	movs	r2, #37	@ 0x25
 800204c:	2102      	movs	r1, #2
 800204e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2101      	movs	r1, #1
 8002062:	438a      	bics	r2, r1
 8002064:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f971 	bl	8002354 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	210e      	movs	r1, #14
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e00f      	b.n	80020ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2104      	movs	r1, #4
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	210a      	movs	r1, #10
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	4013      	ands	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	2180      	movs	r1, #128	@ 0x80
 80020c6:	0049      	lsls	r1, r1, #1
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020de:	2180      	movs	r1, #128	@ 0x80
 80020e0:	0049      	lsls	r1, r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e00a      	b.n	800210e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2224      	movs	r2, #36	@ 0x24
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002106:	2317      	movs	r3, #23
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800210e:	2317      	movs	r3, #23
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	781b      	ldrb	r3, [r3, #0]
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b006      	add	sp, #24
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	210f      	movs	r1, #15
 8002126:	187b      	adds	r3, r7, r1
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2225      	movs	r2, #37	@ 0x25
 8002130:	5c9b      	ldrb	r3, [r3, r2]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d006      	beq.n	8002146 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2204      	movs	r2, #4
 800213c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e049      	b.n	80021da <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	210e      	movs	r1, #14
 8002152:	438a      	bics	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	438a      	bics	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002170:	491d      	ldr	r1, [pc, #116]	@ (80021e8 <HAL_DMA_Abort_IT+0xcc>)
 8002172:	400a      	ands	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <HAL_DMA_Abort_IT+0xd0>)
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	221c      	movs	r2, #28
 8002180:	4013      	ands	r3, r2
 8002182:	2201      	movs	r2, #1
 8002184:	409a      	lsls	r2, r3
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_DMA_Abort_IT+0xd0>)
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002194:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a8:	490f      	ldr	r1, [pc, #60]	@ (80021e8 <HAL_DMA_Abort_IT+0xcc>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80021b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2225      	movs	r2, #37	@ 0x25
 80021bc:	2101      	movs	r1, #1
 80021be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	@ 0x24
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	0010      	movs	r0, r2
 80021d8:	4798      	blx	r3
    }
  }
  return status;
 80021da:	230f      	movs	r3, #15
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	fffffeff 	.word	0xfffffeff
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80021f8:	4b55      	ldr	r3, [pc, #340]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	221c      	movs	r2, #28
 800220c:	4013      	ands	r3, r2
 800220e:	2204      	movs	r2, #4
 8002210:	409a      	lsls	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	d027      	beq.n	800226a <HAL_DMA_IRQHandler+0x7a>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2204      	movs	r2, #4
 800221e:	4013      	ands	r3, r2
 8002220:	d023      	beq.n	800226a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2220      	movs	r2, #32
 800222a:	4013      	ands	r3, r2
 800222c:	d107      	bne.n	800223e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2104      	movs	r1, #4
 800223a:	438a      	bics	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800223e:	4b44      	ldr	r3, [pc, #272]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	221c      	movs	r2, #28
 8002248:	4013      	ands	r3, r2
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	4b40      	ldr	r3, [pc, #256]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	2b00      	cmp	r3, #0
 800225a:	d100      	bne.n	800225e <HAL_DMA_IRQHandler+0x6e>
 800225c:	e073      	b.n	8002346 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	0010      	movs	r0, r2
 8002266:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002268:	e06d      	b.n	8002346 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	221c      	movs	r2, #28
 8002270:	4013      	ands	r3, r2
 8002272:	2202      	movs	r2, #2
 8002274:	409a      	lsls	r2, r3
 8002276:	0013      	movs	r3, r2
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	d02e      	beq.n	80022dc <HAL_DMA_IRQHandler+0xec>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d02a      	beq.n	80022dc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2220      	movs	r2, #32
 800228e:	4013      	ands	r3, r2
 8002290:	d10b      	bne.n	80022aa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	210a      	movs	r1, #10
 800229e:	438a      	bics	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2225      	movs	r2, #37	@ 0x25
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	221c      	movs	r2, #28
 80022b4:	4013      	ands	r3, r2
 80022b6:	2202      	movs	r2, #2
 80022b8:	409a      	lsls	r2, r3
 80022ba:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	@ 0x24
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d03a      	beq.n	8002346 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	0010      	movs	r0, r2
 80022d8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80022da:	e034      	b.n	8002346 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	221c      	movs	r2, #28
 80022e2:	4013      	ands	r3, r2
 80022e4:	2208      	movs	r2, #8
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	d02b      	beq.n	8002348 <HAL_DMA_IRQHandler+0x158>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2208      	movs	r2, #8
 80022f4:	4013      	ands	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	210e      	movs	r1, #14
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002308:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	221c      	movs	r2, #28
 8002312:	4013      	ands	r3, r2
 8002314:	2201      	movs	r2, #1
 8002316:	409a      	lsls	r2, r3
 8002318:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_DMA_IRQHandler+0x160>)
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2225      	movs	r2, #37	@ 0x25
 8002328:	2101      	movs	r1, #1
 800232a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	@ 0x24
 8002330:	2100      	movs	r1, #0
 8002332:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	0010      	movs	r0, r2
 8002344:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	46c0      	nop			@ (mov r8, r8)
}
 800234a:	46bd      	mov	sp, r7
 800234c:	b004      	add	sp, #16
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020000 	.word	0x40020000

08002354 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800236a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002370:	2b00      	cmp	r3, #0
 8002372:	d004      	beq.n	800237e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800237c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <DMA_SetConfig+0x7c>)
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	221c      	movs	r2, #28
 8002388:	4013      	ands	r3, r2
 800238a:	2201      	movs	r2, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <DMA_SetConfig+0x7c>)
 8002390:	430a      	orrs	r2, r1
 8002392:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d108      	bne.n	80023b6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023b4:	e007      	b.n	80023c6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	60da      	str	r2, [r3, #12]
}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b004      	add	sp, #16
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	46c0      	nop			@ (mov r8, r8)
 80023d0:	40020000 	.word	0x40020000

080023d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80023e4:	4694      	mov	ip, r2
 80023e6:	4463      	add	r3, ip
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	001a      	movs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	001a      	movs	r2, r3
 80023f6:	23ff      	movs	r3, #255	@ 0xff
 80023f8:	4013      	ands	r3, r2
 80023fa:	3b08      	subs	r3, #8
 80023fc:	2114      	movs	r1, #20
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fd fe7e 	bl	8000100 <__udivsi3>
 8002404:	0003      	movs	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a07      	ldr	r2, [pc, #28]	@ (8002428 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800240c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	221f      	movs	r2, #31
 8002412:	4013      	ands	r3, r2
 8002414:	2201      	movs	r2, #1
 8002416:	409a      	lsls	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	10008200 	.word	0x10008200
 8002428:	40020880 	.word	0x40020880

0800242c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	223f      	movs	r2, #63	@ 0x3f
 800243a:	4013      	ands	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002442:	4694      	mov	ip, r2
 8002444:	4463      	add	r3, ip
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	001a      	movs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002452:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b01      	subs	r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	4013      	ands	r3, r2
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002464:	46c0      	nop			@ (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	1000823f 	.word	0x1000823f
 8002470:	40020940 	.word	0x40020940

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002482:	e147      	b.n	8002714 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4091      	lsls	r1, r2
 800248e:	000a      	movs	r2, r1
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d100      	bne.n	800249c <HAL_GPIO_Init+0x28>
 800249a:	e138      	b.n	800270e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d005      	beq.n	80024b4 <HAL_GPIO_Init+0x40>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d130      	bne.n	8002516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	409a      	lsls	r2, r3
 80024c2:	0013      	movs	r3, r2
 80024c4:	43da      	mvns	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	0013      	movs	r3, r2
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ea:	2201      	movs	r2, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	43da      	mvns	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	2201      	movs	r2, #1
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	4013      	ands	r3, r2
 800251e:	2b03      	cmp	r3, #3
 8002520:	d017      	beq.n	8002552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	409a      	lsls	r2, r3
 8002530:	0013      	movs	r3, r2
 8002532:	43da      	mvns	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2203      	movs	r2, #3
 8002558:	4013      	ands	r3, r2
 800255a:	2b02      	cmp	r3, #2
 800255c:	d123      	bne.n	80025a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	58d3      	ldr	r3, [r2, r3]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2207      	movs	r2, #7
 8002570:	4013      	ands	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2107      	movs	r1, #7
 800258a:	400b      	ands	r3, r1
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	6939      	ldr	r1, [r7, #16]
 80025a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	43da      	mvns	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2203      	movs	r2, #3
 80025c4:	401a      	ands	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	23c0      	movs	r3, #192	@ 0xc0
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	d100      	bne.n	80025e8 <HAL_GPIO_Init+0x174>
 80025e6:	e092      	b.n	800270e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025e8:	4a50      	ldr	r2, [pc, #320]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3318      	adds	r3, #24
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	589b      	ldr	r3, [r3, r2]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4013      	ands	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	220f      	movs	r2, #15
 8002600:	409a      	lsls	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	43da      	mvns	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	23a0      	movs	r3, #160	@ 0xa0
 8002610:	05db      	lsls	r3, r3, #23
 8002612:	429a      	cmp	r2, r3
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x1ca>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a45      	ldr	r2, [pc, #276]	@ (8002730 <HAL_GPIO_Init+0x2bc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x1c6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a44      	ldr	r2, [pc, #272]	@ (8002734 <HAL_GPIO_Init+0x2c0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x1c2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <HAL_GPIO_Init+0x2c4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x1be>
 800262e:	2303      	movs	r3, #3
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x1cc>
 8002632:	2305      	movs	r3, #5
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x1cc>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x1cc>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x1cc>
 800263e:	2300      	movs	r3, #0
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	2103      	movs	r1, #3
 8002644:	400a      	ands	r2, r1
 8002646:	00d2      	lsls	r2, r2, #3
 8002648:	4093      	lsls	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002650:	4936      	ldr	r1, [pc, #216]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3318      	adds	r3, #24
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800265e:	4b33      	ldr	r3, [pc, #204]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43da      	mvns	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	035b      	lsls	r3, r3, #13
 8002676:	4013      	ands	r3, r2
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002682:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002688:	4b28      	ldr	r3, [pc, #160]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43da      	mvns	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	039b      	lsls	r3, r3, #14
 80026a0:	4013      	ands	r3, r2
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026b2:	4a1e      	ldr	r2, [pc, #120]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80026b4:	2384      	movs	r3, #132	@ 0x84
 80026b6:	58d3      	ldr	r3, [r2, r3]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43da      	mvns	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	4013      	ands	r3, r2
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026d8:	4914      	ldr	r1, [pc, #80]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80026da:	2284      	movs	r2, #132	@ 0x84
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026e0:	4a12      	ldr	r2, [pc, #72]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	58d3      	ldr	r3, [r2, r3]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	025b      	lsls	r3, r3, #9
 80026fa:	4013      	ands	r3, r2
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002706:	4909      	ldr	r1, [pc, #36]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	40da      	lsrs	r2, r3
 800271c:	1e13      	subs	r3, r2, #0
 800271e:	d000      	beq.n	8002722 <HAL_GPIO_Init+0x2ae>
 8002720:	e6b0      	b.n	8002484 <HAL_GPIO_Init+0x10>
  }
}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021800 	.word	0x40021800
 8002730:	50000400 	.word	0x50000400
 8002734:	50000800 	.word	0x50000800
 8002738:	50000c00 	.word	0x50000c00

0800273c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	000a      	movs	r2, r1
 8002746:	1cbb      	adds	r3, r7, #2
 8002748:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	1cba      	adds	r2, r7, #2
 8002750:	8812      	ldrh	r2, [r2, #0]
 8002752:	4013      	ands	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002756:	230f      	movs	r3, #15
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e003      	b.n	8002768 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002760:	230f      	movs	r3, #15
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002768:	230f      	movs	r3, #15
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	0008      	movs	r0, r1
 8002780:	0011      	movs	r1, r2
 8002782:	1cbb      	adds	r3, r7, #2
 8002784:	1c02      	adds	r2, r0, #0
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	1c7b      	adds	r3, r7, #1
 800278a:	1c0a      	adds	r2, r1, #0
 800278c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800278e:	1c7b      	adds	r3, r7, #1
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002796:	1cbb      	adds	r3, r7, #2
 8002798:	881a      	ldrh	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800279e:	e003      	b.n	80027a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027a0:	1cbb      	adds	r3, r7, #2
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d11f      	bne.n	8002814 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	0013      	movs	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	189b      	adds	r3, r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4912      	ldr	r1, [pc, #72]	@ (800282c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7fd fc8c 	bl	8000100 <__udivsi3>
 80027e8:	0003      	movs	r3, r0
 80027ea:	3301      	adds	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ee:	e008      	b.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3b01      	subs	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e001      	b.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e009      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	401a      	ands	r2, r3
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	429a      	cmp	r2, r3
 8002812:	d0ed      	beq.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bd80      	pop	{r7, pc}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	40007000 	.word	0x40007000
 8002824:	fffff9ff 	.word	0xfffff9ff
 8002828:	20000060 	.word	0x20000060
 800282c:	000f4240 	.word	0x000f4240

08002830 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	23e0      	movs	r3, #224	@ 0xe0
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	4013      	ands	r3, r2
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e2f3      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	d100      	bne.n	8002866 <HAL_RCC_OscConfig+0x1e>
 8002864:	e07c      	b.n	8002960 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002866:	4bc3      	ldr	r3, [pc, #780]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2238      	movs	r2, #56	@ 0x38
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002870:	4bc0      	ldr	r3, [pc, #768]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2203      	movs	r2, #3
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b10      	cmp	r3, #16
 800287e:	d102      	bne.n	8002886 <HAL_RCC_OscConfig+0x3e>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d002      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	d062      	beq.n	800295e <HAL_RCC_OscConfig+0x116>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d15e      	bne.n	800295e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e2ce      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	025b      	lsls	r3, r3, #9
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x78>
 80028b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4baf      	ldr	r3, [pc, #700]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	0249      	lsls	r1, r1, #9
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	e020      	b.n	8002902 <HAL_RCC_OscConfig+0xba>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	23a0      	movs	r3, #160	@ 0xa0
 80028c6:	02db      	lsls	r3, r3, #11
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d10e      	bne.n	80028ea <HAL_RCC_OscConfig+0xa2>
 80028cc:	4ba9      	ldr	r3, [pc, #676]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4ba8      	ldr	r3, [pc, #672]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	02c9      	lsls	r1, r1, #11
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4ba6      	ldr	r3, [pc, #664]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4ba5      	ldr	r3, [pc, #660]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028e0:	2180      	movs	r1, #128	@ 0x80
 80028e2:	0249      	lsls	r1, r1, #9
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0xba>
 80028ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4ba1      	ldr	r3, [pc, #644]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028f0:	49a1      	ldr	r1, [pc, #644]	@ (8002b78 <HAL_RCC_OscConfig+0x330>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80028fc:	499f      	ldr	r1, [pc, #636]	@ (8002b7c <HAL_RCC_OscConfig+0x334>)
 80028fe:	400a      	ands	r2, r1
 8002900:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d014      	beq.n	8002934 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7ff f9eb 	bl	8001ce4 <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff f9e6 	bl	8001ce4 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	@ 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e28d      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002926:	4b93      	ldr	r3, [pc, #588]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	029b      	lsls	r3, r3, #10
 800292e:	4013      	ands	r3, r2
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xcc>
 8002932:	e015      	b.n	8002960 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7ff f9d6 	bl	8001ce4 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293e:	f7ff f9d1 	bl	8001ce4 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	@ 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e278      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002950:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	4013      	ands	r3, r2
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0xf6>
 800295c:	e000      	b.n	8002960 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2202      	movs	r2, #2
 8002966:	4013      	ands	r3, r2
 8002968:	d100      	bne.n	800296c <HAL_RCC_OscConfig+0x124>
 800296a:	e099      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296c:	4b81      	ldr	r3, [pc, #516]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2238      	movs	r2, #56	@ 0x38
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002976:	4b7f      	ldr	r3, [pc, #508]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2203      	movs	r2, #3
 800297c:	4013      	ands	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d102      	bne.n	800298c <HAL_RCC_OscConfig+0x144>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d002      	beq.n	8002992 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d135      	bne.n	80029fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002992:	4b78      	ldr	r3, [pc, #480]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4013      	ands	r3, r2
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x162>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e24b      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b72      	ldr	r3, [pc, #456]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a74      	ldr	r2, [pc, #464]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	021a      	lsls	r2, r3, #8
 80029ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d112      	bne.n	80029ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_RCC_OscConfig+0x33c>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	4b67      	ldr	r3, [pc, #412]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029da:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0adb      	lsrs	r3, r3, #11
 80029e0:	2207      	movs	r2, #7
 80029e2:	4013      	ands	r3, r2
 80029e4:	4a68      	ldr	r2, [pc, #416]	@ (8002b88 <HAL_RCC_OscConfig+0x340>)
 80029e6:	40da      	lsrs	r2, r3
 80029e8:	4b68      	ldr	r3, [pc, #416]	@ (8002b8c <HAL_RCC_OscConfig+0x344>)
 80029ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029ec:	4b68      	ldr	r3, [pc, #416]	@ (8002b90 <HAL_RCC_OscConfig+0x348>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff f91b 	bl	8001c2c <HAL_InitTick>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d051      	beq.n	8002a9e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e221      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d030      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a06:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b84 <HAL_RCC_OscConfig+0x33c>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a1a:	4b56      	ldr	r3, [pc, #344]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b55      	ldr	r3, [pc, #340]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a20:	2180      	movs	r1, #128	@ 0x80
 8002a22:	0049      	lsls	r1, r1, #1
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff f95c 	bl	8001ce4 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff f957 	bl	8001ce4 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e1fe      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b4b      	ldr	r3, [pc, #300]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b48      	ldr	r3, [pc, #288]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a4a      	ldr	r2, [pc, #296]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	021a      	lsls	r2, r3, #8
 8002a60:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a68:	4b42      	ldr	r3, [pc, #264]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a6e:	4949      	ldr	r1, [pc, #292]	@ (8002b94 <HAL_RCC_OscConfig+0x34c>)
 8002a70:	400a      	ands	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7ff f936 	bl	8001ce4 <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7ff f931 	bl	8001ce4 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1d8      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a90:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x236>
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d047      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002aaa:	4b32      	ldr	r3, [pc, #200]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2238      	movs	r2, #56	@ 0x38
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b18      	cmp	r3, #24
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aba:	2202      	movs	r2, #2
 8002abc:	4013      	ands	r3, r2
 8002abe:	d03c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d138      	bne.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e1ba      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d019      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ad4:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002ad6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ad8:	4b26      	ldr	r3, [pc, #152]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002ada:	2101      	movs	r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f900 	bl	8001ce4 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aea:	f7ff f8fb 	bl	8001ce4 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a2      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b00:	2202      	movs	r2, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	d0f1      	beq.n	8002aea <HAL_RCC_OscConfig+0x2a2>
 8002b06:	e018      	b.n	8002b3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002b0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b0c:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	438a      	bics	r2, r1
 8002b12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7ff f8e6 	bl	8001ce4 <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7ff f8e1 	bl	8001ce4 <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e188      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b30:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d1f1      	bne.n	8002b1e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	4013      	ands	r3, r2
 8002b42:	d100      	bne.n	8002b46 <HAL_RCC_OscConfig+0x2fe>
 8002b44:	e0c6      	b.n	8002cd4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2238      	movs	r2, #56	@ 0x38
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d11e      	bne.n	8002b98 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	d100      	bne.n	8002b66 <HAL_RCC_OscConfig+0x31e>
 8002b64:	e0b6      	b.n	8002cd4 <HAL_RCC_OscConfig+0x48c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d000      	beq.n	8002b70 <HAL_RCC_OscConfig+0x328>
 8002b6e:	e0b1      	b.n	8002cd4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e166      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	fffeffff 	.word	0xfffeffff
 8002b7c:	fffbffff 	.word	0xfffbffff
 8002b80:	ffff80ff 	.word	0xffff80ff
 8002b84:	ffffc7ff 	.word	0xffffc7ff
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	20000060 	.word	0x20000060
 8002b90:	20000064 	.word	0x20000064
 8002b94:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b98:	4bac      	ldr	r3, [pc, #688]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	055b      	lsls	r3, r3, #21
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x362>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d011      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4ba7      	ldr	r3, [pc, #668]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bb2:	4ba6      	ldr	r3, [pc, #664]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	0549      	lsls	r1, r1, #21
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bbc:	4ba3      	ldr	r3, [pc, #652]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	055b      	lsls	r3, r3, #21
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002bca:	231f      	movs	r3, #31
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd2:	4b9f      	ldr	r3, [pc, #636]	@ (8002e50 <HAL_RCC_OscConfig+0x608>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d11a      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bde:	4b9c      	ldr	r3, [pc, #624]	@ (8002e50 <HAL_RCC_OscConfig+0x608>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b9b      	ldr	r3, [pc, #620]	@ (8002e50 <HAL_RCC_OscConfig+0x608>)
 8002be4:	2180      	movs	r1, #128	@ 0x80
 8002be6:	0049      	lsls	r1, r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002bec:	f7ff f87a 	bl	8001ce4 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7ff f875 	bl	8001ce4 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e11c      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c08:	4b91      	ldr	r3, [pc, #580]	@ (8002e50 <HAL_RCC_OscConfig+0x608>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	@ 0x80
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3e2>
 8002c1c:	4b8b      	ldr	r3, [pc, #556]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c20:	4b8a      	ldr	r3, [pc, #552]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c28:	e01c      	b.n	8002c64 <HAL_RCC_OscConfig+0x41c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x404>
 8002c32:	4b86      	ldr	r3, [pc, #536]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c36:	4b85      	ldr	r3, [pc, #532]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c38:	2104      	movs	r1, #4
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c3e:	4b83      	ldr	r3, [pc, #524]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c42:	4b82      	ldr	r3, [pc, #520]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c44:	2101      	movs	r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0x41c>
 8002c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c50:	4b7e      	ldr	r3, [pc, #504]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	438a      	bics	r2, r1
 8002c56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c58:	4b7c      	ldr	r3, [pc, #496]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c5e:	2104      	movs	r1, #4
 8002c60:	438a      	bics	r2, r1
 8002c62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d014      	beq.n	8002c96 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7ff f83a 	bl	8001ce4 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c74:	e009      	b.n	8002c8a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7ff f835 	bl	8001ce4 <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	4a74      	ldr	r2, [pc, #464]	@ (8002e54 <HAL_RCC_OscConfig+0x60c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0db      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8a:	4b70      	ldr	r3, [pc, #448]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x42e>
 8002c94:	e013      	b.n	8002cbe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7ff f825 	bl	8001ce4 <HAL_GetTick>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c9e:	e009      	b.n	8002cb4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7ff f820 	bl	8001ce4 <HAL_GetTick>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	4a6a      	ldr	r2, [pc, #424]	@ (8002e54 <HAL_RCC_OscConfig+0x60c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0c6      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb4:	4b65      	ldr	r3, [pc, #404]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b60      	ldr	r3, [pc, #384]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ccc:	4b5f      	ldr	r3, [pc, #380]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002cce:	4962      	ldr	r1, [pc, #392]	@ (8002e58 <HAL_RCC_OscConfig+0x610>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d100      	bne.n	8002cde <HAL_RCC_OscConfig+0x496>
 8002cdc:	e0b0      	b.n	8002e40 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cde:	4b5b      	ldr	r3, [pc, #364]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2238      	movs	r2, #56	@ 0x38
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d100      	bne.n	8002cec <HAL_RCC_OscConfig+0x4a4>
 8002cea:	e078      	b.n	8002dde <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d153      	bne.n	8002d9c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf4:	4b55      	ldr	r3, [pc, #340]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b54      	ldr	r3, [pc, #336]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002cfa:	4958      	ldr	r1, [pc, #352]	@ (8002e5c <HAL_RCC_OscConfig+0x614>)
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe fff0 	bl	8001ce4 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7fe ffeb 	bl	8001ce4 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e092      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	049b      	lsls	r3, r3, #18
 8002d24:	4013      	ands	r3, r2
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d28:	4b48      	ldr	r3, [pc, #288]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002e60 <HAL_RCC_OscConfig+0x618>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	4b3e      	ldr	r3, [pc, #248]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d52:	430a      	orrs	r2, r1
 8002d54:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d56:	4b3d      	ldr	r3, [pc, #244]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	0449      	lsls	r1, r1, #17
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d64:	4b39      	ldr	r3, [pc, #228]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b38      	ldr	r3, [pc, #224]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d6a:	2180      	movs	r1, #128	@ 0x80
 8002d6c:	0549      	lsls	r1, r1, #21
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe ffb7 	bl	8001ce4 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe ffb2 	bl	8001ce4 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e059      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	049b      	lsls	r3, r3, #18
 8002d96:	4013      	ands	r3, r2
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x534>
 8002d9a:	e051      	b.n	8002e40 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002da2:	492e      	ldr	r1, [pc, #184]	@ (8002e5c <HAL_RCC_OscConfig+0x614>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe ff9c 	bl	8001ce4 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe ff97 	bl	8001ce4 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03e      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	049b      	lsls	r3, r3, #18
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002dd6:	4923      	ldr	r1, [pc, #140]	@ (8002e64 <HAL_RCC_OscConfig+0x61c>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e030      	b.n	8002e40 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02b      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <HAL_RCC_OscConfig+0x604>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2203      	movs	r2, #3
 8002df4:	401a      	ands	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11e      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2270      	movs	r2, #112	@ 0x70
 8002e02:	401a      	ands	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d117      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	23fe      	movs	r3, #254	@ 0xfe
 8002e10:	01db      	lsls	r3, r3, #7
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10e      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	23f8      	movs	r3, #248	@ 0xf8
 8002e22:	039b      	lsls	r3, r3, #14
 8002e24:	401a      	ands	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	0f5b      	lsrs	r3, r3, #29
 8002e32:	075a      	lsls	r2, r3, #29
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b008      	add	sp, #32
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40007000 	.word	0x40007000
 8002e54:	00001388 	.word	0x00001388
 8002e58:	efffffff 	.word	0xefffffff
 8002e5c:	feffffff 	.word	0xfeffffff
 8002e60:	1fc1808c 	.word	0x1fc1808c
 8002e64:	effefffc 	.word	0xeffefffc

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0e9      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b76      	ldr	r3, [pc, #472]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2207      	movs	r2, #7
 8002e82:	4013      	ands	r3, r2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d91e      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b73      	ldr	r3, [pc, #460]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2207      	movs	r2, #7
 8002e90:	4393      	bics	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	4b70      	ldr	r3, [pc, #448]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe ff22 	bl	8001ce4 <HAL_GetTick>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ea4:	e009      	b.n	8002eba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea6:	f7fe ff1d 	bl	8001ce4 <HAL_GetTick>
 8002eaa:	0002      	movs	r2, r0
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	4a6a      	ldr	r2, [pc, #424]	@ (800305c <HAL_RCC_ClockConfig+0x1f4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0ca      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eba:	4b67      	ldr	r3, [pc, #412]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d1ee      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d006      	beq.n	8002eea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002edc:	4b60      	ldr	r3, [pc, #384]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	4b5f      	ldr	r3, [pc, #380]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee2:	21e0      	movs	r1, #224	@ 0xe0
 8002ee4:	01c9      	lsls	r1, r1, #7
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eea:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4a5d      	ldr	r2, [pc, #372]	@ (8003064 <HAL_RCC_ClockConfig+0x1fc>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b59      	ldr	r3, [pc, #356]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	d057      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d12b      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e097      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f28:	4b4d      	ldr	r3, [pc, #308]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	049b      	lsls	r3, r3, #18
 8002f30:	4013      	ands	r3, r2
 8002f32:	d11f      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e08b      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f40:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d113      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e07f      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f58:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e074      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f66:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e06d      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f74:	4b3a      	ldr	r3, [pc, #232]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2207      	movs	r2, #7
 8002f7a:	4393      	bics	r3, r2
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4b37      	ldr	r3, [pc, #220]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f88:	f7fe feac 	bl	8001ce4 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f90:	e009      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f92:	f7fe fea7 	bl	8001ce4 <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800305c <HAL_RCC_ClockConfig+0x1f4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e054      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2238      	movs	r2, #56	@ 0x38
 8002fac:	401a      	ands	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1ec      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d21e      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2207      	movs	r2, #7
 8002fcc:	4393      	bics	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fe84 	bl	8001ce4 <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fe0:	e009      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe2:	f7fe fe7f 	bl	8001ce4 <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <HAL_RCC_ClockConfig+0x1f4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e02c      	b.n	8003050 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ff6:	4b18      	ldr	r3, [pc, #96]	@ (8003058 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2207      	movs	r2, #7
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d1ee      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2204      	movs	r2, #4
 800300a:	4013      	ands	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800300e:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <HAL_RCC_ClockConfig+0x200>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 800301e:	430a      	orrs	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003022:	f000 f829 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003026:	0001      	movs	r1, r0
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <HAL_RCC_ClockConfig+0x1f8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	220f      	movs	r2, #15
 8003030:	401a      	ands	r2, r3
 8003032:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <HAL_RCC_ClockConfig+0x204>)
 8003034:	0092      	lsls	r2, r2, #2
 8003036:	58d3      	ldr	r3, [r2, r3]
 8003038:	221f      	movs	r2, #31
 800303a:	4013      	ands	r3, r2
 800303c:	000a      	movs	r2, r1
 800303e:	40da      	lsrs	r2, r3
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x208>)
 8003042:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_ClockConfig+0x20c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0018      	movs	r0, r3
 800304a:	f7fe fdef 	bl	8001c2c <HAL_InitTick>
 800304e:	0003      	movs	r3, r0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b004      	add	sp, #16
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40022000 	.word	0x40022000
 800305c:	00001388 	.word	0x00001388
 8003060:	40021000 	.word	0x40021000
 8003064:	fffff0ff 	.word	0xfffff0ff
 8003068:	ffff8fff 	.word	0xffff8fff
 800306c:	080053bc 	.word	0x080053bc
 8003070:	20000060 	.word	0x20000060
 8003074:	20000064 	.word	0x20000064

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800307e:	4b3c      	ldr	r3, [pc, #240]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2238      	movs	r2, #56	@ 0x38
 8003084:	4013      	ands	r3, r2
 8003086:	d10f      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003088:	4b39      	ldr	r3, [pc, #228]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0adb      	lsrs	r3, r3, #11
 800308e:	2207      	movs	r2, #7
 8003090:	4013      	ands	r3, r2
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	0013      	movs	r3, r2
 8003098:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800309a:	6839      	ldr	r1, [r7, #0]
 800309c:	4835      	ldr	r0, [pc, #212]	@ (8003174 <HAL_RCC_GetSysClockFreq+0xfc>)
 800309e:	f7fd f82f 	bl	8000100 <__udivsi3>
 80030a2:	0003      	movs	r3, r0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e05d      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a8:	4b31      	ldr	r3, [pc, #196]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2238      	movs	r2, #56	@ 0x38
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003174 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e054      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2238      	movs	r2, #56	@ 0x38
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d138      	bne.n	8003138 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80030c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2203      	movs	r2, #3
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d0:	4b27      	ldr	r3, [pc, #156]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	2207      	movs	r2, #7
 80030d8:	4013      	ands	r3, r2
 80030da:	3301      	adds	r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d10d      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	4823      	ldr	r0, [pc, #140]	@ (8003174 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030e8:	f7fd f80a 	bl	8000100 <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	0019      	movs	r1, r3
 80030f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	227f      	movs	r2, #127	@ 0x7f
 80030f8:	4013      	ands	r3, r2
 80030fa:	434b      	muls	r3, r1
 80030fc:	617b      	str	r3, [r7, #20]
        break;
 80030fe:	e00d      	b.n	800311c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	481c      	ldr	r0, [pc, #112]	@ (8003174 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003104:	f7fc fffc 	bl	8000100 <__udivsi3>
 8003108:	0003      	movs	r3, r0
 800310a:	0019      	movs	r1, r3
 800310c:	4b18      	ldr	r3, [pc, #96]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	227f      	movs	r2, #127	@ 0x7f
 8003114:	4013      	ands	r3, r2
 8003116:	434b      	muls	r3, r1
 8003118:	617b      	str	r3, [r7, #20]
        break;
 800311a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800311c:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0f5b      	lsrs	r3, r3, #29
 8003122:	2207      	movs	r2, #7
 8003124:	4013      	ands	r3, r2
 8003126:	3301      	adds	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	6978      	ldr	r0, [r7, #20]
 800312e:	f7fc ffe7 	bl	8000100 <__udivsi3>
 8003132:	0003      	movs	r3, r0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	e015      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2238      	movs	r2, #56	@ 0x38
 800313e:	4013      	ands	r3, r2
 8003140:	2b20      	cmp	r3, #32
 8003142:	d103      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003144:	2380      	movs	r3, #128	@ 0x80
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800314c:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <HAL_RCC_GetSysClockFreq+0xf8>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2238      	movs	r2, #56	@ 0x38
 8003152:	4013      	ands	r3, r2
 8003154:	2b18      	cmp	r3, #24
 8003156:	d103      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003158:	23fa      	movs	r3, #250	@ 0xfa
 800315a:	01db      	lsls	r3, r3, #7
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e001      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003164:	693b      	ldr	r3, [r7, #16]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b006      	add	sp, #24
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	40021000 	.word	0x40021000
 8003174:	00f42400 	.word	0x00f42400

08003178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b02      	ldr	r3, [pc, #8]	@ (8003188 <HAL_RCC_GetHCLKFreq+0x10>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	20000060 	.word	0x20000060

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b5b0      	push	{r4, r5, r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003190:	f7ff fff2 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003194:	0004      	movs	r4, r0
 8003196:	f7ff fb4b 	bl	8002830 <LL_RCC_GetAPB1Prescaler>
 800319a:	0003      	movs	r3, r0
 800319c:	0b1a      	lsrs	r2, r3, #12
 800319e:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	58d3      	ldr	r3, [r2, r3]
 80031a4:	221f      	movs	r2, #31
 80031a6:	4013      	ands	r3, r2
 80031a8:	40dc      	lsrs	r4, r3
 80031aa:	0023      	movs	r3, r4
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bdb0      	pop	{r4, r5, r7, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	080053fc 	.word	0x080053fc

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e04a      	b.n	8003260 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	223d      	movs	r2, #61	@ 0x3d
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	223c      	movs	r2, #60	@ 0x3c
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7fe f87d 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	223d      	movs	r2, #61	@ 0x3d
 80031ea:	2102      	movs	r1, #2
 80031ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	0019      	movs	r1, r3
 80031f8:	0010      	movs	r0, r2
 80031fa:	f000 fe1f 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2248      	movs	r2, #72	@ 0x48
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223e      	movs	r2, #62	@ 0x3e
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	223f      	movs	r2, #63	@ 0x3f
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2241      	movs	r2, #65	@ 0x41
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2242      	movs	r2, #66	@ 0x42
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2243      	movs	r2, #67	@ 0x43
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2244      	movs	r2, #68	@ 0x44
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2245      	movs	r2, #69	@ 0x45
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2246      	movs	r2, #70	@ 0x46
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2247      	movs	r2, #71	@ 0x47
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	223d      	movs	r2, #61	@ 0x3d
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e04a      	b.n	8003310 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	223d      	movs	r2, #61	@ 0x3d
 800327e:	5c9b      	ldrb	r3, [r3, r2]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223c      	movs	r2, #60	@ 0x3c
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f841 	bl	8003318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223d      	movs	r2, #61	@ 0x3d
 800329a:	2102      	movs	r1, #2
 800329c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	0019      	movs	r1, r3
 80032a8:	0010      	movs	r0, r2
 80032aa:	f000 fdc7 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2248      	movs	r2, #72	@ 0x48
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	223e      	movs	r2, #62	@ 0x3e
 80032ba:	2101      	movs	r1, #1
 80032bc:	5499      	strb	r1, [r3, r2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223f      	movs	r2, #63	@ 0x3f
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2240      	movs	r2, #64	@ 0x40
 80032ca:	2101      	movs	r1, #1
 80032cc:	5499      	strb	r1, [r3, r2]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2241      	movs	r2, #65	@ 0x41
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2242      	movs	r2, #66	@ 0x42
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2243      	movs	r2, #67	@ 0x43
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2244      	movs	r2, #68	@ 0x44
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2245      	movs	r2, #69	@ 0x45
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2246      	movs	r2, #70	@ 0x46
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2247      	movs	r2, #71	@ 0x47
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223d      	movs	r2, #61	@ 0x3d
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b002      	add	sp, #8
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	001a      	movs	r2, r3
 8003336:	1cbb      	adds	r3, r7, #2
 8003338:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2317      	movs	r3, #23
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <HAL_TIM_PWM_Start_DMA+0x32>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	223e      	movs	r2, #62	@ 0x3e
 800334c:	5c9b      	ldrb	r3, [r3, r2]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b02      	subs	r3, #2
 8003352:	425a      	negs	r2, r3
 8003354:	4153      	adcs	r3, r2
 8003356:	b2db      	uxtb	r3, r3
 8003358:	e037      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0xa2>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d108      	bne.n	8003372 <HAL_TIM_PWM_Start_DMA+0x4a>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	223f      	movs	r2, #63	@ 0x3f
 8003364:	5c9b      	ldrb	r3, [r3, r2]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3b02      	subs	r3, #2
 800336a:	425a      	negs	r2, r3
 800336c:	4153      	adcs	r3, r2
 800336e:	b2db      	uxtb	r3, r3
 8003370:	e02b      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0xa2>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d108      	bne.n	800338a <HAL_TIM_PWM_Start_DMA+0x62>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2240      	movs	r2, #64	@ 0x40
 800337c:	5c9b      	ldrb	r3, [r3, r2]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3b02      	subs	r3, #2
 8003382:	425a      	negs	r2, r3
 8003384:	4153      	adcs	r3, r2
 8003386:	b2db      	uxtb	r3, r3
 8003388:	e01f      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0xa2>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d108      	bne.n	80033a2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2241      	movs	r2, #65	@ 0x41
 8003394:	5c9b      	ldrb	r3, [r3, r2]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3b02      	subs	r3, #2
 800339a:	425a      	negs	r2, r3
 800339c:	4153      	adcs	r3, r2
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	e013      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0xa2>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d108      	bne.n	80033ba <HAL_TIM_PWM_Start_DMA+0x92>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2242      	movs	r2, #66	@ 0x42
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3b02      	subs	r3, #2
 80033b2:	425a      	negs	r2, r3
 80033b4:	4153      	adcs	r3, r2
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e007      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0xa2>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2243      	movs	r2, #67	@ 0x43
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	3b02      	subs	r3, #2
 80033c4:	425a      	negs	r2, r3
 80033c6:	4153      	adcs	r3, r2
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
 80033d0:	e183      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d108      	bne.n	80033ea <HAL_TIM_PWM_Start_DMA+0xc2>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	223e      	movs	r2, #62	@ 0x3e
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	425a      	negs	r2, r3
 80033e4:	4153      	adcs	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e037      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x132>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d108      	bne.n	8003402 <HAL_TIM_PWM_Start_DMA+0xda>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	223f      	movs	r2, #63	@ 0x3f
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	425a      	negs	r2, r3
 80033fc:	4153      	adcs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e02b      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x132>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d108      	bne.n	800341a <HAL_TIM_PWM_Start_DMA+0xf2>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2240      	movs	r2, #64	@ 0x40
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	425a      	negs	r2, r3
 8003414:	4153      	adcs	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e01f      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x132>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d108      	bne.n	8003432 <HAL_TIM_PWM_Start_DMA+0x10a>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2241      	movs	r2, #65	@ 0x41
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	425a      	negs	r2, r3
 800342c:	4153      	adcs	r3, r2
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e013      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x132>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b10      	cmp	r3, #16
 8003436:	d108      	bne.n	800344a <HAL_TIM_PWM_Start_DMA+0x122>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2242      	movs	r2, #66	@ 0x42
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	425a      	negs	r2, r3
 8003444:	4153      	adcs	r3, r2
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e007      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x132>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2243      	movs	r2, #67	@ 0x43
 800344e:	5c9b      	ldrb	r3, [r3, r2]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	425a      	negs	r2, r3
 8003456:	4153      	adcs	r3, r2
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d035      	beq.n	80034ca <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_TIM_PWM_Start_DMA+0x144>
 8003464:	1cbb      	adds	r3, r7, #2
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e134      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <HAL_TIM_PWM_Start_DMA+0x158>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	223e      	movs	r2, #62	@ 0x3e
 800347a:	2102      	movs	r1, #2
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	e026      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b04      	cmp	r3, #4
 8003484:	d104      	bne.n	8003490 <HAL_TIM_PWM_Start_DMA+0x168>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	223f      	movs	r2, #63	@ 0x3f
 800348a:	2102      	movs	r1, #2
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	e01e      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d104      	bne.n	80034a0 <HAL_TIM_PWM_Start_DMA+0x178>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	2102      	movs	r1, #2
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	e016      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d104      	bne.n	80034b0 <HAL_TIM_PWM_Start_DMA+0x188>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2241      	movs	r2, #65	@ 0x41
 80034aa:	2102      	movs	r1, #2
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	e00e      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d104      	bne.n	80034c0 <HAL_TIM_PWM_Start_DMA+0x198>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2242      	movs	r2, #66	@ 0x42
 80034ba:	2102      	movs	r1, #2
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	e006      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x1a6>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2243      	movs	r2, #67	@ 0x43
 80034c4:	2102      	movs	r1, #2
 80034c6:	5499      	strb	r1, [r3, r2]
 80034c8:	e001      	b.n	80034ce <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e105      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d100      	bne.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80034d4:	e080      	b.n	80035d8 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d900      	bls.n	80034de <HAL_TIM_PWM_Start_DMA+0x1b6>
 80034dc:	e0a1      	b.n	8003622 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d054      	beq.n	800358e <HAL_TIM_PWM_Start_DMA+0x266>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d900      	bls.n	80034ec <HAL_TIM_PWM_Start_DMA+0x1c4>
 80034ea:	e09a      	b.n	8003622 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_PWM_Start_DMA+0x1d2>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d025      	beq.n	8003544 <HAL_TIM_PWM_Start_DMA+0x21c>
 80034f8:	e093      	b.n	8003622 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	4a79      	ldr	r2, [pc, #484]	@ (80036e4 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003500:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	4a78      	ldr	r2, [pc, #480]	@ (80036e8 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	4a77      	ldr	r2, [pc, #476]	@ (80036ec <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3334      	adds	r3, #52	@ 0x34
 800351e:	001a      	movs	r2, r3
 8003520:	1cbb      	adds	r3, r7, #2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	f7fe fd74 	bl	8002010 <HAL_DMA_Start_IT>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d001      	beq.n	8003530 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0d4      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0089      	lsls	r1, r1, #2
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
      break;
 8003542:	e073      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	4a66      	ldr	r2, [pc, #408]	@ (80036e4 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	4a65      	ldr	r2, [pc, #404]	@ (80036e8 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	4a64      	ldr	r2, [pc, #400]	@ (80036ec <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800355a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3338      	adds	r3, #56	@ 0x38
 8003568:	001a      	movs	r2, r3
 800356a:	1cbb      	adds	r3, r7, #2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f7fe fd4f 	bl	8002010 <HAL_DMA_Start_IT>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0af      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	00c9      	lsls	r1, r1, #3
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]
      break;
 800358c:	e04e      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	4a54      	ldr	r2, [pc, #336]	@ (80036e4 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003594:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	4a53      	ldr	r2, [pc, #332]	@ (80036e8 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	4a52      	ldr	r2, [pc, #328]	@ (80036ec <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	333c      	adds	r3, #60	@ 0x3c
 80035b2:	001a      	movs	r2, r3
 80035b4:	1cbb      	adds	r3, r7, #2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f7fe fd2a 	bl	8002010 <HAL_DMA_Start_IT>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e08a      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	0109      	lsls	r1, r1, #4
 80035d2:	430a      	orrs	r2, r1
 80035d4:	60da      	str	r2, [r3, #12]
      break;
 80035d6:	e029      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	4a41      	ldr	r2, [pc, #260]	@ (80036e4 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80035de:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	4a40      	ldr	r2, [pc, #256]	@ (80036e8 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	4a3f      	ldr	r2, [pc, #252]	@ (80036ec <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3340      	adds	r3, #64	@ 0x40
 80035fc:	001a      	movs	r2, r3
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	f7fe fd05 	bl	8002010 <HAL_DMA_Start_IT>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d001      	beq.n	800360e <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e065      	b.n	80036da <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2180      	movs	r1, #128	@ 0x80
 800361a:	0149      	lsls	r1, r1, #5
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]
      break;
 8003620:	e004      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
      break;
 800362a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800362c:	2317      	movs	r3, #23
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d14e      	bne.n	80036d4 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	2201      	movs	r2, #1
 800363e:	0018      	movs	r0, r3
 8003640:	f000 ffae 	bl	80045a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a29      	ldr	r2, [pc, #164]	@ (80036f0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x33a>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a28      	ldr	r2, [pc, #160]	@ (80036f4 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIM_PWM_Start_DMA+0x33a>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a26      	ldr	r2, [pc, #152]	@ (80036f8 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_TIM_PWM_Start_DMA+0x33e>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_TIM_PWM_Start_DMA+0x340>
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2180      	movs	r1, #128	@ 0x80
 8003678:	0209      	lsls	r1, r1, #8
 800367a:	430a      	orrs	r2, r1
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d004      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x36a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d116      	bne.n	80036c0 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a19      	ldr	r2, [pc, #100]	@ (8003700 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d016      	beq.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x3aa>
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	025b      	lsls	r3, r3, #9
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d011      	beq.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	e008      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e000      	b.n	80036d4 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80036d4:	2317      	movs	r3, #23
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	781b      	ldrb	r3, [r3, #0]
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b006      	add	sp, #24
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	08003d29 	.word	0x08003d29
 80036e8:	08003dd3 	.word	0x08003dd3
 80036ec:	08003c95 	.word	0x08003c95
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	40000400 	.word	0x40000400
 8003700:	00010007 	.word	0x00010007

08003704 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	230f      	movs	r3, #15
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d039      	beq.n	8003790 <HAL_TIM_PWM_Stop_DMA+0x8c>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d844      	bhi.n	80037ac <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d025      	beq.n	8003774 <HAL_TIM_PWM_Stop_DMA+0x70>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d83e      	bhi.n	80037ac <HAL_TIM_PWM_Stop_DMA+0xa8>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_TIM_PWM_Stop_DMA+0x38>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b04      	cmp	r3, #4
 8003738:	d00e      	beq.n	8003758 <HAL_TIM_PWM_Stop_DMA+0x54>
 800373a:	e037      	b.n	80037ac <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	495a      	ldr	r1, [pc, #360]	@ (80038b0 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003748:	400a      	ands	r2, r1
 800374a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	0018      	movs	r0, r3
 8003752:	f7fe fce3 	bl	800211c <HAL_DMA_Abort_IT>
      break;
 8003756:	e02e      	b.n	80037b6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4954      	ldr	r1, [pc, #336]	@ (80038b4 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003764:	400a      	ands	r2, r1
 8003766:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	0018      	movs	r0, r3
 800376e:	f7fe fcd5 	bl	800211c <HAL_DMA_Abort_IT>
      break;
 8003772:	e020      	b.n	80037b6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	494e      	ldr	r1, [pc, #312]	@ (80038b8 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003780:	400a      	ands	r2, r1
 8003782:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003788:	0018      	movs	r0, r3
 800378a:	f7fe fcc7 	bl	800211c <HAL_DMA_Abort_IT>
      break;
 800378e:	e012      	b.n	80037b6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4948      	ldr	r1, [pc, #288]	@ (80038bc <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 800379c:	400a      	ands	r2, r1
 800379e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fe fcb9 	bl	800211c <HAL_DMA_Abort_IT>
      break;
 80037aa:	e004      	b.n	80037b6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80037ac:	230f      	movs	r3, #15
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
      break;
 80037b4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80037b6:	230f      	movs	r3, #15
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d000      	beq.n	80037c2 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80037c0:	e06e      	b.n	80038a0 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6839      	ldr	r1, [r7, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 fee8 	bl	80045a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3a      	ldr	r2, [pc, #232]	@ (80038c0 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_TIM_PWM_Stop_DMA+0xea>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a39      	ldr	r2, [pc, #228]	@ (80038c4 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIM_PWM_Stop_DMA+0xea>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a37      	ldr	r2, [pc, #220]	@ (80038c8 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_Stop_DMA+0xee>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_PWM_Stop_DMA+0xf0>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003800:	4013      	ands	r3, r2
 8003802:	d10d      	bne.n	8003820 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a31      	ldr	r2, [pc, #196]	@ (80038d0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800380c:	4013      	ands	r3, r2
 800380e:	d107      	bne.n	8003820 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	492e      	ldr	r1, [pc, #184]	@ (80038d4 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800381c:	400a      	ands	r2, r1
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003828:	4013      	ands	r3, r2
 800382a:	d10d      	bne.n	8003848 <HAL_TIM_PWM_Stop_DMA+0x144>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4a27      	ldr	r2, [pc, #156]	@ (80038d0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8003834:	4013      	ands	r3, r2
 8003836:	d107      	bne.n	8003848 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2101      	movs	r1, #1
 8003844:	438a      	bics	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <HAL_TIM_PWM_Stop_DMA+0x154>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223e      	movs	r2, #62	@ 0x3e
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]
 8003856:	e023      	b.n	80038a0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d104      	bne.n	8003868 <HAL_TIM_PWM_Stop_DMA+0x164>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223f      	movs	r2, #63	@ 0x3f
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	e01b      	b.n	80038a0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b08      	cmp	r3, #8
 800386c:	d104      	bne.n	8003878 <HAL_TIM_PWM_Stop_DMA+0x174>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2240      	movs	r2, #64	@ 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
 8003876:	e013      	b.n	80038a0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d104      	bne.n	8003888 <HAL_TIM_PWM_Stop_DMA+0x184>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2241      	movs	r2, #65	@ 0x41
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	e00b      	b.n	80038a0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b10      	cmp	r3, #16
 800388c:	d104      	bne.n	8003898 <HAL_TIM_PWM_Stop_DMA+0x194>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2242      	movs	r2, #66	@ 0x42
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]
 8003896:	e003      	b.n	80038a0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2243      	movs	r2, #67	@ 0x43
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	fffffdff 	.word	0xfffffdff
 80038b4:	fffffbff 	.word	0xfffffbff
 80038b8:	fffff7ff 	.word	0xfffff7ff
 80038bc:	ffffefff 	.word	0xffffefff
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40014400 	.word	0x40014400
 80038c8:	40014800 	.word	0x40014800
 80038cc:	00001111 	.word	0x00001111
 80038d0:	00000444 	.word	0x00000444
 80038d4:	ffff7fff 	.word	0xffff7fff

080038d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2317      	movs	r3, #23
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	223c      	movs	r2, #60	@ 0x3c
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e0e5      	b.n	8003ac6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	223c      	movs	r2, #60	@ 0x3c
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b14      	cmp	r3, #20
 8003906:	d900      	bls.n	800390a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003908:	e0d1      	b.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	009a      	lsls	r2, r3, #2
 800390e:	4b70      	ldr	r3, [pc, #448]	@ (8003ad0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	0011      	movs	r1, r2
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fb06 	bl	8003f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2108      	movs	r1, #8
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2104      	movs	r1, #4
 8003940:	438a      	bics	r2, r1
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
      break;
 8003956:	e0af      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f000 fb65 	bl	8004030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2180      	movs	r1, #128	@ 0x80
 8003972:	0109      	lsls	r1, r1, #4
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4954      	ldr	r1, [pc, #336]	@ (8003ad4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003984:	400a      	ands	r2, r1
 8003986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6999      	ldr	r1, [r3, #24]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	619a      	str	r2, [r3, #24]
      break;
 800399c:	e08c      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	0011      	movs	r1, r2
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 fbc0 	bl	800412c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2108      	movs	r1, #8
 80039b8:	430a      	orrs	r2, r1
 80039ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2104      	movs	r1, #4
 80039c8:	438a      	bics	r2, r1
 80039ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69d9      	ldr	r1, [r3, #28]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	61da      	str	r2, [r3, #28]
      break;
 80039de:	e06b      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	0011      	movs	r1, r2
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fc21 	bl	8004230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2180      	movs	r1, #128	@ 0x80
 80039fa:	0109      	lsls	r1, r1, #4
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4932      	ldr	r1, [pc, #200]	@ (8003ad4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69d9      	ldr	r1, [r3, #28]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	021a      	lsls	r2, r3, #8
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]
      break;
 8003a24:	e048      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 fc62 	bl	80042f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2108      	movs	r1, #8
 8003a40:	430a      	orrs	r2, r1
 8003a42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2104      	movs	r1, #4
 8003a50:	438a      	bics	r2, r1
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a66:	e027      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f000 fc9b 	bl	80043ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2180      	movs	r1, #128	@ 0x80
 8003a82:	0109      	lsls	r1, r1, #4
 8003a84:	430a      	orrs	r2, r1
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4910      	ldr	r1, [pc, #64]	@ (8003ad4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aac:	e004      	b.n	8003ab8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003aae:	2317      	movs	r3, #23
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
      break;
 8003ab6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	223c      	movs	r2, #60	@ 0x3c
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

  return status;
 8003ac0:	2317      	movs	r3, #23
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781b      	ldrb	r3, [r3, #0]
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b006      	add	sp, #24
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	08005430 	.word	0x08005430
 8003ad4:	fffffbff 	.word	0xfffffbff

08003ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	230f      	movs	r3, #15
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	223c      	movs	r2, #60	@ 0x3c
 8003aee:	5c9b      	ldrb	r3, [r3, r2]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_ConfigClockSource+0x20>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e0bc      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x19a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	223c      	movs	r2, #60	@ 0x3c
 8003afc:	2101      	movs	r1, #1
 8003afe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	223d      	movs	r2, #61	@ 0x3d
 8003b04:	2102      	movs	r1, #2
 8003b06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4a5a      	ldr	r2, [pc, #360]	@ (8003c7c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4a59      	ldr	r2, [pc, #356]	@ (8003c80 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2280      	movs	r2, #128	@ 0x80
 8003b2e:	0192      	lsls	r2, r2, #6
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d040      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0xde>
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	0192      	lsls	r2, r2, #6
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d900      	bls.n	8003b3e <HAL_TIM_ConfigClockSource+0x66>
 8003b3c:	e088      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b3e:	2280      	movs	r2, #128	@ 0x80
 8003b40:	0152      	lsls	r2, r2, #5
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d100      	bne.n	8003b48 <HAL_TIM_ConfigClockSource+0x70>
 8003b46:	e088      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x182>
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	0152      	lsls	r2, r2, #5
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d900      	bls.n	8003b52 <HAL_TIM_ConfigClockSource+0x7a>
 8003b50:	e07e      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b52:	2b70      	cmp	r3, #112	@ 0x70
 8003b54:	d018      	beq.n	8003b88 <HAL_TIM_ConfigClockSource+0xb0>
 8003b56:	d900      	bls.n	8003b5a <HAL_TIM_ConfigClockSource+0x82>
 8003b58:	e07a      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b5a:	2b60      	cmp	r3, #96	@ 0x60
 8003b5c:	d04f      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x126>
 8003b5e:	d900      	bls.n	8003b62 <HAL_TIM_ConfigClockSource+0x8a>
 8003b60:	e076      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b62:	2b50      	cmp	r3, #80	@ 0x50
 8003b64:	d03b      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x106>
 8003b66:	d900      	bls.n	8003b6a <HAL_TIM_ConfigClockSource+0x92>
 8003b68:	e072      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b6a:	2b40      	cmp	r3, #64	@ 0x40
 8003b6c:	d057      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x146>
 8003b6e:	d900      	bls.n	8003b72 <HAL_TIM_ConfigClockSource+0x9a>
 8003b70:	e06e      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b72:	2b30      	cmp	r3, #48	@ 0x30
 8003b74:	d063      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x166>
 8003b76:	d86b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d060      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x166>
 8003b7c:	d868      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d05d      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x166>
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d05b      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x166>
 8003b86:	e063      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b98:	f000 fce2 	bl	8004560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2277      	movs	r2, #119	@ 0x77
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	609a      	str	r2, [r3, #8]
      break;
 8003bb4:	e052      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	f000 fccb 	bl	8004560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2180      	movs	r1, #128	@ 0x80
 8003bd6:	01c9      	lsls	r1, r1, #7
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
      break;
 8003bdc:	e03e      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	001a      	movs	r2, r3
 8003bec:	f000 fc3c 	bl	8004468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2150      	movs	r1, #80	@ 0x50
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 fc96 	bl	8004528 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e02e      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	f000 fc5a 	bl	80044c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2160      	movs	r1, #96	@ 0x60
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 fc86 	bl	8004528 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e01e      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	f000 fc1c 	bl	8004468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 fc76 	bl	8004528 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e00e      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	0019      	movs	r1, r3
 8003c48:	0010      	movs	r0, r2
 8003c4a:	f000 fc6d 	bl	8004528 <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e005      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003c5a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	223d      	movs	r2, #61	@ 0x3d
 8003c60:	2101      	movs	r1, #1
 8003c62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	223c      	movs	r2, #60	@ 0x3c
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]

  return status;
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	ffceff88 	.word	0xffceff88
 8003c80:	ffff00ff 	.word	0xffff00ff

08003c84 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003c8c:	46c0      	nop			@ (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d107      	bne.n	8003cbc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	223e      	movs	r2, #62	@ 0x3e
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]
 8003cba:	e02a      	b.n	8003d12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d107      	bne.n	8003cd6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	223f      	movs	r2, #63	@ 0x3f
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]
 8003cd4:	e01d      	b.n	8003d12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d107      	bne.n	8003cf0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2240      	movs	r2, #64	@ 0x40
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	e010      	b.n	8003d12 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d107      	bne.n	8003d0a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2241      	movs	r2, #65	@ 0x41
 8003d04:	2101      	movs	r1, #1
 8003d06:	5499      	strb	r1, [r3, r2]
 8003d08:	e003      	b.n	8003d12 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	223d      	movs	r2, #61	@ 0x3d
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff ffb5 	bl	8003c84 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d10b      	bne.n	8003d58 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d136      	bne.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	223e      	movs	r2, #62	@ 0x3e
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]
 8003d56:	e031      	b.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10b      	bne.n	8003d7a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d125      	bne.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	223f      	movs	r2, #63	@ 0x3f
 8003d74:	2101      	movs	r1, #1
 8003d76:	5499      	strb	r1, [r3, r2]
 8003d78:	e020      	b.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d10b      	bne.n	8003d9c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2204      	movs	r2, #4
 8003d88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d114      	bne.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2240      	movs	r2, #64	@ 0x40
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]
 8003d9a:	e00f      	b.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d10a      	bne.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2208      	movs	r2, #8
 8003daa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2241      	movs	r2, #65	@ 0x41
 8003db8:	2101      	movs	r1, #1
 8003dba:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fc fbb0 	bl	8000524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	771a      	strb	r2, [r3, #28]
}
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b004      	add	sp, #16
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d103      	bne.n	8003df2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	771a      	strb	r2, [r3, #28]
 8003df0:	e019      	b.n	8003e26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d103      	bne.n	8003e04 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	771a      	strb	r2, [r3, #28]
 8003e02:	e010      	b.n	8003e26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d103      	bne.n	8003e16 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2204      	movs	r2, #4
 8003e12:	771a      	strb	r2, [r3, #28]
 8003e14:	e007      	b.n	8003e26 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d102      	bne.n	8003e26 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2208      	movs	r2, #8
 8003e24:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fc fb6d 	bl	8000508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b004      	add	sp, #16
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a32      	ldr	r2, [pc, #200]	@ (8003f18 <TIM_Base_SetConfig+0xdc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x20>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a31      	ldr	r2, [pc, #196]	@ (8003f1c <TIM_Base_SetConfig+0xe0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2270      	movs	r2, #112	@ 0x70
 8003e60:	4393      	bics	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <TIM_Base_SetConfig+0xdc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00f      	beq.n	8003e96 <TIM_Base_SetConfig+0x5a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <TIM_Base_SetConfig+0xe0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <TIM_Base_SetConfig+0x5a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <TIM_Base_SetConfig+0xe4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d007      	beq.n	8003e96 <TIM_Base_SetConfig+0x5a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <TIM_Base_SetConfig+0xe8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0x5a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	@ (8003f28 <TIM_Base_SetConfig+0xec>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <TIM_Base_SetConfig+0xf0>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2280      	movs	r2, #128	@ 0x80
 8003eac:	4393      	bics	r3, r2
 8003eae:	001a      	movs	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <TIM_Base_SetConfig+0xdc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0xaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	@ (8003f24 <TIM_Base_SetConfig+0xe8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0xaa>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	@ (8003f28 <TIM_Base_SetConfig+0xec>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2201      	movs	r2, #1
 8003f06:	4393      	bics	r3, r2
 8003f08:	001a      	movs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]
  }
}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b004      	add	sp, #16
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40002000 	.word	0x40002000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800
 8003f2c:	fffffcff 	.word	0xfffffcff

08003f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	2201      	movs	r2, #1
 8003f46:	4393      	bics	r3, r2
 8003f48:	001a      	movs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8004018 <TIM_OC1_SetConfig+0xe8>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2203      	movs	r2, #3
 8003f66:	4393      	bics	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2202      	movs	r2, #2
 8003f78:	4393      	bics	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a24      	ldr	r2, [pc, #144]	@ (800401c <TIM_OC1_SetConfig+0xec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_OC1_SetConfig+0x6e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a23      	ldr	r2, [pc, #140]	@ (8004020 <TIM_OC1_SetConfig+0xf0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_OC1_SetConfig+0x6e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a22      	ldr	r2, [pc, #136]	@ (8004024 <TIM_OC1_SetConfig+0xf4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10c      	bne.n	8003fb8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a18      	ldr	r2, [pc, #96]	@ (800401c <TIM_OC1_SetConfig+0xec>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_OC1_SetConfig+0xa0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <TIM_OC1_SetConfig+0xf0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_OC1_SetConfig+0xa0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <TIM_OC1_SetConfig+0xf4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4a15      	ldr	r2, [pc, #84]	@ (8004028 <TIM_OC1_SetConfig+0xf8>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4a14      	ldr	r2, [pc, #80]	@ (800402c <TIM_OC1_SetConfig+0xfc>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b006      	add	sp, #24
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	fffeff8f 	.word	0xfffeff8f
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40014400 	.word	0x40014400
 8004024:	40014800 	.word	0x40014800
 8004028:	fffffeff 	.word	0xfffffeff
 800402c:	fffffdff 	.word	0xfffffdff

08004030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	2210      	movs	r2, #16
 8004046:	4393      	bics	r3, r2
 8004048:	001a      	movs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <TIM_OC2_SetConfig+0xe0>)
 800405e:	4013      	ands	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a2b      	ldr	r2, [pc, #172]	@ (8004114 <TIM_OC2_SetConfig+0xe4>)
 8004066:	4013      	ands	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2220      	movs	r2, #32
 800407a:	4393      	bics	r3, r2
 800407c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a22      	ldr	r2, [pc, #136]	@ (8004118 <TIM_OC2_SetConfig+0xe8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10d      	bne.n	80040ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2280      	movs	r2, #128	@ 0x80
 8004096:	4393      	bics	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2240      	movs	r2, #64	@ 0x40
 80040aa:	4393      	bics	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a19      	ldr	r2, [pc, #100]	@ (8004118 <TIM_OC2_SetConfig+0xe8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <TIM_OC2_SetConfig+0x96>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a18      	ldr	r2, [pc, #96]	@ (800411c <TIM_OC2_SetConfig+0xec>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_OC2_SetConfig+0x96>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a17      	ldr	r2, [pc, #92]	@ (8004120 <TIM_OC2_SetConfig+0xf0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d113      	bne.n	80040ee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4a16      	ldr	r2, [pc, #88]	@ (8004124 <TIM_OC2_SetConfig+0xf4>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <TIM_OC2_SetConfig+0xf8>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	46c0      	nop			@ (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b006      	add	sp, #24
 800410e:	bd80      	pop	{r7, pc}
 8004110:	feff8fff 	.word	0xfeff8fff
 8004114:	fffffcff 	.word	0xfffffcff
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	fffffbff 	.word	0xfffffbff
 8004128:	fffff7ff 	.word	0xfffff7ff

0800412c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a31      	ldr	r2, [pc, #196]	@ (8004208 <TIM_OC3_SetConfig+0xdc>)
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a2d      	ldr	r2, [pc, #180]	@ (800420c <TIM_OC3_SetConfig+0xe0>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2203      	movs	r2, #3
 8004160:	4393      	bics	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a27      	ldr	r2, [pc, #156]	@ (8004210 <TIM_OC3_SetConfig+0xe4>)
 8004172:	4013      	ands	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a23      	ldr	r2, [pc, #140]	@ (8004214 <TIM_OC3_SetConfig+0xe8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10d      	bne.n	80041a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4a22      	ldr	r2, [pc, #136]	@ (8004218 <TIM_OC3_SetConfig+0xec>)
 800418e:	4013      	ands	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4a1e      	ldr	r2, [pc, #120]	@ (800421c <TIM_OC3_SetConfig+0xf0>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <TIM_OC3_SetConfig+0xe8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_OC3_SetConfig+0x92>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004220 <TIM_OC3_SetConfig+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0x92>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004224 <TIM_OC3_SetConfig+0xf8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d113      	bne.n	80041e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <TIM_OC3_SetConfig+0xfc>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4a18      	ldr	r2, [pc, #96]	@ (800422c <TIM_OC3_SetConfig+0x100>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	46c0      	nop			@ (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b006      	add	sp, #24
 8004206:	bd80      	pop	{r7, pc}
 8004208:	fffffeff 	.word	0xfffffeff
 800420c:	fffeff8f 	.word	0xfffeff8f
 8004210:	fffffdff 	.word	0xfffffdff
 8004214:	40012c00 	.word	0x40012c00
 8004218:	fffff7ff 	.word	0xfffff7ff
 800421c:	fffffbff 	.word	0xfffffbff
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800
 8004228:	ffffefff 	.word	0xffffefff
 800422c:	ffffdfff 	.word	0xffffdfff

08004230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4a24      	ldr	r2, [pc, #144]	@ (80042d8 <TIM_OC4_SetConfig+0xa8>)
 8004246:	401a      	ands	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a20      	ldr	r2, [pc, #128]	@ (80042dc <TIM_OC4_SetConfig+0xac>)
 800425c:	4013      	ands	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <TIM_OC4_SetConfig+0xb0>)
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <TIM_OC4_SetConfig+0xb4>)
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a17      	ldr	r2, [pc, #92]	@ (80042e8 <TIM_OC4_SetConfig+0xb8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_OC4_SetConfig+0x70>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a16      	ldr	r2, [pc, #88]	@ (80042ec <TIM_OC4_SetConfig+0xbc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC4_SetConfig+0x70>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a15      	ldr	r2, [pc, #84]	@ (80042f0 <TIM_OC4_SetConfig+0xc0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4a14      	ldr	r2, [pc, #80]	@ (80042f4 <TIM_OC4_SetConfig+0xc4>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b006      	add	sp, #24
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			@ (mov r8, r8)
 80042d8:	ffffefff 	.word	0xffffefff
 80042dc:	feff8fff 	.word	0xfeff8fff
 80042e0:	fffffcff 	.word	0xfffffcff
 80042e4:	ffffdfff 	.word	0xffffdfff
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40014400 	.word	0x40014400
 80042f0:	40014800 	.word	0x40014800
 80042f4:	ffffbfff 	.word	0xffffbfff

080042f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <TIM_OC5_SetConfig+0x9c>)
 800430e:	401a      	ands	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <TIM_OC5_SetConfig+0xa0>)
 8004324:	4013      	ands	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4a19      	ldr	r2, [pc, #100]	@ (800439c <TIM_OC5_SetConfig+0xa4>)
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a15      	ldr	r2, [pc, #84]	@ (80043a0 <TIM_OC5_SetConfig+0xa8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d007      	beq.n	800435e <TIM_OC5_SetConfig+0x66>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <TIM_OC5_SetConfig+0xac>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_OC5_SetConfig+0x66>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <TIM_OC5_SetConfig+0xb0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d109      	bne.n	8004372 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4a0c      	ldr	r2, [pc, #48]	@ (8004394 <TIM_OC5_SetConfig+0x9c>)
 8004362:	4013      	ands	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	46c0      	nop			@ (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b006      	add	sp, #24
 8004392:	bd80      	pop	{r7, pc}
 8004394:	fffeffff 	.word	0xfffeffff
 8004398:	fffeff8f 	.word	0xfffeff8f
 800439c:	fffdffff 	.word	0xfffdffff
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4a22      	ldr	r2, [pc, #136]	@ (800444c <TIM_OC6_SetConfig+0xa0>)
 80043c2:	401a      	ands	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004450 <TIM_OC6_SetConfig+0xa4>)
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004454 <TIM_OC6_SetConfig+0xa8>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	051b      	lsls	r3, r3, #20
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <TIM_OC6_SetConfig+0xac>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_OC6_SetConfig+0x68>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a15      	ldr	r2, [pc, #84]	@ (800445c <TIM_OC6_SetConfig+0xb0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC6_SetConfig+0x68>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a14      	ldr	r2, [pc, #80]	@ (8004460 <TIM_OC6_SetConfig+0xb4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d109      	bne.n	8004428 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4a13      	ldr	r2, [pc, #76]	@ (8004464 <TIM_OC6_SetConfig+0xb8>)
 8004418:	4013      	ands	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b006      	add	sp, #24
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	ffefffff 	.word	0xffefffff
 8004450:	feff8fff 	.word	0xfeff8fff
 8004454:	ffdfffff 	.word	0xffdfffff
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800
 8004464:	fffbffff 	.word	0xfffbffff

08004468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	2201      	movs	r2, #1
 8004480:	4393      	bics	r3, r2
 8004482:	001a      	movs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	22f0      	movs	r2, #240	@ 0xf0
 8004492:	4393      	bics	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	220a      	movs	r2, #10
 80044a4:	4393      	bics	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b006      	add	sp, #24
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	2210      	movs	r2, #16
 80044dc:	4393      	bics	r3, r2
 80044de:	001a      	movs	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004524 <TIM_TI2_ConfigInputStage+0x60>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	031b      	lsls	r3, r3, #12
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	22a0      	movs	r2, #160	@ 0xa0
 8004500:	4393      	bics	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	46bd      	mov	sp, r7
 800451e:	b006      	add	sp, #24
 8004520:	bd80      	pop	{r7, pc}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	ffff0fff 	.word	0xffff0fff

08004528 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a08      	ldr	r2, [pc, #32]	@ (800455c <TIM_ITRx_SetConfig+0x34>)
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	2207      	movs	r2, #7
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	609a      	str	r2, [r3, #8]
}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	ffcfff8f 	.word	0xffcfff8f

08004560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	4a09      	ldr	r2, [pc, #36]	@ (800459c <TIM_ETR_SetConfig+0x3c>)
 8004578:	4013      	ands	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	609a      	str	r2, [r3, #8]
}
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b006      	add	sp, #24
 800459a:	bd80      	pop	{r7, pc}
 800459c:	ffff00ff 	.word	0xffff00ff

080045a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	221f      	movs	r2, #31
 80045b0:	4013      	ands	r3, r2
 80045b2:	2201      	movs	r2, #1
 80045b4:	409a      	lsls	r2, r3
 80045b6:	0013      	movs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	43d2      	mvns	r2, r2
 80045c2:	401a      	ands	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	211f      	movs	r1, #31
 80045d0:	400b      	ands	r3, r1
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4099      	lsls	r1, r3
 80045d6:	000b      	movs	r3, r1
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b006      	add	sp, #24
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	223c      	movs	r2, #60	@ 0x3c
 80045f6:	5c9b      	ldrb	r3, [r3, r2]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e04a      	b.n	8004696 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	223c      	movs	r2, #60	@ 0x3c
 8004604:	2101      	movs	r1, #1
 8004606:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	223d      	movs	r2, #61	@ 0x3d
 800460c:	2102      	movs	r1, #2
 800460e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a1d      	ldr	r2, [pc, #116]	@ (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800462e:	4013      	ands	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2270      	movs	r2, #112	@ 0x70
 8004640:	4393      	bics	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a10      	ldr	r2, [pc, #64]	@ (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2280      	movs	r2, #128	@ 0x80
 800466e:	4393      	bics	r3, r2
 8004670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	223d      	movs	r2, #61	@ 0x3d
 8004688:	2101      	movs	r1, #1
 800468a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	223c      	movs	r2, #60	@ 0x3c
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b004      	add	sp, #16
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	ff0fffff 	.word	0xff0fffff
 80046a8:	40000400 	.word	0x40000400

080046ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e046      	b.n	800474c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2288      	movs	r2, #136	@ 0x88
 80046c2:	589b      	ldr	r3, [r3, r2]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d107      	bne.n	80046d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2284      	movs	r2, #132	@ 0x84
 80046cc:	2100      	movs	r1, #0
 80046ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f7fc fe8c 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2288      	movs	r2, #136	@ 0x88
 80046dc:	2124      	movs	r1, #36	@ 0x24
 80046de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2101      	movs	r1, #1
 80046ec:	438a      	bics	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fa10 	bl	8004b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f8a2 	bl	800484c <UART_SetConfig>
 8004708:	0003      	movs	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e01c      	b.n	800474c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	490d      	ldr	r1, [pc, #52]	@ (8004754 <HAL_UART_Init+0xa8>)
 800471e:	400a      	ands	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	212a      	movs	r1, #42	@ 0x2a
 800472e:	438a      	bics	r2, r1
 8004730:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2101      	movs	r1, #1
 800473e:	430a      	orrs	r2, r1
 8004740:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fa9f 	bl	8004c88 <UART_CheckIdleState>
 800474a:	0003      	movs	r3, r0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}
 8004754:	ffffb7ff 	.word	0xffffb7ff

08004758 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	1dbb      	adds	r3, r7, #6
 8004764:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	228c      	movs	r2, #140	@ 0x8c
 800476a:	589b      	ldr	r3, [r3, r2]
 800476c:	2b20      	cmp	r3, #32
 800476e:	d145      	bne.n	80047fc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_UART_Receive_DMA+0x26>
 8004776:	1dbb      	adds	r3, r7, #6
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e03d      	b.n	80047fe <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	2380      	movs	r3, #128	@ 0x80
 8004788:	015b      	lsls	r3, r3, #5
 800478a:	429a      	cmp	r2, r3
 800478c:	d109      	bne.n	80047a2 <HAL_UART_Receive_DMA+0x4a>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2201      	movs	r2, #1
 800479a:	4013      	ands	r3, r2
 800479c:	d001      	beq.n	80047a2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e02d      	b.n	80047fe <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	2380      	movs	r3, #128	@ 0x80
 80047b0:	041b      	lsls	r3, r3, #16
 80047b2:	4013      	ands	r3, r2
 80047b4:	d019      	beq.n	80047ea <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ba:	613b      	str	r3, [r7, #16]
  return(result);
 80047bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	2301      	movs	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f383 8810 	msr	PRIMASK, r3
}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2180      	movs	r1, #128	@ 0x80
 80047d8:	04c9      	lsls	r1, r1, #19
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047ea:	1dbb      	adds	r3, r7, #6
 80047ec:	881a      	ldrh	r2, [r3, #0]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 fb62 	bl	8004ebc <UART_Start_Receive_DMA>
 80047f8:	0003      	movs	r3, r0
 80047fa:	e000      	b.n	80047fe <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
  }
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b008      	add	sp, #32
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	000a      	movs	r2, r1
 8004840:	1cbb      	adds	r3, r7, #2
 8004842:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004844:	46c0      	nop			@ (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b002      	add	sp, #8
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004854:	231a      	movs	r3, #26
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4313      	orrs	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4aa1      	ldr	r2, [pc, #644]	@ (8004b00 <UART_SetConfig+0x2b4>)
 800487c:	4013      	ands	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a9c      	ldr	r2, [pc, #624]	@ (8004b04 <UART_SetConfig+0x2b8>)
 8004892:	4013      	ands	r3, r2
 8004894:	0019      	movs	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a93      	ldr	r2, [pc, #588]	@ (8004b08 <UART_SetConfig+0x2bc>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	220f      	movs	r2, #15
 80048d0:	4393      	bics	r3, r2
 80048d2:	0019      	movs	r1, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a89      	ldr	r2, [pc, #548]	@ (8004b0c <UART_SetConfig+0x2c0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d127      	bne.n	800493a <UART_SetConfig+0xee>
 80048ea:	4b89      	ldr	r3, [pc, #548]	@ (8004b10 <UART_SetConfig+0x2c4>)
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	2203      	movs	r2, #3
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d017      	beq.n	8004926 <UART_SetConfig+0xda>
 80048f6:	d81b      	bhi.n	8004930 <UART_SetConfig+0xe4>
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d00a      	beq.n	8004912 <UART_SetConfig+0xc6>
 80048fc:	d818      	bhi.n	8004930 <UART_SetConfig+0xe4>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0xbc>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d00a      	beq.n	800491c <UART_SetConfig+0xd0>
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0xe4>
 8004908:	231b      	movs	r3, #27
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e021      	b.n	8004956 <UART_SetConfig+0x10a>
 8004912:	231b      	movs	r3, #27
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e01c      	b.n	8004956 <UART_SetConfig+0x10a>
 800491c:	231b      	movs	r3, #27
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	2204      	movs	r2, #4
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	e017      	b.n	8004956 <UART_SetConfig+0x10a>
 8004926:	231b      	movs	r3, #27
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	2208      	movs	r2, #8
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	e012      	b.n	8004956 <UART_SetConfig+0x10a>
 8004930:	231b      	movs	r3, #27
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	2210      	movs	r2, #16
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	e00d      	b.n	8004956 <UART_SetConfig+0x10a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	@ (8004b14 <UART_SetConfig+0x2c8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d104      	bne.n	800494e <UART_SetConfig+0x102>
 8004944:	231b      	movs	r3, #27
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e003      	b.n	8004956 <UART_SetConfig+0x10a>
 800494e:	231b      	movs	r3, #27
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2210      	movs	r2, #16
 8004954:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	2380      	movs	r3, #128	@ 0x80
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	429a      	cmp	r2, r3
 8004960:	d000      	beq.n	8004964 <UART_SetConfig+0x118>
 8004962:	e065      	b.n	8004a30 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004964:	231b      	movs	r3, #27
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b08      	cmp	r3, #8
 800496c:	d015      	beq.n	800499a <UART_SetConfig+0x14e>
 800496e:	dc18      	bgt.n	80049a2 <UART_SetConfig+0x156>
 8004970:	2b04      	cmp	r3, #4
 8004972:	d00d      	beq.n	8004990 <UART_SetConfig+0x144>
 8004974:	dc15      	bgt.n	80049a2 <UART_SetConfig+0x156>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <UART_SetConfig+0x134>
 800497a:	2b02      	cmp	r3, #2
 800497c:	d005      	beq.n	800498a <UART_SetConfig+0x13e>
 800497e:	e010      	b.n	80049a2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fc04 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004984:	0003      	movs	r3, r0
 8004986:	617b      	str	r3, [r7, #20]
        break;
 8004988:	e012      	b.n	80049b0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498a:	4b63      	ldr	r3, [pc, #396]	@ (8004b18 <UART_SetConfig+0x2cc>)
 800498c:	617b      	str	r3, [r7, #20]
        break;
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004990:	f7fe fb72 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8004994:	0003      	movs	r3, r0
 8004996:	617b      	str	r3, [r7, #20]
        break;
 8004998:	e00a      	b.n	80049b0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	617b      	str	r3, [r7, #20]
        break;
 80049a0:	e006      	b.n	80049b0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049a6:	231a      	movs	r3, #26
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
        break;
 80049ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d100      	bne.n	80049b8 <UART_SetConfig+0x16c>
 80049b6:	e08d      	b.n	8004ad4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049bc:	4b57      	ldr	r3, [pc, #348]	@ (8004b1c <UART_SetConfig+0x2d0>)
 80049be:	0052      	lsls	r2, r2, #1
 80049c0:	5ad3      	ldrh	r3, [r2, r3]
 80049c2:	0019      	movs	r1, r3
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	f7fb fb9b 	bl	8000100 <__udivsi3>
 80049ca:	0003      	movs	r3, r0
 80049cc:	005a      	lsls	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	18d2      	adds	r2, r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	0019      	movs	r1, r3
 80049dc:	0010      	movs	r0, r2
 80049de:	f7fb fb8f 	bl	8000100 <__udivsi3>
 80049e2:	0003      	movs	r3, r0
 80049e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b0f      	cmp	r3, #15
 80049ea:	d91c      	bls.n	8004a26 <UART_SetConfig+0x1da>
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	2380      	movs	r3, #128	@ 0x80
 80049f0:	025b      	lsls	r3, r3, #9
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d217      	bcs.n	8004a26 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	200e      	movs	r0, #14
 80049fc:	183b      	adds	r3, r7, r0
 80049fe:	210f      	movs	r1, #15
 8004a00:	438a      	bics	r2, r1
 8004a02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2207      	movs	r2, #7
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	b299      	uxth	r1, r3
 8004a10:	183b      	adds	r3, r7, r0
 8004a12:	183a      	adds	r2, r7, r0
 8004a14:	8812      	ldrh	r2, [r2, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	183a      	adds	r2, r7, r0
 8004a20:	8812      	ldrh	r2, [r2, #0]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	e056      	b.n	8004ad4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004a26:	231a      	movs	r3, #26
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e051      	b.n	8004ad4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a30:	231b      	movs	r3, #27
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d015      	beq.n	8004a66 <UART_SetConfig+0x21a>
 8004a3a:	dc18      	bgt.n	8004a6e <UART_SetConfig+0x222>
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d00d      	beq.n	8004a5c <UART_SetConfig+0x210>
 8004a40:	dc15      	bgt.n	8004a6e <UART_SetConfig+0x222>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <UART_SetConfig+0x200>
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d005      	beq.n	8004a56 <UART_SetConfig+0x20a>
 8004a4a:	e010      	b.n	8004a6e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7fe fb9e 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004a50:	0003      	movs	r3, r0
 8004a52:	617b      	str	r3, [r7, #20]
        break;
 8004a54:	e012      	b.n	8004a7c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a56:	4b30      	ldr	r3, [pc, #192]	@ (8004b18 <UART_SetConfig+0x2cc>)
 8004a58:	617b      	str	r3, [r7, #20]
        break;
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a5c:	f7fe fb0c 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8004a60:	0003      	movs	r3, r0
 8004a62:	617b      	str	r3, [r7, #20]
        break;
 8004a64:	e00a      	b.n	8004a7c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a66:	2380      	movs	r3, #128	@ 0x80
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	617b      	str	r3, [r7, #20]
        break;
 8004a6c:	e006      	b.n	8004a7c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a72:	231a      	movs	r3, #26
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2201      	movs	r2, #1
 8004a78:	701a      	strb	r2, [r3, #0]
        break;
 8004a7a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d028      	beq.n	8004ad4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a86:	4b25      	ldr	r3, [pc, #148]	@ (8004b1c <UART_SetConfig+0x2d0>)
 8004a88:	0052      	lsls	r2, r2, #1
 8004a8a:	5ad3      	ldrh	r3, [r2, r3]
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	6978      	ldr	r0, [r7, #20]
 8004a90:	f7fb fb36 	bl	8000100 <__udivsi3>
 8004a94:	0003      	movs	r3, r0
 8004a96:	001a      	movs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	18d2      	adds	r2, r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	0010      	movs	r0, r2
 8004aa8:	f7fb fb2a 	bl	8000100 <__udivsi3>
 8004aac:	0003      	movs	r3, r0
 8004aae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d90a      	bls.n	8004acc <UART_SetConfig+0x280>
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	2380      	movs	r3, #128	@ 0x80
 8004aba:	025b      	lsls	r3, r3, #9
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d205      	bcs.n	8004acc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	e003      	b.n	8004ad4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004acc:	231a      	movs	r3, #26
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	226a      	movs	r2, #106	@ 0x6a
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2268      	movs	r2, #104	@ 0x68
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004af0:	231a      	movs	r3, #26
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b008      	add	sp, #32
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	cfff69f3 	.word	0xcfff69f3
 8004b04:	ffffcfff 	.word	0xffffcfff
 8004b08:	11fff4ff 	.word	0x11fff4ff
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40004400 	.word	0x40004400
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	08005484 	.word	0x08005484

08004b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d00b      	beq.n	8004b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4a4a      	ldr	r2, [pc, #296]	@ (8004c64 <UART_AdvFeatureConfig+0x144>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	2201      	movs	r2, #1
 8004b50:	4013      	ands	r3, r2
 8004b52:	d00b      	beq.n	8004b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4a43      	ldr	r2, [pc, #268]	@ (8004c68 <UART_AdvFeatureConfig+0x148>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	0019      	movs	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b70:	2202      	movs	r2, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d00b      	beq.n	8004b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c6c <UART_AdvFeatureConfig+0x14c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	2204      	movs	r2, #4
 8004b94:	4013      	ands	r3, r2
 8004b96:	d00b      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4a34      	ldr	r2, [pc, #208]	@ (8004c70 <UART_AdvFeatureConfig+0x150>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c74 <UART_AdvFeatureConfig+0x154>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4a25      	ldr	r2, [pc, #148]	@ (8004c78 <UART_AdvFeatureConfig+0x158>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	0019      	movs	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	2240      	movs	r2, #64	@ 0x40
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d01d      	beq.n	8004c3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <UART_AdvFeatureConfig+0x15c>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	035b      	lsls	r3, r3, #13
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10b      	bne.n	8004c3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a15      	ldr	r2, [pc, #84]	@ (8004c80 <UART_AdvFeatureConfig+0x160>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	2280      	movs	r2, #128	@ 0x80
 8004c40:	4013      	ands	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <UART_AdvFeatureConfig+0x164>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	0019      	movs	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }
}
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b002      	add	sp, #8
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	ffff7fff 	.word	0xffff7fff
 8004c68:	fffdffff 	.word	0xfffdffff
 8004c6c:	fffeffff 	.word	0xfffeffff
 8004c70:	fffbffff 	.word	0xfffbffff
 8004c74:	ffffefff 	.word	0xffffefff
 8004c78:	ffffdfff 	.word	0xffffdfff
 8004c7c:	ffefffff 	.word	0xffefffff
 8004c80:	ff9fffff 	.word	0xff9fffff
 8004c84:	fff7ffff 	.word	0xfff7ffff

08004c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b092      	sub	sp, #72	@ 0x48
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2290      	movs	r2, #144	@ 0x90
 8004c94:	2100      	movs	r1, #0
 8004c96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c98:	f7fd f824 	bl	8001ce4 <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d12d      	bne.n	8004d0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb0:	2280      	movs	r2, #128	@ 0x80
 8004cb2:	0391      	lsls	r1, r2, #14
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	4a47      	ldr	r2, [pc, #284]	@ (8004dd4 <UART_CheckIdleState+0x14c>)
 8004cb8:	9200      	str	r2, [sp, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f000 f88e 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 8004cc0:	1e03      	subs	r3, r0, #0
 8004cc2:	d022      	beq.n	8004d0a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cce:	2301      	movs	r3, #1
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2180      	movs	r1, #128	@ 0x80
 8004ce6:	438a      	bics	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf0:	f383 8810 	msr	PRIMASK, r3
}
 8004cf4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2288      	movs	r2, #136	@ 0x88
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2284      	movs	r2, #132	@ 0x84
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e060      	b.n	8004dcc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2204      	movs	r2, #4
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d146      	bne.n	8004da6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1a:	2280      	movs	r2, #128	@ 0x80
 8004d1c:	03d1      	lsls	r1, r2, #15
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd4 <UART_CheckIdleState+0x14c>)
 8004d22:	9200      	str	r2, [sp, #0]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f000 f859 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 8004d2a:	1e03      	subs	r3, r0, #0
 8004d2c:	d03b      	beq.n	8004da6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d34:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d38:	2301      	movs	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f383 8810 	msr	PRIMASK, r3
}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4922      	ldr	r1, [pc, #136]	@ (8004dd8 <UART_CheckIdleState+0x150>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f383 8810 	msr	PRIMASK, r3
}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d60:	f3ef 8310 	mrs	r3, PRIMASK
 8004d64:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d66:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f383 8810 	msr	PRIMASK, r3
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2101      	movs	r1, #1
 8004d82:	438a      	bics	r2, r1
 8004d84:	609a      	str	r2, [r3, #8]
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f383 8810 	msr	PRIMASK, r3
}
 8004d90:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	228c      	movs	r2, #140	@ 0x8c
 8004d96:	2120      	movs	r1, #32
 8004d98:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2284      	movs	r2, #132	@ 0x84
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e012      	b.n	8004dcc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2288      	movs	r2, #136	@ 0x88
 8004daa:	2120      	movs	r1, #32
 8004dac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	228c      	movs	r2, #140	@ 0x8c
 8004db2:	2120      	movs	r1, #32
 8004db4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2284      	movs	r2, #132	@ 0x84
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b010      	add	sp, #64	@ 0x40
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	01ffffff 	.word	0x01ffffff
 8004dd8:	fffffedf 	.word	0xfffffedf

08004ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dec:	e051      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3301      	adds	r3, #1
 8004df2:	d04e      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df4:	f7fc ff76 	bl	8001ce4 <HAL_GetTick>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e051      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	4013      	ands	r3, r2
 8004e18:	d03b      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b80      	cmp	r3, #128	@ 0x80
 8004e1e:	d038      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d035      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d111      	bne.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 f922 	bl	8005088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2290      	movs	r2, #144	@ 0x90
 8004e48:	2108      	movs	r1, #8
 8004e4a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2284      	movs	r2, #132	@ 0x84
 8004e50:	2100      	movs	r1, #0
 8004e52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e02c      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69da      	ldr	r2, [r3, #28]
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	401a      	ands	r2, r3
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d112      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2280      	movs	r2, #128	@ 0x80
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f000 f905 	bl	8005088 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2290      	movs	r2, #144	@ 0x90
 8004e82:	2120      	movs	r1, #32
 8004e84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2284      	movs	r2, #132	@ 0x84
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e00f      	b.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	425a      	negs	r2, r3
 8004ea2:	4153      	adcs	r3, r2
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	1dfb      	adds	r3, r7, #7
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d09e      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b004      	add	sp, #16
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b090      	sub	sp, #64	@ 0x40
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	1dbb      	adds	r3, r7, #6
 8004ec8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1dba      	adds	r2, r7, #6
 8004ed4:	215c      	movs	r1, #92	@ 0x5c
 8004ed6:	8812      	ldrh	r2, [r2, #0]
 8004ed8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2290      	movs	r2, #144	@ 0x90
 8004ede:	2100      	movs	r1, #0
 8004ee0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	228c      	movs	r2, #140	@ 0x8c
 8004ee6:	2122      	movs	r1, #34	@ 0x22
 8004ee8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	589b      	ldr	r3, [r3, r2]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02d      	beq.n	8004f50 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2280      	movs	r2, #128	@ 0x80
 8004ef8:	589b      	ldr	r3, [r3, r2]
 8004efa:	4a40      	ldr	r2, [pc, #256]	@ (8004ffc <UART_Start_Receive_DMA+0x140>)
 8004efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2280      	movs	r2, #128	@ 0x80
 8004f02:	589b      	ldr	r3, [r3, r2]
 8004f04:	4a3e      	ldr	r2, [pc, #248]	@ (8005000 <UART_Start_Receive_DMA+0x144>)
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2280      	movs	r2, #128	@ 0x80
 8004f0c:	589b      	ldr	r3, [r3, r2]
 8004f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8005004 <UART_Start_Receive_DMA+0x148>)
 8004f10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2280      	movs	r2, #128	@ 0x80
 8004f16:	589b      	ldr	r3, [r3, r2]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	5898      	ldr	r0, [r3, r2]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3324      	adds	r3, #36	@ 0x24
 8004f28:	0019      	movs	r1, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2e:	001a      	movs	r2, r3
 8004f30:	1dbb      	adds	r3, r7, #6
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	f7fd f86c 	bl	8002010 <HAL_DMA_Start_IT>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d009      	beq.n	8004f50 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2290      	movs	r2, #144	@ 0x90
 8004f40:	2110      	movs	r1, #16
 8004f42:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	228c      	movs	r2, #140	@ 0x8c
 8004f48:	2120      	movs	r1, #32
 8004f4a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e050      	b.n	8004ff2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d019      	beq.n	8004f8c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f58:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f62:	2301      	movs	r3, #1
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	f383 8810 	msr	PRIMASK, r3
}
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2180      	movs	r1, #128	@ 0x80
 8004f7a:	0049      	lsls	r1, r1, #1
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f82:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f90:	613b      	str	r3, [r7, #16]
  return(result);
 8004f92:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f96:	2301      	movs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f383 8810 	msr	PRIMASK, r3
}
 8004fa0:	46c0      	nop			@ (mov r8, r8)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f383 8810 	msr	PRIMASK, r3
}
 8004fbc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc2:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fc4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc8:	2301      	movs	r3, #1
 8004fca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2140      	movs	r1, #64	@ 0x40
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	f383 8810 	msr	PRIMASK, r3
}
 8004fee:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b010      	add	sp, #64	@ 0x40
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	08005155 	.word	0x08005155
 8005000:	08005285 	.word	0x08005285
 8005004:	080052c7 	.word	0x080052c7

08005008 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005010:	f3ef 8310 	mrs	r3, PRIMASK
 8005014:	60bb      	str	r3, [r7, #8]
  return(result);
 8005016:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
 800501a:	2301      	movs	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	21c0      	movs	r1, #192	@ 0xc0
 8005032:	438a      	bics	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f383 8810 	msr	PRIMASK, r3
}
 8005040:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005042:	f3ef 8310 	mrs	r3, PRIMASK
 8005046:	617b      	str	r3, [r7, #20]
  return(result);
 8005048:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	2301      	movs	r3, #1
 800504e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f383 8810 	msr	PRIMASK, r3
}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4908      	ldr	r1, [pc, #32]	@ (8005084 <UART_EndTxTransfer+0x7c>)
 8005064:	400a      	ands	r2, r1
 8005066:	609a      	str	r2, [r3, #8]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2288      	movs	r2, #136	@ 0x88
 8005078:	2120      	movs	r1, #32
 800507a:	5099      	str	r1, [r3, r2]
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b00a      	add	sp, #40	@ 0x28
 8005082:	bd80      	pop	{r7, pc}
 8005084:	ff7fffff 	.word	0xff7fffff

08005088 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	@ 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005090:	f3ef 8310 	mrs	r3, PRIMASK
 8005094:	617b      	str	r3, [r7, #20]
  return(result);
 8005096:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005098:	637b      	str	r3, [r7, #52]	@ 0x34
 800509a:	2301      	movs	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f383 8810 	msr	PRIMASK, r3
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4926      	ldr	r1, [pc, #152]	@ (800514c <UART_EndRxTransfer+0xc4>)
 80050b2:	400a      	ands	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c2:	f3ef 8310 	mrs	r3, PRIMASK
 80050c6:	623b      	str	r3, [r7, #32]
  return(result);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80050cc:	2301      	movs	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	491b      	ldr	r1, [pc, #108]	@ (8005150 <UART_EndRxTransfer+0xc8>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d118      	bne.n	800512e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005100:	60bb      	str	r3, [r7, #8]
  return(result);
 8005102:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005106:	2301      	movs	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f383 8810 	msr	PRIMASK, r3
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2110      	movs	r1, #16
 800511e:	438a      	bics	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	228c      	movs	r2, #140	@ 0x8c
 8005132:	2120      	movs	r1, #32
 8005134:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b00e      	add	sp, #56	@ 0x38
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	fffffedf 	.word	0xfffffedf
 8005150:	effffffe 	.word	0xeffffffe

08005154 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b094      	sub	sp, #80	@ 0x50
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2220      	movs	r2, #32
 800516a:	4013      	ands	r3, r2
 800516c:	d16f      	bne.n	800524e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800516e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005170:	225e      	movs	r2, #94	@ 0x5e
 8005172:	2100      	movs	r1, #0
 8005174:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005176:	f3ef 8310 	mrs	r3, PRIMASK
 800517a:	61bb      	str	r3, [r7, #24]
  return(result);
 800517c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005180:	2301      	movs	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f383 8810 	msr	PRIMASK, r3
}
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	493a      	ldr	r1, [pc, #232]	@ (8005280 <UART_DMAReceiveCplt+0x12c>)
 8005198:	400a      	ands	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800519e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b2:	2301      	movs	r3, #1
 80051b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	46c0      	nop			@ (mov r8, r8)
 80051be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2101      	movs	r1, #1
 80051ca:	438a      	bics	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051da:	f3ef 8310 	mrs	r3, PRIMASK
 80051de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80051e4:	2301      	movs	r3, #1
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ea:	f383 8810 	msr	PRIMASK, r3
}
 80051ee:	46c0      	nop			@ (mov r8, r8)
 80051f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2140      	movs	r1, #64	@ 0x40
 80051fc:	438a      	bics	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005202:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800520c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800520e:	228c      	movs	r2, #140	@ 0x8c
 8005210:	2120      	movs	r1, #32
 8005212:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d118      	bne.n	800524e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521c:	f3ef 8310 	mrs	r3, PRIMASK
 8005220:	60fb      	str	r3, [r7, #12]
  return(result);
 8005222:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005226:	2301      	movs	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			@ (mov r8, r8)
 8005232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2110      	movs	r1, #16
 800523e:	438a      	bics	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f383 8810 	msr	PRIMASK, r3
}
 800524c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800524e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005250:	2200      	movs	r2, #0
 8005252:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d108      	bne.n	800526e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800525e:	225c      	movs	r2, #92	@ 0x5c
 8005260:	5a9a      	ldrh	r2, [r3, r2]
 8005262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005264:	0011      	movs	r1, r2
 8005266:	0018      	movs	r0, r3
 8005268:	f7ff fae5 	bl	8004836 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800526c:	e003      	b.n	8005276 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800526e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005270:	0018      	movs	r0, r3
 8005272:	f7ff fac8 	bl	8004806 <HAL_UART_RxCpltCallback>
}
 8005276:	46c0      	nop			@ (mov r8, r8)
 8005278:	46bd      	mov	sp, r7
 800527a:	b014      	add	sp, #80	@ 0x50
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	fffffeff 	.word	0xfffffeff

08005284 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10a      	bne.n	80052b6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	225c      	movs	r2, #92	@ 0x5c
 80052a4:	5a9b      	ldrh	r3, [r3, r2]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	0011      	movs	r1, r2
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7ff fac1 	bl	8004836 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052b4:	e003      	b.n	80052be <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	0018      	movs	r0, r3
 80052ba:	f7ff faac 	bl	8004816 <HAL_UART_RxHalfCpltCallback>
}
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b004      	add	sp, #16
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2288      	movs	r2, #136	@ 0x88
 80052d8:	589b      	ldr	r3, [r3, r2]
 80052da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	228c      	movs	r2, #140	@ 0x8c
 80052e0:	589b      	ldr	r3, [r3, r2]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2280      	movs	r2, #128	@ 0x80
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b80      	cmp	r3, #128	@ 0x80
 80052f0:	d10a      	bne.n	8005308 <UART_DMAError+0x42>
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b21      	cmp	r3, #33	@ 0x21
 80052f6:	d107      	bne.n	8005308 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2256      	movs	r2, #86	@ 0x56
 80052fc:	2100      	movs	r1, #0
 80052fe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	0018      	movs	r0, r3
 8005304:	f7ff fe80 	bl	8005008 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2240      	movs	r2, #64	@ 0x40
 8005310:	4013      	ands	r3, r2
 8005312:	2b40      	cmp	r3, #64	@ 0x40
 8005314:	d10a      	bne.n	800532c <UART_DMAError+0x66>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b22      	cmp	r3, #34	@ 0x22
 800531a:	d107      	bne.n	800532c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	225e      	movs	r2, #94	@ 0x5e
 8005320:	2100      	movs	r1, #0
 8005322:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	0018      	movs	r0, r3
 8005328:	f7ff feae 	bl	8005088 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2290      	movs	r2, #144	@ 0x90
 8005330:	589b      	ldr	r3, [r3, r2]
 8005332:	2210      	movs	r2, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2190      	movs	r1, #144	@ 0x90
 800533a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff fa71 	bl	8004826 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b006      	add	sp, #24
 800534a:	bd80      	pop	{r7, pc}

0800534c <memset>:
 800534c:	0003      	movs	r3, r0
 800534e:	1882      	adds	r2, r0, r2
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	7019      	strb	r1, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	2600      	movs	r6, #0
 8005360:	4c0c      	ldr	r4, [pc, #48]	@ (8005394 <__libc_init_array+0x38>)
 8005362:	4d0d      	ldr	r5, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005364:	1b64      	subs	r4, r4, r5
 8005366:	10a4      	asrs	r4, r4, #2
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	2600      	movs	r6, #0
 800536e:	f000 f819 	bl	80053a4 <_init>
 8005372:	4c0a      	ldr	r4, [pc, #40]	@ (800539c <__libc_init_array+0x40>)
 8005374:	4d0a      	ldr	r5, [pc, #40]	@ (80053a0 <__libc_init_array+0x44>)
 8005376:	1b64      	subs	r4, r4, r5
 8005378:	10a4      	asrs	r4, r4, #2
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	00b3      	lsls	r3, r6, #2
 8005382:	58eb      	ldr	r3, [r5, r3]
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	00b3      	lsls	r3, r6, #2
 800538c:	58eb      	ldr	r3, [r5, r3]
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	0800549c 	.word	0x0800549c
 8005398:	0800549c 	.word	0x0800549c
 800539c:	080054a4 	.word	0x080054a4
 80053a0:	0800549c 	.word	0x0800549c

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
