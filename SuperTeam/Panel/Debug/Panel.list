
Panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005084  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800521c  0800521c  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  0800521c  0800521c  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800521c  0800521c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800521c  0800521c  0000621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005224  08005224  00006224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005228  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000014  0800523c  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800523c  00007588  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001351b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002633  00000000  00000000  0001a557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001cb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b08  00000000  00000000  0001d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001762d  00000000  00000000  0001e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001174e  00000000  00000000  00035aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d075  00000000  00000000  000471fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000d42b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000d7584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005124 	.word	0x08005124

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08005124 	.word	0x08005124

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f8ab 	bl	800037c <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f82b 	bl	800028c <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f89d 	bl	800037c <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			@ (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f893 	bl	800037c <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			@ (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f839 	bl	80002dc <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			@ (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f82f 	bl	80002dc <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__eqsf2>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	0042      	lsls	r2, r0, #1
 8000290:	024e      	lsls	r6, r1, #9
 8000292:	004c      	lsls	r4, r1, #1
 8000294:	0245      	lsls	r5, r0, #9
 8000296:	0a6d      	lsrs	r5, r5, #9
 8000298:	0e12      	lsrs	r2, r2, #24
 800029a:	0fc3      	lsrs	r3, r0, #31
 800029c:	0a76      	lsrs	r6, r6, #9
 800029e:	0e24      	lsrs	r4, r4, #24
 80002a0:	0fc9      	lsrs	r1, r1, #31
 80002a2:	2aff      	cmp	r2, #255	@ 0xff
 80002a4:	d010      	beq.n	80002c8 <__eqsf2+0x3c>
 80002a6:	2cff      	cmp	r4, #255	@ 0xff
 80002a8:	d00c      	beq.n	80002c4 <__eqsf2+0x38>
 80002aa:	2001      	movs	r0, #1
 80002ac:	42a2      	cmp	r2, r4
 80002ae:	d10a      	bne.n	80002c6 <__eqsf2+0x3a>
 80002b0:	42b5      	cmp	r5, r6
 80002b2:	d108      	bne.n	80002c6 <__eqsf2+0x3a>
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d00f      	beq.n	80002d8 <__eqsf2+0x4c>
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d104      	bne.n	80002c6 <__eqsf2+0x3a>
 80002bc:	0028      	movs	r0, r5
 80002be:	1e43      	subs	r3, r0, #1
 80002c0:	4198      	sbcs	r0, r3
 80002c2:	e000      	b.n	80002c6 <__eqsf2+0x3a>
 80002c4:	2001      	movs	r0, #1
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	2001      	movs	r0, #1
 80002ca:	2cff      	cmp	r4, #255	@ 0xff
 80002cc:	d1fb      	bne.n	80002c6 <__eqsf2+0x3a>
 80002ce:	4335      	orrs	r5, r6
 80002d0:	d1f9      	bne.n	80002c6 <__eqsf2+0x3a>
 80002d2:	404b      	eors	r3, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	e7f6      	b.n	80002c6 <__eqsf2+0x3a>
 80002d8:	2000      	movs	r0, #0
 80002da:	e7f4      	b.n	80002c6 <__eqsf2+0x3a>

080002dc <__gesf2>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	0042      	lsls	r2, r0, #1
 80002e0:	0244      	lsls	r4, r0, #9
 80002e2:	024d      	lsls	r5, r1, #9
 80002e4:	0fc3      	lsrs	r3, r0, #31
 80002e6:	0048      	lsls	r0, r1, #1
 80002e8:	0a64      	lsrs	r4, r4, #9
 80002ea:	0e12      	lsrs	r2, r2, #24
 80002ec:	0a6d      	lsrs	r5, r5, #9
 80002ee:	0e00      	lsrs	r0, r0, #24
 80002f0:	0fc9      	lsrs	r1, r1, #31
 80002f2:	2aff      	cmp	r2, #255	@ 0xff
 80002f4:	d019      	beq.n	800032a <__gesf2+0x4e>
 80002f6:	28ff      	cmp	r0, #255	@ 0xff
 80002f8:	d00b      	beq.n	8000312 <__gesf2+0x36>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d11e      	bne.n	800033c <__gesf2+0x60>
 80002fe:	2800      	cmp	r0, #0
 8000300:	d10b      	bne.n	800031a <__gesf2+0x3e>
 8000302:	2d00      	cmp	r5, #0
 8000304:	d027      	beq.n	8000356 <__gesf2+0x7a>
 8000306:	2c00      	cmp	r4, #0
 8000308:	d134      	bne.n	8000374 <__gesf2+0x98>
 800030a:	2900      	cmp	r1, #0
 800030c:	d02f      	beq.n	800036e <__gesf2+0x92>
 800030e:	0008      	movs	r0, r1
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	2d00      	cmp	r5, #0
 8000314:	d128      	bne.n	8000368 <__gesf2+0x8c>
 8000316:	2a00      	cmp	r2, #0
 8000318:	d101      	bne.n	800031e <__gesf2+0x42>
 800031a:	2c00      	cmp	r4, #0
 800031c:	d0f5      	beq.n	800030a <__gesf2+0x2e>
 800031e:	428b      	cmp	r3, r1
 8000320:	d107      	bne.n	8000332 <__gesf2+0x56>
 8000322:	2b00      	cmp	r3, #0
 8000324:	d023      	beq.n	800036e <__gesf2+0x92>
 8000326:	0018      	movs	r0, r3
 8000328:	e7f2      	b.n	8000310 <__gesf2+0x34>
 800032a:	2c00      	cmp	r4, #0
 800032c:	d11c      	bne.n	8000368 <__gesf2+0x8c>
 800032e:	28ff      	cmp	r0, #255	@ 0xff
 8000330:	d014      	beq.n	800035c <__gesf2+0x80>
 8000332:	1e58      	subs	r0, r3, #1
 8000334:	2302      	movs	r3, #2
 8000336:	4018      	ands	r0, r3
 8000338:	3801      	subs	r0, #1
 800033a:	e7e9      	b.n	8000310 <__gesf2+0x34>
 800033c:	2800      	cmp	r0, #0
 800033e:	d0f8      	beq.n	8000332 <__gesf2+0x56>
 8000340:	428b      	cmp	r3, r1
 8000342:	d1f6      	bne.n	8000332 <__gesf2+0x56>
 8000344:	4282      	cmp	r2, r0
 8000346:	dcf4      	bgt.n	8000332 <__gesf2+0x56>
 8000348:	dbeb      	blt.n	8000322 <__gesf2+0x46>
 800034a:	42ac      	cmp	r4, r5
 800034c:	d8f1      	bhi.n	8000332 <__gesf2+0x56>
 800034e:	2000      	movs	r0, #0
 8000350:	42ac      	cmp	r4, r5
 8000352:	d2dd      	bcs.n	8000310 <__gesf2+0x34>
 8000354:	e7e5      	b.n	8000322 <__gesf2+0x46>
 8000356:	2c00      	cmp	r4, #0
 8000358:	d0da      	beq.n	8000310 <__gesf2+0x34>
 800035a:	e7ea      	b.n	8000332 <__gesf2+0x56>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d103      	bne.n	8000368 <__gesf2+0x8c>
 8000360:	428b      	cmp	r3, r1
 8000362:	d1e6      	bne.n	8000332 <__gesf2+0x56>
 8000364:	2000      	movs	r0, #0
 8000366:	e7d3      	b.n	8000310 <__gesf2+0x34>
 8000368:	2002      	movs	r0, #2
 800036a:	4240      	negs	r0, r0
 800036c:	e7d0      	b.n	8000310 <__gesf2+0x34>
 800036e:	2001      	movs	r0, #1
 8000370:	4240      	negs	r0, r0
 8000372:	e7cd      	b.n	8000310 <__gesf2+0x34>
 8000374:	428b      	cmp	r3, r1
 8000376:	d0e8      	beq.n	800034a <__gesf2+0x6e>
 8000378:	e7db      	b.n	8000332 <__gesf2+0x56>
 800037a:	46c0      	nop			@ (mov r8, r8)

0800037c <__lesf2>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	0042      	lsls	r2, r0, #1
 8000380:	0244      	lsls	r4, r0, #9
 8000382:	024d      	lsls	r5, r1, #9
 8000384:	0fc3      	lsrs	r3, r0, #31
 8000386:	0048      	lsls	r0, r1, #1
 8000388:	0a64      	lsrs	r4, r4, #9
 800038a:	0e12      	lsrs	r2, r2, #24
 800038c:	0a6d      	lsrs	r5, r5, #9
 800038e:	0e00      	lsrs	r0, r0, #24
 8000390:	0fc9      	lsrs	r1, r1, #31
 8000392:	2aff      	cmp	r2, #255	@ 0xff
 8000394:	d01a      	beq.n	80003cc <__lesf2+0x50>
 8000396:	28ff      	cmp	r0, #255	@ 0xff
 8000398:	d00e      	beq.n	80003b8 <__lesf2+0x3c>
 800039a:	2a00      	cmp	r2, #0
 800039c:	d11e      	bne.n	80003dc <__lesf2+0x60>
 800039e:	2800      	cmp	r0, #0
 80003a0:	d10e      	bne.n	80003c0 <__lesf2+0x44>
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d02a      	beq.n	80003fc <__lesf2+0x80>
 80003a6:	2c00      	cmp	r4, #0
 80003a8:	d00c      	beq.n	80003c4 <__lesf2+0x48>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d01d      	beq.n	80003ea <__lesf2+0x6e>
 80003ae:	1e58      	subs	r0, r3, #1
 80003b0:	2302      	movs	r3, #2
 80003b2:	4018      	ands	r0, r3
 80003b4:	3801      	subs	r0, #1
 80003b6:	e010      	b.n	80003da <__lesf2+0x5e>
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d10d      	bne.n	80003d8 <__lesf2+0x5c>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	d120      	bne.n	8000402 <__lesf2+0x86>
 80003c0:	2c00      	cmp	r4, #0
 80003c2:	d11e      	bne.n	8000402 <__lesf2+0x86>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d023      	beq.n	8000410 <__lesf2+0x94>
 80003c8:	0008      	movs	r0, r1
 80003ca:	e006      	b.n	80003da <__lesf2+0x5e>
 80003cc:	2c00      	cmp	r4, #0
 80003ce:	d103      	bne.n	80003d8 <__lesf2+0x5c>
 80003d0:	28ff      	cmp	r0, #255	@ 0xff
 80003d2:	d1ec      	bne.n	80003ae <__lesf2+0x32>
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d017      	beq.n	8000408 <__lesf2+0x8c>
 80003d8:	2002      	movs	r0, #2
 80003da:	bd30      	pop	{r4, r5, pc}
 80003dc:	2800      	cmp	r0, #0
 80003de:	d0e6      	beq.n	80003ae <__lesf2+0x32>
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d1e4      	bne.n	80003ae <__lesf2+0x32>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	dce2      	bgt.n	80003ae <__lesf2+0x32>
 80003e8:	db04      	blt.n	80003f4 <__lesf2+0x78>
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	d8df      	bhi.n	80003ae <__lesf2+0x32>
 80003ee:	2000      	movs	r0, #0
 80003f0:	42ac      	cmp	r4, r5
 80003f2:	d2f2      	bcs.n	80003da <__lesf2+0x5e>
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d00b      	beq.n	8000410 <__lesf2+0x94>
 80003f8:	0018      	movs	r0, r3
 80003fa:	e7ee      	b.n	80003da <__lesf2+0x5e>
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d0ec      	beq.n	80003da <__lesf2+0x5e>
 8000400:	e7d5      	b.n	80003ae <__lesf2+0x32>
 8000402:	428b      	cmp	r3, r1
 8000404:	d1d3      	bne.n	80003ae <__lesf2+0x32>
 8000406:	e7f5      	b.n	80003f4 <__lesf2+0x78>
 8000408:	2000      	movs	r0, #0
 800040a:	428b      	cmp	r3, r1
 800040c:	d0e5      	beq.n	80003da <__lesf2+0x5e>
 800040e:	e7ce      	b.n	80003ae <__lesf2+0x32>
 8000410:	2001      	movs	r0, #1
 8000412:	4240      	negs	r0, r0
 8000414:	e7e1      	b.n	80003da <__lesf2+0x5e>
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_i2f>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	2800      	cmp	r0, #0
 800041c:	d013      	beq.n	8000446 <__aeabi_i2f+0x2e>
 800041e:	17c3      	asrs	r3, r0, #31
 8000420:	18c5      	adds	r5, r0, r3
 8000422:	405d      	eors	r5, r3
 8000424:	0fc4      	lsrs	r4, r0, #31
 8000426:	0028      	movs	r0, r5
 8000428:	f000 f842 	bl	80004b0 <__clzsi2>
 800042c:	239e      	movs	r3, #158	@ 0x9e
 800042e:	0001      	movs	r1, r0
 8000430:	1a1b      	subs	r3, r3, r0
 8000432:	2b96      	cmp	r3, #150	@ 0x96
 8000434:	dc0f      	bgt.n	8000456 <__aeabi_i2f+0x3e>
 8000436:	2808      	cmp	r0, #8
 8000438:	d034      	beq.n	80004a4 <__aeabi_i2f+0x8c>
 800043a:	3908      	subs	r1, #8
 800043c:	408d      	lsls	r5, r1
 800043e:	026d      	lsls	r5, r5, #9
 8000440:	0a6d      	lsrs	r5, r5, #9
 8000442:	b2d8      	uxtb	r0, r3
 8000444:	e002      	b.n	800044c <__aeabi_i2f+0x34>
 8000446:	2400      	movs	r4, #0
 8000448:	2000      	movs	r0, #0
 800044a:	2500      	movs	r5, #0
 800044c:	05c0      	lsls	r0, r0, #23
 800044e:	4328      	orrs	r0, r5
 8000450:	07e4      	lsls	r4, r4, #31
 8000452:	4320      	orrs	r0, r4
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	2b99      	cmp	r3, #153	@ 0x99
 8000458:	dc16      	bgt.n	8000488 <__aeabi_i2f+0x70>
 800045a:	1f42      	subs	r2, r0, #5
 800045c:	2805      	cmp	r0, #5
 800045e:	d000      	beq.n	8000462 <__aeabi_i2f+0x4a>
 8000460:	4095      	lsls	r5, r2
 8000462:	002a      	movs	r2, r5
 8000464:	4811      	ldr	r0, [pc, #68]	@ (80004ac <__aeabi_i2f+0x94>)
 8000466:	4002      	ands	r2, r0
 8000468:	076e      	lsls	r6, r5, #29
 800046a:	d009      	beq.n	8000480 <__aeabi_i2f+0x68>
 800046c:	260f      	movs	r6, #15
 800046e:	4035      	ands	r5, r6
 8000470:	2d04      	cmp	r5, #4
 8000472:	d005      	beq.n	8000480 <__aeabi_i2f+0x68>
 8000474:	3204      	adds	r2, #4
 8000476:	0155      	lsls	r5, r2, #5
 8000478:	d502      	bpl.n	8000480 <__aeabi_i2f+0x68>
 800047a:	239f      	movs	r3, #159	@ 0x9f
 800047c:	4002      	ands	r2, r0
 800047e:	1a5b      	subs	r3, r3, r1
 8000480:	0192      	lsls	r2, r2, #6
 8000482:	0a55      	lsrs	r5, r2, #9
 8000484:	b2d8      	uxtb	r0, r3
 8000486:	e7e1      	b.n	800044c <__aeabi_i2f+0x34>
 8000488:	2205      	movs	r2, #5
 800048a:	1a12      	subs	r2, r2, r0
 800048c:	0028      	movs	r0, r5
 800048e:	40d0      	lsrs	r0, r2
 8000490:	0002      	movs	r2, r0
 8000492:	0008      	movs	r0, r1
 8000494:	301b      	adds	r0, #27
 8000496:	4085      	lsls	r5, r0
 8000498:	0028      	movs	r0, r5
 800049a:	1e45      	subs	r5, r0, #1
 800049c:	41a8      	sbcs	r0, r5
 800049e:	4302      	orrs	r2, r0
 80004a0:	0015      	movs	r5, r2
 80004a2:	e7de      	b.n	8000462 <__aeabi_i2f+0x4a>
 80004a4:	026d      	lsls	r5, r5, #9
 80004a6:	2096      	movs	r0, #150	@ 0x96
 80004a8:	0a6d      	lsrs	r5, r5, #9
 80004aa:	e7cf      	b.n	800044c <__aeabi_i2f+0x34>
 80004ac:	fbffffff 	.word	0xfbffffff

080004b0 <__clzsi2>:
 80004b0:	211c      	movs	r1, #28
 80004b2:	2301      	movs	r3, #1
 80004b4:	041b      	lsls	r3, r3, #16
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d301      	bcc.n	80004be <__clzsi2+0xe>
 80004ba:	0c00      	lsrs	r0, r0, #16
 80004bc:	3910      	subs	r1, #16
 80004be:	0a1b      	lsrs	r3, r3, #8
 80004c0:	4298      	cmp	r0, r3
 80004c2:	d301      	bcc.n	80004c8 <__clzsi2+0x18>
 80004c4:	0a00      	lsrs	r0, r0, #8
 80004c6:	3908      	subs	r1, #8
 80004c8:	091b      	lsrs	r3, r3, #4
 80004ca:	4298      	cmp	r0, r3
 80004cc:	d301      	bcc.n	80004d2 <__clzsi2+0x22>
 80004ce:	0900      	lsrs	r0, r0, #4
 80004d0:	3904      	subs	r1, #4
 80004d2:	a202      	add	r2, pc, #8	@ (adr r2, 80004dc <__clzsi2+0x2c>)
 80004d4:	5c10      	ldrb	r0, [r2, r0]
 80004d6:	1840      	adds	r0, r0, r1
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	02020304 	.word	0x02020304
 80004e0:	01010101 	.word	0x01010101
	...

080004ec <_ZN3LEDC1EP6WS2812>:
#include "led.h"

LED::LED(WS2812* neopixel){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
    NEOPIXEL = neopixel;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	601a      	str	r2, [r3, #0]
}
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	Neopixel.do_forwardRewrite();
 8000510:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18>)
 8000512:	0018      	movs	r0, r3
 8000514:	f001 f89c 	bl	8001650 <_ZN6WS281217do_forwardRewriteEv>
}
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200001c8 	.word	0x200001c8

08000524 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	Neopixel.do_backRewrite();
 800052c:	4b03      	ldr	r3, [pc, #12]	@ (800053c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f938 	bl	80017a4 <_ZN6WS281214do_backRewriteEv>
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200001c8 	.word	0x200001c8

08000540 <_Z6readIDv>:

uint8_t readID(){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
	uint8_t ID = 0;
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){
 800054c:	2380      	movs	r3, #128	@ 0x80
 800054e:	015a      	lsls	r2, r3, #5
 8000550:	23a0      	movs	r3, #160	@ 0xa0
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 ffb0 	bl	80024bc <HAL_GPIO_ReadPin>
 800055c:	0003      	movs	r3, r0
 800055e:	3b01      	subs	r3, #1
 8000560:	425a      	negs	r2, r3
 8000562:	4153      	adcs	r3, r2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d004      	beq.n	8000574 <_Z6readIDv+0x34>
		ID+=1;
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	1dfa      	adds	r2, r7, #7
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	3201      	adds	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <_Z6readIDv+0xa8>)
 8000576:	2108      	movs	r1, #8
 8000578:	0018      	movs	r0, r3
 800057a:	f001 ff9f 	bl	80024bc <HAL_GPIO_ReadPin>
 800057e:	0003      	movs	r3, r0
 8000580:	3b01      	subs	r3, #1
 8000582:	425a      	negs	r2, r3
 8000584:	4153      	adcs	r3, r2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d004      	beq.n	8000596 <_Z6readIDv+0x56>
		ID+=2;
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	1dfa      	adds	r2, r7, #7
 8000590:	7812      	ldrb	r2, [r2, #0]
 8000592:	3202      	adds	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <_Z6readIDv+0xa8>)
 8000598:	2110      	movs	r1, #16
 800059a:	0018      	movs	r0, r3
 800059c:	f001 ff8e 	bl	80024bc <HAL_GPIO_ReadPin>
 80005a0:	0003      	movs	r3, r0
 80005a2:	3b01      	subs	r3, #1
 80005a4:	425a      	negs	r2, r3
 80005a6:	4153      	adcs	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d004      	beq.n	80005b8 <_Z6readIDv+0x78>
		ID+=4;
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	1dfa      	adds	r2, r7, #7
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	3204      	adds	r2, #4
 80005b6:	701a      	strb	r2, [r3, #0]
	}
	//養生5番はここを消す。ハード故障。
//	if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){
//		ID+=8;
//	}
	if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <_Z6readIDv+0xa8>)
 80005ba:	2140      	movs	r1, #64	@ 0x40
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 ff7d 	bl	80024bc <HAL_GPIO_ReadPin>
 80005c2:	0003      	movs	r3, r0
 80005c4:	3b01      	subs	r3, #1
 80005c6:	425a      	negs	r2, r3
 80005c8:	4153      	adcs	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <_Z6readIDv+0x9a>
		ID+=16;
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	1dfa      	adds	r2, r7, #7
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	3210      	adds	r2, #16
 80005d8:	701a      	strb	r2, [r3, #0]
	}
	return ID;
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	50000400 	.word	0x50000400

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	b097      	sub	sp, #92	@ 0x5c
 80005f0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f9bb 	bl	800196c <HAL_Init>

  /* USER CODE BEGIN Init */
  for(uint8_t i=0; i<64; i++){
 80005f6:	2337      	movs	r3, #55	@ 0x37
 80005f8:	18fb      	adds	r3, r7, r3
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	e00a      	b.n	8000616 <main+0x2a>
	  rxBuf[i] = 255;
 8000600:	2037      	movs	r0, #55	@ 0x37
 8000602:	183b      	adds	r3, r7, r0
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4ad3      	ldr	r2, [pc, #844]	@ (8000954 <main+0x368>)
 8000608:	21ff      	movs	r1, #255	@ 0xff
 800060a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0; i<64; i++){
 800060c:	183b      	adds	r3, r7, r0
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	183b      	adds	r3, r7, r0
 8000612:	3201      	adds	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	2337      	movs	r3, #55	@ 0x37
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b3f      	cmp	r3, #63	@ 0x3f
 800061e:	d9ef      	bls.n	8000600 <main+0x14>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f9f0 	bl	8000a04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 fb3a 	bl	8000c9c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000628:	f000 fb12 	bl	8000c50 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800062c:	f000 fad8 	bl	8000be0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000630:	f000 fa44 	bl	8000abc <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, rxBuf, 64);
 8000634:	49c7      	ldr	r1, [pc, #796]	@ (8000954 <main+0x368>)
 8000636:	4bc8      	ldr	r3, [pc, #800]	@ (8000958 <main+0x36c>)
 8000638:	2240      	movs	r2, #64	@ 0x40
 800063a:	0018      	movs	r0, r3
 800063c:	f003 ff4c 	bl	80044d8 <HAL_UART_Receive_DMA>
  HAL_Delay(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f001 fa19 	bl	8001a78 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	readBuf(&huart2, rxBuf, 64, Data, 12, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA, 30);
 8000646:	4ac5      	ldr	r2, [pc, #788]	@ (800095c <main+0x370>)
 8000648:	49c2      	ldr	r1, [pc, #776]	@ (8000954 <main+0x368>)
 800064a:	48c3      	ldr	r0, [pc, #780]	@ (8000958 <main+0x36c>)
 800064c:	231e      	movs	r3, #30
 800064e:	9306      	str	r3, [sp, #24]
 8000650:	4bc3      	ldr	r3, [pc, #780]	@ (8000960 <main+0x374>)
 8000652:	9305      	str	r3, [sp, #20]
 8000654:	4bc3      	ldr	r3, [pc, #780]	@ (8000964 <main+0x378>)
 8000656:	9304      	str	r3, [sp, #16]
 8000658:	4bc3      	ldr	r3, [pc, #780]	@ (8000968 <main+0x37c>)
 800065a:	9303      	str	r3, [sp, #12]
 800065c:	4bc3      	ldr	r3, [pc, #780]	@ (800096c <main+0x380>)
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	2300      	movs	r3, #0
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	230c      	movs	r3, #12
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	0013      	movs	r3, r2
 800066a:	2240      	movs	r2, #64	@ 0x40
 800066c:	f000 fb86 	bl	8000d7c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>
	myid = readID();
 8000670:	f7ff ff66 	bl	8000540 <_Z6readIDv>
 8000674:	0003      	movs	r3, r0
 8000676:	b25a      	sxtb	r2, r3
 8000678:	4bbd      	ldr	r3, [pc, #756]	@ (8000970 <main+0x384>)
 800067a:	701a      	strb	r2, [r3, #0]

	circle_x = Data[0]-100;
 800067c:	4bb7      	ldr	r3, [pc, #732]	@ (800095c <main+0x370>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b64      	subs	r3, #100	@ 0x64
 8000682:	b29b      	uxth	r3, r3
 8000684:	b21a      	sxth	r2, r3
 8000686:	4bbb      	ldr	r3, [pc, #748]	@ (8000974 <main+0x388>)
 8000688:	801a      	strh	r2, [r3, #0]
	circle_z = Data[1]-100;
 800068a:	4bb4      	ldr	r3, [pc, #720]	@ (800095c <main+0x370>)
 800068c:	785b      	ldrb	r3, [r3, #1]
 800068e:	3b64      	subs	r3, #100	@ 0x64
 8000690:	b29b      	uxth	r3, r3
 8000692:	b21a      	sxth	r2, r3
 8000694:	4bb8      	ldr	r3, [pc, #736]	@ (8000978 <main+0x38c>)
 8000696:	801a      	strh	r2, [r3, #0]
	circle_r = Data[2];
 8000698:	4bb0      	ldr	r3, [pc, #704]	@ (800095c <main+0x370>)
 800069a:	789a      	ldrb	r2, [r3, #2]
 800069c:	4bb7      	ldr	r3, [pc, #732]	@ (800097c <main+0x390>)
 800069e:	701a      	strb	r2, [r3, #0]
	circle_h = Data[3];
 80006a0:	4bae      	ldr	r3, [pc, #696]	@ (800095c <main+0x370>)
 80006a2:	78da      	ldrb	r2, [r3, #3]
 80006a4:	4bb6      	ldr	r3, [pc, #728]	@ (8000980 <main+0x394>)
 80006a6:	701a      	strb	r2, [r3, #0]
	circle_s = Data[4];
 80006a8:	4bac      	ldr	r3, [pc, #688]	@ (800095c <main+0x370>)
 80006aa:	791a      	ldrb	r2, [r3, #4]
 80006ac:	4bb5      	ldr	r3, [pc, #724]	@ (8000984 <main+0x398>)
 80006ae:	701a      	strb	r2, [r3, #0]
	circle_v = Data[5];
 80006b0:	4baa      	ldr	r3, [pc, #680]	@ (800095c <main+0x370>)
 80006b2:	795a      	ldrb	r2, [r3, #5]
 80006b4:	4bb4      	ldr	r3, [pc, #720]	@ (8000988 <main+0x39c>)
 80006b6:	701a      	strb	r2, [r3, #0]
	back_h = Data[6];
 80006b8:	4ba8      	ldr	r3, [pc, #672]	@ (800095c <main+0x370>)
 80006ba:	799a      	ldrb	r2, [r3, #6]
 80006bc:	4bb3      	ldr	r3, [pc, #716]	@ (800098c <main+0x3a0>)
 80006be:	701a      	strb	r2, [r3, #0]
	back_s = Data[7];
 80006c0:	4ba6      	ldr	r3, [pc, #664]	@ (800095c <main+0x370>)
 80006c2:	79da      	ldrb	r2, [r3, #7]
 80006c4:	4bb2      	ldr	r3, [pc, #712]	@ (8000990 <main+0x3a4>)
 80006c6:	701a      	strb	r2, [r3, #0]
	back_v = Data[8];
 80006c8:	4ba4      	ldr	r3, [pc, #656]	@ (800095c <main+0x370>)
 80006ca:	7a1a      	ldrb	r2, [r3, #8]
 80006cc:	4bb1      	ldr	r3, [pc, #708]	@ (8000994 <main+0x3a8>)
 80006ce:	701a      	strb	r2, [r3, #0]
	square_h = Data[9];
 80006d0:	4ba2      	ldr	r3, [pc, #648]	@ (800095c <main+0x370>)
 80006d2:	7a5a      	ldrb	r2, [r3, #9]
 80006d4:	4bb0      	ldr	r3, [pc, #704]	@ (8000998 <main+0x3ac>)
 80006d6:	701a      	strb	r2, [r3, #0]
	square_s = Data[10];
 80006d8:	4ba0      	ldr	r3, [pc, #640]	@ (800095c <main+0x370>)
 80006da:	7a9a      	ldrb	r2, [r3, #10]
 80006dc:	4baf      	ldr	r3, [pc, #700]	@ (800099c <main+0x3b0>)
 80006de:	701a      	strb	r2, [r3, #0]
	square_v = Data[11];
 80006e0:	4b9e      	ldr	r3, [pc, #632]	@ (800095c <main+0x370>)
 80006e2:	7ada      	ldrb	r2, [r3, #11]
 80006e4:	4bae      	ldr	r3, [pc, #696]	@ (80009a0 <main+0x3b4>)
 80006e6:	701a      	strb	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Neopixel.clear();
 80006e8:	4bae      	ldr	r3, [pc, #696]	@ (80009a4 <main+0x3b8>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fea2 	bl	8001434 <_ZN6WS28125clearEv>


	  //----------------------------------------------
	  uint16_t PANEL_START_X = 0;
 80006f0:	2134      	movs	r1, #52	@ 0x34
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	801a      	strh	r2, [r3, #0]
	  uint16_t PANEL_START_Z = 0;
 80006f8:	2032      	movs	r0, #50	@ 0x32
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	2200      	movs	r2, #0
 80006fe:	801a      	strh	r2, [r3, #0]

	  if	 (myid==0){PANEL_START_X = 0; PANEL_START_Z = 0;}
 8000700:	4b9b      	ldr	r3, [pc, #620]	@ (8000970 <main+0x384>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	2b00      	cmp	r3, #0
 8000708:	d106      	bne.n	8000718 <main+0x12c>
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	801a      	strh	r2, [r3, #0]
 8000710:	183b      	adds	r3, r7, r0
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]
 8000716:	e06e      	b.n	80007f6 <main+0x20a>
	  else if(myid==1){PANEL_START_X = 0; PANEL_START_Z = 16;}
 8000718:	4b95      	ldr	r3, [pc, #596]	@ (8000970 <main+0x384>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b25b      	sxtb	r3, r3
 800071e:	2b01      	cmp	r3, #1
 8000720:	d108      	bne.n	8000734 <main+0x148>
 8000722:	2334      	movs	r3, #52	@ 0x34
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	2200      	movs	r2, #0
 8000728:	801a      	strh	r2, [r3, #0]
 800072a:	2332      	movs	r3, #50	@ 0x32
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	2210      	movs	r2, #16
 8000730:	801a      	strh	r2, [r3, #0]
 8000732:	e060      	b.n	80007f6 <main+0x20a>
	  else if(myid==2){PANEL_START_X = 0; PANEL_START_Z = 32;}
 8000734:	4b8e      	ldr	r3, [pc, #568]	@ (8000970 <main+0x384>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b25b      	sxtb	r3, r3
 800073a:	2b02      	cmp	r3, #2
 800073c:	d108      	bne.n	8000750 <main+0x164>
 800073e:	2334      	movs	r3, #52	@ 0x34
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	2200      	movs	r2, #0
 8000744:	801a      	strh	r2, [r3, #0]
 8000746:	2332      	movs	r3, #50	@ 0x32
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	2220      	movs	r2, #32
 800074c:	801a      	strh	r2, [r3, #0]
 800074e:	e052      	b.n	80007f6 <main+0x20a>

	  else if(myid==3){PANEL_START_X = 16; PANEL_START_Z = 0;}
 8000750:	4b87      	ldr	r3, [pc, #540]	@ (8000970 <main+0x384>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	2b03      	cmp	r3, #3
 8000758:	d108      	bne.n	800076c <main+0x180>
 800075a:	2334      	movs	r3, #52	@ 0x34
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	2210      	movs	r2, #16
 8000760:	801a      	strh	r2, [r3, #0]
 8000762:	2332      	movs	r3, #50	@ 0x32
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	e044      	b.n	80007f6 <main+0x20a>
	  else if(myid==4){PANEL_START_X = 16; PANEL_START_Z = 16;}
 800076c:	4b80      	ldr	r3, [pc, #512]	@ (8000970 <main+0x384>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	2b04      	cmp	r3, #4
 8000774:	d108      	bne.n	8000788 <main+0x19c>
 8000776:	2334      	movs	r3, #52	@ 0x34
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	2210      	movs	r2, #16
 800077c:	801a      	strh	r2, [r3, #0]
 800077e:	2332      	movs	r3, #50	@ 0x32
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	2210      	movs	r2, #16
 8000784:	801a      	strh	r2, [r3, #0]
 8000786:	e036      	b.n	80007f6 <main+0x20a>
	  else if(myid==5){PANEL_START_X = 16; PANEL_START_Z = 32;}
 8000788:	4b79      	ldr	r3, [pc, #484]	@ (8000970 <main+0x384>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b25b      	sxtb	r3, r3
 800078e:	2b05      	cmp	r3, #5
 8000790:	d108      	bne.n	80007a4 <main+0x1b8>
 8000792:	2334      	movs	r3, #52	@ 0x34
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	2210      	movs	r2, #16
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	2332      	movs	r3, #50	@ 0x32
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	2220      	movs	r2, #32
 80007a0:	801a      	strh	r2, [r3, #0]
 80007a2:	e028      	b.n	80007f6 <main+0x20a>

	  else if(myid==6){PANEL_START_X = 32; PANEL_START_Z = 0;}
 80007a4:	4b72      	ldr	r3, [pc, #456]	@ (8000970 <main+0x384>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d108      	bne.n	80007c0 <main+0x1d4>
 80007ae:	2334      	movs	r3, #52	@ 0x34
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2220      	movs	r2, #32
 80007b4:	801a      	strh	r2, [r3, #0]
 80007b6:	2332      	movs	r3, #50	@ 0x32
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	2200      	movs	r2, #0
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	e01a      	b.n	80007f6 <main+0x20a>
	  else if(myid==7){PANEL_START_X = 32; PANEL_START_Z = 16;}
 80007c0:	4b6b      	ldr	r3, [pc, #428]	@ (8000970 <main+0x384>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d108      	bne.n	80007dc <main+0x1f0>
 80007ca:	2334      	movs	r3, #52	@ 0x34
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	2220      	movs	r2, #32
 80007d0:	801a      	strh	r2, [r3, #0]
 80007d2:	2332      	movs	r3, #50	@ 0x32
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	2210      	movs	r2, #16
 80007d8:	801a      	strh	r2, [r3, #0]
 80007da:	e00c      	b.n	80007f6 <main+0x20a>
	  else if(myid==8){PANEL_START_X = 32; PANEL_START_Z = 32;}
 80007dc:	4b64      	ldr	r3, [pc, #400]	@ (8000970 <main+0x384>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	d107      	bne.n	80007f6 <main+0x20a>
 80007e6:	2334      	movs	r3, #52	@ 0x34
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	2220      	movs	r2, #32
 80007ec:	801a      	strh	r2, [r3, #0]
 80007ee:	2332      	movs	r3, #50	@ 0x32
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2220      	movs	r2, #32
 80007f4:	801a      	strh	r2, [r3, #0]

//	  void LED::show(int travel_x, int circle_x, int circle_z, int circle_r, int hue, int hue_of_back){
//	      NEOPIXEL->clear();
	  for(int px=0; px<16; px++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007fa:	e0f7      	b.n	80009ec <main+0x400>
		  for(int pz=0; pz<16; pz++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000800:	e0ed      	b.n	80009de <main+0x3f2>
			  int x = px + PANEL_START_X;
 8000802:	2334      	movs	r3, #52	@ 0x34
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800080a:	18d3      	adds	r3, r2, r3
 800080c:	617b      	str	r3, [r7, #20]
			  int z = pz + PANEL_START_Z;
 800080e:	2332      	movs	r3, #50	@ 0x32
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	613b      	str	r3, [r7, #16]

			  //BACK_GROUND
			  int hue=back_h;
 800081a:	4b5c      	ldr	r3, [pc, #368]	@ (800098c <main+0x3a0>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
			  int sat=back_s;
 8000820:	4b5b      	ldr	r3, [pc, #364]	@ (8000990 <main+0x3a4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	623b      	str	r3, [r7, #32]
			  int val=back_v;
 8000826:	4b5b      	ldr	r3, [pc, #364]	@ (8000994 <main+0x3a8>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	61fb      	str	r3, [r7, #28]

			  //square
			  if((x==0 || x==1)||(x==46 || x==47)){
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <main+0x258>
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d005      	beq.n	8000844 <main+0x258>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	2b2e      	cmp	r3, #46	@ 0x2e
 800083c:	d002      	beq.n	8000844 <main+0x258>
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2b2f      	cmp	r3, #47	@ 0x2f
 8000842:	d108      	bne.n	8000856 <main+0x26a>
					hue = square_h; sat = square_s; val = square_v;
 8000844:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <main+0x3ac>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
 800084a:	4b54      	ldr	r3, [pc, #336]	@ (800099c <main+0x3b0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	4b53      	ldr	r3, [pc, #332]	@ (80009a0 <main+0x3b4>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	61fb      	str	r3, [r7, #28]
			  }
			  if((z==0 || z==1)||(z==46 || z==47)){
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d008      	beq.n	800086e <main+0x282>
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d005      	beq.n	800086e <main+0x282>
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	2b2e      	cmp	r3, #46	@ 0x2e
 8000866:	d002      	beq.n	800086e <main+0x282>
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	2b2f      	cmp	r3, #47	@ 0x2f
 800086c:	d108      	bne.n	8000880 <main+0x294>
			  		hue = square_h; sat = square_s; val = square_v;
 800086e:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <main+0x3ac>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
 8000874:	4b49      	ldr	r3, [pc, #292]	@ (800099c <main+0x3b0>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	623b      	str	r3, [r7, #32]
 800087a:	4b49      	ldr	r3, [pc, #292]	@ (80009a0 <main+0x3b4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	61fb      	str	r3, [r7, #28]
			  }

			  //CIRCLE
			  int8_t cx = 47-circle_x;
 8000880:	4b3c      	ldr	r3, [pc, #240]	@ (8000974 <main+0x388>)
 8000882:	2200      	movs	r2, #0
 8000884:	5e9b      	ldrsh	r3, [r3, r2]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	222f      	movs	r2, #47	@ 0x2f
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b2da      	uxtb	r2, r3
 800088e:	210f      	movs	r1, #15
 8000890:	187b      	adds	r3, r7, r1
 8000892:	701a      	strb	r2, [r3, #0]
			  int8_t cz = circle_z;
 8000894:	4b38      	ldr	r3, [pc, #224]	@ (8000978 <main+0x38c>)
 8000896:	2200      	movs	r2, #0
 8000898:	5e9a      	ldrsh	r2, [r3, r2]
 800089a:	240e      	movs	r4, #14
 800089c:	193b      	adds	r3, r7, r4
 800089e:	701a      	strb	r2, [r3, #0]
			  uint8_t cr = circle_r;
 80008a0:	250d      	movs	r5, #13
 80008a2:	197b      	adds	r3, r7, r5
 80008a4:	4a35      	ldr	r2, [pc, #212]	@ (800097c <main+0x390>)
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	701a      	strb	r2, [r3, #0]
			  uint8_t myx = x;
 80008aa:	260c      	movs	r6, #12
 80008ac:	19bb      	adds	r3, r7, r6
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	701a      	strb	r2, [r3, #0]
			  uint8_t myz = z;
 80008b2:	200b      	movs	r0, #11
 80008b4:	183b      	adds	r3, r7, r0
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	701a      	strb	r2, [r3, #0]
			  float distance = (myx-cx)*(myx-cx)+(myz-cz)*(myz-cz);
 80008ba:	19bb      	adds	r3, r7, r6
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	0008      	movs	r0, r1
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	19ba      	adds	r2, r7, r6
 80008ca:	7811      	ldrb	r1, [r2, #0]
 80008cc:	183a      	adds	r2, r7, r0
 80008ce:	7812      	ldrb	r2, [r2, #0]
 80008d0:	b252      	sxtb	r2, r2
 80008d2:	1a8a      	subs	r2, r1, r2
 80008d4:	435a      	muls	r2, r3
 80008d6:	200b      	movs	r0, #11
 80008d8:	183b      	adds	r3, r7, r0
 80008da:	7819      	ldrb	r1, [r3, #0]
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	1acb      	subs	r3, r1, r3
 80008e4:	1839      	adds	r1, r7, r0
 80008e6:	7808      	ldrb	r0, [r1, #0]
 80008e8:	1939      	adds	r1, r7, r4
 80008ea:	7809      	ldrb	r1, [r1, #0]
 80008ec:	b249      	sxtb	r1, r1
 80008ee:	1a41      	subs	r1, r0, r1
 80008f0:	434b      	muls	r3, r1
 80008f2:	18d3      	adds	r3, r2, r3
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fd8f 	bl	8000418 <__aeabi_i2f>
 80008fa:	1c03      	adds	r3, r0, #0
 80008fc:	607b      	str	r3, [r7, #4]
			  if(cr*cr>=distance){
 80008fe:	197b      	adds	r3, r7, r5
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	197a      	adds	r2, r7, r5
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	4353      	muls	r3, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f7ff fd85 	bl	8000418 <__aeabi_i2f>
 800090e:	1c03      	adds	r3, r0, #0
 8000910:	1c19      	adds	r1, r3, #0
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fc9c 	bl	8000250 <__aeabi_fcmple>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d008      	beq.n	800092e <main+0x342>
				hue = circle_h; sat = circle_s; val = circle_v;
 800091c:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <main+0x394>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <main+0x398>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <main+0x39c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	61fb      	str	r3, [r7, #28]
			  }

			  //SET
			  uint16_t pixel_num = 0;
 800092e:	201a      	movs	r0, #26
 8000930:	183b      	adds	r3, r7, r0
 8000932:	2200      	movs	r2, #0
 8000934:	801a      	strh	r2, [r3, #0]
			  if(pz%2 == 0){
 8000936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000938:	2201      	movs	r2, #1
 800093a:	4013      	ands	r3, r2
 800093c:	d134      	bne.n	80009a8 <main+0x3bc>
				   pixel_num = pz*16 + px;
 800093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000940:	b29b      	uxth	r3, r3
 8000942:	011b      	lsls	r3, r3, #4
 8000944:	b299      	uxth	r1, r3
 8000946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000948:	b29a      	uxth	r2, r3
 800094a:	183b      	adds	r3, r7, r0
 800094c:	188a      	adds	r2, r1, r2
 800094e:	801a      	strh	r2, [r3, #0]
 8000950:	e036      	b.n	80009c0 <main+0x3d4>
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	2000052c 	.word	0x2000052c
 8000958:	200000d8 	.word	0x200000d8
 800095c:	2000056c 	.word	0x2000056c
 8000960:	20000528 	.word	0x20000528
 8000964:	20000526 	.word	0x20000526
 8000968:	20000525 	.word	0x20000525
 800096c:	20000524 	.word	0x20000524
 8000970:	20000578 	.word	0x20000578
 8000974:	2000057a 	.word	0x2000057a
 8000978:	2000057c 	.word	0x2000057c
 800097c:	2000057e 	.word	0x2000057e
 8000980:	2000057f 	.word	0x2000057f
 8000984:	20000000 	.word	0x20000000
 8000988:	20000001 	.word	0x20000001
 800098c:	20000580 	.word	0x20000580
 8000990:	20000002 	.word	0x20000002
 8000994:	20000003 	.word	0x20000003
 8000998:	20000581 	.word	0x20000581
 800099c:	20000004 	.word	0x20000004
 80009a0:	20000005 	.word	0x20000005
 80009a4:	200001c8 	.word	0x200001c8
			  }else{
				  pixel_num = pz*16 + 15 - px;
 80009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	231a      	movs	r3, #26
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	320f      	adds	r2, #15
 80009be:	801a      	strh	r2, [r3, #0]
			  }
			  Neopixel.set_hsv(pixel_num, hue, sat, val);
 80009c0:	231a      	movs	r3, #26
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b2d9      	uxtb	r1, r3
 80009c8:	6a3c      	ldr	r4, [r7, #32]
 80009ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <main+0x414>)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	0023      	movs	r3, r4
 80009d4:	f000 fd5e 	bl	8001494 <_ZN6WS28127set_hsvEhiii>
		  for(int pz=0; pz<16; pz++){
 80009d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009da:	3301      	adds	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	dc00      	bgt.n	80009e6 <main+0x3fa>
 80009e4:	e70d      	b.n	8000802 <main+0x216>
	  for(int px=0; px<16; px++){
 80009e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009e8:	3301      	adds	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	dc00      	bgt.n	80009f4 <main+0x408>
 80009f2:	e703      	b.n	80007fc <main+0x210>
		  }
	  }
	  Neopixel.show();
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <main+0x414>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fc94 	bl	8001324 <_ZN6WS28124showEv>





  }
 80009fc:	e623      	b.n	8000646 <main+0x5a>
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	200001c8 	.word	0x200001c8

08000a04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b093      	sub	sp, #76	@ 0x4c
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	2414      	movs	r4, #20
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2334      	movs	r3, #52	@ 0x34
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f004 fb59 	bl	80050cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2310      	movs	r3, #16
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f004 fb52 	bl	80050cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fd7f 	bl	8002530 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	2201      	movs	r2, #1
 8000a36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	22a0      	movs	r2, #160	@ 0xa0
 8000a3c:	02d2      	lsls	r2, r2, #11
 8000a3e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	0021      	movs	r1, r4
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2202      	movs	r2, #2
 8000a46:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2209      	movs	r2, #9
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	0292      	lsls	r2, r2, #10
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2280      	movs	r2, #128	@ 0x80
 8000a66:	05d2      	lsls	r2, r2, #23
 8000a68:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 fdab 	bl	80025c8 <HAL_RCC_OscConfig>
 8000a72:	0003      	movs	r3, r0
 8000a74:	1e5a      	subs	r2, r3, #1
 8000a76:	4193      	sbcs	r3, r2
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_Z18SystemClock_Configv+0x7e>
  {
    Error_Handler();
 8000a7e:	f000 fa93 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f002 f8a2 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	1e5a      	subs	r2, r3, #1
 8000aa8:	4193      	sbcs	r3, r2
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000ab0:	f000 fa7a 	bl	8000fa8 <Error_Handler>
  }
}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b013      	add	sp, #76	@ 0x4c
 8000aba:	bd90      	pop	{r4, r7, pc}

08000abc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	@ 0x38
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	2328      	movs	r3, #40	@ 0x28
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2310      	movs	r3, #16
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f004 fafd 	bl	80050cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	231c      	movs	r3, #28
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	230c      	movs	r3, #12
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f004 faf5 	bl	80050cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	231c      	movs	r3, #28
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f004 faee 	bl	80050cc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000af2:	4a3a      	ldr	r2, [pc, #232]	@ (8000bdc <_ZL12MX_TIM3_Initv+0x120>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8000af6:	4b38      	ldr	r3, [pc, #224]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000af8:	2203      	movs	r2, #3
 8000afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8000b02:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b04:	220e      	movs	r2, #14
 8000b06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b14:	4b30      	ldr	r3, [pc, #192]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 fa0e 	bl	8002f38 <HAL_TIM_Base_Init>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	4193      	sbcs	r3, r2
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000b28:	f000 fa3e 	bl	8000fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2c:	2128      	movs	r1, #40	@ 0x28
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	0152      	lsls	r2, r2, #5
 8000b34:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b36:	187a      	adds	r2, r7, r1
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fe8b 	bl	8003858 <HAL_TIM_ConfigClockSource>
 8000b42:	0003      	movs	r3, r0
 8000b44:	1e5a      	subs	r2, r3, #1
 8000b46:	4193      	sbcs	r3, r2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000b4e:	f000 fa2b 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b52:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 fa47 	bl	8002fe8 <HAL_TIM_PWM_Init>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	4193      	sbcs	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8000b66:	f000 fa1f 	bl	8000fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	211c      	movs	r1, #28
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b78:	187a      	adds	r2, r7, r1
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f003 fbf2 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8000b84:	0003      	movs	r3, r0
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	4193      	sbcs	r3, r2
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000b90:	f000 fa0a 	bl	8000fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2260      	movs	r2, #96	@ 0x60
 8000b98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba0:	003b      	movs	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	2204      	movs	r2, #4
 8000baa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bac:	0039      	movs	r1, r7
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f002 fd50 	bl	8003658 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	4193      	sbcs	r3, r2
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8000bc4:	f000 f9f0 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <_ZL12MX_TIM3_Initv+0x11c>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fa94 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b00e      	add	sp, #56	@ 0x38
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000030 	.word	0x20000030
 8000bdc:	40000400 	.word	0x40000400

08000be0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <_ZL19MX_USART2_UART_Initv+0x6c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000bec:	22e1      	movs	r2, #225	@ 0xe1
 8000bee:	0252      	lsls	r2, r2, #9
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f003 fbfe 	bl	800442c <HAL_UART_Init>
 8000c30:	0003      	movs	r3, r0
 8000c32:	1e5a      	subs	r2, r3, #1
 8000c34:	4193      	sbcs	r3, r2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000c3c:	f000 f9b4 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	200000d8 	.word	0x200000d8
 8000c4c:	40004400 	.word	0x40004400

08000c50 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <_ZL11MX_DMA_Initv+0x48>)
 8000c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <_ZL11MX_DMA_Initv+0x48>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <_ZL11MX_DMA_Initv+0x48>)
 8000c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2009      	movs	r0, #9
 8000c74:	f000 ffd0 	bl	8001c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c78:	2009      	movs	r0, #9
 8000c7a:	f000 ffe2 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	200a      	movs	r0, #10
 8000c84:	f000 ffc8 	bl	8001c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f000 ffda 	bl	8001c42 <HAL_NVIC_EnableIRQ>

}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	40021000 	.word	0x40021000

08000c9c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	240c      	movs	r4, #12
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	2314      	movs	r3, #20
 8000caa:	001a      	movs	r2, r3
 8000cac:	2100      	movs	r1, #0
 8000cae:	f004 fa0d 	bl	80050cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cb8:	2104      	movs	r1, #4
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cce:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce6:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000ce8:	2102      	movs	r1, #2
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <_ZL12MX_GPIO_Initv+0xd8>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <_ZL12MX_GPIO_Initv+0xdc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2104      	movs	r1, #4
 8000d00:	0018      	movs	r0, r3
 8000d02:	f001 fbf8 	bl	80024f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	2204      	movs	r2, #4
 8000d0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	2201      	movs	r2, #1
 8000d10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	4a15      	ldr	r2, [pc, #84]	@ (8000d78 <_ZL12MX_GPIO_Initv+0xdc>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	0010      	movs	r0, r2
 8000d26:	f001 fa65 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2280      	movs	r2, #128	@ 0x80
 8000d2e:	0152      	lsls	r2, r2, #5
 8000d30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2200      	movs	r2, #0
 8000d36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	193a      	adds	r2, r7, r4
 8000d40:	23a0      	movs	r3, #160	@ 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f001 fa54 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin SW4_Pin SW5_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin|SW4_Pin|SW5_Pin;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2278      	movs	r2, #120	@ 0x78
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	4a05      	ldr	r2, [pc, #20]	@ (8000d78 <_ZL12MX_GPIO_Initv+0xdc>)
 8000d62:	0019      	movs	r1, r3
 8000d64:	0010      	movs	r0, r2
 8000d66:	f001 fa45 	bl	80021f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b009      	add	sp, #36	@ 0x24
 8000d70:	bd90      	pop	{r4, r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	40021000 	.word	0x40021000
 8000d78:	50000400 	.word	0x50000400

08000d7c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h>:

/* USER CODE BEGIN 4 */

void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter, uint8_t go_back){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	589b      	ldr	r3, [r3, r2]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	61bb      	str	r3, [r7, #24]
	wrt_pt= buf_size - wrt_pt;
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	61bb      	str	r3, [r7, #24]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追??��?��?付かれてな??��?��?
 8000d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001a      	movs	r2, r3
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d032      	beq.n	8000e10 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x94>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてな??��?��?=追??��?��?越されてな??��?��?
 8000daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	001a      	movs	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	189b      	adds	r3, r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2bff      	cmp	r3, #255	@ 0xff
 8000db8:	d116      	bne.n	8000de8 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x6c>
			if(wrt_pt != *p_wrtpt){//wrt_ptが�???��?��んだ=受信した
 8000dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d006      	beq.n	8000dd4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x58>
//正常
				*stop_counter = 0;
 8000dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dc8:	2200      	movs	r2, #0
 8000dca:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dd2:	e04b      	b.n	8000e6c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
			}else{//wrt_ptが�???��?��んでな??��?��?=受信してな??��?��?
//受信してな??��?��?
				(*stop_counter)++;
 8000dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dde:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000de6:	e041      	b.n	8000e6c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
			}
		}else{//p_rdptが書き換えられた=追??��?��?越された
//追??��?��?越された
			(*error_counter)++;
 8000de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000df2:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8000df4:	2350      	movs	r3, #80	@ 0x50
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8000e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da32      	bge.n	8000e6c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
 8000e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	18d3      	adds	r3, r2, r3
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0e:	e02d      	b.n	8000e6c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
		}
	}else{//wrtに追??��?��?付かれた,追??��?��?付い??��?��?
		int front_pt = wrt_pt + 1;
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	3301      	adds	r3, #1
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dc03      	bgt.n	8000e26 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xaa>
 8000e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 8000e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	18d3      	adds	r3, r2, r3
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2bff      	cmp	r3, #255	@ 0xff
 8000e30:	d109      	bne.n	8000e46 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xca>
//追??��?��?付い??��?��?
			(*stop_counter)++;
 8000e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e3c:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8000e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e44:	e012      	b.n	8000e6c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
		}else{
//追??��?��?付かれた
			(*error_counter)++;
 8000e46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e50:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - go_back;
 8000e52:	2350      	movs	r3, #80	@ 0x50
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8000e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da03      	bge.n	8000e6c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0xf0>
 8000e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	18d3      	adds	r3, r2, r3
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8000e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x228>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d903      	bls.n	8000e7e <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x102>
 8000e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e78:	2224      	movs	r2, #36	@ 0x24
 8000e7a:	4252      	negs	r2, r2
 8000e7c:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8000e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	4a48      	ldr	r2, [pc, #288]	@ (8000fa4 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x228>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d903      	bls.n	8000e90 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
 8000e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da03      	bge.n	8000ea6 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x12a>
 8000e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= go_back/2){break;}
 8000ea6:	2350      	movs	r3, #80	@ 0x50
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	dd67      	ble.n	8000f88 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x20c>

		rd_pt++;
 8000eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eba:	3301      	adds	r3, #1
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dc03      	bgt.n	8000ece <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x152>
 8000ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 8000ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	18d3      	adds	r3, r2, r3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	233c      	movs	r3, #60	@ 0x3c
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	33fa      	adds	r3, #250	@ 0xfa
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d14b      	bne.n	8000f7c <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x200>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれな??��?��?,25以上も??��?��???��?��?
 8000ee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]

				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dc03      	bgt.n	8000efc <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x180>
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
			int temp_rdpt = rd_pt;
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	623b      	str	r3, [r7, #32]

			buf[rd_pt] = 255;
 8000f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	22ff      	movs	r2, #255	@ 0xff
 8000f08:	701a      	strb	r2, [r3, #0]

			for(int i=0; i<data_size; i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e01a      	b.n	8000f46 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1ca>
				temp_rdpt += 1;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3301      	adds	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dc03      	bgt.n	8000f26 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1aa>
 8000f1e:	6a3a      	ldr	r2, [r7, #32]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	623b      	str	r3, [r7, #32]

				data[i] = buf[temp_rdpt];
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	18d2      	adds	r2, r2, r3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	18cb      	adds	r3, r1, r3
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	22ff      	movs	r2, #255	@ 0xff
 8000f3e:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<data_size; i++){
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dbe0      	blt.n	8000f10 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x194>
			}

			rd_pt = temp_rdpt;
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da03      	bge.n	8000f68 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1ec>
 8000f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	da00      	bge.n	8000f70 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x1f4>
 8000f6e:	3301      	adds	r3, #1
 8000f70:	105b      	asrs	r3, r3, #1
 8000f72:	001a      	movs	r2, r3
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	4293      	cmp	r3, r2
 8000f78:	da8a      	bge.n	8000e90 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
			else{break;}
 8000f7a:	e006      	b.n	8000f8a <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x20e>
		}else{buf[rd_pt] = 255;}
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	22ff      	movs	r2, #255	@ 0xff
 8000f84:	701a      	strb	r2, [r3, #0]
	}
 8000f86:	e783      	b.n	8000e90 <_Z7readBufP20__UART_HandleTypeDefPhiS1_ihS1_S1_PtS2_h+0x114>
		if(dif_pt <= go_back/2){break;}
 8000f88:	46c0      	nop			@ (mov r8, r8)

	*p_rdpt = rd_pt;
 8000f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f90:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b00c      	add	sp, #48	@ 0x30
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	0000ffdc 	.word	0x0000ffdc

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10f      	bne.n	8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d10b      	bne.n	8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x30>
WS2812 Neopixel(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000fce:	4909      	ldr	r1, [pc, #36]	@ (8000ff4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	f000 f980 	bl	80012d8 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
LED led(&Neopixel);
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff fa84 	bl	80004ec <_ZN3LEDC1EP6WS2812>
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	0000ffff 	.word	0x0000ffff
 8000ff0:	2000007c 	.word	0x2000007c
 8000ff4:	20000030 	.word	0x20000030
 8000ff8:	200001c8 	.word	0x200001c8
 8000ffc:	2000050c 	.word	0x2000050c

08001000 <_GLOBAL__sub_I_fish_15x6>:
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <_GLOBAL__sub_I_fish_15x6+0x14>)
 8001006:	0019      	movs	r1, r3
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ffd3 	bl	8000fb4 <_Z41__static_initialization_and_destruction_0ii>
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	0000ffff 	.word	0x0000ffff

08001018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <HAL_MspInit+0x44>)
 8001020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <HAL_MspInit+0x44>)
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	641a      	str	r2, [r3, #64]	@ 0x40
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <HAL_MspInit+0x44>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	2201      	movs	r2, #1
 8001030:	4013      	ands	r3, r2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x44>)
 8001038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_MspInit+0x44>)
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0549      	lsls	r1, r1, #21
 8001040:	430a      	orrs	r2, r1
 8001042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_MspInit+0x44>)
 8001046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	055b      	lsls	r3, r3, #21
 800104c:	4013      	ands	r3, r2
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1e      	ldr	r2, [pc, #120]	@ (80010e8 <HAL_TIM_Base_MspInit+0x88>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d136      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001072:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <HAL_TIM_Base_MspInit+0x8c>)
 8001074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_TIM_Base_MspInit+0x8c>)
 8001078:	2102      	movs	r1, #2
 800107a:	430a      	orrs	r2, r1
 800107c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800107e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <HAL_TIM_Base_MspInit+0x8c>)
 8001080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel2;
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 800108c:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <HAL_TIM_Base_MspInit+0x94>)
 800108e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 8001092:	2221      	movs	r2, #33	@ 0x21
 8001094:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001096:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 8001098:	2210      	movs	r2, #16
 800109a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010a4:	2280      	movs	r2, #128	@ 0x80
 80010a6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010be:	22c0      	movs	r2, #192	@ 0xc0
 80010c0:	0192      	lsls	r2, r2, #6
 80010c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 fdd8 	bl	8001c7c <HAL_DMA_Init>
 80010cc:	1e03      	subs	r3, r0, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80010d0:	f7ff ff6a 	bl	8000fa8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_TIM_Base_MspInit+0x90>)
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b004      	add	sp, #16
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40000400 	.word	0x40000400
 80010ec:	40021000 	.word	0x40021000
 80010f0:	2000007c 	.word	0x2000007c
 80010f4:	4002001c 	.word	0x4002001c

080010f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	240c      	movs	r4, #12
 8001102:	193b      	adds	r3, r7, r4
 8001104:	0018      	movs	r0, r3
 8001106:	2314      	movs	r3, #20
 8001108:	001a      	movs	r2, r3
 800110a:	2100      	movs	r1, #0
 800110c:	f003 ffde 	bl	80050cc <memset>
  if(htim->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <HAL_TIM_MspPostInit+0x70>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d122      	bne.n	8001160 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_TIM_MspPostInit+0x74>)
 800111c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800111e:	4b13      	ldr	r3, [pc, #76]	@ (800116c <HAL_TIM_MspPostInit+0x74>)
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	@ 0x34
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_TIM_MspPostInit+0x74>)
 8001128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112a:	2201      	movs	r2, #1
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001132:	0021      	movs	r1, r4
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2202      	movs	r2, #2
 800113e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	187b      	adds	r3, r7, r1
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800114c:	187b      	adds	r3, r7, r1
 800114e:	2201      	movs	r2, #1
 8001150:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	187a      	adds	r2, r7, r1
 8001154:	23a0      	movs	r3, #160	@ 0xa0
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	0011      	movs	r1, r2
 800115a:	0018      	movs	r0, r3
 800115c:	f001 f84a 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b009      	add	sp, #36	@ 0x24
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	40000400 	.word	0x40000400
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b08b      	sub	sp, #44	@ 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	2414      	movs	r4, #20
 800117a:	193b      	adds	r3, r7, r4
 800117c:	0018      	movs	r0, r3
 800117e:	2314      	movs	r3, #20
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f003 ffa2 	bl	80050cc <memset>
  if(huart->Instance==USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a31      	ldr	r2, [pc, #196]	@ (8001254 <HAL_UART_MspInit+0xe4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d15b      	bne.n	800124a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_UART_MspInit+0xe8>)
 8001194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001196:	4b30      	ldr	r3, [pc, #192]	@ (8001258 <HAL_UART_MspInit+0xe8>)
 8001198:	2180      	movs	r1, #128	@ 0x80
 800119a:	0289      	lsls	r1, r1, #10
 800119c:	430a      	orrs	r2, r1
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_UART_MspInit+0xe8>)
 80011a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <HAL_UART_MspInit+0xe8>)
 80011b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_UART_MspInit+0xe8>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	430a      	orrs	r2, r1
 80011b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ba:	4b27      	ldr	r3, [pc, #156]	@ (8001258 <HAL_UART_MspInit+0xe8>)
 80011bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011be:	2201      	movs	r2, #1
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80011c6:	0021      	movs	r1, r4
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	4a24      	ldr	r2, [pc, #144]	@ (800125c <HAL_UART_MspInit+0xec>)
 80011cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2202      	movs	r2, #2
 80011d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	2201      	movs	r2, #1
 80011e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	187a      	adds	r2, r7, r1
 80011e8:	23a0      	movs	r3, #160	@ 0xa0
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	0011      	movs	r1, r2
 80011ee:	0018      	movs	r0, r3
 80011f0:	f001 f800 	bl	80021f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 80011f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <HAL_UART_MspInit+0xf4>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 80011fc:	2234      	movs	r2, #52	@ 0x34
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 800120e:	2280      	movs	r2, #128	@ 0x80
 8001210:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001220:	2220      	movs	r2, #32
 8001222:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001224:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	0192      	lsls	r2, r2, #6
 800122a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 800122e:	0018      	movs	r0, r3
 8001230:	f000 fd24 	bl	8001c7c <HAL_DMA_Init>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001238:	f7ff feb6 	bl	8000fa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001242:	505a      	str	r2, [r3, r1]
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_UART_MspInit+0xf0>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b00b      	add	sp, #44	@ 0x2c
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	40004400 	.word	0x40004400
 8001258:	40021000 	.word	0x40021000
 800125c:	00008004 	.word	0x00008004
 8001260:	2000016c 	.word	0x2000016c
 8001264:	40020008 	.word	0x40020008

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	e7fd      	b.n	800126c <NMI_Handler+0x4>

08001270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	e7fd      	b.n	8001274 <HardFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 fbd6 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <DMA1_Channel1_IRQHandler+0x14>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fe64 	bl	8001f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	2000016c 	.word	0x2000016c

080012b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fe58 	bl	8001f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	2000007c 	.word	0x2000007c

080012cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
 *      Author: famil
 */

#include "ws2812.h"

WS2812::WS2812(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <_ZN6WS2812C1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef+0x48>)
 80012ea:	189b      	adds	r3, r3, r2
 80012ec:	2230      	movs	r2, #48	@ 0x30
 80012ee:	2100      	movs	r1, #0
 80012f0:	0018      	movs	r0, r3
 80012f2:	f003 feeb 	bl	80050cc <memset>
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	23d0      	movs	r3, #208	@ 0xd0
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	2100      	movs	r1, #0
 80012fe:	50d1      	str	r1, [r2, r3]
    HTIM = htim;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	609a      	str	r2, [r3, #8]
}
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	0000030f 	.word	0x0000030f

08001324 <_ZN6WS28124showEv>:


void WS2812::show(){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    if(wr_buf_p != 0 || HDMA->State != HAL_DMA_STATE_READY){
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	23d0      	movs	r3, #208	@ 0xd0
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	58d3      	ldr	r3, [r2, r3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <_ZN6WS28124showEv+0x22>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2225      	movs	r2, #37	@ 0x25
 800133e:	5c9b      	ldrb	r3, [r3, r2]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d001      	beq.n	800134a <_ZN6WS28124showEv+0x26>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <_ZN6WS28124showEv+0x28>
 800134a:	2300      	movs	r3, #0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d025      	beq.n	800139c <_ZN6WS28124showEv+0x78>
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f002 f892 	bl	8003484 <HAL_TIM_PWM_Stop_DMA>
        wr_buf_p = 0;
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	23d0      	movs	r3, #208	@ 0xd0
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	2100      	movs	r1, #0
 8001368:	50d1      	str	r1, [r2, r3]
        for(uint8_t i=0; i <48; i++){wr_buf[i] = 0;}
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e00d      	b.n	8001390 <_ZN6WS28124showEv+0x6c>
 8001374:	200f      	movs	r0, #15
 8001376:	183b      	adds	r3, r7, r0
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	492c      	ldr	r1, [pc, #176]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 800137e:	18d3      	adds	r3, r2, r3
 8001380:	185b      	adds	r3, r3, r1
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	183b      	adds	r3, r7, r0
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	183b      	adds	r3, r7, r0
 800138c:	3201      	adds	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b2f      	cmp	r3, #47	@ 0x2f
 8001398:	d9ec      	bls.n	8001374 <_ZN6WS28124showEv+0x50>
        return;
 800139a:	e045      	b.n	8001428 <_ZN6WS28124showEv+0x104>
    }
    for(uint_fast8_t i = 0; i < 8; i++){
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	e031      	b.n	8001406 <_ZN6WS28124showEv+0xe2>
        wr_buf[i   ] = 0;
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4922      	ldr	r1, [pc, #136]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	185b      	adds	r3, r3, r1
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
        wr_buf[i+ 8] = 0;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3308      	adds	r3, #8
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	491e      	ldr	r1, [pc, #120]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 80013b8:	18d3      	adds	r3, r2, r3
 80013ba:	185b      	adds	r3, r3, r1
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
        wr_buf[i+16] = 0;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3310      	adds	r3, #16
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	491a      	ldr	r1, [pc, #104]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	185b      	adds	r3, r3, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

        wr_buf[i+24] = 0;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3318      	adds	r3, #24
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4916      	ldr	r1, [pc, #88]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	185b      	adds	r3, r3, r1
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
        wr_buf[i+32] = 0;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3320      	adds	r3, #32
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4912      	ldr	r1, [pc, #72]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 80013e8:	18d3      	adds	r3, r2, r3
 80013ea:	185b      	adds	r3, r3, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
        wr_buf[i+40] = 0;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3328      	adds	r3, #40	@ 0x28
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	490e      	ldr	r1, [pc, #56]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 80013f8:	18d3      	adds	r3, r2, r3
 80013fa:	185b      	adds	r3, r3, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    for(uint_fast8_t i = 0; i < 8; i++){
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	3301      	adds	r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b07      	cmp	r3, #7
 800140a:	d9ca      	bls.n	80013a2 <_ZN6WS28124showEv+0x7e>
    }
    HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, (uint32_t *)wr_buf, 48);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6858      	ldr	r0, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	0019      	movs	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <_ZN6WS28124showEv+0x10c>)
 800141a:	189a      	adds	r2, r3, r2
 800141c:	2330      	movs	r3, #48	@ 0x30
 800141e:	f001 fe43 	bl	80030a8 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(8);
 8001422:	2008      	movs	r0, #8
 8001424:	f000 fb28 	bl	8001a78 <HAL_Delay>
}
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	0000030f 	.word	0x0000030f

08001434 <_ZN6WS28125clearEv>:

void WS2812::clear(){
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    for(int i=0; i<NUM_PIXELS; i++){
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e01d      	b.n	800147e <_ZN6WS28125clearEv+0x4a>
        rgb_buf[i][0]=0;
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	0013      	movs	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	189b      	adds	r3, r3, r2
 800144c:	18cb      	adds	r3, r1, r3
 800144e:	330c      	adds	r3, #12
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][1]=0;
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	0013      	movs	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	189b      	adds	r3, r3, r2
 800145e:	18cb      	adds	r3, r1, r3
 8001460:	330d      	adds	r3, #13
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
        rgb_buf[i][2]=0;
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	0013      	movs	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	189b      	adds	r3, r3, r2
 8001470:	18cb      	adds	r3, r1, r3
 8001472:	330e      	adds	r3, #14
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<NUM_PIXELS; i++){
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	429a      	cmp	r2, r3
 8001486:	dddc      	ble.n	8001442 <_ZN6WS28125clearEv+0xe>
    }
}
 8001488:	46c0      	nop			@ (mov r8, r8)
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <_ZN6WS28127set_hsvEhiii>:

void WS2812::set_hsv(uint8_t id, int h, int s, int v){
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b08e      	sub	sp, #56	@ 0x38
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	230b      	movs	r3, #11
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	1c0a      	adds	r2, r1, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	int r,g,b;
	if (s == 0) {
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <_ZN6WS28127set_hsvEhiii+0x28>
	    r = g = b = v;
 80014ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ba:	e077      	b.n	80015ac <_ZN6WS28127set_hsvEhiii+0x118>
	}else{
	    h = h * 6; // sector 0 to 5
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	0013      	movs	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
	    int i = h / 256;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da00      	bge.n	80014d0 <_ZN6WS28127set_hsvEhiii+0x3c>
 80014ce:	33ff      	adds	r3, #255	@ 0xff
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
	    int f = h % 256;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a3f      	ldr	r2, [pc, #252]	@ (80015d4 <_ZN6WS28127set_hsvEhiii+0x140>)
 80014d8:	4013      	ands	r3, r2
 80014da:	d503      	bpl.n	80014e4 <_ZN6WS28127set_hsvEhiii+0x50>
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a3e      	ldr	r2, [pc, #248]	@ (80015d8 <_ZN6WS28127set_hsvEhiii+0x144>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	3301      	adds	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
	    int p = (v * (256 - s)) / 256;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2280      	movs	r2, #128	@ 0x80
 80014ea:	0052      	lsls	r2, r2, #1
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014f0:	4353      	muls	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da00      	bge.n	80014f8 <_ZN6WS28127set_hsvEhiii+0x64>
 80014f6:	33ff      	adds	r3, #255	@ 0xff
 80014f8:	121b      	asrs	r3, r3, #8
 80014fa:	61bb      	str	r3, [r7, #24]
	    int q = (v * (256 - (s * f) / 256)) / 256;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4353      	muls	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	da00      	bge.n	8001508 <_ZN6WS28127set_hsvEhiii+0x74>
 8001506:	33ff      	adds	r3, #255	@ 0xff
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	425b      	negs	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	33ff      	adds	r3, #255	@ 0xff
 8001510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001512:	4353      	muls	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	da00      	bge.n	800151a <_ZN6WS28127set_hsvEhiii+0x86>
 8001518:	33ff      	adds	r3, #255	@ 0xff
 800151a:	121b      	asrs	r3, r3, #8
 800151c:	617b      	str	r3, [r7, #20]
	    int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2280      	movs	r2, #128	@ 0x80
 8001522:	0052      	lsls	r2, r2, #1
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4353      	muls	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	da00      	bge.n	8001530 <_ZN6WS28127set_hsvEhiii+0x9c>
 800152e:	33ff      	adds	r3, #255	@ 0xff
 8001530:	121b      	asrs	r3, r3, #8
 8001532:	425b      	negs	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	33ff      	adds	r3, #255	@ 0xff
 8001538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800153a:	4353      	muls	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	da00      	bge.n	8001542 <_ZN6WS28127set_hsvEhiii+0xae>
 8001540:	33ff      	adds	r3, #255	@ 0xff
 8001542:	121b      	asrs	r3, r3, #8
 8001544:	613b      	str	r3, [r7, #16]

	    switch (i) {
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d828      	bhi.n	800159e <_ZN6WS28127set_hsvEhiii+0x10a>
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	009a      	lsls	r2, r3, #2
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <_ZN6WS28127set_hsvEhiii+0x148>)
 8001552:	18d3      	adds	r3, r2, r3
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	469f      	mov	pc, r3
	        case 0: r = v; g = t; b = p; break;
 8001558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
 8001564:	e022      	b.n	80015ac <_ZN6WS28127set_hsvEhiii+0x118>
	        case 1: r = q; g = v; b = p; break;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800156a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
 8001572:	e01b      	b.n	80015ac <_ZN6WS28127set_hsvEhiii+0x118>
	        case 2: r = p; g = v; b = t; break;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001580:	e014      	b.n	80015ac <_ZN6WS28127set_hsvEhiii+0x118>
	        case 3: r = p; g = q; b = v; break;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
 800158e:	e00d      	b.n	80015ac <_ZN6WS28127set_hsvEhiii+0x118>
	        case 4: r = t; g = p; b = v; break;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
 800159c:	e006      	b.n	80015ac <_ZN6WS28127set_hsvEhiii+0x118>
	        default: r = v; g = p;b = q; break;
 800159e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015aa:	46c0      	nop			@ (mov r8, r8)
	    }
	}
	set_rgb(id, r, g, b);
 80015ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ae:	b2dc      	uxtb	r4, r3
 80015b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b2:	b2dd      	uxtb	r5, r3
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	220b      	movs	r2, #11
 80015ba:	18ba      	adds	r2, r7, r2
 80015bc:	7811      	ldrb	r1, [r2, #0]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	002b      	movs	r3, r5
 80015c4:	0022      	movs	r2, r4
 80015c6:	f000 f80b 	bl	80015e0 <_ZN6WS28127set_rgbEhhhh>

}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b00c      	add	sp, #48	@ 0x30
 80015d0:	bdb0      	pop	{r4, r5, r7, pc}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	800000ff 	.word	0x800000ff
 80015d8:	ffffff00 	.word	0xffffff00
 80015dc:	0800519c 	.word	0x0800519c

080015e0 <_ZN6WS28127set_rgbEhhhh>:

void WS2812::set_rgb(uint8_t id, uint8_t r, uint8_t g,uint8_t b){
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	000c      	movs	r4, r1
 80015ea:	0010      	movs	r0, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	1cfb      	adds	r3, r7, #3
 80015f0:	1c22      	adds	r2, r4, #0
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	1cbb      	adds	r3, r7, #2
 80015f6:	1c02      	adds	r2, r0, #0
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	1c7b      	adds	r3, r7, #1
 80015fc:	1c0a      	adds	r2, r1, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][0]=r;
 8001600:	1cfb      	adds	r3, r7, #3
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	0013      	movs	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	189b      	adds	r3, r3, r2
 800160c:	18cb      	adds	r3, r1, r3
 800160e:	330c      	adds	r3, #12
 8001610:	1cba      	adds	r2, r7, #2
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][1]=g;
 8001616:	1cfb      	adds	r3, r7, #3
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	0013      	movs	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	189b      	adds	r3, r3, r2
 8001622:	18cb      	adds	r3, r1, r3
 8001624:	330d      	adds	r3, #13
 8001626:	1c7a      	adds	r2, r7, #1
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	701a      	strb	r2, [r3, #0]
    rgb_buf[id][2]=b;
 800162c:	1cfb      	adds	r3, r7, #3
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	0013      	movs	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	189b      	adds	r3, r3, r2
 8001638:	18cb      	adds	r3, r1, r3
 800163a:	330e      	adds	r3, #14
 800163c:	001a      	movs	r2, r3
 800163e:	2318      	movs	r3, #24
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	7013      	strb	r3, [r2, #0]
}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b003      	add	sp, #12
 800164c:	bd90      	pop	{r4, r7, pc}
	...

08001650 <_ZN6WS281217do_forwardRewriteEv>:

void WS2812::do_forwardRewrite(){
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	23d0      	movs	r3, #208	@ 0xd0
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	58d2      	ldr	r2, [r2, r3]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	429a      	cmp	r2, r3
 8001666:	d86e      	bhi.n	8001746 <_ZN6WS281217do_forwardRewriteEv+0xf6>
        for(uint_fast8_t i = 0; i < 8; i++) {
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e05e      	b.n	800172c <_ZN6WS281217do_forwardRewriteEv+0xdc>
            wr_buf[i     ] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	23d0      	movs	r3, #208	@ 0xd0
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	58d2      	ldr	r2, [r2, r3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	0013      	movs	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	189b      	adds	r3, r3, r2
 800167e:	18cb      	adds	r3, r1, r3
 8001680:	330d      	adds	r3, #13
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	0019      	movs	r1, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2207      	movs	r2, #7
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4119      	asrs	r1, r3
 800168e:	000b      	movs	r3, r1
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	d001      	beq.n	800169a <_ZN6WS281217do_forwardRewriteEv+0x4a>
 8001696:	200a      	movs	r0, #10
 8001698:	e000      	b.n	800169c <_ZN6WS281217do_forwardRewriteEv+0x4c>
 800169a:	2005      	movs	r0, #5
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4940      	ldr	r1, [pc, #256]	@ (80017a0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	18d3      	adds	r3, r2, r3
 80016a4:	185b      	adds	r3, r3, r1
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	701a      	strb	r2, [r3, #0]
            wr_buf[i +  8] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	23d0      	movs	r3, #208	@ 0xd0
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	58d2      	ldr	r2, [r2, r3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	0013      	movs	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	189b      	adds	r3, r3, r2
 80016ba:	18cb      	adds	r3, r1, r3
 80016bc:	330c      	adds	r3, #12
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	0019      	movs	r1, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2207      	movs	r2, #7
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	4119      	asrs	r1, r3
 80016ca:	000b      	movs	r3, r1
 80016cc:	2201      	movs	r2, #1
 80016ce:	4013      	ands	r3, r2
 80016d0:	d001      	beq.n	80016d6 <_ZN6WS281217do_forwardRewriteEv+0x86>
 80016d2:	200a      	movs	r0, #10
 80016d4:	e000      	b.n	80016d8 <_ZN6WS281217do_forwardRewriteEv+0x88>
 80016d6:	2005      	movs	r0, #5
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3308      	adds	r3, #8
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4930      	ldr	r1, [pc, #192]	@ (80017a0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	185b      	adds	r3, r3, r1
 80016e4:	1c02      	adds	r2, r0, #0
 80016e6:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 16] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	23d0      	movs	r3, #208	@ 0xd0
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	58d2      	ldr	r2, [r2, r3]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	0013      	movs	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	18cb      	adds	r3, r1, r3
 80016fa:	330e      	adds	r3, #14
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	0019      	movs	r1, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2207      	movs	r2, #7
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4119      	asrs	r1, r3
 8001708:	000b      	movs	r3, r1
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d001      	beq.n	8001714 <_ZN6WS281217do_forwardRewriteEv+0xc4>
 8001710:	200a      	movs	r0, #10
 8001712:	e000      	b.n	8001716 <_ZN6WS281217do_forwardRewriteEv+0xc6>
 8001714:	2005      	movs	r0, #5
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3310      	adds	r3, #16
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4920      	ldr	r1, [pc, #128]	@ (80017a0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	185b      	adds	r3, r3, r1
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; i++) {
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b07      	cmp	r3, #7
 8001730:	d99d      	bls.n	800166e <_ZN6WS281217do_forwardRewriteEv+0x1e>
        }
        wr_buf_p++;
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	23d0      	movs	r3, #208	@ 0xd0
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	58d3      	ldr	r3, [r2, r3]
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	23d0      	movs	r3, #208	@ 0xd0
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	50d1      	str	r1, [r2, r3]
    } else if (wr_buf_p < NUM_PIXELS + 2) {
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
        wr_buf_p++;
    }
}
 8001744:	e028      	b.n	8001798 <_ZN6WS281217do_forwardRewriteEv+0x148>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	23d0      	movs	r3, #208	@ 0xd0
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	58d2      	ldr	r2, [r2, r3]
 800174e:	2381      	movs	r3, #129	@ 0x81
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	429a      	cmp	r2, r3
 8001754:	d820      	bhi.n	8001798 <_ZN6WS281217do_forwardRewriteEv+0x148>
        for(uint8_t i = 0; i < 24; i++){ wr_buf[i] = 0;}
 8001756:	230b      	movs	r3, #11
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e00d      	b.n	800177c <_ZN6WS281217do_forwardRewriteEv+0x12c>
 8001760:	200b      	movs	r0, #11
 8001762:	183b      	adds	r3, r7, r0
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	490d      	ldr	r1, [pc, #52]	@ (80017a0 <_ZN6WS281217do_forwardRewriteEv+0x150>)
 800176a:	18d3      	adds	r3, r2, r3
 800176c:	185b      	adds	r3, r3, r1
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	183b      	adds	r3, r7, r0
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	183b      	adds	r3, r7, r0
 8001778:	3201      	adds	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	230b      	movs	r3, #11
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b17      	cmp	r3, #23
 8001784:	d9ec      	bls.n	8001760 <_ZN6WS281217do_forwardRewriteEv+0x110>
        wr_buf_p++;
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	23d0      	movs	r3, #208	@ 0xd0
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	58d3      	ldr	r3, [r2, r3]
 800178e:	1c59      	adds	r1, r3, #1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	23d0      	movs	r3, #208	@ 0xd0
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	50d1      	str	r1, [r2, r3]
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b004      	add	sp, #16
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	0000030f 	.word	0x0000030f

080017a4 <_ZN6WS281214do_backRewriteEv>:

void WS2812::do_backRewrite(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    if(wr_buf_p < NUM_PIXELS) {
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	23d0      	movs	r3, #208	@ 0xd0
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	58d2      	ldr	r2, [r2, r3]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d86f      	bhi.n	800189c <_ZN6WS281214do_backRewriteEv+0xf8>
        for(uint_fast8_t i = 0; i < 8; ++i) {
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e05f      	b.n	8001882 <_ZN6WS281214do_backRewriteEv+0xde>
            wr_buf[i + 24] = ((rgb_buf[wr_buf_p][1]>>(7-i))&1) ? HIGH : LOW;
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	23d0      	movs	r3, #208	@ 0xd0
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	58d2      	ldr	r2, [r2, r3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	0013      	movs	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	189b      	adds	r3, r3, r2
 80017d2:	18cb      	adds	r3, r1, r3
 80017d4:	330d      	adds	r3, #13
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	0019      	movs	r1, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2207      	movs	r2, #7
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	4119      	asrs	r1, r3
 80017e2:	000b      	movs	r3, r1
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d001      	beq.n	80017ee <_ZN6WS281214do_backRewriteEv+0x4a>
 80017ea:	200a      	movs	r0, #10
 80017ec:	e000      	b.n	80017f0 <_ZN6WS281214do_backRewriteEv+0x4c>
 80017ee:	2005      	movs	r0, #5
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3318      	adds	r3, #24
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4947      	ldr	r1, [pc, #284]	@ (8001914 <_ZN6WS281214do_backRewriteEv+0x170>)
 80017f8:	18d3      	adds	r3, r2, r3
 80017fa:	185b      	adds	r3, r3, r1
 80017fc:	1c02      	adds	r2, r0, #0
 80017fe:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 32] = ((rgb_buf[wr_buf_p][0]>>(7-i))&1) ? HIGH : LOW;
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	23d0      	movs	r3, #208	@ 0xd0
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	58d2      	ldr	r2, [r2, r3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	0013      	movs	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	189b      	adds	r3, r3, r2
 8001810:	18cb      	adds	r3, r1, r3
 8001812:	330c      	adds	r3, #12
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	0019      	movs	r1, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2207      	movs	r2, #7
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4119      	asrs	r1, r3
 8001820:	000b      	movs	r3, r1
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d001      	beq.n	800182c <_ZN6WS281214do_backRewriteEv+0x88>
 8001828:	200a      	movs	r0, #10
 800182a:	e000      	b.n	800182e <_ZN6WS281214do_backRewriteEv+0x8a>
 800182c:	2005      	movs	r0, #5
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3320      	adds	r3, #32
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4937      	ldr	r1, [pc, #220]	@ (8001914 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001836:	18d3      	adds	r3, r2, r3
 8001838:	185b      	adds	r3, r3, r1
 800183a:	1c02      	adds	r2, r0, #0
 800183c:	701a      	strb	r2, [r3, #0]
            wr_buf[i + 40] = ((rgb_buf[wr_buf_p][2]>>(7-i))&1) ? HIGH : LOW;
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	23d0      	movs	r3, #208	@ 0xd0
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	58d2      	ldr	r2, [r2, r3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	0013      	movs	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	189b      	adds	r3, r3, r2
 800184e:	18cb      	adds	r3, r1, r3
 8001850:	330e      	adds	r3, #14
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	0019      	movs	r1, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2207      	movs	r2, #7
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4119      	asrs	r1, r3
 800185e:	000b      	movs	r3, r1
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	d001      	beq.n	800186a <_ZN6WS281214do_backRewriteEv+0xc6>
 8001866:	200a      	movs	r0, #10
 8001868:	e000      	b.n	800186c <_ZN6WS281214do_backRewriteEv+0xc8>
 800186a:	2005      	movs	r0, #5
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3328      	adds	r3, #40	@ 0x28
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4928      	ldr	r1, [pc, #160]	@ (8001914 <_ZN6WS281214do_backRewriteEv+0x170>)
 8001874:	18d3      	adds	r3, r2, r3
 8001876:	185b      	adds	r3, r3, r1
 8001878:	1c02      	adds	r2, r0, #0
 800187a:	701a      	strb	r2, [r3, #0]
        for(uint_fast8_t i = 0; i < 8; ++i) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3301      	adds	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d99c      	bls.n	80017c2 <_ZN6WS281214do_backRewriteEv+0x1e>
        }
        wr_buf_p++;
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	23d0      	movs	r3, #208	@ 0xd0
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	58d3      	ldr	r3, [r2, r3]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	23d0      	movs	r3, #208	@ 0xd0
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	50d1      	str	r1, [r2, r3]
        wr_buf_p++;
    } else {
        wr_buf_p = 0;
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
    }
}
 800189a:	e036      	b.n	800190a <_ZN6WS281214do_backRewriteEv+0x166>
    } else if (wr_buf_p < NUM_PIXELS + 2) {
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	23d0      	movs	r3, #208	@ 0xd0
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	58d2      	ldr	r2, [r2, r3]
 80018a4:	2381      	movs	r3, #129	@ 0x81
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d821      	bhi.n	80018f0 <_ZN6WS281214do_backRewriteEv+0x14c>
        for(uint8_t i = 24; i < 48; i++){ wr_buf[i] = 0;};
 80018ac:	230b      	movs	r3, #11
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2218      	movs	r2, #24
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e00d      	b.n	80018d2 <_ZN6WS281214do_backRewriteEv+0x12e>
 80018b6:	200b      	movs	r0, #11
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4915      	ldr	r1, [pc, #84]	@ (8001914 <_ZN6WS281214do_backRewriteEv+0x170>)
 80018c0:	18d3      	adds	r3, r2, r3
 80018c2:	185b      	adds	r3, r3, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	183b      	adds	r3, r7, r0
 80018ce:	3201      	adds	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	230b      	movs	r3, #11
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80018da:	d9ec      	bls.n	80018b6 <_ZN6WS281214do_backRewriteEv+0x112>
        wr_buf_p++;
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	23d0      	movs	r3, #208	@ 0xd0
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	23d0      	movs	r3, #208	@ 0xd0
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	50d1      	str	r1, [r2, r3]
}
 80018ee:	e00c      	b.n	800190a <_ZN6WS281214do_backRewriteEv+0x166>
        wr_buf_p = 0;
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	23d0      	movs	r3, #208	@ 0xd0
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	2100      	movs	r1, #0
 80018f8:	50d1      	str	r1, [r2, r3]
        HAL_TIM_PWM_Stop_DMA(HTIM, TIM_CHANNEL_X);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	0019      	movs	r1, r3
 8001904:	0010      	movs	r0, r2
 8001906:	f001 fdbd 	bl	8003484 <HAL_TIM_PWM_Stop_DMA>
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b004      	add	sp, #16
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	0000030f 	.word	0x0000030f

08001918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800191c:	f7ff fcd6 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001946:	f003 fbc9 	bl	80050dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800194a:	f7fe fe4f 	bl	80005ec <main>

0800194e <LoopForever>:

LoopForever:
  b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   r0, =_estack
 8001950:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800195c:	08005228 	.word	0x08005228
  ldr r2, =_sbss
 8001960:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001964:	20000588 	.word	0x20000588

08001968 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_IRQHandler>
	...

0800196c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_Init+0x3c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_Init+0x3c>)
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	0049      	lsls	r1, r1, #1
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001986:	2003      	movs	r0, #3
 8001988:	f000 f810 	bl	80019ac <HAL_InitTick>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d003      	beq.n	8001998 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001990:	1dfb      	adds	r3, r7, #7
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e001      	b.n	800199c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fb3e 	bl	8001018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b4:	230f      	movs	r3, #15
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_InitTick+0x88>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d02b      	beq.n	8001a1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_InitTick+0x8c>)
 80019c6:	681c      	ldr	r4, [r3, #0]
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_InitTick+0x88>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	0019      	movs	r1, r3
 80019ce:	23fa      	movs	r3, #250	@ 0xfa
 80019d0:	0098      	lsls	r0, r3, #2
 80019d2:	f7fe fb95 	bl	8000100 <__udivsi3>
 80019d6:	0003      	movs	r3, r0
 80019d8:	0019      	movs	r1, r3
 80019da:	0020      	movs	r0, r4
 80019dc:	f7fe fb90 	bl	8000100 <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f93d 	bl	8001c62 <HAL_SYSTICK_Config>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d112      	bne.n	8001a12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d80a      	bhi.n	8001a08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	2301      	movs	r3, #1
 80019f6:	425b      	negs	r3, r3
 80019f8:	2200      	movs	r2, #0
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 f90c 	bl	8001c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_InitTick+0x90>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e00d      	b.n	8001a24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a08:	230f      	movs	r3, #15
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e008      	b.n	8001a24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a12:	230f      	movs	r3, #15
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	e003      	b.n	8001a24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b005      	add	sp, #20
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	20000010 	.word	0x20000010
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	2000000c 	.word	0x2000000c

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	001a      	movs	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	18d2      	adds	r2, r2, r3
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_IncTick+0x20>)
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	20000010 	.word	0x20000010
 8001a60:	20000584 	.word	0x20000584

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	@ (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	20000584 	.word	0x20000584

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	001a      	movs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	189b      	adds	r3, r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	f7ff ffe0 	bl	8001a64 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	46c0      	nop			@ (mov r8, r8)
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b004      	add	sp, #16
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	20000010 	.word	0x20000010

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ad2:	d809      	bhi.n	8001ae8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	231f      	movs	r3, #31
 8001adc:	401a      	ands	r2, r3
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <__NVIC_EnableIRQ+0x30>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4091      	lsls	r1, r2
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	0002      	movs	r2, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b08:	d828      	bhi.n	8001b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc8 <__NVIC_SetPriority+0xd4>)
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	33c0      	adds	r3, #192	@ 0xc0
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	589b      	ldr	r3, [r3, r2]
 8001b1a:	1dfa      	adds	r2, r7, #7
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	0011      	movs	r1, r2
 8001b20:	2203      	movs	r2, #3
 8001b22:	400a      	ands	r2, r1
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	21ff      	movs	r1, #255	@ 0xff
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	000a      	movs	r2, r1
 8001b2c:	43d2      	mvns	r2, r2
 8001b2e:	401a      	ands	r2, r3
 8001b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	22ff      	movs	r2, #255	@ 0xff
 8001b38:	401a      	ands	r2, r3
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	2303      	movs	r3, #3
 8001b42:	4003      	ands	r3, r0
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b48:	481f      	ldr	r0, [pc, #124]	@ (8001bc8 <__NVIC_SetPriority+0xd4>)
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	430a      	orrs	r2, r1
 8001b54:	33c0      	adds	r3, #192	@ 0xc0
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b5a:	e031      	b.n	8001bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bcc <__NVIC_SetPriority+0xd8>)
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	0019      	movs	r1, r3
 8001b64:	230f      	movs	r3, #15
 8001b66:	400b      	ands	r3, r1
 8001b68:	3b08      	subs	r3, #8
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3306      	adds	r3, #6
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	3304      	adds	r3, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	400a      	ands	r2, r1
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	21ff      	movs	r1, #255	@ 0xff
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	43d2      	mvns	r2, r2
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	22ff      	movs	r2, #255	@ 0xff
 8001b94:	401a      	ands	r2, r3
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	4003      	ands	r3, r0
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba4:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <__NVIC_SetPriority+0xd8>)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	001c      	movs	r4, r3
 8001bac:	230f      	movs	r3, #15
 8001bae:	4023      	ands	r3, r4
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	18c3      	adds	r3, r0, r3
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b003      	add	sp, #12
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	045b      	lsls	r3, r3, #17
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d301      	bcc.n	8001be8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be4:	2301      	movs	r3, #1
 8001be6:	e010      	b.n	8001c0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <SysTick_Config+0x44>)
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	3a01      	subs	r2, #1
 8001bee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff ff7c 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <SysTick_Config+0x44>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <SysTick_Config+0x44>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	210f      	movs	r1, #15
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	0002      	movs	r2, r0
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff ff33 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ffaf 	bl	8001bd0 <SysTick_Config>
 8001c72:	0003      	movs	r3, r0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e077      	b.n	8001d7e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a3d      	ldr	r2, [pc, #244]	@ (8001d88 <HAL_DMA_Init+0x10c>)
 8001c94:	4694      	mov	ip, r2
 8001c96:	4463      	add	r3, ip
 8001c98:	2114      	movs	r1, #20
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7fe fa30 	bl	8000100 <__udivsi3>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	009a      	lsls	r2, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2225      	movs	r2, #37	@ 0x25
 8001cac:	2102      	movs	r1, #2
 8001cae:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4934      	ldr	r1, [pc, #208]	@ (8001d8c <HAL_DMA_Init+0x110>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 fa2b 	bl	8002154 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d102      	bne.n	8001d10 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d18:	213f      	movs	r1, #63	@ 0x3f
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d26:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d011      	beq.n	8001d54 <HAL_DMA_Init+0xd8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d80d      	bhi.n	8001d54 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 fa36 	bl	80021ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	e008      	b.n	8001d66 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2225      	movs	r2, #37	@ 0x25
 8001d70:	2101      	movs	r1, #1
 8001d72:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	@ 0x24
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	bffdfff8 	.word	0xbffdfff8
 8001d8c:	ffff800f 	.word	0xffff800f

08001d90 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2317      	movs	r3, #23
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2224      	movs	r2, #36	@ 0x24
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_DMA_Start_IT+0x24>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e06f      	b.n	8001e94 <HAL_DMA_Start_IT+0x104>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2224      	movs	r2, #36	@ 0x24
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2225      	movs	r2, #37	@ 0x25
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d157      	bne.n	8001e78 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2225      	movs	r2, #37	@ 0x25
 8001dcc:	2102      	movs	r1, #2
 8001dce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	438a      	bics	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f971 	bl	80020d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	210e      	movs	r1, #14
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e00f      	b.n	8001e2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2104      	movs	r1, #4
 8001e18:	438a      	bics	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	210a      	movs	r1, #10
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	@ 0x80
 8001e34:	025b      	lsls	r3, r3, #9
 8001e36:	4013      	ands	r3, r2
 8001e38:	d008      	beq.n	8001e4c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e44:	2180      	movs	r1, #128	@ 0x80
 8001e46:	0049      	lsls	r1, r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	0049      	lsls	r1, r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e00a      	b.n	8001e8e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2224      	movs	r2, #36	@ 0x24
 8001e82:	2100      	movs	r1, #0
 8001e84:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001e86:	2317      	movs	r3, #23
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001e8e:	2317      	movs	r3, #23
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	781b      	ldrb	r3, [r3, #0]
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b006      	add	sp, #24
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2225      	movs	r2, #37	@ 0x25
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d006      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ebe:	187b      	adds	r3, r7, r1
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	e049      	b.n	8001f5a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	210e      	movs	r1, #14
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	438a      	bics	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	491d      	ldr	r1, [pc, #116]	@ (8001f68 <HAL_DMA_Abort_IT+0xcc>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <HAL_DMA_Abort_IT+0xd0>)
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	221c      	movs	r2, #28
 8001f00:	4013      	ands	r3, r2
 8001f02:	2201      	movs	r2, #1
 8001f04:	409a      	lsls	r2, r3
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_DMA_Abort_IT+0xd0>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f28:	490f      	ldr	r1, [pc, #60]	@ (8001f68 <HAL_DMA_Abort_IT+0xcc>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001f36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2225      	movs	r2, #37	@ 0x25
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	@ 0x24
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	0010      	movs	r0, r2
 8001f58:	4798      	blx	r3
    }
  }
  return status;
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	fffffeff 	.word	0xfffffeff
 8001f6c:	40020000 	.word	0x40020000

08001f70 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001f78:	4b55      	ldr	r3, [pc, #340]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	221c      	movs	r2, #28
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2204      	movs	r2, #4
 8001f90:	409a      	lsls	r2, r3
 8001f92:	0013      	movs	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	d027      	beq.n	8001fea <HAL_DMA_IRQHandler+0x7a>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d023      	beq.n	8001fea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	4013      	ands	r3, r2
 8001fac:	d107      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2104      	movs	r1, #4
 8001fba:	438a      	bics	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001fbe:	4b44      	ldr	r3, [pc, #272]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 8001fc0:	6859      	ldr	r1, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	221c      	movs	r2, #28
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2204      	movs	r2, #4
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	4b40      	ldr	r3, [pc, #256]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d100      	bne.n	8001fde <HAL_DMA_IRQHandler+0x6e>
 8001fdc:	e073      	b.n	80020c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001fe8:	e06d      	b.n	80020c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	221c      	movs	r2, #28
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d02e      	beq.n	800205c <HAL_DMA_IRQHandler+0xec>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d02a      	beq.n	800205c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2220      	movs	r2, #32
 800200e:	4013      	ands	r3, r2
 8002010:	d10b      	bne.n	800202a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	210a      	movs	r1, #10
 800201e:	438a      	bics	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2225      	movs	r2, #37	@ 0x25
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800202a:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	221c      	movs	r2, #28
 8002034:	4013      	ands	r3, r2
 8002036:	2202      	movs	r2, #2
 8002038:	409a      	lsls	r2, r3
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	@ 0x24
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03a      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	0010      	movs	r0, r2
 8002058:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800205a:	e034      	b.n	80020c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	221c      	movs	r2, #28
 8002062:	4013      	ands	r3, r2
 8002064:	2208      	movs	r2, #8
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	d02b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x158>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2208      	movs	r2, #8
 8002074:	4013      	ands	r3, r2
 8002076:	d027      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	210e      	movs	r1, #14
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	221c      	movs	r2, #28
 8002092:	4013      	ands	r3, r2
 8002094:	2201      	movs	r2, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <HAL_DMA_IRQHandler+0x160>)
 800209a:	430a      	orrs	r2, r1
 800209c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2225      	movs	r2, #37	@ 0x25
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	@ 0x24
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	0010      	movs	r0, r2
 80020c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46c0      	nop			@ (mov r8, r8)
}
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b004      	add	sp, #16
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020000 	.word	0x40020000

080020d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80020fc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80020fe:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <DMA_SetConfig+0x7c>)
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	221c      	movs	r2, #28
 8002108:	4013      	ands	r3, r2
 800210a:	2201      	movs	r2, #1
 800210c:	409a      	lsls	r2, r3
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <DMA_SetConfig+0x7c>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b10      	cmp	r3, #16
 8002122:	d108      	bne.n	8002136 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002134:	e007      	b.n	8002146 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	60da      	str	r2, [r3, #12]
}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	40020000 	.word	0x40020000

08002154 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002164:	4694      	mov	ip, r2
 8002166:	4463      	add	r3, ip
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	001a      	movs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	001a      	movs	r2, r3
 8002176:	23ff      	movs	r3, #255	@ 0xff
 8002178:	4013      	ands	r3, r2
 800217a:	3b08      	subs	r3, #8
 800217c:	2114      	movs	r1, #20
 800217e:	0018      	movs	r0, r3
 8002180:	f7fd ffbe 	bl	8000100 <__udivsi3>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800218c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	221f      	movs	r2, #31
 8002192:	4013      	ands	r3, r2
 8002194:	2201      	movs	r2, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b004      	add	sp, #16
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	10008200 	.word	0x10008200
 80021a8:	40020880 	.word	0x40020880

080021ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	223f      	movs	r2, #63	@ 0x3f
 80021ba:	4013      	ands	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021c2:	4694      	mov	ip, r2
 80021c4:	4463      	add	r3, ip
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	001a      	movs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	4013      	ands	r3, r2
 80021dc:	2201      	movs	r2, #1
 80021de:	409a      	lsls	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	1000823f 	.word	0x1000823f
 80021f0:	40020940 	.word	0x40020940

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e147      	b.n	8002494 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4091      	lsls	r1, r2
 800220e:	000a      	movs	r2, r1
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d100      	bne.n	800221c <HAL_GPIO_Init+0x28>
 800221a:	e138      	b.n	800248e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2203      	movs	r2, #3
 8002222:	4013      	ands	r3, r2
 8002224:	2b01      	cmp	r3, #1
 8002226:	d005      	beq.n	8002234 <HAL_GPIO_Init+0x40>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2203      	movs	r2, #3
 800222e:	4013      	ands	r3, r2
 8002230:	2b02      	cmp	r3, #2
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	409a      	lsls	r2, r3
 8002242:	0013      	movs	r3, r2
 8002244:	43da      	mvns	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	0013      	movs	r3, r2
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
 8002270:	0013      	movs	r3, r2
 8002272:	43da      	mvns	r2, r3
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	2201      	movs	r2, #1
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
 8002288:	0013      	movs	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2203      	movs	r2, #3
 800229c:	4013      	ands	r3, r2
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d017      	beq.n	80022d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	43da      	mvns	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2203      	movs	r2, #3
 80022d8:	4013      	ands	r3, r2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d123      	bne.n	8002326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	58d3      	ldr	r3, [r2, r3]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2207      	movs	r2, #7
 80022f0:	4013      	ands	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	409a      	lsls	r2, r3
 80022f8:	0013      	movs	r3, r2
 80022fa:	43da      	mvns	r2, r3
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2107      	movs	r1, #7
 800230a:	400b      	ands	r3, r1
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	409a      	lsls	r2, r3
 8002310:	0013      	movs	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	6939      	ldr	r1, [r7, #16]
 8002324:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	43da      	mvns	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	401a      	ands	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	0013      	movs	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	23c0      	movs	r3, #192	@ 0xc0
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	4013      	ands	r3, r2
 8002364:	d100      	bne.n	8002368 <HAL_GPIO_Init+0x174>
 8002366:	e092      	b.n	800248e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002368:	4a50      	ldr	r2, [pc, #320]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3318      	adds	r3, #24
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	589b      	ldr	r3, [r3, r2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2203      	movs	r2, #3
 800237a:	4013      	ands	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	220f      	movs	r2, #15
 8002380:	409a      	lsls	r2, r3
 8002382:	0013      	movs	r3, r2
 8002384:	43da      	mvns	r2, r3
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	23a0      	movs	r3, #160	@ 0xa0
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	429a      	cmp	r2, r3
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x1ca>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a45      	ldr	r2, [pc, #276]	@ (80024b0 <HAL_GPIO_Init+0x2bc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x1c6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a44      	ldr	r2, [pc, #272]	@ (80024b4 <HAL_GPIO_Init+0x2c0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x1c2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a43      	ldr	r2, [pc, #268]	@ (80024b8 <HAL_GPIO_Init+0x2c4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x1be>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e006      	b.n	80023c0 <HAL_GPIO_Init+0x1cc>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e004      	b.n	80023c0 <HAL_GPIO_Init+0x1cc>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x1cc>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x1cc>
 80023be:	2300      	movs	r3, #0
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	2103      	movs	r1, #3
 80023c4:	400a      	ands	r2, r1
 80023c6:	00d2      	lsls	r2, r2, #3
 80023c8:	4093      	lsls	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023d0:	4936      	ldr	r1, [pc, #216]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3318      	adds	r3, #24
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023de:	4b33      	ldr	r3, [pc, #204]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	035b      	lsls	r3, r3, #13
 80023f6:	4013      	ands	r3, r2
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002402:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002408:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43da      	mvns	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	039b      	lsls	r3, r3, #14
 8002420:	4013      	ands	r3, r2
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800242c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002432:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 8002434:	2384      	movs	r3, #132	@ 0x84
 8002436:	58d3      	ldr	r3, [r2, r3]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43da      	mvns	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	4013      	ands	r3, r2
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002458:	4914      	ldr	r1, [pc, #80]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 800245a:	2284      	movs	r2, #132	@ 0x84
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002460:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	58d3      	ldr	r3, [r2, r3]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	43da      	mvns	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	4013      	ands	r3, r2
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002486:	4909      	ldr	r1, [pc, #36]	@ (80024ac <HAL_GPIO_Init+0x2b8>)
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	40da      	lsrs	r2, r3
 800249c:	1e13      	subs	r3, r2, #0
 800249e:	d000      	beq.n	80024a2 <HAL_GPIO_Init+0x2ae>
 80024a0:	e6b0      	b.n	8002204 <HAL_GPIO_Init+0x10>
  }
}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	46c0      	nop			@ (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b006      	add	sp, #24
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021800 	.word	0x40021800
 80024b0:	50000400 	.word	0x50000400
 80024b4:	50000800 	.word	0x50000800
 80024b8:	50000c00 	.word	0x50000c00

080024bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	000a      	movs	r2, r1
 80024c6:	1cbb      	adds	r3, r7, #2
 80024c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	1cba      	adds	r2, r7, #2
 80024d0:	8812      	ldrh	r2, [r2, #0]
 80024d2:	4013      	ands	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024d6:	230f      	movs	r3, #15
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e003      	b.n	80024e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e0:	230f      	movs	r3, #15
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024e8:	230f      	movs	r3, #15
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	781b      	ldrb	r3, [r3, #0]
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	0008      	movs	r0, r1
 8002500:	0011      	movs	r1, r2
 8002502:	1cbb      	adds	r3, r7, #2
 8002504:	1c02      	adds	r2, r0, #0
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	1c7b      	adds	r3, r7, #1
 800250a:	1c0a      	adds	r2, r1, #0
 800250c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800250e:	1c7b      	adds	r3, r7, #1
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002516:	1cbb      	adds	r3, r7, #2
 8002518:	881a      	ldrh	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800251e:	e003      	b.n	8002528 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002520:	1cbb      	adds	r3, r7, #2
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002528:	46c0      	nop			@ (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002538:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d11f      	bne.n	8002594 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	0013      	movs	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	189b      	adds	r3, r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4912      	ldr	r1, [pc, #72]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd fdcc 	bl	8000100 <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	3301      	adds	r3, #1
 800256c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800256e:	e008      	b.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3b01      	subs	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e001      	b.n	8002582 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e009      	b.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	2380      	movs	r3, #128	@ 0x80
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	401a      	ands	r2, r3
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	429a      	cmp	r2, r3
 8002592:	d0ed      	beq.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	40007000 	.word	0x40007000
 80025a4:	fffff9ff 	.word	0xfffff9ff
 80025a8:	20000008 	.word	0x20000008
 80025ac:	000f4240 	.word	0x000f4240

080025b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025b4:	4b03      	ldr	r3, [pc, #12]	@ (80025c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	23e0      	movs	r3, #224	@ 0xe0
 80025ba:	01db      	lsls	r3, r3, #7
 80025bc:	4013      	ands	r3, r2
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e2f3      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d100      	bne.n	80025e6 <HAL_RCC_OscConfig+0x1e>
 80025e4:	e07c      	b.n	80026e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	4bc3      	ldr	r3, [pc, #780]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2238      	movs	r2, #56	@ 0x38
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f0:	4bc0      	ldr	r3, [pc, #768]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2203      	movs	r2, #3
 80025f6:	4013      	ands	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d102      	bne.n	8002606 <HAL_RCC_OscConfig+0x3e>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d002      	beq.n	800260c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b08      	cmp	r3, #8
 800260a:	d10b      	bne.n	8002624 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	4bb9      	ldr	r3, [pc, #740]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	4013      	ands	r3, r2
 8002616:	d062      	beq.n	80026de <HAL_RCC_OscConfig+0x116>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d15e      	bne.n	80026de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e2ce      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	025b      	lsls	r3, r3, #9
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x78>
 8002630:	4bb0      	ldr	r3, [pc, #704]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4baf      	ldr	r3, [pc, #700]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	0249      	lsls	r1, r1, #9
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e020      	b.n	8002682 <HAL_RCC_OscConfig+0xba>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	23a0      	movs	r3, #160	@ 0xa0
 8002646:	02db      	lsls	r3, r3, #11
 8002648:	429a      	cmp	r2, r3
 800264a:	d10e      	bne.n	800266a <HAL_RCC_OscConfig+0xa2>
 800264c:	4ba9      	ldr	r3, [pc, #676]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4ba8      	ldr	r3, [pc, #672]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002652:	2180      	movs	r1, #128	@ 0x80
 8002654:	02c9      	lsls	r1, r1, #11
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	4ba6      	ldr	r3, [pc, #664]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4ba5      	ldr	r3, [pc, #660]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002660:	2180      	movs	r1, #128	@ 0x80
 8002662:	0249      	lsls	r1, r1, #9
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0xba>
 800266a:	4ba2      	ldr	r3, [pc, #648]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4ba1      	ldr	r3, [pc, #644]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002670:	49a1      	ldr	r1, [pc, #644]	@ (80028f8 <HAL_RCC_OscConfig+0x330>)
 8002672:	400a      	ands	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	4b9f      	ldr	r3, [pc, #636]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b9e      	ldr	r3, [pc, #632]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800267c:	499f      	ldr	r1, [pc, #636]	@ (80028fc <HAL_RCC_OscConfig+0x334>)
 800267e:	400a      	ands	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d014      	beq.n	80026b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff f9eb 	bl	8001a64 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff f9e6 	bl	8001a64 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e28d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	4b93      	ldr	r3, [pc, #588]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	029b      	lsls	r3, r3, #10
 80026ae:	4013      	ands	r3, r2
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0xcc>
 80026b2:	e015      	b.n	80026e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff f9d6 	bl	8001a64 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026be:	f7ff f9d1 	bl	8001a64 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	@ 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e278      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026d0:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	4013      	ands	r3, r2
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0xf6>
 80026dc:	e000      	b.n	80026e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d100      	bne.n	80026ec <HAL_RCC_OscConfig+0x124>
 80026ea:	e099      	b.n	8002820 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	4b81      	ldr	r3, [pc, #516]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2238      	movs	r2, #56	@ 0x38
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f6:	4b7f      	ldr	r3, [pc, #508]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2203      	movs	r2, #3
 80026fc:	4013      	ands	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b10      	cmp	r3, #16
 8002704:	d102      	bne.n	800270c <HAL_RCC_OscConfig+0x144>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d002      	beq.n	8002712 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d135      	bne.n	800277e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002712:	4b78      	ldr	r3, [pc, #480]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4013      	ands	r3, r2
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x162>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e24b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b72      	ldr	r3, [pc, #456]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a74      	ldr	r2, [pc, #464]	@ (8002900 <HAL_RCC_OscConfig+0x338>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	021a      	lsls	r2, r3, #8
 800273a:	4b6e      	ldr	r3, [pc, #440]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d112      	bne.n	800276c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002746:	4b6b      	ldr	r3, [pc, #428]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <HAL_RCC_OscConfig+0x33c>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	4b67      	ldr	r3, [pc, #412]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800275a:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0adb      	lsrs	r3, r3, #11
 8002760:	2207      	movs	r2, #7
 8002762:	4013      	ands	r3, r2
 8002764:	4a68      	ldr	r2, [pc, #416]	@ (8002908 <HAL_RCC_OscConfig+0x340>)
 8002766:	40da      	lsrs	r2, r3
 8002768:	4b68      	ldr	r3, [pc, #416]	@ (800290c <HAL_RCC_OscConfig+0x344>)
 800276a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800276c:	4b68      	ldr	r3, [pc, #416]	@ (8002910 <HAL_RCC_OscConfig+0x348>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff f91b 	bl	80019ac <HAL_InitTick>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d051      	beq.n	800281e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e221      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d030      	beq.n	80027e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002786:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a5e      	ldr	r2, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x33c>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	4b57      	ldr	r3, [pc, #348]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800279a:	4b56      	ldr	r3, [pc, #344]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b55      	ldr	r3, [pc, #340]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	0049      	lsls	r1, r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff f95c 	bl	8001a64 <HAL_GetTick>
 80027ac:	0003      	movs	r3, r0
 80027ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b2:	f7ff f957 	bl	8001a64 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e1fe      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c4:	4b4b      	ldr	r3, [pc, #300]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4013      	ands	r3, r2
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b48      	ldr	r3, [pc, #288]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_RCC_OscConfig+0x338>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	021a      	lsls	r2, r3, #8
 80027e0:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	e01b      	b.n	8002820 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027e8:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b41      	ldr	r3, [pc, #260]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80027ee:	4949      	ldr	r1, [pc, #292]	@ (8002914 <HAL_RCC_OscConfig+0x34c>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff f936 	bl	8001a64 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f931 	bl	8001a64 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1d8      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002810:	4b38      	ldr	r3, [pc, #224]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4013      	ands	r3, r2
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x236>
 800281c:	e000      	b.n	8002820 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2208      	movs	r2, #8
 8002826:	4013      	ands	r3, r2
 8002828:	d047      	beq.n	80028ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800282a:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2238      	movs	r2, #56	@ 0x38
 8002830:	4013      	ands	r3, r2
 8002832:	2b18      	cmp	r3, #24
 8002834:	d10a      	bne.n	800284c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283a:	2202      	movs	r2, #2
 800283c:	4013      	ands	r3, r2
 800283e:	d03c      	beq.n	80028ba <HAL_RCC_OscConfig+0x2f2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d138      	bne.n	80028ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e1ba      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d019      	beq.n	8002888 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 8002856:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002858:	4b26      	ldr	r3, [pc, #152]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800285a:	2101      	movs	r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff f900 	bl	8001a64 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff f8fb 	bl	8001a64 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1a2      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287c:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800287e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002880:	2202      	movs	r2, #2
 8002882:	4013      	ands	r3, r2
 8002884:	d0f1      	beq.n	800286a <HAL_RCC_OscConfig+0x2a2>
 8002886:	e018      	b.n	80028ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002888:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800288a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 800288e:	2101      	movs	r1, #1
 8002890:	438a      	bics	r2, r1
 8002892:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff f8e6 	bl	8001a64 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289e:	f7ff f8e1 	bl	8001a64 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e188      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b0:	4b10      	ldr	r3, [pc, #64]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b4:	2202      	movs	r2, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1f1      	bne.n	800289e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2204      	movs	r2, #4
 80028c0:	4013      	ands	r3, r2
 80028c2:	d100      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2fe>
 80028c4:	e0c6      	b.n	8002a54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	231f      	movs	r3, #31
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2238      	movs	r2, #56	@ 0x38
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d11e      	bne.n	8002918 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x32c>)
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d100      	bne.n	80028e6 <HAL_RCC_OscConfig+0x31e>
 80028e4:	e0b6      	b.n	8002a54 <HAL_RCC_OscConfig+0x48c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d000      	beq.n	80028f0 <HAL_RCC_OscConfig+0x328>
 80028ee:	e0b1      	b.n	8002a54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e166      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	fffeffff 	.word	0xfffeffff
 80028fc:	fffbffff 	.word	0xfffbffff
 8002900:	ffff80ff 	.word	0xffff80ff
 8002904:	ffffc7ff 	.word	0xffffc7ff
 8002908:	00f42400 	.word	0x00f42400
 800290c:	20000008 	.word	0x20000008
 8002910:	2000000c 	.word	0x2000000c
 8002914:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002918:	4bac      	ldr	r3, [pc, #688]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 800291a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	4013      	ands	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x360>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x362>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d011      	beq.n	8002952 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4ba7      	ldr	r3, [pc, #668]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002932:	4ba6      	ldr	r3, [pc, #664]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002934:	2180      	movs	r1, #128	@ 0x80
 8002936:	0549      	lsls	r1, r1, #21
 8002938:	430a      	orrs	r2, r1
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800293c:	4ba3      	ldr	r3, [pc, #652]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 800293e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800294a:	231f      	movs	r3, #31
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002952:	4b9f      	ldr	r3, [pc, #636]	@ (8002bd0 <HAL_RCC_OscConfig+0x608>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4013      	ands	r3, r2
 800295c:	d11a      	bne.n	8002994 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800295e:	4b9c      	ldr	r3, [pc, #624]	@ (8002bd0 <HAL_RCC_OscConfig+0x608>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b9b      	ldr	r3, [pc, #620]	@ (8002bd0 <HAL_RCC_OscConfig+0x608>)
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	0049      	lsls	r1, r1, #1
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800296c:	f7ff f87a 	bl	8001a64 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002976:	f7ff f875 	bl	8001a64 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e11c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002988:	4b91      	ldr	r3, [pc, #580]	@ (8002bd0 <HAL_RCC_OscConfig+0x608>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4013      	ands	r3, r2
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x3e2>
 800299c:	4b8b      	ldr	r3, [pc, #556]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 800299e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029a0:	4b8a      	ldr	r3, [pc, #552]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	430a      	orrs	r2, r1
 80029a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x41c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x404>
 80029b2:	4b86      	ldr	r3, [pc, #536]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029b6:	4b85      	ldr	r3, [pc, #532]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029b8:	2104      	movs	r1, #4
 80029ba:	430a      	orrs	r2, r1
 80029bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029be:	4b83      	ldr	r3, [pc, #524]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029c2:	4b82      	ldr	r3, [pc, #520]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0x41c>
 80029cc:	4b7f      	ldr	r3, [pc, #508]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029d0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	438a      	bics	r2, r1
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d8:	4b7c      	ldr	r3, [pc, #496]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029dc:	4b7b      	ldr	r3, [pc, #492]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 80029de:	2104      	movs	r1, #4
 80029e0:	438a      	bics	r2, r1
 80029e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d014      	beq.n	8002a16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7ff f83a 	bl	8001a64 <HAL_GetTick>
 80029f0:	0003      	movs	r3, r0
 80029f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	e009      	b.n	8002a0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff f835 	bl	8001a64 <HAL_GetTick>
 80029fa:	0002      	movs	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	4a74      	ldr	r2, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0x60c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0db      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0a:	4b70      	ldr	r3, [pc, #448]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	2202      	movs	r2, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x42e>
 8002a14:	e013      	b.n	8002a3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff f825 	bl	8001a64 <HAL_GetTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1e:	e009      	b.n	8002a34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7ff f820 	bl	8001a64 <HAL_GetTick>
 8002a24:	0002      	movs	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x60c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e0c6      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a34:	4b65      	ldr	r3, [pc, #404]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	2202      	movs	r2, #2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a3e:	231f      	movs	r3, #31
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d105      	bne.n	8002a54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a48:	4b60      	ldr	r3, [pc, #384]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a4c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a4e:	4962      	ldr	r1, [pc, #392]	@ (8002bd8 <HAL_RCC_OscConfig+0x610>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d100      	bne.n	8002a5e <HAL_RCC_OscConfig+0x496>
 8002a5c:	e0b0      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2238      	movs	r2, #56	@ 0x38
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d100      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4a4>
 8002a6a:	e078      	b.n	8002b5e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d153      	bne.n	8002b1c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b55      	ldr	r3, [pc, #340]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b54      	ldr	r3, [pc, #336]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a7a:	4958      	ldr	r1, [pc, #352]	@ (8002bdc <HAL_RCC_OscConfig+0x614>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fff0 	bl	8001a64 <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe ffeb 	bl	8001a64 <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e092      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	@ 0x80
 8002aa2:	049b      	lsls	r3, r3, #18
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa8:	4b48      	ldr	r3, [pc, #288]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a4c      	ldr	r2, [pc, #304]	@ (8002be0 <HAL_RCC_OscConfig+0x618>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002adc:	2180      	movs	r1, #128	@ 0x80
 8002ade:	0449      	lsls	r1, r1, #17
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ae4:	4b39      	ldr	r3, [pc, #228]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	0549      	lsls	r1, r1, #21
 8002aee:	430a      	orrs	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe ffb7 	bl	8001a64 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe ffb2 	bl	8001a64 <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e059      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	049b      	lsls	r3, r3, #18
 8002b16:	4013      	ands	r3, r2
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x534>
 8002b1a:	e051      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b2a      	ldr	r3, [pc, #168]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b22:	492e      	ldr	r1, [pc, #184]	@ (8002bdc <HAL_RCC_OscConfig+0x614>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe ff9c 	bl	8001a64 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe ff97 	bl	8001a64 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e03e      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b44:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	049b      	lsls	r3, r3, #18
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b50:	4b1e      	ldr	r3, [pc, #120]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b56:	4923      	ldr	r1, [pc, #140]	@ (8002be4 <HAL_RCC_OscConfig+0x61c>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	e030      	b.n	8002bc0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b6a:	4b18      	ldr	r3, [pc, #96]	@ (8002bcc <HAL_RCC_OscConfig+0x604>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2203      	movs	r2, #3
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d11e      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2270      	movs	r2, #112	@ 0x70
 8002b82:	401a      	ands	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d117      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	23fe      	movs	r3, #254	@ 0xfe
 8002b90:	01db      	lsls	r3, r3, #7
 8002b92:	401a      	ands	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d10e      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	23f8      	movs	r3, #248	@ 0xf8
 8002ba2:	039b      	lsls	r3, r3, #14
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d106      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	0f5b      	lsrs	r3, r3, #29
 8002bb2:	075a      	lsls	r2, r3, #29
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b008      	add	sp, #32
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	00001388 	.word	0x00001388
 8002bd8:	efffffff 	.word	0xefffffff
 8002bdc:	feffffff 	.word	0xfeffffff
 8002be0:	1fc1808c 	.word	0x1fc1808c
 8002be4:	effefffc 	.word	0xeffefffc

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0e9      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b76      	ldr	r3, [pc, #472]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2207      	movs	r2, #7
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d91e      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b73      	ldr	r3, [pc, #460]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2207      	movs	r2, #7
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	4b70      	ldr	r3, [pc, #448]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe ff22 	bl	8001a64 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7fe ff1d 	bl	8001a64 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a6a      	ldr	r2, [pc, #424]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0ca      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c3a:	4b67      	ldr	r3, [pc, #412]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2207      	movs	r2, #7
 8002c40:	4013      	ands	r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ee      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d015      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d006      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c5c:	4b60      	ldr	r3, [pc, #384]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b5f      	ldr	r3, [pc, #380]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	21e0      	movs	r1, #224	@ 0xe0
 8002c64:	01c9      	lsls	r1, r1, #7
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002de4 <HAL_RCC_ClockConfig+0x1fc>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d057      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c90:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d12b      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e097      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	049b      	lsls	r3, r3, #18
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d11f      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e08b      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d113      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e07f      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd8:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e074      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e06d      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe feac 	bl	8001a64 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d12:	f7fe fea7 	bl	8001a64 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e054      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2238      	movs	r2, #56	@ 0x38
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ec      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d21e      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b24      	ldr	r3, [pc, #144]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d58:	f7fe fe84 	bl	8001a64 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d60:	e009      	b.n	8002d76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f7fe fe7f 	bl	8001a64 <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e02c      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d76:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8e:	4b14      	ldr	r3, [pc, #80]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4a15      	ldr	r2, [pc, #84]	@ (8002de8 <HAL_RCC_ClockConfig+0x200>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002da2:	f000 f829 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002da6:	0001      	movs	r1, r0
 8002da8:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	220f      	movs	r2, #15
 8002db0:	401a      	ands	r2, r3
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_RCC_ClockConfig+0x204>)
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	58d3      	ldr	r3, [r2, r3]
 8002db8:	221f      	movs	r2, #31
 8002dba:	4013      	ands	r3, r2
 8002dbc:	000a      	movs	r2, r1
 8002dbe:	40da      	lsrs	r2, r3
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_ClockConfig+0x208>)
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_ClockConfig+0x20c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7fe fdef 	bl	80019ac <HAL_InitTick>
 8002dce:	0003      	movs	r3, r0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	00001388 	.word	0x00001388
 8002de0:	40021000 	.word	0x40021000
 8002de4:	fffff0ff 	.word	0xfffff0ff
 8002de8:	ffff8fff 	.word	0xffff8fff
 8002dec:	0800513c 	.word	0x0800513c
 8002df0:	20000008 	.word	0x20000008
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2238      	movs	r2, #56	@ 0x38
 8002e04:	4013      	ands	r3, r2
 8002e06:	d10f      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e08:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0adb      	lsrs	r3, r3, #11
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4013      	ands	r3, r2
 8002e12:	2201      	movs	r2, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	0013      	movs	r3, r2
 8002e18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	4835      	ldr	r0, [pc, #212]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e1e:	f7fd f96f 	bl	8000100 <__udivsi3>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e05d      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2238      	movs	r2, #56	@ 0x38
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d102      	bne.n	8002e3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e34:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2238      	movs	r2, #56	@ 0x38
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d138      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e46:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e50:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	2207      	movs	r2, #7
 8002e58:	4013      	ands	r3, r2
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4823      	ldr	r0, [pc, #140]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e68:	f7fd f94a 	bl	8000100 <__udivsi3>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	227f      	movs	r2, #127	@ 0x7f
 8002e78:	4013      	ands	r3, r2
 8002e7a:	434b      	muls	r3, r1
 8002e7c:	617b      	str	r3, [r7, #20]
        break;
 8002e7e:	e00d      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	481c      	ldr	r0, [pc, #112]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e84:	f7fd f93c 	bl	8000100 <__udivsi3>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	227f      	movs	r2, #127	@ 0x7f
 8002e94:	4013      	ands	r3, r2
 8002e96:	434b      	muls	r3, r1
 8002e98:	617b      	str	r3, [r7, #20]
        break;
 8002e9a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0f5b      	lsrs	r3, r3, #29
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f7fd f927 	bl	8000100 <__udivsi3>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e015      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2238      	movs	r2, #56	@ 0x38
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d103      	bne.n	8002ecc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2238      	movs	r2, #56	@ 0x38
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b18      	cmp	r3, #24
 8002ed6:	d103      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ed8:	23fa      	movs	r3, #250	@ 0xfa
 8002eda:	01db      	lsls	r3, r3, #7
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e001      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ee4:	693b      	ldr	r3, [r7, #16]
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b006      	add	sp, #24
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	00f42400 	.word	0x00f42400

08002ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b02      	ldr	r3, [pc, #8]	@ (8002f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	20000008 	.word	0x20000008

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f10:	f7ff fff2 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 8002f14:	0004      	movs	r4, r0
 8002f16:	f7ff fb4b 	bl	80025b0 <LL_RCC_GetAPB1Prescaler>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	0b1a      	lsrs	r2, r3, #12
 8002f1e:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	58d3      	ldr	r3, [r2, r3]
 8002f24:	221f      	movs	r2, #31
 8002f26:	4013      	ands	r3, r2
 8002f28:	40dc      	lsrs	r4, r3
 8002f2a:	0023      	movs	r3, r4
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bdb0      	pop	{r4, r5, r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	0800517c 	.word	0x0800517c

08002f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e04a      	b.n	8002fe0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223d      	movs	r2, #61	@ 0x3d
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223c      	movs	r2, #60	@ 0x3c
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fe f87d 	bl	8001060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	223d      	movs	r2, #61	@ 0x3d
 8002f6a:	2102      	movs	r1, #2
 8002f6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	0019      	movs	r1, r3
 8002f78:	0010      	movs	r0, r2
 8002f7a:	f000 fe1f 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2248      	movs	r2, #72	@ 0x48
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	223e      	movs	r2, #62	@ 0x3e
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223f      	movs	r2, #63	@ 0x3f
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2240      	movs	r2, #64	@ 0x40
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2241      	movs	r2, #65	@ 0x41
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2242      	movs	r2, #66	@ 0x42
 8002faa:	2101      	movs	r1, #1
 8002fac:	5499      	strb	r1, [r3, r2]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2243      	movs	r2, #67	@ 0x43
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2244      	movs	r2, #68	@ 0x44
 8002fba:	2101      	movs	r1, #1
 8002fbc:	5499      	strb	r1, [r3, r2]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2245      	movs	r2, #69	@ 0x45
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	5499      	strb	r1, [r3, r2]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2246      	movs	r2, #70	@ 0x46
 8002fca:	2101      	movs	r1, #1
 8002fcc:	5499      	strb	r1, [r3, r2]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2247      	movs	r2, #71	@ 0x47
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223d      	movs	r2, #61	@ 0x3d
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e04a      	b.n	8003090 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223d      	movs	r2, #61	@ 0x3d
 8002ffe:	5c9b      	ldrb	r3, [r3, r2]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	223c      	movs	r2, #60	@ 0x3c
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 f841 	bl	8003098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	223d      	movs	r2, #61	@ 0x3d
 800301a:	2102      	movs	r1, #2
 800301c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	0019      	movs	r1, r3
 8003028:	0010      	movs	r0, r2
 800302a:	f000 fdc7 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2248      	movs	r2, #72	@ 0x48
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	223e      	movs	r2, #62	@ 0x3e
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	223f      	movs	r2, #63	@ 0x3f
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2240      	movs	r2, #64	@ 0x40
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2241      	movs	r2, #65	@ 0x41
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2242      	movs	r2, #66	@ 0x42
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2243      	movs	r2, #67	@ 0x43
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2244      	movs	r2, #68	@ 0x44
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2245      	movs	r2, #69	@ 0x45
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2246      	movs	r2, #70	@ 0x46
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2247      	movs	r2, #71	@ 0x47
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	223d      	movs	r2, #61	@ 0x3d
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	001a      	movs	r2, r3
 80030b6:	1cbb      	adds	r3, r7, #2
 80030b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2317      	movs	r3, #23
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d108      	bne.n	80030da <HAL_TIM_PWM_Start_DMA+0x32>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	223e      	movs	r2, #62	@ 0x3e
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3b02      	subs	r3, #2
 80030d2:	425a      	negs	r2, r3
 80030d4:	4153      	adcs	r3, r2
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e037      	b.n	800314a <HAL_TIM_PWM_Start_DMA+0xa2>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d108      	bne.n	80030f2 <HAL_TIM_PWM_Start_DMA+0x4a>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	223f      	movs	r2, #63	@ 0x3f
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	3b02      	subs	r3, #2
 80030ea:	425a      	negs	r2, r3
 80030ec:	4153      	adcs	r3, r2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	e02b      	b.n	800314a <HAL_TIM_PWM_Start_DMA+0xa2>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d108      	bne.n	800310a <HAL_TIM_PWM_Start_DMA+0x62>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	@ 0x40
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3b02      	subs	r3, #2
 8003102:	425a      	negs	r2, r3
 8003104:	4153      	adcs	r3, r2
 8003106:	b2db      	uxtb	r3, r3
 8003108:	e01f      	b.n	800314a <HAL_TIM_PWM_Start_DMA+0xa2>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d108      	bne.n	8003122 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2241      	movs	r2, #65	@ 0x41
 8003114:	5c9b      	ldrb	r3, [r3, r2]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	3b02      	subs	r3, #2
 800311a:	425a      	negs	r2, r3
 800311c:	4153      	adcs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e013      	b.n	800314a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b10      	cmp	r3, #16
 8003126:	d108      	bne.n	800313a <HAL_TIM_PWM_Start_DMA+0x92>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2242      	movs	r2, #66	@ 0x42
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3b02      	subs	r3, #2
 8003132:	425a      	negs	r2, r3
 8003134:	4153      	adcs	r3, r2
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e007      	b.n	800314a <HAL_TIM_PWM_Start_DMA+0xa2>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2243      	movs	r2, #67	@ 0x43
 800313e:	5c9b      	ldrb	r3, [r3, r2]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3b02      	subs	r3, #2
 8003144:	425a      	negs	r2, r3
 8003146:	4153      	adcs	r3, r2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	e183      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d108      	bne.n	800316a <HAL_TIM_PWM_Start_DMA+0xc2>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	223e      	movs	r2, #62	@ 0x3e
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	425a      	negs	r2, r3
 8003164:	4153      	adcs	r3, r2
 8003166:	b2db      	uxtb	r3, r3
 8003168:	e037      	b.n	80031da <HAL_TIM_PWM_Start_DMA+0x132>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d108      	bne.n	8003182 <HAL_TIM_PWM_Start_DMA+0xda>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	223f      	movs	r2, #63	@ 0x3f
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	425a      	negs	r2, r3
 800317c:	4153      	adcs	r3, r2
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e02b      	b.n	80031da <HAL_TIM_PWM_Start_DMA+0x132>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d108      	bne.n	800319a <HAL_TIM_PWM_Start_DMA+0xf2>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2240      	movs	r2, #64	@ 0x40
 800318c:	5c9b      	ldrb	r3, [r3, r2]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	425a      	negs	r2, r3
 8003194:	4153      	adcs	r3, r2
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e01f      	b.n	80031da <HAL_TIM_PWM_Start_DMA+0x132>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d108      	bne.n	80031b2 <HAL_TIM_PWM_Start_DMA+0x10a>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2241      	movs	r2, #65	@ 0x41
 80031a4:	5c9b      	ldrb	r3, [r3, r2]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	425a      	negs	r2, r3
 80031ac:	4153      	adcs	r3, r2
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e013      	b.n	80031da <HAL_TIM_PWM_Start_DMA+0x132>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d108      	bne.n	80031ca <HAL_TIM_PWM_Start_DMA+0x122>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2242      	movs	r2, #66	@ 0x42
 80031bc:	5c9b      	ldrb	r3, [r3, r2]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	425a      	negs	r2, r3
 80031c4:	4153      	adcs	r3, r2
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e007      	b.n	80031da <HAL_TIM_PWM_Start_DMA+0x132>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2243      	movs	r2, #67	@ 0x43
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	425a      	negs	r2, r3
 80031d6:	4153      	adcs	r3, r2
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d035      	beq.n	800324a <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_TIM_PWM_Start_DMA+0x144>
 80031e4:	1cbb      	adds	r3, r7, #2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e134      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <HAL_TIM_PWM_Start_DMA+0x158>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	223e      	movs	r2, #62	@ 0x3e
 80031fa:	2102      	movs	r1, #2
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	e026      	b.n	800324e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d104      	bne.n	8003210 <HAL_TIM_PWM_Start_DMA+0x168>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	223f      	movs	r2, #63	@ 0x3f
 800320a:	2102      	movs	r1, #2
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	e01e      	b.n	800324e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d104      	bne.n	8003220 <HAL_TIM_PWM_Start_DMA+0x178>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	2102      	movs	r1, #2
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	e016      	b.n	800324e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d104      	bne.n	8003230 <HAL_TIM_PWM_Start_DMA+0x188>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2241      	movs	r2, #65	@ 0x41
 800322a:	2102      	movs	r1, #2
 800322c:	5499      	strb	r1, [r3, r2]
 800322e:	e00e      	b.n	800324e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d104      	bne.n	8003240 <HAL_TIM_PWM_Start_DMA+0x198>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2242      	movs	r2, #66	@ 0x42
 800323a:	2102      	movs	r1, #2
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	e006      	b.n	800324e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2243      	movs	r2, #67	@ 0x43
 8003244:	2102      	movs	r1, #2
 8003246:	5499      	strb	r1, [r3, r2]
 8003248:	e001      	b.n	800324e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e105      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d100      	bne.n	8003256 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8003254:	e080      	b.n	8003358 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d900      	bls.n	800325e <HAL_TIM_PWM_Start_DMA+0x1b6>
 800325c:	e0a1      	b.n	80033a2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d054      	beq.n	800330e <HAL_TIM_PWM_Start_DMA+0x266>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b08      	cmp	r3, #8
 8003268:	d900      	bls.n	800326c <HAL_TIM_PWM_Start_DMA+0x1c4>
 800326a:	e09a      	b.n	80033a2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_PWM_Start_DMA+0x1d2>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d025      	beq.n	80032c4 <HAL_TIM_PWM_Start_DMA+0x21c>
 8003278:	e093      	b.n	80033a2 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	4a79      	ldr	r2, [pc, #484]	@ (8003464 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003280:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	4a78      	ldr	r2, [pc, #480]	@ (8003468 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	4a77      	ldr	r2, [pc, #476]	@ (800346c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3334      	adds	r3, #52	@ 0x34
 800329e:	001a      	movs	r2, r3
 80032a0:	1cbb      	adds	r3, r7, #2
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f7fe fd74 	bl	8001d90 <HAL_DMA_Start_IT>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0d4      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2180      	movs	r1, #128	@ 0x80
 80032bc:	0089      	lsls	r1, r1, #2
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]
      break;
 80032c2:	e073      	b.n	80033ac <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	4a66      	ldr	r2, [pc, #408]	@ (8003464 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80032ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	4a64      	ldr	r2, [pc, #400]	@ (800346c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80032da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3338      	adds	r3, #56	@ 0x38
 80032e8:	001a      	movs	r2, r3
 80032ea:	1cbb      	adds	r3, r7, #2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	f7fe fd4f 	bl	8001d90 <HAL_DMA_Start_IT>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0af      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2180      	movs	r1, #128	@ 0x80
 8003306:	00c9      	lsls	r1, r1, #3
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]
      break;
 800330c:	e04e      	b.n	80033ac <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	4a54      	ldr	r2, [pc, #336]	@ (8003464 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	4a53      	ldr	r2, [pc, #332]	@ (8003468 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800331c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	4a52      	ldr	r2, [pc, #328]	@ (800346c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003324:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	333c      	adds	r3, #60	@ 0x3c
 8003332:	001a      	movs	r2, r3
 8003334:	1cbb      	adds	r3, r7, #2
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	f7fe fd2a 	bl	8001d90 <HAL_DMA_Start_IT>
 800333c:	1e03      	subs	r3, r0, #0
 800333e:	d001      	beq.n	8003344 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e08a      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2180      	movs	r1, #128	@ 0x80
 8003350:	0109      	lsls	r1, r1, #4
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]
      break;
 8003356:	e029      	b.n	80033ac <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	4a41      	ldr	r2, [pc, #260]	@ (8003464 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800335e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	4a40      	ldr	r2, [pc, #256]	@ (8003468 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	4a3f      	ldr	r2, [pc, #252]	@ (800346c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800336e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3340      	adds	r3, #64	@ 0x40
 800337c:	001a      	movs	r2, r3
 800337e:	1cbb      	adds	r3, r7, #2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f7fe fd05 	bl	8001d90 <HAL_DMA_Start_IT>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e065      	b.n	800345a <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2180      	movs	r1, #128	@ 0x80
 800339a:	0149      	lsls	r1, r1, #5
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]
      break;
 80033a0:	e004      	b.n	80033ac <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80033a2:	2317      	movs	r3, #23
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
      break;
 80033aa:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80033ac:	2317      	movs	r3, #23
 80033ae:	18fb      	adds	r3, r7, r3
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d14e      	bne.n	8003454 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	2201      	movs	r2, #1
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 ffae 	bl	8004320 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a29      	ldr	r2, [pc, #164]	@ (8003470 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIM_PWM_Start_DMA+0x33a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a28      	ldr	r2, [pc, #160]	@ (8003474 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_PWM_Start_DMA+0x33a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_PWM_Start_DMA+0x33e>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_PWM_Start_DMA+0x340>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	0209      	lsls	r1, r1, #8
 80033fa:	430a      	orrs	r2, r1
 80033fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	@ (8003470 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_TIM_PWM_Start_DMA+0x36a>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1b      	ldr	r2, [pc, #108]	@ (800347c <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d116      	bne.n	8003440 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d016      	beq.n	8003452 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	2380      	movs	r3, #128	@ 0x80
 8003428:	025b      	lsls	r3, r3, #9
 800342a:	429a      	cmp	r2, r3
 800342c:	d011      	beq.n	8003452 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	e008      	b.n	8003452 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2101      	movs	r1, #1
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e000      	b.n	8003454 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003452:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003454:	2317      	movs	r3, #23
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	781b      	ldrb	r3, [r3, #0]
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	08003aa9 	.word	0x08003aa9
 8003468:	08003b53 	.word	0x08003b53
 800346c:	08003a15 	.word	0x08003a15
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40014400 	.word	0x40014400
 8003478:	40014800 	.word	0x40014800
 800347c:	40000400 	.word	0x40000400
 8003480:	00010007 	.word	0x00010007

08003484 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348e:	230f      	movs	r3, #15
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d039      	beq.n	8003510 <HAL_TIM_PWM_Stop_DMA+0x8c>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d844      	bhi.n	800352c <HAL_TIM_PWM_Stop_DMA+0xa8>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d025      	beq.n	80034f4 <HAL_TIM_PWM_Stop_DMA+0x70>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d83e      	bhi.n	800352c <HAL_TIM_PWM_Stop_DMA+0xa8>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_TIM_PWM_Stop_DMA+0x38>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d00e      	beq.n	80034d8 <HAL_TIM_PWM_Stop_DMA+0x54>
 80034ba:	e037      	b.n	800352c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	495a      	ldr	r1, [pc, #360]	@ (8003630 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7fe fce3 	bl	8001e9c <HAL_DMA_Abort_IT>
      break;
 80034d6:	e02e      	b.n	8003536 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4954      	ldr	r1, [pc, #336]	@ (8003634 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80034e4:	400a      	ands	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7fe fcd5 	bl	8001e9c <HAL_DMA_Abort_IT>
      break;
 80034f2:	e020      	b.n	8003536 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	494e      	ldr	r1, [pc, #312]	@ (8003638 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003500:	400a      	ands	r2, r1
 8003502:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	0018      	movs	r0, r3
 800350a:	f7fe fcc7 	bl	8001e9c <HAL_DMA_Abort_IT>
      break;
 800350e:	e012      	b.n	8003536 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4948      	ldr	r1, [pc, #288]	@ (800363c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 800351c:	400a      	ands	r2, r1
 800351e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	0018      	movs	r0, r3
 8003526:	f7fe fcb9 	bl	8001e9c <HAL_DMA_Abort_IT>
      break;
 800352a:	e004      	b.n	8003536 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 800352c:	230f      	movs	r3, #15
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
      break;
 8003534:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003536:	230f      	movs	r3, #15
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d000      	beq.n	8003542 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8003540:	e06e      	b.n	8003620 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	2200      	movs	r2, #0
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fee8 	bl	8004320 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3a      	ldr	r2, [pc, #232]	@ (8003640 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_TIM_PWM_Stop_DMA+0xea>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a39      	ldr	r2, [pc, #228]	@ (8003644 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIM_PWM_Stop_DMA+0xea>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a37      	ldr	r2, [pc, #220]	@ (8003648 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_Stop_DMA+0xee>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4a33      	ldr	r2, [pc, #204]	@ (800364c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8003580:	4013      	ands	r3, r2
 8003582:	d10d      	bne.n	80035a0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a31      	ldr	r2, [pc, #196]	@ (8003650 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800358c:	4013      	ands	r3, r2
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	492e      	ldr	r1, [pc, #184]	@ (8003654 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800359c:	400a      	ands	r2, r1
 800359e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a29      	ldr	r2, [pc, #164]	@ (800364c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	d10d      	bne.n	80035c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a27      	ldr	r2, [pc, #156]	@ (8003650 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	d107      	bne.n	80035c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2101      	movs	r1, #1
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d104      	bne.n	80035d8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	223e      	movs	r2, #62	@ 0x3e
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
 80035d6:	e023      	b.n	8003620 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d104      	bne.n	80035e8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	223f      	movs	r2, #63	@ 0x3f
 80035e2:	2101      	movs	r1, #1
 80035e4:	5499      	strb	r1, [r3, r2]
 80035e6:	e01b      	b.n	8003620 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d104      	bne.n	80035f8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]
 80035f6:	e013      	b.n	8003620 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b0c      	cmp	r3, #12
 80035fc:	d104      	bne.n	8003608 <HAL_TIM_PWM_Stop_DMA+0x184>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2241      	movs	r2, #65	@ 0x41
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	e00b      	b.n	8003620 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d104      	bne.n	8003618 <HAL_TIM_PWM_Stop_DMA+0x194>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2242      	movs	r2, #66	@ 0x42
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]
 8003616:	e003      	b.n	8003620 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2243      	movs	r2, #67	@ 0x43
 800361c:	2101      	movs	r1, #1
 800361e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003620:	230f      	movs	r3, #15
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	781b      	ldrb	r3, [r3, #0]
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	fffffdff 	.word	0xfffffdff
 8003634:	fffffbff 	.word	0xfffffbff
 8003638:	fffff7ff 	.word	0xfffff7ff
 800363c:	ffffefff 	.word	0xffffefff
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800
 800364c:	00001111 	.word	0x00001111
 8003650:	00000444 	.word	0x00000444
 8003654:	ffff7fff 	.word	0xffff7fff

08003658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2317      	movs	r3, #23
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	223c      	movs	r2, #60	@ 0x3c
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003676:	2302      	movs	r3, #2
 8003678:	e0e5      	b.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	223c      	movs	r2, #60	@ 0x3c
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b14      	cmp	r3, #20
 8003686:	d900      	bls.n	800368a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003688:	e0d1      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	009a      	lsls	r2, r3, #2
 800368e:	4b70      	ldr	r3, [pc, #448]	@ (8003850 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003690:	18d3      	adds	r3, r2, r3
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	0011      	movs	r1, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fb06 	bl	8003cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2108      	movs	r1, #8
 80036b0:	430a      	orrs	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2104      	movs	r1, #4
 80036c0:	438a      	bics	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	619a      	str	r2, [r3, #24]
      break;
 80036d6:	e0af      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	0011      	movs	r1, r2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 fb65 	bl	8003db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2180      	movs	r1, #128	@ 0x80
 80036f2:	0109      	lsls	r1, r1, #4
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4954      	ldr	r1, [pc, #336]	@ (8003854 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003704:	400a      	ands	r2, r1
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	021a      	lsls	r2, r3, #8
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	619a      	str	r2, [r3, #24]
      break;
 800371c:	e08c      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	0011      	movs	r1, r2
 8003726:	0018      	movs	r0, r3
 8003728:	f000 fbc0 	bl	8003eac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2108      	movs	r1, #8
 8003738:	430a      	orrs	r2, r1
 800373a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2104      	movs	r1, #4
 8003748:	438a      	bics	r2, r1
 800374a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69d9      	ldr	r1, [r3, #28]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	61da      	str	r2, [r3, #28]
      break;
 800375e:	e06b      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f000 fc21 	bl	8003fb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2180      	movs	r1, #128	@ 0x80
 800377a:	0109      	lsls	r1, r1, #4
 800377c:	430a      	orrs	r2, r1
 800377e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4932      	ldr	r1, [pc, #200]	@ (8003854 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800378c:	400a      	ands	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69d9      	ldr	r1, [r3, #28]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	61da      	str	r2, [r3, #28]
      break;
 80037a4:	e048      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	0011      	movs	r1, r2
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 fc62 	bl	8004078 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2108      	movs	r1, #8
 80037c0:	430a      	orrs	r2, r1
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2104      	movs	r1, #4
 80037d0:	438a      	bics	r2, r1
 80037d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037e6:	e027      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fc9b 	bl	800412c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2180      	movs	r1, #128	@ 0x80
 8003802:	0109      	lsls	r1, r1, #4
 8003804:	430a      	orrs	r2, r1
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4910      	ldr	r1, [pc, #64]	@ (8003854 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003814:	400a      	ands	r2, r1
 8003816:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	021a      	lsls	r2, r3, #8
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800382c:	e004      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800382e:	2317      	movs	r3, #23
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
      break;
 8003836:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	223c      	movs	r2, #60	@ 0x3c
 800383c:	2100      	movs	r1, #0
 800383e:	5499      	strb	r1, [r3, r2]

  return status;
 8003840:	2317      	movs	r3, #23
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	080051b0 	.word	0x080051b0
 8003854:	fffffbff 	.word	0xfffffbff

08003858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	230f      	movs	r3, #15
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	223c      	movs	r2, #60	@ 0x3c
 800386e:	5c9b      	ldrb	r3, [r3, r2]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_TIM_ConfigClockSource+0x20>
 8003874:	2302      	movs	r3, #2
 8003876:	e0bc      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x19a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	223c      	movs	r2, #60	@ 0x3c
 800387c:	2101      	movs	r1, #1
 800387e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	223d      	movs	r2, #61	@ 0x3d
 8003884:	2102      	movs	r1, #2
 8003886:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a5a      	ldr	r2, [pc, #360]	@ (80039fc <HAL_TIM_ConfigClockSource+0x1a4>)
 8003894:	4013      	ands	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4a59      	ldr	r2, [pc, #356]	@ (8003a00 <HAL_TIM_ConfigClockSource+0x1a8>)
 800389c:	4013      	ands	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2280      	movs	r2, #128	@ 0x80
 80038ae:	0192      	lsls	r2, r2, #6
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d040      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xde>
 80038b4:	2280      	movs	r2, #128	@ 0x80
 80038b6:	0192      	lsls	r2, r2, #6
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d900      	bls.n	80038be <HAL_TIM_ConfigClockSource+0x66>
 80038bc:	e088      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038be:	2280      	movs	r2, #128	@ 0x80
 80038c0:	0152      	lsls	r2, r2, #5
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d100      	bne.n	80038c8 <HAL_TIM_ConfigClockSource+0x70>
 80038c6:	e088      	b.n	80039da <HAL_TIM_ConfigClockSource+0x182>
 80038c8:	2280      	movs	r2, #128	@ 0x80
 80038ca:	0152      	lsls	r2, r2, #5
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d900      	bls.n	80038d2 <HAL_TIM_ConfigClockSource+0x7a>
 80038d0:	e07e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038d2:	2b70      	cmp	r3, #112	@ 0x70
 80038d4:	d018      	beq.n	8003908 <HAL_TIM_ConfigClockSource+0xb0>
 80038d6:	d900      	bls.n	80038da <HAL_TIM_ConfigClockSource+0x82>
 80038d8:	e07a      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038da:	2b60      	cmp	r3, #96	@ 0x60
 80038dc:	d04f      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x126>
 80038de:	d900      	bls.n	80038e2 <HAL_TIM_ConfigClockSource+0x8a>
 80038e0:	e076      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038e2:	2b50      	cmp	r3, #80	@ 0x50
 80038e4:	d03b      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x106>
 80038e6:	d900      	bls.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
 80038e8:	e072      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038ea:	2b40      	cmp	r3, #64	@ 0x40
 80038ec:	d057      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x146>
 80038ee:	d900      	bls.n	80038f2 <HAL_TIM_ConfigClockSource+0x9a>
 80038f0:	e06e      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038f2:	2b30      	cmp	r3, #48	@ 0x30
 80038f4:	d063      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x166>
 80038f6:	d86b      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d060      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x166>
 80038fc:	d868      	bhi.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d05d      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x166>
 8003902:	2b10      	cmp	r3, #16
 8003904:	d05b      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x166>
 8003906:	e063      	b.n	80039d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003918:	f000 fce2 	bl	80042e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2277      	movs	r2, #119	@ 0x77
 8003928:	4313      	orrs	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]
      break;
 8003934:	e052      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003946:	f000 fccb 	bl	80042e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2180      	movs	r1, #128	@ 0x80
 8003956:	01c9      	lsls	r1, r1, #7
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
      break;
 800395c:	e03e      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	001a      	movs	r2, r3
 800396c:	f000 fc3c 	bl	80041e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2150      	movs	r1, #80	@ 0x50
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fc96 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 800397c:	e02e      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	001a      	movs	r2, r3
 800398c:	f000 fc5a 	bl	8004244 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2160      	movs	r1, #96	@ 0x60
 8003996:	0018      	movs	r0, r3
 8003998:	f000 fc86 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 800399c:	e01e      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	001a      	movs	r2, r3
 80039ac:	f000 fc1c 	bl	80041e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	0018      	movs	r0, r3
 80039b8:	f000 fc76 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 80039bc:	e00e      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0019      	movs	r1, r3
 80039c8:	0010      	movs	r0, r2
 80039ca:	f000 fc6d 	bl	80042a8 <TIM_ITRx_SetConfig>
      break;
 80039ce:	e005      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039d0:	230f      	movs	r3, #15
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
      break;
 80039d8:	e000      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039da:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	223d      	movs	r2, #61	@ 0x3d
 80039e0:	2101      	movs	r1, #1
 80039e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	223c      	movs	r2, #60	@ 0x3c
 80039e8:	2100      	movs	r1, #0
 80039ea:	5499      	strb	r1, [r3, r2]

  return status;
 80039ec:	230f      	movs	r3, #15
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	781b      	ldrb	r3, [r3, #0]
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			@ (mov r8, r8)
 80039fc:	ffceff88 	.word	0xffceff88
 8003a00:	ffff00ff 	.word	0xffff00ff

08003a04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a20:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d107      	bne.n	8003a3c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	223e      	movs	r2, #62	@ 0x3e
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]
 8003a3a:	e02a      	b.n	8003a92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d107      	bne.n	8003a56 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	223f      	movs	r2, #63	@ 0x3f
 8003a50:	2101      	movs	r1, #1
 8003a52:	5499      	strb	r1, [r3, r2]
 8003a54:	e01d      	b.n	8003a92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d107      	bne.n	8003a70 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2204      	movs	r2, #4
 8003a64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2240      	movs	r2, #64	@ 0x40
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	5499      	strb	r1, [r3, r2]
 8003a6e:	e010      	b.n	8003a92 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d107      	bne.n	8003a8a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2241      	movs	r2, #65	@ 0x41
 8003a84:	2101      	movs	r1, #1
 8003a86:	5499      	strb	r1, [r3, r2]
 8003a88:	e003      	b.n	8003a92 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	223d      	movs	r2, #61	@ 0x3d
 8003a8e:	2101      	movs	r1, #1
 8003a90:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff ffb5 	bl	8003a04 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	771a      	strb	r2, [r3, #28]
}
 8003aa0:	46c0      	nop			@ (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d10b      	bne.n	8003ad8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d136      	bne.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	223e      	movs	r2, #62	@ 0x3e
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]
 8003ad6:	e031      	b.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d10b      	bne.n	8003afa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d125      	bne.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	223f      	movs	r2, #63	@ 0x3f
 8003af4:	2101      	movs	r1, #1
 8003af6:	5499      	strb	r1, [r3, r2]
 8003af8:	e020      	b.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d10b      	bne.n	8003b1c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2204      	movs	r2, #4
 8003b08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d114      	bne.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2240      	movs	r2, #64	@ 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	5499      	strb	r1, [r3, r2]
 8003b1a:	e00f      	b.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d10a      	bne.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2241      	movs	r2, #65	@ 0x41
 8003b38:	2101      	movs	r1, #1
 8003b3a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7fc fcf0 	bl	8000524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	771a      	strb	r2, [r3, #28]
}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d103      	bne.n	8003b72 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]
 8003b70:	e019      	b.n	8003ba6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d103      	bne.n	8003b84 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	771a      	strb	r2, [r3, #28]
 8003b82:	e010      	b.n	8003ba6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d103      	bne.n	8003b96 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
 8003b94:	e007      	b.n	8003ba6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d102      	bne.n	8003ba6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fc fcad 	bl	8000508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a32      	ldr	r2, [pc, #200]	@ (8003c98 <TIM_Base_SetConfig+0xdc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_Base_SetConfig+0x20>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a31      	ldr	r2, [pc, #196]	@ (8003c9c <TIM_Base_SetConfig+0xe0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2270      	movs	r2, #112	@ 0x70
 8003be0:	4393      	bics	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a29      	ldr	r2, [pc, #164]	@ (8003c98 <TIM_Base_SetConfig+0xdc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00f      	beq.n	8003c16 <TIM_Base_SetConfig+0x5a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <TIM_Base_SetConfig+0xe0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <TIM_Base_SetConfig+0x5a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a27      	ldr	r2, [pc, #156]	@ (8003ca0 <TIM_Base_SetConfig+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <TIM_Base_SetConfig+0x5a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a26      	ldr	r2, [pc, #152]	@ (8003ca4 <TIM_Base_SetConfig+0xe8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_Base_SetConfig+0x5a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a25      	ldr	r2, [pc, #148]	@ (8003ca8 <TIM_Base_SetConfig+0xec>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d108      	bne.n	8003c28 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a24      	ldr	r2, [pc, #144]	@ (8003cac <TIM_Base_SetConfig+0xf0>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2280      	movs	r2, #128	@ 0x80
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	001a      	movs	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a11      	ldr	r2, [pc, #68]	@ (8003c98 <TIM_Base_SetConfig+0xdc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <TIM_Base_SetConfig+0xaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a12      	ldr	r2, [pc, #72]	@ (8003ca4 <TIM_Base_SetConfig+0xe8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <TIM_Base_SetConfig+0xaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a11      	ldr	r2, [pc, #68]	@ (8003ca8 <TIM_Base_SetConfig+0xec>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d103      	bne.n	8003c6e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4393      	bics	r3, r2
 8003c88:	001a      	movs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]
  }
}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b004      	add	sp, #16
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40002000 	.word	0x40002000
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800
 8003cac:	fffffcff 	.word	0xfffffcff

08003cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4393      	bics	r3, r2
 8003cc8:	001a      	movs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <TIM_OC1_SetConfig+0xe8>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	4393      	bics	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a24      	ldr	r2, [pc, #144]	@ (8003d9c <TIM_OC1_SetConfig+0xec>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_OC1_SetConfig+0x6e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <TIM_OC1_SetConfig+0xf0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_OC1_SetConfig+0x6e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a22      	ldr	r2, [pc, #136]	@ (8003da4 <TIM_OC1_SetConfig+0xf4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10c      	bne.n	8003d38 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2208      	movs	r2, #8
 8003d22:	4393      	bics	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2204      	movs	r2, #4
 8003d34:	4393      	bics	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <TIM_OC1_SetConfig+0xec>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC1_SetConfig+0xa0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <TIM_OC1_SetConfig+0xf0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC1_SetConfig+0xa0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a16      	ldr	r2, [pc, #88]	@ (8003da4 <TIM_OC1_SetConfig+0xf4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4a15      	ldr	r2, [pc, #84]	@ (8003da8 <TIM_OC1_SetConfig+0xf8>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4a14      	ldr	r2, [pc, #80]	@ (8003dac <TIM_OC1_SetConfig+0xfc>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b006      	add	sp, #24
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	fffeff8f 	.word	0xfffeff8f
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40014400 	.word	0x40014400
 8003da4:	40014800 	.word	0x40014800
 8003da8:	fffffeff 	.word	0xfffffeff
 8003dac:	fffffdff 	.word	0xfffffdff

08003db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	001a      	movs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8003e90 <TIM_OC2_SetConfig+0xe0>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e94 <TIM_OC2_SetConfig+0xe4>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	4393      	bics	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <TIM_OC2_SetConfig+0xe8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10d      	bne.n	8003e2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2280      	movs	r2, #128	@ 0x80
 8003e16:	4393      	bics	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2240      	movs	r2, #64	@ 0x40
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <TIM_OC2_SetConfig+0xe8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_OC2_SetConfig+0x96>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <TIM_OC2_SetConfig+0xec>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_OC2_SetConfig+0x96>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <TIM_OC2_SetConfig+0xf0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d113      	bne.n	8003e6e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <TIM_OC2_SetConfig+0xf4>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <TIM_OC2_SetConfig+0xf8>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b006      	add	sp, #24
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	feff8fff 	.word	0xfeff8fff
 8003e94:	fffffcff 	.word	0xfffffcff
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800
 8003ea4:	fffffbff 	.word	0xfffffbff
 8003ea8:	fffff7ff 	.word	0xfffff7ff

08003eac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4a31      	ldr	r2, [pc, #196]	@ (8003f88 <TIM_OC3_SetConfig+0xdc>)
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f8c <TIM_OC3_SetConfig+0xe0>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	@ (8003f90 <TIM_OC3_SetConfig+0xe4>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a23      	ldr	r2, [pc, #140]	@ (8003f94 <TIM_OC3_SetConfig+0xe8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10d      	bne.n	8003f26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	4a22      	ldr	r2, [pc, #136]	@ (8003f98 <TIM_OC3_SetConfig+0xec>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	4a1e      	ldr	r2, [pc, #120]	@ (8003f9c <TIM_OC3_SetConfig+0xf0>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <TIM_OC3_SetConfig+0xe8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <TIM_OC3_SetConfig+0x92>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <TIM_OC3_SetConfig+0xf4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_OC3_SetConfig+0x92>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa4 <TIM_OC3_SetConfig+0xf8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d113      	bne.n	8003f66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <TIM_OC3_SetConfig+0xfc>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <TIM_OC3_SetConfig+0x100>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	621a      	str	r2, [r3, #32]
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b006      	add	sp, #24
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	fffffeff 	.word	0xfffffeff
 8003f8c:	fffeff8f 	.word	0xfffeff8f
 8003f90:	fffffdff 	.word	0xfffffdff
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	fffff7ff 	.word	0xfffff7ff
 8003f9c:	fffffbff 	.word	0xfffffbff
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	ffffefff 	.word	0xffffefff
 8003fac:	ffffdfff 	.word	0xffffdfff

08003fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4a24      	ldr	r2, [pc, #144]	@ (8004058 <TIM_OC4_SetConfig+0xa8>)
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a20      	ldr	r2, [pc, #128]	@ (800405c <TIM_OC4_SetConfig+0xac>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8004060 <TIM_OC4_SetConfig+0xb0>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <TIM_OC4_SetConfig+0xb4>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	031b      	lsls	r3, r3, #12
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a17      	ldr	r2, [pc, #92]	@ (8004068 <TIM_OC4_SetConfig+0xb8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_OC4_SetConfig+0x70>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a16      	ldr	r2, [pc, #88]	@ (800406c <TIM_OC4_SetConfig+0xbc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC4_SetConfig+0x70>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <TIM_OC4_SetConfig+0xc0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d109      	bne.n	8004034 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4a14      	ldr	r2, [pc, #80]	@ (8004074 <TIM_OC4_SetConfig+0xc4>)
 8004024:	4013      	ands	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	019b      	lsls	r3, r3, #6
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b006      	add	sp, #24
 8004054:	bd80      	pop	{r7, pc}
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	ffffefff 	.word	0xffffefff
 800405c:	feff8fff 	.word	0xfeff8fff
 8004060:	fffffcff 	.word	0xfffffcff
 8004064:	ffffdfff 	.word	0xffffdfff
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	ffffbfff 	.word	0xffffbfff

08004078 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a21      	ldr	r2, [pc, #132]	@ (8004114 <TIM_OC5_SetConfig+0x9c>)
 800408e:	401a      	ands	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <TIM_OC5_SetConfig+0xa0>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <TIM_OC5_SetConfig+0xa4>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <TIM_OC5_SetConfig+0xa8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_OC5_SetConfig+0x66>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <TIM_OC5_SetConfig+0xac>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_OC5_SetConfig+0x66>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a13      	ldr	r2, [pc, #76]	@ (8004128 <TIM_OC5_SetConfig+0xb0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d109      	bne.n	80040f2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004114 <TIM_OC5_SetConfig+0x9c>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	021b      	lsls	r3, r3, #8
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	46c0      	nop			@ (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b006      	add	sp, #24
 8004112:	bd80      	pop	{r7, pc}
 8004114:	fffeffff 	.word	0xfffeffff
 8004118:	fffeff8f 	.word	0xfffeff8f
 800411c:	fffdffff 	.word	0xfffdffff
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800

0800412c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a22      	ldr	r2, [pc, #136]	@ (80041cc <TIM_OC6_SetConfig+0xa0>)
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <TIM_OC6_SetConfig+0xa4>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4a1a      	ldr	r2, [pc, #104]	@ (80041d4 <TIM_OC6_SetConfig+0xa8>)
 800416c:	4013      	ands	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	051b      	lsls	r3, r3, #20
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <TIM_OC6_SetConfig+0xac>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_OC6_SetConfig+0x68>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a15      	ldr	r2, [pc, #84]	@ (80041dc <TIM_OC6_SetConfig+0xb0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_OC6_SetConfig+0x68>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <TIM_OC6_SetConfig+0xb4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d109      	bne.n	80041a8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <TIM_OC6_SetConfig+0xb8>)
 8004198:	4013      	ands	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	029b      	lsls	r3, r3, #10
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b006      	add	sp, #24
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	ffefffff 	.word	0xffefffff
 80041d0:	feff8fff 	.word	0xfeff8fff
 80041d4:	ffdfffff 	.word	0xffdfffff
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40014400 	.word	0x40014400
 80041e0:	40014800 	.word	0x40014800
 80041e4:	fffbffff 	.word	0xfffbffff

080041e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2201      	movs	r2, #1
 8004200:	4393      	bics	r3, r2
 8004202:	001a      	movs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	22f0      	movs	r2, #240	@ 0xf0
 8004212:	4393      	bics	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	220a      	movs	r2, #10
 8004224:	4393      	bics	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bd80      	pop	{r7, pc}

08004244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	2210      	movs	r2, #16
 800425c:	4393      	bics	r3, r2
 800425e:	001a      	movs	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4a0d      	ldr	r2, [pc, #52]	@ (80042a4 <TIM_TI2_ConfigInputStage+0x60>)
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	22a0      	movs	r2, #160	@ 0xa0
 8004280:	4393      	bics	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	46c0      	nop			@ (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	ffff0fff 	.word	0xffff0fff

080042a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a08      	ldr	r2, [pc, #32]	@ (80042dc <TIM_ITRx_SetConfig+0x34>)
 80042bc:	4013      	ands	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	2207      	movs	r2, #7
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b004      	add	sp, #16
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	ffcfff8f 	.word	0xffcfff8f

080042e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4a09      	ldr	r2, [pc, #36]	@ (800431c <TIM_ETR_SetConfig+0x3c>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	431a      	orrs	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b006      	add	sp, #24
 800431a:	bd80      	pop	{r7, pc}
 800431c:	ffff00ff 	.word	0xffff00ff

08004320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	221f      	movs	r2, #31
 8004330:	4013      	ands	r3, r2
 8004332:	2201      	movs	r2, #1
 8004334:	409a      	lsls	r2, r3
 8004336:	0013      	movs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	43d2      	mvns	r2, r2
 8004342:	401a      	ands	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	211f      	movs	r1, #31
 8004350:	400b      	ands	r3, r1
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4099      	lsls	r1, r3
 8004356:	000b      	movs	r3, r1
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b006      	add	sp, #24
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	223c      	movs	r2, #60	@ 0x3c
 8004376:	5c9b      	ldrb	r3, [r3, r2]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e04a      	b.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	223c      	movs	r2, #60	@ 0x3c
 8004384:	2101      	movs	r1, #1
 8004386:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	223d      	movs	r2, #61	@ 0x3d
 800438c:	2102      	movs	r1, #2
 800438e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2270      	movs	r2, #112	@ 0x70
 80043c0:	4393      	bics	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a11      	ldr	r2, [pc, #68]	@ (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a10      	ldr	r2, [pc, #64]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10c      	bne.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2280      	movs	r2, #128	@ 0x80
 80043ee:	4393      	bics	r3, r2
 80043f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	223d      	movs	r2, #61	@ 0x3d
 8004408:	2101      	movs	r1, #1
 800440a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223c      	movs	r2, #60	@ 0x3c
 8004410:	2100      	movs	r1, #0
 8004412:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	40012c00 	.word	0x40012c00
 8004424:	ff0fffff 	.word	0xff0fffff
 8004428:	40000400 	.word	0x40000400

0800442c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e046      	b.n	80044cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2288      	movs	r2, #136	@ 0x88
 8004442:	589b      	ldr	r3, [r3, r2]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2284      	movs	r2, #132	@ 0x84
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0018      	movs	r0, r3
 8004454:	f7fc fe8c 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2288      	movs	r2, #136	@ 0x88
 800445c:	2124      	movs	r1, #36	@ 0x24
 800445e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	438a      	bics	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f000 fa10 	bl	80048a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	0018      	movs	r0, r3
 8004484:	f000 f8a2 	bl	80045cc <UART_SetConfig>
 8004488:	0003      	movs	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e01c      	b.n	80044cc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	490d      	ldr	r1, [pc, #52]	@ (80044d4 <HAL_UART_Init+0xa8>)
 800449e:	400a      	ands	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	212a      	movs	r1, #42	@ 0x2a
 80044ae:	438a      	bics	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 fa9f 	bl	8004a08 <UART_CheckIdleState>
 80044ca:	0003      	movs	r3, r0
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b002      	add	sp, #8
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	ffffb7ff 	.word	0xffffb7ff

080044d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	1dbb      	adds	r3, r7, #6
 80044e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	228c      	movs	r2, #140	@ 0x8c
 80044ea:	589b      	ldr	r3, [r3, r2]
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d145      	bne.n	800457c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_UART_Receive_DMA+0x26>
 80044f6:	1dbb      	adds	r3, r7, #6
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03d      	b.n	800457e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	2380      	movs	r3, #128	@ 0x80
 8004508:	015b      	lsls	r3, r3, #5
 800450a:	429a      	cmp	r2, r3
 800450c:	d109      	bne.n	8004522 <HAL_UART_Receive_DMA+0x4a>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
 800451c:	d001      	beq.n	8004522 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e02d      	b.n	800457e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	4013      	ands	r3, r2
 8004534:	d019      	beq.n	800456a <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004536:	f3ef 8310 	mrs	r3, PRIMASK
 800453a:	613b      	str	r3, [r7, #16]
  return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2180      	movs	r1, #128	@ 0x80
 8004558:	04c9      	lsls	r1, r1, #19
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f383 8810 	msr	PRIMASK, r3
}
 8004568:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800456a:	1dbb      	adds	r3, r7, #6
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0018      	movs	r0, r3
 8004574:	f000 fb62 	bl	8004c3c <UART_Start_Receive_DMA>
 8004578:	0003      	movs	r3, r0
 800457a:	e000      	b.n	800457e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b008      	add	sp, #32
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b002      	add	sp, #8
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b002      	add	sp, #8
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	000a      	movs	r2, r1
 80045c0:	1cbb      	adds	r3, r7, #2
 80045c2:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045c4:	46c0      	nop			@ (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045d4:	231a      	movs	r3, #26
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4aa1      	ldr	r2, [pc, #644]	@ (8004880 <UART_SetConfig+0x2b4>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a9c      	ldr	r2, [pc, #624]	@ (8004884 <UART_SetConfig+0x2b8>)
 8004612:	4013      	ands	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	4313      	orrs	r3, r2
 8004630:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a93      	ldr	r2, [pc, #588]	@ (8004888 <UART_SetConfig+0x2bc>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	220f      	movs	r2, #15
 8004650:	4393      	bics	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a89      	ldr	r2, [pc, #548]	@ (800488c <UART_SetConfig+0x2c0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d127      	bne.n	80046ba <UART_SetConfig+0xee>
 800466a:	4b89      	ldr	r3, [pc, #548]	@ (8004890 <UART_SetConfig+0x2c4>)
 800466c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466e:	2203      	movs	r2, #3
 8004670:	4013      	ands	r3, r2
 8004672:	2b03      	cmp	r3, #3
 8004674:	d017      	beq.n	80046a6 <UART_SetConfig+0xda>
 8004676:	d81b      	bhi.n	80046b0 <UART_SetConfig+0xe4>
 8004678:	2b02      	cmp	r3, #2
 800467a:	d00a      	beq.n	8004692 <UART_SetConfig+0xc6>
 800467c:	d818      	bhi.n	80046b0 <UART_SetConfig+0xe4>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <UART_SetConfig+0xbc>
 8004682:	2b01      	cmp	r3, #1
 8004684:	d00a      	beq.n	800469c <UART_SetConfig+0xd0>
 8004686:	e013      	b.n	80046b0 <UART_SetConfig+0xe4>
 8004688:	231b      	movs	r3, #27
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e021      	b.n	80046d6 <UART_SetConfig+0x10a>
 8004692:	231b      	movs	r3, #27
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e01c      	b.n	80046d6 <UART_SetConfig+0x10a>
 800469c:	231b      	movs	r3, #27
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2204      	movs	r2, #4
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e017      	b.n	80046d6 <UART_SetConfig+0x10a>
 80046a6:	231b      	movs	r3, #27
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2208      	movs	r2, #8
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e012      	b.n	80046d6 <UART_SetConfig+0x10a>
 80046b0:	231b      	movs	r3, #27
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2210      	movs	r2, #16
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0x10a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a75      	ldr	r2, [pc, #468]	@ (8004894 <UART_SetConfig+0x2c8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d104      	bne.n	80046ce <UART_SetConfig+0x102>
 80046c4:	231b      	movs	r3, #27
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	e003      	b.n	80046d6 <UART_SetConfig+0x10a>
 80046ce:	231b      	movs	r3, #27
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	2210      	movs	r2, #16
 80046d4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	429a      	cmp	r2, r3
 80046e0:	d000      	beq.n	80046e4 <UART_SetConfig+0x118>
 80046e2:	e065      	b.n	80047b0 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80046e4:	231b      	movs	r3, #27
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d015      	beq.n	800471a <UART_SetConfig+0x14e>
 80046ee:	dc18      	bgt.n	8004722 <UART_SetConfig+0x156>
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d00d      	beq.n	8004710 <UART_SetConfig+0x144>
 80046f4:	dc15      	bgt.n	8004722 <UART_SetConfig+0x156>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <UART_SetConfig+0x134>
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d005      	beq.n	800470a <UART_SetConfig+0x13e>
 80046fe:	e010      	b.n	8004722 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7fe fc04 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8004704:	0003      	movs	r3, r0
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e012      	b.n	8004730 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800470a:	4b63      	ldr	r3, [pc, #396]	@ (8004898 <UART_SetConfig+0x2cc>)
 800470c:	617b      	str	r3, [r7, #20]
        break;
 800470e:	e00f      	b.n	8004730 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004710:	f7fe fb72 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8004714:	0003      	movs	r3, r0
 8004716:	617b      	str	r3, [r7, #20]
        break;
 8004718:	e00a      	b.n	8004730 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	617b      	str	r3, [r7, #20]
        break;
 8004720:	e006      	b.n	8004730 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004726:	231a      	movs	r3, #26
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
        break;
 800472e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d100      	bne.n	8004738 <UART_SetConfig+0x16c>
 8004736:	e08d      	b.n	8004854 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800473c:	4b57      	ldr	r3, [pc, #348]	@ (800489c <UART_SetConfig+0x2d0>)
 800473e:	0052      	lsls	r2, r2, #1
 8004740:	5ad3      	ldrh	r3, [r2, r3]
 8004742:	0019      	movs	r1, r3
 8004744:	6978      	ldr	r0, [r7, #20]
 8004746:	f7fb fcdb 	bl	8000100 <__udivsi3>
 800474a:	0003      	movs	r3, r0
 800474c:	005a      	lsls	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	18d2      	adds	r2, r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	0019      	movs	r1, r3
 800475c:	0010      	movs	r0, r2
 800475e:	f7fb fccf 	bl	8000100 <__udivsi3>
 8004762:	0003      	movs	r3, r0
 8004764:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d91c      	bls.n	80047a6 <UART_SetConfig+0x1da>
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	2380      	movs	r3, #128	@ 0x80
 8004770:	025b      	lsls	r3, r3, #9
 8004772:	429a      	cmp	r2, r3
 8004774:	d217      	bcs.n	80047a6 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	b29a      	uxth	r2, r3
 800477a:	200e      	movs	r0, #14
 800477c:	183b      	adds	r3, r7, r0
 800477e:	210f      	movs	r1, #15
 8004780:	438a      	bics	r2, r1
 8004782:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	2207      	movs	r2, #7
 800478c:	4013      	ands	r3, r2
 800478e:	b299      	uxth	r1, r3
 8004790:	183b      	adds	r3, r7, r0
 8004792:	183a      	adds	r2, r7, r0
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	183a      	adds	r2, r7, r0
 80047a0:	8812      	ldrh	r2, [r2, #0]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e056      	b.n	8004854 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80047a6:	231a      	movs	r3, #26
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e051      	b.n	8004854 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047b0:	231b      	movs	r3, #27
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d015      	beq.n	80047e6 <UART_SetConfig+0x21a>
 80047ba:	dc18      	bgt.n	80047ee <UART_SetConfig+0x222>
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d00d      	beq.n	80047dc <UART_SetConfig+0x210>
 80047c0:	dc15      	bgt.n	80047ee <UART_SetConfig+0x222>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <UART_SetConfig+0x200>
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d005      	beq.n	80047d6 <UART_SetConfig+0x20a>
 80047ca:	e010      	b.n	80047ee <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fb9e 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 80047d0:	0003      	movs	r3, r0
 80047d2:	617b      	str	r3, [r7, #20]
        break;
 80047d4:	e012      	b.n	80047fc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d6:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <UART_SetConfig+0x2cc>)
 80047d8:	617b      	str	r3, [r7, #20]
        break;
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047dc:	f7fe fb0c 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80047e0:	0003      	movs	r3, r0
 80047e2:	617b      	str	r3, [r7, #20]
        break;
 80047e4:	e00a      	b.n	80047fc <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	617b      	str	r3, [r7, #20]
        break;
 80047ec:	e006      	b.n	80047fc <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047f2:	231a      	movs	r3, #26
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
        break;
 80047fa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d028      	beq.n	8004854 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004806:	4b25      	ldr	r3, [pc, #148]	@ (800489c <UART_SetConfig+0x2d0>)
 8004808:	0052      	lsls	r2, r2, #1
 800480a:	5ad3      	ldrh	r3, [r2, r3]
 800480c:	0019      	movs	r1, r3
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f7fb fc76 	bl	8000100 <__udivsi3>
 8004814:	0003      	movs	r3, r0
 8004816:	001a      	movs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	085b      	lsrs	r3, r3, #1
 800481e:	18d2      	adds	r2, r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0019      	movs	r1, r3
 8004826:	0010      	movs	r0, r2
 8004828:	f7fb fc6a 	bl	8000100 <__udivsi3>
 800482c:	0003      	movs	r3, r0
 800482e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	d90a      	bls.n	800484c <UART_SetConfig+0x280>
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	025b      	lsls	r3, r3, #9
 800483c:	429a      	cmp	r2, r3
 800483e:	d205      	bcs.n	800484c <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	e003      	b.n	8004854 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800484c:	231a      	movs	r3, #26
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	226a      	movs	r2, #106	@ 0x6a
 8004858:	2101      	movs	r1, #1
 800485a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2268      	movs	r2, #104	@ 0x68
 8004860:	2101      	movs	r1, #1
 8004862:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004870:	231a      	movs	r3, #26
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	781b      	ldrb	r3, [r3, #0]
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b008      	add	sp, #32
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	cfff69f3 	.word	0xcfff69f3
 8004884:	ffffcfff 	.word	0xffffcfff
 8004888:	11fff4ff 	.word	0x11fff4ff
 800488c:	40013800 	.word	0x40013800
 8004890:	40021000 	.word	0x40021000
 8004894:	40004400 	.word	0x40004400
 8004898:	00f42400 	.word	0x00f42400
 800489c:	08005204 	.word	0x08005204

080048a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ac:	2208      	movs	r2, #8
 80048ae:	4013      	ands	r3, r2
 80048b0:	d00b      	beq.n	80048ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a4a      	ldr	r2, [pc, #296]	@ (80049e4 <UART_AdvFeatureConfig+0x144>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	2201      	movs	r2, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d00b      	beq.n	80048ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	4a43      	ldr	r2, [pc, #268]	@ (80049e8 <UART_AdvFeatureConfig+0x148>)
 80048dc:	4013      	ands	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	2202      	movs	r2, #2
 80048f2:	4013      	ands	r3, r2
 80048f4:	d00b      	beq.n	800490e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a3b      	ldr	r2, [pc, #236]	@ (80049ec <UART_AdvFeatureConfig+0x14c>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	2204      	movs	r2, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d00b      	beq.n	8004930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4a34      	ldr	r2, [pc, #208]	@ (80049f0 <UART_AdvFeatureConfig+0x150>)
 8004920:	4013      	ands	r3, r2
 8004922:	0019      	movs	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004934:	2210      	movs	r2, #16
 8004936:	4013      	ands	r3, r2
 8004938:	d00b      	beq.n	8004952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a2c      	ldr	r2, [pc, #176]	@ (80049f4 <UART_AdvFeatureConfig+0x154>)
 8004942:	4013      	ands	r3, r2
 8004944:	0019      	movs	r1, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	2220      	movs	r2, #32
 8004958:	4013      	ands	r3, r2
 800495a:	d00b      	beq.n	8004974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4a25      	ldr	r2, [pc, #148]	@ (80049f8 <UART_AdvFeatureConfig+0x158>)
 8004964:	4013      	ands	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	2240      	movs	r2, #64	@ 0x40
 800497a:	4013      	ands	r3, r2
 800497c:	d01d      	beq.n	80049ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <UART_AdvFeatureConfig+0x15c>)
 8004986:	4013      	ands	r3, r2
 8004988:	0019      	movs	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499a:	2380      	movs	r3, #128	@ 0x80
 800499c:	035b      	lsls	r3, r3, #13
 800499e:	429a      	cmp	r2, r3
 80049a0:	d10b      	bne.n	80049ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <UART_AdvFeatureConfig+0x160>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	0019      	movs	r1, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	4013      	ands	r3, r2
 80049c2:	d00b      	beq.n	80049dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004a04 <UART_AdvFeatureConfig+0x164>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }
}
 80049dc:	46c0      	nop			@ (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b002      	add	sp, #8
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	ffff7fff 	.word	0xffff7fff
 80049e8:	fffdffff 	.word	0xfffdffff
 80049ec:	fffeffff 	.word	0xfffeffff
 80049f0:	fffbffff 	.word	0xfffbffff
 80049f4:	ffffefff 	.word	0xffffefff
 80049f8:	ffffdfff 	.word	0xffffdfff
 80049fc:	ffefffff 	.word	0xffefffff
 8004a00:	ff9fffff 	.word	0xff9fffff
 8004a04:	fff7ffff 	.word	0xfff7ffff

08004a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b092      	sub	sp, #72	@ 0x48
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2290      	movs	r2, #144	@ 0x90
 8004a14:	2100      	movs	r1, #0
 8004a16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a18:	f7fd f824 	bl	8001a64 <HAL_GetTick>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2208      	movs	r2, #8
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d12d      	bne.n	8004a8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a30:	2280      	movs	r2, #128	@ 0x80
 8004a32:	0391      	lsls	r1, r2, #14
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4a47      	ldr	r2, [pc, #284]	@ (8004b54 <UART_CheckIdleState+0x14c>)
 8004a38:	9200      	str	r2, [sp, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f000 f88e 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d022      	beq.n	8004a8a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a44:	f3ef 8310 	mrs	r3, PRIMASK
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a4e:	2301      	movs	r3, #1
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a54:	f383 8810 	msr	PRIMASK, r3
}
 8004a58:	46c0      	nop			@ (mov r8, r8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2180      	movs	r1, #128	@ 0x80
 8004a66:	438a      	bics	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	f383 8810 	msr	PRIMASK, r3
}
 8004a74:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2288      	movs	r2, #136	@ 0x88
 8004a7a:	2120      	movs	r1, #32
 8004a7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2284      	movs	r2, #132	@ 0x84
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e060      	b.n	8004b4c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2204      	movs	r2, #4
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d146      	bne.n	8004b26 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a9a:	2280      	movs	r2, #128	@ 0x80
 8004a9c:	03d1      	lsls	r1, r2, #15
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b54 <UART_CheckIdleState+0x14c>)
 8004aa2:	9200      	str	r2, [sp, #0]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f000 f859 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d03b      	beq.n	8004b26 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aae:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ab8:	2301      	movs	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4922      	ldr	r1, [pc, #136]	@ (8004b58 <UART_CheckIdleState+0x150>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aea:	2301      	movs	r3, #1
 8004aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f383 8810 	msr	PRIMASK, r3
}
 8004af4:	46c0      	nop			@ (mov r8, r8)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2101      	movs	r1, #1
 8004b02:	438a      	bics	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	f383 8810 	msr	PRIMASK, r3
}
 8004b10:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	228c      	movs	r2, #140	@ 0x8c
 8004b16:	2120      	movs	r1, #32
 8004b18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2284      	movs	r2, #132	@ 0x84
 8004b1e:	2100      	movs	r1, #0
 8004b20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e012      	b.n	8004b4c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2288      	movs	r2, #136	@ 0x88
 8004b2a:	2120      	movs	r1, #32
 8004b2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	228c      	movs	r2, #140	@ 0x8c
 8004b32:	2120      	movs	r1, #32
 8004b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2284      	movs	r2, #132	@ 0x84
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b010      	add	sp, #64	@ 0x40
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	01ffffff 	.word	0x01ffffff
 8004b58:	fffffedf 	.word	0xfffffedf

08004b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	e051      	b.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	3301      	adds	r3, #1
 8004b72:	d04e      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b74:	f7fc ff76 	bl	8001a64 <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e051      	b.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2204      	movs	r2, #4
 8004b96:	4013      	ands	r3, r2
 8004b98:	d03b      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b80      	cmp	r3, #128	@ 0x80
 8004b9e:	d038      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b40      	cmp	r3, #64	@ 0x40
 8004ba4:	d035      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2208      	movs	r2, #8
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d111      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 f922 	bl	8004e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2290      	movs	r2, #144	@ 0x90
 8004bc8:	2108      	movs	r1, #8
 8004bca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2284      	movs	r2, #132	@ 0x84
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e02c      	b.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69da      	ldr	r2, [r3, #28]
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	401a      	ands	r2, r3
 8004be4:	2380      	movs	r3, #128	@ 0x80
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d112      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2280      	movs	r2, #128	@ 0x80
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 f905 	bl	8004e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2290      	movs	r2, #144	@ 0x90
 8004c02:	2120      	movs	r1, #32
 8004c04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2284      	movs	r2, #132	@ 0x84
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e00f      	b.n	8004c32 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	425a      	negs	r2, r3
 8004c22:	4153      	adcs	r3, r2
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	001a      	movs	r2, r3
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d09e      	beq.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b004      	add	sp, #16
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b090      	sub	sp, #64	@ 0x40
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	1dbb      	adds	r3, r7, #6
 8004c48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1dba      	adds	r2, r7, #6
 8004c54:	215c      	movs	r1, #92	@ 0x5c
 8004c56:	8812      	ldrh	r2, [r2, #0]
 8004c58:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2290      	movs	r2, #144	@ 0x90
 8004c5e:	2100      	movs	r1, #0
 8004c60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	228c      	movs	r2, #140	@ 0x8c
 8004c66:	2122      	movs	r1, #34	@ 0x22
 8004c68:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2280      	movs	r2, #128	@ 0x80
 8004c6e:	589b      	ldr	r3, [r3, r2]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d02d      	beq.n	8004cd0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2280      	movs	r2, #128	@ 0x80
 8004c78:	589b      	ldr	r3, [r3, r2]
 8004c7a:	4a40      	ldr	r2, [pc, #256]	@ (8004d7c <UART_Start_Receive_DMA+0x140>)
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2280      	movs	r2, #128	@ 0x80
 8004c82:	589b      	ldr	r3, [r3, r2]
 8004c84:	4a3e      	ldr	r2, [pc, #248]	@ (8004d80 <UART_Start_Receive_DMA+0x144>)
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2280      	movs	r2, #128	@ 0x80
 8004c8c:	589b      	ldr	r3, [r3, r2]
 8004c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004d84 <UART_Start_Receive_DMA+0x148>)
 8004c90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2280      	movs	r2, #128	@ 0x80
 8004c96:	589b      	ldr	r3, [r3, r2]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2280      	movs	r2, #128	@ 0x80
 8004ca0:	5898      	ldr	r0, [r3, r2]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3324      	adds	r3, #36	@ 0x24
 8004ca8:	0019      	movs	r1, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	001a      	movs	r2, r3
 8004cb0:	1dbb      	adds	r3, r7, #6
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	f7fd f86c 	bl	8001d90 <HAL_DMA_Start_IT>
 8004cb8:	1e03      	subs	r3, r0, #0
 8004cba:	d009      	beq.n	8004cd0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2290      	movs	r2, #144	@ 0x90
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	228c      	movs	r2, #140	@ 0x8c
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e050      	b.n	8004d72 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d019      	beq.n	8004d0c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2180      	movs	r1, #128	@ 0x80
 8004cfa:	0049      	lsls	r1, r1, #1
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d02:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	f383 8810 	msr	PRIMASK, r3
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d10:	613b      	str	r3, [r7, #16]
  return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d16:	2301      	movs	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			@ (mov r8, r8)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d42:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d44:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d48:	2301      	movs	r3, #1
 8004d4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2140      	movs	r1, #64	@ 0x40
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b010      	add	sp, #64	@ 0x40
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			@ (mov r8, r8)
 8004d7c:	08004ed5 	.word	0x08004ed5
 8004d80:	08005005 	.word	0x08005005
 8004d84:	08005047 	.word	0x08005047

08004d88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d90:	f3ef 8310 	mrs	r3, PRIMASK
 8004d94:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d96:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f383 8810 	msr	PRIMASK, r3
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	21c0      	movs	r1, #192	@ 0xc0
 8004db2:	438a      	bics	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8004dc8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4908      	ldr	r1, [pc, #32]	@ (8004e04 <UART_EndTxTransfer+0x7c>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f383 8810 	msr	PRIMASK, r3
}
 8004df2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2288      	movs	r2, #136	@ 0x88
 8004df8:	2120      	movs	r1, #32
 8004dfa:	5099      	str	r1, [r3, r2]
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b00a      	add	sp, #40	@ 0x28
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	ff7fffff 	.word	0xff7fffff

08004e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	@ 0x38
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e10:	f3ef 8310 	mrs	r3, PRIMASK
 8004e14:	617b      	str	r3, [r7, #20]
  return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f383 8810 	msr	PRIMASK, r3
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4926      	ldr	r1, [pc, #152]	@ (8004ecc <UART_EndRxTransfer+0xc4>)
 8004e32:	400a      	ands	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e42:	f3ef 8310 	mrs	r3, PRIMASK
 8004e46:	623b      	str	r3, [r7, #32]
  return(result);
 8004e48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	f383 8810 	msr	PRIMASK, r3
}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	491b      	ldr	r1, [pc, #108]	@ (8004ed0 <UART_EndRxTransfer+0xc8>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	f383 8810 	msr	PRIMASK, r3
}
 8004e72:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d118      	bne.n	8004eae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e86:	2301      	movs	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f383 8810 	msr	PRIMASK, r3
}
 8004e90:	46c0      	nop			@ (mov r8, r8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2110      	movs	r1, #16
 8004e9e:	438a      	bics	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	228c      	movs	r2, #140	@ 0x8c
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b00e      	add	sp, #56	@ 0x38
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	fffffedf 	.word	0xfffffedf
 8004ed0:	effffffe 	.word	0xeffffffe

08004ed4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b094      	sub	sp, #80	@ 0x50
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	4013      	ands	r3, r2
 8004eec:	d16f      	bne.n	8004fce <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ef0:	225e      	movs	r2, #94	@ 0x5e
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8004efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004efc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	2301      	movs	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f383 8810 	msr	PRIMASK, r3
}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	493a      	ldr	r1, [pc, #232]	@ (8005000 <UART_DMAReceiveCplt+0x12c>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f383 8810 	msr	PRIMASK, r3
}
 8004f26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f28:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f32:	2301      	movs	r3, #1
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	f383 8810 	msr	PRIMASK, r3
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2101      	movs	r1, #1
 8004f4a:	438a      	bics	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f64:	2301      	movs	r3, #1
 8004f66:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2140      	movs	r1, #64	@ 0x40
 8004f7c:	438a      	bics	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f8e:	228c      	movs	r2, #140	@ 0x8c
 8004f90:	2120      	movs	r1, #32
 8004f92:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d118      	bne.n	8004fce <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f383 8810 	msr	PRIMASK, r3
}
 8004fb0:	46c0      	nop			@ (mov r8, r8)
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2110      	movs	r1, #16
 8004fbe:	438a      	bics	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f383 8810 	msr	PRIMASK, r3
}
 8004fcc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d108      	bne.n	8004fee <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fde:	225c      	movs	r2, #92	@ 0x5c
 8004fe0:	5a9a      	ldrh	r2, [r3, r2]
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff fae5 	bl	80045b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fec:	e003      	b.n	8004ff6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7ff fac8 	bl	8004586 <HAL_UART_RxCpltCallback>
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b014      	add	sp, #80	@ 0x50
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
 8005000:	fffffeff 	.word	0xfffffeff

08005004 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10a      	bne.n	8005036 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	225c      	movs	r2, #92	@ 0x5c
 8005024:	5a9b      	ldrh	r3, [r3, r2]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	0011      	movs	r1, r2
 800502e:	0018      	movs	r0, r3
 8005030:	f7ff fac1 	bl	80045b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005034:	e003      	b.n	800503e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	0018      	movs	r0, r3
 800503a:	f7ff faac 	bl	8004596 <HAL_UART_RxHalfCpltCallback>
}
 800503e:	46c0      	nop			@ (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}

08005046 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2288      	movs	r2, #136	@ 0x88
 8005058:	589b      	ldr	r3, [r3, r2]
 800505a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	228c      	movs	r2, #140	@ 0x8c
 8005060:	589b      	ldr	r3, [r3, r2]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2280      	movs	r2, #128	@ 0x80
 800506c:	4013      	ands	r3, r2
 800506e:	2b80      	cmp	r3, #128	@ 0x80
 8005070:	d10a      	bne.n	8005088 <UART_DMAError+0x42>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b21      	cmp	r3, #33	@ 0x21
 8005076:	d107      	bne.n	8005088 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2256      	movs	r2, #86	@ 0x56
 800507c:	2100      	movs	r1, #0
 800507e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	0018      	movs	r0, r3
 8005084:	f7ff fe80 	bl	8004d88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2240      	movs	r2, #64	@ 0x40
 8005090:	4013      	ands	r3, r2
 8005092:	2b40      	cmp	r3, #64	@ 0x40
 8005094:	d10a      	bne.n	80050ac <UART_DMAError+0x66>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b22      	cmp	r3, #34	@ 0x22
 800509a:	d107      	bne.n	80050ac <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	225e      	movs	r2, #94	@ 0x5e
 80050a0:	2100      	movs	r1, #0
 80050a2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7ff feae 	bl	8004e08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2290      	movs	r2, #144	@ 0x90
 80050b0:	589b      	ldr	r3, [r3, r2]
 80050b2:	2210      	movs	r2, #16
 80050b4:	431a      	orrs	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2190      	movs	r1, #144	@ 0x90
 80050ba:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fa71 	bl	80045a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c4:	46c0      	nop			@ (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b006      	add	sp, #24
 80050ca:	bd80      	pop	{r7, pc}

080050cc <memset>:
 80050cc:	0003      	movs	r3, r0
 80050ce:	1882      	adds	r2, r0, r2
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d100      	bne.n	80050d6 <memset+0xa>
 80050d4:	4770      	bx	lr
 80050d6:	7019      	strb	r1, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	e7f9      	b.n	80050d0 <memset+0x4>

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	2600      	movs	r6, #0
 80050e0:	4c0c      	ldr	r4, [pc, #48]	@ (8005114 <__libc_init_array+0x38>)
 80050e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005118 <__libc_init_array+0x3c>)
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	2600      	movs	r6, #0
 80050ee:	f000 f819 	bl	8005124 <_init>
 80050f2:	4c0a      	ldr	r4, [pc, #40]	@ (800511c <__libc_init_array+0x40>)
 80050f4:	4d0a      	ldr	r5, [pc, #40]	@ (8005120 <__libc_init_array+0x44>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	00b3      	lsls	r3, r6, #2
 8005102:	58eb      	ldr	r3, [r5, r3]
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	00b3      	lsls	r3, r6, #2
 800510c:	58eb      	ldr	r3, [r5, r3]
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	0800521c 	.word	0x0800521c
 8005118:	0800521c 	.word	0x0800521c
 800511c:	08005224 	.word	0x08005224
 8005120:	0800521c 	.word	0x0800521c

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	46c0      	nop			@ (mov r8, r8)
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
