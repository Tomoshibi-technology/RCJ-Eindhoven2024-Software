
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007720  08007720  00017720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b8  080077b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c0  080077c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080077cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001958  20000070  0800783c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019c8  0800783c  000219c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a95  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc2  00000000  00000000  00037b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0003a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  0003b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251e0  00000000  00000000  0003c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156d6  00000000  00000000  000618a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ce5  00000000  00000000  00076f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014cc63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a20  00000000  00000000  0014ccb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007708 	.word	0x08007708

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08007708 	.word	0x08007708

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fbf3 	bl	80076dc <memcpy>
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f002 fb1a 	bl	8003554 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f001 fb66 	bl	80025f4 <HAL_Delay>
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f002 faf9 	bl	8003554 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
 8000f7a:	f002 fbe9 	bl	8003750 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800111c:	f005 fd40 	bl	8006ba0 <atan2>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
 8001188:	f005 fcc4 	bl	8006b14 <copysign>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011a2:	f005 fcc9 	bl	8006b38 <asin>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001234:	f005 fcb4 	bl	8006ba0 <atan2>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"
#include "math.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	80da      	strh	r2, [r3, #6]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  ID = id;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	711a      	strb	r2, [r3, #4]
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_ZN3STS8moveContEtss>:

void STS::moveCont(uint16_t abs_speed, int16_t goal_position, int16_t now_position)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	747b      	strb	r3, [r7, #17]
 80012f6:	2305      	movs	r3, #5
 80012f8:	74fb      	strb	r3, [r7, #19]
 80012fa:	2303      	movs	r3, #3
 80012fc:	753b      	strb	r3, [r7, #20]
 80012fe:	232e      	movs	r3, #46	; 0x2e
 8001300:	757b      	strb	r3, [r7, #21]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	74bb      	strb	r3, [r7, #18]
  uint8_t checksum = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t diff = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
  int16_t inst_speed = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	847b      	strh	r3, [r7, #34]	; 0x22

  diff = abs(goal_position - now_position);
 800131a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bfb8      	it	lt
 8001328:	425b      	neglt	r3, r3
 800132a:	837b      	strh	r3, [r7, #26]

  if(diff < 10){
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	2b09      	cmp	r3, #9
 8001330:	d802      	bhi.n	8001338 <_ZN3STS8moveContEtss+0x70>
	  inst_speed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001336:	e01f      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else if(diff < abs_speed * abs_speed / 6000){
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <_ZN3STS8moveContEtss+0x174>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	11c9      	asrs	r1, r1, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	429a      	cmp	r2, r3
 8001350:	da10      	bge.n	8001374 <_ZN3STS8moveContEtss+0xac>
	  inst_speed = sqrt(1500 * diff);
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f8f6 	bl	800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbb9 	bl	8000ae0 <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	e001      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else{
	  inst_speed = abs_speed;
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if(goal_position < now_position){
 8001378:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	da02      	bge.n	800138a <_ZN3STS8moveContEtss+0xc2>
	  speed = inst_speed;
 8001384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	e003      	b.n	8001392 <_ZN3STS8moveContEtss+0xca>
  }else{
	  speed = -inst_speed;
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	425b      	negs	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((goal_position - now_position < 0 && speed > 0) || (goal_position - now_position > 0 && speed < 0))
 8001392:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da03      	bge.n	80013a8 <_ZN3STS8moveContEtss+0xe0>
 80013a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc0a      	bgt.n	80013be <_ZN3STS8moveContEtss+0xf6>
 80013a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd18      	ble.n	80013e8 <_ZN3STS8moveContEtss+0x120>
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da14      	bge.n	80013e8 <_ZN3STS8moveContEtss+0x120>
  {
    if (speed < 0)
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da04      	bge.n	80013d0 <_ZN3STS8moveContEtss+0x108>
    {
      speed = 32768 - speed;
 80013c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <_ZN3STS8moveContEtss+0x178>)
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    send_Buf[6] = speed;
 80013d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75bb      	strb	r3, [r7, #22]
    send_Buf[7] = speed >> 8;
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 f906 	bl	80025f4 <HAL_Delay>
  }

  for (int i = 2; i < 8; i++)
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dc0d      	bgt.n	800140e <_ZN3STS8moveContEtss+0x146>
  {
    checksum += send_Buf[i];
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	4413      	add	r3, r2
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e7ee      	b.n	80013ec <_ZN3STS8moveContEtss+0x124>
  }
  checksum = ~checksum;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	43db      	mvns	r3, r3
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	763b      	strb	r3, [r7, #24]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	2332      	movs	r3, #50	; 0x32
 8001428:	2209      	movs	r2, #9
 800142a:	f004 fd82 	bl	8005f32 <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f001 f8e0 	bl	80025f4 <HAL_Delay>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	057619f1 	.word	0x057619f1
 8001440:	ffff8000 	.word	0xffff8000

08001444 <_ZN3STS4sendEv>:
	HAL_UART_Transmit(UART, send_Buf, 13, 50);
	HAL_Delay(1);
}

void STS::send()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	23ff      	movs	r3, #255	; 0xff
 8001458:	723b      	strb	r3, [r7, #8]
 800145a:	23ff      	movs	r3, #255	; 0xff
 800145c:	727b      	strb	r3, [r7, #9]
 800145e:	2304      	movs	r3, #4
 8001460:	72fb      	strb	r3, [r7, #11]
 8001462:	2302      	movs	r3, #2
 8001464:	733b      	strb	r3, [r7, #12]
 8001466:	2338      	movs	r3, #56	; 0x38
 8001468:	737b      	strb	r3, [r7, #13]
 800146a:	2302      	movs	r3, #2
 800146c:	73bb      	strb	r3, [r7, #14]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 8001478:	2302      	movs	r3, #2
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b06      	cmp	r3, #6
 8001480:	dc0b      	bgt.n	800149a <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	4413      	add	r3, r2
 8001490:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e7f0      	b.n	800147c <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	43db      	mvns	r3, r3
 800149e:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	2208      	movs	r2, #8
 80014b0:	f004 fd3f 	bl	8005f32 <HAL_UART_Transmit>
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 80014c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d8:	4293      	cmp	r3, r2
 80014da:	dd08      	ble.n	80014ee <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001500:	4293      	cmp	r3, r2
 8001502:	dd08      	ble.n	8001516 <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b25a      	sxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800151c:	b29b      	uxth	r3, r3
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	b29a      	uxth	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4413      	add	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	811a      	strh	r2, [r3, #8]

  return -position;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800153a:	b29b      	uxth	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	b21b      	sxth	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7fe ffa8 	bl	80004ac <__aeabi_i2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f005 fb1e 	bl	8006ba4 <sqrt>
 8001568:	eeb0 7a40 	vmov.f32	s14, s0
 800156c:	eef0 7a60 	vmov.f32	s15, s1
 8001570:	eeb0 0a47 	vmov.f32	s0, s14
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d102      	bne.n	8001596 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		NeopixelTape.execute();
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001592:	f000 fed5 	bl	8002340 <_ZN7WS2812C7executeEv>
	}
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000e0 	.word	0x200000e0
 80015a4:	20000270 	.word	0x20000270

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b0ae      	sub	sp, #184	; 0xb8
 80015ac:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 ffaf 	bl	8002510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f8bd 	bl	8001730 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fa79 	bl	8001aac <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80015ba:	f000 fa4f 	bl	8001a5c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80015be:	f000 f92d 	bl	800181c <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80015c2:	f000 f95f 	bl	8001884 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80015c6:	f000 f9eb 	bl	80019a0 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80015ca:	f000 fa19 	bl	8001a00 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
 80015ce:	484c      	ldr	r0, [pc, #304]	; (8001700 <main+0x158>)
 80015d0:	f000 ff3f 	bl	8002452 <_ZN7WS2812C4initEv>

  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	494b      	ldr	r1, [pc, #300]	; (8001704 <main+0x15c>)
 80015d8:	484b      	ldr	r0, [pc, #300]	; (8001708 <main+0x160>)
 80015da:	f004 fd3c 	bl	8006056 <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2102      	movs	r1, #2
 80015e2:	484a      	ldr	r0, [pc, #296]	; (800170c <main+0x164>)
 80015e4:	f001 fe58 	bl	8003298 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80015e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ec:	f001 f802 	bl	80025f4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 80015f0:	2328      	movs	r3, #40	; 0x28
 80015f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  BNO055 bno055(hi2c1,address);
 80015f6:	4c46      	ldr	r4, [pc, #280]	; (8001710 <main+0x168>)
 80015f8:	f107 050c 	add.w	r5, r7, #12
 80015fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001600:	9312      	str	r3, [sp, #72]	; 0x48
 8001602:	4668      	mov	r0, sp
 8001604:	f104 030c 	add.w	r3, r4, #12
 8001608:	2248      	movs	r2, #72	; 0x48
 800160a:	4619      	mov	r1, r3
 800160c:	f006 f866 	bl	80076dc <memcpy>
 8001610:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001614:	4628      	mov	r0, r5
 8001616:	f7ff fc5d 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    e = bno055.get_eular();
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd26 	bl	8001070 <_ZN6BNO0559get_eularEv>
 8001624:	eef0 6a40 	vmov.f32	s13, s0
 8001628:	eeb0 7a60 	vmov.f32	s14, s1
 800162c:	eef0 7a41 	vmov.f32	s15, s2
 8001630:	edc7 6a00 	vstr	s13, [r7]
 8001634:	ed87 7a01 	vstr	s14, [r7, #4]
 8001638:	edc7 7a02 	vstr	s15, [r7, #8]
	    rotate = (e.z/3.1415)*180;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff46 	bl	80004d0 <__aeabi_f2d>
 8001644:	a32c      	add	r3, pc, #176	; (adr r3, 80016f8 <main+0x150>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff f8c3 	bl	80007d4 <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <main+0x16c>)
 800165c:	f7fe ff90 	bl	8000580 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa62 	bl	8000b30 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4a2a      	ldr	r2, [pc, #168]	; (8001718 <main+0x170>)
 8001670:	6013      	str	r3, [r2, #0]
	    rotate = (int)rotate;
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <main+0x170>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <main+0x170>)
 8001682:	edc3 7a00 	vstr	s15, [r3]
		  get_position(0);
 8001686:	2000      	movs	r0, #0
 8001688:	f000 fa8a 	bl	8001ba0 <_Z12get_positionh>
		  get_position(2);
 800168c:	2002      	movs	r0, #2
 800168e:	f000 fa87 	bl	8001ba0 <_Z12get_positionh>
	  if(HAL_GPIO_ReadPin(slidesw_GPIO_Port, slidesw_Pin) == 1){
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	4821      	ldr	r0, [pc, #132]	; (800171c <main+0x174>)
 8001698:	f001 fde6 	bl	8003268 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	bf0c      	ite	eq
 80016a2:	2301      	moveq	r3, #1
 80016a4:	2300      	movne	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d014      	beq.n	80016d6 <main+0x12e>
		  servo0.moveCont(3000, rotate * 50, pos0);
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <main+0x170>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001720 <main+0x178>
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <main+0x17c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80016ce:	4816      	ldr	r0, [pc, #88]	; (8001728 <main+0x180>)
 80016d0:	f7ff fdfa 	bl	80012c8 <_ZN3STS8moveContEtss>
 80016d4:	e008      	b.n	80016e8 <main+0x140>
//		  servo1.moveStop(1000, 3000);
//		  servo2.moveCont(3000, 6000, pos2);
//		  servo3.moveStop(1000, 3000);
	  }else{
		  servo0.moveCont(3000, 0, pos0);
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <main+0x17c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	2200      	movs	r2, #0
 80016de:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <main+0x180>)
 80016e4:	f7ff fdf0 	bl	80012c8 <_ZN3STS8moveContEtss>
//		  servo1.moveStop(1000, 1000);
//		  servo2.moveCont(3000, 0, pos2);
//		  servo3.moveStop(1000, 2000);
	  }
	  m++;
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <main+0x184>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <main+0x184>)
 80016f0:	6013      	str	r3, [r2, #0]
	    e = bno055.get_eular();
 80016f2:	e792      	b.n	800161a <main+0x72>
 80016f4:	f3af 8000 	nop.w
 80016f8:	c083126f 	.word	0xc083126f
 80016fc:	400921ca 	.word	0x400921ca
 8001700:	20000270 	.word	0x20000270
 8001704:	20001930 	.word	0x20001930
 8001708:	20000188 	.word	0x20000188
 800170c:	40020000 	.word	0x40020000
 8001710:	2000008c 	.word	0x2000008c
 8001714:	40668000 	.word	0x40668000
 8001718:	200019b0 	.word	0x200019b0
 800171c:	40020400 	.word	0x40020400
 8001720:	42480000 	.word	0x42480000
 8001724:	20001928 	.word	0x20001928
 8001728:	200018f8 	.word	0x200018f8
 800172c:	200019b4 	.word	0x200019b4

08001730 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	2234      	movs	r2, #52	; 0x34
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f005 ffda 	bl	80076f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <_Z18SystemClock_Configv+0xe4>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <_Z18SystemClock_Configv+0xe4>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <_Z18SystemClock_Configv+0xe4>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001770:	2300      	movs	r3, #0
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <_Z18SystemClock_Configv+0xe8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <_Z18SystemClock_Configv+0xe8>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <_Z18SystemClock_Configv+0xe8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017a4:	2310      	movs	r3, #16
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80017a8:	23c0      	movs	r3, #192	; 0xc0
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80017ac:	2306      	movs	r3, #6
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 f863 	bl	8004888 <HAL_RCC_OscConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80017d2:	f000 fb2b 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	2101      	movs	r1, #1
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fd01 	bl	80041f8 <HAL_RCC_ClockConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001806:	f000 fb11 	bl	8001e2c <Error_Handler>
  }
}
 800180a:	bf00      	nop
 800180c:	3750      	adds	r7, #80	; 0x50
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000

0800181c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <_ZL12MX_I2C1_Initv+0x60>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <_ZL12MX_I2C1_Initv+0x64>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 8001834:	2200      	movs	r2, #0
 8001836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 800183a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <_ZL12MX_I2C1_Initv+0x5c>)
 800185a:	f001 fd37 	bl	80032cc <HAL_I2C_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf14      	ite	ne
 8001864:	2301      	movne	r3, #1
 8001866:	2300      	moveq	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800186e:	f000 fadd 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000008c 	.word	0x2000008c
 800187c:	40005400 	.word	0x40005400
 8001880:	000186a0 	.word	0x000186a0

08001884 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 0320 	add.w	r3, r7, #32
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018b6:	4a39      	ldr	r2, [pc, #228]	; (800199c <_ZL12MX_TIM3_Initv+0x118>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018c8:	2227      	movs	r2, #39	; 0x27
 80018ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b32      	ldr	r3, [pc, #200]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018d8:	482f      	ldr	r0, [pc, #188]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 80018da:	f003 fa73 	bl	8004dc4 <HAL_TIM_Base_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf14      	ite	ne
 80018e4:	2301      	movne	r3, #1
 80018e6:	2300      	moveq	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 80018ee:	f000 fa9d 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4826      	ldr	r0, [pc, #152]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 8001900:	f003 fd92 	bl	8005428 <HAL_TIM_ConfigClockSource>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2301      	movne	r3, #1
 800190c:	2300      	moveq	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8001914:	f000 fa8a 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001918:	481f      	ldr	r0, [pc, #124]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 800191a:	f003 faa2 	bl	8004e62 <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800192e:	f000 fa7d 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	4619      	mov	r1, r3
 8001940:	4815      	ldr	r0, [pc, #84]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 8001942:	f004 fa2d 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 8001956:	f000 fa69 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
 800195c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 8001972:	f003 fc97 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 8001986:	f000 fa51 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800198a:	4803      	ldr	r0, [pc, #12]	; (8001998 <_ZL12MX_TIM3_Initv+0x114>)
 800198c:	f000 fb64 	bl	8002058 <HAL_TIM_MspPostInit>

}
 8001990:	bf00      	nop
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200000e0 	.word	0x200000e0
 800199c:	40000400 	.word	0x40000400

080019a0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_ZL19MX_USART2_UART_Initv+0x58>)
 80019a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <_ZL19MX_USART2_UART_Initv+0x5c>)
 80019ae:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019c4:	220c      	movs	r2, #12
 80019c6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80019d6:	f004 fa5f 	bl	8005e98 <HAL_UART_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 80019ea:	f000 fa1f 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000188 	.word	0x20000188
 80019f8:	40004400 	.word	0x40004400
 80019fc:	000f4240 	.word	0x000f4240

08001a00 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a06:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001a38:	f004 fa2e 	bl	8005e98 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001a4c:	f000 f9ee 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200001cc 	.word	0x200001cc
 8001a58:	40004800 	.word	0x40004800

08001a5c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_ZL11MX_DMA_Initv+0x4c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <_ZL11MX_DMA_Initv+0x4c>)
 8001a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <_ZL11MX_DMA_Initv+0x4c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	200f      	movs	r0, #15
 8001a84:	f000 feb5 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f000 fece 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2010      	movs	r0, #16
 8001a94:	f000 fead 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a98:	2010      	movs	r0, #16
 8001a9a:	f000 fec6 	bl	800282a <HAL_NVIC_EnableIRQ>

}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2102      	movs	r1, #2
 8001b36:	4818      	ldr	r0, [pc, #96]	; (8001b98 <_ZL12MX_GPIO_Initv+0xec>)
 8001b38:	f001 fbae 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <_ZL12MX_GPIO_Initv+0xec>)
 8001b50:	f001 f9f6 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 8001b54:	2302      	movs	r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <_ZL12MX_GPIO_Initv+0xec>)
 8001b6c:	f001 f9e8 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : slidesw_Pin */
  GPIO_InitStruct.Pin = slidesw_Pin;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(slidesw_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <_ZL12MX_GPIO_Initv+0xf0>)
 8001b86:	f001 f9db 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t ID)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	static int16_t inst_pos0 = 0;
	static int16_t inst_pos1 = 0;
	static int16_t inst_pos2 = 0;
	static int16_t inst_pos3 = 0;
	static uint8_t index = 0;
	uint8_t checksum = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t read[15] = {0};
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t position[6] = {0};
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	823b      	strh	r3, [r7, #16]

  switch (ID)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d81b      	bhi.n	8001c08 <_Z12get_positionh+0x68>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <_Z12get_positionh+0x38>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bf1 	.word	0x08001bf1
 8001be0:	08001bf9 	.word	0x08001bf9
 8001be4:	08001c01 	.word	0x08001c01
  {
  case 0:
    servo0.send();
 8001be8:	4881      	ldr	r0, [pc, #516]	; (8001df0 <_Z12get_positionh+0x250>)
 8001bea:	f7ff fc2b 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8001bee:	e00c      	b.n	8001c0a <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 8001bf0:	4880      	ldr	r0, [pc, #512]	; (8001df4 <_Z12get_positionh+0x254>)
 8001bf2:	f7ff fc27 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8001bf6:	e008      	b.n	8001c0a <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 8001bf8:	487f      	ldr	r0, [pc, #508]	; (8001df8 <_Z12get_positionh+0x258>)
 8001bfa:	f7ff fc23 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8001bfe:	e004      	b.n	8001c0a <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 8001c00:	487e      	ldr	r0, [pc, #504]	; (8001dfc <_Z12get_positionh+0x25c>)
 8001c02:	f7ff fc1f 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8001c06:	e000      	b.n	8001c0a <_Z12get_positionh+0x6a>
  default:
    break;
 8001c08:	bf00      	nop
  }

  HAL_Delay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f000 fcf2 	bl	80025f4 <HAL_Delay>

  index = huart2.hdmarx->Instance->NDTR;
 8001c10:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <_Z12get_positionh+0x260>)
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <_Z12get_positionh+0x264>)
 8001c1c:	701a      	strb	r2, [r3, #0]
  index = sizeof(rxBuf) - index;
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <_Z12get_positionh+0x264>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <_Z12get_positionh+0x264>)
 8001c2c:	701a      	strb	r2, [r3, #0]

  if (index >= 15)
 8001c2e:	4b75      	ldr	r3, [pc, #468]	; (8001e04 <_Z12get_positionh+0x264>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b0e      	cmp	r3, #14
 8001c34:	d919      	bls.n	8001c6a <_Z12get_positionh+0xca>
  {
    for (int i = 0; i < 15; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	2b0e      	cmp	r3, #14
 8001c3e:	dc14      	bgt.n	8001c6a <_Z12get_positionh+0xca>
    {
      read[i] = rxBuf[index - 14 + i];
 8001c40:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <_Z12get_positionh+0x264>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	f1a3 020e 	sub.w	r2, r3, #14
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <_Z12get_positionh+0x268>)
 8001c4e:	5cd1      	ldrb	r1, [r2, r3]
 8001c50:	f107 0214 	add.w	r2, r7, #20
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	4413      	add	r3, r2
 8001c58:	460a      	mov	r2, r1
 8001c5a:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 fcc9 	bl	80025f4 <HAL_Delay>
    for (int i = 0; i < 15; i++)
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	3301      	adds	r3, #1
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
 8001c68:	e7e7      	b.n	8001c3a <_Z12get_positionh+0x9a>
    }
  }

  for (int i = 0; i < 8; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	2b07      	cmp	r3, #7
 8001c72:	dc29      	bgt.n	8001cc8 <_Z12get_positionh+0x128>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 8001c74:	f107 0214 	add.w	r2, r7, #20
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2bff      	cmp	r3, #255	; 0xff
 8001c80:	d11e      	bne.n	8001cc0 <_Z12get_positionh+0x120>
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	3301      	adds	r3, #1
 8001c86:	3338      	adds	r3, #56	; 0x38
 8001c88:	443b      	add	r3, r7
 8001c8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d116      	bne.n	8001cc0 <_Z12get_positionh+0x120>
    {
      for (int j = 0; j < 6; j++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	dc11      	bgt.n	8001cc0 <_Z12get_positionh+0x120>
      {
        position[j] = read[i + j + 2];
 8001c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	3338      	adds	r3, #56	; 0x38
 8001ca6:	443b      	add	r3, r7
 8001ca8:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8001cac:	f107 020c 	add.w	r2, r7, #12
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	4413      	add	r3, r2
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 8001cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cba:	3301      	adds	r3, #1
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbe:	e7ea      	b.n	8001c96 <_Z12get_positionh+0xf6>
  for (int i = 0; i < 8; i++)
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc6:	e7d2      	b.n	8001c6e <_Z12get_positionh+0xce>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	dc0d      	bgt.n	8001cee <_Z12get_positionh+0x14e>
  {
    checksum += position[i];
 8001cd2:	f107 020c 	add.w	r2, r7, #12
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	4413      	add	r3, r2
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e7ee      	b.n	8001ccc <_Z12get_positionh+0x12c>
  }
  checksum = ~checksum;
 8001cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 8001cf8:	7c7b      	ldrb	r3, [r7, #17]
 8001cfa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d118      	bne.n	8001d34 <_Z12get_positionh+0x194>
 8001d02:	7b3b      	ldrb	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d115      	bne.n	8001d34 <_Z12get_positionh+0x194>
  {
    inst_pos0 = position[3] + position[4] * 256;
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	7c3b      	ldrb	r3, [r7, #16]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <_Z12get_positionh+0x26c>)
 8001d1c:	801a      	strh	r2, [r3, #0]
    pos0 = servo0.calculate_position(inst_pos0);
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <_Z12get_positionh+0x26c>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	4619      	mov	r1, r3
 8001d26:	4832      	ldr	r0, [pc, #200]	; (8001df0 <_Z12get_positionh+0x250>)
 8001d28:	f7ff fbc8 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <_Z12get_positionh+0x270>)
 8001d32:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 8001d34:	7c7b      	ldrb	r3, [r7, #17]
 8001d36:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d118      	bne.n	8001d70 <_Z12get_positionh+0x1d0>
 8001d3e:	7b3b      	ldrb	r3, [r7, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d115      	bne.n	8001d70 <_Z12get_positionh+0x1d0>
  {
	inst_pos1 = position[3] + position[4] * 256;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	7c3b      	ldrb	r3, [r7, #16]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <_Z12get_positionh+0x274>)
 8001d58:	801a      	strh	r2, [r3, #0]
	pos1 = servo1.calculate_position(inst_pos1);
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <_Z12get_positionh+0x274>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	4619      	mov	r1, r3
 8001d62:	4824      	ldr	r0, [pc, #144]	; (8001df4 <_Z12get_positionh+0x254>)
 8001d64:	f7ff fbaa 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <_Z12get_positionh+0x278>)
 8001d6e:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 8001d70:	7c7b      	ldrb	r3, [r7, #17]
 8001d72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d118      	bne.n	8001dac <_Z12get_positionh+0x20c>
 8001d7a:	7b3b      	ldrb	r3, [r7, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d115      	bne.n	8001dac <_Z12get_positionh+0x20c>
  {
	inst_pos2 = position[3] + position[4] * 256;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	7c3b      	ldrb	r3, [r7, #16]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <_Z12get_positionh+0x27c>)
 8001d94:	801a      	strh	r2, [r3, #0]
	pos2 = servo2.calculate_position(inst_pos2);
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <_Z12get_positionh+0x27c>)
 8001d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4816      	ldr	r0, [pc, #88]	; (8001df8 <_Z12get_positionh+0x258>)
 8001da0:	f7ff fb8c 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <_Z12get_positionh+0x280>)
 8001daa:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 8001dac:	7c7b      	ldrb	r3, [r7, #17]
 8001dae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d118      	bne.n	8001de8 <_Z12get_positionh+0x248>
 8001db6:	7b3b      	ldrb	r3, [r7, #12]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d115      	bne.n	8001de8 <_Z12get_positionh+0x248>
  {
	inst_pos3 = position[3] + position[4] * 256;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	7c3b      	ldrb	r3, [r7, #16]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	021b      	lsls	r3, r3, #8
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_Z12get_positionh+0x284>)
 8001dd0:	801a      	strh	r2, [r3, #0]
	pos3 = servo3.calculate_position(inst_pos3);
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <_Z12get_positionh+0x284>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4808      	ldr	r0, [pc, #32]	; (8001dfc <_Z12get_positionh+0x25c>)
 8001ddc:	f7ff fb6e 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_Z12get_positionh+0x288>)
 8001de6:	801a      	strh	r2, [r3, #0]
  }
}
 8001de8:	bf00      	nop
 8001dea:	3738      	adds	r7, #56	; 0x38
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200018f8 	.word	0x200018f8
 8001df4:	20001904 	.word	0x20001904
 8001df8:	20001910 	.word	0x20001910
 8001dfc:	2000191c 	.word	0x2000191c
 8001e00:	20000188 	.word	0x20000188
 8001e04:	200019c0 	.word	0x200019c0
 8001e08:	20001930 	.word	0x20001930
 8001e0c:	200019b8 	.word	0x200019b8
 8001e10:	20001928 	.word	0x20001928
 8001e14:	200019ba 	.word	0x200019ba
 8001e18:	2000192a 	.word	0x2000192a
 8001e1c:	200019bc 	.word	0x200019bc
 8001e20:	2000192c 	.word	0x2000192c
 8001e24:	200019be 	.word	0x200019be
 8001e28:	2000192e 	.word	0x2000192e

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d11e      	bne.n	8001e86 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d119      	bne.n	8001e86 <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	490f      	ldr	r1, [pc, #60]	; (8001e94 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001e58:	480f      	ldr	r0, [pc, #60]	; (8001e98 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001e5a:	f000 fa59 	bl	8002310 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001e62:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001e64:	f7ff fa12 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	490c      	ldr	r1, [pc, #48]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001e6e:	f7ff fa0d 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 8001e72:	2202      	movs	r2, #2
 8001e74:	4909      	ldr	r1, [pc, #36]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001e76:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001e78:	f7ff fa08 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4907      	ldr	r1, [pc, #28]	; (8001e9c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001e80:	480a      	ldr	r0, [pc, #40]	; (8001eac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8001e82:	f7ff fa03 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000128 	.word	0x20000128
 8001e94:	200000e0 	.word	0x200000e0
 8001e98:	20000270 	.word	0x20000270
 8001e9c:	20000188 	.word	0x20000188
 8001ea0:	200018f8 	.word	0x200018f8
 8001ea4:	20001904 	.word	0x20001904
 8001ea8:	20001910 	.word	0x20001910
 8001eac:	2000191c 	.word	0x2000191c

08001eb0 <_GLOBAL__sub_I_hi2c1>:
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff ffbd 	bl	8001e38 <_Z41__static_initialization_and_destruction_0ii>
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x4c>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x4c>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_I2C_MspInit+0x84>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d12c      	bne.n	8001f8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_I2C_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_I2C_MspInit+0x88>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_I2C_MspInit+0x88>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f54:	2312      	movs	r3, #18
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f60:	2304      	movs	r3, #4
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480c      	ldr	r0, [pc, #48]	; (8001f9c <HAL_I2C_MspInit+0x8c>)
 8001f6c:	f000 ffe8 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_I2C_MspInit+0x88>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_I2C_MspInit+0x88>)
 8001f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_I2C_MspInit+0x88>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40005400 	.word	0x40005400
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020400 	.word	0x40020400

08001fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_TIM_Base_MspInit+0xa8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d145      	bne.n	800203e <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_TIM_Base_MspInit+0xac>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <HAL_TIM_Base_MspInit+0xac>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_TIM_Base_MspInit+0xac>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_TIM_Base_MspInit+0xb4>)
 8001fd2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001fda:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8001ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ffe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8002002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002006:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 800200a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800200e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002016:	480e      	ldr	r0, [pc, #56]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8002018:	f000 fc22 	bl	8002860 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8002022:	f7ff ff03 	bl	8001e2c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
 800202c:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_TIM_Base_MspInit+0xb0>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40000400 	.word	0x40000400
 800204c:	40023800 	.word	0x40023800
 8002050:	20000128 	.word	0x20000128
 8002054:	40026070 	.word	0x40026070

08002058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_TIM_MspPostInit+0x68>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d11d      	bne.n	80020b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_TIM_MspPostInit+0x6c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_TIM_MspPostInit+0x6c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_TIM_MspPostInit+0x6c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002096:	2340      	movs	r3, #64	; 0x40
 8002098:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020a6:	2302      	movs	r3, #2
 80020a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4619      	mov	r1, r3
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <HAL_TIM_MspPostInit+0x70>)
 80020b2:	f000 ff45 	bl	8002f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020000 	.word	0x40020000

080020cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	; 0x30
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a59      	ldr	r2, [pc, #356]	; (8002250 <HAL_UART_MspInit+0x184>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d15c      	bne.n	80021a8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	4b58      	ldr	r3, [pc, #352]	; (8002254 <HAL_UART_MspInit+0x188>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a57      	ldr	r2, [pc, #348]	; (8002254 <HAL_UART_MspInit+0x188>)
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b55      	ldr	r3, [pc, #340]	; (8002254 <HAL_UART_MspInit+0x188>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	4b51      	ldr	r3, [pc, #324]	; (8002254 <HAL_UART_MspInit+0x188>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a50      	ldr	r2, [pc, #320]	; (8002254 <HAL_UART_MspInit+0x188>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_UART_MspInit+0x188>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002126:	230c      	movs	r3, #12
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002136:	2307      	movs	r3, #7
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4845      	ldr	r0, [pc, #276]	; (8002258 <HAL_UART_MspInit+0x18c>)
 8002142:	f000 fefd 	bl	8002f40 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002146:	4b45      	ldr	r3, [pc, #276]	; (800225c <HAL_UART_MspInit+0x190>)
 8002148:	4a45      	ldr	r2, [pc, #276]	; (8002260 <HAL_UART_MspInit+0x194>)
 800214a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800214c:	4b43      	ldr	r3, [pc, #268]	; (800225c <HAL_UART_MspInit+0x190>)
 800214e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002152:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_UART_MspInit+0x190>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215a:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_UART_MspInit+0x190>)
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002160:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_UART_MspInit+0x190>)
 8002162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002166:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <HAL_UART_MspInit+0x190>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_UART_MspInit+0x190>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_UART_MspInit+0x190>)
 8002176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_UART_MspInit+0x190>)
 800217e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002182:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_UART_MspInit+0x190>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800218a:	4834      	ldr	r0, [pc, #208]	; (800225c <HAL_UART_MspInit+0x190>)
 800218c:	f000 fb68 	bl	8002860 <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002196:	f7ff fe49 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_UART_MspInit+0x190>)
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
 80021a0:	4a2e      	ldr	r2, [pc, #184]	; (800225c <HAL_UART_MspInit+0x190>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021a6:	e04f      	b.n	8002248 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <HAL_UART_MspInit+0x198>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d14a      	bne.n	8002248 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_UART_MspInit+0x188>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002206:	2320      	movs	r3, #32
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002216:	2307      	movs	r3, #7
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	4619      	mov	r1, r3
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <HAL_UART_MspInit+0x19c>)
 8002222:	f000 fe8d 	bl	8002f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002238:	2307      	movs	r3, #7
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	480a      	ldr	r0, [pc, #40]	; (800226c <HAL_UART_MspInit+0x1a0>)
 8002244:	f000 fe7c 	bl	8002f40 <HAL_GPIO_Init>
}
 8002248:	bf00      	nop
 800224a:	3730      	adds	r7, #48	; 0x30
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40004400 	.word	0x40004400
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000
 800225c:	20000210 	.word	0x20000210
 8002260:	40026088 	.word	0x40026088
 8002264:	40004800 	.word	0x40004800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020400 	.word	0x40020400

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f97a 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <DMA1_Stream4_IRQHandler+0x10>)
 80022ca:	f000 fbcf 	bl	8002a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000128 	.word	0x20000128

080022d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <DMA1_Stream5_IRQHandler+0x10>)
 80022de:	f000 fbc5 	bl	8002a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000210 	.word	0x20000210

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	609a      	str	r2, [r3, #8]
}
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZN7WS2812C7executeEv>:

void WS2812C::show(){
	pwm_buf_status = 1;
}

void WS2812C::execute(){
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234e:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8002352:	2b01      	cmp	r3, #1
 8002354:	d179      	bne.n	800244a <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2bf9      	cmp	r3, #249	; 0xf9
 800235e:	dc0a      	bgt.n	8002376 <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3326      	adds	r3, #38	; 0x26
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	2200      	movs	r2, #0
 800236c:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	e7f1      	b.n	800235a <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b2f      	cmp	r3, #47	; 0x2f
 800237e:	dc52      	bgt.n	8002426 <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b02      	cmp	r3, #2
 8002388:	dc49      	bgt.n	800241e <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 800238a:	2307      	movs	r3, #7
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db40      	blt.n	8002416 <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	18ca      	adds	r2, r1, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4413      	add	r3, r2
 80023a4:	330c      	adds	r3, #12
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	fa42 f303 	asr.w	r3, r2, r3
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d114      	bne.n	80023e6 <_ZN7WS2812C7executeEv+0xa6>
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	441a      	add	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	4413      	add	r3, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	3326      	adds	r3, #38	; 0x26
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	2214      	movs	r2, #20
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	e013      	b.n	800240e <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	441a      	add	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f1c3 0307 	rsb	r3, r3, #7
 8002400:	4413      	add	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	3326      	adds	r3, #38	; 0x26
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	220a      	movs	r2, #10
 800240c:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3b01      	subs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e7bb      	b.n	800238e <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e7b2      	b.n	8002384 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	3301      	adds	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	e7a9      	b.n	800237a <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6858      	ldr	r0, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8002436:	f240 537a 	movw	r3, #1402	; 0x57a
 800243a:	f002 fd6b 	bl	8004f14 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 800244a:	bf00      	nop
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2bf9      	cmp	r3, #249	; 0xf9
 8002462:	dc0a      	bgt.n	800247a <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3326      	adds	r3, #38	; 0x26
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	2200      	movs	r2, #0
 8002470:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3301      	adds	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e7f1      	b.n	800245e <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 800247a:	23fa      	movs	r3, #250	; 0xfa
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8002484:	da0a      	bge.n	800249c <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3326      	adds	r3, #38	; 0x26
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	220a      	movs	r2, #10
 8002492:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	e7f0      	b.n	800247e <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6858      	ldr	r0, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80024ac:	f240 537a 	movw	r3, #1402	; 0x57a
 80024b0:	f002 fd30 	bl	8004f14 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c2:	490e      	ldr	r1, [pc, #56]	; (80024fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d8:	4c0b      	ldr	r4, [pc, #44]	; (8002508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e6:	f7ff ff01 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f005 f8d3 	bl	8007694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ee:	f7ff f85b 	bl	80015a8 <main>
  bx  lr    
 80024f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002500:	080077cc 	.word	0x080077cc
  ldr r2, =_sbss
 8002504:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002508:	200019c8 	.word	0x200019c8

0800250c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC_IRQHandler>
	...

08002510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_Init+0x40>)
 800251a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_Init+0x40>)
 8002526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800252a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_Init+0x40>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 f94f 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253e:	200f      	movs	r0, #15
 8002540:	f000 f808 	bl	8002554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002544:	f7ff fcbc 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_InitTick+0x54>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_InitTick+0x58>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256a:	fbb3 f3f1 	udiv	r3, r3, r1
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f967 	bl	8002846 <HAL_SYSTICK_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e00e      	b.n	80025a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d80a      	bhi.n	800259e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002588:	2200      	movs	r2, #0
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f000 f92f 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002594:	4a06      	ldr	r2, [pc, #24]	; (80025b0 <HAL_InitTick+0x5c>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000008 	.word	0x20000008
 80025b0:	20000004 	.word	0x20000004

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000008 	.word	0x20000008
 80025d8:	200019c4 	.word	0x200019c4

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200019c4 	.word	0x200019c4

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff ff3e 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff8e 	bl	8002730 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5d 	bl	80026dc <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff31 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffa2 	bl	8002798 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff feb6 	bl	80025dc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e099      	b.n	80029b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289c:	e00f      	b.n	80028be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289e:	f7ff fe9d 	bl	80025dc <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d908      	bls.n	80028be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2203      	movs	r2, #3
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e078      	b.n	80029b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e8      	bne.n	800289e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_DMA_Init+0x158>)
 80028d8:	4013      	ands	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	2b04      	cmp	r3, #4
 8002950:	d117      	bne.n	8002982 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fa6f 	bl	8002e48 <DMA_CheckFifoParam>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2240      	movs	r2, #64	; 0x40
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800297e:	2301      	movs	r3, #1
 8002980:	e016      	b.n	80029b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa26 	bl	8002ddc <DMA_CalcBaseAndBitshift>
 8002990:	4603      	mov	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	223f      	movs	r2, #63	; 0x3f
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	f010803f 	.word	0xf010803f

080029bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Start_IT+0x26>
 80029de:	2302      	movs	r3, #2
 80029e0:	e040      	b.n	8002a64 <HAL_DMA_Start_IT+0xa8>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12f      	bne.n	8002a56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f9b8 	bl	8002d80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	223f      	movs	r2, #63	; 0x3f
 8002a16:	409a      	lsls	r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0216 	orr.w	r2, r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0208 	orr.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e005      	b.n	8002a62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a78:	4b8e      	ldr	r3, [pc, #568]	; (8002cb4 <HAL_DMA_IRQHandler+0x248>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a8e      	ldr	r2, [pc, #568]	; (8002cb8 <HAL_DMA_IRQHandler+0x24c>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	0a9b      	lsrs	r3, r3, #10
 8002a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	2208      	movs	r2, #8
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01a      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0204 	bic.w	r2, r2, #4
 8002abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	2201      	movs	r2, #1
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d012      	beq.n	8002b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2201      	movs	r2, #1
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0202 	orr.w	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2204      	movs	r2, #4
 8002b14:	409a      	lsls	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2204      	movs	r2, #4
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f043 0204 	orr.w	r2, r3, #4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2210      	movs	r2, #16
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d043      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03c      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2210      	movs	r2, #16
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d108      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d024      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
 8002b9a:	e01f      	b.n	8002bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
 8002bac:	e016      	b.n	8002bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0208 	bic.w	r2, r2, #8
 8002bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	2220      	movs	r2, #32
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 808f 	beq.w	8002d0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8087 	beq.w	8002d0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2220      	movs	r2, #32
 8002c04:	409a      	lsls	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d136      	bne.n	8002c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0216 	bic.w	r2, r2, #22
 8002c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x1da>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	223f      	movs	r2, #63	; 0x3f
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d07e      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
        }
        return;
 8002c82:	e079      	b.n	8002d78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d031      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e02c      	b.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d023      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
 8002ccc:	e01e      	b.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10f      	bne.n	8002cfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0210 	bic.w	r2, r2, #16
 8002cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d032      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2205      	movs	r2, #5
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d307      	bcc.n	8002d54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f2      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x2cc>
 8002d52:	e000      	b.n	8002d56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e000      	b.n	8002d7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d78:	bf00      	nop
    }
  }
}
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d108      	bne.n	8002dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dbe:	e007      	b.n	8002dd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3b10      	subs	r3, #16
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <DMA_CalcBaseAndBitshift+0x64>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <DMA_CalcBaseAndBitshift+0x68>)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d909      	bls.n	8002e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	1d1a      	adds	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1c:	e007      	b.n	8002e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	aaaaaaab 	.word	0xaaaaaaab
 8002e44:	08007738 	.word	0x08007738

08002e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11f      	bne.n	8002ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d856      	bhi.n	8002f16 <DMA_CheckFifoParam+0xce>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <DMA_CheckFifoParam+0x28>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e93 	.word	0x08002e93
 8002e78:	08002e81 	.word	0x08002e81
 8002e7c:	08002f17 	.word	0x08002f17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d046      	beq.n	8002f1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e043      	b.n	8002f1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e9a:	d140      	bne.n	8002f1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e03d      	b.n	8002f1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	d121      	bne.n	8002ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d837      	bhi.n	8002f22 <DMA_CheckFifoParam+0xda>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <DMA_CheckFifoParam+0x70>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ecf 	.word	0x08002ecf
 8002ec0:	08002ec9 	.word	0x08002ec9
 8002ec4:	08002ee1 	.word	0x08002ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e030      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d025      	beq.n	8002f26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e022      	b.n	8002f26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee8:	d11f      	bne.n	8002f2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eee:	e01c      	b.n	8002f2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d903      	bls.n	8002efe <DMA_CheckFifoParam+0xb6>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d003      	beq.n	8002f04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002efc:	e018      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      break;
 8002f02:	e015      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e00b      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f16:	bf00      	nop
 8002f18:	e00a      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e008      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e006      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f22:	bf00      	nop
 8002f24:	e004      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f26:	bf00      	nop
 8002f28:	e002      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e165      	b.n	8003228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 8154 	bne.w	8003222 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d005      	beq.n	8002f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d130      	bne.n	8002ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 0201 	and.w	r2, r3, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d017      	beq.n	8003030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d123      	bne.n	8003084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80ae 	beq.w	8003222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b5d      	ldr	r3, [pc, #372]	; (8003240 <HAL_GPIO_Init+0x300>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_GPIO_Init+0x300>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	; 0x44
 80030d6:	4b5a      	ldr	r3, [pc, #360]	; (8003240 <HAL_GPIO_Init+0x300>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e2:	4a58      	ldr	r2, [pc, #352]	; (8003244 <HAL_GPIO_Init+0x304>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4f      	ldr	r2, [pc, #316]	; (8003248 <HAL_GPIO_Init+0x308>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d025      	beq.n	800315a <HAL_GPIO_Init+0x21a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4e      	ldr	r2, [pc, #312]	; (800324c <HAL_GPIO_Init+0x30c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01f      	beq.n	8003156 <HAL_GPIO_Init+0x216>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4d      	ldr	r2, [pc, #308]	; (8003250 <HAL_GPIO_Init+0x310>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x212>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4c      	ldr	r2, [pc, #304]	; (8003254 <HAL_GPIO_Init+0x314>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x20e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <HAL_GPIO_Init+0x318>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x20a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_GPIO_Init+0x31c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x206>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_GPIO_Init+0x320>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x202>
 800313e:	2306      	movs	r3, #6
 8003140:	e00c      	b.n	800315c <HAL_GPIO_Init+0x21c>
 8003142:	2307      	movs	r3, #7
 8003144:	e00a      	b.n	800315c <HAL_GPIO_Init+0x21c>
 8003146:	2305      	movs	r3, #5
 8003148:	e008      	b.n	800315c <HAL_GPIO_Init+0x21c>
 800314a:	2304      	movs	r3, #4
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x21c>
 800314e:	2303      	movs	r3, #3
 8003150:	e004      	b.n	800315c <HAL_GPIO_Init+0x21c>
 8003152:	2302      	movs	r3, #2
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x21c>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x21c>
 800315a:	2300      	movs	r3, #0
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	f002 0203 	and.w	r2, r2, #3
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4093      	lsls	r3, r2
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <HAL_GPIO_Init+0x304>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317a:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <HAL_GPIO_Init+0x324>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319e:	4a31      	ldr	r2, [pc, #196]	; (8003264 <HAL_GPIO_Init+0x324>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_GPIO_Init+0x324>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <HAL_GPIO_Init+0x324>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ce:	4b25      	ldr	r3, [pc, #148]	; (8003264 <HAL_GPIO_Init+0x324>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f2:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <HAL_GPIO_Init+0x324>)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_GPIO_Init+0x324>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800321c:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_GPIO_Init+0x324>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3301      	adds	r3, #1
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	f67f ae96 	bls.w	8002f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40013800 	.word	0x40013800
 8003248:	40020000 	.word	0x40020000
 800324c:	40020400 	.word	0x40020400
 8003250:	40020800 	.word	0x40020800
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40021000 	.word	0x40021000
 800325c:	40021400 	.word	0x40021400
 8003260:	40021800 	.word	0x40021800
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e001      	b.n	800328a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
 80032a4:	4613      	mov	r3, r2
 80032a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b4:	e003      	b.n	80032be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e12b      	b.n	8003536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe fe0c 	bl	8001f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800331e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003330:	f001 f854 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8003334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a81      	ldr	r2, [pc, #516]	; (8003540 <HAL_I2C_Init+0x274>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d807      	bhi.n	8003350 <HAL_I2C_Init+0x84>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a80      	ldr	r2, [pc, #512]	; (8003544 <HAL_I2C_Init+0x278>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e006      	b.n	800335e <HAL_I2C_Init+0x92>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a7d      	ldr	r2, [pc, #500]	; (8003548 <HAL_I2C_Init+0x27c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	bf94      	ite	ls
 8003358:	2301      	movls	r3, #1
 800335a:	2300      	movhi	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0e7      	b.n	8003536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a78      	ldr	r2, [pc, #480]	; (800354c <HAL_I2C_Init+0x280>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0c9b      	lsrs	r3, r3, #18
 8003370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a6a      	ldr	r2, [pc, #424]	; (8003540 <HAL_I2C_Init+0x274>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d802      	bhi.n	80033a0 <HAL_I2C_Init+0xd4>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3301      	adds	r3, #1
 800339e:	e009      	b.n	80033b4 <HAL_I2C_Init+0xe8>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	4a69      	ldr	r2, [pc, #420]	; (8003550 <HAL_I2C_Init+0x284>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	3301      	adds	r3, #1
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	495c      	ldr	r1, [pc, #368]	; (8003540 <HAL_I2C_Init+0x274>)
 80033d0:	428b      	cmp	r3, r1
 80033d2:	d819      	bhi.n	8003408 <HAL_I2C_Init+0x13c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e59      	subs	r1, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e2:	1c59      	adds	r1, r3, #1
 80033e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033e8:	400b      	ands	r3, r1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_I2C_Init+0x138>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1e59      	subs	r1, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	e051      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003404:	2304      	movs	r3, #4
 8003406:	e04f      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <HAL_I2C_Init+0x168>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	440b      	add	r3, r1
 800341e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e012      	b.n	800345a <HAL_I2C_Init+0x18e>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Init+0x196>
 800345e:	2301      	movs	r3, #1
 8003460:	e022      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10e      	bne.n	8003488 <HAL_I2C_Init+0x1bc>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e58      	subs	r0, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	440b      	add	r3, r1
 8003478:	fbb0 f3f3 	udiv	r3, r0, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003486:	e00f      	b.n	80034a8 <HAL_I2C_Init+0x1dc>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1e58      	subs	r0, r3, #1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	0099      	lsls	r1, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	6809      	ldr	r1, [r1, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6911      	ldr	r1, [r2, #16]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68d2      	ldr	r2, [r2, #12]
 80034e2:	4311      	orrs	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	000186a0 	.word	0x000186a0
 8003544:	001e847f 	.word	0x001e847f
 8003548:	003d08ff 	.word	0x003d08ff
 800354c:	431bde83 	.word	0x431bde83
 8003550:	10624dd3 	.word	0x10624dd3

08003554 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af02      	add	r7, sp, #8
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	817b      	strh	r3, [r7, #10]
 8003564:	4613      	mov	r3, r2
 8003566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff f838 	bl	80025dc <HAL_GetTick>
 800356c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	f040 80e0 	bne.w	800373c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2319      	movs	r3, #25
 8003582:	2201      	movs	r2, #1
 8003584:	4970      	ldr	r1, [pc, #448]	; (8003748 <HAL_I2C_Master_Transmit+0x1f4>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fc58 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	e0d3      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x50>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0cc      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d007      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2221      	movs	r2, #33	; 0x21
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2210      	movs	r2, #16
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_I2C_Master_Transmit+0x1f8>)
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fac2 	bl	8003b9c <I2C_MasterRequestWrite>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e08d      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003638:	e066      	b.n	8003708 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fcd2 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b04      	cmp	r3, #4
 8003650:	d107      	bne.n	8003662 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06b      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	781a      	ldrb	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d11b      	bne.n	80036dc <HAL_I2C_Master_Transmit+0x188>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d017      	beq.n	80036dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	6a39      	ldr	r1, [r7, #32]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fcc2 	bl	800406a <I2C_WaitOnBTFFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d107      	bne.n	8003704 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e01a      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d194      	bne.n	800363a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	00100002 	.word	0x00100002
 800374c:	ffff0000 	.word	0xffff0000

08003750 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	817b      	strh	r3, [r7, #10]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7fe ff3a 	bl	80025dc <HAL_GetTick>
 8003768:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	f040 820b 	bne.w	8003b8e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2319      	movs	r3, #25
 800377e:	2201      	movs	r2, #1
 8003780:	497c      	ldr	r1, [pc, #496]	; (8003974 <HAL_I2C_Master_Receive+0x224>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fb5a 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	e1fe      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_I2C_Master_Receive+0x50>
 800379c:	2302      	movs	r3, #2
 800379e:	e1f7      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d007      	beq.n	80037c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2222      	movs	r2, #34	; 0x22
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2210      	movs	r2, #16
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	893a      	ldrh	r2, [r7, #8]
 80037f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <HAL_I2C_Master_Receive+0x228>)
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fa46 	bl	8003ca0 <I2C_MasterRequestRead>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e1b8      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d113      	bne.n	800384e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e18c      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b01      	cmp	r3, #1
 8003854:	d11b      	bne.n	800388e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61fb      	str	r3, [r7, #28]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e16c      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b02      	cmp	r3, #2
 8003894:	d11b      	bne.n	80038ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	e14c      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038f4:	e138      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	f200 80f1 	bhi.w	8003ae2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	2b01      	cmp	r3, #1
 8003906:	d123      	bne.n	8003950 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fbed 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e139      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800394e:	e10b      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	d14e      	bne.n	80039f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	4906      	ldr	r1, [pc, #24]	; (800397c <HAL_I2C_Master_Receive+0x22c>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa6a 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e10e      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
 8003972:	bf00      	nop
 8003974:	00100002 	.word	0x00100002
 8003978:	ffff0000 	.word	0xffff0000
 800397c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f4:	e0b8      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	4966      	ldr	r1, [pc, #408]	; (8003b98 <HAL_I2C_Master_Receive+0x448>)
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fa1b 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0bf      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	494f      	ldr	r1, [pc, #316]	; (8003b98 <HAL_I2C_Master_Receive+0x448>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f9ed 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e091      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae0:	e042      	b.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 fb00 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e04c      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d118      	bne.n	8003b68 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f aec2 	bne.w	80038f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	00010004 	.word	0x00010004

08003b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d006      	beq.n	8003bc6 <I2C_MasterRequestWrite+0x2a>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d003      	beq.n	8003bc6 <I2C_MasterRequestWrite+0x2a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc4:	d108      	bne.n	8003bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e00b      	b.n	8003bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	2b12      	cmp	r3, #18
 8003bde:	d107      	bne.n	8003bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f91d 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c16:	d103      	bne.n	8003c20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e035      	b.n	8003c90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2c:	d108      	bne.n	8003c40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e01b      	b.n	8003c78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c40:	897b      	ldrh	r3, [r7, #10]
 8003c42:	11db      	asrs	r3, r3, #7
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0306 	and.w	r3, r3, #6
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f063 030f 	orn	r3, r3, #15
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	490e      	ldr	r1, [pc, #56]	; (8003c98 <I2C_MasterRequestWrite+0xfc>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f943 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e010      	b.n	8003c90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c6e:	897b      	ldrh	r3, [r7, #10]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4907      	ldr	r1, [pc, #28]	; (8003c9c <I2C_MasterRequestWrite+0x100>)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f933 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	00010008 	.word	0x00010008
 8003c9c:	00010002 	.word	0x00010002

08003ca0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	460b      	mov	r3, r1
 8003cae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d006      	beq.n	8003cda <I2C_MasterRequestRead+0x3a>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d003      	beq.n	8003cda <I2C_MasterRequestRead+0x3a>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd8:	d108      	bne.n	8003cec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e00b      	b.n	8003d04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	2b11      	cmp	r3, #17
 8003cf2:	d107      	bne.n	8003d04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f893 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00d      	beq.n	8003d38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d103      	bne.n	8003d34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e079      	b.n	8003e2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d40:	d108      	bne.n	8003d54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d42:	897b      	ldrh	r3, [r7, #10]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	e05f      	b.n	8003e14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d54:	897b      	ldrh	r3, [r7, #10]
 8003d56:	11db      	asrs	r3, r3, #7
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 0306 	and.w	r3, r3, #6
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f063 030f 	orn	r3, r3, #15
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4930      	ldr	r1, [pc, #192]	; (8003e34 <I2C_MasterRequestRead+0x194>)
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f8b9 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e054      	b.n	8003e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d82:	897b      	ldrh	r3, [r7, #10]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4929      	ldr	r1, [pc, #164]	; (8003e38 <I2C_MasterRequestRead+0x198>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f8a9 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e044      	b.n	8003e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f831 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dee:	d103      	bne.n	8003df8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e017      	b.n	8003e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003dfc:	897b      	ldrh	r3, [r7, #10]
 8003dfe:	11db      	asrs	r3, r3, #7
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 0306 	and.w	r3, r3, #6
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f063 030e 	orn	r3, r3, #14
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4907      	ldr	r1, [pc, #28]	; (8003e38 <I2C_MasterRequestRead+0x198>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f865 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00010008 	.word	0x00010008
 8003e38:	00010002 	.word	0x00010002

08003e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4c:	e025      	b.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d021      	beq.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe fbc1 	bl	80025dc <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e023      	b.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10d      	bne.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	e00c      	b.n	8003eda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d0b6      	beq.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef8:	e051      	b.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f08:	d123      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e046      	b.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d021      	beq.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe fb3f 	bl	80025dc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d116      	bne.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e020      	b.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10c      	bne.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e00b      	b.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d18d      	bne.n	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff4:	e02d      	b.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8ce 	bl	8004198 <I2C_IsAcknowledgeFailed>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e02d      	b.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d021      	beq.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fe fae5 	bl	80025dc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d116      	bne.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e007      	b.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	2b80      	cmp	r3, #128	; 0x80
 800405e:	d1ca      	bne.n	8003ff6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004076:	e02d      	b.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f88d 	bl	8004198 <I2C_IsAcknowledgeFailed>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e02d      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d021      	beq.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fe faa4 	bl	80025dc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d1ca      	bne.n	8004078 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f8:	e042      	b.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d119      	bne.n	800413c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e029      	b.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe fa4e 	bl	80025dc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b40      	cmp	r3, #64	; 0x40
 800418c:	d1b5      	bne.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d11b      	bne.n	80041e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fe f978 	bl	80025dc <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe f974 	bl	80025dc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 030f 	and.w	r3, r3, #15
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f855 	bl	800442c <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe f8d8 	bl	8002554 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08007720 	.word	0x08007720
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000004 	.word	0x20000004

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	08007730 	.word	0x08007730

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08007730 	.word	0x08007730

0800442c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b0ae      	sub	sp, #184	; 0xb8
 8004432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004452:	4bcb      	ldr	r3, [pc, #812]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b0c      	cmp	r3, #12
 800445c:	f200 8204 	bhi.w	8004868 <HAL_RCC_GetSysClockFreq+0x43c>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	0800449d 	.word	0x0800449d
 800446c:	08004869 	.word	0x08004869
 8004470:	08004869 	.word	0x08004869
 8004474:	08004869 	.word	0x08004869
 8004478:	080044a5 	.word	0x080044a5
 800447c:	08004869 	.word	0x08004869
 8004480:	08004869 	.word	0x08004869
 8004484:	08004869 	.word	0x08004869
 8004488:	080044ad 	.word	0x080044ad
 800448c:	08004869 	.word	0x08004869
 8004490:	08004869 	.word	0x08004869
 8004494:	08004869 	.word	0x08004869
 8004498:	0800469d 	.word	0x0800469d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800449c:	4bb9      	ldr	r3, [pc, #740]	; (8004784 <HAL_RCC_GetSysClockFreq+0x358>)
 800449e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80044a2:	e1e5      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a4:	4bb7      	ldr	r3, [pc, #732]	; (8004784 <HAL_RCC_GetSysClockFreq+0x358>)
 80044a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044aa:	e1e1      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4bb4      	ldr	r3, [pc, #720]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b8:	4bb1      	ldr	r3, [pc, #708]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d071      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c4:	4bae      	ldr	r3, [pc, #696]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044ea:	4622      	mov	r2, r4
 80044ec:	462b      	mov	r3, r5
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	0159      	lsls	r1, r3, #5
 80044f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044fc:	0150      	lsls	r0, r2, #5
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4621      	mov	r1, r4
 8004504:	1a51      	subs	r1, r2, r1
 8004506:	6439      	str	r1, [r7, #64]	; 0x40
 8004508:	4629      	mov	r1, r5
 800450a:	eb63 0301 	sbc.w	r3, r3, r1
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800451c:	4649      	mov	r1, r9
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004526:	4641      	mov	r1, r8
 8004528:	018a      	lsls	r2, r1, #6
 800452a:	4641      	mov	r1, r8
 800452c:	1a51      	subs	r1, r2, r1
 800452e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004530:	4649      	mov	r1, r9
 8004532:	eb63 0301 	sbc.w	r3, r3, r1
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004544:	4649      	mov	r1, r9
 8004546:	00cb      	lsls	r3, r1, #3
 8004548:	4641      	mov	r1, r8
 800454a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454e:	4641      	mov	r1, r8
 8004550:	00ca      	lsls	r2, r1, #3
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	4603      	mov	r3, r0
 8004558:	4622      	mov	r2, r4
 800455a:	189b      	adds	r3, r3, r2
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
 800455e:	462b      	mov	r3, r5
 8004560:	460a      	mov	r2, r1
 8004562:	eb42 0303 	adc.w	r3, r2, r3
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004574:	4629      	mov	r1, r5
 8004576:	028b      	lsls	r3, r1, #10
 8004578:	4621      	mov	r1, r4
 800457a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800457e:	4621      	mov	r1, r4
 8004580:	028a      	lsls	r2, r1, #10
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004594:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004598:	f7fc fb1a 	bl	8000bd0 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a6:	e067      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a8:	4b75      	ldr	r3, [pc, #468]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	099b      	lsrs	r3, r3, #6
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80045b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045c2:	2300      	movs	r3, #0
 80045c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	0159      	lsls	r1, r3, #5
 80045d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045dc:	0150      	lsls	r0, r2, #5
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4621      	mov	r1, r4
 80045e4:	1a51      	subs	r1, r2, r1
 80045e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80045e8:	4629      	mov	r1, r5
 80045ea:	eb63 0301 	sbc.w	r3, r3, r1
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80045fc:	4649      	mov	r1, r9
 80045fe:	018b      	lsls	r3, r1, #6
 8004600:	4641      	mov	r1, r8
 8004602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004606:	4641      	mov	r1, r8
 8004608:	018a      	lsls	r2, r1, #6
 800460a:	4641      	mov	r1, r8
 800460c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004610:	4649      	mov	r1, r9
 8004612:	eb63 0b01 	sbc.w	fp, r3, r1
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004622:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462a:	4692      	mov	sl, r2
 800462c:	469b      	mov	fp, r3
 800462e:	4623      	mov	r3, r4
 8004630:	eb1a 0303 	adds.w	r3, sl, r3
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	462b      	mov	r3, r5
 8004638:	eb4b 0303 	adc.w	r3, fp, r3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800464a:	4629      	mov	r1, r5
 800464c:	028b      	lsls	r3, r1, #10
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004654:	4621      	mov	r1, r4
 8004656:	028a      	lsls	r2, r1, #10
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004660:	2200      	movs	r2, #0
 8004662:	673b      	str	r3, [r7, #112]	; 0x70
 8004664:	677a      	str	r2, [r7, #116]	; 0x74
 8004666:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800466a:	f7fc fab1 	bl	8000bd0 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4613      	mov	r3, r2
 8004674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004678:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	3301      	adds	r3, #1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800468a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800468e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800469a:	e0e9      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046a8:	4b35      	ldr	r3, [pc, #212]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d069      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b4:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_RCC_GetSysClockFreq+0x354>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	099b      	lsrs	r3, r3, #6
 80046ba:	2200      	movs	r2, #0
 80046bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	663b      	str	r3, [r7, #96]	; 0x60
 80046c8:	2300      	movs	r3, #0
 80046ca:	667b      	str	r3, [r7, #100]	; 0x64
 80046cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	0159      	lsls	r1, r3, #5
 80046de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e2:	0150      	lsls	r0, r2, #5
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4621      	mov	r1, r4
 80046ea:	1a51      	subs	r1, r2, r1
 80046ec:	61b9      	str	r1, [r7, #24]
 80046ee:	4629      	mov	r1, r5
 80046f0:	eb63 0301 	sbc.w	r3, r3, r1
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004702:	4659      	mov	r1, fp
 8004704:	018b      	lsls	r3, r1, #6
 8004706:	4651      	mov	r1, sl
 8004708:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800470c:	4651      	mov	r1, sl
 800470e:	018a      	lsls	r2, r1, #6
 8004710:	4651      	mov	r1, sl
 8004712:	ebb2 0801 	subs.w	r8, r2, r1
 8004716:	4659      	mov	r1, fp
 8004718:	eb63 0901 	sbc.w	r9, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004728:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800472c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004730:	4690      	mov	r8, r2
 8004732:	4699      	mov	r9, r3
 8004734:	4623      	mov	r3, r4
 8004736:	eb18 0303 	adds.w	r3, r8, r3
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	462b      	mov	r3, r5
 800473e:	eb49 0303 	adc.w	r3, r9, r3
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004750:	4629      	mov	r1, r5
 8004752:	028b      	lsls	r3, r1, #10
 8004754:	4621      	mov	r1, r4
 8004756:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800475a:	4621      	mov	r1, r4
 800475c:	028a      	lsls	r2, r1, #10
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004766:	2200      	movs	r2, #0
 8004768:	65bb      	str	r3, [r7, #88]	; 0x58
 800476a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800476c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004770:	f7fc fa2e 	bl	8000bd0 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800477e:	e063      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x41c>
 8004780:	40023800 	.word	0x40023800
 8004784:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004788:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <HAL_RCC_GetSysClockFreq+0x454>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	099b      	lsrs	r3, r3, #6
 800478e:	2200      	movs	r2, #0
 8004790:	4618      	mov	r0, r3
 8004792:	4611      	mov	r1, r2
 8004794:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004798:	653b      	str	r3, [r7, #80]	; 0x50
 800479a:	2300      	movs	r3, #0
 800479c:	657b      	str	r3, [r7, #84]	; 0x54
 800479e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80047a2:	4642      	mov	r2, r8
 80047a4:	464b      	mov	r3, r9
 80047a6:	f04f 0000 	mov.w	r0, #0
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	0159      	lsls	r1, r3, #5
 80047b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b4:	0150      	lsls	r0, r2, #5
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4641      	mov	r1, r8
 80047bc:	1a51      	subs	r1, r2, r1
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	4649      	mov	r1, r9
 80047c2:	eb63 0301 	sbc.w	r3, r3, r1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80047d4:	4659      	mov	r1, fp
 80047d6:	018b      	lsls	r3, r1, #6
 80047d8:	4651      	mov	r1, sl
 80047da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047de:	4651      	mov	r1, sl
 80047e0:	018a      	lsls	r2, r1, #6
 80047e2:	4651      	mov	r1, sl
 80047e4:	1a54      	subs	r4, r2, r1
 80047e6:	4659      	mov	r1, fp
 80047e8:	eb63 0501 	sbc.w	r5, r3, r1
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	00eb      	lsls	r3, r5, #3
 80047f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	4643      	mov	r3, r8
 8004802:	18e3      	adds	r3, r4, r3
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	464b      	mov	r3, r9
 8004808:	eb45 0303 	adc.w	r3, r5, r3
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004830:	2200      	movs	r2, #0
 8004832:	64bb      	str	r3, [r7, #72]	; 0x48
 8004834:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004836:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800483a:	f7fc f9c9 	bl	8000bd0 <__aeabi_uldivmod>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4613      	mov	r3, r2
 8004844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <HAL_RCC_GetSysClockFreq+0x454>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0f1b      	lsrs	r3, r3, #28
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800485a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004866:	e003      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCC_GetSysClockFreq+0x458>)
 800486a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800486e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004870:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004874:	4618      	mov	r0, r3
 8004876:	37b8      	adds	r7, #184	; 0xb8
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	00f42400 	.word	0x00f42400

08004888 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e28d      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8083 	beq.w	80049ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048a8:	4b94      	ldr	r3, [pc, #592]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d019      	beq.n	80048e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048b4:	4b91      	ldr	r3, [pc, #580]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048c0:	4b8e      	ldr	r3, [pc, #568]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048cc:	d00c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048d6:	2b0c      	cmp	r3, #12
 80048d8:	d112      	bne.n	8004900 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4b88      	ldr	r3, [pc, #544]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e6:	d10b      	bne.n	8004900 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	4b84      	ldr	r3, [pc, #528]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05b      	beq.n	80049ac <HAL_RCC_OscConfig+0x124>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d157      	bne.n	80049ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e25a      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d106      	bne.n	8004918 <HAL_RCC_OscConfig+0x90>
 800490a:	4b7c      	ldr	r3, [pc, #496]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7b      	ldr	r2, [pc, #492]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e01d      	b.n	8004954 <HAL_RCC_OscConfig+0xcc>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0xb4>
 8004922:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a75      	ldr	r2, [pc, #468]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b73      	ldr	r3, [pc, #460]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a72      	ldr	r2, [pc, #456]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0xcc>
 800493c:	4b6f      	ldr	r3, [pc, #444]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6e      	ldr	r2, [pc, #440]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b6c      	ldr	r3, [pc, #432]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a6b      	ldr	r2, [pc, #428]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 800494e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd fe3e 	bl	80025dc <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd fe3a 	bl	80025dc <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e21f      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b61      	ldr	r3, [pc, #388]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0xdc>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd fe2a 	bl	80025dc <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd fe26 	bl	80025dc <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e20b      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499e:	4b57      	ldr	r3, [pc, #348]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x104>
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d06f      	beq.n	8004a9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049ba:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d017      	beq.n	80049f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049c6:	4b4d      	ldr	r3, [pc, #308]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d105      	bne.n	80049de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049d2:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049e6:	2b0c      	cmp	r3, #12
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b44      	ldr	r3, [pc, #272]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x186>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1d3      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4937      	ldr	r1, [pc, #220]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e03a      	b.n	8004a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d020      	beq.n	8004a6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_RCC_OscConfig+0x278>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fd fdd3 	bl	80025dc <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3a:	f7fd fdcf 	bl	80025dc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e1b4      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4925      	ldr	r1, [pc, #148]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	600b      	str	r3, [r1, #0]
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_RCC_OscConfig+0x278>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fdb2 	bl	80025dc <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7c:	f7fd fdae 	bl	80025dc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e193      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d036      	beq.n	8004b14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_RCC_OscConfig+0x27c>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fd fd92 	bl	80025dc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fd fd8e 	bl	80025dc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e173      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_OscConfig+0x274>)
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x234>
 8004ada:	e01b      	b.n	8004b14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fd fd7b 	bl	80025dc <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae8:	e00e      	b.n	8004b08 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aea:	f7fd fd77 	bl	80025dc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d907      	bls.n	8004b08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e15c      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004afc:	40023800 	.word	0x40023800
 8004b00:	42470000 	.word	0x42470000
 8004b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b08:	4b8a      	ldr	r3, [pc, #552]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1ea      	bne.n	8004aea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8097 	beq.w	8004c50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b26:	4b83      	ldr	r3, [pc, #524]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10f      	bne.n	8004b52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	4a7e      	ldr	r2, [pc, #504]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b40:	6413      	str	r3, [r2, #64]	; 0x40
 8004b42:	4b7c      	ldr	r3, [pc, #496]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b52:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d118      	bne.n	8004b90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5e:	4b76      	ldr	r3, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a75      	ldr	r2, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fd37 	bl	80025dc <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fd fd33 	bl	80025dc <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e118      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <HAL_RCC_OscConfig+0x4b0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x31e>
 8004b98:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a65      	ldr	r2, [pc, #404]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCC_OscConfig+0x358>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x340>
 8004bae:	4b61      	ldr	r3, [pc, #388]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a60      	ldr	r2, [pc, #384]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bb4:	f043 0304 	orr.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bba:	4b5e      	ldr	r3, [pc, #376]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a5d      	ldr	r2, [pc, #372]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bc0:	f043 0301 	orr.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0x358>
 8004bc8:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	4a59      	ldr	r2, [pc, #356]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd4:	4b57      	ldr	r3, [pc, #348]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4a56      	ldr	r2, [pc, #344]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004bda:	f023 0304 	bic.w	r3, r3, #4
 8004bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fd fcf8 	bl	80025dc <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7fd fcf4 	bl	80025dc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0d7      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c06:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0ee      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x368>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fd fce2 	bl	80025dc <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fcde 	bl	80025dc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e0c1      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c32:	4b40      	ldr	r3, [pc, #256]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b3b      	ldr	r3, [pc, #236]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	4a3a      	ldr	r2, [pc, #232]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80ad 	beq.w	8004db4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5a:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d060      	beq.n	8004d28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d145      	bne.n	8004cfa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <HAL_RCC_OscConfig+0x4b4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fcb2 	bl	80025dc <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fcae 	bl	80025dc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e093      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	019b      	lsls	r3, r3, #6
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	491b      	ldr	r1, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_RCC_OscConfig+0x4b4>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fd fc83 	bl	80025dc <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fd fc7f 	bl	80025dc <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e064      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x452>
 8004cf8:	e05c      	b.n	8004db4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_RCC_OscConfig+0x4b4>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fc6c 	bl	80025dc <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd fc68 	bl	80025dc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04d      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x480>
 8004d26:	e045      	b.n	8004db4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d107      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e040      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <HAL_RCC_OscConfig+0x538>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d030      	beq.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d129      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d122      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d119      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d10f      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800

08004dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e041      	b.n	8004e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd f8d8 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f000 fcbc 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e041      	b.n	8004ef8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f839 	bl	8004f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fc6d 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e022      	b.n	8004f86 <HAL_TIM_PWM_Start_DMA+0x72>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d109      	bne.n	8004f5a <HAL_TIM_PWM_Start_DMA+0x46>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e015      	b.n	8004f86 <HAL_TIM_PWM_Start_DMA+0x72>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start_DMA+0x60>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e008      	b.n	8004f86 <HAL_TIM_PWM_Start_DMA+0x72>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e171      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e022      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0xda>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d109      	bne.n	8004fc2 <HAL_TIM_PWM_Start_DMA+0xae>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	e015      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0xda>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d109      	bne.n	8004fdc <HAL_TIM_PWM_Start_DMA+0xc8>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e008      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0xda>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d024      	beq.n	800503c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_TIM_PWM_Start_DMA+0xee>
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e137      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d104      	bne.n	8005012 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005010:	e016      	b.n	8005040 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d104      	bne.n	8005022 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	e00e      	b.n	8005040 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d104      	bne.n	8005032 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005030:	e006      	b.n	8005040 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800503a:	e001      	b.n	8005040 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e118      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b0c      	cmp	r3, #12
 8005044:	f200 80ae 	bhi.w	80051a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8005048:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005085 	.word	0x08005085
 8005054:	080051a5 	.word	0x080051a5
 8005058:	080051a5 	.word	0x080051a5
 800505c:	080051a5 	.word	0x080051a5
 8005060:	080050cd 	.word	0x080050cd
 8005064:	080051a5 	.word	0x080051a5
 8005068:	080051a5 	.word	0x080051a5
 800506c:	080051a5 	.word	0x080051a5
 8005070:	08005115 	.word	0x08005115
 8005074:	080051a5 	.word	0x080051a5
 8005078:	080051a5 	.word	0x080051a5
 800507c:	080051a5 	.word	0x080051a5
 8005080:	0800515d 	.word	0x0800515d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	4a7c      	ldr	r2, [pc, #496]	; (800527c <HAL_TIM_PWM_Start_DMA+0x368>)
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	4a7b      	ldr	r2, [pc, #492]	; (8005280 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_TIM_PWM_Start_DMA+0x370>)
 800509a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3334      	adds	r3, #52	; 0x34
 80050a8:	461a      	mov	r2, r3
 80050aa:	887b      	ldrh	r3, [r7, #2]
 80050ac:	f7fd fc86 	bl	80029bc <HAL_DMA_Start_IT>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0db      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c8:	60da      	str	r2, [r3, #12]
      break;
 80050ca:	e06e      	b.n	80051aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	4a6a      	ldr	r2, [pc, #424]	; (800527c <HAL_TIM_PWM_Start_DMA+0x368>)
 80050d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	4a69      	ldr	r2, [pc, #420]	; (8005280 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	4a68      	ldr	r2, [pc, #416]	; (8005284 <HAL_TIM_PWM_Start_DMA+0x370>)
 80050e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3338      	adds	r3, #56	; 0x38
 80050f0:	461a      	mov	r2, r3
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	f7fd fc62 	bl	80029bc <HAL_DMA_Start_IT>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e0b7      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005110:	60da      	str	r2, [r3, #12]
      break;
 8005112:	e04a      	b.n	80051aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	4a58      	ldr	r2, [pc, #352]	; (800527c <HAL_TIM_PWM_Start_DMA+0x368>)
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	4a57      	ldr	r2, [pc, #348]	; (8005280 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	4a56      	ldr	r2, [pc, #344]	; (8005284 <HAL_TIM_PWM_Start_DMA+0x370>)
 800512a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	333c      	adds	r3, #60	; 0x3c
 8005138:	461a      	mov	r2, r3
 800513a:	887b      	ldrh	r3, [r7, #2]
 800513c:	f7fd fc3e 	bl	80029bc <HAL_DMA_Start_IT>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e093      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005158:	60da      	str	r2, [r3, #12]
      break;
 800515a:	e026      	b.n	80051aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	4a46      	ldr	r2, [pc, #280]	; (800527c <HAL_TIM_PWM_Start_DMA+0x368>)
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	4a45      	ldr	r2, [pc, #276]	; (8005280 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800516a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	4a44      	ldr	r2, [pc, #272]	; (8005284 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005172:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3340      	adds	r3, #64	; 0x40
 8005180:	461a      	mov	r2, r3
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	f7fd fc1a 	bl	80029bc <HAL_DMA_Start_IT>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e06f      	b.n	8005272 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051a0:	60da      	str	r2, [r3, #12]
      break;
 80051a2:	e002      	b.n	80051aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d15f      	bne.n	8005270 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fdcb 	bl	8005d54 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a31      	ldr	r2, [pc, #196]	; (8005288 <HAL_TIM_PWM_Start_DMA+0x374>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2f      	ldr	r2, [pc, #188]	; (800528c <HAL_TIM_PWM_Start_DMA+0x378>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a25      	ldr	r2, [pc, #148]	; (8005288 <HAL_TIM_PWM_Start_DMA+0x374>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d022      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d01d      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d018      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a21      	ldr	r2, [pc, #132]	; (8005294 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <HAL_TIM_PWM_Start_DMA+0x384>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d00e      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1a      	ldr	r2, [pc, #104]	; (800528c <HAL_TIM_PWM_Start_DMA+0x378>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_PWM_Start_DMA+0x388>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_PWM_Start_DMA+0x328>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d111      	bne.n	8005260 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b06      	cmp	r3, #6
 800524c:	d010      	beq.n	8005270 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	e007      	b.n	8005270 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	08005671 	.word	0x08005671
 8005280:	08005719 	.word	0x08005719
 8005284:	080055df 	.word	0x080055df
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	40001800 	.word	0x40001800

080052a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052be:	2302      	movs	r3, #2
 80052c0:	e0ae      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b0c      	cmp	r3, #12
 80052ce:	f200 809f 	bhi.w	8005410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052d2:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	0800530d 	.word	0x0800530d
 80052dc:	08005411 	.word	0x08005411
 80052e0:	08005411 	.word	0x08005411
 80052e4:	08005411 	.word	0x08005411
 80052e8:	0800534d 	.word	0x0800534d
 80052ec:	08005411 	.word	0x08005411
 80052f0:	08005411 	.word	0x08005411
 80052f4:	08005411 	.word	0x08005411
 80052f8:	0800538f 	.word	0x0800538f
 80052fc:	08005411 	.word	0x08005411
 8005300:	08005411 	.word	0x08005411
 8005304:	08005411 	.word	0x08005411
 8005308:	080053cf 	.word	0x080053cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fad4 	bl	80058c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0208 	orr.w	r2, r2, #8
 8005326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0204 	bic.w	r2, r2, #4
 8005336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6999      	ldr	r1, [r3, #24]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	619a      	str	r2, [r3, #24]
      break;
 800534a:	e064      	b.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fb24 	bl	80059a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6999      	ldr	r1, [r3, #24]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	021a      	lsls	r2, r3, #8
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	619a      	str	r2, [r3, #24]
      break;
 800538c:	e043      	b.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fb79 	bl	8005a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0208 	orr.w	r2, r2, #8
 80053a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0204 	bic.w	r2, r2, #4
 80053b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69d9      	ldr	r1, [r3, #28]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	691a      	ldr	r2, [r3, #16]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	61da      	str	r2, [r3, #28]
      break;
 80053cc:	e023      	b.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fbcd 	bl	8005b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69d9      	ldr	r1, [r3, #28]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	021a      	lsls	r2, r3, #8
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	61da      	str	r2, [r3, #28]
      break;
 800540e:	e002      	b.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	75fb      	strb	r3, [r7, #23]
      break;
 8005414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800541e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_ConfigClockSource+0x1c>
 8005440:	2302      	movs	r3, #2
 8005442:	e0b4      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x186>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547c:	d03e      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0xd4>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	f200 8087 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	f000 8086 	beq.w	800559a <HAL_TIM_ConfigClockSource+0x172>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005492:	d87f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b70      	cmp	r3, #112	; 0x70
 8005496:	d01a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0xa6>
 8005498:	2b70      	cmp	r3, #112	; 0x70
 800549a:	d87b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b60      	cmp	r3, #96	; 0x60
 800549e:	d050      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x11a>
 80054a0:	2b60      	cmp	r3, #96	; 0x60
 80054a2:	d877      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b50      	cmp	r3, #80	; 0x50
 80054a6:	d03c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0xfa>
 80054a8:	2b50      	cmp	r3, #80	; 0x50
 80054aa:	d873      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d058      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x13a>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d86f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d064      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	2b30      	cmp	r3, #48	; 0x30
 80054ba:	d86b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d060      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d867      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d05a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	e062      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f000 fc19 	bl	8005d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
      break;
 80054fa:	e04f      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f000 fc02 	bl	8005d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800551e:	609a      	str	r2, [r3, #8]
      break;
 8005520:	e03c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fb76 	bl	8005c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2150      	movs	r1, #80	; 0x50
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fbcf 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005540:	e02c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	461a      	mov	r2, r3
 8005550:	f000 fb95 	bl	8005c7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2160      	movs	r1, #96	; 0x60
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fbbf 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005560:	e01c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fb56 	bl	8005c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2140      	movs	r1, #64	; 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fbaf 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005580:	e00c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f000 fba6 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005592:	e003      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e000      	b.n	800559c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800559a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d107      	bne.n	8005606 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005604:	e02a      	b.n	800565c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d107      	bne.n	8005620 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2202      	movs	r2, #2
 8005614:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561e:	e01d      	b.n	800565c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d107      	bne.n	800563a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2204      	movs	r2, #4
 800562e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005638:	e010      	b.n	800565c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d107      	bne.n	8005654 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2208      	movs	r2, #8
 8005648:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005652:	e003      	b.n	800565c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff ffb4 	bl	80055ca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d10b      	bne.n	80056a0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d136      	bne.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800569e:	e031      	b.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d10b      	bne.n	80056c2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2202      	movs	r2, #2
 80056ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d125      	bne.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c0:	e020      	b.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d10b      	bne.n	80056e4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2204      	movs	r2, #4
 80056d0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d114      	bne.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e2:	e00f      	b.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d10a      	bne.n	8005704 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2208      	movs	r2, #8
 80056f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7fb ff3b 	bl	8001580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
}
 8005710:	bf00      	nop
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	d103      	bne.n	8005738 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	771a      	strb	r2, [r3, #28]
 8005736:	e019      	b.n	800576c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d103      	bne.n	800574a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2202      	movs	r2, #2
 8005746:	771a      	strb	r2, [r3, #28]
 8005748:	e010      	b.n	800576c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d103      	bne.n	800575c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2204      	movs	r2, #4
 8005758:	771a      	strb	r2, [r3, #28]
 800575a:	e007      	b.n	800576c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d102      	bne.n	800576c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2208      	movs	r2, #8
 800576a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff22 	bl	80055b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a40      	ldr	r2, [pc, #256]	; (8005894 <TIM_Base_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3d      	ldr	r2, [pc, #244]	; (8005898 <TIM_Base_SetConfig+0x118>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3c      	ldr	r2, [pc, #240]	; (800589c <TIM_Base_SetConfig+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3b      	ldr	r2, [pc, #236]	; (80058a0 <TIM_Base_SetConfig+0x120>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3a      	ldr	r2, [pc, #232]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <TIM_Base_SetConfig+0x114>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d027      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2c      	ldr	r2, [pc, #176]	; (8005898 <TIM_Base_SetConfig+0x118>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d023      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2b      	ldr	r2, [pc, #172]	; (800589c <TIM_Base_SetConfig+0x11c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01f      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <TIM_Base_SetConfig+0x120>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d017      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a28      	ldr	r2, [pc, #160]	; (80058a8 <TIM_Base_SetConfig+0x128>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a27      	ldr	r2, [pc, #156]	; (80058ac <TIM_Base_SetConfig+0x12c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <TIM_Base_SetConfig+0x130>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <TIM_Base_SetConfig+0x134>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <TIM_Base_SetConfig+0x138>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a23      	ldr	r2, [pc, #140]	; (80058bc <TIM_Base_SetConfig+0x13c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800
 80058b4:	40001800 	.word	0x40001800
 80058b8:	40001c00 	.word	0x40001c00
 80058bc:	40002000 	.word	0x40002000

080058c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 0302 	bic.w	r3, r3, #2
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a20      	ldr	r2, [pc, #128]	; (8005998 <TIM_OC1_SetConfig+0xd8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC1_SetConfig+0x64>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1f      	ldr	r2, [pc, #124]	; (800599c <TIM_OC1_SetConfig+0xdc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10c      	bne.n	800593e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0308 	bic.w	r3, r3, #8
 800592a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0304 	bic.w	r3, r3, #4
 800593c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a15      	ldr	r2, [pc, #84]	; (8005998 <TIM_OC1_SetConfig+0xd8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC1_SetConfig+0x8e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a14      	ldr	r2, [pc, #80]	; (800599c <TIM_OC1_SetConfig+0xdc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d111      	bne.n	8005972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40010000 	.word	0x40010000
 800599c:	40010400 	.word	0x40010400

080059a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0210 	bic.w	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0320 	bic.w	r3, r3, #32
 80059ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <TIM_OC2_SetConfig+0xe4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC2_SetConfig+0x68>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a21      	ldr	r2, [pc, #132]	; (8005a88 <TIM_OC2_SetConfig+0xe8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d10d      	bne.n	8005a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <TIM_OC2_SetConfig+0xe4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC2_SetConfig+0x94>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <TIM_OC2_SetConfig+0xe8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d113      	bne.n	8005a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40010400 	.word	0x40010400

08005a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <TIM_OC3_SetConfig+0xe0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_OC3_SetConfig+0x66>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a20      	ldr	r2, [pc, #128]	; (8005b70 <TIM_OC3_SetConfig+0xe4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10d      	bne.n	8005b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <TIM_OC3_SetConfig+0xe0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_OC3_SetConfig+0x92>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <TIM_OC3_SetConfig+0xe4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d113      	bne.n	8005b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	621a      	str	r2, [r3, #32]
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400

08005b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <TIM_OC4_SetConfig+0xa4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC4_SetConfig+0x68>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a11      	ldr	r2, [pc, #68]	; (8005c1c <TIM_OC4_SetConfig+0xa8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400

08005c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f023 0201 	bic.w	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f023 030a 	bic.w	r3, r3, #10
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b087      	sub	sp, #28
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0210 	bic.w	r2, r3, #16
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f043 0307 	orr.w	r3, r3, #7
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	609a      	str	r2, [r3, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2201      	movs	r2, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	401a      	ands	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e05a      	b.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d01d      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10c      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40001800 	.word	0x40001800

08005e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03f      	b.n	8005f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc f904 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	; 0x24
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fba5 	bl	800662c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b08a      	sub	sp, #40	; 0x28
 8005f36:	af02      	add	r7, sp, #8
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d17c      	bne.n	800604c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_Transmit+0x2c>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e075      	b.n	800604e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_UART_Transmit+0x3e>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e06e      	b.n	800604e <HAL_UART_Transmit+0x11c>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2221      	movs	r2, #33	; 0x21
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f86:	f7fc fb29 	bl	80025dc <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa0:	d108      	bne.n	8005fb4 <HAL_UART_Transmit+0x82>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d104      	bne.n	8005fb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fc4:	e02a      	b.n	800601c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f992 	bl	80062fa <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e036      	b.n	800604e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e007      	b.n	800600e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	781a      	ldrb	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1cf      	bne.n	8005fc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	2140      	movs	r1, #64	; 0x40
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f962 	bl	80062fa <UART_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e006      	b.n	800604e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b20      	cmp	r3, #32
 800606e:	d11d      	bne.n	80060ac <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_UART_Receive_DMA+0x26>
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e016      	b.n	80060ae <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UART_Receive_DMA+0x38>
 800608a:	2302      	movs	r3, #2
 800608c:	e00f      	b.n	80060ae <HAL_UART_Receive_DMA+0x58>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	461a      	mov	r2, r3
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f998 	bl	80063d8 <UART_Start_Receive_DMA>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e000      	b.n	80060ae <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b09c      	sub	sp, #112	; 0x70
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d172      	bne.n	800620c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006128:	2200      	movs	r2, #0
 800612a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800612c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006142:	66bb      	str	r3, [r7, #104]	; 0x68
 8006144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800614c:	65ba      	str	r2, [r7, #88]	; 0x58
 800614e:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800615a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e5      	bne.n	800612c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3314      	adds	r3, #20
 8006166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	f023 0301 	bic.w	r3, r3, #1
 8006176:	667b      	str	r3, [r7, #100]	; 0x64
 8006178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006180:	647a      	str	r2, [r7, #68]	; 0x44
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3314      	adds	r3, #20
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	623b      	str	r3, [r7, #32]
   return(result);
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061aa:	663b      	str	r3, [r7, #96]	; 0x60
 80061ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3314      	adds	r3, #20
 80061b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061b4:	633a      	str	r2, [r7, #48]	; 0x30
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e5      	bne.n	8006194 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d119      	bne.n	800620c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0310 	bic.w	r3, r3, #16
 80061ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	617b      	str	r3, [r7, #20]
   return(result);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006218:	4619      	mov	r1, r3
 800621a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800621c:	f7ff ff69 	bl	80060f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006220:	e002      	b.n	8006228 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006222:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006224:	f7ff ff47 	bl	80060b6 <HAL_UART_RxCpltCallback>
}
 8006228:	bf00      	nop
 800622a:	3770      	adds	r7, #112	; 0x70
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	2b01      	cmp	r3, #1
 8006244:	d108      	bne.n	8006258 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	b29b      	uxth	r3, r3
 800624e:	4619      	mov	r1, r3
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff ff4e 	bl	80060f2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006256:	e002      	b.n	800625e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff ff36 	bl	80060ca <HAL_UART_RxHalfCpltCallback>
}
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b21      	cmp	r3, #33	; 0x21
 8006298:	d108      	bne.n	80062ac <UART_DMAError+0x46>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2200      	movs	r2, #0
 80062a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062a6:	68b8      	ldr	r0, [r7, #8]
 80062a8:	f000 f934 	bl	8006514 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	bf0c      	ite	eq
 80062ba:	2301      	moveq	r3, #1
 80062bc:	2300      	movne	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b22      	cmp	r3, #34	; 0x22
 80062cc:	d108      	bne.n	80062e0 <UART_DMAError+0x7a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062da:	68b8      	ldr	r0, [r7, #8]
 80062dc:	f000 f942 	bl	8006564 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f043 0210 	orr.w	r2, r3, #16
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ec:	68b8      	ldr	r0, [r7, #8]
 80062ee:	f7ff fef6 	bl	80060de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b090      	sub	sp, #64	; 0x40
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800630a:	e050      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d04c      	beq.n	80063ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <UART_WaitOnFlagUntilTimeout+0x30>
 800631a:	f7fc f95f 	bl	80025dc <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006326:	429a      	cmp	r2, r3
 8006328:	d241      	bcs.n	80063ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	330c      	adds	r3, #12
 8006348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800634a:	637a      	str	r2, [r7, #52]	; 0x34
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	613b      	str	r3, [r7, #16]
   return(result);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3314      	adds	r3, #20
 800637c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637e:	623a      	str	r2, [r7, #32]
 8006380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	69f9      	ldr	r1, [r7, #28]
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	61bb      	str	r3, [r7, #24]
   return(result);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e5      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e00f      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	bf0c      	ite	eq
 80063be:	2301      	moveq	r3, #1
 80063c0:	2300      	movne	r3, #0
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d09f      	beq.n	800630c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3740      	adds	r7, #64	; 0x40
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b098      	sub	sp, #96	; 0x60
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	88fa      	ldrh	r2, [r7, #6]
 80063f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2222      	movs	r2, #34	; 0x22
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	4a40      	ldr	r2, [pc, #256]	; (8006508 <UART_Start_Receive_DMA+0x130>)
 8006406:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4a3f      	ldr	r2, [pc, #252]	; (800650c <UART_Start_Receive_DMA+0x134>)
 800640e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	4a3e      	ldr	r2, [pc, #248]	; (8006510 <UART_Start_Receive_DMA+0x138>)
 8006416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	2200      	movs	r2, #0
 800641e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006420:	f107 0308 	add.w	r3, r7, #8
 8006424:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	f7fc fac0 	bl	80029bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d019      	beq.n	8006496 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006478:	65bb      	str	r3, [r7, #88]	; 0x58
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	330c      	adds	r3, #12
 8006480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006482:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e5      	bne.n	8006462 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3314      	adds	r3, #20
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	f043 0301 	orr.w	r3, r3, #1
 80064ac:	657b      	str	r3, [r7, #84]	; 0x54
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	617b      	str	r3, [r7, #20]
   return(result);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e0:	653b      	str	r3, [r7, #80]	; 0x50
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3314      	adds	r3, #20
 80064e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ea:	627a      	str	r2, [r7, #36]	; 0x24
 80064ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6a39      	ldr	r1, [r7, #32]
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3760      	adds	r7, #96	; 0x60
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	0800610b 	.word	0x0800610b
 800650c:	08006231 	.word	0x08006231
 8006510:	08006267 	.word	0x08006267

08006514 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b089      	sub	sp, #36	; 0x24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	60bb      	str	r3, [r7, #8]
   return(result);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	61ba      	str	r2, [r7, #24]
 800653e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6979      	ldr	r1, [r7, #20]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	613b      	str	r3, [r7, #16]
   return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e5      	bne.n	800651c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006558:	bf00      	nop
 800655a:	3724      	adds	r7, #36	; 0x24
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b095      	sub	sp, #84	; 0x54
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	330c      	adds	r3, #12
 800658a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800658c:	643a      	str	r2, [r7, #64]	; 0x40
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006594:	e841 2300 	strex	r3, r2, [r1]
 8006598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e5      	bne.n	800656c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3314      	adds	r3, #20
 80065be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e5      	bne.n	80065a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d119      	bne.n	8006610 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f023 0310 	bic.w	r3, r3, #16
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065fc:	61ba      	str	r2, [r7, #24]
 80065fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6979      	ldr	r1, [r7, #20]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	613b      	str	r3, [r7, #16]
   return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800661e:	bf00      	nop
 8006620:	3754      	adds	r7, #84	; 0x54
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b0c0      	sub	sp, #256	; 0x100
 8006632:	af00      	add	r7, sp, #0
 8006634:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	68d9      	ldr	r1, [r3, #12]
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	ea40 0301 	orr.w	r3, r0, r1
 8006654:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	431a      	orrs	r2, r3
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	431a      	orrs	r2, r3
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006684:	f021 010c 	bic.w	r1, r1, #12
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006692:	430b      	orrs	r3, r1
 8006694:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a6:	6999      	ldr	r1, [r3, #24]
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	ea40 0301 	orr.w	r3, r0, r1
 80066b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b8f      	ldr	r3, [pc, #572]	; (80068f8 <UART_SetConfig+0x2cc>)
 80066bc:	429a      	cmp	r2, r3
 80066be:	d005      	beq.n	80066cc <UART_SetConfig+0xa0>
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4b8d      	ldr	r3, [pc, #564]	; (80068fc <UART_SetConfig+0x2d0>)
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d104      	bne.n	80066d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066cc:	f7fd fe9a 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 80066d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066d4:	e003      	b.n	80066de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066d6:	f7fd fe81 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 80066da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e8:	f040 810c 	bne.w	8006904 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	1891      	adds	r1, r2, r2
 8006704:	65b9      	str	r1, [r7, #88]	; 0x58
 8006706:	415b      	adcs	r3, r3
 8006708:	65fb      	str	r3, [r7, #92]	; 0x5c
 800670a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800670e:	4621      	mov	r1, r4
 8006710:	eb12 0801 	adds.w	r8, r2, r1
 8006714:	4629      	mov	r1, r5
 8006716:	eb43 0901 	adc.w	r9, r3, r1
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800672a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800672e:	4690      	mov	r8, r2
 8006730:	4699      	mov	r9, r3
 8006732:	4623      	mov	r3, r4
 8006734:	eb18 0303 	adds.w	r3, r8, r3
 8006738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800673c:	462b      	mov	r3, r5
 800673e:	eb49 0303 	adc.w	r3, r9, r3
 8006742:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006752:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006756:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800675a:	460b      	mov	r3, r1
 800675c:	18db      	adds	r3, r3, r3
 800675e:	653b      	str	r3, [r7, #80]	; 0x50
 8006760:	4613      	mov	r3, r2
 8006762:	eb42 0303 	adc.w	r3, r2, r3
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
 8006768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800676c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006770:	f7fa fa2e 	bl	8000bd0 <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4b61      	ldr	r3, [pc, #388]	; (8006900 <UART_SetConfig+0x2d4>)
 800677a:	fba3 2302 	umull	r2, r3, r3, r2
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	011c      	lsls	r4, r3, #4
 8006782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006786:	2200      	movs	r2, #0
 8006788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800678c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006790:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	1891      	adds	r1, r2, r2
 800679a:	64b9      	str	r1, [r7, #72]	; 0x48
 800679c:	415b      	adcs	r3, r3
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067a4:	4641      	mov	r1, r8
 80067a6:	eb12 0a01 	adds.w	sl, r2, r1
 80067aa:	4649      	mov	r1, r9
 80067ac:	eb43 0b01 	adc.w	fp, r3, r1
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067c4:	4692      	mov	sl, r2
 80067c6:	469b      	mov	fp, r3
 80067c8:	4643      	mov	r3, r8
 80067ca:	eb1a 0303 	adds.w	r3, sl, r3
 80067ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067d2:	464b      	mov	r3, r9
 80067d4:	eb4b 0303 	adc.w	r3, fp, r3
 80067d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067f0:	460b      	mov	r3, r1
 80067f2:	18db      	adds	r3, r3, r3
 80067f4:	643b      	str	r3, [r7, #64]	; 0x40
 80067f6:	4613      	mov	r3, r2
 80067f8:	eb42 0303 	adc.w	r3, r2, r3
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44
 80067fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006802:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006806:	f7fa f9e3 	bl	8000bd0 <__aeabi_uldivmod>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4611      	mov	r1, r2
 8006810:	4b3b      	ldr	r3, [pc, #236]	; (8006900 <UART_SetConfig+0x2d4>)
 8006812:	fba3 2301 	umull	r2, r3, r3, r1
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	2264      	movs	r2, #100	; 0x64
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	1acb      	subs	r3, r1, r3
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006826:	4b36      	ldr	r3, [pc, #216]	; (8006900 <UART_SetConfig+0x2d4>)
 8006828:	fba3 2302 	umull	r2, r3, r3, r2
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006834:	441c      	add	r4, r3
 8006836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006840:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006844:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006848:	4642      	mov	r2, r8
 800684a:	464b      	mov	r3, r9
 800684c:	1891      	adds	r1, r2, r2
 800684e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006850:	415b      	adcs	r3, r3
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006858:	4641      	mov	r1, r8
 800685a:	1851      	adds	r1, r2, r1
 800685c:	6339      	str	r1, [r7, #48]	; 0x30
 800685e:	4649      	mov	r1, r9
 8006860:	414b      	adcs	r3, r1
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006870:	4659      	mov	r1, fp
 8006872:	00cb      	lsls	r3, r1, #3
 8006874:	4651      	mov	r1, sl
 8006876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687a:	4651      	mov	r1, sl
 800687c:	00ca      	lsls	r2, r1, #3
 800687e:	4610      	mov	r0, r2
 8006880:	4619      	mov	r1, r3
 8006882:	4603      	mov	r3, r0
 8006884:	4642      	mov	r2, r8
 8006886:	189b      	adds	r3, r3, r2
 8006888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800688c:	464b      	mov	r3, r9
 800688e:	460a      	mov	r2, r1
 8006890:	eb42 0303 	adc.w	r3, r2, r3
 8006894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068ac:	460b      	mov	r3, r1
 80068ae:	18db      	adds	r3, r3, r3
 80068b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b2:	4613      	mov	r3, r2
 80068b4:	eb42 0303 	adc.w	r3, r2, r3
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068c2:	f7fa f985 	bl	8000bd0 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <UART_SetConfig+0x2d4>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	; 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	3332      	adds	r3, #50	; 0x32
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <UART_SetConfig+0x2d4>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f003 0207 	and.w	r2, r3, #7
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4422      	add	r2, r4
 80068f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068f4:	e105      	b.n	8006b02 <UART_SetConfig+0x4d6>
 80068f6:	bf00      	nop
 80068f8:	40011000 	.word	0x40011000
 80068fc:	40011400 	.word	0x40011400
 8006900:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006908:	2200      	movs	r2, #0
 800690a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800690e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006912:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006916:	4642      	mov	r2, r8
 8006918:	464b      	mov	r3, r9
 800691a:	1891      	adds	r1, r2, r2
 800691c:	6239      	str	r1, [r7, #32]
 800691e:	415b      	adcs	r3, r3
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
 8006922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006926:	4641      	mov	r1, r8
 8006928:	1854      	adds	r4, r2, r1
 800692a:	4649      	mov	r1, r9
 800692c:	eb43 0501 	adc.w	r5, r3, r1
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	00eb      	lsls	r3, r5, #3
 800693a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800693e:	00e2      	lsls	r2, r4, #3
 8006940:	4614      	mov	r4, r2
 8006942:	461d      	mov	r5, r3
 8006944:	4643      	mov	r3, r8
 8006946:	18e3      	adds	r3, r4, r3
 8006948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800694c:	464b      	mov	r3, r9
 800694e:	eb45 0303 	adc.w	r3, r5, r3
 8006952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006962:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006972:	4629      	mov	r1, r5
 8006974:	008b      	lsls	r3, r1, #2
 8006976:	4621      	mov	r1, r4
 8006978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800697c:	4621      	mov	r1, r4
 800697e:	008a      	lsls	r2, r1, #2
 8006980:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006984:	f7fa f924 	bl	8000bd0 <__aeabi_uldivmod>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4b60      	ldr	r3, [pc, #384]	; (8006b10 <UART_SetConfig+0x4e4>)
 800698e:	fba3 2302 	umull	r2, r3, r3, r2
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	011c      	lsls	r4, r3, #4
 8006996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800699a:	2200      	movs	r2, #0
 800699c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069a8:	4642      	mov	r2, r8
 80069aa:	464b      	mov	r3, r9
 80069ac:	1891      	adds	r1, r2, r2
 80069ae:	61b9      	str	r1, [r7, #24]
 80069b0:	415b      	adcs	r3, r3
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069b8:	4641      	mov	r1, r8
 80069ba:	1851      	adds	r1, r2, r1
 80069bc:	6139      	str	r1, [r7, #16]
 80069be:	4649      	mov	r1, r9
 80069c0:	414b      	adcs	r3, r1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069d0:	4659      	mov	r1, fp
 80069d2:	00cb      	lsls	r3, r1, #3
 80069d4:	4651      	mov	r1, sl
 80069d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069da:	4651      	mov	r1, sl
 80069dc:	00ca      	lsls	r2, r1, #3
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	4642      	mov	r2, r8
 80069e6:	189b      	adds	r3, r3, r2
 80069e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069ec:	464b      	mov	r3, r9
 80069ee:	460a      	mov	r2, r1
 80069f0:	eb42 0303 	adc.w	r3, r2, r3
 80069f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a10:	4649      	mov	r1, r9
 8006a12:	008b      	lsls	r3, r1, #2
 8006a14:	4641      	mov	r1, r8
 8006a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	008a      	lsls	r2, r1, #2
 8006a1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a22:	f7fa f8d5 	bl	8000bd0 <__aeabi_uldivmod>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4b39      	ldr	r3, [pc, #228]	; (8006b10 <UART_SetConfig+0x4e4>)
 8006a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	2164      	movs	r1, #100	; 0x64
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	3332      	adds	r3, #50	; 0x32
 8006a3e:	4a34      	ldr	r2, [pc, #208]	; (8006b10 <UART_SetConfig+0x4e4>)
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a4a:	441c      	add	r4, r3
 8006a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a50:	2200      	movs	r2, #0
 8006a52:	673b      	str	r3, [r7, #112]	; 0x70
 8006a54:	677a      	str	r2, [r7, #116]	; 0x74
 8006a56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	1891      	adds	r1, r2, r2
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	415b      	adcs	r3, r3
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	1851      	adds	r1, r2, r1
 8006a6e:	6039      	str	r1, [r7, #0]
 8006a70:	4649      	mov	r1, r9
 8006a72:	414b      	adcs	r3, r1
 8006a74:	607b      	str	r3, [r7, #4]
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a82:	4659      	mov	r1, fp
 8006a84:	00cb      	lsls	r3, r1, #3
 8006a86:	4651      	mov	r1, sl
 8006a88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8c:	4651      	mov	r1, sl
 8006a8e:	00ca      	lsls	r2, r1, #3
 8006a90:	4610      	mov	r0, r2
 8006a92:	4619      	mov	r1, r3
 8006a94:	4603      	mov	r3, r0
 8006a96:	4642      	mov	r2, r8
 8006a98:	189b      	adds	r3, r3, r2
 8006a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab0:	667a      	str	r2, [r7, #100]	; 0x64
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006abe:	4649      	mov	r1, r9
 8006ac0:	008b      	lsls	r3, r1, #2
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac8:	4641      	mov	r1, r8
 8006aca:	008a      	lsls	r2, r1, #2
 8006acc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ad0:	f7fa f87e 	bl	8000bd0 <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <UART_SetConfig+0x4e4>)
 8006ada:	fba3 1302 	umull	r1, r3, r3, r2
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	2164      	movs	r1, #100	; 0x64
 8006ae2:	fb01 f303 	mul.w	r3, r1, r3
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	011b      	lsls	r3, r3, #4
 8006aea:	3332      	adds	r3, #50	; 0x32
 8006aec:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <UART_SetConfig+0x4e4>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	f003 020f 	and.w	r2, r3, #15
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4422      	add	r2, r4
 8006b00:	609a      	str	r2, [r3, #8]
}
 8006b02:	bf00      	nop
 8006b04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0e:	bf00      	nop
 8006b10:	51eb851f 	.word	0x51eb851f

08006b14 <copysign>:
 8006b14:	b082      	sub	sp, #8
 8006b16:	ec51 0b10 	vmov	r0, r1, d0
 8006b1a:	ed8d 1b00 	vstr	d1, [sp]
 8006b1e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8006b22:	9901      	ldr	r1, [sp, #4]
 8006b24:	ee10 2a10 	vmov	r2, s0
 8006b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b2c:	ea40 0301 	orr.w	r3, r0, r1
 8006b30:	ec43 2b10 	vmov	d0, r2, r3
 8006b34:	b002      	add	sp, #8
 8006b36:	4770      	bx	lr

08006b38 <asin>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	ed2d 8b02 	vpush	{d8}
 8006b3e:	ec55 4b10 	vmov	r4, r5, d0
 8006b42:	f000 f85d 	bl	8006c00 <__ieee754_asin>
 8006b46:	4622      	mov	r2, r4
 8006b48:	462b      	mov	r3, r5
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8006b52:	eef0 8a60 	vmov.f32	s17, s1
 8006b56:	f7f9 ffad 	bl	8000ab4 <__aeabi_dcmpun>
 8006b5a:	b9a8      	cbnz	r0, 8006b88 <asin+0x50>
 8006b5c:	ec45 4b10 	vmov	d0, r4, r5
 8006b60:	f000 fd7e 	bl	8007660 <fabs>
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <asin+0x60>)
 8006b66:	ec51 0b10 	vmov	r0, r1, d0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f7f9 ff98 	bl	8000aa0 <__aeabi_dcmpgt>
 8006b70:	b150      	cbz	r0, 8006b88 <asin+0x50>
 8006b72:	f000 fd89 	bl	8007688 <__errno>
 8006b76:	ecbd 8b02 	vpop	{d8}
 8006b7a:	2321      	movs	r3, #33	; 0x21
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b82:	4806      	ldr	r0, [pc, #24]	; (8006b9c <asin+0x64>)
 8006b84:	f000 bd78 	b.w	8007678 <nan>
 8006b88:	eeb0 0a48 	vmov.f32	s0, s16
 8006b8c:	eef0 0a68 	vmov.f32	s1, s17
 8006b90:	ecbd 8b02 	vpop	{d8}
 8006b94:	bd38      	pop	{r3, r4, r5, pc}
 8006b96:	bf00      	nop
 8006b98:	3ff00000 	.word	0x3ff00000
 8006b9c:	08007740 	.word	0x08007740

08006ba0 <atan2>:
 8006ba0:	f000 ba42 	b.w	8007028 <__ieee754_atan2>

08006ba4 <sqrt>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	ed2d 8b02 	vpush	{d8}
 8006baa:	ec55 4b10 	vmov	r4, r5, d0
 8006bae:	f000 fb05 	bl	80071bc <__ieee754_sqrt>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	eeb0 8a40 	vmov.f32	s16, s0
 8006bbe:	eef0 8a60 	vmov.f32	s17, s1
 8006bc2:	f7f9 ff77 	bl	8000ab4 <__aeabi_dcmpun>
 8006bc6:	b990      	cbnz	r0, 8006bee <sqrt+0x4a>
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 ff48 	bl	8000a64 <__aeabi_dcmplt>
 8006bd4:	b158      	cbz	r0, 8006bee <sqrt+0x4a>
 8006bd6:	f000 fd57 	bl	8007688 <__errno>
 8006bda:	2321      	movs	r3, #33	; 0x21
 8006bdc:	6003      	str	r3, [r0, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	2300      	movs	r3, #0
 8006be2:	4610      	mov	r0, r2
 8006be4:	4619      	mov	r1, r3
 8006be6:	f7f9 fdf5 	bl	80007d4 <__aeabi_ddiv>
 8006bea:	ec41 0b18 	vmov	d8, r0, r1
 8006bee:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf2:	eef0 0a68 	vmov.f32	s1, s17
 8006bf6:	ecbd 8b02 	vpop	{d8}
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	0000      	movs	r0, r0
	...

08006c00 <__ieee754_asin>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	ed2d 8b04 	vpush	{d8-d9}
 8006c08:	ec55 4b10 	vmov	r4, r5, d0
 8006c0c:	4bcc      	ldr	r3, [pc, #816]	; (8006f40 <__ieee754_asin+0x340>)
 8006c0e:	b083      	sub	sp, #12
 8006c10:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006c14:	4598      	cmp	r8, r3
 8006c16:	9501      	str	r5, [sp, #4]
 8006c18:	dd35      	ble.n	8006c86 <__ieee754_asin+0x86>
 8006c1a:	ee10 3a10 	vmov	r3, s0
 8006c1e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006c22:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006c26:	ea58 0303 	orrs.w	r3, r8, r3
 8006c2a:	d117      	bne.n	8006c5c <__ieee754_asin+0x5c>
 8006c2c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006ed8 <__ieee754_asin+0x2d8>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	ee10 0a10 	vmov	r0, s0
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7f9 fca2 	bl	8000580 <__aeabi_dmul>
 8006c3c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006ee0 <__ieee754_asin+0x2e0>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	4606      	mov	r6, r0
 8006c44:	460f      	mov	r7, r1
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fc99 	bl	8000580 <__aeabi_dmul>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4630      	mov	r0, r6
 8006c54:	4639      	mov	r1, r7
 8006c56:	f7f9 fadd 	bl	8000214 <__adddf3>
 8006c5a:	e00b      	b.n	8006c74 <__ieee754_asin+0x74>
 8006c5c:	ee10 2a10 	vmov	r2, s0
 8006c60:	462b      	mov	r3, r5
 8006c62:	ee10 0a10 	vmov	r0, s0
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fad2 	bl	8000210 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	f7f9 fdb0 	bl	80007d4 <__aeabi_ddiv>
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	ec45 4b10 	vmov	d0, r4, r5
 8006c7c:	b003      	add	sp, #12
 8006c7e:	ecbd 8b04 	vpop	{d8-d9}
 8006c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c86:	4baf      	ldr	r3, [pc, #700]	; (8006f44 <__ieee754_asin+0x344>)
 8006c88:	4598      	cmp	r8, r3
 8006c8a:	dc11      	bgt.n	8006cb0 <__ieee754_asin+0xb0>
 8006c8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006c90:	f280 80ae 	bge.w	8006df0 <__ieee754_asin+0x1f0>
 8006c94:	a394      	add	r3, pc, #592	; (adr r3, 8006ee8 <__ieee754_asin+0x2e8>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	ee10 0a10 	vmov	r0, s0
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f7f9 fab8 	bl	8000214 <__adddf3>
 8006ca4:	4ba8      	ldr	r3, [pc, #672]	; (8006f48 <__ieee754_asin+0x348>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f7f9 fefa 	bl	8000aa0 <__aeabi_dcmpgt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d1e3      	bne.n	8006c78 <__ieee754_asin+0x78>
 8006cb0:	ec45 4b10 	vmov	d0, r4, r5
 8006cb4:	f000 fcd4 	bl	8007660 <fabs>
 8006cb8:	49a3      	ldr	r1, [pc, #652]	; (8006f48 <__ieee754_asin+0x348>)
 8006cba:	ec53 2b10 	vmov	r2, r3, d0
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f7f9 faa6 	bl	8000210 <__aeabi_dsub>
 8006cc4:	4ba1      	ldr	r3, [pc, #644]	; (8006f4c <__ieee754_asin+0x34c>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f7f9 fc5a 	bl	8000580 <__aeabi_dmul>
 8006ccc:	a388      	add	r3, pc, #544	; (adr r3, 8006ef0 <__ieee754_asin+0x2f0>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	f7f9 fc53 	bl	8000580 <__aeabi_dmul>
 8006cda:	a387      	add	r3, pc, #540	; (adr r3, 8006ef8 <__ieee754_asin+0x2f8>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fa98 	bl	8000214 <__adddf3>
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	462b      	mov	r3, r5
 8006ce8:	f7f9 fc4a 	bl	8000580 <__aeabi_dmul>
 8006cec:	a384      	add	r3, pc, #528	; (adr r3, 8006f00 <__ieee754_asin+0x300>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7f9 fa8d 	bl	8000210 <__aeabi_dsub>
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	f7f9 fc41 	bl	8000580 <__aeabi_dmul>
 8006cfe:	a382      	add	r3, pc, #520	; (adr r3, 8006f08 <__ieee754_asin+0x308>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f7f9 fa86 	bl	8000214 <__adddf3>
 8006d08:	4622      	mov	r2, r4
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	f7f9 fc38 	bl	8000580 <__aeabi_dmul>
 8006d10:	a37f      	add	r3, pc, #508	; (adr r3, 8006f10 <__ieee754_asin+0x310>)
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	f7f9 fa7b 	bl	8000210 <__aeabi_dsub>
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	f7f9 fc2f 	bl	8000580 <__aeabi_dmul>
 8006d22:	a37d      	add	r3, pc, #500	; (adr r3, 8006f18 <__ieee754_asin+0x318>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f7f9 fa74 	bl	8000214 <__adddf3>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	462b      	mov	r3, r5
 8006d30:	f7f9 fc26 	bl	8000580 <__aeabi_dmul>
 8006d34:	a37a      	add	r3, pc, #488	; (adr r3, 8006f20 <__ieee754_asin+0x320>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	ec41 0b18 	vmov	d8, r0, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 fc1d 	bl	8000580 <__aeabi_dmul>
 8006d46:	a378      	add	r3, pc, #480	; (adr r3, 8006f28 <__ieee754_asin+0x328>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f7f9 fa60 	bl	8000210 <__aeabi_dsub>
 8006d50:	4622      	mov	r2, r4
 8006d52:	462b      	mov	r3, r5
 8006d54:	f7f9 fc14 	bl	8000580 <__aeabi_dmul>
 8006d58:	a375      	add	r3, pc, #468	; (adr r3, 8006f30 <__ieee754_asin+0x330>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fa59 	bl	8000214 <__adddf3>
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	f7f9 fc0b 	bl	8000580 <__aeabi_dmul>
 8006d6a:	a373      	add	r3, pc, #460	; (adr r3, 8006f38 <__ieee754_asin+0x338>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fa4e 	bl	8000210 <__aeabi_dsub>
 8006d74:	4622      	mov	r2, r4
 8006d76:	462b      	mov	r3, r5
 8006d78:	f7f9 fc02 	bl	8000580 <__aeabi_dmul>
 8006d7c:	4b72      	ldr	r3, [pc, #456]	; (8006f48 <__ieee754_asin+0x348>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f7f9 fa48 	bl	8000214 <__adddf3>
 8006d84:	ec45 4b10 	vmov	d0, r4, r5
 8006d88:	4606      	mov	r6, r0
 8006d8a:	460f      	mov	r7, r1
 8006d8c:	f000 fa16 	bl	80071bc <__ieee754_sqrt>
 8006d90:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <__ieee754_asin+0x350>)
 8006d92:	4598      	cmp	r8, r3
 8006d94:	ec5b ab10 	vmov	sl, fp, d0
 8006d98:	f340 80dc 	ble.w	8006f54 <__ieee754_asin+0x354>
 8006d9c:	4632      	mov	r2, r6
 8006d9e:	463b      	mov	r3, r7
 8006da0:	ec51 0b18 	vmov	r0, r1, d8
 8006da4:	f7f9 fd16 	bl	80007d4 <__aeabi_ddiv>
 8006da8:	4652      	mov	r2, sl
 8006daa:	465b      	mov	r3, fp
 8006dac:	f7f9 fbe8 	bl	8000580 <__aeabi_dmul>
 8006db0:	4652      	mov	r2, sl
 8006db2:	465b      	mov	r3, fp
 8006db4:	f7f9 fa2e 	bl	8000214 <__adddf3>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	f7f9 fa2a 	bl	8000214 <__adddf3>
 8006dc0:	a347      	add	r3, pc, #284	; (adr r3, 8006ee0 <__ieee754_asin+0x2e0>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fa23 	bl	8000210 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	a142      	add	r1, pc, #264	; (adr r1, 8006ed8 <__ieee754_asin+0x2d8>)
 8006dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dd4:	f7f9 fa1c 	bl	8000210 <__aeabi_dsub>
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bfdc      	itt	le
 8006dde:	4602      	movle	r2, r0
 8006de0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006de4:	4604      	mov	r4, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	bfdc      	itt	le
 8006dea:	4614      	movle	r4, r2
 8006dec:	461d      	movle	r5, r3
 8006dee:	e743      	b.n	8006c78 <__ieee754_asin+0x78>
 8006df0:	ee10 2a10 	vmov	r2, s0
 8006df4:	ee10 0a10 	vmov	r0, s0
 8006df8:	462b      	mov	r3, r5
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fbc0 	bl	8000580 <__aeabi_dmul>
 8006e00:	a33b      	add	r3, pc, #236	; (adr r3, 8006ef0 <__ieee754_asin+0x2f0>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	f7f9 fbb9 	bl	8000580 <__aeabi_dmul>
 8006e0e:	a33a      	add	r3, pc, #232	; (adr r3, 8006ef8 <__ieee754_asin+0x2f8>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 f9fe 	bl	8000214 <__adddf3>
 8006e18:	4632      	mov	r2, r6
 8006e1a:	463b      	mov	r3, r7
 8006e1c:	f7f9 fbb0 	bl	8000580 <__aeabi_dmul>
 8006e20:	a337      	add	r3, pc, #220	; (adr r3, 8006f00 <__ieee754_asin+0x300>)
 8006e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e26:	f7f9 f9f3 	bl	8000210 <__aeabi_dsub>
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	f7f9 fba7 	bl	8000580 <__aeabi_dmul>
 8006e32:	a335      	add	r3, pc, #212	; (adr r3, 8006f08 <__ieee754_asin+0x308>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	f7f9 f9ec 	bl	8000214 <__adddf3>
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	f7f9 fb9e 	bl	8000580 <__aeabi_dmul>
 8006e44:	a332      	add	r3, pc, #200	; (adr r3, 8006f10 <__ieee754_asin+0x310>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 f9e1 	bl	8000210 <__aeabi_dsub>
 8006e4e:	4632      	mov	r2, r6
 8006e50:	463b      	mov	r3, r7
 8006e52:	f7f9 fb95 	bl	8000580 <__aeabi_dmul>
 8006e56:	a330      	add	r3, pc, #192	; (adr r3, 8006f18 <__ieee754_asin+0x318>)
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f7f9 f9da 	bl	8000214 <__adddf3>
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	f7f9 fb8c 	bl	8000580 <__aeabi_dmul>
 8006e68:	a32d      	add	r3, pc, #180	; (adr r3, 8006f20 <__ieee754_asin+0x320>)
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	4680      	mov	r8, r0
 8006e70:	4689      	mov	r9, r1
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	f7f9 fb83 	bl	8000580 <__aeabi_dmul>
 8006e7a:	a32b      	add	r3, pc, #172	; (adr r3, 8006f28 <__ieee754_asin+0x328>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f7f9 f9c6 	bl	8000210 <__aeabi_dsub>
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	f7f9 fb7a 	bl	8000580 <__aeabi_dmul>
 8006e8c:	a328      	add	r3, pc, #160	; (adr r3, 8006f30 <__ieee754_asin+0x330>)
 8006e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e92:	f7f9 f9bf 	bl	8000214 <__adddf3>
 8006e96:	4632      	mov	r2, r6
 8006e98:	463b      	mov	r3, r7
 8006e9a:	f7f9 fb71 	bl	8000580 <__aeabi_dmul>
 8006e9e:	a326      	add	r3, pc, #152	; (adr r3, 8006f38 <__ieee754_asin+0x338>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f7f9 f9b4 	bl	8000210 <__aeabi_dsub>
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	463b      	mov	r3, r7
 8006eac:	f7f9 fb68 	bl	8000580 <__aeabi_dmul>
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <__ieee754_asin+0x348>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f7f9 f9ae 	bl	8000214 <__adddf3>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fc88 	bl	80007d4 <__aeabi_ddiv>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	f7f9 fb5a 	bl	8000580 <__aeabi_dmul>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	e6bf      	b.n	8006c56 <__ieee754_asin+0x56>
 8006ed6:	bf00      	nop
 8006ed8:	54442d18 	.word	0x54442d18
 8006edc:	3ff921fb 	.word	0x3ff921fb
 8006ee0:	33145c07 	.word	0x33145c07
 8006ee4:	3c91a626 	.word	0x3c91a626
 8006ee8:	8800759c 	.word	0x8800759c
 8006eec:	7e37e43c 	.word	0x7e37e43c
 8006ef0:	0dfdf709 	.word	0x0dfdf709
 8006ef4:	3f023de1 	.word	0x3f023de1
 8006ef8:	7501b288 	.word	0x7501b288
 8006efc:	3f49efe0 	.word	0x3f49efe0
 8006f00:	b5688f3b 	.word	0xb5688f3b
 8006f04:	3fa48228 	.word	0x3fa48228
 8006f08:	0e884455 	.word	0x0e884455
 8006f0c:	3fc9c155 	.word	0x3fc9c155
 8006f10:	03eb6f7d 	.word	0x03eb6f7d
 8006f14:	3fd4d612 	.word	0x3fd4d612
 8006f18:	55555555 	.word	0x55555555
 8006f1c:	3fc55555 	.word	0x3fc55555
 8006f20:	b12e9282 	.word	0xb12e9282
 8006f24:	3fb3b8c5 	.word	0x3fb3b8c5
 8006f28:	1b8d0159 	.word	0x1b8d0159
 8006f2c:	3fe6066c 	.word	0x3fe6066c
 8006f30:	9c598ac8 	.word	0x9c598ac8
 8006f34:	40002ae5 	.word	0x40002ae5
 8006f38:	1c8a2d4b 	.word	0x1c8a2d4b
 8006f3c:	40033a27 	.word	0x40033a27
 8006f40:	3fefffff 	.word	0x3fefffff
 8006f44:	3fdfffff 	.word	0x3fdfffff
 8006f48:	3ff00000 	.word	0x3ff00000
 8006f4c:	3fe00000 	.word	0x3fe00000
 8006f50:	3fef3332 	.word	0x3fef3332
 8006f54:	ee10 2a10 	vmov	r2, s0
 8006f58:	ee10 0a10 	vmov	r0, s0
 8006f5c:	465b      	mov	r3, fp
 8006f5e:	4659      	mov	r1, fp
 8006f60:	f7f9 f958 	bl	8000214 <__adddf3>
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	ec41 0b19 	vmov	d9, r0, r1
 8006f6c:	ec51 0b18 	vmov	r0, r1, d8
 8006f70:	f7f9 fc30 	bl	80007d4 <__aeabi_ddiv>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	ec51 0b19 	vmov	r0, r1, d9
 8006f7c:	f7f9 fb00 	bl	8000580 <__aeabi_dmul>
 8006f80:	f04f 0800 	mov.w	r8, #0
 8006f84:	4606      	mov	r6, r0
 8006f86:	460f      	mov	r7, r1
 8006f88:	4642      	mov	r2, r8
 8006f8a:	465b      	mov	r3, fp
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4659      	mov	r1, fp
 8006f90:	f7f9 faf6 	bl	8000580 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	f7f9 f938 	bl	8000210 <__aeabi_dsub>
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	465b      	mov	r3, fp
 8006fa8:	4650      	mov	r0, sl
 8006faa:	4659      	mov	r1, fp
 8006fac:	f7f9 f932 	bl	8000214 <__adddf3>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 fc0c 	bl	80007d4 <__aeabi_ddiv>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	f7f9 f928 	bl	8000214 <__adddf3>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	a113      	add	r1, pc, #76	; (adr r1, 8007018 <__ieee754_asin+0x418>)
 8006fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fce:	f7f9 f91f 	bl	8000210 <__aeabi_dsub>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 f919 	bl	8000210 <__aeabi_dsub>
 8006fde:	4642      	mov	r2, r8
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	460d      	mov	r5, r1
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4659      	mov	r1, fp
 8006fea:	f7f9 f913 	bl	8000214 <__adddf3>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	a10b      	add	r1, pc, #44	; (adr r1, 8007020 <__ieee754_asin+0x420>)
 8006ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff8:	f7f9 f90a 	bl	8000210 <__aeabi_dsub>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4620      	mov	r0, r4
 8007002:	4629      	mov	r1, r5
 8007004:	f7f9 f904 	bl	8000210 <__aeabi_dsub>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	a104      	add	r1, pc, #16	; (adr r1, 8007020 <__ieee754_asin+0x420>)
 800700e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007012:	e6df      	b.n	8006dd4 <__ieee754_asin+0x1d4>
 8007014:	f3af 8000 	nop.w
 8007018:	33145c07 	.word	0x33145c07
 800701c:	3c91a626 	.word	0x3c91a626
 8007020:	54442d18 	.word	0x54442d18
 8007024:	3fe921fb 	.word	0x3fe921fb

08007028 <__ieee754_atan2>:
 8007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800702c:	ec57 6b11 	vmov	r6, r7, d1
 8007030:	4273      	negs	r3, r6
 8007032:	f8df e184 	ldr.w	lr, [pc, #388]	; 80071b8 <__ieee754_atan2+0x190>
 8007036:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800703a:	4333      	orrs	r3, r6
 800703c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007040:	4573      	cmp	r3, lr
 8007042:	ec51 0b10 	vmov	r0, r1, d0
 8007046:	ee11 8a10 	vmov	r8, s2
 800704a:	d80a      	bhi.n	8007062 <__ieee754_atan2+0x3a>
 800704c:	4244      	negs	r4, r0
 800704e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007052:	4304      	orrs	r4, r0
 8007054:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007058:	4574      	cmp	r4, lr
 800705a:	ee10 9a10 	vmov	r9, s0
 800705e:	468c      	mov	ip, r1
 8007060:	d907      	bls.n	8007072 <__ieee754_atan2+0x4a>
 8007062:	4632      	mov	r2, r6
 8007064:	463b      	mov	r3, r7
 8007066:	f7f9 f8d5 	bl	8000214 <__adddf3>
 800706a:	ec41 0b10 	vmov	d0, r0, r1
 800706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007072:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007076:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800707a:	4334      	orrs	r4, r6
 800707c:	d103      	bne.n	8007086 <__ieee754_atan2+0x5e>
 800707e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007082:	f000 b94d 	b.w	8007320 <atan>
 8007086:	17bc      	asrs	r4, r7, #30
 8007088:	f004 0402 	and.w	r4, r4, #2
 800708c:	ea53 0909 	orrs.w	r9, r3, r9
 8007090:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007094:	d107      	bne.n	80070a6 <__ieee754_atan2+0x7e>
 8007096:	2c02      	cmp	r4, #2
 8007098:	d060      	beq.n	800715c <__ieee754_atan2+0x134>
 800709a:	2c03      	cmp	r4, #3
 800709c:	d1e5      	bne.n	800706a <__ieee754_atan2+0x42>
 800709e:	a142      	add	r1, pc, #264	; (adr r1, 80071a8 <__ieee754_atan2+0x180>)
 80070a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a4:	e7e1      	b.n	800706a <__ieee754_atan2+0x42>
 80070a6:	ea52 0808 	orrs.w	r8, r2, r8
 80070aa:	d106      	bne.n	80070ba <__ieee754_atan2+0x92>
 80070ac:	f1bc 0f00 	cmp.w	ip, #0
 80070b0:	da5f      	bge.n	8007172 <__ieee754_atan2+0x14a>
 80070b2:	a13f      	add	r1, pc, #252	; (adr r1, 80071b0 <__ieee754_atan2+0x188>)
 80070b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b8:	e7d7      	b.n	800706a <__ieee754_atan2+0x42>
 80070ba:	4572      	cmp	r2, lr
 80070bc:	d10f      	bne.n	80070de <__ieee754_atan2+0xb6>
 80070be:	4293      	cmp	r3, r2
 80070c0:	f104 34ff 	add.w	r4, r4, #4294967295
 80070c4:	d107      	bne.n	80070d6 <__ieee754_atan2+0xae>
 80070c6:	2c02      	cmp	r4, #2
 80070c8:	d84c      	bhi.n	8007164 <__ieee754_atan2+0x13c>
 80070ca:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <__ieee754_atan2+0x178>)
 80070cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80070d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80070d4:	e7c9      	b.n	800706a <__ieee754_atan2+0x42>
 80070d6:	2c02      	cmp	r4, #2
 80070d8:	d848      	bhi.n	800716c <__ieee754_atan2+0x144>
 80070da:	4b32      	ldr	r3, [pc, #200]	; (80071a4 <__ieee754_atan2+0x17c>)
 80070dc:	e7f6      	b.n	80070cc <__ieee754_atan2+0xa4>
 80070de:	4573      	cmp	r3, lr
 80070e0:	d0e4      	beq.n	80070ac <__ieee754_atan2+0x84>
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80070e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070ec:	da1e      	bge.n	800712c <__ieee754_atan2+0x104>
 80070ee:	2f00      	cmp	r7, #0
 80070f0:	da01      	bge.n	80070f6 <__ieee754_atan2+0xce>
 80070f2:	323c      	adds	r2, #60	; 0x3c
 80070f4:	db1e      	blt.n	8007134 <__ieee754_atan2+0x10c>
 80070f6:	4632      	mov	r2, r6
 80070f8:	463b      	mov	r3, r7
 80070fa:	f7f9 fb6b 	bl	80007d4 <__aeabi_ddiv>
 80070fe:	ec41 0b10 	vmov	d0, r0, r1
 8007102:	f000 faad 	bl	8007660 <fabs>
 8007106:	f000 f90b 	bl	8007320 <atan>
 800710a:	ec51 0b10 	vmov	r0, r1, d0
 800710e:	2c01      	cmp	r4, #1
 8007110:	d013      	beq.n	800713a <__ieee754_atan2+0x112>
 8007112:	2c02      	cmp	r4, #2
 8007114:	d015      	beq.n	8007142 <__ieee754_atan2+0x11a>
 8007116:	2c00      	cmp	r4, #0
 8007118:	d0a7      	beq.n	800706a <__ieee754_atan2+0x42>
 800711a:	a319      	add	r3, pc, #100	; (adr r3, 8007180 <__ieee754_atan2+0x158>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f876 	bl	8000210 <__aeabi_dsub>
 8007124:	a318      	add	r3, pc, #96	; (adr r3, 8007188 <__ieee754_atan2+0x160>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	e014      	b.n	8007156 <__ieee754_atan2+0x12e>
 800712c:	a118      	add	r1, pc, #96	; (adr r1, 8007190 <__ieee754_atan2+0x168>)
 800712e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007132:	e7ec      	b.n	800710e <__ieee754_atan2+0xe6>
 8007134:	2000      	movs	r0, #0
 8007136:	2100      	movs	r1, #0
 8007138:	e7e9      	b.n	800710e <__ieee754_atan2+0xe6>
 800713a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800713e:	4619      	mov	r1, r3
 8007140:	e793      	b.n	800706a <__ieee754_atan2+0x42>
 8007142:	a30f      	add	r3, pc, #60	; (adr r3, 8007180 <__ieee754_atan2+0x158>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 f862 	bl	8000210 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	a10d      	add	r1, pc, #52	; (adr r1, 8007188 <__ieee754_atan2+0x160>)
 8007152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007156:	f7f9 f85b 	bl	8000210 <__aeabi_dsub>
 800715a:	e786      	b.n	800706a <__ieee754_atan2+0x42>
 800715c:	a10a      	add	r1, pc, #40	; (adr r1, 8007188 <__ieee754_atan2+0x160>)
 800715e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007162:	e782      	b.n	800706a <__ieee754_atan2+0x42>
 8007164:	a10c      	add	r1, pc, #48	; (adr r1, 8007198 <__ieee754_atan2+0x170>)
 8007166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800716a:	e77e      	b.n	800706a <__ieee754_atan2+0x42>
 800716c:	2000      	movs	r0, #0
 800716e:	2100      	movs	r1, #0
 8007170:	e77b      	b.n	800706a <__ieee754_atan2+0x42>
 8007172:	a107      	add	r1, pc, #28	; (adr r1, 8007190 <__ieee754_atan2+0x168>)
 8007174:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007178:	e777      	b.n	800706a <__ieee754_atan2+0x42>
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w
 8007180:	33145c07 	.word	0x33145c07
 8007184:	3ca1a626 	.word	0x3ca1a626
 8007188:	54442d18 	.word	0x54442d18
 800718c:	400921fb 	.word	0x400921fb
 8007190:	54442d18 	.word	0x54442d18
 8007194:	3ff921fb 	.word	0x3ff921fb
 8007198:	54442d18 	.word	0x54442d18
 800719c:	3fe921fb 	.word	0x3fe921fb
 80071a0:	08007748 	.word	0x08007748
 80071a4:	08007760 	.word	0x08007760
 80071a8:	54442d18 	.word	0x54442d18
 80071ac:	c00921fb 	.word	0xc00921fb
 80071b0:	54442d18 	.word	0x54442d18
 80071b4:	bff921fb 	.word	0xbff921fb
 80071b8:	7ff00000 	.word	0x7ff00000

080071bc <__ieee754_sqrt>:
 80071bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c0:	ec55 4b10 	vmov	r4, r5, d0
 80071c4:	4e55      	ldr	r6, [pc, #340]	; (800731c <__ieee754_sqrt+0x160>)
 80071c6:	43ae      	bics	r6, r5
 80071c8:	ee10 0a10 	vmov	r0, s0
 80071cc:	ee10 3a10 	vmov	r3, s0
 80071d0:	462a      	mov	r2, r5
 80071d2:	4629      	mov	r1, r5
 80071d4:	d110      	bne.n	80071f8 <__ieee754_sqrt+0x3c>
 80071d6:	ee10 2a10 	vmov	r2, s0
 80071da:	462b      	mov	r3, r5
 80071dc:	f7f9 f9d0 	bl	8000580 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 f814 	bl	8000214 <__adddf3>
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	ec45 4b10 	vmov	d0, r4, r5
 80071f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f8:	2d00      	cmp	r5, #0
 80071fa:	dc10      	bgt.n	800721e <__ieee754_sqrt+0x62>
 80071fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007200:	4330      	orrs	r0, r6
 8007202:	d0f5      	beq.n	80071f0 <__ieee754_sqrt+0x34>
 8007204:	b15d      	cbz	r5, 800721e <__ieee754_sqrt+0x62>
 8007206:	ee10 2a10 	vmov	r2, s0
 800720a:	462b      	mov	r3, r5
 800720c:	ee10 0a10 	vmov	r0, s0
 8007210:	f7f8 fffe 	bl	8000210 <__aeabi_dsub>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	f7f9 fadc 	bl	80007d4 <__aeabi_ddiv>
 800721c:	e7e6      	b.n	80071ec <__ieee754_sqrt+0x30>
 800721e:	1512      	asrs	r2, r2, #20
 8007220:	d074      	beq.n	800730c <__ieee754_sqrt+0x150>
 8007222:	07d4      	lsls	r4, r2, #31
 8007224:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007228:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800722c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007230:	bf5e      	ittt	pl
 8007232:	0fda      	lsrpl	r2, r3, #31
 8007234:	005b      	lslpl	r3, r3, #1
 8007236:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800723a:	2400      	movs	r4, #0
 800723c:	0fda      	lsrs	r2, r3, #31
 800723e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007242:	107f      	asrs	r7, r7, #1
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	2516      	movs	r5, #22
 8007248:	4620      	mov	r0, r4
 800724a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800724e:	1886      	adds	r6, r0, r2
 8007250:	428e      	cmp	r6, r1
 8007252:	bfde      	ittt	le
 8007254:	1b89      	suble	r1, r1, r6
 8007256:	18b0      	addle	r0, r6, r2
 8007258:	18a4      	addle	r4, r4, r2
 800725a:	0049      	lsls	r1, r1, #1
 800725c:	3d01      	subs	r5, #1
 800725e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007262:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007266:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800726a:	d1f0      	bne.n	800724e <__ieee754_sqrt+0x92>
 800726c:	462a      	mov	r2, r5
 800726e:	f04f 0e20 	mov.w	lr, #32
 8007272:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007276:	4281      	cmp	r1, r0
 8007278:	eb06 0c05 	add.w	ip, r6, r5
 800727c:	dc02      	bgt.n	8007284 <__ieee754_sqrt+0xc8>
 800727e:	d113      	bne.n	80072a8 <__ieee754_sqrt+0xec>
 8007280:	459c      	cmp	ip, r3
 8007282:	d811      	bhi.n	80072a8 <__ieee754_sqrt+0xec>
 8007284:	f1bc 0f00 	cmp.w	ip, #0
 8007288:	eb0c 0506 	add.w	r5, ip, r6
 800728c:	da43      	bge.n	8007316 <__ieee754_sqrt+0x15a>
 800728e:	2d00      	cmp	r5, #0
 8007290:	db41      	blt.n	8007316 <__ieee754_sqrt+0x15a>
 8007292:	f100 0801 	add.w	r8, r0, #1
 8007296:	1a09      	subs	r1, r1, r0
 8007298:	459c      	cmp	ip, r3
 800729a:	bf88      	it	hi
 800729c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80072a0:	eba3 030c 	sub.w	r3, r3, ip
 80072a4:	4432      	add	r2, r6
 80072a6:	4640      	mov	r0, r8
 80072a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80072ac:	f1be 0e01 	subs.w	lr, lr, #1
 80072b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80072b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80072bc:	d1db      	bne.n	8007276 <__ieee754_sqrt+0xba>
 80072be:	430b      	orrs	r3, r1
 80072c0:	d006      	beq.n	80072d0 <__ieee754_sqrt+0x114>
 80072c2:	1c50      	adds	r0, r2, #1
 80072c4:	bf13      	iteet	ne
 80072c6:	3201      	addne	r2, #1
 80072c8:	3401      	addeq	r4, #1
 80072ca:	4672      	moveq	r2, lr
 80072cc:	f022 0201 	bicne.w	r2, r2, #1
 80072d0:	1063      	asrs	r3, r4, #1
 80072d2:	0852      	lsrs	r2, r2, #1
 80072d4:	07e1      	lsls	r1, r4, #31
 80072d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80072da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80072de:	bf48      	it	mi
 80072e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80072e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80072e8:	4614      	mov	r4, r2
 80072ea:	e781      	b.n	80071f0 <__ieee754_sqrt+0x34>
 80072ec:	0ad9      	lsrs	r1, r3, #11
 80072ee:	3815      	subs	r0, #21
 80072f0:	055b      	lsls	r3, r3, #21
 80072f2:	2900      	cmp	r1, #0
 80072f4:	d0fa      	beq.n	80072ec <__ieee754_sqrt+0x130>
 80072f6:	02cd      	lsls	r5, r1, #11
 80072f8:	d50a      	bpl.n	8007310 <__ieee754_sqrt+0x154>
 80072fa:	f1c2 0420 	rsb	r4, r2, #32
 80072fe:	fa23 f404 	lsr.w	r4, r3, r4
 8007302:	1e55      	subs	r5, r2, #1
 8007304:	4093      	lsls	r3, r2
 8007306:	4321      	orrs	r1, r4
 8007308:	1b42      	subs	r2, r0, r5
 800730a:	e78a      	b.n	8007222 <__ieee754_sqrt+0x66>
 800730c:	4610      	mov	r0, r2
 800730e:	e7f0      	b.n	80072f2 <__ieee754_sqrt+0x136>
 8007310:	0049      	lsls	r1, r1, #1
 8007312:	3201      	adds	r2, #1
 8007314:	e7ef      	b.n	80072f6 <__ieee754_sqrt+0x13a>
 8007316:	4680      	mov	r8, r0
 8007318:	e7bd      	b.n	8007296 <__ieee754_sqrt+0xda>
 800731a:	bf00      	nop
 800731c:	7ff00000 	.word	0x7ff00000

08007320 <atan>:
 8007320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	ec55 4b10 	vmov	r4, r5, d0
 8007328:	4bc3      	ldr	r3, [pc, #780]	; (8007638 <atan+0x318>)
 800732a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800732e:	429e      	cmp	r6, r3
 8007330:	46ab      	mov	fp, r5
 8007332:	dd18      	ble.n	8007366 <atan+0x46>
 8007334:	4bc1      	ldr	r3, [pc, #772]	; (800763c <atan+0x31c>)
 8007336:	429e      	cmp	r6, r3
 8007338:	dc01      	bgt.n	800733e <atan+0x1e>
 800733a:	d109      	bne.n	8007350 <atan+0x30>
 800733c:	b144      	cbz	r4, 8007350 <atan+0x30>
 800733e:	4622      	mov	r2, r4
 8007340:	462b      	mov	r3, r5
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f8 ff65 	bl	8000214 <__adddf3>
 800734a:	4604      	mov	r4, r0
 800734c:	460d      	mov	r5, r1
 800734e:	e006      	b.n	800735e <atan+0x3e>
 8007350:	f1bb 0f00 	cmp.w	fp, #0
 8007354:	f300 8131 	bgt.w	80075ba <atan+0x29a>
 8007358:	a59b      	add	r5, pc, #620	; (adr r5, 80075c8 <atan+0x2a8>)
 800735a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800735e:	ec45 4b10 	vmov	d0, r4, r5
 8007362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	4bb6      	ldr	r3, [pc, #728]	; (8007640 <atan+0x320>)
 8007368:	429e      	cmp	r6, r3
 800736a:	dc14      	bgt.n	8007396 <atan+0x76>
 800736c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007370:	429e      	cmp	r6, r3
 8007372:	dc0d      	bgt.n	8007390 <atan+0x70>
 8007374:	a396      	add	r3, pc, #600	; (adr r3, 80075d0 <atan+0x2b0>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	ee10 0a10 	vmov	r0, s0
 800737e:	4629      	mov	r1, r5
 8007380:	f7f8 ff48 	bl	8000214 <__adddf3>
 8007384:	4baf      	ldr	r3, [pc, #700]	; (8007644 <atan+0x324>)
 8007386:	2200      	movs	r2, #0
 8007388:	f7f9 fb8a 	bl	8000aa0 <__aeabi_dcmpgt>
 800738c:	2800      	cmp	r0, #0
 800738e:	d1e6      	bne.n	800735e <atan+0x3e>
 8007390:	f04f 3aff 	mov.w	sl, #4294967295
 8007394:	e02b      	b.n	80073ee <atan+0xce>
 8007396:	f000 f963 	bl	8007660 <fabs>
 800739a:	4bab      	ldr	r3, [pc, #684]	; (8007648 <atan+0x328>)
 800739c:	429e      	cmp	r6, r3
 800739e:	ec55 4b10 	vmov	r4, r5, d0
 80073a2:	f300 80bf 	bgt.w	8007524 <atan+0x204>
 80073a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80073aa:	429e      	cmp	r6, r3
 80073ac:	f300 80a0 	bgt.w	80074f0 <atan+0x1d0>
 80073b0:	ee10 2a10 	vmov	r2, s0
 80073b4:	ee10 0a10 	vmov	r0, s0
 80073b8:	462b      	mov	r3, r5
 80073ba:	4629      	mov	r1, r5
 80073bc:	f7f8 ff2a 	bl	8000214 <__adddf3>
 80073c0:	4ba0      	ldr	r3, [pc, #640]	; (8007644 <atan+0x324>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	f7f8 ff24 	bl	8000210 <__aeabi_dsub>
 80073c8:	2200      	movs	r2, #0
 80073ca:	4606      	mov	r6, r0
 80073cc:	460f      	mov	r7, r1
 80073ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f8 ff1d 	bl	8000214 <__adddf3>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4630      	mov	r0, r6
 80073e0:	4639      	mov	r1, r7
 80073e2:	f7f9 f9f7 	bl	80007d4 <__aeabi_ddiv>
 80073e6:	f04f 0a00 	mov.w	sl, #0
 80073ea:	4604      	mov	r4, r0
 80073ec:	460d      	mov	r5, r1
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	4620      	mov	r0, r4
 80073f4:	4629      	mov	r1, r5
 80073f6:	f7f9 f8c3 	bl	8000580 <__aeabi_dmul>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4680      	mov	r8, r0
 8007400:	4689      	mov	r9, r1
 8007402:	f7f9 f8bd 	bl	8000580 <__aeabi_dmul>
 8007406:	a374      	add	r3, pc, #464	; (adr r3, 80075d8 <atan+0x2b8>)
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	f7f9 f8b6 	bl	8000580 <__aeabi_dmul>
 8007414:	a372      	add	r3, pc, #456	; (adr r3, 80075e0 <atan+0x2c0>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f8 fefb 	bl	8000214 <__adddf3>
 800741e:	4632      	mov	r2, r6
 8007420:	463b      	mov	r3, r7
 8007422:	f7f9 f8ad 	bl	8000580 <__aeabi_dmul>
 8007426:	a370      	add	r3, pc, #448	; (adr r3, 80075e8 <atan+0x2c8>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f7f8 fef2 	bl	8000214 <__adddf3>
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	f7f9 f8a4 	bl	8000580 <__aeabi_dmul>
 8007438:	a36d      	add	r3, pc, #436	; (adr r3, 80075f0 <atan+0x2d0>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f8 fee9 	bl	8000214 <__adddf3>
 8007442:	4632      	mov	r2, r6
 8007444:	463b      	mov	r3, r7
 8007446:	f7f9 f89b 	bl	8000580 <__aeabi_dmul>
 800744a:	a36b      	add	r3, pc, #428	; (adr r3, 80075f8 <atan+0x2d8>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f8 fee0 	bl	8000214 <__adddf3>
 8007454:	4632      	mov	r2, r6
 8007456:	463b      	mov	r3, r7
 8007458:	f7f9 f892 	bl	8000580 <__aeabi_dmul>
 800745c:	a368      	add	r3, pc, #416	; (adr r3, 8007600 <atan+0x2e0>)
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f7f8 fed7 	bl	8000214 <__adddf3>
 8007466:	4642      	mov	r2, r8
 8007468:	464b      	mov	r3, r9
 800746a:	f7f9 f889 	bl	8000580 <__aeabi_dmul>
 800746e:	a366      	add	r3, pc, #408	; (adr r3, 8007608 <atan+0x2e8>)
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	4680      	mov	r8, r0
 8007476:	4689      	mov	r9, r1
 8007478:	4630      	mov	r0, r6
 800747a:	4639      	mov	r1, r7
 800747c:	f7f9 f880 	bl	8000580 <__aeabi_dmul>
 8007480:	a363      	add	r3, pc, #396	; (adr r3, 8007610 <atan+0x2f0>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f7f8 fec3 	bl	8000210 <__aeabi_dsub>
 800748a:	4632      	mov	r2, r6
 800748c:	463b      	mov	r3, r7
 800748e:	f7f9 f877 	bl	8000580 <__aeabi_dmul>
 8007492:	a361      	add	r3, pc, #388	; (adr r3, 8007618 <atan+0x2f8>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f8 feba 	bl	8000210 <__aeabi_dsub>
 800749c:	4632      	mov	r2, r6
 800749e:	463b      	mov	r3, r7
 80074a0:	f7f9 f86e 	bl	8000580 <__aeabi_dmul>
 80074a4:	a35e      	add	r3, pc, #376	; (adr r3, 8007620 <atan+0x300>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f7f8 feb1 	bl	8000210 <__aeabi_dsub>
 80074ae:	4632      	mov	r2, r6
 80074b0:	463b      	mov	r3, r7
 80074b2:	f7f9 f865 	bl	8000580 <__aeabi_dmul>
 80074b6:	a35c      	add	r3, pc, #368	; (adr r3, 8007628 <atan+0x308>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f7f8 fea8 	bl	8000210 <__aeabi_dsub>
 80074c0:	4632      	mov	r2, r6
 80074c2:	463b      	mov	r3, r7
 80074c4:	f7f9 f85c 	bl	8000580 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4640      	mov	r0, r8
 80074ce:	4649      	mov	r1, r9
 80074d0:	f7f8 fea0 	bl	8000214 <__adddf3>
 80074d4:	4622      	mov	r2, r4
 80074d6:	462b      	mov	r3, r5
 80074d8:	f7f9 f852 	bl	8000580 <__aeabi_dmul>
 80074dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	d14b      	bne.n	800757e <atan+0x25e>
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f8 fe91 	bl	8000210 <__aeabi_dsub>
 80074ee:	e72c      	b.n	800734a <atan+0x2a>
 80074f0:	ee10 0a10 	vmov	r0, s0
 80074f4:	4b53      	ldr	r3, [pc, #332]	; (8007644 <atan+0x324>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f8 fe89 	bl	8000210 <__aeabi_dsub>
 80074fe:	4b51      	ldr	r3, [pc, #324]	; (8007644 <atan+0x324>)
 8007500:	4606      	mov	r6, r0
 8007502:	460f      	mov	r7, r1
 8007504:	2200      	movs	r2, #0
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	f7f8 fe83 	bl	8000214 <__adddf3>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f9 f95d 	bl	80007d4 <__aeabi_ddiv>
 800751a:	f04f 0a01 	mov.w	sl, #1
 800751e:	4604      	mov	r4, r0
 8007520:	460d      	mov	r5, r1
 8007522:	e764      	b.n	80073ee <atan+0xce>
 8007524:	4b49      	ldr	r3, [pc, #292]	; (800764c <atan+0x32c>)
 8007526:	429e      	cmp	r6, r3
 8007528:	da1d      	bge.n	8007566 <atan+0x246>
 800752a:	ee10 0a10 	vmov	r0, s0
 800752e:	4b48      	ldr	r3, [pc, #288]	; (8007650 <atan+0x330>)
 8007530:	2200      	movs	r2, #0
 8007532:	4629      	mov	r1, r5
 8007534:	f7f8 fe6c 	bl	8000210 <__aeabi_dsub>
 8007538:	4b45      	ldr	r3, [pc, #276]	; (8007650 <atan+0x330>)
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	2200      	movs	r2, #0
 8007540:	4620      	mov	r0, r4
 8007542:	4629      	mov	r1, r5
 8007544:	f7f9 f81c 	bl	8000580 <__aeabi_dmul>
 8007548:	4b3e      	ldr	r3, [pc, #248]	; (8007644 <atan+0x324>)
 800754a:	2200      	movs	r2, #0
 800754c:	f7f8 fe62 	bl	8000214 <__adddf3>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f9 f93c 	bl	80007d4 <__aeabi_ddiv>
 800755c:	f04f 0a02 	mov.w	sl, #2
 8007560:	4604      	mov	r4, r0
 8007562:	460d      	mov	r5, r1
 8007564:	e743      	b.n	80073ee <atan+0xce>
 8007566:	462b      	mov	r3, r5
 8007568:	ee10 2a10 	vmov	r2, s0
 800756c:	4939      	ldr	r1, [pc, #228]	; (8007654 <atan+0x334>)
 800756e:	2000      	movs	r0, #0
 8007570:	f7f9 f930 	bl	80007d4 <__aeabi_ddiv>
 8007574:	f04f 0a03 	mov.w	sl, #3
 8007578:	4604      	mov	r4, r0
 800757a:	460d      	mov	r5, r1
 800757c:	e737      	b.n	80073ee <atan+0xce>
 800757e:	4b36      	ldr	r3, [pc, #216]	; (8007658 <atan+0x338>)
 8007580:	4e36      	ldr	r6, [pc, #216]	; (800765c <atan+0x33c>)
 8007582:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007586:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800758a:	e9da 2300 	ldrd	r2, r3, [sl]
 800758e:	f7f8 fe3f 	bl	8000210 <__aeabi_dsub>
 8007592:	4622      	mov	r2, r4
 8007594:	462b      	mov	r3, r5
 8007596:	f7f8 fe3b 	bl	8000210 <__aeabi_dsub>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80075a2:	f7f8 fe35 	bl	8000210 <__aeabi_dsub>
 80075a6:	f1bb 0f00 	cmp.w	fp, #0
 80075aa:	4604      	mov	r4, r0
 80075ac:	460d      	mov	r5, r1
 80075ae:	f6bf aed6 	bge.w	800735e <atan+0x3e>
 80075b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075b6:	461d      	mov	r5, r3
 80075b8:	e6d1      	b.n	800735e <atan+0x3e>
 80075ba:	a51d      	add	r5, pc, #116	; (adr r5, 8007630 <atan+0x310>)
 80075bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80075c0:	e6cd      	b.n	800735e <atan+0x3e>
 80075c2:	bf00      	nop
 80075c4:	f3af 8000 	nop.w
 80075c8:	54442d18 	.word	0x54442d18
 80075cc:	bff921fb 	.word	0xbff921fb
 80075d0:	8800759c 	.word	0x8800759c
 80075d4:	7e37e43c 	.word	0x7e37e43c
 80075d8:	e322da11 	.word	0xe322da11
 80075dc:	3f90ad3a 	.word	0x3f90ad3a
 80075e0:	24760deb 	.word	0x24760deb
 80075e4:	3fa97b4b 	.word	0x3fa97b4b
 80075e8:	a0d03d51 	.word	0xa0d03d51
 80075ec:	3fb10d66 	.word	0x3fb10d66
 80075f0:	c54c206e 	.word	0xc54c206e
 80075f4:	3fb745cd 	.word	0x3fb745cd
 80075f8:	920083ff 	.word	0x920083ff
 80075fc:	3fc24924 	.word	0x3fc24924
 8007600:	5555550d 	.word	0x5555550d
 8007604:	3fd55555 	.word	0x3fd55555
 8007608:	2c6a6c2f 	.word	0x2c6a6c2f
 800760c:	bfa2b444 	.word	0xbfa2b444
 8007610:	52defd9a 	.word	0x52defd9a
 8007614:	3fadde2d 	.word	0x3fadde2d
 8007618:	af749a6d 	.word	0xaf749a6d
 800761c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007620:	fe231671 	.word	0xfe231671
 8007624:	3fbc71c6 	.word	0x3fbc71c6
 8007628:	9998ebc4 	.word	0x9998ebc4
 800762c:	3fc99999 	.word	0x3fc99999
 8007630:	54442d18 	.word	0x54442d18
 8007634:	3ff921fb 	.word	0x3ff921fb
 8007638:	440fffff 	.word	0x440fffff
 800763c:	7ff00000 	.word	0x7ff00000
 8007640:	3fdbffff 	.word	0x3fdbffff
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	3ff2ffff 	.word	0x3ff2ffff
 800764c:	40038000 	.word	0x40038000
 8007650:	3ff80000 	.word	0x3ff80000
 8007654:	bff00000 	.word	0xbff00000
 8007658:	08007798 	.word	0x08007798
 800765c:	08007778 	.word	0x08007778

08007660 <fabs>:
 8007660:	ec51 0b10 	vmov	r0, r1, d0
 8007664:	ee10 2a10 	vmov	r2, s0
 8007668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800766c:	ec43 2b10 	vmov	d0, r2, r3
 8007670:	4770      	bx	lr
 8007672:	0000      	movs	r0, r0
 8007674:	0000      	movs	r0, r0
	...

08007678 <nan>:
 8007678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007680 <nan+0x8>
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	00000000 	.word	0x00000000
 8007684:	7ff80000 	.word	0x7ff80000

08007688 <__errno>:
 8007688:	4b01      	ldr	r3, [pc, #4]	; (8007690 <__errno+0x8>)
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	2000000c 	.word	0x2000000c

08007694 <__libc_init_array>:
 8007694:	b570      	push	{r4, r5, r6, lr}
 8007696:	4d0d      	ldr	r5, [pc, #52]	; (80076cc <__libc_init_array+0x38>)
 8007698:	4c0d      	ldr	r4, [pc, #52]	; (80076d0 <__libc_init_array+0x3c>)
 800769a:	1b64      	subs	r4, r4, r5
 800769c:	10a4      	asrs	r4, r4, #2
 800769e:	2600      	movs	r6, #0
 80076a0:	42a6      	cmp	r6, r4
 80076a2:	d109      	bne.n	80076b8 <__libc_init_array+0x24>
 80076a4:	4d0b      	ldr	r5, [pc, #44]	; (80076d4 <__libc_init_array+0x40>)
 80076a6:	4c0c      	ldr	r4, [pc, #48]	; (80076d8 <__libc_init_array+0x44>)
 80076a8:	f000 f82e 	bl	8007708 <_init>
 80076ac:	1b64      	subs	r4, r4, r5
 80076ae:	10a4      	asrs	r4, r4, #2
 80076b0:	2600      	movs	r6, #0
 80076b2:	42a6      	cmp	r6, r4
 80076b4:	d105      	bne.n	80076c2 <__libc_init_array+0x2e>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076bc:	4798      	blx	r3
 80076be:	3601      	adds	r6, #1
 80076c0:	e7ee      	b.n	80076a0 <__libc_init_array+0xc>
 80076c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c6:	4798      	blx	r3
 80076c8:	3601      	adds	r6, #1
 80076ca:	e7f2      	b.n	80076b2 <__libc_init_array+0x1e>
 80076cc:	080077c0 	.word	0x080077c0
 80076d0:	080077c0 	.word	0x080077c0
 80076d4:	080077c0 	.word	0x080077c0
 80076d8:	080077c8 	.word	0x080077c8

080076dc <memcpy>:
 80076dc:	440a      	add	r2, r1
 80076de:	4291      	cmp	r1, r2
 80076e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e4:	d100      	bne.n	80076e8 <memcpy+0xc>
 80076e6:	4770      	bx	lr
 80076e8:	b510      	push	{r4, lr}
 80076ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f2:	4291      	cmp	r1, r2
 80076f4:	d1f9      	bne.n	80076ea <memcpy+0xe>
 80076f6:	bd10      	pop	{r4, pc}

080076f8 <memset>:
 80076f8:	4402      	add	r2, r0
 80076fa:	4603      	mov	r3, r0
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d100      	bne.n	8007702 <memset+0xa>
 8007700:	4770      	bx	lr
 8007702:	f803 1b01 	strb.w	r1, [r3], #1
 8007706:	e7f9      	b.n	80076fc <memset+0x4>

08007708 <_init>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr

08007714 <_fini>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr
