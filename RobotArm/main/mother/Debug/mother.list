
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f48  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007110  08007110  00017110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a8  080071a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b0  080071b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080071bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001944  20000070  0800722c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019b4  0800722c  000219b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016270  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab5  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00038dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002504c  00000000  00000000  0003ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001510a  00000000  00000000  0005fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c2d  00000000  00000000  00074ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014aafb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004978  00000000  00000000  0014ab4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080070f8 	.word	0x080070f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	080070f8 	.word	0x080070f8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000e84:	b084      	sub	sp, #16
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af02      	add	r7, sp, #8
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	f107 001c 	add.w	r0, r7, #28
 8000e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	f107 011c 	add.w	r1, r7, #28
 8000e9e:	2254      	movs	r2, #84	; 0x54
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 f913 	bl	80070cc <memcpy>
	device_address_ = device_address;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000eac:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000eae:	f640 033d 	movw	r3, #2109	; 0x83d
 8000eb2:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000eb4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	b299      	uxth	r1, r3
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	f107 001c 	add.w	r0, r7, #28
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f002 f838 	bl	8002f40 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000ed0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000ed4:	f001 f89c 	bl	8002010 <HAL_Delay>
}
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ee4:	b004      	add	sp, #16
 8000ee6:	4770      	bx	lr

08000ee8 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b099      	sub	sp, #100	; 0x64
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000ef0:	2320      	movs	r3, #32
 8000ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	1d18      	adds	r0, r3, #4
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	b299      	uxth	r1, r3
 8000f04:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f002 f817 	bl	8002f40 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	1d18      	adds	r0, r3, #4
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2308      	movs	r3, #8
 8000f2a:	f002 f907 	bl	800313c <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000f56:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000f6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f6e:	021b      	lsls	r3, r3, #8
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000f7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800101c <_ZN6BNO05514get_quaternionEv+0x134>
 8000f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f92:	edc7 7a07 	vstr	s15, [r7, #28]
 8000f96:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800101c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000faa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000fae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	eddf 6a18 	vldr	s13, [pc, #96]	; 800101c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8000fc6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd2:	eddf 6a12 	vldr	s13, [pc, #72]	; 800101c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fda:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 8000fde:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000fee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff4:	ee06 0a10 	vmov	s12, r0
 8000ff8:	ee06 1a90 	vmov	s13, r1
 8000ffc:	ee07 2a10 	vmov	s14, r2
 8001000:	ee07 3a90 	vmov	s15, r3
}
 8001004:	eeb0 0a46 	vmov.f32	s0, s12
 8001008:	eef0 0a66 	vmov.f32	s1, s13
 800100c:	eeb0 1a47 	vmov.f32	s2, s14
 8001010:	eef0 1a67 	vmov.f32	s3, s15
 8001014:	375c      	adds	r7, #92	; 0x5c
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	46800000 	.word	0x46800000

08001020 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b09a      	sub	sp, #104	; 0x68
 8001024:	af00      	add	r7, sp, #0
 8001026:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f7ff ff5d 	bl	8000ee8 <_ZN6BNO05514get_quaternionEv>
 800102e:	eeb0 6a40 	vmov.f32	s12, s0
 8001032:	eef0 6a60 	vmov.f32	s13, s1
 8001036:	eeb0 7a41 	vmov.f32	s14, s2
 800103a:	eef0 7a61 	vmov.f32	s15, s3
 800103e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001042:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001046:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800104a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800104e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001052:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800105e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106a:	ee17 0a90 	vmov	r0, s15
 800106e:	f7ff fa2f 	bl	80004d0 <__aeabi_f2d>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	f7ff f8cd 	bl	8000214 <__adddf3>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 8001082:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001086:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800108a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109e:	ee17 0a90 	vmov	r0, s15
 80010a2:	f7ff fa15 	bl	80004d0 <__aeabi_f2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	f7ff f8b3 	bl	8000214 <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4960      	ldr	r1, [pc, #384]	; (8001238 <_ZN6BNO0559get_eularEv+0x218>)
 80010b8:	f7ff f8aa 	bl	8000210 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 80010c4:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 80010c8:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80010cc:	f005 fa8c 	bl	80065e8 <atan2>
 80010d0:	ec53 2b10 	vmov	r2, r3, d0
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fd02 	bl	8000ae0 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 80010e0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80010f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	ee17 0a90 	vmov	r0, s15
 8001100:	f7ff f9e6 	bl	80004d0 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	f7ff f884 	bl	8000214 <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001114:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001118:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b45      	ldr	r3, [pc, #276]	; (8001238 <_ZN6BNO0559get_eularEv+0x218>)
 8001122:	4620      	mov	r0, r4
 8001124:	4629      	mov	r1, r5
 8001126:	f7ff fcb1 	bl	8000a8c <__aeabi_dcmpge>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001130:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001134:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001230 <_ZN6BNO0559get_eularEv+0x210>
 8001138:	f005 fa10 	bl	800655c <copysign>
 800113c:	ec53 2b10 	vmov	r2, r3, d0
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fccc 	bl	8000ae0 <__aeabi_d2f>
 8001148:	4603      	mov	r3, r0
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	e00b      	b.n	8001166 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800114e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001152:	f005 fa15 	bl	8006580 <asin>
 8001156:	ec53 2b10 	vmov	r2, r3, d0
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fcbf 	bl	8000ae0 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 8001166:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800116a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001172:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001176:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800117a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001182:	ee17 0a90 	vmov	r0, s15
 8001186:	f7ff f9a3 	bl	80004d0 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	f7ff f841 	bl	8000214 <__adddf3>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 800119a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800119e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b6:	ee17 0a90 	vmov	r0, s15
 80011ba:	f7ff f989 	bl	80004d0 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	f7ff f827 	bl	8000214 <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	491a      	ldr	r1, [pc, #104]	; (8001238 <_ZN6BNO0559get_eularEv+0x218>)
 80011d0:	f7ff f81e 	bl	8000210 <__aeabi_dsub>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 80011dc:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 80011e0:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80011e4:	f005 fa00 	bl	80065e8 <atan2>
 80011e8:	ec53 2b10 	vmov	r2, r3, d0
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fc76 	bl	8000ae0 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	623b      	str	r3, [r7, #32]

	return e;
 80011f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011fc:	f107 0218 	add.w	r2, r7, #24
 8001200:	ca07      	ldmia	r2, {r0, r1, r2}
 8001202:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001206:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120c:	ee06 1a90 	vmov	s13, r1
 8001210:	ee07 2a10 	vmov	s14, r2
 8001214:	ee07 3a90 	vmov	s15, r3
}
 8001218:	eeb0 0a66 	vmov.f32	s0, s13
 800121c:	eef0 0a47 	vmov.f32	s1, s14
 8001220:	eeb0 1a67 	vmov.f32	s2, s15
 8001224:	3768      	adds	r7, #104	; 0x68
 8001226:	46bd      	mov	sp, r7
 8001228:	bdb0      	pop	{r4, r5, r7, pc}
 800122a:	bf00      	nop
 800122c:	f3af 8000 	nop.w
 8001230:	54411744 	.word	0x54411744
 8001234:	3ff921fb 	.word	0x3ff921fb
 8001238:	3ff00000 	.word	0x3ff00000

0800123c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	4613      	mov	r3, r2
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	715a      	strb	r2, [r3, #5]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	80da      	strh	r2, [r3, #6]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	601a      	str	r2, [r3, #0]
  ID = id;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	79fa      	ldrb	r2, [r7, #7]
 8001266:	711a      	strb	r2, [r3, #4]
}
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	   NeopixelTape.execute();
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8001282:	f000 fd6b 	bl	8001d5c <_ZN7WS2812C7executeEv>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000270 	.word	0x20000270
 8001294:	00000000 	.word	0x00000000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b0ae      	sub	sp, #184	; 0xb8
 800129c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f000 fe45 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f899 	bl	80013d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 fa55 	bl	8001754 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80012aa:	f000 fa2b 	bl	8001704 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80012ae:	f000 f909 	bl	80014c4 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80012b2:	f000 f93b 	bl	800152c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80012b6:	f000 f9c7 	bl	8001648 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80012ba:	f000 f9f5 	bl	80016a8 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
 80012be:	483e      	ldr	r0, [pc, #248]	; (80013b8 <main+0x120>)
 80012c0:	f000 fdd5 	bl	8001e6e <_ZN7WS2812C4initEv>

  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	493d      	ldr	r1, [pc, #244]	; (80013bc <main+0x124>)
 80012c8:	483d      	ldr	r0, [pc, #244]	; (80013c0 <main+0x128>)
 80012ca:	f004 fc56 	bl	8005b7a <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2102      	movs	r1, #2
 80012d2:	483c      	ldr	r0, [pc, #240]	; (80013c4 <main+0x12c>)
 80012d4:	f001 fcd6 	bl	8002c84 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 fe98 	bl	8002010 <HAL_Delay>

  while (!ready) {
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <main+0x130>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d116      	bne.n	8001316 <main+0x7e>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 80012e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ec:	220a      	movs	r2, #10
 80012ee:	2150      	movs	r1, #80	; 0x50
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <main+0x134>)
 80012f2:	f002 f949 	bl	8003588 <HAL_I2C_IsDeviceReady>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <main+0x76>
      ready = 1;
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <main+0x130>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e7e8      	b.n	80012e0 <main+0x48>
    } else {
      HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f000 fe7e 	bl	8002010 <HAL_Delay>
  while (!ready) {
 8001314:	e7e4      	b.n	80012e0 <main+0x48>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 8001316:	2328      	movs	r3, #40	; 0x28
 8001318:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  BNO055 bno055(hi2c1,address);
 800131c:	4c2b      	ldr	r4, [pc, #172]	; (80013cc <main+0x134>)
 800131e:	f107 050c 	add.w	r5, r7, #12
 8001322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001326:	9312      	str	r3, [sp, #72]	; 0x48
 8001328:	4668      	mov	r0, sp
 800132a:	f104 030c 	add.w	r3, r4, #12
 800132e:	2248      	movs	r2, #72	; 0x48
 8001330:	4619      	mov	r1, r3
 8001332:	f005 fecb 	bl	80070cc <memcpy>
 8001336:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff fda2 	bl	8000e84 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    e = bno055.get_eular();
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe6b 	bl	8001020 <_ZN6BNO0559get_eularEv>
 800134a:	eef0 6a40 	vmov.f32	s13, s0
 800134e:	eeb0 7a60 	vmov.f32	s14, s1
 8001352:	eef0 7a41 	vmov.f32	s15, s2
 8001356:	edc7 6a00 	vstr	s13, [r7]
 800135a:	ed87 7a01 	vstr	s14, [r7, #4]
 800135e:	edc7 7a02 	vstr	s15, [r7, #8]
	    rotate = (e.z/3.1415)*180;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8b3 	bl	80004d0 <__aeabi_f2d>
 800136a:	a311      	add	r3, pc, #68	; (adr r3, 80013b0 <main+0x118>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fa30 	bl	80007d4 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <main+0x138>)
 8001382:	f7ff f8fd 	bl	8000580 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fba7 	bl	8000ae0 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <main+0x13c>)
 8001396:	6013      	str	r3, [r2, #0]
	    rotate = (int)rotate;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <main+0x13c>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <main+0x13c>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]
	    e = bno055.get_eular();
 80013ac:	e7c8      	b.n	8001340 <main+0xa8>
 80013ae:	bf00      	nop
 80013b0:	c083126f 	.word	0xc083126f
 80013b4:	400921ca 	.word	0x400921ca
 80013b8:	20000270 	.word	0x20000270
 80013bc:	20001928 	.word	0x20001928
 80013c0:	20000188 	.word	0x20000188
 80013c4:	40020000 	.word	0x40020000
 80013c8:	200019a8 	.word	0x200019a8
 80013cc:	2000008c 	.word	0x2000008c
 80013d0:	40668000 	.word	0x40668000
 80013d4:	200019ac 	.word	0x200019ac

080013d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2234      	movs	r2, #52	; 0x34
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fe7e 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <_Z18SystemClock_Configv+0xe4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a2d      	ldr	r2, [pc, #180]	; (80014bc <_Z18SystemClock_Configv+0xe4>)
 8001406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <_Z18SystemClock_Configv+0xe4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <_Z18SystemClock_Configv+0xe8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <_Z18SystemClock_Configv+0xe8>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <_Z18SystemClock_Configv+0xe8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800144c:	2310      	movs	r3, #16
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001450:	23c0      	movs	r3, #192	; 0xc0
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001454:	2306      	movs	r3, #6
 8001456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4618      	mov	r0, r3
 8001466:	f003 f833 	bl	80044d0 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800147a:	f000 f9e5 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2101      	movs	r1, #1
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fcd1 	bl	8003e40 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80014ae:	f000 f9cb 	bl	8001848 <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	; 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ca:	4a16      	ldr	r2, [pc, #88]	; (8001524 <_ZL12MX_I2C1_Initv+0x60>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014d0:	4a15      	ldr	r2, [pc, #84]	; (8001528 <_ZL12MX_I2C1_Initv+0x64>)
 80014d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <_ZL12MX_I2C1_Initv+0x5c>)
 8001502:	f001 fbd9 	bl	8002cb8 <HAL_I2C_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001516:	f000 f997 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000008c 	.word	0x2000008c
 8001524:	40005400 	.word	0x40005400
 8001528:	000186a0 	.word	0x000186a0

0800152c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800155c:	4b38      	ldr	r3, [pc, #224]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 800155e:	4a39      	ldr	r2, [pc, #228]	; (8001644 <_ZL12MX_TIM3_Initv+0x118>)
 8001560:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 8001570:	2227      	movs	r2, #39	; 0x27
 8001572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001580:	482f      	ldr	r0, [pc, #188]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 8001582:	f003 fa43 	bl	8004a0c <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001596:	f000 f957 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4826      	ldr	r0, [pc, #152]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 80015a8:	f003 fd62 	bl	8005070 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 80015bc:	f000 f944 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015c0:	481f      	ldr	r0, [pc, #124]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 80015c2:	f003 fa72 	bl	8004aaa <HAL_TIM_PWM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf14      	ite	ne
 80015cc:	2301      	movne	r3, #1
 80015ce:	2300      	moveq	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80015d6:	f000 f937 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4619      	mov	r1, r3
 80015e8:	4815      	ldr	r0, [pc, #84]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 80015ea:	f004 f9fd 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80015fe:	f000 f923 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2360      	movs	r3, #96	; 0x60
 8001604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	4619      	mov	r1, r3
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 800161a:	f003 fc67 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800162e:	f000 f90b 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <_ZL12MX_TIM3_Initv+0x114>)
 8001634:	f000 fa1e 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 8001638:	bf00      	nop
 800163a:	3738      	adds	r7, #56	; 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200000e0 	.word	0x200000e0
 8001644:	40000400 	.word	0x40000400

08001648 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001654:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001656:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800166c:	220c      	movs	r2, #12
 800166e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <_ZL19MX_USART2_UART_Initv+0x54>)
 800167e:	f004 fa2f 	bl	8005ae0 <HAL_UART_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8001692:	f000 f8d9 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000188 	.word	0x20000188
 80016a0:	40004400 	.word	0x40004400
 80016a4:	000f4240 	.word	0x000f4240

080016a8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <_ZL19MX_USART3_UART_Initv+0x58>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80016e0:	f004 f9fe 	bl	8005ae0 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf14      	ite	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	2300      	moveq	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80016f4:	f000 f8a8 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200001cc 	.word	0x200001cc
 8001700:	40004800 	.word	0x40004800

08001704 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_ZL11MX_DMA_Initv+0x4c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <_ZL11MX_DMA_Initv+0x4c>)
 8001714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <_ZL11MX_DMA_Initv+0x4c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	200f      	movs	r0, #15
 800172c:	f000 fd6f 	bl	800220e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001730:	200f      	movs	r0, #15
 8001732:	f000 fd88 	bl	8002246 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2010      	movs	r0, #16
 800173c:	f000 fd67 	bl	800220e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001740:	2010      	movs	r0, #16
 8001742:	f000 fd80 	bl	8002246 <HAL_NVIC_EnableIRQ>

}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a32      	ldr	r2, [pc, #200]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b2c      	ldr	r3, [pc, #176]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a2b      	ldr	r2, [pc, #172]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a24      	ldr	r2, [pc, #144]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <_ZL12MX_GPIO_Initv+0xe8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2102      	movs	r1, #2
 80017de:	4818      	ldr	r0, [pc, #96]	; (8001840 <_ZL12MX_GPIO_Initv+0xec>)
 80017e0:	f001 fa50 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 80017e4:	2301      	movs	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <_ZL12MX_GPIO_Initv+0xec>)
 80017f8:	f001 f8b0 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 80017fc:	2302      	movs	r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	480b      	ldr	r0, [pc, #44]	; (8001840 <_ZL12MX_GPIO_Initv+0xec>)
 8001814:	f001 f8a2 	bl	800295c <HAL_GPIO_Init>

  /*Configure GPIO pin : slidesw_Pin */
  GPIO_InitStruct.Pin = slidesw_Pin;
 8001818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(slidesw_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <_ZL12MX_GPIO_Initv+0xf0>)
 800182e:	f001 f895 	bl	800295c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d11e      	bne.n	80018a2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186a:	4293      	cmp	r3, r2
 800186c:	d119      	bne.n	80018a2 <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	490f      	ldr	r1, [pc, #60]	; (80018b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001874:	480f      	ldr	r0, [pc, #60]	; (80018b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001876:	f000 fa59 	bl	8001d2c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001880:	f7ff fcdc 	bl	800123c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8001884:	2201      	movs	r2, #1
 8001886:	490c      	ldr	r1, [pc, #48]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800188a:	f7ff fcd7 	bl	800123c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 800188e:	2202      	movs	r2, #2
 8001890:	4909      	ldr	r1, [pc, #36]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001894:	f7ff fcd2 	bl	800123c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 8001898:	2203      	movs	r2, #3
 800189a:	4907      	ldr	r1, [pc, #28]	; (80018b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800189c:	480a      	ldr	r0, [pc, #40]	; (80018c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800189e:	f7ff fccd 	bl	800123c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000128 	.word	0x20000128
 80018b0:	200000e0 	.word	0x200000e0
 80018b4:	20000270 	.word	0x20000270
 80018b8:	20000188 	.word	0x20000188
 80018bc:	200018f8 	.word	0x200018f8
 80018c0:	20001904 	.word	0x20001904
 80018c4:	20001910 	.word	0x20001910
 80018c8:	2000191c 	.word	0x2000191c

080018cc <_GLOBAL__sub_I_hi2c1>:
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff ffbd 	bl	8001854 <_Z41__static_initialization_and_destruction_0ii>
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <HAL_MspInit+0x4c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_MspInit+0x4c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_I2C_MspInit+0x84>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12c      	bne.n	80019a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800196a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197c:	2304      	movs	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_I2C_MspInit+0x8c>)
 8001988:	f000 ffe8 	bl	800295c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 8001996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_I2C_MspInit+0x88>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_TIM_Base_MspInit+0xa8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d145      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_TIM_Base_MspInit+0xac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a24      	ldr	r2, [pc, #144]	; (8001a68 <HAL_TIM_Base_MspInit+0xac>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_TIM_Base_MspInit+0xac>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 80019ec:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <HAL_TIM_Base_MspInit+0xb4>)
 80019ee:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 80019f2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019f6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a12:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a22:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a2a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a34:	f000 fc22 	bl	800227c <HAL_DMA_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001a3e:	f7ff ff03 	bl	8001848 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
 8001a48:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_TIM_Base_MspInit+0xb0>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	20000128 	.word	0x20000128
 8001a70:	40026070 	.word	0x40026070

08001a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_TIM_MspPostInit+0x68>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11d      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_TIM_MspPostInit+0x6c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_TIM_MspPostInit+0x6c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_TIM_MspPostInit+0x6c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_TIM_MspPostInit+0x70>)
 8001ace:	f000 ff45 	bl	800295c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3720      	adds	r7, #32
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a59      	ldr	r2, [pc, #356]	; (8001c6c <HAL_UART_MspInit+0x184>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d15c      	bne.n	8001bc4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a57      	ldr	r2, [pc, #348]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b55      	ldr	r3, [pc, #340]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	4b51      	ldr	r3, [pc, #324]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b4e      	ldr	r3, [pc, #312]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b42:	230c      	movs	r3, #12
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4845      	ldr	r0, [pc, #276]	; (8001c74 <HAL_UART_MspInit+0x18c>)
 8001b5e:	f000 fefd 	bl	800295c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b62:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b64:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_UART_MspInit+0x194>)
 8001b66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b68:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b70:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b84:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b98:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001b9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b9e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ba6:	4834      	ldr	r0, [pc, #208]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001ba8:	f000 fb68 	bl	800227c <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bb2:	f7ff fe49 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001bba:	639a      	str	r2, [r3, #56]	; 0x38
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <HAL_UART_MspInit+0x190>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bc2:	e04f      	b.n	8001c64 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <HAL_UART_MspInit+0x198>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d14a      	bne.n	8001c64 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a1f      	ldr	r2, [pc, #124]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <HAL_UART_MspInit+0x188>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c22:	2320      	movs	r3, #32
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c32:	2307      	movs	r3, #7
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4811      	ldr	r0, [pc, #68]	; (8001c84 <HAL_UART_MspInit+0x19c>)
 8001c3e:	f000 fe8d 	bl	800295c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c54:	2307      	movs	r3, #7
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480a      	ldr	r0, [pc, #40]	; (8001c88 <HAL_UART_MspInit+0x1a0>)
 8001c60:	f000 fe7c 	bl	800295c <HAL_GPIO_Init>
}
 8001c64:	bf00      	nop
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40020000 	.word	0x40020000
 8001c78:	20000210 	.word	0x20000210
 8001c7c:	40026088 	.word	0x40026088
 8001c80:	40004800 	.word	0x40004800
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020400 	.word	0x40020400

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <NMI_Handler+0x4>

08001c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c96:	e7fe      	b.n	8001c96 <HardFault_Handler+0x4>

08001c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler+0x4>

08001c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd8:	f000 f97a 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Stream4_IRQHandler+0x10>)
 8001ce6:	f000 fbcf 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000128 	.word	0x20000128

08001cf4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Stream5_IRQHandler+0x10>)
 8001cfa:	f000 fbc5 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000210 	.word	0x20000210

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	609a      	str	r2, [r3, #8]
}
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_ZN7WS2812C7executeEv>:

void WS2812C::show(){
	pwm_buf_status = 1;
}

void WS2812C::execute(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6a:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d179      	bne.n	8001e66 <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	2bf9      	cmp	r3, #249	; 0xf9
 8001d7a:	dc0a      	bgt.n	8001d92 <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3326      	adds	r3, #38	; 0x26
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	2200      	movs	r2, #0
 8001d88:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	e7f1      	b.n	8001d76 <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b2f      	cmp	r3, #47	; 0x2f
 8001d9a:	dc52      	bgt.n	8001e42 <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	dc49      	bgt.n	8001e3a <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 8001da6:	2307      	movs	r3, #7
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db40      	blt.n	8001e32 <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	18ca      	adds	r2, r1, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	fa42 f303 	asr.w	r3, r2, r3
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d114      	bne.n	8001e02 <_ZN7WS2812C7executeEv+0xa6>
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	441a      	add	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	4413      	add	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	3326      	adds	r3, #38	; 0x26
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	2214      	movs	r2, #20
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	e013      	b.n	8001e2a <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	441a      	add	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f1c3 0307 	rsb	r3, r3, #7
 8001e1c:	4413      	add	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	3326      	adds	r3, #38	; 0x26
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	220a      	movs	r2, #10
 8001e28:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e7bb      	b.n	8001daa <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e7b2      	b.n	8001da0 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	e7a9      	b.n	8001d96 <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6858      	ldr	r0, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001e52:	f240 537a 	movw	r3, #1402	; 0x57a
 8001e56:	f002 fe81 	bl	8004b5c <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 8001e66:	bf00      	nop
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2bf9      	cmp	r3, #249	; 0xf9
 8001e7e:	dc0a      	bgt.n	8001e96 <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3326      	adds	r3, #38	; 0x26
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e7f1      	b.n	8001e7a <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8001e96:	23fa      	movs	r3, #250	; 0xfa
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001ea0:	da0a      	bge.n	8001eb8 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3326      	adds	r3, #38	; 0x26
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	220a      	movs	r2, #10
 8001eae:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	e7f0      	b.n	8001e9a <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6858      	ldr	r0, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001ec8:	f240 537a 	movw	r3, #1402	; 0x57a
 8001ecc:	f002 fe46 	bl	8004b5c <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ff01 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f005 f8bd 	bl	8007084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7ff f9c5 	bl	8001298 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f1c:	080071bc 	.word	0x080071bc
  ldr r2, =_sbss
 8001f20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f24:	200019b4 	.word	0x200019b4

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_Init+0x40>)
 8001f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_Init+0x40>)
 8001f42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x40>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 f94f 	bl	80021f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fcbc 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f967 	bl	8002262 <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f92f 	bl	800220e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	200019b0 	.word	0x200019b0

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200019b0 	.word	0x200019b0

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffde 	bl	8001ff8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000008 	.word	0x20000008

08002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002074:	4013      	ands	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <__NVIC_SetPriorityGrouping+0x44>)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	60d3      	str	r3, [r2, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__NVIC_GetPriorityGrouping+0x18>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 0307 	and.w	r3, r3, #7
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <__NVIC_EnableIRQ+0x38>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c4:	d301      	bcc.n	80021ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00f      	b.n	80021ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <SysTick_Config+0x40>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d2:	210f      	movs	r1, #15
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f7ff ff8e 	bl	80020f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <SysTick_Config+0x40>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <SysTick_Config+0x40>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff29 	bl	8002058 <__NVIC_SetPriorityGrouping>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002220:	f7ff ff3e 	bl	80020a0 <__NVIC_GetPriorityGrouping>
 8002224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff8e 	bl	800214c <NVIC_EncodePriority>
 8002230:	4602      	mov	r2, r0
 8002232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff5d 	bl	80020f8 <__NVIC_SetPriority>
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff31 	bl	80020bc <__NVIC_EnableIRQ>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffa2 	bl	80021b4 <SysTick_Config>
 8002270:	4603      	mov	r3, r0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff feb6 	bl	8001ff8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e099      	b.n	80023cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b8:	e00f      	b.n	80022da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ba:	f7ff fe9d 	bl	8001ff8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d908      	bls.n	80022da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2203      	movs	r2, #3
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e078      	b.n	80023cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e8      	bne.n	80022ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_DMA_Init+0x158>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4313      	orrs	r3, r2
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f023 0307 	bic.w	r3, r3, #7
 800235a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b04      	cmp	r3, #4
 800236c:	d117      	bne.n	800239e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fa6f 	bl	8002864 <DMA_CheckFifoParam>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2240      	movs	r2, #64	; 0x40
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800239a:	2301      	movs	r3, #1
 800239c:	e016      	b.n	80023cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa26 	bl	80027f8 <DMA_CalcBaseAndBitshift>
 80023ac:	4603      	mov	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	223f      	movs	r2, #63	; 0x3f
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	f010803f 	.word	0xf010803f

080023d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_DMA_Start_IT+0x26>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e040      	b.n	8002480 <HAL_DMA_Start_IT+0xa8>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d12f      	bne.n	8002472 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f9b8 	bl	800279c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	223f      	movs	r2, #63	; 0x3f
 8002432:	409a      	lsls	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0216 	orr.w	r2, r2, #22
 8002446:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0208 	orr.w	r2, r2, #8
 800245e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e005      	b.n	800247e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800247a:	2302      	movs	r3, #2
 800247c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800247e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002494:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_DMA_IRQHandler+0x248>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a8e      	ldr	r2, [pc, #568]	; (80026d4 <HAL_DMA_IRQHandler+0x24c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2208      	movs	r2, #8
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2208      	movs	r2, #8
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2201      	movs	r2, #1
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2201      	movs	r2, #1
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0202 	orr.w	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2204      	movs	r2, #4
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2204      	movs	r2, #4
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0204 	orr.w	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2210      	movs	r2, #16
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d043      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d03c      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2210      	movs	r2, #16
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d018      	beq.n	80025ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d024      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e01f      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0208 	bic.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2220      	movs	r2, #32
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 808f 	beq.w	8002728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8087 	beq.w	8002728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2220      	movs	r2, #32
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d136      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0216 	bic.w	r2, r2, #22
 8002640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_DMA_IRQHandler+0x1da>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07e      	beq.n	8002794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
        }
        return;
 800269e:	e079      	b.n	8002794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d031      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e02c      	b.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
 80026ce:	bf00      	nop
 80026d0:	20000000 	.word	0x20000000
 80026d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d023      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
 80026e8:	e01e      	b.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0210 	bic.w	r2, r2, #16
 8002706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	2b00      	cmp	r3, #0
 800272e:	d032      	beq.n	8002796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d022      	beq.n	8002782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2205      	movs	r2, #5
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	d307      	bcc.n	8002770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f2      	bne.n	8002754 <HAL_DMA_IRQHandler+0x2cc>
 800276e:	e000      	b.n	8002772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	4798      	blx	r3
 8002792:	e000      	b.n	8002796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002794:	bf00      	nop
    }
  }
}
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d108      	bne.n	80027dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027da:	e007      	b.n	80027ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	60da      	str	r2, [r3, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3b10      	subs	r3, #16
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <DMA_CalcBaseAndBitshift+0x64>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <DMA_CalcBaseAndBitshift+0x68>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d909      	bls.n	800283a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	1d1a      	adds	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	659a      	str	r2, [r3, #88]	; 0x58
 8002838:	e007      	b.n	800284a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	aaaaaaab 	.word	0xaaaaaaab
 8002860:	08007128 	.word	0x08007128

08002864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d856      	bhi.n	8002932 <DMA_CheckFifoParam+0xce>
 8002884:	a201      	add	r2, pc, #4	; (adr r2, 800288c <DMA_CheckFifoParam+0x28>)
 8002886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288a:	bf00      	nop
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028af 	.word	0x080028af
 8002894:	0800289d 	.word	0x0800289d
 8002898:	08002933 	.word	0x08002933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d046      	beq.n	8002936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e043      	b.n	8002936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b6:	d140      	bne.n	800293a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e03d      	b.n	800293a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c6:	d121      	bne.n	800290c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d837      	bhi.n	800293e <DMA_CheckFifoParam+0xda>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <DMA_CheckFifoParam+0x70>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028eb 	.word	0x080028eb
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	080028fd 	.word	0x080028fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e030      	b.n	800294c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d025      	beq.n	8002942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e022      	b.n	8002942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800290a:	e01c      	b.n	8002946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d903      	bls.n	800291a <DMA_CheckFifoParam+0xb6>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d003      	beq.n	8002920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002918:	e018      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
      break;
 800291e:	e015      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e00b      	b.n	800294a <DMA_CheckFifoParam+0xe6>
      break;
 8002932:	bf00      	nop
 8002934:	e00a      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e008      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e006      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e004      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;   
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
    }
  } 
  
  return status; 
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop

0800295c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	e165      	b.n	8002c44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 8154 	bne.w	8002c3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d005      	beq.n	80029ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d130      	bne.n	8002a10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2203      	movs	r2, #3
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 0201 	and.w	r2, r3, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d017      	beq.n	8002a4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d123      	bne.n	8002aa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	69b9      	ldr	r1, [r7, #24]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80ae 	beq.w	8002c3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <HAL_GPIO_Init+0x300>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a5c      	ldr	r2, [pc, #368]	; (8002c5c <HAL_GPIO_Init+0x300>)
 8002aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b5a      	ldr	r3, [pc, #360]	; (8002c5c <HAL_GPIO_Init+0x300>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afe:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	3302      	adds	r3, #2
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4f      	ldr	r2, [pc, #316]	; (8002c64 <HAL_GPIO_Init+0x308>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x21a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_GPIO_Init+0x30c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x216>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_GPIO_Init+0x310>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x212>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4c      	ldr	r2, [pc, #304]	; (8002c70 <HAL_GPIO_Init+0x314>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x20e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <HAL_GPIO_Init+0x318>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x20a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <HAL_GPIO_Init+0x31c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x206>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a49      	ldr	r2, [pc, #292]	; (8002c7c <HAL_GPIO_Init+0x320>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x202>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00c      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b5e:	2307      	movs	r3, #7
 8002b60:	e00a      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b62:	2305      	movs	r3, #5
 8002b64:	e008      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_Init+0x21c>
 8002b76:	2300      	movs	r3, #0
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b88:	4935      	ldr	r1, [pc, #212]	; (8002c60 <HAL_GPIO_Init+0x304>)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bba:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be4:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_GPIO_Init+0x324>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	f67f ae96 	bls.w	8002978 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40013800 	.word	0x40013800
 8002c64:	40020000 	.word	0x40020000
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020c00 	.word	0x40020c00
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40021400 	.word	0x40021400
 8002c7c:	40021800 	.word	0x40021800
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	619a      	str	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e12b      	b.n	8002f22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fe24 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f001 f982 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4a81      	ldr	r2, [pc, #516]	; (8002f2c <HAL_I2C_Init+0x274>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d807      	bhi.n	8002d3c <HAL_I2C_Init+0x84>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a80      	ldr	r2, [pc, #512]	; (8002f30 <HAL_I2C_Init+0x278>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bf94      	ite	ls
 8002d34:	2301      	movls	r3, #1
 8002d36:	2300      	movhi	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e006      	b.n	8002d4a <HAL_I2C_Init+0x92>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a7d      	ldr	r2, [pc, #500]	; (8002f34 <HAL_I2C_Init+0x27c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0e7      	b.n	8002f22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a78      	ldr	r2, [pc, #480]	; (8002f38 <HAL_I2C_Init+0x280>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0c9b      	lsrs	r3, r3, #18
 8002d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a6a      	ldr	r2, [pc, #424]	; (8002f2c <HAL_I2C_Init+0x274>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d802      	bhi.n	8002d8c <HAL_I2C_Init+0xd4>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	e009      	b.n	8002da0 <HAL_I2C_Init+0xe8>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	4a69      	ldr	r2, [pc, #420]	; (8002f3c <HAL_I2C_Init+0x284>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	3301      	adds	r3, #1
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002db2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	495c      	ldr	r1, [pc, #368]	; (8002f2c <HAL_I2C_Init+0x274>)
 8002dbc:	428b      	cmp	r3, r1
 8002dbe:	d819      	bhi.n	8002df4 <HAL_I2C_Init+0x13c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e59      	subs	r1, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_I2C_Init+0x138>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1e59      	subs	r1, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	e051      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002df0:	2304      	movs	r3, #4
 8002df2:	e04f      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <HAL_I2C_Init+0x168>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e012      	b.n	8002e46 <HAL_I2C_Init+0x18e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	0099      	lsls	r1, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x196>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e022      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10e      	bne.n	8002e74 <HAL_I2C_Init+0x1bc>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e58      	subs	r0, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	0099      	lsls	r1, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6809      	ldr	r1, [r1, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ec2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6911      	ldr	r1, [r2, #16]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	000186a0 	.word	0x000186a0
 8002f30:	001e847f 	.word	0x001e847f
 8002f34:	003d08ff 	.word	0x003d08ff
 8002f38:	431bde83 	.word	0x431bde83
 8002f3c:	10624dd3 	.word	0x10624dd3

08002f40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
 8002f50:	4613      	mov	r3, r2
 8002f52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff f850 	bl	8001ff8 <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 80e0 	bne.w	8003128 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4970      	ldr	r1, [pc, #448]	; (8003134 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fd86 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0d3      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2C_Master_Transmit+0x50>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e0cc      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d007      	beq.n	8002fb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2221      	movs	r2, #33	; 0x21
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	893a      	ldrh	r2, [r7, #8]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a50      	ldr	r2, [pc, #320]	; (8003138 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ff8:	8979      	ldrh	r1, [r7, #10]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fbf0 	bl	80037e4 <I2C_MasterRequestWrite>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e08d      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003024:	e066      	b.n	80030f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fe00 	bl	8003c30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d11b      	bne.n	80030c8 <HAL_I2C_Master_Transmit+0x188>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d017      	beq.n	80030c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	6a39      	ldr	r1, [r7, #32]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fdf0 	bl	8003cb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e01a      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d194      	bne.n	8003026 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
  }
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	00100002 	.word	0x00100002
 8003138:	ffff0000 	.word	0xffff0000

0800313c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08c      	sub	sp, #48	; 0x30
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	461a      	mov	r2, r3
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
 800314c:	4613      	mov	r3, r2
 800314e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7fe ff52 	bl	8001ff8 <HAL_GetTick>
 8003154:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	f040 820b 	bne.w	800357a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2319      	movs	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	497c      	ldr	r1, [pc, #496]	; (8003360 <HAL_I2C_Master_Receive+0x224>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fc88 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
 800317c:	e1fe      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2C_Master_Receive+0x50>
 8003188:	2302      	movs	r3, #2
 800318a:	e1f7      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d007      	beq.n	80031b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2222      	movs	r2, #34	; 0x22
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2210      	movs	r2, #16
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_I2C_Master_Receive+0x228>)
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fb74 	bl	80038e8 <I2C_MasterRequestRead>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e1b8      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d113      	bne.n	800323a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003212:	2300      	movs	r3, #0
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	623b      	str	r3, [r7, #32]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e18c      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	2b01      	cmp	r3, #1
 8003240:	d11b      	bne.n	800327a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e16c      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	2b02      	cmp	r3, #2
 8003280:	d11b      	bne.n	80032ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003290:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	e14c      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032e0:	e138      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	f200 80f1 	bhi.w	80034ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d123      	bne.n	800333c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fd1b 	bl	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e139      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a
 800333a:	e10b      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b02      	cmp	r3, #2
 8003342:	d14e      	bne.n	80033e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	2200      	movs	r2, #0
 800334c:	4906      	ldr	r1, [pc, #24]	; (8003368 <HAL_I2C_Master_Receive+0x22c>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fb98 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e10e      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
 800335e:	bf00      	nop
 8003360:	00100002 	.word	0x00100002
 8003364:	ffff0000 	.word	0xffff0000
 8003368:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e0:	e0b8      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2200      	movs	r2, #0
 80033ea:	4966      	ldr	r1, [pc, #408]	; (8003584 <HAL_I2C_Master_Receive+0x448>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fb49 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0bf      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2200      	movs	r2, #0
 8003446:	494f      	ldr	r1, [pc, #316]	; (8003584 <HAL_I2C_Master_Receive+0x448>)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fb1b 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e091      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034cc:	e042      	b.n	8003554 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fc2e 	bl	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e04c      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d118      	bne.n	8003554 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f aec2 	bne.w	80032e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	00010004 	.word	0x00010004

08003588 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	460b      	mov	r3, r1
 8003596:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7fe fd2e 	bl	8001ff8 <HAL_GetTick>
 800359c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	f040 8111 	bne.w	80037d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2319      	movs	r3, #25
 80035b6:	2201      	movs	r2, #1
 80035b8:	4988      	ldr	r1, [pc, #544]	; (80037dc <HAL_I2C_IsDeviceReady+0x254>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa62 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
 80035c8:	e104      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_I2C_IsDeviceReady+0x50>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e0fd      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d007      	beq.n	80035fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2224      	movs	r2, #36	; 0x24
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a70      	ldr	r2, [pc, #448]	; (80037e0 <HAL_I2C_IsDeviceReady+0x258>)
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fa20 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00d      	beq.n	8003666 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003658:	d103      	bne.n	8003662 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0b6      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003674:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe fcbf 	bl	8001ff8 <HAL_GetTick>
 800367a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036aa:	e025      	b.n	80036f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ac:	f7fe fca4 	bl	8001ff8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d302      	bcc.n	80036c2 <HAL_I2C_IsDeviceReady+0x13a>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	22a0      	movs	r2, #160	; 0xa0
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2ba0      	cmp	r3, #160	; 0xa0
 8003702:	d005      	beq.n	8003710 <HAL_I2C_IsDeviceReady+0x188>
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <HAL_I2C_IsDeviceReady+0x188>
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0cd      	beq.n	80036ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d129      	bne.n	800377a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	4921      	ldr	r1, [pc, #132]	; (80037dc <HAL_I2C_IsDeviceReady+0x254>)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f994 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e036      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e02c      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003792:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2319      	movs	r3, #25
 800379a:	2201      	movs	r2, #1
 800379c:	490f      	ldr	r1, [pc, #60]	; (80037dc <HAL_I2C_IsDeviceReady+0x254>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f970 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e012      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f4ff af32 	bcc.w	8003622 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	00100002 	.word	0x00100002
 80037e0:	ffff0000 	.word	0xffff0000

080037e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	460b      	mov	r3, r1
 80037f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d006      	beq.n	800380e <I2C_MasterRequestWrite+0x2a>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d003      	beq.n	800380e <I2C_MasterRequestWrite+0x2a>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800380c:	d108      	bne.n	8003820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e00b      	b.n	8003838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	2b12      	cmp	r3, #18
 8003826:	d107      	bne.n	8003838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f91d 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385e:	d103      	bne.n	8003868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e035      	b.n	80038d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003874:	d108      	bne.n	8003888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003884:	611a      	str	r2, [r3, #16]
 8003886:	e01b      	b.n	80038c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	11db      	asrs	r3, r3, #7
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0306 	and.w	r3, r3, #6
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f063 030f 	orn	r3, r3, #15
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <I2C_MasterRequestWrite+0xfc>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f943 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e010      	b.n	80038d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4907      	ldr	r1, [pc, #28]	; (80038e4 <I2C_MasterRequestWrite+0x100>)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f933 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00010008 	.word	0x00010008
 80038e4:	00010002 	.word	0x00010002

080038e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	460b      	mov	r3, r1
 80038f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800390c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d006      	beq.n	8003922 <I2C_MasterRequestRead+0x3a>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d003      	beq.n	8003922 <I2C_MasterRequestRead+0x3a>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003920:	d108      	bne.n	8003934 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e00b      	b.n	800394c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	2b11      	cmp	r3, #17
 800393a:	d107      	bne.n	800394c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f893 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003972:	d103      	bne.n	800397c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e079      	b.n	8003a74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003988:	d108      	bne.n	800399c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800398a:	897b      	ldrh	r3, [r7, #10]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	611a      	str	r2, [r3, #16]
 800399a:	e05f      	b.n	8003a5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800399c:	897b      	ldrh	r3, [r7, #10]
 800399e:	11db      	asrs	r3, r3, #7
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f003 0306 	and.w	r3, r3, #6
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f063 030f 	orn	r3, r3, #15
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4930      	ldr	r1, [pc, #192]	; (8003a7c <I2C_MasterRequestRead+0x194>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f8b9 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e054      	b.n	8003a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4929      	ldr	r1, [pc, #164]	; (8003a80 <I2C_MasterRequestRead+0x198>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f8a9 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e044      	b.n	8003a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f831 	bl	8003a84 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a36:	d103      	bne.n	8003a40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e017      	b.n	8003a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	11db      	asrs	r3, r3, #7
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 0306 	and.w	r3, r3, #6
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f063 030e 	orn	r3, r3, #14
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4907      	ldr	r1, [pc, #28]	; (8003a80 <I2C_MasterRequestRead+0x198>)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f865 	bl	8003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	00010008 	.word	0x00010008
 8003a80:	00010002 	.word	0x00010002

08003a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a94:	e025      	b.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d021      	beq.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9e:	f7fe faab 	bl	8001ff8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d302      	bcc.n	8003ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d116      	bne.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e023      	b.n	8003b2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10d      	bne.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf0c      	ite	eq
 8003afe:	2301      	moveq	r3, #1
 8003b00:	2300      	movne	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	e00c      	b.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d0b6      	beq.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b40:	e051      	b.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	d123      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0204 	orr.w	r2, r3, #4
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e046      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d021      	beq.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fa29 	bl	8001ff8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e020      	b.n	8003c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10c      	bne.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	e00b      	b.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d18d      	bne.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c3c:	e02d      	b.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f8ce 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e02d      	b.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d021      	beq.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fe f9cf 	bl	8001ff8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d116      	bne.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e007      	b.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	2b80      	cmp	r3, #128	; 0x80
 8003ca6:	d1ca      	bne.n	8003c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cbe:	e02d      	b.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f88d 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e02d      	b.n	8003d2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d021      	beq.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7fe f98e 	bl	8001ff8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e007      	b.n	8003d2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d1ca      	bne.n	8003cc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d40:	e042      	b.n	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d119      	bne.n	8003d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0210 	mvn.w	r2, #16
 8003d58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e029      	b.n	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fe f938 	bl	8001ff8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d1b5      	bne.n	8003d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d11b      	bne.n	8003e30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0cc      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e54:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d90c      	bls.n	8003e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b63      	ldr	r3, [pc, #396]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0b8      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e94:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a58      	ldr	r2, [pc, #352]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	494d      	ldr	r1, [pc, #308]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d044      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d119      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efe:	4b3f      	ldr	r3, [pc, #252]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e067      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4934      	ldr	r1, [pc, #208]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f30:	f7fe f862 	bl	8001ff8 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fe f85e 	bl	8001ff8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e04f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d20c      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e032      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4916      	ldr	r1, [pc, #88]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	490e      	ldr	r1, [pc, #56]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fc6:	f000 f855 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	490a      	ldr	r1, [pc, #40]	; (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	5ccb      	ldrb	r3, [r1, r3]
 8003fda:	fa22 f303 	lsr.w	r3, r2, r3
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd ffc2 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023c00 	.word	0x40023c00
 8003ffc:	40023800 	.word	0x40023800
 8004000:	08007110 	.word	0x08007110
 8004004:	20000000 	.word	0x20000000
 8004008:	20000004 	.word	0x20000004

0800400c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCC_GetHCLKFreq+0x14>)
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000000 	.word	0x20000000

08004024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004028:	f7ff fff0 	bl	800400c <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	08007120 	.word	0x08007120

0800404c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004050:	f7ff ffdc 	bl	800400c <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0b5b      	lsrs	r3, r3, #13
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	08007120 	.word	0x08007120

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b0ae      	sub	sp, #184	; 0xb8
 800407a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409a:	4bcb      	ldr	r3, [pc, #812]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	f200 8204 	bhi.w	80044b0 <HAL_RCC_GetSysClockFreq+0x43c>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040e5 	.word	0x080040e5
 80040b4:	080044b1 	.word	0x080044b1
 80040b8:	080044b1 	.word	0x080044b1
 80040bc:	080044b1 	.word	0x080044b1
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	080044b1 	.word	0x080044b1
 80040c8:	080044b1 	.word	0x080044b1
 80040cc:	080044b1 	.word	0x080044b1
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080044b1 	.word	0x080044b1
 80040d8:	080044b1 	.word	0x080044b1
 80040dc:	080044b1 	.word	0x080044b1
 80040e0:	080042e5 	.word	0x080042e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4bb9      	ldr	r3, [pc, #740]	; (80043cc <HAL_RCC_GetSysClockFreq+0x358>)
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80040ea:	e1e5      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ec:	4bb7      	ldr	r3, [pc, #732]	; (80043cc <HAL_RCC_GetSysClockFreq+0x358>)
 80040ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040f2:	e1e1      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f4:	4bb4      	ldr	r3, [pc, #720]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004100:	4bb1      	ldr	r3, [pc, #708]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d071      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410c:	4bae      	ldr	r3, [pc, #696]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004118:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800411c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800412e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004132:	4622      	mov	r2, r4
 8004134:	462b      	mov	r3, r5
 8004136:	f04f 0000 	mov.w	r0, #0
 800413a:	f04f 0100 	mov.w	r1, #0
 800413e:	0159      	lsls	r1, r3, #5
 8004140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004144:	0150      	lsls	r0, r2, #5
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4621      	mov	r1, r4
 800414c:	1a51      	subs	r1, r2, r1
 800414e:	6439      	str	r1, [r7, #64]	; 0x40
 8004150:	4629      	mov	r1, r5
 8004152:	eb63 0301 	sbc.w	r3, r3, r1
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004164:	4649      	mov	r1, r9
 8004166:	018b      	lsls	r3, r1, #6
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800416e:	4641      	mov	r1, r8
 8004170:	018a      	lsls	r2, r1, #6
 8004172:	4641      	mov	r1, r8
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	63b9      	str	r1, [r7, #56]	; 0x38
 8004178:	4649      	mov	r1, r9
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800418c:	4649      	mov	r1, r9
 800418e:	00cb      	lsls	r3, r1, #3
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004196:	4641      	mov	r1, r8
 8004198:	00ca      	lsls	r2, r1, #3
 800419a:	4610      	mov	r0, r2
 800419c:	4619      	mov	r1, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	4622      	mov	r2, r4
 80041a2:	189b      	adds	r3, r3, r2
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
 80041a6:	462b      	mov	r3, r5
 80041a8:	460a      	mov	r2, r1
 80041aa:	eb42 0303 	adc.w	r3, r2, r3
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041bc:	4629      	mov	r1, r5
 80041be:	028b      	lsls	r3, r1, #10
 80041c0:	4621      	mov	r1, r4
 80041c2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c6:	4621      	mov	r1, r4
 80041c8:	028a      	lsls	r2, r1, #10
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80041e0:	f7fc fcce 	bl	8000b80 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041ee:	e067      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f0:	4b75      	ldr	r3, [pc, #468]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004200:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	67bb      	str	r3, [r7, #120]	; 0x78
 800420a:	2300      	movs	r3, #0
 800420c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800420e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4621      	mov	r1, r4
 800422c:	1a51      	subs	r1, r2, r1
 800422e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004230:	4629      	mov	r1, r5
 8004232:	eb63 0301 	sbc.w	r3, r3, r1
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004244:	4649      	mov	r1, r9
 8004246:	018b      	lsls	r3, r1, #6
 8004248:	4641      	mov	r1, r8
 800424a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800424e:	4641      	mov	r1, r8
 8004250:	018a      	lsls	r2, r1, #6
 8004252:	4641      	mov	r1, r8
 8004254:	ebb2 0a01 	subs.w	sl, r2, r1
 8004258:	4649      	mov	r1, r9
 800425a:	eb63 0b01 	sbc.w	fp, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800426a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800426e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004272:	4692      	mov	sl, r2
 8004274:	469b      	mov	fp, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb1a 0303 	adds.w	r3, sl, r3
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	462b      	mov	r3, r5
 8004280:	eb4b 0303 	adc.w	r3, fp, r3
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004292:	4629      	mov	r1, r5
 8004294:	028b      	lsls	r3, r1, #10
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800429c:	4621      	mov	r1, r4
 800429e:	028a      	lsls	r2, r1, #10
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042a8:	2200      	movs	r2, #0
 80042aa:	673b      	str	r3, [r7, #112]	; 0x70
 80042ac:	677a      	str	r2, [r7, #116]	; 0x74
 80042ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80042b2:	f7fc fc65 	bl	8000b80 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4613      	mov	r3, r2
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c0:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80042d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042da:	fbb2 f3f3 	udiv	r3, r2, r3
 80042de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042e2:	e0e9      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e4:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d069      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fc:	4b32      	ldr	r3, [pc, #200]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	099b      	lsrs	r3, r3, #6
 8004302:	2200      	movs	r2, #0
 8004304:	66bb      	str	r3, [r7, #104]	; 0x68
 8004306:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	663b      	str	r3, [r7, #96]	; 0x60
 8004310:	2300      	movs	r3, #0
 8004312:	667b      	str	r3, [r7, #100]	; 0x64
 8004314:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004318:	4622      	mov	r2, r4
 800431a:	462b      	mov	r3, r5
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	0159      	lsls	r1, r3, #5
 8004326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432a:	0150      	lsls	r0, r2, #5
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4621      	mov	r1, r4
 8004332:	1a51      	subs	r1, r2, r1
 8004334:	61b9      	str	r1, [r7, #24]
 8004336:	4629      	mov	r1, r5
 8004338:	eb63 0301 	sbc.w	r3, r3, r1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800434a:	4659      	mov	r1, fp
 800434c:	018b      	lsls	r3, r1, #6
 800434e:	4651      	mov	r1, sl
 8004350:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004354:	4651      	mov	r1, sl
 8004356:	018a      	lsls	r2, r1, #6
 8004358:	4651      	mov	r1, sl
 800435a:	ebb2 0801 	subs.w	r8, r2, r1
 800435e:	4659      	mov	r1, fp
 8004360:	eb63 0901 	sbc.w	r9, r3, r1
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004370:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004374:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004378:	4690      	mov	r8, r2
 800437a:	4699      	mov	r9, r3
 800437c:	4623      	mov	r3, r4
 800437e:	eb18 0303 	adds.w	r3, r8, r3
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	462b      	mov	r3, r5
 8004386:	eb49 0303 	adc.w	r3, r9, r3
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004398:	4629      	mov	r1, r5
 800439a:	028b      	lsls	r3, r1, #10
 800439c:	4621      	mov	r1, r4
 800439e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a2:	4621      	mov	r1, r4
 80043a4:	028a      	lsls	r2, r1, #10
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ae:	2200      	movs	r2, #0
 80043b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80043b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043b8:	f7fc fbe2 	bl	8000b80 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4613      	mov	r3, r2
 80043c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043c6:	e063      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x41c>
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d0:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x454>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	099b      	lsrs	r3, r3, #6
 80043d6:	2200      	movs	r2, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	4611      	mov	r1, r2
 80043dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e0:	653b      	str	r3, [r7, #80]	; 0x50
 80043e2:	2300      	movs	r3, #0
 80043e4:	657b      	str	r3, [r7, #84]	; 0x54
 80043e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80043ea:	4642      	mov	r2, r8
 80043ec:	464b      	mov	r3, r9
 80043ee:	f04f 0000 	mov.w	r0, #0
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	0159      	lsls	r1, r3, #5
 80043f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043fc:	0150      	lsls	r0, r2, #5
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4641      	mov	r1, r8
 8004404:	1a51      	subs	r1, r2, r1
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	4649      	mov	r1, r9
 800440a:	eb63 0301 	sbc.w	r3, r3, r1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800441c:	4659      	mov	r1, fp
 800441e:	018b      	lsls	r3, r1, #6
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004426:	4651      	mov	r1, sl
 8004428:	018a      	lsls	r2, r1, #6
 800442a:	4651      	mov	r1, sl
 800442c:	1a54      	subs	r4, r2, r1
 800442e:	4659      	mov	r1, fp
 8004430:	eb63 0501 	sbc.w	r5, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	00eb      	lsls	r3, r5, #3
 800443e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004442:	00e2      	lsls	r2, r4, #3
 8004444:	4614      	mov	r4, r2
 8004446:	461d      	mov	r5, r3
 8004448:	4643      	mov	r3, r8
 800444a:	18e3      	adds	r3, r4, r3
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	464b      	mov	r3, r9
 8004450:	eb45 0303 	adc.w	r3, r5, r3
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004462:	4629      	mov	r1, r5
 8004464:	028b      	lsls	r3, r1, #10
 8004466:	4621      	mov	r1, r4
 8004468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800446c:	4621      	mov	r1, r4
 800446e:	028a      	lsls	r2, r1, #10
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004478:	2200      	movs	r2, #0
 800447a:	64bb      	str	r3, [r7, #72]	; 0x48
 800447c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800447e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004482:	f7fc fb7d 	bl	8000b80 <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4613      	mov	r3, r2
 800448c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x454>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0f1b      	lsrs	r3, r3, #28
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800449e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_GetSysClockFreq+0x458>)
 80044b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	37b8      	adds	r7, #184	; 0xb8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400

080044d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e28d      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8083 	beq.w	80045f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044f0:	4b94      	ldr	r3, [pc, #592]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d019      	beq.n	8004530 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044fc:	4b91      	ldr	r3, [pc, #580]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004504:	2b08      	cmp	r3, #8
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004508:	4b8e      	ldr	r3, [pc, #568]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004514:	d00c      	beq.n	8004530 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004516:	4b8b      	ldr	r3, [pc, #556]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d112      	bne.n	8004548 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452e:	d10b      	bne.n	8004548 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	4b84      	ldr	r3, [pc, #528]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d05b      	beq.n	80045f4 <HAL_RCC_OscConfig+0x124>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d157      	bne.n	80045f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e25a      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x90>
 8004552:	4b7c      	ldr	r3, [pc, #496]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a7b      	ldr	r2, [pc, #492]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e01d      	b.n	800459c <HAL_RCC_OscConfig+0xcc>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0xb4>
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b73      	ldr	r3, [pc, #460]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a72      	ldr	r2, [pc, #456]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0xcc>
 8004584:	4b6f      	ldr	r3, [pc, #444]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6e      	ldr	r2, [pc, #440]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b6c      	ldr	r3, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a6b      	ldr	r2, [pc, #428]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d013      	beq.n	80045cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fd fd28 	bl	8001ff8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fd fd24 	bl	8001ff8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e21f      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b61      	ldr	r3, [pc, #388]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0xdc>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd fd14 	bl	8001ff8 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fd fd10 	bl	8001ff8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e20b      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	4b57      	ldr	r3, [pc, #348]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0x104>
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d06f      	beq.n	80046e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004602:	4b50      	ldr	r3, [pc, #320]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b00      	cmp	r3, #0
 800460c:	d017      	beq.n	800463e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800460e:	4b4d      	ldr	r3, [pc, #308]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004616:	2b08      	cmp	r3, #8
 8004618:	d105      	bne.n	8004626 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d11c      	bne.n	800466c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b44      	ldr	r3, [pc, #272]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x186>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e1d3      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4937      	ldr	r1, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	e03a      	b.n	80046e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004674:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_RCC_OscConfig+0x278>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd fcbd 	bl	8001ff8 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7fd fcb9 	bl	8001ff8 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1b4      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4925      	ldr	r1, [pc, #148]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_RCC_OscConfig+0x278>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fc9c 	bl	8001ff8 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fd fc98 	bl	8001ff8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e193      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d036      	beq.n	800475c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x27c>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd fc7c 	bl	8001ff8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004704:	f7fd fc78 	bl	8001ff8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e173      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x274>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x234>
 8004722:	e01b      	b.n	800475c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x27c>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472a:	f7fd fc65 	bl	8001ff8 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	e00e      	b.n	8004750 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004732:	f7fd fc61 	bl	8001ff8 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d907      	bls.n	8004750 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e15c      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
 8004744:	40023800 	.word	0x40023800
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b8a      	ldr	r3, [pc, #552]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ea      	bne.n	8004732 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8097 	beq.w	8004898 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476e:	4b83      	ldr	r3, [pc, #524]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10f      	bne.n	800479a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b7f      	ldr	r3, [pc, #508]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a7e      	ldr	r2, [pc, #504]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b7c      	ldr	r3, [pc, #496]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b79      	ldr	r3, [pc, #484]	; (8004980 <HAL_RCC_OscConfig+0x4b0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b76      	ldr	r3, [pc, #472]	; (8004980 <HAL_RCC_OscConfig+0x4b0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a75      	ldr	r2, [pc, #468]	; (8004980 <HAL_RCC_OscConfig+0x4b0>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fd fc21 	bl	8001ff8 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fd fc1d 	bl	8001ff8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e118      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <HAL_RCC_OscConfig+0x4b0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x31e>
 80047e0:	4b66      	ldr	r3, [pc, #408]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a65      	ldr	r2, [pc, #404]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x358>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x340>
 80047f6:	4b61      	ldr	r3, [pc, #388]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a60      	ldr	r2, [pc, #384]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	4b5e      	ldr	r3, [pc, #376]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5d      	ldr	r2, [pc, #372]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0x358>
 8004810:	4b5a      	ldr	r3, [pc, #360]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a59      	ldr	r2, [pc, #356]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b57      	ldr	r3, [pc, #348]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a56      	ldr	r2, [pc, #344]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd fbe2 	bl	8001ff8 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd fbde 	bl	8001ff8 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0d7      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484e:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RCC_OscConfig+0x368>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd fbcc 	bl	8001ff8 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fbc8 	bl	8001ff8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0c1      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487a:	4b40      	ldr	r3, [pc, #256]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ee      	bne.n	8004864 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4b3b      	ldr	r3, [pc, #236]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	4a3a      	ldr	r2, [pc, #232]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80ad 	beq.w	80049fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a2:	4b36      	ldr	r3, [pc, #216]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d060      	beq.n	8004970 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d145      	bne.n	8004942 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b33      	ldr	r3, [pc, #204]	; (8004984 <HAL_RCC_OscConfig+0x4b4>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd fb9c 	bl	8001ff8 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fb98 	bl	8001ff8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e093      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b29      	ldr	r3, [pc, #164]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	491b      	ldr	r1, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x4b4>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd fb6d 	bl	8001ff8 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004922:	f7fd fb69 	bl	8001ff8 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e064      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x452>
 8004940:	e05c      	b.n	80049fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <HAL_RCC_OscConfig+0x4b4>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd fb56 	bl	8001ff8 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004950:	f7fd fb52 	bl	8001ff8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e04d      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_OscConfig+0x4ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x480>
 800496e:	e045      	b.n	80049fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e040      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
 800497c:	40023800 	.word	0x40023800
 8004980:	40007000 	.word	0x40007000
 8004984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004988:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <HAL_RCC_OscConfig+0x538>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d030      	beq.n	80049f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d129      	bne.n	80049f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d122      	bne.n	80049f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d119      	bne.n	80049f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	3b01      	subs	r3, #1
 80049d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d10f      	bne.n	80049f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d107      	bne.n	80049f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800

08004a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e041      	b.n	8004aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc ffc2 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fcbc 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e041      	b.n	8004b40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f839 	bl	8004b48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f000 fc6d 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e022      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x72>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start_DMA+0x46>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e015      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x72>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start_DMA+0x60>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e008      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x72>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e171      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start_DMA+0x94>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf0c      	ite	eq
 8004be8:	2301      	moveq	r3, #1
 8004bea:	2300      	movne	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e022      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0xda>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d109      	bne.n	8004c0a <HAL_TIM_PWM_Start_DMA+0xae>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	bf0c      	ite	eq
 8004c02:	2301      	moveq	r3, #1
 8004c04:	2300      	movne	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	e015      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0xda>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d109      	bne.n	8004c24 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	e008      	b.n	8004c36 <HAL_TIM_PWM_Start_DMA+0xda>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d024      	beq.n	8004c84 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Start_DMA+0xee>
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e137      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <HAL_TIM_PWM_Start_DMA+0xfe>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c58:	e016      	b.n	8004c88 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_PWM_Start_DMA+0x10e>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	e00e      	b.n	8004c88 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x11e>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c78:	e006      	b.n	8004c88 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c82:	e001      	b.n	8004c88 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e118      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	f200 80ae 	bhi.w	8004dec <HAL_TIM_PWM_Start_DMA+0x290>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004ded 	.word	0x08004ded
 8004ca0:	08004ded 	.word	0x08004ded
 8004ca4:	08004ded 	.word	0x08004ded
 8004ca8:	08004d15 	.word	0x08004d15
 8004cac:	08004ded 	.word	0x08004ded
 8004cb0:	08004ded 	.word	0x08004ded
 8004cb4:	08004ded 	.word	0x08004ded
 8004cb8:	08004d5d 	.word	0x08004d5d
 8004cbc:	08004ded 	.word	0x08004ded
 8004cc0:	08004ded 	.word	0x08004ded
 8004cc4:	08004ded 	.word	0x08004ded
 8004cc8:	08004da5 	.word	0x08004da5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	4a7c      	ldr	r2, [pc, #496]	; (8004ec4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	4a7b      	ldr	r2, [pc, #492]	; (8004ec8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	4a7a      	ldr	r2, [pc, #488]	; (8004ecc <HAL_TIM_PWM_Start_DMA+0x370>)
 8004ce2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3334      	adds	r3, #52	; 0x34
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	f7fd fb70 	bl	80023d8 <HAL_DMA_Start_IT>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0db      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	60da      	str	r2, [r3, #12]
      break;
 8004d12:	e06e      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	4a6a      	ldr	r2, [pc, #424]	; (8004ec4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004d1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	4a69      	ldr	r2, [pc, #420]	; (8004ec8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_TIM_PWM_Start_DMA+0x370>)
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3338      	adds	r3, #56	; 0x38
 8004d38:	461a      	mov	r2, r3
 8004d3a:	887b      	ldrh	r3, [r7, #2]
 8004d3c:	f7fd fb4c 	bl	80023d8 <HAL_DMA_Start_IT>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0b7      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d58:	60da      	str	r2, [r3, #12]
      break;
 8004d5a:	e04a      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004d62:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	4a57      	ldr	r2, [pc, #348]	; (8004ec8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <HAL_TIM_PWM_Start_DMA+0x370>)
 8004d72:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	333c      	adds	r3, #60	; 0x3c
 8004d80:	461a      	mov	r2, r3
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	f7fd fb28 	bl	80023d8 <HAL_DMA_Start_IT>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e093      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da0:	60da      	str	r2, [r3, #12]
      break;
 8004da2:	e026      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	4a46      	ldr	r2, [pc, #280]	; (8004ec4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004daa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	4a45      	ldr	r2, [pc, #276]	; (8004ec8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	4a44      	ldr	r2, [pc, #272]	; (8004ecc <HAL_TIM_PWM_Start_DMA+0x370>)
 8004dba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3340      	adds	r3, #64	; 0x40
 8004dc8:	461a      	mov	r2, r3
 8004dca:	887b      	ldrh	r3, [r7, #2]
 8004dcc:	f7fd fb04 	bl	80023d8 <HAL_DMA_Start_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06f      	b.n	8004eba <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004de8:	60da      	str	r2, [r3, #12]
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d15f      	bne.n	8004eb8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fdcb 	bl	800599c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a31      	ldr	r2, [pc, #196]	; (8004ed0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIM_PWM_Start_DMA+0x2be>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a25      	ldr	r2, [pc, #148]	; (8004ed0 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d022      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d01d      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a21      	ldr	r2, [pc, #132]	; (8004edc <HAL_TIM_PWM_Start_DMA+0x380>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x328>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d111      	bne.n	8004ea8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d010      	beq.n	8004eb8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	e007      	b.n	8004eb8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	080052b9 	.word	0x080052b9
 8004ec8:	08005361 	.word	0x08005361
 8004ecc:	08005227 	.word	0x08005227
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40001800 	.word	0x40001800

08004eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0ae      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	f200 809f 	bhi.w	8005058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f55 	.word	0x08004f55
 8004f24:	08005059 	.word	0x08005059
 8004f28:	08005059 	.word	0x08005059
 8004f2c:	08005059 	.word	0x08005059
 8004f30:	08004f95 	.word	0x08004f95
 8004f34:	08005059 	.word	0x08005059
 8004f38:	08005059 	.word	0x08005059
 8004f3c:	08005059 	.word	0x08005059
 8004f40:	08004fd7 	.word	0x08004fd7
 8004f44:	08005059 	.word	0x08005059
 8004f48:	08005059 	.word	0x08005059
 8004f4c:	08005059 	.word	0x08005059
 8004f50:	08005017 	.word	0x08005017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fad4 	bl	8005508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0204 	bic.w	r2, r2, #4
 8004f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6999      	ldr	r1, [r3, #24]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	619a      	str	r2, [r3, #24]
      break;
 8004f92:	e064      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fb24 	bl	80055e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	619a      	str	r2, [r3, #24]
      break;
 8004fd4:	e043      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb79 	bl	80056d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0208 	orr.w	r2, r2, #8
 8004ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0204 	bic.w	r2, r2, #4
 8005000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69d9      	ldr	r1, [r3, #28]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	61da      	str	r2, [r3, #28]
      break;
 8005014:	e023      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fbcd 	bl	80057bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	021a      	lsls	r2, r3, #8
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	61da      	str	r2, [r3, #28]
      break;
 8005056:	e002      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
      break;
 800505c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005066:	7dfb      	ldrb	r3, [r7, #23]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x1c>
 8005088:	2302      	movs	r3, #2
 800508a:	e0b4      	b.n	80051f6 <HAL_TIM_ConfigClockSource+0x186>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c4:	d03e      	beq.n	8005144 <HAL_TIM_ConfigClockSource+0xd4>
 80050c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ca:	f200 8087 	bhi.w	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	f000 8086 	beq.w	80051e2 <HAL_TIM_ConfigClockSource+0x172>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	d87f      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b70      	cmp	r3, #112	; 0x70
 80050de:	d01a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0xa6>
 80050e0:	2b70      	cmp	r3, #112	; 0x70
 80050e2:	d87b      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d050      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x11a>
 80050e8:	2b60      	cmp	r3, #96	; 0x60
 80050ea:	d877      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b50      	cmp	r3, #80	; 0x50
 80050ee:	d03c      	beq.n	800516a <HAL_TIM_ConfigClockSource+0xfa>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d873      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d058      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x13a>
 80050f8:	2b40      	cmp	r3, #64	; 0x40
 80050fa:	d86f      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b30      	cmp	r3, #48	; 0x30
 80050fe:	d064      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x15a>
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d86b      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b20      	cmp	r3, #32
 8005106:	d060      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	2b20      	cmp	r3, #32
 800510a:	d867      	bhi.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d05c      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x15a>
 8005110:	2b10      	cmp	r3, #16
 8005112:	d05a      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x15a>
 8005114:	e062      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6899      	ldr	r1, [r3, #8]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f000 fc19 	bl	800595c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	609a      	str	r2, [r3, #8]
      break;
 8005142:	e04f      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	6899      	ldr	r1, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f000 fc02 	bl	800595c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005166:	609a      	str	r2, [r3, #8]
      break;
 8005168:	e03c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fb76 	bl	8005868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2150      	movs	r1, #80	; 0x50
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fbcf 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 8005188:	e02c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fb95 	bl	80058c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2160      	movs	r1, #96	; 0x60
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fbbf 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e01c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fb56 	bl	8005868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbaf 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e00c      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f000 fba6 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80051da:	e003      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
      break;
 80051e0:	e000      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d107      	bne.n	800524e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	e02a      	b.n	80052a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	d107      	bne.n	8005268 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2202      	movs	r2, #2
 800525c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005266:	e01d      	b.n	80052a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d107      	bne.n	8005282 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2204      	movs	r2, #4
 8005276:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	e010      	b.n	80052a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d107      	bne.n	800529c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2208      	movs	r2, #8
 8005290:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800529a:	e003      	b.n	80052a4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff ffb4 	bl	8005212 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d10b      	bne.n	80052e8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d136      	bne.n	800534c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e6:	e031      	b.n	800534c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d10b      	bne.n	800530a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2202      	movs	r2, #2
 80052f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d125      	bne.n	800534c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005308:	e020      	b.n	800534c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d10b      	bne.n	800532c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2204      	movs	r2, #4
 8005318:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d114      	bne.n	800534c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532a:	e00f      	b.n	800534c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d10a      	bne.n	800534c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2208      	movs	r2, #8
 800533a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7fb ff93 	bl	8001278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d103      	bne.n	8005380 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	771a      	strb	r2, [r3, #28]
 800537e:	e019      	b.n	80053b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d103      	bne.n	8005392 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
 8005390:	e010      	b.n	80053b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d103      	bne.n	80053a4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2204      	movs	r2, #4
 80053a0:	771a      	strb	r2, [r3, #28]
 80053a2:	e007      	b.n	80053b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d102      	bne.n	80053b4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2208      	movs	r2, #8
 80053b2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff22 	bl	80051fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a40      	ldr	r2, [pc, #256]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3d      	ldr	r2, [pc, #244]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a3c      	ldr	r2, [pc, #240]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <TIM_Base_SetConfig+0x114>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d027      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <TIM_Base_SetConfig+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d023      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2b      	ldr	r2, [pc, #172]	; (80054e4 <TIM_Base_SetConfig+0x11c>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <TIM_Base_SetConfig+0x120>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a29      	ldr	r2, [pc, #164]	; (80054ec <TIM_Base_SetConfig+0x124>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a28      	ldr	r2, [pc, #160]	; (80054f0 <TIM_Base_SetConfig+0x128>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <TIM_Base_SetConfig+0x12c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a26      	ldr	r2, [pc, #152]	; (80054f8 <TIM_Base_SetConfig+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a25      	ldr	r2, [pc, #148]	; (80054fc <TIM_Base_SetConfig+0x134>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a24      	ldr	r2, [pc, #144]	; (8005500 <TIM_Base_SetConfig+0x138>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a23      	ldr	r2, [pc, #140]	; (8005504 <TIM_Base_SetConfig+0x13c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <TIM_Base_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <TIM_Base_SetConfig+0x124>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40001800 	.word	0x40001800
 8005500:	40001c00 	.word	0x40001c00
 8005504:	40002000 	.word	0x40002000

08005508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f023 0302 	bic.w	r3, r3, #2
 8005550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <TIM_OC1_SetConfig+0xd8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_OC1_SetConfig+0x64>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a1f      	ldr	r2, [pc, #124]	; (80055e4 <TIM_OC1_SetConfig+0xdc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d10c      	bne.n	8005586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0308 	bic.w	r3, r3, #8
 8005572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 0304 	bic.w	r3, r3, #4
 8005584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a15      	ldr	r2, [pc, #84]	; (80055e0 <TIM_OC1_SetConfig+0xd8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC1_SetConfig+0x8e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <TIM_OC1_SetConfig+0xdc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d111      	bne.n	80055ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800559c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40010000 	.word	0x40010000
 80055e4:	40010400 	.word	0x40010400

080055e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0210 	bic.w	r2, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800561e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 0320 	bic.w	r3, r3, #32
 8005632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a22      	ldr	r2, [pc, #136]	; (80056cc <TIM_OC2_SetConfig+0xe4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC2_SetConfig+0x68>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <TIM_OC2_SetConfig+0xe8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10d      	bne.n	800566c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800566a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <TIM_OC2_SetConfig+0xe4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC2_SetConfig+0x94>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <TIM_OC2_SetConfig+0xe8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d113      	bne.n	80056a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800571c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <TIM_OC3_SetConfig+0xe0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC3_SetConfig+0x66>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <TIM_OC3_SetConfig+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d10d      	bne.n	8005756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <TIM_OC3_SetConfig+0xe0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_OC3_SetConfig+0x92>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <TIM_OC3_SetConfig+0xe4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d113      	bne.n	800578e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800576c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	621a      	str	r2, [r3, #32]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	031b      	lsls	r3, r3, #12
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <TIM_OC4_SetConfig+0xa4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC4_SetConfig+0x68>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a11      	ldr	r2, [pc, #68]	; (8005864 <TIM_OC4_SetConfig+0xa8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d109      	bne.n	8005838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	019b      	lsls	r3, r3, #6
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40010400 	.word	0x40010400

08005868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 030a 	bic.w	r3, r3, #10
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0210 	bic.w	r2, r3, #16
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	f043 0307 	orr.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	431a      	orrs	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2201      	movs	r2, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e05a      	b.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d01d      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a17      	ldr	r2, [pc, #92]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10c      	bne.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40001800 	.word	0x40001800

08005ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e03f      	b.n	8005b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb ffee 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2224      	movs	r2, #36	; 0x24
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 faa5 	bl	8006074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d11d      	bne.n	8005bd0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Receive_DMA+0x26>
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e016      	b.n	8005bd2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Receive_DMA+0x38>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e00f      	b.n	8005bd2 <HAL_UART_Receive_DMA+0x58>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f92a 	bl	8005e20 <UART_Start_Receive_DMA>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	e000      	b.n	8005bd2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b09c      	sub	sp, #112	; 0x70
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d172      	bne.n	8005d30 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c70:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c72:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ca4:	647a      	str	r2, [r7, #68]	; 0x44
 8005ca6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3314      	adds	r3, #20
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cce:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d119      	bne.n	8005d30 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0310 	bic.w	r3, r3, #16
 8005d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d1c:	61fa      	str	r2, [r7, #28]
 8005d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	69b9      	ldr	r1, [r7, #24]
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	617b      	str	r3, [r7, #20]
   return(result);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d106      	bne.n	8005d46 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d40:	f7ff ff69 	bl	8005c16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d44:	e002      	b.n	8005d4c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d48:	f7ff ff47 	bl	8005bda <HAL_UART_RxCpltCallback>
}
 8005d4c:	bf00      	nop
 8005d4e:	3770      	adds	r7, #112	; 0x70
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d108      	bne.n	8005d7c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4619      	mov	r1, r3
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ff4e 	bl	8005c16 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d7a:	e002      	b.n	8005d82 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff ff36 	bl	8005bee <HAL_UART_RxHalfCpltCallback>
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da6:	2b80      	cmp	r3, #128	; 0x80
 8005da8:	bf0c      	ite	eq
 8005daa:	2301      	moveq	r3, #1
 8005dac:	2300      	movne	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b21      	cmp	r3, #33	; 0x21
 8005dbc:	d108      	bne.n	8005dd0 <UART_DMAError+0x46>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005dca:	68b8      	ldr	r0, [r7, #8]
 8005dcc:	f000 f8c6 	bl	8005f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	bf0c      	ite	eq
 8005dde:	2301      	moveq	r3, #1
 8005de0:	2300      	movne	r3, #0
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b22      	cmp	r3, #34	; 0x22
 8005df0:	d108      	bne.n	8005e04 <UART_DMAError+0x7a>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005dfe:	68b8      	ldr	r0, [r7, #8]
 8005e00:	f000 f8d4 	bl	8005fac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f043 0210 	orr.w	r2, r3, #16
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e10:	68b8      	ldr	r0, [r7, #8]
 8005e12:	f7ff fef6 	bl	8005c02 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b098      	sub	sp, #96	; 0x60
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2222      	movs	r2, #34	; 0x22
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <UART_Start_Receive_DMA+0x130>)
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	4a3f      	ldr	r2, [pc, #252]	; (8005f54 <UART_Start_Receive_DMA+0x134>)
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	4a3e      	ldr	r2, [pc, #248]	; (8005f58 <UART_Start_Receive_DMA+0x138>)
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	2200      	movs	r2, #0
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e68:	f107 0308 	add.w	r3, r7, #8
 8005e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	f7fc faaa 	bl	80023d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d019      	beq.n	8005ede <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	330c      	adds	r3, #12
 8005ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eca:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e5      	bne.n	8005eaa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005efe:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e5      	bne.n	8005ede <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3314      	adds	r3, #20
 8005f18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	617b      	str	r3, [r7, #20]
   return(result);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f28:	653b      	str	r3, [r7, #80]	; 0x50
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3314      	adds	r3, #20
 8005f30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f32:	627a      	str	r2, [r7, #36]	; 0x24
 8005f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6a39      	ldr	r1, [r7, #32]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3760      	adds	r7, #96	; 0x60
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	08005c2f 	.word	0x08005c2f
 8005f54:	08005d55 	.word	0x08005d55
 8005f58:	08005d8b 	.word	0x08005d8b

08005f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	61ba      	str	r2, [r7, #24]
 8005f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6979      	ldr	r1, [r7, #20]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	613b      	str	r3, [r7, #16]
   return(result);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e5      	bne.n	8005f64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005fa0:	bf00      	nop
 8005fa2:	3724      	adds	r7, #36	; 0x24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b095      	sub	sp, #84	; 0x54
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd4:	643a      	str	r2, [r7, #64]	; 0x40
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3314      	adds	r3, #20
 8006006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	d119      	bne.n	8006058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	60bb      	str	r3, [r7, #8]
   return(result);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0310 	bic.w	r3, r3, #16
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006044:	61ba      	str	r2, [r7, #24]
 8006046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	613b      	str	r3, [r7, #16]
   return(result);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006066:	bf00      	nop
 8006068:	3754      	adds	r7, #84	; 0x54
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006078:	b0c0      	sub	sp, #256	; 0x100
 800607a:	af00      	add	r7, sp, #0
 800607c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006090:	68d9      	ldr	r1, [r3, #12]
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	ea40 0301 	orr.w	r3, r0, r1
 800609c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060cc:	f021 010c 	bic.w	r1, r1, #12
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060da:	430b      	orrs	r3, r1
 80060dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	6999      	ldr	r1, [r3, #24]
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	ea40 0301 	orr.w	r3, r0, r1
 80060fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8f      	ldr	r3, [pc, #572]	; (8006340 <UART_SetConfig+0x2cc>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d005      	beq.n	8006114 <UART_SetConfig+0xa0>
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b8d      	ldr	r3, [pc, #564]	; (8006344 <UART_SetConfig+0x2d0>)
 8006110:	429a      	cmp	r2, r3
 8006112:	d104      	bne.n	800611e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7fd ff9a 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 8006118:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800611c:	e003      	b.n	8006126 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800611e:	f7fd ff81 	bl	8004024 <HAL_RCC_GetPCLK1Freq>
 8006122:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006130:	f040 810c 	bne.w	800634c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006138:	2200      	movs	r2, #0
 800613a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800613e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	1891      	adds	r1, r2, r2
 800614c:	65b9      	str	r1, [r7, #88]	; 0x58
 800614e:	415b      	adcs	r3, r3
 8006150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006152:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006156:	4621      	mov	r1, r4
 8006158:	eb12 0801 	adds.w	r8, r2, r1
 800615c:	4629      	mov	r1, r5
 800615e:	eb43 0901 	adc.w	r9, r3, r1
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800616e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006176:	4690      	mov	r8, r2
 8006178:	4699      	mov	r9, r3
 800617a:	4623      	mov	r3, r4
 800617c:	eb18 0303 	adds.w	r3, r8, r3
 8006180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006184:	462b      	mov	r3, r5
 8006186:	eb49 0303 	adc.w	r3, r9, r3
 800618a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800619a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800619e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061a2:	460b      	mov	r3, r1
 80061a4:	18db      	adds	r3, r3, r3
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
 80061a8:	4613      	mov	r3, r2
 80061aa:	eb42 0303 	adc.w	r3, r2, r3
 80061ae:	657b      	str	r3, [r7, #84]	; 0x54
 80061b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061b8:	f7fa fce2 	bl	8000b80 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4b61      	ldr	r3, [pc, #388]	; (8006348 <UART_SetConfig+0x2d4>)
 80061c2:	fba3 2302 	umull	r2, r3, r3, r2
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	011c      	lsls	r4, r3, #4
 80061ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	1891      	adds	r1, r2, r2
 80061e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80061e4:	415b      	adcs	r3, r3
 80061e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061ec:	4641      	mov	r1, r8
 80061ee:	eb12 0a01 	adds.w	sl, r2, r1
 80061f2:	4649      	mov	r1, r9
 80061f4:	eb43 0b01 	adc.w	fp, r3, r1
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006204:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800620c:	4692      	mov	sl, r2
 800620e:	469b      	mov	fp, r3
 8006210:	4643      	mov	r3, r8
 8006212:	eb1a 0303 	adds.w	r3, sl, r3
 8006216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800621a:	464b      	mov	r3, r9
 800621c:	eb4b 0303 	adc.w	r3, fp, r3
 8006220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006230:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006234:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006238:	460b      	mov	r3, r1
 800623a:	18db      	adds	r3, r3, r3
 800623c:	643b      	str	r3, [r7, #64]	; 0x40
 800623e:	4613      	mov	r3, r2
 8006240:	eb42 0303 	adc.w	r3, r2, r3
 8006244:	647b      	str	r3, [r7, #68]	; 0x44
 8006246:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800624a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800624e:	f7fa fc97 	bl	8000b80 <__aeabi_uldivmod>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4611      	mov	r1, r2
 8006258:	4b3b      	ldr	r3, [pc, #236]	; (8006348 <UART_SetConfig+0x2d4>)
 800625a:	fba3 2301 	umull	r2, r3, r3, r1
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	2264      	movs	r2, #100	; 0x64
 8006262:	fb02 f303 	mul.w	r3, r2, r3
 8006266:	1acb      	subs	r3, r1, r3
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <UART_SetConfig+0x2d4>)
 8006270:	fba3 2302 	umull	r2, r3, r3, r2
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800627c:	441c      	add	r4, r3
 800627e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006282:	2200      	movs	r2, #0
 8006284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006288:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800628c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006290:	4642      	mov	r2, r8
 8006292:	464b      	mov	r3, r9
 8006294:	1891      	adds	r1, r2, r2
 8006296:	63b9      	str	r1, [r7, #56]	; 0x38
 8006298:	415b      	adcs	r3, r3
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800629c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062a0:	4641      	mov	r1, r8
 80062a2:	1851      	adds	r1, r2, r1
 80062a4:	6339      	str	r1, [r7, #48]	; 0x30
 80062a6:	4649      	mov	r1, r9
 80062a8:	414b      	adcs	r3, r1
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062b8:	4659      	mov	r1, fp
 80062ba:	00cb      	lsls	r3, r1, #3
 80062bc:	4651      	mov	r1, sl
 80062be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c2:	4651      	mov	r1, sl
 80062c4:	00ca      	lsls	r2, r1, #3
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	4642      	mov	r2, r8
 80062ce:	189b      	adds	r3, r3, r2
 80062d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d4:	464b      	mov	r3, r9
 80062d6:	460a      	mov	r2, r1
 80062d8:	eb42 0303 	adc.w	r3, r2, r3
 80062dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062f4:	460b      	mov	r3, r1
 80062f6:	18db      	adds	r3, r3, r3
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fa:	4613      	mov	r3, r2
 80062fc:	eb42 0303 	adc.w	r3, r2, r3
 8006300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006306:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800630a:	f7fa fc39 	bl	8000b80 <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <UART_SetConfig+0x2d4>)
 8006314:	fba3 1302 	umull	r1, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	2164      	movs	r1, #100	; 0x64
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	3332      	adds	r3, #50	; 0x32
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <UART_SetConfig+0x2d4>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f003 0207 	and.w	r2, r3, #7
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4422      	add	r2, r4
 800633a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800633c:	e105      	b.n	800654a <UART_SetConfig+0x4d6>
 800633e:	bf00      	nop
 8006340:	40011000 	.word	0x40011000
 8006344:	40011400 	.word	0x40011400
 8006348:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800634c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006350:	2200      	movs	r2, #0
 8006352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006356:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800635a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	1891      	adds	r1, r2, r2
 8006364:	6239      	str	r1, [r7, #32]
 8006366:	415b      	adcs	r3, r3
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
 800636a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800636e:	4641      	mov	r1, r8
 8006370:	1854      	adds	r4, r2, r1
 8006372:	4649      	mov	r1, r9
 8006374:	eb43 0501 	adc.w	r5, r3, r1
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	00eb      	lsls	r3, r5, #3
 8006382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006386:	00e2      	lsls	r2, r4, #3
 8006388:	4614      	mov	r4, r2
 800638a:	461d      	mov	r5, r3
 800638c:	4643      	mov	r3, r8
 800638e:	18e3      	adds	r3, r4, r3
 8006390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006394:	464b      	mov	r3, r9
 8006396:	eb45 0303 	adc.w	r3, r5, r3
 800639a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063ba:	4629      	mov	r1, r5
 80063bc:	008b      	lsls	r3, r1, #2
 80063be:	4621      	mov	r1, r4
 80063c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c4:	4621      	mov	r1, r4
 80063c6:	008a      	lsls	r2, r1, #2
 80063c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063cc:	f7fa fbd8 	bl	8000b80 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4b60      	ldr	r3, [pc, #384]	; (8006558 <UART_SetConfig+0x4e4>)
 80063d6:	fba3 2302 	umull	r2, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	011c      	lsls	r4, r3, #4
 80063de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	1891      	adds	r1, r2, r2
 80063f6:	61b9      	str	r1, [r7, #24]
 80063f8:	415b      	adcs	r3, r3
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006400:	4641      	mov	r1, r8
 8006402:	1851      	adds	r1, r2, r1
 8006404:	6139      	str	r1, [r7, #16]
 8006406:	4649      	mov	r1, r9
 8006408:	414b      	adcs	r3, r1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006418:	4659      	mov	r1, fp
 800641a:	00cb      	lsls	r3, r1, #3
 800641c:	4651      	mov	r1, sl
 800641e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006422:	4651      	mov	r1, sl
 8006424:	00ca      	lsls	r2, r1, #3
 8006426:	4610      	mov	r0, r2
 8006428:	4619      	mov	r1, r3
 800642a:	4603      	mov	r3, r0
 800642c:	4642      	mov	r2, r8
 800642e:	189b      	adds	r3, r3, r2
 8006430:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006434:	464b      	mov	r3, r9
 8006436:	460a      	mov	r2, r1
 8006438:	eb42 0303 	adc.w	r3, r2, r3
 800643c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	67bb      	str	r3, [r7, #120]	; 0x78
 800644a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006458:	4649      	mov	r1, r9
 800645a:	008b      	lsls	r3, r1, #2
 800645c:	4641      	mov	r1, r8
 800645e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006462:	4641      	mov	r1, r8
 8006464:	008a      	lsls	r2, r1, #2
 8006466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800646a:	f7fa fb89 	bl	8000b80 <__aeabi_uldivmod>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4b39      	ldr	r3, [pc, #228]	; (8006558 <UART_SetConfig+0x4e4>)
 8006474:	fba3 1302 	umull	r1, r3, r3, r2
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	2164      	movs	r1, #100	; 0x64
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	3332      	adds	r3, #50	; 0x32
 8006486:	4a34      	ldr	r2, [pc, #208]	; (8006558 <UART_SetConfig+0x4e4>)
 8006488:	fba2 2303 	umull	r2, r3, r2, r3
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006492:	441c      	add	r4, r3
 8006494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006498:	2200      	movs	r2, #0
 800649a:	673b      	str	r3, [r7, #112]	; 0x70
 800649c:	677a      	str	r2, [r7, #116]	; 0x74
 800649e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064a2:	4642      	mov	r2, r8
 80064a4:	464b      	mov	r3, r9
 80064a6:	1891      	adds	r1, r2, r2
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	415b      	adcs	r3, r3
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b2:	4641      	mov	r1, r8
 80064b4:	1851      	adds	r1, r2, r1
 80064b6:	6039      	str	r1, [r7, #0]
 80064b8:	4649      	mov	r1, r9
 80064ba:	414b      	adcs	r3, r1
 80064bc:	607b      	str	r3, [r7, #4]
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ca:	4659      	mov	r1, fp
 80064cc:	00cb      	lsls	r3, r1, #3
 80064ce:	4651      	mov	r1, sl
 80064d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d4:	4651      	mov	r1, sl
 80064d6:	00ca      	lsls	r2, r1, #3
 80064d8:	4610      	mov	r0, r2
 80064da:	4619      	mov	r1, r3
 80064dc:	4603      	mov	r3, r0
 80064de:	4642      	mov	r2, r8
 80064e0:	189b      	adds	r3, r3, r2
 80064e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064e4:	464b      	mov	r3, r9
 80064e6:	460a      	mov	r2, r1
 80064e8:	eb42 0303 	adc.w	r3, r2, r3
 80064ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	663b      	str	r3, [r7, #96]	; 0x60
 80064f8:	667a      	str	r2, [r7, #100]	; 0x64
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006506:	4649      	mov	r1, r9
 8006508:	008b      	lsls	r3, r1, #2
 800650a:	4641      	mov	r1, r8
 800650c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006510:	4641      	mov	r1, r8
 8006512:	008a      	lsls	r2, r1, #2
 8006514:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006518:	f7fa fb32 	bl	8000b80 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4b0d      	ldr	r3, [pc, #52]	; (8006558 <UART_SetConfig+0x4e4>)
 8006522:	fba3 1302 	umull	r1, r3, r3, r2
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	2164      	movs	r1, #100	; 0x64
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	3332      	adds	r3, #50	; 0x32
 8006534:	4a08      	ldr	r2, [pc, #32]	; (8006558 <UART_SetConfig+0x4e4>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	f003 020f 	and.w	r2, r3, #15
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4422      	add	r2, r4
 8006548:	609a      	str	r2, [r3, #8]
}
 800654a:	bf00      	nop
 800654c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006550:	46bd      	mov	sp, r7
 8006552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006556:	bf00      	nop
 8006558:	51eb851f 	.word	0x51eb851f

0800655c <copysign>:
 800655c:	b082      	sub	sp, #8
 800655e:	ec51 0b10 	vmov	r0, r1, d0
 8006562:	ed8d 1b00 	vstr	d1, [sp]
 8006566:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800656a:	9901      	ldr	r1, [sp, #4]
 800656c:	ee10 2a10 	vmov	r2, s0
 8006570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006574:	ea40 0301 	orr.w	r3, r0, r1
 8006578:	ec43 2b10 	vmov	d0, r2, r3
 800657c:	b002      	add	sp, #8
 800657e:	4770      	bx	lr

08006580 <asin>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	ed2d 8b02 	vpush	{d8}
 8006586:	ec55 4b10 	vmov	r4, r5, d0
 800658a:	f000 f831 	bl	80065f0 <__ieee754_asin>
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	4620      	mov	r0, r4
 8006594:	4629      	mov	r1, r5
 8006596:	eeb0 8a40 	vmov.f32	s16, s0
 800659a:	eef0 8a60 	vmov.f32	s17, s1
 800659e:	f7fa fa89 	bl	8000ab4 <__aeabi_dcmpun>
 80065a2:	b9a8      	cbnz	r0, 80065d0 <asin+0x50>
 80065a4:	ec45 4b10 	vmov	d0, r4, r5
 80065a8:	f000 fd52 	bl	8007050 <fabs>
 80065ac:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <asin+0x60>)
 80065ae:	ec51 0b10 	vmov	r0, r1, d0
 80065b2:	2200      	movs	r2, #0
 80065b4:	f7fa fa74 	bl	8000aa0 <__aeabi_dcmpgt>
 80065b8:	b150      	cbz	r0, 80065d0 <asin+0x50>
 80065ba:	f000 fd5d 	bl	8007078 <__errno>
 80065be:	ecbd 8b02 	vpop	{d8}
 80065c2:	2321      	movs	r3, #33	; 0x21
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ca:	4806      	ldr	r0, [pc, #24]	; (80065e4 <asin+0x64>)
 80065cc:	f000 bd4c 	b.w	8007068 <nan>
 80065d0:	eeb0 0a48 	vmov.f32	s0, s16
 80065d4:	eef0 0a68 	vmov.f32	s1, s17
 80065d8:	ecbd 8b02 	vpop	{d8}
 80065dc:	bd38      	pop	{r3, r4, r5, pc}
 80065de:	bf00      	nop
 80065e0:	3ff00000 	.word	0x3ff00000
 80065e4:	08007130 	.word	0x08007130

080065e8 <atan2>:
 80065e8:	f000 ba16 	b.w	8006a18 <__ieee754_atan2>
 80065ec:	0000      	movs	r0, r0
	...

080065f0 <__ieee754_asin>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	ed2d 8b04 	vpush	{d8-d9}
 80065f8:	ec55 4b10 	vmov	r4, r5, d0
 80065fc:	4bcc      	ldr	r3, [pc, #816]	; (8006930 <__ieee754_asin+0x340>)
 80065fe:	b083      	sub	sp, #12
 8006600:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006604:	4598      	cmp	r8, r3
 8006606:	9501      	str	r5, [sp, #4]
 8006608:	dd35      	ble.n	8006676 <__ieee754_asin+0x86>
 800660a:	ee10 3a10 	vmov	r3, s0
 800660e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006612:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006616:	ea58 0303 	orrs.w	r3, r8, r3
 800661a:	d117      	bne.n	800664c <__ieee754_asin+0x5c>
 800661c:	a3aa      	add	r3, pc, #680	; (adr r3, 80068c8 <__ieee754_asin+0x2d8>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	ee10 0a10 	vmov	r0, s0
 8006626:	4629      	mov	r1, r5
 8006628:	f7f9 ffaa 	bl	8000580 <__aeabi_dmul>
 800662c:	a3a8      	add	r3, pc, #672	; (adr r3, 80068d0 <__ieee754_asin+0x2e0>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7f9 ffa1 	bl	8000580 <__aeabi_dmul>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4630      	mov	r0, r6
 8006644:	4639      	mov	r1, r7
 8006646:	f7f9 fde5 	bl	8000214 <__adddf3>
 800664a:	e00b      	b.n	8006664 <__ieee754_asin+0x74>
 800664c:	ee10 2a10 	vmov	r2, s0
 8006650:	462b      	mov	r3, r5
 8006652:	ee10 0a10 	vmov	r0, s0
 8006656:	4629      	mov	r1, r5
 8006658:	f7f9 fdda 	bl	8000210 <__aeabi_dsub>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	f7fa f8b8 	bl	80007d4 <__aeabi_ddiv>
 8006664:	4604      	mov	r4, r0
 8006666:	460d      	mov	r5, r1
 8006668:	ec45 4b10 	vmov	d0, r4, r5
 800666c:	b003      	add	sp, #12
 800666e:	ecbd 8b04 	vpop	{d8-d9}
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	4baf      	ldr	r3, [pc, #700]	; (8006934 <__ieee754_asin+0x344>)
 8006678:	4598      	cmp	r8, r3
 800667a:	dc11      	bgt.n	80066a0 <__ieee754_asin+0xb0>
 800667c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006680:	f280 80ae 	bge.w	80067e0 <__ieee754_asin+0x1f0>
 8006684:	a394      	add	r3, pc, #592	; (adr r3, 80068d8 <__ieee754_asin+0x2e8>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	ee10 0a10 	vmov	r0, s0
 800668e:	4629      	mov	r1, r5
 8006690:	f7f9 fdc0 	bl	8000214 <__adddf3>
 8006694:	4ba8      	ldr	r3, [pc, #672]	; (8006938 <__ieee754_asin+0x348>)
 8006696:	2200      	movs	r2, #0
 8006698:	f7fa fa02 	bl	8000aa0 <__aeabi_dcmpgt>
 800669c:	2800      	cmp	r0, #0
 800669e:	d1e3      	bne.n	8006668 <__ieee754_asin+0x78>
 80066a0:	ec45 4b10 	vmov	d0, r4, r5
 80066a4:	f000 fcd4 	bl	8007050 <fabs>
 80066a8:	49a3      	ldr	r1, [pc, #652]	; (8006938 <__ieee754_asin+0x348>)
 80066aa:	ec53 2b10 	vmov	r2, r3, d0
 80066ae:	2000      	movs	r0, #0
 80066b0:	f7f9 fdae 	bl	8000210 <__aeabi_dsub>
 80066b4:	4ba1      	ldr	r3, [pc, #644]	; (800693c <__ieee754_asin+0x34c>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	f7f9 ff62 	bl	8000580 <__aeabi_dmul>
 80066bc:	a388      	add	r3, pc, #544	; (adr r3, 80068e0 <__ieee754_asin+0x2f0>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	4604      	mov	r4, r0
 80066c4:	460d      	mov	r5, r1
 80066c6:	f7f9 ff5b 	bl	8000580 <__aeabi_dmul>
 80066ca:	a387      	add	r3, pc, #540	; (adr r3, 80068e8 <__ieee754_asin+0x2f8>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 fda0 	bl	8000214 <__adddf3>
 80066d4:	4622      	mov	r2, r4
 80066d6:	462b      	mov	r3, r5
 80066d8:	f7f9 ff52 	bl	8000580 <__aeabi_dmul>
 80066dc:	a384      	add	r3, pc, #528	; (adr r3, 80068f0 <__ieee754_asin+0x300>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fd95 	bl	8000210 <__aeabi_dsub>
 80066e6:	4622      	mov	r2, r4
 80066e8:	462b      	mov	r3, r5
 80066ea:	f7f9 ff49 	bl	8000580 <__aeabi_dmul>
 80066ee:	a382      	add	r3, pc, #520	; (adr r3, 80068f8 <__ieee754_asin+0x308>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 fd8e 	bl	8000214 <__adddf3>
 80066f8:	4622      	mov	r2, r4
 80066fa:	462b      	mov	r3, r5
 80066fc:	f7f9 ff40 	bl	8000580 <__aeabi_dmul>
 8006700:	a37f      	add	r3, pc, #508	; (adr r3, 8006900 <__ieee754_asin+0x310>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fd83 	bl	8000210 <__aeabi_dsub>
 800670a:	4622      	mov	r2, r4
 800670c:	462b      	mov	r3, r5
 800670e:	f7f9 ff37 	bl	8000580 <__aeabi_dmul>
 8006712:	a37d      	add	r3, pc, #500	; (adr r3, 8006908 <__ieee754_asin+0x318>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fd7c 	bl	8000214 <__adddf3>
 800671c:	4622      	mov	r2, r4
 800671e:	462b      	mov	r3, r5
 8006720:	f7f9 ff2e 	bl	8000580 <__aeabi_dmul>
 8006724:	a37a      	add	r3, pc, #488	; (adr r3, 8006910 <__ieee754_asin+0x320>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	ec41 0b18 	vmov	d8, r0, r1
 800672e:	4620      	mov	r0, r4
 8006730:	4629      	mov	r1, r5
 8006732:	f7f9 ff25 	bl	8000580 <__aeabi_dmul>
 8006736:	a378      	add	r3, pc, #480	; (adr r3, 8006918 <__ieee754_asin+0x328>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f7f9 fd68 	bl	8000210 <__aeabi_dsub>
 8006740:	4622      	mov	r2, r4
 8006742:	462b      	mov	r3, r5
 8006744:	f7f9 ff1c 	bl	8000580 <__aeabi_dmul>
 8006748:	a375      	add	r3, pc, #468	; (adr r3, 8006920 <__ieee754_asin+0x330>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7f9 fd61 	bl	8000214 <__adddf3>
 8006752:	4622      	mov	r2, r4
 8006754:	462b      	mov	r3, r5
 8006756:	f7f9 ff13 	bl	8000580 <__aeabi_dmul>
 800675a:	a373      	add	r3, pc, #460	; (adr r3, 8006928 <__ieee754_asin+0x338>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 fd56 	bl	8000210 <__aeabi_dsub>
 8006764:	4622      	mov	r2, r4
 8006766:	462b      	mov	r3, r5
 8006768:	f7f9 ff0a 	bl	8000580 <__aeabi_dmul>
 800676c:	4b72      	ldr	r3, [pc, #456]	; (8006938 <__ieee754_asin+0x348>)
 800676e:	2200      	movs	r2, #0
 8006770:	f7f9 fd50 	bl	8000214 <__adddf3>
 8006774:	ec45 4b10 	vmov	d0, r4, r5
 8006778:	4606      	mov	r6, r0
 800677a:	460f      	mov	r7, r1
 800677c:	f000 fa16 	bl	8006bac <__ieee754_sqrt>
 8006780:	4b6f      	ldr	r3, [pc, #444]	; (8006940 <__ieee754_asin+0x350>)
 8006782:	4598      	cmp	r8, r3
 8006784:	ec5b ab10 	vmov	sl, fp, d0
 8006788:	f340 80dc 	ble.w	8006944 <__ieee754_asin+0x354>
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	ec51 0b18 	vmov	r0, r1, d8
 8006794:	f7fa f81e 	bl	80007d4 <__aeabi_ddiv>
 8006798:	4652      	mov	r2, sl
 800679a:	465b      	mov	r3, fp
 800679c:	f7f9 fef0 	bl	8000580 <__aeabi_dmul>
 80067a0:	4652      	mov	r2, sl
 80067a2:	465b      	mov	r3, fp
 80067a4:	f7f9 fd36 	bl	8000214 <__adddf3>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	f7f9 fd32 	bl	8000214 <__adddf3>
 80067b0:	a347      	add	r3, pc, #284	; (adr r3, 80068d0 <__ieee754_asin+0x2e0>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f7f9 fd2b 	bl	8000210 <__aeabi_dsub>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	a142      	add	r1, pc, #264	; (adr r1, 80068c8 <__ieee754_asin+0x2d8>)
 80067c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c4:	f7f9 fd24 	bl	8000210 <__aeabi_dsub>
 80067c8:	9b01      	ldr	r3, [sp, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bfdc      	itt	le
 80067ce:	4602      	movle	r2, r0
 80067d0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80067d4:	4604      	mov	r4, r0
 80067d6:	460d      	mov	r5, r1
 80067d8:	bfdc      	itt	le
 80067da:	4614      	movle	r4, r2
 80067dc:	461d      	movle	r5, r3
 80067de:	e743      	b.n	8006668 <__ieee754_asin+0x78>
 80067e0:	ee10 2a10 	vmov	r2, s0
 80067e4:	ee10 0a10 	vmov	r0, s0
 80067e8:	462b      	mov	r3, r5
 80067ea:	4629      	mov	r1, r5
 80067ec:	f7f9 fec8 	bl	8000580 <__aeabi_dmul>
 80067f0:	a33b      	add	r3, pc, #236	; (adr r3, 80068e0 <__ieee754_asin+0x2f0>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	4606      	mov	r6, r0
 80067f8:	460f      	mov	r7, r1
 80067fa:	f7f9 fec1 	bl	8000580 <__aeabi_dmul>
 80067fe:	a33a      	add	r3, pc, #232	; (adr r3, 80068e8 <__ieee754_asin+0x2f8>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f7f9 fd06 	bl	8000214 <__adddf3>
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	f7f9 feb8 	bl	8000580 <__aeabi_dmul>
 8006810:	a337      	add	r3, pc, #220	; (adr r3, 80068f0 <__ieee754_asin+0x300>)
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f7f9 fcfb 	bl	8000210 <__aeabi_dsub>
 800681a:	4632      	mov	r2, r6
 800681c:	463b      	mov	r3, r7
 800681e:	f7f9 feaf 	bl	8000580 <__aeabi_dmul>
 8006822:	a335      	add	r3, pc, #212	; (adr r3, 80068f8 <__ieee754_asin+0x308>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fcf4 	bl	8000214 <__adddf3>
 800682c:	4632      	mov	r2, r6
 800682e:	463b      	mov	r3, r7
 8006830:	f7f9 fea6 	bl	8000580 <__aeabi_dmul>
 8006834:	a332      	add	r3, pc, #200	; (adr r3, 8006900 <__ieee754_asin+0x310>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fce9 	bl	8000210 <__aeabi_dsub>
 800683e:	4632      	mov	r2, r6
 8006840:	463b      	mov	r3, r7
 8006842:	f7f9 fe9d 	bl	8000580 <__aeabi_dmul>
 8006846:	a330      	add	r3, pc, #192	; (adr r3, 8006908 <__ieee754_asin+0x318>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f7f9 fce2 	bl	8000214 <__adddf3>
 8006850:	4632      	mov	r2, r6
 8006852:	463b      	mov	r3, r7
 8006854:	f7f9 fe94 	bl	8000580 <__aeabi_dmul>
 8006858:	a32d      	add	r3, pc, #180	; (adr r3, 8006910 <__ieee754_asin+0x320>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fe8b 	bl	8000580 <__aeabi_dmul>
 800686a:	a32b      	add	r3, pc, #172	; (adr r3, 8006918 <__ieee754_asin+0x328>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 fcce 	bl	8000210 <__aeabi_dsub>
 8006874:	4632      	mov	r2, r6
 8006876:	463b      	mov	r3, r7
 8006878:	f7f9 fe82 	bl	8000580 <__aeabi_dmul>
 800687c:	a328      	add	r3, pc, #160	; (adr r3, 8006920 <__ieee754_asin+0x330>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fcc7 	bl	8000214 <__adddf3>
 8006886:	4632      	mov	r2, r6
 8006888:	463b      	mov	r3, r7
 800688a:	f7f9 fe79 	bl	8000580 <__aeabi_dmul>
 800688e:	a326      	add	r3, pc, #152	; (adr r3, 8006928 <__ieee754_asin+0x338>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 fcbc 	bl	8000210 <__aeabi_dsub>
 8006898:	4632      	mov	r2, r6
 800689a:	463b      	mov	r3, r7
 800689c:	f7f9 fe70 	bl	8000580 <__aeabi_dmul>
 80068a0:	4b25      	ldr	r3, [pc, #148]	; (8006938 <__ieee754_asin+0x348>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	f7f9 fcb6 	bl	8000214 <__adddf3>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4640      	mov	r0, r8
 80068ae:	4649      	mov	r1, r9
 80068b0:	f7f9 ff90 	bl	80007d4 <__aeabi_ddiv>
 80068b4:	4622      	mov	r2, r4
 80068b6:	462b      	mov	r3, r5
 80068b8:	f7f9 fe62 	bl	8000580 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	e6bf      	b.n	8006646 <__ieee754_asin+0x56>
 80068c6:	bf00      	nop
 80068c8:	54442d18 	.word	0x54442d18
 80068cc:	3ff921fb 	.word	0x3ff921fb
 80068d0:	33145c07 	.word	0x33145c07
 80068d4:	3c91a626 	.word	0x3c91a626
 80068d8:	8800759c 	.word	0x8800759c
 80068dc:	7e37e43c 	.word	0x7e37e43c
 80068e0:	0dfdf709 	.word	0x0dfdf709
 80068e4:	3f023de1 	.word	0x3f023de1
 80068e8:	7501b288 	.word	0x7501b288
 80068ec:	3f49efe0 	.word	0x3f49efe0
 80068f0:	b5688f3b 	.word	0xb5688f3b
 80068f4:	3fa48228 	.word	0x3fa48228
 80068f8:	0e884455 	.word	0x0e884455
 80068fc:	3fc9c155 	.word	0x3fc9c155
 8006900:	03eb6f7d 	.word	0x03eb6f7d
 8006904:	3fd4d612 	.word	0x3fd4d612
 8006908:	55555555 	.word	0x55555555
 800690c:	3fc55555 	.word	0x3fc55555
 8006910:	b12e9282 	.word	0xb12e9282
 8006914:	3fb3b8c5 	.word	0x3fb3b8c5
 8006918:	1b8d0159 	.word	0x1b8d0159
 800691c:	3fe6066c 	.word	0x3fe6066c
 8006920:	9c598ac8 	.word	0x9c598ac8
 8006924:	40002ae5 	.word	0x40002ae5
 8006928:	1c8a2d4b 	.word	0x1c8a2d4b
 800692c:	40033a27 	.word	0x40033a27
 8006930:	3fefffff 	.word	0x3fefffff
 8006934:	3fdfffff 	.word	0x3fdfffff
 8006938:	3ff00000 	.word	0x3ff00000
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	3fef3332 	.word	0x3fef3332
 8006944:	ee10 2a10 	vmov	r2, s0
 8006948:	ee10 0a10 	vmov	r0, s0
 800694c:	465b      	mov	r3, fp
 800694e:	4659      	mov	r1, fp
 8006950:	f7f9 fc60 	bl	8000214 <__adddf3>
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	ec41 0b19 	vmov	d9, r0, r1
 800695c:	ec51 0b18 	vmov	r0, r1, d8
 8006960:	f7f9 ff38 	bl	80007d4 <__aeabi_ddiv>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	ec51 0b19 	vmov	r0, r1, d9
 800696c:	f7f9 fe08 	bl	8000580 <__aeabi_dmul>
 8006970:	f04f 0800 	mov.w	r8, #0
 8006974:	4606      	mov	r6, r0
 8006976:	460f      	mov	r7, r1
 8006978:	4642      	mov	r2, r8
 800697a:	465b      	mov	r3, fp
 800697c:	4640      	mov	r0, r8
 800697e:	4659      	mov	r1, fp
 8006980:	f7f9 fdfe 	bl	8000580 <__aeabi_dmul>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4620      	mov	r0, r4
 800698a:	4629      	mov	r1, r5
 800698c:	f7f9 fc40 	bl	8000210 <__aeabi_dsub>
 8006990:	4642      	mov	r2, r8
 8006992:	4604      	mov	r4, r0
 8006994:	460d      	mov	r5, r1
 8006996:	465b      	mov	r3, fp
 8006998:	4650      	mov	r0, sl
 800699a:	4659      	mov	r1, fp
 800699c:	f7f9 fc3a 	bl	8000214 <__adddf3>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7f9 ff14 	bl	80007d4 <__aeabi_ddiv>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	f7f9 fc30 	bl	8000214 <__adddf3>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	a113      	add	r1, pc, #76	; (adr r1, 8006a08 <__ieee754_asin+0x418>)
 80069ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069be:	f7f9 fc27 	bl	8000210 <__aeabi_dsub>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4630      	mov	r0, r6
 80069c8:	4639      	mov	r1, r7
 80069ca:	f7f9 fc21 	bl	8000210 <__aeabi_dsub>
 80069ce:	4642      	mov	r2, r8
 80069d0:	4604      	mov	r4, r0
 80069d2:	460d      	mov	r5, r1
 80069d4:	465b      	mov	r3, fp
 80069d6:	4640      	mov	r0, r8
 80069d8:	4659      	mov	r1, fp
 80069da:	f7f9 fc1b 	bl	8000214 <__adddf3>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	a10b      	add	r1, pc, #44	; (adr r1, 8006a10 <__ieee754_asin+0x420>)
 80069e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e8:	f7f9 fc12 	bl	8000210 <__aeabi_dsub>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f7f9 fc0c 	bl	8000210 <__aeabi_dsub>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	a104      	add	r1, pc, #16	; (adr r1, 8006a10 <__ieee754_asin+0x420>)
 80069fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a02:	e6df      	b.n	80067c4 <__ieee754_asin+0x1d4>
 8006a04:	f3af 8000 	nop.w
 8006a08:	33145c07 	.word	0x33145c07
 8006a0c:	3c91a626 	.word	0x3c91a626
 8006a10:	54442d18 	.word	0x54442d18
 8006a14:	3fe921fb 	.word	0x3fe921fb

08006a18 <__ieee754_atan2>:
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	ec57 6b11 	vmov	r6, r7, d1
 8006a20:	4273      	negs	r3, r6
 8006a22:	f8df e184 	ldr.w	lr, [pc, #388]	; 8006ba8 <__ieee754_atan2+0x190>
 8006a26:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006a2a:	4333      	orrs	r3, r6
 8006a2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006a30:	4573      	cmp	r3, lr
 8006a32:	ec51 0b10 	vmov	r0, r1, d0
 8006a36:	ee11 8a10 	vmov	r8, s2
 8006a3a:	d80a      	bhi.n	8006a52 <__ieee754_atan2+0x3a>
 8006a3c:	4244      	negs	r4, r0
 8006a3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a42:	4304      	orrs	r4, r0
 8006a44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006a48:	4574      	cmp	r4, lr
 8006a4a:	ee10 9a10 	vmov	r9, s0
 8006a4e:	468c      	mov	ip, r1
 8006a50:	d907      	bls.n	8006a62 <__ieee754_atan2+0x4a>
 8006a52:	4632      	mov	r2, r6
 8006a54:	463b      	mov	r3, r7
 8006a56:	f7f9 fbdd 	bl	8000214 <__adddf3>
 8006a5a:	ec41 0b10 	vmov	d0, r0, r1
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006a66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006a6a:	4334      	orrs	r4, r6
 8006a6c:	d103      	bne.n	8006a76 <__ieee754_atan2+0x5e>
 8006a6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a72:	f000 b94d 	b.w	8006d10 <atan>
 8006a76:	17bc      	asrs	r4, r7, #30
 8006a78:	f004 0402 	and.w	r4, r4, #2
 8006a7c:	ea53 0909 	orrs.w	r9, r3, r9
 8006a80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006a84:	d107      	bne.n	8006a96 <__ieee754_atan2+0x7e>
 8006a86:	2c02      	cmp	r4, #2
 8006a88:	d060      	beq.n	8006b4c <__ieee754_atan2+0x134>
 8006a8a:	2c03      	cmp	r4, #3
 8006a8c:	d1e5      	bne.n	8006a5a <__ieee754_atan2+0x42>
 8006a8e:	a142      	add	r1, pc, #264	; (adr r1, 8006b98 <__ieee754_atan2+0x180>)
 8006a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a94:	e7e1      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006a96:	ea52 0808 	orrs.w	r8, r2, r8
 8006a9a:	d106      	bne.n	8006aaa <__ieee754_atan2+0x92>
 8006a9c:	f1bc 0f00 	cmp.w	ip, #0
 8006aa0:	da5f      	bge.n	8006b62 <__ieee754_atan2+0x14a>
 8006aa2:	a13f      	add	r1, pc, #252	; (adr r1, 8006ba0 <__ieee754_atan2+0x188>)
 8006aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa8:	e7d7      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006aaa:	4572      	cmp	r2, lr
 8006aac:	d10f      	bne.n	8006ace <__ieee754_atan2+0xb6>
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ab4:	d107      	bne.n	8006ac6 <__ieee754_atan2+0xae>
 8006ab6:	2c02      	cmp	r4, #2
 8006ab8:	d84c      	bhi.n	8006b54 <__ieee754_atan2+0x13c>
 8006aba:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <__ieee754_atan2+0x178>)
 8006abc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006ac0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006ac4:	e7c9      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006ac6:	2c02      	cmp	r4, #2
 8006ac8:	d848      	bhi.n	8006b5c <__ieee754_atan2+0x144>
 8006aca:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <__ieee754_atan2+0x17c>)
 8006acc:	e7f6      	b.n	8006abc <__ieee754_atan2+0xa4>
 8006ace:	4573      	cmp	r3, lr
 8006ad0:	d0e4      	beq.n	8006a9c <__ieee754_atan2+0x84>
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006ad8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006adc:	da1e      	bge.n	8006b1c <__ieee754_atan2+0x104>
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	da01      	bge.n	8006ae6 <__ieee754_atan2+0xce>
 8006ae2:	323c      	adds	r2, #60	; 0x3c
 8006ae4:	db1e      	blt.n	8006b24 <__ieee754_atan2+0x10c>
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	463b      	mov	r3, r7
 8006aea:	f7f9 fe73 	bl	80007d4 <__aeabi_ddiv>
 8006aee:	ec41 0b10 	vmov	d0, r0, r1
 8006af2:	f000 faad 	bl	8007050 <fabs>
 8006af6:	f000 f90b 	bl	8006d10 <atan>
 8006afa:	ec51 0b10 	vmov	r0, r1, d0
 8006afe:	2c01      	cmp	r4, #1
 8006b00:	d013      	beq.n	8006b2a <__ieee754_atan2+0x112>
 8006b02:	2c02      	cmp	r4, #2
 8006b04:	d015      	beq.n	8006b32 <__ieee754_atan2+0x11a>
 8006b06:	2c00      	cmp	r4, #0
 8006b08:	d0a7      	beq.n	8006a5a <__ieee754_atan2+0x42>
 8006b0a:	a319      	add	r3, pc, #100	; (adr r3, 8006b70 <__ieee754_atan2+0x158>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fb7e 	bl	8000210 <__aeabi_dsub>
 8006b14:	a318      	add	r3, pc, #96	; (adr r3, 8006b78 <__ieee754_atan2+0x160>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	e014      	b.n	8006b46 <__ieee754_atan2+0x12e>
 8006b1c:	a118      	add	r1, pc, #96	; (adr r1, 8006b80 <__ieee754_atan2+0x168>)
 8006b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b22:	e7ec      	b.n	8006afe <__ieee754_atan2+0xe6>
 8006b24:	2000      	movs	r0, #0
 8006b26:	2100      	movs	r1, #0
 8006b28:	e7e9      	b.n	8006afe <__ieee754_atan2+0xe6>
 8006b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b2e:	4619      	mov	r1, r3
 8006b30:	e793      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006b32:	a30f      	add	r3, pc, #60	; (adr r3, 8006b70 <__ieee754_atan2+0x158>)
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fb6a 	bl	8000210 <__aeabi_dsub>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	a10d      	add	r1, pc, #52	; (adr r1, 8006b78 <__ieee754_atan2+0x160>)
 8006b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b46:	f7f9 fb63 	bl	8000210 <__aeabi_dsub>
 8006b4a:	e786      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006b4c:	a10a      	add	r1, pc, #40	; (adr r1, 8006b78 <__ieee754_atan2+0x160>)
 8006b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b52:	e782      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006b54:	a10c      	add	r1, pc, #48	; (adr r1, 8006b88 <__ieee754_atan2+0x170>)
 8006b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b5a:	e77e      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	e77b      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006b62:	a107      	add	r1, pc, #28	; (adr r1, 8006b80 <__ieee754_atan2+0x168>)
 8006b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b68:	e777      	b.n	8006a5a <__ieee754_atan2+0x42>
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w
 8006b70:	33145c07 	.word	0x33145c07
 8006b74:	3ca1a626 	.word	0x3ca1a626
 8006b78:	54442d18 	.word	0x54442d18
 8006b7c:	400921fb 	.word	0x400921fb
 8006b80:	54442d18 	.word	0x54442d18
 8006b84:	3ff921fb 	.word	0x3ff921fb
 8006b88:	54442d18 	.word	0x54442d18
 8006b8c:	3fe921fb 	.word	0x3fe921fb
 8006b90:	08007138 	.word	0x08007138
 8006b94:	08007150 	.word	0x08007150
 8006b98:	54442d18 	.word	0x54442d18
 8006b9c:	c00921fb 	.word	0xc00921fb
 8006ba0:	54442d18 	.word	0x54442d18
 8006ba4:	bff921fb 	.word	0xbff921fb
 8006ba8:	7ff00000 	.word	0x7ff00000

08006bac <__ieee754_sqrt>:
 8006bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb0:	ec55 4b10 	vmov	r4, r5, d0
 8006bb4:	4e55      	ldr	r6, [pc, #340]	; (8006d0c <__ieee754_sqrt+0x160>)
 8006bb6:	43ae      	bics	r6, r5
 8006bb8:	ee10 0a10 	vmov	r0, s0
 8006bbc:	ee10 3a10 	vmov	r3, s0
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	d110      	bne.n	8006be8 <__ieee754_sqrt+0x3c>
 8006bc6:	ee10 2a10 	vmov	r2, s0
 8006bca:	462b      	mov	r3, r5
 8006bcc:	f7f9 fcd8 	bl	8000580 <__aeabi_dmul>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	f7f9 fb1c 	bl	8000214 <__adddf3>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	460d      	mov	r5, r1
 8006be0:	ec45 4b10 	vmov	d0, r4, r5
 8006be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	dc10      	bgt.n	8006c0e <__ieee754_sqrt+0x62>
 8006bec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bf0:	4330      	orrs	r0, r6
 8006bf2:	d0f5      	beq.n	8006be0 <__ieee754_sqrt+0x34>
 8006bf4:	b15d      	cbz	r5, 8006c0e <__ieee754_sqrt+0x62>
 8006bf6:	ee10 2a10 	vmov	r2, s0
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	ee10 0a10 	vmov	r0, s0
 8006c00:	f7f9 fb06 	bl	8000210 <__aeabi_dsub>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	f7f9 fde4 	bl	80007d4 <__aeabi_ddiv>
 8006c0c:	e7e6      	b.n	8006bdc <__ieee754_sqrt+0x30>
 8006c0e:	1512      	asrs	r2, r2, #20
 8006c10:	d074      	beq.n	8006cfc <__ieee754_sqrt+0x150>
 8006c12:	07d4      	lsls	r4, r2, #31
 8006c14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006c18:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006c20:	bf5e      	ittt	pl
 8006c22:	0fda      	lsrpl	r2, r3, #31
 8006c24:	005b      	lslpl	r3, r3, #1
 8006c26:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006c2a:	2400      	movs	r4, #0
 8006c2c:	0fda      	lsrs	r2, r3, #31
 8006c2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006c32:	107f      	asrs	r7, r7, #1
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	2516      	movs	r5, #22
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006c3e:	1886      	adds	r6, r0, r2
 8006c40:	428e      	cmp	r6, r1
 8006c42:	bfde      	ittt	le
 8006c44:	1b89      	suble	r1, r1, r6
 8006c46:	18b0      	addle	r0, r6, r2
 8006c48:	18a4      	addle	r4, r4, r2
 8006c4a:	0049      	lsls	r1, r1, #1
 8006c4c:	3d01      	subs	r5, #1
 8006c4e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006c52:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006c56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c5a:	d1f0      	bne.n	8006c3e <__ieee754_sqrt+0x92>
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	f04f 0e20 	mov.w	lr, #32
 8006c62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006c66:	4281      	cmp	r1, r0
 8006c68:	eb06 0c05 	add.w	ip, r6, r5
 8006c6c:	dc02      	bgt.n	8006c74 <__ieee754_sqrt+0xc8>
 8006c6e:	d113      	bne.n	8006c98 <__ieee754_sqrt+0xec>
 8006c70:	459c      	cmp	ip, r3
 8006c72:	d811      	bhi.n	8006c98 <__ieee754_sqrt+0xec>
 8006c74:	f1bc 0f00 	cmp.w	ip, #0
 8006c78:	eb0c 0506 	add.w	r5, ip, r6
 8006c7c:	da43      	bge.n	8006d06 <__ieee754_sqrt+0x15a>
 8006c7e:	2d00      	cmp	r5, #0
 8006c80:	db41      	blt.n	8006d06 <__ieee754_sqrt+0x15a>
 8006c82:	f100 0801 	add.w	r8, r0, #1
 8006c86:	1a09      	subs	r1, r1, r0
 8006c88:	459c      	cmp	ip, r3
 8006c8a:	bf88      	it	hi
 8006c8c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006c90:	eba3 030c 	sub.w	r3, r3, ip
 8006c94:	4432      	add	r2, r6
 8006c96:	4640      	mov	r0, r8
 8006c98:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006c9c:	f1be 0e01 	subs.w	lr, lr, #1
 8006ca0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ca8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006cac:	d1db      	bne.n	8006c66 <__ieee754_sqrt+0xba>
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	d006      	beq.n	8006cc0 <__ieee754_sqrt+0x114>
 8006cb2:	1c50      	adds	r0, r2, #1
 8006cb4:	bf13      	iteet	ne
 8006cb6:	3201      	addne	r2, #1
 8006cb8:	3401      	addeq	r4, #1
 8006cba:	4672      	moveq	r2, lr
 8006cbc:	f022 0201 	bicne.w	r2, r2, #1
 8006cc0:	1063      	asrs	r3, r4, #1
 8006cc2:	0852      	lsrs	r2, r2, #1
 8006cc4:	07e1      	lsls	r1, r4, #31
 8006cc6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006cca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006cce:	bf48      	it	mi
 8006cd0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006cd4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006cd8:	4614      	mov	r4, r2
 8006cda:	e781      	b.n	8006be0 <__ieee754_sqrt+0x34>
 8006cdc:	0ad9      	lsrs	r1, r3, #11
 8006cde:	3815      	subs	r0, #21
 8006ce0:	055b      	lsls	r3, r3, #21
 8006ce2:	2900      	cmp	r1, #0
 8006ce4:	d0fa      	beq.n	8006cdc <__ieee754_sqrt+0x130>
 8006ce6:	02cd      	lsls	r5, r1, #11
 8006ce8:	d50a      	bpl.n	8006d00 <__ieee754_sqrt+0x154>
 8006cea:	f1c2 0420 	rsb	r4, r2, #32
 8006cee:	fa23 f404 	lsr.w	r4, r3, r4
 8006cf2:	1e55      	subs	r5, r2, #1
 8006cf4:	4093      	lsls	r3, r2
 8006cf6:	4321      	orrs	r1, r4
 8006cf8:	1b42      	subs	r2, r0, r5
 8006cfa:	e78a      	b.n	8006c12 <__ieee754_sqrt+0x66>
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	e7f0      	b.n	8006ce2 <__ieee754_sqrt+0x136>
 8006d00:	0049      	lsls	r1, r1, #1
 8006d02:	3201      	adds	r2, #1
 8006d04:	e7ef      	b.n	8006ce6 <__ieee754_sqrt+0x13a>
 8006d06:	4680      	mov	r8, r0
 8006d08:	e7bd      	b.n	8006c86 <__ieee754_sqrt+0xda>
 8006d0a:	bf00      	nop
 8006d0c:	7ff00000 	.word	0x7ff00000

08006d10 <atan>:
 8006d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	ec55 4b10 	vmov	r4, r5, d0
 8006d18:	4bc3      	ldr	r3, [pc, #780]	; (8007028 <atan+0x318>)
 8006d1a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006d1e:	429e      	cmp	r6, r3
 8006d20:	46ab      	mov	fp, r5
 8006d22:	dd18      	ble.n	8006d56 <atan+0x46>
 8006d24:	4bc1      	ldr	r3, [pc, #772]	; (800702c <atan+0x31c>)
 8006d26:	429e      	cmp	r6, r3
 8006d28:	dc01      	bgt.n	8006d2e <atan+0x1e>
 8006d2a:	d109      	bne.n	8006d40 <atan+0x30>
 8006d2c:	b144      	cbz	r4, 8006d40 <atan+0x30>
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fa6d 	bl	8000214 <__adddf3>
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	460d      	mov	r5, r1
 8006d3e:	e006      	b.n	8006d4e <atan+0x3e>
 8006d40:	f1bb 0f00 	cmp.w	fp, #0
 8006d44:	f300 8131 	bgt.w	8006faa <atan+0x29a>
 8006d48:	a59b      	add	r5, pc, #620	; (adr r5, 8006fb8 <atan+0x2a8>)
 8006d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d4e:	ec45 4b10 	vmov	d0, r4, r5
 8006d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	4bb6      	ldr	r3, [pc, #728]	; (8007030 <atan+0x320>)
 8006d58:	429e      	cmp	r6, r3
 8006d5a:	dc14      	bgt.n	8006d86 <atan+0x76>
 8006d5c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006d60:	429e      	cmp	r6, r3
 8006d62:	dc0d      	bgt.n	8006d80 <atan+0x70>
 8006d64:	a396      	add	r3, pc, #600	; (adr r3, 8006fc0 <atan+0x2b0>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	ee10 0a10 	vmov	r0, s0
 8006d6e:	4629      	mov	r1, r5
 8006d70:	f7f9 fa50 	bl	8000214 <__adddf3>
 8006d74:	4baf      	ldr	r3, [pc, #700]	; (8007034 <atan+0x324>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	f7f9 fe92 	bl	8000aa0 <__aeabi_dcmpgt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1e6      	bne.n	8006d4e <atan+0x3e>
 8006d80:	f04f 3aff 	mov.w	sl, #4294967295
 8006d84:	e02b      	b.n	8006dde <atan+0xce>
 8006d86:	f000 f963 	bl	8007050 <fabs>
 8006d8a:	4bab      	ldr	r3, [pc, #684]	; (8007038 <atan+0x328>)
 8006d8c:	429e      	cmp	r6, r3
 8006d8e:	ec55 4b10 	vmov	r4, r5, d0
 8006d92:	f300 80bf 	bgt.w	8006f14 <atan+0x204>
 8006d96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006d9a:	429e      	cmp	r6, r3
 8006d9c:	f300 80a0 	bgt.w	8006ee0 <atan+0x1d0>
 8006da0:	ee10 2a10 	vmov	r2, s0
 8006da4:	ee10 0a10 	vmov	r0, s0
 8006da8:	462b      	mov	r3, r5
 8006daa:	4629      	mov	r1, r5
 8006dac:	f7f9 fa32 	bl	8000214 <__adddf3>
 8006db0:	4ba0      	ldr	r3, [pc, #640]	; (8007034 <atan+0x324>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	f7f9 fa2c 	bl	8000210 <__aeabi_dsub>
 8006db8:	2200      	movs	r2, #0
 8006dba:	4606      	mov	r6, r0
 8006dbc:	460f      	mov	r7, r1
 8006dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fa25 	bl	8000214 <__adddf3>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4630      	mov	r0, r6
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 fcff 	bl	80007d4 <__aeabi_ddiv>
 8006dd6:	f04f 0a00 	mov.w	sl, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460d      	mov	r5, r1
 8006dde:	4622      	mov	r2, r4
 8006de0:	462b      	mov	r3, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	4629      	mov	r1, r5
 8006de6:	f7f9 fbcb 	bl	8000580 <__aeabi_dmul>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4680      	mov	r8, r0
 8006df0:	4689      	mov	r9, r1
 8006df2:	f7f9 fbc5 	bl	8000580 <__aeabi_dmul>
 8006df6:	a374      	add	r3, pc, #464	; (adr r3, 8006fc8 <atan+0x2b8>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	460f      	mov	r7, r1
 8006e00:	f7f9 fbbe 	bl	8000580 <__aeabi_dmul>
 8006e04:	a372      	add	r3, pc, #456	; (adr r3, 8006fd0 <atan+0x2c0>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7f9 fa03 	bl	8000214 <__adddf3>
 8006e0e:	4632      	mov	r2, r6
 8006e10:	463b      	mov	r3, r7
 8006e12:	f7f9 fbb5 	bl	8000580 <__aeabi_dmul>
 8006e16:	a370      	add	r3, pc, #448	; (adr r3, 8006fd8 <atan+0x2c8>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f7f9 f9fa 	bl	8000214 <__adddf3>
 8006e20:	4632      	mov	r2, r6
 8006e22:	463b      	mov	r3, r7
 8006e24:	f7f9 fbac 	bl	8000580 <__aeabi_dmul>
 8006e28:	a36d      	add	r3, pc, #436	; (adr r3, 8006fe0 <atan+0x2d0>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 f9f1 	bl	8000214 <__adddf3>
 8006e32:	4632      	mov	r2, r6
 8006e34:	463b      	mov	r3, r7
 8006e36:	f7f9 fba3 	bl	8000580 <__aeabi_dmul>
 8006e3a:	a36b      	add	r3, pc, #428	; (adr r3, 8006fe8 <atan+0x2d8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 f9e8 	bl	8000214 <__adddf3>
 8006e44:	4632      	mov	r2, r6
 8006e46:	463b      	mov	r3, r7
 8006e48:	f7f9 fb9a 	bl	8000580 <__aeabi_dmul>
 8006e4c:	a368      	add	r3, pc, #416	; (adr r3, 8006ff0 <atan+0x2e0>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 f9df 	bl	8000214 <__adddf3>
 8006e56:	4642      	mov	r2, r8
 8006e58:	464b      	mov	r3, r9
 8006e5a:	f7f9 fb91 	bl	8000580 <__aeabi_dmul>
 8006e5e:	a366      	add	r3, pc, #408	; (adr r3, 8006ff8 <atan+0x2e8>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	4680      	mov	r8, r0
 8006e66:	4689      	mov	r9, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fb88 	bl	8000580 <__aeabi_dmul>
 8006e70:	a363      	add	r3, pc, #396	; (adr r3, 8007000 <atan+0x2f0>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 f9cb 	bl	8000210 <__aeabi_dsub>
 8006e7a:	4632      	mov	r2, r6
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	f7f9 fb7f 	bl	8000580 <__aeabi_dmul>
 8006e82:	a361      	add	r3, pc, #388	; (adr r3, 8007008 <atan+0x2f8>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 f9c2 	bl	8000210 <__aeabi_dsub>
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	f7f9 fb76 	bl	8000580 <__aeabi_dmul>
 8006e94:	a35e      	add	r3, pc, #376	; (adr r3, 8007010 <atan+0x300>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 f9b9 	bl	8000210 <__aeabi_dsub>
 8006e9e:	4632      	mov	r2, r6
 8006ea0:	463b      	mov	r3, r7
 8006ea2:	f7f9 fb6d 	bl	8000580 <__aeabi_dmul>
 8006ea6:	a35c      	add	r3, pc, #368	; (adr r3, 8007018 <atan+0x308>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 f9b0 	bl	8000210 <__aeabi_dsub>
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	463b      	mov	r3, r7
 8006eb4:	f7f9 fb64 	bl	8000580 <__aeabi_dmul>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 f9a8 	bl	8000214 <__adddf3>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	f7f9 fb5a 	bl	8000580 <__aeabi_dmul>
 8006ecc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	d14b      	bne.n	8006f6e <atan+0x25e>
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 f999 	bl	8000210 <__aeabi_dsub>
 8006ede:	e72c      	b.n	8006d3a <atan+0x2a>
 8006ee0:	ee10 0a10 	vmov	r0, s0
 8006ee4:	4b53      	ldr	r3, [pc, #332]	; (8007034 <atan+0x324>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 f991 	bl	8000210 <__aeabi_dsub>
 8006eee:	4b51      	ldr	r3, [pc, #324]	; (8007034 <atan+0x324>)
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	460f      	mov	r7, r1
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7f9 f98b 	bl	8000214 <__adddf3>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	f7f9 fc65 	bl	80007d4 <__aeabi_ddiv>
 8006f0a:	f04f 0a01 	mov.w	sl, #1
 8006f0e:	4604      	mov	r4, r0
 8006f10:	460d      	mov	r5, r1
 8006f12:	e764      	b.n	8006dde <atan+0xce>
 8006f14:	4b49      	ldr	r3, [pc, #292]	; (800703c <atan+0x32c>)
 8006f16:	429e      	cmp	r6, r3
 8006f18:	da1d      	bge.n	8006f56 <atan+0x246>
 8006f1a:	ee10 0a10 	vmov	r0, s0
 8006f1e:	4b48      	ldr	r3, [pc, #288]	; (8007040 <atan+0x330>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7f9 f974 	bl	8000210 <__aeabi_dsub>
 8006f28:	4b45      	ldr	r3, [pc, #276]	; (8007040 <atan+0x330>)
 8006f2a:	4606      	mov	r6, r0
 8006f2c:	460f      	mov	r7, r1
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7f9 fb24 	bl	8000580 <__aeabi_dmul>
 8006f38:	4b3e      	ldr	r3, [pc, #248]	; (8007034 <atan+0x324>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f7f9 f96a 	bl	8000214 <__adddf3>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4630      	mov	r0, r6
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 fc44 	bl	80007d4 <__aeabi_ddiv>
 8006f4c:	f04f 0a02 	mov.w	sl, #2
 8006f50:	4604      	mov	r4, r0
 8006f52:	460d      	mov	r5, r1
 8006f54:	e743      	b.n	8006dde <atan+0xce>
 8006f56:	462b      	mov	r3, r5
 8006f58:	ee10 2a10 	vmov	r2, s0
 8006f5c:	4939      	ldr	r1, [pc, #228]	; (8007044 <atan+0x334>)
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f7f9 fc38 	bl	80007d4 <__aeabi_ddiv>
 8006f64:	f04f 0a03 	mov.w	sl, #3
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	e737      	b.n	8006dde <atan+0xce>
 8006f6e:	4b36      	ldr	r3, [pc, #216]	; (8007048 <atan+0x338>)
 8006f70:	4e36      	ldr	r6, [pc, #216]	; (800704c <atan+0x33c>)
 8006f72:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006f76:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006f7a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006f7e:	f7f9 f947 	bl	8000210 <__aeabi_dsub>
 8006f82:	4622      	mov	r2, r4
 8006f84:	462b      	mov	r3, r5
 8006f86:	f7f9 f943 	bl	8000210 <__aeabi_dsub>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006f92:	f7f9 f93d 	bl	8000210 <__aeabi_dsub>
 8006f96:	f1bb 0f00 	cmp.w	fp, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	f6bf aed6 	bge.w	8006d4e <atan+0x3e>
 8006fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fa6:	461d      	mov	r5, r3
 8006fa8:	e6d1      	b.n	8006d4e <atan+0x3e>
 8006faa:	a51d      	add	r5, pc, #116	; (adr r5, 8007020 <atan+0x310>)
 8006fac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fb0:	e6cd      	b.n	8006d4e <atan+0x3e>
 8006fb2:	bf00      	nop
 8006fb4:	f3af 8000 	nop.w
 8006fb8:	54442d18 	.word	0x54442d18
 8006fbc:	bff921fb 	.word	0xbff921fb
 8006fc0:	8800759c 	.word	0x8800759c
 8006fc4:	7e37e43c 	.word	0x7e37e43c
 8006fc8:	e322da11 	.word	0xe322da11
 8006fcc:	3f90ad3a 	.word	0x3f90ad3a
 8006fd0:	24760deb 	.word	0x24760deb
 8006fd4:	3fa97b4b 	.word	0x3fa97b4b
 8006fd8:	a0d03d51 	.word	0xa0d03d51
 8006fdc:	3fb10d66 	.word	0x3fb10d66
 8006fe0:	c54c206e 	.word	0xc54c206e
 8006fe4:	3fb745cd 	.word	0x3fb745cd
 8006fe8:	920083ff 	.word	0x920083ff
 8006fec:	3fc24924 	.word	0x3fc24924
 8006ff0:	5555550d 	.word	0x5555550d
 8006ff4:	3fd55555 	.word	0x3fd55555
 8006ff8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006ffc:	bfa2b444 	.word	0xbfa2b444
 8007000:	52defd9a 	.word	0x52defd9a
 8007004:	3fadde2d 	.word	0x3fadde2d
 8007008:	af749a6d 	.word	0xaf749a6d
 800700c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007010:	fe231671 	.word	0xfe231671
 8007014:	3fbc71c6 	.word	0x3fbc71c6
 8007018:	9998ebc4 	.word	0x9998ebc4
 800701c:	3fc99999 	.word	0x3fc99999
 8007020:	54442d18 	.word	0x54442d18
 8007024:	3ff921fb 	.word	0x3ff921fb
 8007028:	440fffff 	.word	0x440fffff
 800702c:	7ff00000 	.word	0x7ff00000
 8007030:	3fdbffff 	.word	0x3fdbffff
 8007034:	3ff00000 	.word	0x3ff00000
 8007038:	3ff2ffff 	.word	0x3ff2ffff
 800703c:	40038000 	.word	0x40038000
 8007040:	3ff80000 	.word	0x3ff80000
 8007044:	bff00000 	.word	0xbff00000
 8007048:	08007188 	.word	0x08007188
 800704c:	08007168 	.word	0x08007168

08007050 <fabs>:
 8007050:	ec51 0b10 	vmov	r0, r1, d0
 8007054:	ee10 2a10 	vmov	r2, s0
 8007058:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800705c:	ec43 2b10 	vmov	d0, r2, r3
 8007060:	4770      	bx	lr
 8007062:	0000      	movs	r0, r0
 8007064:	0000      	movs	r0, r0
	...

08007068 <nan>:
 8007068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007070 <nan+0x8>
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	00000000 	.word	0x00000000
 8007074:	7ff80000 	.word	0x7ff80000

08007078 <__errno>:
 8007078:	4b01      	ldr	r3, [pc, #4]	; (8007080 <__errno+0x8>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	2000000c 	.word	0x2000000c

08007084 <__libc_init_array>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4d0d      	ldr	r5, [pc, #52]	; (80070bc <__libc_init_array+0x38>)
 8007088:	4c0d      	ldr	r4, [pc, #52]	; (80070c0 <__libc_init_array+0x3c>)
 800708a:	1b64      	subs	r4, r4, r5
 800708c:	10a4      	asrs	r4, r4, #2
 800708e:	2600      	movs	r6, #0
 8007090:	42a6      	cmp	r6, r4
 8007092:	d109      	bne.n	80070a8 <__libc_init_array+0x24>
 8007094:	4d0b      	ldr	r5, [pc, #44]	; (80070c4 <__libc_init_array+0x40>)
 8007096:	4c0c      	ldr	r4, [pc, #48]	; (80070c8 <__libc_init_array+0x44>)
 8007098:	f000 f82e 	bl	80070f8 <_init>
 800709c:	1b64      	subs	r4, r4, r5
 800709e:	10a4      	asrs	r4, r4, #2
 80070a0:	2600      	movs	r6, #0
 80070a2:	42a6      	cmp	r6, r4
 80070a4:	d105      	bne.n	80070b2 <__libc_init_array+0x2e>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ac:	4798      	blx	r3
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7ee      	b.n	8007090 <__libc_init_array+0xc>
 80070b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b6:	4798      	blx	r3
 80070b8:	3601      	adds	r6, #1
 80070ba:	e7f2      	b.n	80070a2 <__libc_init_array+0x1e>
 80070bc:	080071b0 	.word	0x080071b0
 80070c0:	080071b0 	.word	0x080071b0
 80070c4:	080071b0 	.word	0x080071b0
 80070c8:	080071b8 	.word	0x080071b8

080070cc <memcpy>:
 80070cc:	440a      	add	r2, r1
 80070ce:	4291      	cmp	r1, r2
 80070d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d4:	d100      	bne.n	80070d8 <memcpy+0xc>
 80070d6:	4770      	bx	lr
 80070d8:	b510      	push	{r4, lr}
 80070da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e2:	4291      	cmp	r1, r2
 80070e4:	d1f9      	bne.n	80070da <memcpy+0xe>
 80070e6:	bd10      	pop	{r4, pc}

080070e8 <memset>:
 80070e8:	4402      	add	r2, r0
 80070ea:	4603      	mov	r3, r0
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <_init>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr

08007104 <_fini>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	bf00      	nop
 8007108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710a:	bc08      	pop	{r3}
 800710c:	469e      	mov	lr, r3
 800710e:	4770      	bx	lr
