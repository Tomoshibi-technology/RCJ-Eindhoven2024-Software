
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009368  08009368  00019368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d0  080097d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097d8  080097d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080097d8  080097d8  000197d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097e0  080097e0  000197e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080097e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  2000007c  08009860  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  08009860  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b1a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da3  00000000  00000000  00039bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  0003da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556f  00000000  00000000  0003ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001697d  00000000  00000000  00063f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5fa3  00000000  00000000  0007a8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015088f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  001508e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009350 	.word	0x08009350

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	08009350 	.word	0x08009350

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f008 fa17 	bl	8009324 <memcpy>
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f003 fab4 	bl	8004488 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f002 fb00 	bl	8003528 <HAL_Delay>
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f003 fa93 	bl	8004488 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
 8000f7a:	f003 fb83 	bl	8004684 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800111c:	f006 fe4c 	bl	8007db8 <atan2>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
 8001188:	f006 fd8c 	bl	8007ca4 <copysign>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011a2:	f006 fdd5 	bl	8007d50 <asin>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001234:	f006 fdc0 	bl	8007db8 <atan2>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"
#include "math.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	80da      	strh	r2, [r3, #6]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  ID = id;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	711a      	strb	r2, [r3, #4]
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_ZN3STS8moveContEtss>:

void STS::moveCont(uint16_t abs_speed, int16_t goal_position, int16_t now_position)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	747b      	strb	r3, [r7, #17]
 80012f6:	2305      	movs	r3, #5
 80012f8:	74fb      	strb	r3, [r7, #19]
 80012fa:	2303      	movs	r3, #3
 80012fc:	753b      	strb	r3, [r7, #20]
 80012fe:	232e      	movs	r3, #46	; 0x2e
 8001300:	757b      	strb	r3, [r7, #21]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	74bb      	strb	r3, [r7, #18]
  uint8_t checksum = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t diff = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
  int16_t inst_speed = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	847b      	strh	r3, [r7, #34]	; 0x22

  diff = abs(goal_position - now_position);
 800131a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bfb8      	it	lt
 8001328:	425b      	neglt	r3, r3
 800132a:	837b      	strh	r3, [r7, #26]

  if(diff < 10){
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	2b09      	cmp	r3, #9
 8001330:	d802      	bhi.n	8001338 <_ZN3STS8moveContEtss+0x70>
	  inst_speed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001336:	e01f      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else if(diff < abs_speed * abs_speed / 6000){
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <_ZN3STS8moveContEtss+0x174>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	11c9      	asrs	r1, r1, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	429a      	cmp	r2, r3
 8001350:	da10      	bge.n	8001374 <_ZN3STS8moveContEtss+0xac>
	  inst_speed = sqrt(1500 * diff);
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f8f6 	bl	800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbb9 	bl	8000ae0 <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	e001      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else{
	  inst_speed = abs_speed;
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if(goal_position < now_position){
 8001378:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	da02      	bge.n	800138a <_ZN3STS8moveContEtss+0xc2>
	  speed = inst_speed;
 8001384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	e003      	b.n	8001392 <_ZN3STS8moveContEtss+0xca>
  }else{
	  speed = -inst_speed;
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	425b      	negs	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((goal_position - now_position < 0 && speed > 0) || (goal_position - now_position > 0 && speed < 0))
 8001392:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da03      	bge.n	80013a8 <_ZN3STS8moveContEtss+0xe0>
 80013a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc0a      	bgt.n	80013be <_ZN3STS8moveContEtss+0xf6>
 80013a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd18      	ble.n	80013e8 <_ZN3STS8moveContEtss+0x120>
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da14      	bge.n	80013e8 <_ZN3STS8moveContEtss+0x120>
  {
    if (speed < 0)
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da04      	bge.n	80013d0 <_ZN3STS8moveContEtss+0x108>
    {
      speed = 32768 - speed;
 80013c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <_ZN3STS8moveContEtss+0x178>)
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    send_Buf[6] = speed;
 80013d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75bb      	strb	r3, [r7, #22]
    send_Buf[7] = speed >> 8;
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f002 f8a0 	bl	8003528 <HAL_Delay>
  }

  for (int i = 2; i < 8; i++)
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dc0d      	bgt.n	800140e <_ZN3STS8moveContEtss+0x146>
  {
    checksum += send_Buf[i];
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	4413      	add	r3, r2
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e7ee      	b.n	80013ec <_ZN3STS8moveContEtss+0x124>
  }
  checksum = ~checksum;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	43db      	mvns	r3, r3
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	763b      	strb	r3, [r7, #24]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	2332      	movs	r3, #50	; 0x32
 8001428:	2209      	movs	r2, #9
 800142a:	f005 fe4a 	bl	80070c2 <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f002 f87a 	bl	8003528 <HAL_Delay>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	057619f1 	.word	0x057619f1
 8001440:	ffff8000 	.word	0xffff8000

08001444 <_ZN3STS4sendEv>:
	HAL_UART_Transmit(UART, send_Buf, 13, 50);
	HAL_Delay(1);
}

void STS::send()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	23ff      	movs	r3, #255	; 0xff
 8001458:	723b      	strb	r3, [r7, #8]
 800145a:	23ff      	movs	r3, #255	; 0xff
 800145c:	727b      	strb	r3, [r7, #9]
 800145e:	2304      	movs	r3, #4
 8001460:	72fb      	strb	r3, [r7, #11]
 8001462:	2302      	movs	r3, #2
 8001464:	733b      	strb	r3, [r7, #12]
 8001466:	2338      	movs	r3, #56	; 0x38
 8001468:	737b      	strb	r3, [r7, #13]
 800146a:	2302      	movs	r3, #2
 800146c:	73bb      	strb	r3, [r7, #14]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 8001478:	2302      	movs	r3, #2
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b06      	cmp	r3, #6
 8001480:	dc0b      	bgt.n	800149a <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	4413      	add	r3, r2
 8001490:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e7f0      	b.n	800147c <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	43db      	mvns	r3, r3
 800149e:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	2208      	movs	r2, #8
 80014b0:	f005 fe07 	bl	80070c2 <HAL_UART_Transmit>
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 80014c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d8:	4293      	cmp	r3, r2
 80014da:	dd08      	ble.n	80014ee <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001500:	4293      	cmp	r3, r2
 8001502:	dd08      	ble.n	8001516 <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b25a      	sxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800151c:	b29b      	uxth	r3, r3
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	b29a      	uxth	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4413      	add	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	811a      	strh	r2, [r3, #8]

  return -position;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800153a:	b29b      	uxth	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	b21b      	sxth	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7fe ffa8 	bl	80004ac <__aeabi_i2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f006 fc2a 	bl	8007dbc <sqrt>
 8001568:	eeb0 7a40 	vmov.f32	s14, s0
 800156c:	eef0 7a60 	vmov.f32	s15, s1
 8001570:	eeb0 0a47 	vmov.f32	s0, s14
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	ed87 0a01 	vstr	s0, [r7, #4]
 8001588:	ed97 0a01 	vldr	s0, [r7, #4]
 800158c:	f006 fb9c 	bl	8007cc8 <cosf>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <_ZN4CALC14similarityRiseEhsttt>:
	}

	return output;
}

int16_t CALC::similarityRise(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	72fb      	strb	r3, [r7, #11]
 80015b2:	460b      	mov	r3, r1
 80015b4:	813b      	strh	r3, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da00      	bge.n	80015d2 <_ZN4CALC14similarityRiseEhsttt+0x32>
 80015d0:	330f      	adds	r3, #15
 80015d2:	111b      	asrs	r3, r3, #4
 80015d4:	425b      	negs	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80015dc:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t diff = angle - refference;
 80015de:	893b      	ldrh	r3, [r7, #8]
 80015e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (diff > 180) {
 80015e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015ec:	2bb4      	cmp	r3, #180	; 0xb4
 80015ee:	dd04      	ble.n	80015fa <_ZN4CALC14similarityRiseEhsttt+0x5a>
		diff = diff - 360;
 80015f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if (diff < -180) {
 80015fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015fe:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001602:	da04      	bge.n	800160e <_ZN4CALC14similarityRiseEhsttt+0x6e>
		diff = diff + 360;
 8001604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001606:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160a:	b29b      	uxth	r3, r3
 800160c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if (abs(diff) >= widthAngle / 2) {
 800160e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfb8      	it	lt
 8001616:	425b      	neglt	r3, r3
 8001618:	b29a      	uxth	r2, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	429a      	cmp	r2, r3
 8001622:	d301      	bcc.n	8001628 <_ZN4CALC14similarityRiseEhsttt+0x88>
		return 0;
 8001624:	2300      	movs	r3, #0
 8001626:	e0ba      	b.n	800179e <_ZN4CALC14similarityRiseEhsttt+0x1fe>
	}

	float angleRad = angle * M_PI / 180.0;
 8001628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff3e 	bl	80004ac <__aeabi_i2d>
 8001630:	a35d      	add	r3, pc, #372	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffa3 	bl	8000580 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 8001648:	f7ff f8c4 	bl	80007d4 <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa6c 	bl	8000b30 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
	float refferenceRad = refference * M_PI / 180.0;
 800165c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff23 	bl	80004ac <__aeabi_i2d>
 8001666:	a350      	add	r3, pc, #320	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff88 	bl	8000580 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 800167e:	f7ff f8a9 	bl	80007d4 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa51 	bl	8000b30 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff09 	bl	80004ac <__aeabi_i2d>
 800169a:	a343      	add	r3, pc, #268	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff6e 	bl	8000580 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 80016b2:	f7ff f88f 	bl	80007d4 <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa37 	bl	8000b30 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 80016c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	eeb0 0a67 	vmov.f32	s0, s15
 80016d6:	f7ff ff52 	bl	800157e <_ZSt3cosf>
 80016da:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 80016de:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ea:	eeb0 0a47 	vmov.f32	s0, s14
 80016ee:	f7ff ff46 	bl	800157e <_ZSt3cosf>
 80016f2:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 80016f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80016fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001706:	edd7 7a05 	vldr	s15, [r7, #20]
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	edc7 7a04 	vstr	s15, [r7, #16]

    int16_t output = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(diff > 0){
 800171a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800171e:	2b00      	cmp	r3, #0
 8001720:	dd19      	ble.n	8001756 <_ZN4CALC14similarityRiseEhsttt+0x1b6>
        output = center - (normalizedResult - 1) * widthHue;
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001734:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001738:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
 8001752:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001754:	e018      	b.n	8001788 <_ZN4CALC14similarityRiseEhsttt+0x1e8>
    } else {
        output = center + (normalizedResult - 1) * widthHue;
 8001756:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001760:	edd7 7a04 	vldr	s15, [r7, #16]
 8001764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001768:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800176c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

	if(output < 0){
 8001788:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	da04      	bge.n	800179a <_ZN4CALC14similarityRiseEhsttt+0x1fa>
		output += 256;
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001796:	b29b      	uxth	r3, r3
 8001798:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	return output;
 800179a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	54442d18 	.word	0x54442d18
 80017ac:	400921fb 	.word	0x400921fb
 80017b0:	40668000 	.word	0x40668000
 80017b4:	00000000 	.word	0x00000000

080017b8 <_ZN4CALC16similarityNormalEhst>:
	}

	return output;
}

int16_t CALC::similarityNormal(uint8_t ledNum, int16_t refference, uint16_t width){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	72fb      	strb	r3, [r7, #11]
 80017ca:	460b      	mov	r3, r1
 80017cc:	813b      	strh	r3, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da00      	bge.n	80017ea <_ZN4CALC16similarityNormalEhst+0x32>
 80017e8:	330f      	adds	r3, #15
 80017ea:	111b      	asrs	r3, r3, #4
 80017ec:	425b      	negs	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80017f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t diff = abs(angle - refference);
 80017f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80017f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bfb8      	it	lt
 8001802:	425b      	neglt	r3, r3
 8001804:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (diff > 180) {
 8001806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001808:	2bb4      	cmp	r3, #180	; 0xb4
 800180a:	d903      	bls.n	8001814 <_ZN4CALC16similarityNormalEhst+0x5c>
        diff = 360 - diff;
 800180c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800180e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001812:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if (diff >= width / 2) {
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800181c:	429a      	cmp	r2, r3
 800181e:	d301      	bcc.n	8001824 <_ZN4CALC16similarityNormalEhst+0x6c>
        return 0;
 8001820:	2300      	movs	r3, #0
 8001822:	e081      	b.n	8001928 <_ZN4CALC16similarityNormalEhst+0x170>
    }

    float angleRad = angle * M_PI / 180.0;
 8001824:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe40 	bl	80004ac <__aeabi_i2d>
 800182c:	a340      	add	r3, pc, #256	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fea5 	bl	8000580 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 8001844:	f7fe ffc6 	bl	80007d4 <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f96e 	bl	8000b30 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    float refferenceRad = refference * M_PI / 180.0;
 8001858:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe25 	bl	80004ac <__aeabi_i2d>
 8001862:	a333      	add	r3, pc, #204	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fe8a 	bl	8000580 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 800187a:	f7fe ffab 	bl	80007d4 <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f953 	bl	8000b30 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    float widthRad = width * M_PI / 180.0;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe0b 	bl	80004ac <__aeabi_i2d>
 8001896:	a326      	add	r3, pc, #152	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fe70 	bl	8000580 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 80018ae:	f7fe ff91 	bl	80007d4 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f939 	bl	8000b30 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	623b      	str	r3, [r7, #32]

    float result = cos(angleRad - refferenceRad);
 80018c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	f7ff fe54 	bl	800157e <_ZSt3cosf>
 80018d6:	ed87 0a07 	vstr	s0, [r7, #28]
    float zeroPoint = cos(widthRad / 2);
 80018da:	edd7 7a08 	vldr	s15, [r7, #32]
 80018de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	f7ff fe48 	bl	800157e <_ZSt3cosf>
 80018ee:	ed87 0a06 	vstr	s0, [r7, #24]
    float output = (result - zeroPoint) / (1 - zeroPoint);
 80018f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001902:	edd7 7a06 	vldr	s15, [r7, #24]
 8001906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800190a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]

    return output * 255;
 8001912:	edd7 7a05 	vldr	s15, [r7, #20]
 8001916:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800193c <_ZN4CALC16similarityNormalEhst+0x184>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	b21b      	sxth	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	54442d18 	.word	0x54442d18
 8001934:	400921fb 	.word	0x400921fb
 8001938:	40668000 	.word	0x40668000
 800193c:	437f0000 	.word	0x437f0000

08001940 <_ZN4CALC12calcRotationEss>:
    }else{
    	return 1;
    }
}

int16_t CALC::calcRotation(int16_t targetRotation, int16_t nowRotation){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	803b      	strh	r3, [r7, #0]
    int16_t diffRotation = targetRotation - nowRotation;
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	883b      	ldrh	r3, [r7, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	81fb      	strh	r3, [r7, #14]

    if(diffRotation > 180){
 800195a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195e:	2bb4      	cmp	r3, #180	; 0xb4
 8001960:	dd05      	ble.n	800196e <_ZN4CALC12calcRotationEss+0x2e>
        diffRotation -= 360;
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001968:	b29b      	uxth	r3, r3
 800196a:	81fb      	strh	r3, [r7, #14]
 800196c:	e009      	b.n	8001982 <_ZN4CALC12calcRotationEss+0x42>
    }else if(diffRotation < -180){
 800196e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001972:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001976:	da04      	bge.n	8001982 <_ZN4CALC12calcRotationEss+0x42>
        diffRotation += 360;
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800197e:	b29b      	uxth	r3, r3
 8001980:	81fb      	strh	r3, [r7, #14]
    }

    return diffRotation;
 8001982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <HAL_TIM_PWM_PulseFinishedCallback+0x16>
  {
    NeopixelTape.execute();
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80019a6:	f001 fc65 	bl	8003274 <_ZN7WS2812C7executeEv>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200000ec 	.word	0x200000ec
 80019b8:	20000320 	.word	0x20000320
 80019bc:	00000000 	.word	0x00000000

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b0b0      	sub	sp, #192	; 0xc0
 80019c4:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f001 fd3d 	bl	8003444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 fb6d 	bl	80020a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 fd5f 	bl	8002490 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80019d2:	f000 fd2d 	bl	8002430 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80019d6:	f000 fbdd 	bl	8002194 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80019da:	f000 fc0f 	bl	80021fc <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80019de:	f000 fcc9 	bl	8002374 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80019e2:	f000 fcf7 	bl	80023d4 <_ZL19MX_USART3_UART_Initv>
  MX_UART5_Init();
 80019e6:	f000 fc97 	bl	8002318 <_ZL13MX_UART5_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
 80019ea:	4893      	ldr	r0, [pc, #588]	; (8001c38 <main+0x278>)
 80019ec:	f001 fccb 	bl	8003386 <_ZN7WS2812C4initEv>

  if(HAL_GPIO_ReadPin(dipsw1_GPIO_Port, dipsw1_Pin) == 1){
 80019f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f4:	4891      	ldr	r0, [pc, #580]	; (8001c3c <main+0x27c>)
 80019f6:	f002 fbd1 	bl	800419c <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <main+0x52>
	  ID = 1;
 8001a0a:	4b8d      	ldr	r3, [pc, #564]	; (8001c40 <main+0x280>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e022      	b.n	8001a58 <main+0x98>
  }else if(HAL_GPIO_ReadPin(dipsw2_GPIO_Port, dipsw2_Pin) == 1){
 8001a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a16:	4889      	ldr	r0, [pc, #548]	; (8001c3c <main+0x27c>)
 8001a18:	f002 fbc0 	bl	800419c <HAL_GPIO_ReadPin>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <main+0x74>
	  ID = 2;
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <main+0x280>)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	e011      	b.n	8001a58 <main+0x98>
  }else if(HAL_GPIO_ReadPin(dipsw3_GPIO_Port, dipsw3_Pin) == 1){
 8001a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a38:	4880      	ldr	r0, [pc, #512]	; (8001c3c <main+0x27c>)
 8001a3a:	f002 fbaf 	bl	800419c <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <main+0x96>
	  ID = 3;
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <main+0x280>)
 8001a50:	2203      	movs	r2, #3
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e000      	b.n	8001a58 <main+0x98>
  }else {
	  while(1);
 8001a56:	e7fe      	b.n	8001a56 <main+0x96>
  }

  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	497a      	ldr	r1, [pc, #488]	; (8001c44 <main+0x284>)
 8001a5c:	487a      	ldr	r0, [pc, #488]	; (8001c48 <main+0x288>)
 8001a5e:	f005 fbc2 	bl	80071e6 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, tweliteRxBuf, sizeof(tweliteRxBuf));
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	4979      	ldr	r1, [pc, #484]	; (8001c4c <main+0x28c>)
 8001a66:	487a      	ldr	r0, [pc, #488]	; (8001c50 <main+0x290>)
 8001a68:	f005 fbbd 	bl	80071e6 <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4872      	ldr	r0, [pc, #456]	; (8001c3c <main+0x27c>)
 8001a72:	f002 fbab 	bl	80041cc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a7a:	f001 fd55 	bl	8003528 <HAL_Delay>

  while (!ready)
 8001a7e:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <main+0x294>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <main+0xf4>
  {
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28 << 1, 10, 1000) == HAL_OK)
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	220a      	movs	r2, #10
 8001a8c:	2150      	movs	r1, #80	; 0x50
 8001a8e:	4872      	ldr	r0, [pc, #456]	; (8001c58 <main+0x298>)
 8001a90:	f003 f81e 	bl	8004ad0 <HAL_I2C_IsDeviceReady>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf0c      	ite	eq
 8001a9a:	2301      	moveq	r3, #1
 8001a9c:	2300      	movne	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <main+0xec>
    {
      ready = 1;
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <main+0x294>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e7e8      	b.n	8001a7e <main+0xbe>
    }
    else
    {
      HAL_Delay(100);
 8001aac:	2064      	movs	r0, #100	; 0x64
 8001aae:	f001 fd3b 	bl	8003528 <HAL_Delay>
  while (!ready)
 8001ab2:	e7e4      	b.n	8001a7e <main+0xbe>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 8001ab4:	2328      	movs	r3, #40	; 0x28
 8001ab6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  BNO055 bno055(hi2c1, address);
 8001aba:	4c67      	ldr	r4, [pc, #412]	; (8001c58 <main+0x298>)
 8001abc:	f107 0510 	add.w	r5, r7, #16
 8001ac0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8001ac4:	9312      	str	r3, [sp, #72]	; 0x48
 8001ac6:	4668      	mov	r0, sp
 8001ac8:	f104 030c 	add.w	r3, r4, #12
 8001acc:	2248      	movs	r2, #72	; 0x48
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f007 fc28 	bl	8009324 <memcpy>
 8001ad4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f7ff f9fb 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    e = bno055.get_eular();
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fac4 	bl	8001070 <_ZN6BNO0559get_eularEv>
 8001ae8:	eef0 6a40 	vmov.f32	s13, s0
 8001aec:	eeb0 7a60 	vmov.f32	s14, s1
 8001af0:	eef0 7a41 	vmov.f32	s15, s2
 8001af4:	edc7 6a01 	vstr	s13, [r7, #4]
 8001af8:	ed87 7a02 	vstr	s14, [r7, #8]
 8001afc:	edc7 7a03 	vstr	s15, [r7, #12]
    gyro = (e.z / M_PI) * 180;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fce4 	bl	80004d0 <__aeabi_f2d>
 8001b08:	a349      	add	r3, pc, #292	; (adr r3, 8001c30 <main+0x270>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fe61 	bl	80007d4 <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <main+0x29c>)
 8001b20:	f7fe fd2e 	bl	8000580 <__aeabi_dmul>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7fe ffd8 	bl	8000ae0 <__aeabi_d2iz>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <main+0x2a0>)
 8001b36:	801a      	strh	r2, [r3, #0]

    ledPos0 = (-gyro + ((servoPos0 % 4096 + 4096) % 4096) * 360 / 4096 + 360) % 360;
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <main+0x2a4>)
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	425a      	negs	r2, r3
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b48:	bf58      	it	pl
 8001b4a:	4253      	negpl	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b52:	425a      	negs	r2, r3
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b5c:	bf58      	it	pl
 8001b5e:	4253      	negpl	r3, r2
 8001b60:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da01      	bge.n	8001b70 <main+0x1b0>
 8001b6c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001b70:	131b      	asrs	r3, r3, #12
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <main+0x2a0>)
 8001b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b80:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <main+0x2a8>)
 8001b82:	fb82 1203 	smull	r1, r2, r2, r3
 8001b86:	441a      	add	r2, r3
 8001b88:	1211      	asrs	r1, r2, #8
 8001b8a:	17da      	asrs	r2, r3, #31
 8001b8c:	1a8a      	subs	r2, r1, r2
 8001b8e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b92:	fb01 f202 	mul.w	r2, r1, r2
 8001b96:	1a9a      	subs	r2, r3, r2
 8001b98:	b212      	sxth	r2, r2
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <main+0x2ac>)
 8001b9c:	801a      	strh	r2, [r3, #0]
    ledPos2 = (ledPos0 + ((servoPos2 % 4096 + 4096) % 4096) * 360 / 4096) % 360;
 8001b9e:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <main+0x2ac>)
 8001ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <main+0x2b0>)
 8001ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bac:	425a      	negs	r2, r3
 8001bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bb6:	bf58      	it	pl
 8001bb8:	4253      	negpl	r3, r2
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc0:	425a      	negs	r2, r3
 8001bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bca:	bf58      	it	pl
 8001bcc:	4253      	negpl	r3, r2
 8001bce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da01      	bge.n	8001bde <main+0x21e>
 8001bda:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001bde:	131b      	asrs	r3, r3, #12
 8001be0:	440b      	add	r3, r1
 8001be2:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <main+0x2a8>)
 8001be4:	fb82 1203 	smull	r1, r2, r2, r3
 8001be8:	441a      	add	r2, r3
 8001bea:	1211      	asrs	r1, r2, #8
 8001bec:	17da      	asrs	r2, r3, #31
 8001bee:	1a8a      	subs	r2, r1, r2
 8001bf0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001bf4:	fb01 f202 	mul.w	r2, r1, r2
 8001bf8:	1a9a      	subs	r2, r3, r2
 8001bfa:	b212      	sxth	r2, r2
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <main+0x2b4>)
 8001bfe:	801a      	strh	r2, [r3, #0]

    get_position(0);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f000 fce9 	bl	80025d8 <_Z12get_positionh>
    get_position(2);
 8001c06:	2002      	movs	r0, #2
 8001c08:	f000 fce6 	bl	80025d8 <_Z12get_positionh>

    if (HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 0)
 8001c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c10:	4819      	ldr	r0, [pc, #100]	; (8001c78 <main+0x2b8>)
 8001c12:	f002 fac3 	bl	800419c <HAL_GPIO_ReadPin>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d12f      	bne.n	8001c7c <main+0x2bc>
 8001c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c20:	4815      	ldr	r0, [pc, #84]	; (8001c78 <main+0x2b8>)
 8001c22:	f002 fabb 	bl	800419c <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d127      	bne.n	8001c7c <main+0x2bc>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e026      	b.n	8001c7e <main+0x2be>
 8001c30:	54442d18 	.word	0x54442d18
 8001c34:	400921fb 	.word	0x400921fb
 8001c38:	20000320 	.word	0x20000320
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	20001aec 	.word	0x20001aec
 8001c44:	200019e4 	.word	0x200019e4
 8001c48:	200001d8 	.word	0x200001d8
 8001c4c:	20001a64 	.word	0x20001a64
 8001c50:	20000194 	.word	0x20000194
 8001c54:	20001ae8 	.word	0x20001ae8
 8001c58:	20000098 	.word	0x20000098
 8001c5c:	40668000 	.word	0x40668000
 8001c60:	20001aea 	.word	0x20001aea
 8001c64:	200019dc 	.word	0x200019dc
 8001c68:	b60b60b7 	.word	0xb60b60b7
 8001c6c:	20001ae4 	.word	0x20001ae4
 8001c70:	200019e0 	.word	0x200019e0
 8001c74:	20001ae6 	.word	0x20001ae6
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80ca 	beq.w	8001e18 <main+0x458>
    {
      servo0.moveCont(1500, 8191, servoPos0);
 8001c84:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <main+0x47c>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c8e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c92:	486b      	ldr	r0, [pc, #428]	; (8001e40 <main+0x480>)
 8001c94:	f7ff fb18 	bl	80012c8 <_ZN3STS8moveContEtss>
      servo2.moveCont(1500, 8191, servoPos2);
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <main+0x484>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001ca2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001ca6:	4868      	ldr	r0, [pc, #416]	; (8001e48 <main+0x488>)
 8001ca8:	f7ff fb0e 	bl	80012c8 <_ZN3STS8moveContEtss>

      if (i != 0)
 8001cac:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <main+0x48c>)
 8001cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d017      	beq.n	8001ce6 <main+0x326>
      {
        i += 8;
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <main+0x48c>)
 8001cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <main+0x48c>)
 8001cc6:	801a      	strh	r2, [r3, #0]
        if (i >= 180)
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <main+0x48c>)
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	2bb3      	cmp	r3, #179	; 0xb3
 8001cd0:	dd09      	ble.n	8001ce6 <main+0x326>
        {
          i -= 360;
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <main+0x48c>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <main+0x48c>)
 8001ce4:	801a      	strh	r2, [r3, #0]
        }
      }

      moveRotation = calc.calcRotation(i, gyro);
 8001ce6:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <main+0x48c>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	4a58      	ldr	r2, [pc, #352]	; (8001e50 <main+0x490>)
 8001cee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4857      	ldr	r0, [pc, #348]	; (8001e54 <main+0x494>)
 8001cf6:	f7ff fe23 	bl	8001940 <_ZN4CALC12calcRotationEss>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <main+0x498>)
 8001d00:	801a      	strh	r2, [r3, #0]

      if (moveRotation > 0)
 8001d02:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <main+0x498>)
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dd08      	ble.n	8001d1e <main+0x35e>
      {
        moveRotation += 10;
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <main+0x498>)
 8001d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	330a      	adds	r3, #10
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <main+0x498>)
 8001d1c:	801a      	strh	r2, [r3, #0]
      }
      if (moveRotation < 0)
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <main+0x498>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da08      	bge.n	8001d3a <main+0x37a>
      {
        moveRotation -= 10;
 8001d28:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <main+0x498>)
 8001d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b0a      	subs	r3, #10
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <main+0x498>)
 8001d38:	801a      	strh	r2, [r3, #0]
      }

      sendData(0, 0, moveRotation);
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <main+0x498>)
 8001d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d40:	461a      	mov	r2, r3
 8001d42:	2100      	movs	r1, #0
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 fd8d 	bl	8002864 <_Z8sendDataths>

      for (uint8_t led = 0; led < 16; led++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d82b      	bhi.n	8001db0 <main+0x3f0>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos0, 90, 128, 100), 255, calc.similarityNormal(led, ledPos0, 90));
 8001d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d5c:	b29c      	uxth	r4, r3
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <main+0x49c>)
 8001d60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d64:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	235a      	movs	r3, #90	; 0x5a
 8001d72:	4838      	ldr	r0, [pc, #224]	; (8001e54 <main+0x494>)
 8001d74:	f7ff fc14 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <main+0x49c>)
 8001d7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d82:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001d86:	235a      	movs	r3, #90	; 0x5a
 8001d88:	4832      	ldr	r0, [pc, #200]	; (8001e54 <main+0x494>)
 8001d8a:	f7ff fd15 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	23ff      	movs	r3, #255	; 0xff
 8001d94:	462a      	mov	r2, r5
 8001d96:	4621      	mov	r1, r4
 8001d98:	4831      	ldr	r0, [pc, #196]	; (8001e60 <main+0x4a0>)
 8001d9a:	f001 f991 	bl	80030c0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001d9e:	4830      	ldr	r0, [pc, #192]	; (8001e60 <main+0x4a0>)
 8001da0:	f001 fa58 	bl	8003254 <_ZN7WS2812C4showEv>
      for (uint8_t led = 0; led < 16; led++)
 8001da4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001da8:	3301      	adds	r3, #1
 8001daa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001dae:	e7cf      	b.n	8001d50 <main+0x390>
      }
      for (uint8_t led = 32; led < 48; led++)
 8001db0:	2320      	movs	r3, #32
 8001db2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001db6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001dba:	2b2f      	cmp	r3, #47	; 0x2f
 8001dbc:	f200 815b 	bhi.w	8002076 <main+0x6b6>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, ledPos2, 90));
 8001dc0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001dc4:	b29c      	uxth	r4, r3
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <main+0x4a4>)
 8001dc8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dcc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8001dd0:	2364      	movs	r3, #100	; 0x64
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	235a      	movs	r3, #90	; 0x5a
 8001dda:	481e      	ldr	r0, [pc, #120]	; (8001e54 <main+0x494>)
 8001ddc:	f7ff fbe0 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461d      	mov	r5, r3
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <main+0x4a4>)
 8001de6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dea:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8001dee:	235a      	movs	r3, #90	; 0x5a
 8001df0:	4818      	ldr	r0, [pc, #96]	; (8001e54 <main+0x494>)
 8001df2:	f7ff fce1 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001df6:	4603      	mov	r3, r0
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	23ff      	movs	r3, #255	; 0xff
 8001dfc:	462a      	mov	r2, r5
 8001dfe:	4621      	mov	r1, r4
 8001e00:	4817      	ldr	r0, [pc, #92]	; (8001e60 <main+0x4a0>)
 8001e02:	f001 f95d 	bl	80030c0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001e06:	4816      	ldr	r0, [pc, #88]	; (8001e60 <main+0x4a0>)
 8001e08:	f001 fa24 	bl	8003254 <_ZN7WS2812C4showEv>
      for (uint8_t led = 32; led < 48; led++)
 8001e0c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e10:	3301      	adds	r3, #1
 8001e12:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001e16:	e7ce      	b.n	8001db6 <main+0x3f6>
      }
    }
    else if (HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 1)
 8001e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <main+0x4a8>)
 8001e1e:	f002 f9bd 	bl	800419c <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d121      	bne.n	8001e6c <main+0x4ac>
 8001e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e2c:	480e      	ldr	r0, [pc, #56]	; (8001e68 <main+0x4a8>)
 8001e2e:	f002 f9b5 	bl	800419c <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d119      	bne.n	8001e6c <main+0x4ac>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e018      	b.n	8001e6e <main+0x4ae>
 8001e3c:	200019dc 	.word	0x200019dc
 8001e40:	200019ac 	.word	0x200019ac
 8001e44:	200019e0 	.word	0x200019e0
 8001e48:	200019c4 	.word	0x200019c4
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20001aea 	.word	0x20001aea
 8001e54:	200019a8 	.word	0x200019a8
 8001e58:	20001af2 	.word	0x20001af2
 8001e5c:	20001ae4 	.word	0x20001ae4
 8001e60:	20000320 	.word	0x20000320
 8001e64:	20001ae6 	.word	0x20001ae6
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80d2 	beq.w	8002018 <main+0x658>
    {
      servo0.moveCont(1500, 0, servoPos0);
 8001e74:	4b81      	ldr	r3, [pc, #516]	; (800207c <main+0x6bc>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e80:	487f      	ldr	r0, [pc, #508]	; (8002080 <main+0x6c0>)
 8001e82:	f7ff fa21 	bl	80012c8 <_ZN3STS8moveContEtss>
      servo2.moveCont(1500, 0, servoPos2);
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <main+0x6c4>)
 8001e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e92:	487d      	ldr	r0, [pc, #500]	; (8002088 <main+0x6c8>)
 8001e94:	f7ff fa18 	bl	80012c8 <_ZN3STS8moveContEtss>

      if (i != 8)
 8001e98:	4b7c      	ldr	r3, [pc, #496]	; (800208c <main+0x6cc>)
 8001e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d018      	beq.n	8001ed4 <main+0x514>
      {
        i -= 8;
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	; (800208c <main+0x6cc>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b08      	subs	r3, #8
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b76      	ldr	r3, [pc, #472]	; (800208c <main+0x6cc>)
 8001eb2:	801a      	strh	r2, [r3, #0]
        if (i < -180)
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <main+0x6cc>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001ebe:	da09      	bge.n	8001ed4 <main+0x514>
        {
          i += 360;
 8001ec0:	4b72      	ldr	r3, [pc, #456]	; (800208c <main+0x6cc>)
 8001ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	4b6e      	ldr	r3, [pc, #440]	; (800208c <main+0x6cc>)
 8001ed2:	801a      	strh	r2, [r3, #0]
        }
      }

      moveRotation = calc.calcRotation(i, gyro);
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	; (800208c <main+0x6cc>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	4a6d      	ldr	r2, [pc, #436]	; (8002090 <main+0x6d0>)
 8001edc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	486c      	ldr	r0, [pc, #432]	; (8002094 <main+0x6d4>)
 8001ee4:	f7ff fd2c 	bl	8001940 <_ZN4CALC12calcRotationEss>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <main+0x6d8>)
 8001eee:	801a      	strh	r2, [r3, #0]

      if (moveRotation > 0)
 8001ef0:	4b69      	ldr	r3, [pc, #420]	; (8002098 <main+0x6d8>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dd08      	ble.n	8001f0c <main+0x54c>
      {
        moveRotation += 10;
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <main+0x6d8>)
 8001efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	330a      	adds	r3, #10
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	4b63      	ldr	r3, [pc, #396]	; (8002098 <main+0x6d8>)
 8001f0a:	801a      	strh	r2, [r3, #0]
      }
      if (moveRotation < 0)
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <main+0x6d8>)
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da08      	bge.n	8001f28 <main+0x568>
      {
        moveRotation -= 10;
 8001f16:	4b60      	ldr	r3, [pc, #384]	; (8002098 <main+0x6d8>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b0a      	subs	r3, #10
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <main+0x6d8>)
 8001f26:	801a      	strh	r2, [r3, #0]
      }

      sendData(0, 0, moveRotation);
 8001f28:	4b5b      	ldr	r3, [pc, #364]	; (8002098 <main+0x6d8>)
 8001f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2100      	movs	r1, #0
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 fc96 	bl	8002864 <_Z8sendDataths>

      for (uint8_t led = 0; led < 16; led++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001f3e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	d830      	bhi.n	8001fa8 <main+0x5e8>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8001f46:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f4a:	b29c      	uxth	r4, r3
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <main+0x6dc>)
 8001f4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f52:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001f56:	2364      	movs	r3, #100	; 0x64
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	235a      	movs	r3, #90	; 0x5a
 8001f60:	484c      	ldr	r0, [pc, #304]	; (8002094 <main+0x6d4>)
 8001f62:	f7ff fb1d 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461d      	mov	r5, r3
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <main+0x6dc>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001f7e:	235a      	movs	r3, #90	; 0x5a
 8001f80:	4844      	ldr	r0, [pc, #272]	; (8002094 <main+0x6d4>)
 8001f82:	f7ff fc19 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001f86:	4603      	mov	r3, r0
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	23ff      	movs	r3, #255	; 0xff
 8001f8c:	462a      	mov	r2, r5
 8001f8e:	4621      	mov	r1, r4
 8001f90:	4843      	ldr	r0, [pc, #268]	; (80020a0 <main+0x6e0>)
 8001f92:	f001 f895 	bl	80030c0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001f96:	4842      	ldr	r0, [pc, #264]	; (80020a0 <main+0x6e0>)
 8001f98:	f001 f95c 	bl	8003254 <_ZN7WS2812C4showEv>
      for (uint8_t led = 0; led < 16; led++)
 8001f9c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001fa6:	e7ca      	b.n	8001f3e <main+0x57e>
      }
      for (uint8_t led = 32; led < 48; led++)
 8001fa8:	2320      	movs	r3, #32
 8001faa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001fae:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001fb2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fb4:	d85f      	bhi.n	8002076 <main+0x6b6>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8001fb6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001fba:	b29c      	uxth	r4, r3
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <main+0x6dc>)
 8001fbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fc2:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	235a      	movs	r3, #90	; 0x5a
 8001fd0:	4830      	ldr	r0, [pc, #192]	; (8002094 <main+0x6d4>)
 8001fd2:	f7ff fae5 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461d      	mov	r5, r3
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <main+0x6dc>)
 8001fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8001fee:	235a      	movs	r3, #90	; 0x5a
 8001ff0:	4828      	ldr	r0, [pc, #160]	; (8002094 <main+0x6d4>)
 8001ff2:	f7ff fbe1 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	23ff      	movs	r3, #255	; 0xff
 8001ffc:	462a      	mov	r2, r5
 8001ffe:	4621      	mov	r1, r4
 8002000:	4827      	ldr	r0, [pc, #156]	; (80020a0 <main+0x6e0>)
 8002002:	f001 f85d 	bl	80030c0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8002006:	4826      	ldr	r0, [pc, #152]	; (80020a0 <main+0x6e0>)
 8002008:	f001 f924 	bl	8003254 <_ZN7WS2812C4showEv>
      for (uint8_t led = 32; led < 48; led++)
 800200c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002010:	3301      	adds	r3, #1
 8002012:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8002016:	e7ca      	b.n	8001fae <main+0x5ee>
    {
//      servo0.moveCont(1000, 2048, servoPos0);
//      servo1.moveStop1(1000, 2048);
//      servo2.moveCont(1000, 2048, servoPos2);
//      servo3.moveStop3(1000, 1800);
      sendData(0, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2000      	movs	r0, #0
 800201e:	f000 fc21 	bl	8002864 <_Z8sendDataths>
      for (uint8_t led = 0; led < 48; led++)
 8002022:	2300      	movs	r3, #0
 8002024:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002028:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800202c:	2b2f      	cmp	r3, #47	; 0x2f
 800202e:	d822      	bhi.n	8002076 <main+0x6b6>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, 180, 360, hue, 100), 255, 10);
 8002030:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002034:	b29c      	uxth	r4, r3
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <main+0x6e4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8002040:	2264      	movs	r2, #100	; 0x64
 8002042:	9201      	str	r2, [sp, #4]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800204a:	22b4      	movs	r2, #180	; 0xb4
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <main+0x6d4>)
 800204e:	f7ff faa7 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	230a      	movs	r3, #10
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	23ff      	movs	r3, #255	; 0xff
 800205c:	4621      	mov	r1, r4
 800205e:	4810      	ldr	r0, [pc, #64]	; (80020a0 <main+0x6e0>)
 8002060:	f001 f82e 	bl	80030c0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8002064:	480e      	ldr	r0, [pc, #56]	; (80020a0 <main+0x6e0>)
 8002066:	f001 f8f5 	bl	8003254 <_ZN7WS2812C4showEv>
      for (uint8_t led = 0; led < 48; led++)
 800206a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800206e:	3301      	adds	r3, #1
 8002070:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002074:	e7d8      	b.n	8002028 <main+0x668>
      }
    }

    twelite();
 8002076:	f000 fc51 	bl	800291c <_Z7twelitev>





  }
 800207a:	e530      	b.n	8001ade <main+0x11e>
 800207c:	200019dc 	.word	0x200019dc
 8002080:	200019ac 	.word	0x200019ac
 8002084:	200019e0 	.word	0x200019e0
 8002088:	200019c4 	.word	0x200019c4
 800208c:	20000008 	.word	0x20000008
 8002090:	20001aea 	.word	0x20001aea
 8002094:	200019a8 	.word	0x200019a8
 8002098:	20001af2 	.word	0x20001af2
 800209c:	20001ae6 	.word	0x20001ae6
 80020a0:	20000320 	.word	0x20000320
 80020a4:	20001af0 	.word	0x20001af0

080020a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b094      	sub	sp, #80	; 0x50
 80020ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	2234      	movs	r2, #52	; 0x34
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f007 f942 	bl	8009340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <_Z18SystemClock_Configv+0xe4>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a2d      	ldr	r2, [pc, #180]	; (800218c <_Z18SystemClock_Configv+0xe4>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <_Z18SystemClock_Configv+0xe4>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020e8:	2300      	movs	r3, #0
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <_Z18SystemClock_Configv+0xe8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <_Z18SystemClock_Configv+0xe8>)
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <_Z18SystemClock_Configv+0xe8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002108:	2301      	movs	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800210c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002110:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002112:	2302      	movs	r3, #2
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002116:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800211c:	2310      	movs	r3, #16
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8002124:	2306      	movs	r3, #6
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002128:	2302      	movs	r3, #2
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800212c:	2302      	movs	r3, #2
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fc6f 	bl	8005a18 <HAL_RCC_OscConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800214a:	f000 fc69 	bl	8002a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800214e:	230f      	movs	r3, #15
 8002150:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002152:	2302      	movs	r3, #2
 8002154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	2101      	movs	r1, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f003 f90d 	bl	8005388 <HAL_RCC_ClockConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800217e:	f000 fc4f 	bl	8002a20 <Error_Handler>
  }
}
 8002182:	bf00      	nop
 8002184:	3750      	adds	r7, #80	; 0x50
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000

08002194 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <_ZL12MX_I2C1_Initv+0x60>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <_ZL12MX_I2C1_Initv+0x64>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d0:	4807      	ldr	r0, [pc, #28]	; (80021f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80021d2:	f002 f815 	bl	8004200 <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80021e6:	f000 fc1b 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000098 	.word	0x20000098
 80021f4:	40005400 	.word	0x40005400
 80021f8:	000186a0 	.word	0x000186a0

080021fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	f107 0320 	add.w	r3, r7, #32
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
 8002228:	615a      	str	r2, [r3, #20]
 800222a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800222c:	4b38      	ldr	r3, [pc, #224]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 800222e:	4a39      	ldr	r2, [pc, #228]	; (8002314 <_ZL12MX_TIM3_Initv+0x118>)
 8002230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002240:	2227      	movs	r2, #39	; 0x27
 8002242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002244:	4b32      	ldr	r3, [pc, #200]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002250:	482f      	ldr	r0, [pc, #188]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002252:	f003 fe7f 	bl	8005f54 <HAL_TIM_Base_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8002266:	f000 fbdb 	bl	8002a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002274:	4619      	mov	r1, r3
 8002276:	4826      	ldr	r0, [pc, #152]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002278:	f004 f99e 	bl	80065b8 <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800228c:	f000 fbc8 	bl	8002a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002290:	481f      	ldr	r0, [pc, #124]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002292:	f003 feae 	bl	8005ff2 <HAL_TIM_PWM_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80022a6:	f000 fbbb 	bl	8002a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b2:	f107 0320 	add.w	r3, r7, #32
 80022b6:	4619      	mov	r1, r3
 80022b8:	4815      	ldr	r0, [pc, #84]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 80022ba:	f004 fe39 	bl	8006f30 <HAL_TIMEx_MasterConfigSynchronization>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80022ce:	f000 fba7 	bl	8002a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d2:	2360      	movs	r3, #96	; 0x60
 80022d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 80022ea:	f004 f8a3 	bl	8006434 <HAL_TIM_PWM_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80022fe:	f000 fb8f 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <_ZL12MX_TIM3_Initv+0x114>)
 8002304:	f000 fca2 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 8002308:	bf00      	nop
 800230a:	3738      	adds	r7, #56	; 0x38
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200000ec 	.word	0x200000ec
 8002314:	40000400 	.word	0x40000400

08002318 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <_ZL13MX_UART5_Initv+0x58>)
 8002320:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 8002324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002328:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 800233e:	220c      	movs	r2, #12
 8002340:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <_ZL13MX_UART5_Initv+0x54>)
 8002350:	f004 fe6a 	bl	8007028 <HAL_UART_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8002364:	f000 fb5c 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000194 	.word	0x20000194
 8002370:	40005000 	.word	0x40005000

08002374 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800237a:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_ZL19MX_USART2_UART_Initv+0x58>)
 800237c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002382:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002398:	220c      	movs	r2, #12
 800239a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800239e:	2200      	movs	r2, #0
 80023a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023a8:	4807      	ldr	r0, [pc, #28]	; (80023c8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023aa:	f004 fe3d 	bl	8007028 <HAL_UART_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 80023be:	f000 fb2f 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200001d8 	.word	0x200001d8
 80023cc:	40004400 	.word	0x40004400
 80023d0:	000f4240 	.word	0x000f4240

080023d4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <_ZL19MX_USART3_UART_Initv+0x58>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800240a:	4807      	ldr	r0, [pc, #28]	; (8002428 <_ZL19MX_USART3_UART_Initv+0x54>)
 800240c:	f004 fe0c 	bl	8007028 <HAL_UART_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002420:	f000 fafe 	bl	8002a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	2000021c 	.word	0x2000021c
 800242c:	40004800 	.word	0x40004800

08002430 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <_ZL11MX_DMA_Initv+0x5c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <_ZL11MX_DMA_Initv+0x5c>)
 8002440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <_ZL11MX_DMA_Initv+0x5c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	200b      	movs	r0, #11
 8002458:	f001 f965 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800245c:	200b      	movs	r0, #11
 800245e:	f001 f97e 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	200f      	movs	r0, #15
 8002468:	f001 f95d 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800246c:	200f      	movs	r0, #15
 800246e:	f001 f976 	bl	800375e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2010      	movs	r0, #16
 8002478:	f001 f955 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800247c:	2010      	movs	r0, #16
 800247e:	f001 f96e 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a46      	ldr	r2, [pc, #280]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a3f      	ldr	r2, [pc, #252]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a2a      	ldr	r2, [pc, #168]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <_ZL12MX_GPIO_Initv+0x138>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	2102      	movs	r1, #2
 8002536:	4825      	ldr	r0, [pc, #148]	; (80025cc <_ZL12MX_GPIO_Initv+0x13c>)
 8002538:	f001 fe48 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002540:	2303      	movs	r3, #3
 8002542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	481f      	ldr	r0, [pc, #124]	; (80025cc <_ZL12MX_GPIO_Initv+0x13c>)
 8002550:	f001 fc90 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 8002554:	2302      	movs	r3, #2
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002558:	2301      	movs	r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	4818      	ldr	r0, [pc, #96]	; (80025cc <_ZL12MX_GPIO_Initv+0x13c>)
 800256c:	f001 fc82 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : slidesw1_Pin slidesw2_Pin */
  GPIO_InitStruct.Pin = slidesw1_Pin|slidesw2_Pin;
 8002570:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <_ZL12MX_GPIO_Initv+0x140>)
 8002586:	f001 fc75 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : dipsw3_Pin dipsw2_Pin dipsw1_Pin */
  GPIO_InitStruct.Pin = dipsw3_Pin|dipsw2_Pin|dipsw1_Pin;
 800258a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <_ZL12MX_GPIO_Initv+0x13c>)
 80025a0:	f001 fc68 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : dipsw4_Pin dipsw5_Pin */
  GPIO_InitStruct.Pin = dipsw4_Pin|dipsw5_Pin;
 80025a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <_ZL12MX_GPIO_Initv+0x144>)
 80025ba:	f001 fc5b 	bl	8003e74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	; 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800

080025d8 <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t servoID)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08e      	sub	sp, #56	; 0x38
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  static int16_t inst_pos0 = 0;
  static int16_t inst_pos1 = 0;
  static int16_t inst_pos2 = 0;
  static int16_t inst_pos3 = 0;
  static uint8_t readPos = 0;
  uint8_t checksum = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t read[15] = {0};
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	f8c3 2007 	str.w	r2, [r3, #7]
  uint8_t position[6] = {0};
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	2300      	movs	r3, #0
 8002600:	823b      	strh	r3, [r7, #16]

  switch (servoID)
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d81b      	bhi.n	8002640 <_Z12get_positionh+0x68>
 8002608:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <_Z12get_positionh+0x38>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	08002621 	.word	0x08002621
 8002614:	08002629 	.word	0x08002629
 8002618:	08002631 	.word	0x08002631
 800261c:	08002639 	.word	0x08002639
  {
  case 0:
    servo0.send();
 8002620:	4881      	ldr	r0, [pc, #516]	; (8002828 <_Z12get_positionh+0x250>)
 8002622:	f7fe ff0f 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8002626:	e00c      	b.n	8002642 <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 8002628:	4880      	ldr	r0, [pc, #512]	; (800282c <_Z12get_positionh+0x254>)
 800262a:	f7fe ff0b 	bl	8001444 <_ZN3STS4sendEv>
    break;
 800262e:	e008      	b.n	8002642 <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 8002630:	487f      	ldr	r0, [pc, #508]	; (8002830 <_Z12get_positionh+0x258>)
 8002632:	f7fe ff07 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8002636:	e004      	b.n	8002642 <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 8002638:	487e      	ldr	r0, [pc, #504]	; (8002834 <_Z12get_positionh+0x25c>)
 800263a:	f7fe ff03 	bl	8001444 <_ZN3STS4sendEv>
    break;
 800263e:	e000      	b.n	8002642 <_Z12get_positionh+0x6a>
  default:
    break;
 8002640:	bf00      	nop
  }

  HAL_Delay(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f000 ff70 	bl	8003528 <HAL_Delay>

  readPos = huart2.hdmarx->Instance->NDTR;
 8002648:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <_Z12get_positionh+0x260>)
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <_Z12get_positionh+0x264>)
 8002654:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(rxBuf) - readPos;
 8002656:	4b79      	ldr	r3, [pc, #484]	; (800283c <_Z12get_positionh+0x264>)
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <_Z12get_positionh+0x264>)
 8002664:	701a      	strb	r2, [r3, #0]

  if (readPos >= 15)
 8002666:	4b75      	ldr	r3, [pc, #468]	; (800283c <_Z12get_positionh+0x264>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b0e      	cmp	r3, #14
 800266c:	d919      	bls.n	80026a2 <_Z12get_positionh+0xca>
  {
    for (int i = 0; i < 15; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	2b0e      	cmp	r3, #14
 8002676:	dc14      	bgt.n	80026a2 <_Z12get_positionh+0xca>
    {
      read[i] = rxBuf[readPos - 14 + i];
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <_Z12get_positionh+0x264>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f1a3 020e 	sub.w	r2, r3, #14
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	4413      	add	r3, r2
 8002684:	4a6e      	ldr	r2, [pc, #440]	; (8002840 <_Z12get_positionh+0x268>)
 8002686:	5cd1      	ldrb	r1, [r2, r3]
 8002688:	f107 0214 	add.w	r2, r7, #20
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	4413      	add	r3, r2
 8002690:	460a      	mov	r2, r1
 8002692:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8002694:	2001      	movs	r0, #1
 8002696:	f000 ff47 	bl	8003528 <HAL_Delay>
    for (int i = 0; i < 15; i++)
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	3301      	adds	r3, #1
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
 80026a0:	e7e7      	b.n	8002672 <_Z12get_positionh+0x9a>
    }
  }

  for (int i = 0; i < 8; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b07      	cmp	r3, #7
 80026aa:	dc29      	bgt.n	8002700 <_Z12get_positionh+0x128>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 80026ac:	f107 0214 	add.w	r2, r7, #20
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	4413      	add	r3, r2
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d11e      	bne.n	80026f8 <_Z12get_positionh+0x120>
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	3301      	adds	r3, #1
 80026be:	3338      	adds	r3, #56	; 0x38
 80026c0:	443b      	add	r3, r7
 80026c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026c6:	2bff      	cmp	r3, #255	; 0xff
 80026c8:	d116      	bne.n	80026f8 <_Z12get_positionh+0x120>
    {
      for (int j = 0; j < 6; j++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	dc11      	bgt.n	80026f8 <_Z12get_positionh+0x120>
      {
        position[j] = read[i + j + 2];
 80026d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	4413      	add	r3, r2
 80026da:	3302      	adds	r3, #2
 80026dc:	3338      	adds	r3, #56	; 0x38
 80026de:	443b      	add	r3, r7
 80026e0:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 80026e4:	f107 020c 	add.w	r2, r7, #12
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	4413      	add	r3, r2
 80026ec:	460a      	mov	r2, r1
 80026ee:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	3301      	adds	r3, #1
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f6:	e7ea      	b.n	80026ce <_Z12get_positionh+0xf6>
  for (int i = 0; i < 8; i++)
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	3301      	adds	r3, #1
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fe:	e7d2      	b.n	80026a6 <_Z12get_positionh+0xce>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	2b04      	cmp	r3, #4
 8002708:	dc0d      	bgt.n	8002726 <_Z12get_positionh+0x14e>
  {
    checksum += position[i];
 800270a:	f107 020c 	add.w	r2, r7, #12
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	4413      	add	r3, r2
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002718:	4413      	add	r3, r2
 800271a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	3301      	adds	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	e7ee      	b.n	8002704 <_Z12get_positionh+0x12c>
  }
  checksum = ~checksum;
 8002726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800272a:	43db      	mvns	r3, r3
 800272c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 8002730:	7c7b      	ldrb	r3, [r7, #17]
 8002732:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002736:	429a      	cmp	r2, r3
 8002738:	d118      	bne.n	800276c <_Z12get_positionh+0x194>
 800273a:	7b3b      	ldrb	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d115      	bne.n	800276c <_Z12get_positionh+0x194>
  {
    inst_pos0 = position[3] + position[4] * 256;
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	b29a      	uxth	r2, r3
 8002744:	7c3b      	ldrb	r3, [r7, #16]
 8002746:	b29b      	uxth	r3, r3
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	b29b      	uxth	r3, r3
 800274c:	4413      	add	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	b21a      	sxth	r2, r3
 8002752:	4b3c      	ldr	r3, [pc, #240]	; (8002844 <_Z12get_positionh+0x26c>)
 8002754:	801a      	strh	r2, [r3, #0]
    servoPos0 = servo0.calculate_position(inst_pos0);
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <_Z12get_positionh+0x26c>)
 8002758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800275c:	4619      	mov	r1, r3
 800275e:	4832      	ldr	r0, [pc, #200]	; (8002828 <_Z12get_positionh+0x250>)
 8002760:	f7fe feac 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <_Z12get_positionh+0x270>)
 800276a:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 800276c:	7c7b      	ldrb	r3, [r7, #17]
 800276e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002772:	429a      	cmp	r2, r3
 8002774:	d118      	bne.n	80027a8 <_Z12get_positionh+0x1d0>
 8002776:	7b3b      	ldrb	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d115      	bne.n	80027a8 <_Z12get_positionh+0x1d0>
  {
    inst_pos1 = position[3] + position[4] * 256;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	b29a      	uxth	r2, r3
 8002780:	7c3b      	ldrb	r3, [r7, #16]
 8002782:	b29b      	uxth	r3, r3
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <_Z12get_positionh+0x274>)
 8002790:	801a      	strh	r2, [r3, #0]
    servoPos1 = servo1.calculate_position(inst_pos1);
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <_Z12get_positionh+0x274>)
 8002794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002798:	4619      	mov	r1, r3
 800279a:	4824      	ldr	r0, [pc, #144]	; (800282c <_Z12get_positionh+0x254>)
 800279c:	f7fe fe8e 	bl	80014bc <_ZN3STS18calculate_positionEs>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <_Z12get_positionh+0x278>)
 80027a6:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 80027a8:	7c7b      	ldrb	r3, [r7, #17]
 80027aa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d118      	bne.n	80027e4 <_Z12get_positionh+0x20c>
 80027b2:	7b3b      	ldrb	r3, [r7, #12]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d115      	bne.n	80027e4 <_Z12get_positionh+0x20c>
  {
    inst_pos2 = position[3] + position[4] * 256;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	7c3b      	ldrb	r3, [r7, #16]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <_Z12get_positionh+0x27c>)
 80027cc:	801a      	strh	r2, [r3, #0]
    servoPos2 = servo2.calculate_position(inst_pos2);
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <_Z12get_positionh+0x27c>)
 80027d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d4:	4619      	mov	r1, r3
 80027d6:	4816      	ldr	r0, [pc, #88]	; (8002830 <_Z12get_positionh+0x258>)
 80027d8:	f7fe fe70 	bl	80014bc <_ZN3STS18calculate_positionEs>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <_Z12get_positionh+0x280>)
 80027e2:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 80027e4:	7c7b      	ldrb	r3, [r7, #17]
 80027e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d118      	bne.n	8002820 <_Z12get_positionh+0x248>
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d115      	bne.n	8002820 <_Z12get_positionh+0x248>
  {
    inst_pos3 = position[3] + position[4] * 256;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	7c3b      	ldrb	r3, [r7, #16]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4413      	add	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21a      	sxth	r2, r3
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <_Z12get_positionh+0x284>)
 8002808:	801a      	strh	r2, [r3, #0]
    servoPos3 = servo3.calculate_position(inst_pos3);
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <_Z12get_positionh+0x284>)
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	4619      	mov	r1, r3
 8002812:	4808      	ldr	r0, [pc, #32]	; (8002834 <_Z12get_positionh+0x25c>)
 8002814:	f7fe fe52 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <_Z12get_positionh+0x288>)
 800281e:	801a      	strh	r2, [r3, #0]
  }
}
 8002820:	bf00      	nop
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200019ac 	.word	0x200019ac
 800282c:	200019b8 	.word	0x200019b8
 8002830:	200019c4 	.word	0x200019c4
 8002834:	200019d0 	.word	0x200019d0
 8002838:	200001d8 	.word	0x200001d8
 800283c:	20001b06 	.word	0x20001b06
 8002840:	200019e4 	.word	0x200019e4
 8002844:	20001afe 	.word	0x20001afe
 8002848:	200019dc 	.word	0x200019dc
 800284c:	20001b00 	.word	0x20001b00
 8002850:	200019de 	.word	0x200019de
 8002854:	20001b02 	.word	0x20001b02
 8002858:	200019e0 	.word	0x200019e0
 800285c:	20001b04 	.word	0x20001b04
 8002860:	200019e2 	.word	0x200019e2

08002864 <_Z8sendDataths>:

void sendData(uint16_t angle, uint8_t speed, int16_t rotation)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	80fb      	strh	r3, [r7, #6]
 800286e:	460b      	mov	r3, r1
 8002870:	717b      	strb	r3, [r7, #5]
 8002872:	4613      	mov	r3, r2
 8002874:	807b      	strh	r3, [r7, #2]
  uint8_t checksum = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]

  rotation += 360;
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002880:	b29b      	uxth	r3, r3
 8002882:	807b      	strh	r3, [r7, #2]

  sendArray[2] = angle / 256;
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29b      	uxth	r3, r3
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <_Z8sendDataths+0xb0>)
 800288e:	709a      	strb	r2, [r3, #2]
  sendArray[3] = angle % 256;
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <_Z8sendDataths+0xb0>)
 8002896:	70da      	strb	r2, [r3, #3]
  sendArray[4] = speed;
 8002898:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <_Z8sendDataths+0xb0>)
 800289a:	797b      	ldrb	r3, [r7, #5]
 800289c:	7113      	strb	r3, [r2, #4]
  sendArray[5] = rotation / 256;
 800289e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da00      	bge.n	80028a8 <_Z8sendDataths+0x44>
 80028a6:	33ff      	adds	r3, #255	; 0xff
 80028a8:	121b      	asrs	r3, r3, #8
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <_Z8sendDataths+0xb0>)
 80028b0:	715a      	strb	r2, [r3, #5]
  sendArray[6] = rotation % 256;
 80028b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028b6:	425a      	negs	r2, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	bf58      	it	pl
 80028be:	4253      	negpl	r3, r2
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <_Z8sendDataths+0xb0>)
 80028c6:	719a      	strb	r2, [r3, #6]

  for (uint8_t i = 2; i < 7; i++)
 80028c8:	2302      	movs	r3, #2
 80028ca:	73bb      	strb	r3, [r7, #14]
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d809      	bhi.n	80028e6 <_Z8sendDataths+0x82>
  {
    checksum += sendArray[i];
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <_Z8sendDataths+0xb0>)
 80028d6:	5cd2      	ldrb	r2, [r2, r3]
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	4413      	add	r3, r2
 80028dc:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 2; i < 7; i++)
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	3301      	adds	r3, #1
 80028e2:	73bb      	strb	r3, [r7, #14]
 80028e4:	e7f2      	b.n	80028cc <_Z8sendDataths+0x68>
  }
  checksum = ~checksum;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	73fb      	strb	r3, [r7, #15]
  checksum += 10;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	330a      	adds	r3, #10
 80028f0:	73fb      	strb	r3, [r7, #15]
  sendArray[7] = checksum;
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <_Z8sendDataths+0xb0>)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	71d3      	strb	r3, [r2, #7]
  HAL_UART_Transmit(&huart3, sendArray, 8, 100);
 80028f8:	2364      	movs	r3, #100	; 0x64
 80028fa:	2208      	movs	r2, #8
 80028fc:	4905      	ldr	r1, [pc, #20]	; (8002914 <_Z8sendDataths+0xb0>)
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <_Z8sendDataths+0xb4>)
 8002900:	f004 fbdf 	bl	80070c2 <HAL_UART_Transmit>
  HAL_Delay(1);
 8002904:	2001      	movs	r0, #1
 8002906:	f000 fe0f 	bl	8003528 <HAL_Delay>
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000
 8002918:	2000021c 	.word	0x2000021c

0800291c <_Z7twelitev>:

void twelite()
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
  static uint8_t readPos = 0;
  uint8_t tweliteData[4] = {0};
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]

  HAL_Delay(1);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 fdfe 	bl	8003528 <HAL_Delay>

  readPos = huart5.hdmarx->Instance->NDTR;
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <_Z7twelitev+0xe8>)
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <_Z7twelitev+0xec>)
 8002938:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(tweliteRxBuf) - readPos;
 800293a:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <_Z7twelitev+0xec>)
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <_Z7twelitev+0xec>)
 8002948:	701a      	strb	r2, [r3, #0]

  if (readPos >= 9)
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <_Z7twelitev+0xec>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b08      	cmp	r3, #8
 8002950:	d918      	bls.n	8002984 <_Z7twelitev+0x68>
  {
    for (int i = 0; i < 9; i++)
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b08      	cmp	r3, #8
 800295a:	dc13      	bgt.n	8002984 <_Z7twelitev+0x68>
    {
      tweliteRead[i] = tweliteRxBuf[readPos - 8 + i];
 800295c:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <_Z7twelitev+0xec>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	f1a3 0208 	sub.w	r2, r3, #8
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <_Z7twelitev+0xf0>)
 800296a:	5cd1      	ldrb	r1, [r2, r3]
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <_Z7twelitev+0xf4>)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	460a      	mov	r2, r1
 8002974:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8002976:	2001      	movs	r0, #1
 8002978:	f000 fdd6 	bl	8003528 <HAL_Delay>
    for (int i = 0; i < 9; i++)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3301      	adds	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e7e8      	b.n	8002956 <_Z7twelitev+0x3a>
    }
  }

  for (int i = 0; i < 5; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b04      	cmp	r3, #4
 800298c:	dc1d      	bgt.n	80029ca <_Z7twelitev+0xae>
  {
    if (tweliteRead[i] == 250)
 800298e:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <_Z7twelitev+0xf4>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2bfa      	cmp	r3, #250	; 0xfa
 8002998:	d113      	bne.n	80029c2 <_Z7twelitev+0xa6>
    {
      for (int j = 0; j < 4; j++)
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	dc0e      	bgt.n	80029c2 <_Z7twelitev+0xa6>
      {
        tweliteData[j] = tweliteRead[i + j + 1];
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <_Z7twelitev+0xf4>)
 80029ae:	5cd1      	ldrb	r1, [r2, r3]
 80029b0:	463a      	mov	r2, r7
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	460a      	mov	r2, r1
 80029b8:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 4; j++)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3301      	adds	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	e7ed      	b.n	800299e <_Z7twelitev+0x82>
  for (int i = 0; i < 5; i++)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	3301      	adds	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	e7de      	b.n	8002988 <_Z7twelitev+0x6c>
      }
    }
  }

  mode = tweliteData[0] - 5;
 80029ca:	783b      	ldrb	r3, [r7, #0]
 80029cc:	3b05      	subs	r3, #5
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_Z7twelitev+0xf8>)
 80029d2:	701a      	strb	r2, [r3, #0]
  count = (tweliteData[1] - 5) * 240 + tweliteData[2] - 5;
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	3b05      	subs	r3, #5
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	78bb      	ldrb	r3, [r7, #2]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b05      	subs	r3, #5
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <_Z7twelitev+0xfc>)
 80029f2:	801a      	strh	r2, [r3, #0]
  hue = tweliteData[3];
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <_Z7twelitev+0x100>)
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000194 	.word	0x20000194
 8002a08:	20001b07 	.word	0x20001b07
 8002a0c:	20001a64 	.word	0x20001a64
 8002a10:	20001af4 	.word	0x20001af4
 8002a14:	20001aed 	.word	0x20001aed
 8002a18:	20001aee 	.word	0x20001aee
 8002a1c:	20001af0 	.word	0x20001af0

08002a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a24:	b672      	cpsid	i
}
 8002a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <Error_Handler+0x8>
	...

08002a2c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d11e      	bne.n	8002a7a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d119      	bne.n	8002a7a <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	490f      	ldr	r1, [pc, #60]	; (8002a88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002a4c:	480f      	ldr	r0, [pc, #60]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002a4e:	f000 faed 	bl	800302c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002a56:	480f      	ldr	r0, [pc, #60]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002a58:	f7fe fc18 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	490c      	ldr	r1, [pc, #48]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002a62:	f7fe fc13 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 8002a66:	2202      	movs	r2, #2
 8002a68:	4909      	ldr	r1, [pc, #36]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002a6a:	480c      	ldr	r0, [pc, #48]	; (8002a9c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002a6c:	f7fe fc0e 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 8002a70:	2203      	movs	r2, #3
 8002a72:	4907      	ldr	r1, [pc, #28]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002a76:	f7fe fc09 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000134 	.word	0x20000134
 8002a88:	200000ec 	.word	0x200000ec
 8002a8c:	20000320 	.word	0x20000320
 8002a90:	200001d8 	.word	0x200001d8
 8002a94:	200019ac 	.word	0x200019ac
 8002a98:	200019b8 	.word	0x200019b8
 8002a9c:	200019c4 	.word	0x200019c4
 8002aa0:	200019d0 	.word	0x200019d0

08002aa4 <_GLOBAL__sub_I_hi2c1>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7ff ffbd 	bl	8002a2c <_Z41__static_initialization_and_destruction_0ii>
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_MspInit+0x4c>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_MspInit+0x4c>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_MspInit+0x4c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800

08002b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_I2C_MspInit+0x84>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d12c      	bne.n	8002b80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_I2C_MspInit+0x88>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_I2C_MspInit+0x88>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_I2C_MspInit+0x88>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b48:	2312      	movs	r3, #18
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b54:	2304      	movs	r3, #4
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480c      	ldr	r0, [pc, #48]	; (8002b90 <HAL_I2C_MspInit+0x8c>)
 8002b60:	f001 f988 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_I2C_MspInit+0x88>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <HAL_I2C_MspInit+0x88>)
 8002b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b72:	6413      	str	r3, [r2, #64]	; 0x40
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_I2C_MspInit+0x88>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b80:	bf00      	nop
 8002b82:	3728      	adds	r7, #40	; 0x28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40005400 	.word	0x40005400
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020400 	.word	0x40020400

08002b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <HAL_TIM_Base_MspInit+0xa8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d145      	bne.n	8002c32 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_TIM_Base_MspInit+0xac>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <HAL_TIM_Base_MspInit+0xac>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <HAL_TIM_Base_MspInit+0xac>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bc4:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <HAL_TIM_Base_MspInit+0xb4>)
 8002bc6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002bc8:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002bce:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002bfe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c02:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002c0a:	480e      	ldr	r0, [pc, #56]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002c0c:	f000 fdc2 	bl	8003794 <HAL_DMA_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8002c16:	f7ff ff03 	bl	8002a20 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a06      	ldr	r2, [pc, #24]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c2c:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_TIM_Base_MspInit+0xb0>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40023800 	.word	0x40023800
 8002c44:	20000134 	.word	0x20000134
 8002c48:	40026070 	.word	0x40026070

08002c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_TIM_MspPostInit+0x68>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d11d      	bne.n	8002caa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_TIM_MspPostInit+0x6c>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <HAL_TIM_MspPostInit+0x6c>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_TIM_MspPostInit+0x6c>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4805      	ldr	r0, [pc, #20]	; (8002cbc <HAL_TIM_MspPostInit+0x70>)
 8002ca6:	f001 f8e5 	bl	8003e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b090      	sub	sp, #64	; 0x40
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a9a      	ldr	r2, [pc, #616]	; (8002f48 <HAL_UART_MspInit+0x288>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d17b      	bne.n	8002dda <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce6:	4b99      	ldr	r3, [pc, #612]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a98      	ldr	r2, [pc, #608]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b96      	ldr	r3, [pc, #600]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
 8002d02:	4b92      	ldr	r3, [pc, #584]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a91      	ldr	r2, [pc, #580]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b8f      	ldr	r3, [pc, #572]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	4b8b      	ldr	r3, [pc, #556]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a8a      	ldr	r2, [pc, #552]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d50:	4619      	mov	r1, r3
 8002d52:	487f      	ldr	r0, [pc, #508]	; (8002f50 <HAL_UART_MspInit+0x290>)
 8002d54:	f001 f88e 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d58:	2304      	movs	r3, #4
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4878      	ldr	r0, [pc, #480]	; (8002f54 <HAL_UART_MspInit+0x294>)
 8002d74:	f001 f87e 	bl	8003e74 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002d78:	4b77      	ldr	r3, [pc, #476]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002d7a:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <HAL_UART_MspInit+0x29c>)
 8002d7c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002d80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d84:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d86:	4b74      	ldr	r3, [pc, #464]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8c:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d92:	4b71      	ldr	r3, [pc, #452]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d98:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da0:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002da6:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dac:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002dae:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002db0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002db4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db6:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002dbc:	4866      	ldr	r0, [pc, #408]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002dbe:	f000 fce9 	bl	8003794 <HAL_DMA_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002dc8:	f7ff fe2a 	bl	8002a20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a62      	ldr	r2, [pc, #392]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd2:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <HAL_UART_MspInit+0x298>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dd8:	e0b1      	b.n	8002f3e <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a60      	ldr	r2, [pc, #384]	; (8002f60 <HAL_UART_MspInit+0x2a0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d15c      	bne.n	8002e9e <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b4e      	ldr	r3, [pc, #312]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e34:	4619      	mov	r1, r3
 8002e36:	484b      	ldr	r0, [pc, #300]	; (8002f64 <HAL_UART_MspInit+0x2a4>)
 8002e38:	f001 f81c 	bl	8003e74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e3e:	4a4b      	ldr	r2, [pc, #300]	; (8002f6c <HAL_UART_MspInit+0x2ac>)
 8002e40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e48:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e50:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e70:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e80:	4839      	ldr	r0, [pc, #228]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e82:	f000 fc87 	bl	8003794 <HAL_DMA_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002e8c:	f7ff fdc8 	bl	8002a20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a35      	ldr	r2, [pc, #212]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
 8002e96:	4a34      	ldr	r2, [pc, #208]	; (8002f68 <HAL_UART_MspInit+0x2a8>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e9c:	e04f      	b.n	8002f3e <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a33      	ldr	r2, [pc, #204]	; (8002f70 <HAL_UART_MspInit+0x2b0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d14a      	bne.n	8002f3e <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4a18      	ldr	r2, [pc, #96]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_UART_MspInit+0x28c>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002efc:	2320      	movs	r3, #32
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f14:	4619      	mov	r1, r3
 8002f16:	480e      	ldr	r0, [pc, #56]	; (8002f50 <HAL_UART_MspInit+0x290>)
 8002f18:	f000 ffac 	bl	8003e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f2e:	2307      	movs	r3, #7
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f36:	4619      	mov	r1, r3
 8002f38:	480e      	ldr	r0, [pc, #56]	; (8002f74 <HAL_UART_MspInit+0x2b4>)
 8002f3a:	f000 ff9b 	bl	8003e74 <HAL_GPIO_Init>
}
 8002f3e:	bf00      	nop
 8002f40:	3740      	adds	r7, #64	; 0x40
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40005000 	.word	0x40005000
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00
 8002f58:	20000260 	.word	0x20000260
 8002f5c:	40026010 	.word	0x40026010
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40020000 	.word	0x40020000
 8002f68:	200002c0 	.word	0x200002c0
 8002f6c:	40026088 	.word	0x40026088
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40020400 	.word	0x40020400

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <NMI_Handler+0x4>

08002f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <HardFault_Handler+0x4>

08002f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <MemManage_Handler+0x4>

08002f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <BusFault_Handler+0x4>

08002f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <UsageFault_Handler+0x4>

08002f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fc4:	f000 fa90 	bl	80034e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <DMA1_Stream0_IRQHandler+0x10>)
 8002fd2:	f000 fce5 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000260 	.word	0x20000260

08002fe0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <DMA1_Stream4_IRQHandler+0x10>)
 8002fe6:	f000 fcdb 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000134 	.word	0x20000134

08002ff4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <DMA1_Stream5_IRQHandler+0x10>)
 8002ffa:	f000 fcd1 	bl	80039a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200002c0 	.word	0x200002c0

08003008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <SystemInit+0x20>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <SystemInit+0x20>)
 8003014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	609a      	str	r2, [r3, #8]
}
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	4608      	mov	r0, r1
 8003066:	4611      	mov	r1, r2
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	807b      	strh	r3, [r7, #2]
 800306e:	460b      	mov	r3, r1
 8003070:	707b      	strb	r3, [r7, #1]
 8003072:	4613      	mov	r3, r2
 8003074:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8003076:	887b      	ldrh	r3, [r7, #2]
 8003078:	2b2f      	cmp	r3, #47	; 0x2f
 800307a:	d81a      	bhi.n	80030b2 <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	440b      	add	r3, r1
 8003088:	330c      	adds	r3, #12
 800308a:	783a      	ldrb	r2, [r7, #0]
 800308c:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	440b      	add	r3, r1
 800309a:	330d      	adds	r3, #13
 800309c:	787a      	ldrb	r2, [r7, #1]
 800309e:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	330e      	adds	r3, #14
 80030ae:	7c3a      	ldrb	r2, [r7, #16]
 80030b0:	701a      	strb	r2, [r3, #0]
	}
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 80030da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 80030e2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80030e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030f8:	e09c      	b.n	8003234 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	461a      	mov	r2, r3
 80030fe:	0052      	lsls	r2, r2, #1
 8003100:	4413      	add	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 8003108:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	da00      	bge.n	8003112 <_ZN7WS2812C7set_hsvEtsss+0x52>
 8003110:	33ff      	adds	r3, #255	; 0xff
 8003112:	121b      	asrs	r3, r3, #8
 8003114:	b21b      	sxth	r3, r3
 8003116:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 8003118:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800311c:	425a      	negs	r2, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	bf58      	it	pl
 8003124:	4253      	negpl	r3, r2
 8003126:	b21b      	sxth	r3, r3
 8003128:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 800312a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800312e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003132:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	da00      	bge.n	8003140 <_ZN7WS2812C7set_hsvEtsss+0x80>
 800313e:	33ff      	adds	r3, #255	; 0xff
 8003140:	121b      	asrs	r3, r3, #8
 8003142:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8003144:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800314c:	69f9      	ldr	r1, [r7, #28]
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	da00      	bge.n	8003158 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8003156:	33ff      	adds	r3, #255	; 0xff
 8003158:	121b      	asrs	r3, r3, #8
 800315a:	425b      	negs	r3, r3
 800315c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	da00      	bge.n	800316a <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8003168:	33ff      	adds	r3, #255	; 0xff
 800316a:	121b      	asrs	r3, r3, #8
 800316c:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 800316e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003176:	69f9      	ldr	r1, [r7, #28]
 8003178:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	da00      	bge.n	8003186 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8003184:	33ff      	adds	r3, #255	; 0xff
 8003186:	121b      	asrs	r3, r3, #8
 8003188:	425b      	negs	r3, r3
 800318a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	da00      	bge.n	8003198 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8003196:	33ff      	adds	r3, #255	; 0xff
 8003198:	121b      	asrs	r3, r3, #8
 800319a:	613b      	str	r3, [r7, #16]

		switch (i) {
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d83e      	bhi.n	8003220 <_ZN7WS2812C7set_hsvEtsss+0x160>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031bd 	.word	0x080031bd
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	080031f9 	.word	0x080031f9
 80031b8:	0800320d 	.word	0x0800320d
			case 0: r = v; g = t; b = p; break;
 80031bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80031be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80031ce:	e031      	b.n	8003234 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80031d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80031e2:	e027      	b.n	8003234 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80031ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80031f6:	e01d      	b.n	8003234 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003204:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800320a:	e013      	b.n	8003234 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003218:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800321a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800321e:	e009      	b.n	8003234 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8003220:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003232:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8003234:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003238:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4603      	mov	r3, r0
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff ff08 	bl	800305c <_ZN7WS2812C7set_rgbEthhh>
}
 800324c:	bf00      	nop
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003282:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8003286:	2b01      	cmp	r3, #1
 8003288:	d179      	bne.n	800337e <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2bf9      	cmp	r3, #249	; 0xf9
 8003292:	dc0a      	bgt.n	80032aa <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3326      	adds	r3, #38	; 0x26
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e7f1      	b.n	800328e <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b2f      	cmp	r3, #47	; 0x2f
 80032b2:	dc52      	bgt.n	800335a <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	dc49      	bgt.n	8003352 <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 80032be:	2307      	movs	r3, #7
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db40      	blt.n	800334a <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	18ca      	adds	r2, r1, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4413      	add	r3, r2
 80032d8:	330c      	adds	r3, #12
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	fa42 f303 	asr.w	r3, r2, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d114      	bne.n	800331a <_ZN7WS2812C7executeEv+0xa6>
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	441a      	add	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	4413      	add	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	3326      	adds	r3, #38	; 0x26
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	2214      	movs	r2, #20
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	e013      	b.n	8003342 <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	441a      	add	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f1c3 0307 	rsb	r3, r3, #7
 8003334:	4413      	add	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	3326      	adds	r3, #38	; 0x26
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	220a      	movs	r2, #10
 8003340:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	3b01      	subs	r3, #1
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e7bb      	b.n	80032c2 <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	e7b2      	b.n	80032b8 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	3301      	adds	r3, #1
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e7a9      	b.n	80032ae <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6858      	ldr	r0, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800336a:	f240 537a 	movw	r3, #1402	; 0x57a
 800336e:	f002 fe99 	bl	80060a4 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 800337e:	bf00      	nop
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2bf9      	cmp	r3, #249	; 0xf9
 8003396:	dc0a      	bgt.n	80033ae <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3326      	adds	r3, #38	; 0x26
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	e7f1      	b.n	8003392 <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 80033ae:	23fa      	movs	r3, #250	; 0xfa
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80033b8:	da0a      	bge.n	80033d0 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3326      	adds	r3, #38	; 0x26
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	220a      	movs	r2, #10
 80033c6:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	e7f0      	b.n	80033b2 <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6858      	ldr	r0, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	4619      	mov	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80033e0:	f240 537a 	movw	r3, #1402	; 0x57a
 80033e4:	f002 fe5e 	bl	80060a4 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033f6:	490e      	ldr	r1, [pc, #56]	; (8003430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033f8:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033fc:	e002      	b.n	8003404 <LoopCopyDataInit>

080033fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003402:	3304      	adds	r3, #4

08003404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003408:	d3f9      	bcc.n	80033fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800340a:	4a0b      	ldr	r2, [pc, #44]	; (8003438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800340c:	4c0b      	ldr	r4, [pc, #44]	; (800343c <LoopFillZerobss+0x26>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003410:	e001      	b.n	8003416 <LoopFillZerobss>

08003412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003414:	3204      	adds	r2, #4

08003416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003418:	d3fb      	bcc.n	8003412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800341a:	f7ff fdf5 	bl	8003008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341e:	f005 ff5d 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003422:	f7fe facd 	bl	80019c0 <main>
  bx  lr    
 8003426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800342c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003430:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003434:	080097e4 	.word	0x080097e4
  ldr r2, =_sbss
 8003438:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800343c:	20001b0c 	.word	0x20001b0c

08003440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003440:	e7fe      	b.n	8003440 <ADC_IRQHandler>
	...

08003444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_Init+0x40>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <HAL_Init+0x40>)
 800344e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_Init+0x40>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_Init+0x40>)
 800345a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_Init+0x40>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_Init+0x40>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800346c:	2003      	movs	r0, #3
 800346e:	f000 f94f 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003472:	200f      	movs	r0, #15
 8003474:	f000 f808 	bl	8003488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003478:	f7ff fb1c 	bl	8002ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023c00 	.word	0x40023c00

08003488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_InitTick+0x54>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_InitTick+0x58>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800349e:	fbb3 f3f1 	udiv	r3, r3, r1
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f967 	bl	800377a <HAL_SYSTICK_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00e      	b.n	80034d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d80a      	bhi.n	80034d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034bc:	2200      	movs	r2, #0
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f000 f92f 	bl	8003726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c8:	4a06      	ldr	r2, [pc, #24]	; (80034e4 <HAL_InitTick+0x5c>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	20000014 	.word	0x20000014
 80034e4:	20000010 	.word	0x20000010

080034e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_IncTick+0x20>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_IncTick+0x24>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_IncTick+0x24>)
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000014 	.word	0x20000014
 800350c:	20001b08 	.word	0x20001b08

08003510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return uwTick;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_GetTick+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20001b08 	.word	0x20001b08

08003528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff ffee 	bl	8003510 <HAL_GetTick>
 8003534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003540:	d005      	beq.n	800354e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_Delay+0x44>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800354e:	bf00      	nop
 8003550:	f7ff ffde 	bl	8003510 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d8f7      	bhi.n	8003550 <HAL_Delay+0x28>
  {
  }
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000014 	.word	0x20000014

08003570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800359c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x44>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <__NVIC_GetPriorityGrouping+0x18>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0307 	and.w	r3, r3, #7
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	db0b      	blt.n	80035fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	4907      	ldr	r1, [pc, #28]	; (800360c <__NVIC_EnableIRQ+0x38>)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2001      	movs	r0, #1
 80035f6:	fa00 f202 	lsl.w	r2, r0, r2
 80035fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	; (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	; (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
         );
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	; 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036dc:	d301      	bcc.n	80036e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <SysTick_Config+0x40>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ea:	210f      	movs	r1, #15
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f7ff ff8e 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x40>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x40>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff29 	bl	8003570 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003738:	f7ff ff3e 	bl	80035b8 <__NVIC_GetPriorityGrouping>
 800373c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6978      	ldr	r0, [r7, #20]
 8003744:	f7ff ff8e 	bl	8003664 <NVIC_EncodePriority>
 8003748:	4602      	mov	r2, r0
 800374a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff ff5d 	bl	8003610 <__NVIC_SetPriority>
}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff31 	bl	80035d4 <__NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffa2 	bl	80036cc <SysTick_Config>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037a0:	f7ff feb6 	bl	8003510 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e099      	b.n	80038e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	e00f      	b.n	80037f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037d2:	f7ff fe9d 	bl	8003510 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d908      	bls.n	80037f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e078      	b.n	80038e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e8      	bne.n	80037d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_DMA_Init+0x158>)
 800380c:	4013      	ands	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b04      	cmp	r3, #4
 800384a:	d107      	bne.n	800385c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b04      	cmp	r3, #4
 8003884:	d117      	bne.n	80038b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa6f 	bl	8003d7c <DMA_CheckFifoParam>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038b2:	2301      	movs	r3, #1
 80038b4:	e016      	b.n	80038e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fa26 	bl	8003d10 <DMA_CalcBaseAndBitshift>
 80038c4:	4603      	mov	r3, r0
 80038c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	223f      	movs	r2, #63	; 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	f010803f 	.word	0xf010803f

080038f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_DMA_Start_IT+0x26>
 8003912:	2302      	movs	r3, #2
 8003914:	e040      	b.n	8003998 <HAL_DMA_Start_IT+0xa8>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d12f      	bne.n	800398a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f9b8 	bl	8003cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	223f      	movs	r2, #63	; 0x3f
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0216 	orr.w	r2, r2, #22
 800395e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039ac:	4b8e      	ldr	r3, [pc, #568]	; (8003be8 <HAL_DMA_IRQHandler+0x248>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a8e      	ldr	r2, [pc, #568]	; (8003bec <HAL_DMA_IRQHandler+0x24c>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2208      	movs	r2, #8
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01a      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2208      	movs	r2, #8
 80039fa:	409a      	lsls	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0201 	orr.w	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2201      	movs	r2, #1
 8003a30:	409a      	lsls	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2204      	movs	r2, #4
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2204      	movs	r2, #4
 8003a66:	409a      	lsls	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0204 	orr.w	r2, r3, #4
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d043      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03c      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d108      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d024      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
 8003ace:	e01f      	b.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
 8003ae0:	e016      	b.n	8003b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d107      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0208 	bic.w	r2, r2, #8
 8003afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	2220      	movs	r2, #32
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808f 	beq.w	8003c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 8087 	beq.w	8003c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2220      	movs	r2, #32
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d136      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0216 	bic.w	r2, r2, #22
 8003b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x1da>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0208 	bic.w	r2, r2, #8
 8003b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	223f      	movs	r2, #63	; 0x3f
 8003b90:	409a      	lsls	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d07e      	beq.n	8003cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
        }
        return;
 8003bb6:	e079      	b.n	8003cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
 8003be4:	e02c      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
 8003be6:	bf00      	nop
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d023      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	e01e      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10f      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0210 	bic.w	r2, r2, #16
 8003c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d032      	beq.n	8003cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2205      	movs	r2, #5
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d307      	bcc.n	8003c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f2      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x2cc>
 8003c86:	e000      	b.n	8003c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e000      	b.n	8003cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cac:	bf00      	nop
    }
  }
}
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d108      	bne.n	8003cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cf2:	e007      	b.n	8003d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	3b10      	subs	r3, #16
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <DMA_CalcBaseAndBitshift+0x64>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d2a:	4a13      	ldr	r2, [pc, #76]	; (8003d78 <DMA_CalcBaseAndBitshift+0x68>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d909      	bls.n	8003d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d50:	e007      	b.n	8003d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	aaaaaaab 	.word	0xaaaaaaab
 8003d78:	08009380 	.word	0x08009380

08003d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11f      	bne.n	8003dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d856      	bhi.n	8003e4a <DMA_CheckFifoParam+0xce>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <DMA_CheckFifoParam+0x28>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dc7 	.word	0x08003dc7
 8003dac:	08003db5 	.word	0x08003db5
 8003db0:	08003e4b 	.word	0x08003e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d046      	beq.n	8003e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e043      	b.n	8003e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dce:	d140      	bne.n	8003e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e03d      	b.n	8003e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dde:	d121      	bne.n	8003e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d837      	bhi.n	8003e56 <DMA_CheckFifoParam+0xda>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <DMA_CheckFifoParam+0x70>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e03 	.word	0x08003e03
 8003df4:	08003dfd 	.word	0x08003dfd
 8003df8:	08003e15 	.word	0x08003e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e030      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d025      	beq.n	8003e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e12:	e022      	b.n	8003e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e1c:	d11f      	bne.n	8003e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e22:	e01c      	b.n	8003e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d903      	bls.n	8003e32 <DMA_CheckFifoParam+0xb6>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e30:	e018      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      break;
 8003e36:	e015      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      break;
 8003e48:	e00b      	b.n	8003e62 <DMA_CheckFifoParam+0xe6>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e00a      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e008      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e52:	bf00      	nop
 8003e54:	e006      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e56:	bf00      	nop
 8003e58:	e004      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e002      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
    }
  } 
  
  return status; 
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e165      	b.n	800415c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 8154 	bne.w	8004156 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80ae 	beq.w	8004156 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <HAL_GPIO_Init+0x300>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a5c      	ldr	r2, [pc, #368]	; (8004174 <HAL_GPIO_Init+0x300>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b5a      	ldr	r3, [pc, #360]	; (8004174 <HAL_GPIO_Init+0x300>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_GPIO_Init+0x304>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_GPIO_Init+0x308>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d025      	beq.n	800408e <HAL_GPIO_Init+0x21a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4e      	ldr	r2, [pc, #312]	; (8004180 <HAL_GPIO_Init+0x30c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01f      	beq.n	800408a <HAL_GPIO_Init+0x216>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4d      	ldr	r2, [pc, #308]	; (8004184 <HAL_GPIO_Init+0x310>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d019      	beq.n	8004086 <HAL_GPIO_Init+0x212>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <HAL_GPIO_Init+0x314>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_GPIO_Init+0x20e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4b      	ldr	r2, [pc, #300]	; (800418c <HAL_GPIO_Init+0x318>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00d      	beq.n	800407e <HAL_GPIO_Init+0x20a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_GPIO_Init+0x31c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <HAL_GPIO_Init+0x206>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a49      	ldr	r2, [pc, #292]	; (8004194 <HAL_GPIO_Init+0x320>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <HAL_GPIO_Init+0x202>
 8004072:	2306      	movs	r3, #6
 8004074:	e00c      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 8004076:	2307      	movs	r3, #7
 8004078:	e00a      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 800407a:	2305      	movs	r3, #5
 800407c:	e008      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 800407e:	2304      	movs	r3, #4
 8004080:	e006      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 8004082:	2303      	movs	r3, #3
 8004084:	e004      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 8004086:	2302      	movs	r3, #2
 8004088:	e002      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <HAL_GPIO_Init+0x21c>
 800408e:	2300      	movs	r3, #0
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	f002 0203 	and.w	r2, r2, #3
 8004096:	0092      	lsls	r2, r2, #2
 8004098:	4093      	lsls	r3, r2
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a0:	4935      	ldr	r1, [pc, #212]	; (8004178 <HAL_GPIO_Init+0x304>)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	3302      	adds	r3, #2
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ae:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_GPIO_Init+0x324>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040d2:	4a31      	ldr	r2, [pc, #196]	; (8004198 <HAL_GPIO_Init+0x324>)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040d8:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <HAL_GPIO_Init+0x324>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040fc:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_GPIO_Init+0x324>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <HAL_GPIO_Init+0x324>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004126:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <HAL_GPIO_Init+0x324>)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_GPIO_Init+0x324>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	43db      	mvns	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4013      	ands	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004150:	4a11      	ldr	r2, [pc, #68]	; (8004198 <HAL_GPIO_Init+0x324>)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3301      	adds	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b0f      	cmp	r3, #15
 8004160:	f67f ae96 	bls.w	8003e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3724      	adds	r7, #36	; 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40013800 	.word	0x40013800
 800417c:	40020000 	.word	0x40020000
 8004180:	40020400 	.word	0x40020400
 8004184:	40020800 	.word	0x40020800
 8004188:	40020c00 	.word	0x40020c00
 800418c:	40021000 	.word	0x40021000
 8004190:	40021400 	.word	0x40021400
 8004194:	40021800 	.word	0x40021800
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e8:	e003      	b.n	80041f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e12b      	b.n	800446a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fe fc6c 	bl	8002b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004264:	f001 f982 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a81      	ldr	r2, [pc, #516]	; (8004474 <HAL_I2C_Init+0x274>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d807      	bhi.n	8004284 <HAL_I2C_Init+0x84>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a80      	ldr	r2, [pc, #512]	; (8004478 <HAL_I2C_Init+0x278>)
 8004278:	4293      	cmp	r3, r2
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e006      	b.n	8004292 <HAL_I2C_Init+0x92>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a7d      	ldr	r2, [pc, #500]	; (800447c <HAL_I2C_Init+0x27c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0e7      	b.n	800446a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a78      	ldr	r2, [pc, #480]	; (8004480 <HAL_I2C_Init+0x280>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0c9b      	lsrs	r3, r3, #18
 80042a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a6a      	ldr	r2, [pc, #424]	; (8004474 <HAL_I2C_Init+0x274>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <HAL_I2C_Init+0xd4>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	e009      	b.n	80042e8 <HAL_I2C_Init+0xe8>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	4a69      	ldr	r2, [pc, #420]	; (8004484 <HAL_I2C_Init+0x284>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	3301      	adds	r3, #1
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	495c      	ldr	r1, [pc, #368]	; (8004474 <HAL_I2C_Init+0x274>)
 8004304:	428b      	cmp	r3, r1
 8004306:	d819      	bhi.n	800433c <HAL_I2C_Init+0x13c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e59      	subs	r1, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fbb1 f3f3 	udiv	r3, r1, r3
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	f640 73fc 	movw	r3, #4092	; 0xffc
 800431c:	400b      	ands	r3, r1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_I2C_Init+0x138>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1e59      	subs	r1, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004330:	3301      	adds	r3, #1
 8004332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004336:	e051      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 8004338:	2304      	movs	r3, #4
 800433a:	e04f      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <HAL_I2C_Init+0x168>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	440b      	add	r3, r1
 8004352:	fbb0 f3f3 	udiv	r3, r0, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e012      	b.n	800438e <HAL_I2C_Init+0x18e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e58      	subs	r0, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	0099      	lsls	r1, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Init+0x196>
 8004392:	2301      	movs	r3, #1
 8004394:	e022      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <HAL_I2C_Init+0x1bc>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e58      	subs	r0, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	440b      	add	r3, r1
 80043ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ba:	e00f      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e58      	subs	r0, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	0099      	lsls	r1, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	6809      	ldr	r1, [r1, #0]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800440a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6911      	ldr	r1, [r2, #16]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	000186a0 	.word	0x000186a0
 8004478:	001e847f 	.word	0x001e847f
 800447c:	003d08ff 	.word	0x003d08ff
 8004480:	431bde83 	.word	0x431bde83
 8004484:	10624dd3 	.word	0x10624dd3

08004488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	460b      	mov	r3, r1
 8004496:	817b      	strh	r3, [r7, #10]
 8004498:	4613      	mov	r3, r2
 800449a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800449c:	f7ff f838 	bl	8003510 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	f040 80e0 	bne.w	8004670 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2319      	movs	r3, #25
 80044b6:	2201      	movs	r2, #1
 80044b8:	4970      	ldr	r1, [pc, #448]	; (800467c <HAL_I2C_Master_Transmit+0x1f4>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 fd86 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0d3      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_I2C_Master_Transmit+0x50>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e0cc      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d007      	beq.n	80044fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2210      	movs	r2, #16
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	893a      	ldrh	r2, [r7, #8]
 800452e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a50      	ldr	r2, [pc, #320]	; (8004680 <HAL_I2C_Master_Transmit+0x1f8>)
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004540:	8979      	ldrh	r1, [r7, #10]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fbf0 	bl	8004d2c <I2C_MasterRequestWrite>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e08d      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800456c:	e066      	b.n	800463c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	6a39      	ldr	r1, [r7, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fe00 	bl	8005178 <I2C_WaitOnTXEFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b04      	cmp	r3, #4
 8004584:	d107      	bne.n	8004596 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06b      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d11b      	bne.n	8004610 <HAL_I2C_Master_Transmit+0x188>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d017      	beq.n	8004610 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	6a39      	ldr	r1, [r7, #32]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fdf0 	bl	80051fa <I2C_WaitOnBTFFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b04      	cmp	r3, #4
 8004626:	d107      	bne.n	8004638 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e01a      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d194      	bne.n	800456e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	00100002 	.word	0x00100002
 8004680:	ffff0000 	.word	0xffff0000

08004684 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	461a      	mov	r2, r3
 8004690:	460b      	mov	r3, r1
 8004692:	817b      	strh	r3, [r7, #10]
 8004694:	4613      	mov	r3, r2
 8004696:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004698:	f7fe ff3a 	bl	8003510 <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f040 820b 	bne.w	8004ac2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2319      	movs	r3, #25
 80046b2:	2201      	movs	r2, #1
 80046b4:	497c      	ldr	r1, [pc, #496]	; (80048a8 <HAL_I2C_Master_Receive+0x224>)
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fc88 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	e1fe      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_I2C_Master_Receive+0x50>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e1f7      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d007      	beq.n	80046fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004708:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2222      	movs	r2, #34	; 0x22
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2210      	movs	r2, #16
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	893a      	ldrh	r2, [r7, #8]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a5c      	ldr	r2, [pc, #368]	; (80048ac <HAL_I2C_Master_Receive+0x228>)
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800473c:	8979      	ldrh	r1, [r7, #10]
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fb74 	bl	8004e30 <I2C_MasterRequestRead>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e1b8      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d113      	bne.n	8004782 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e18c      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	2b01      	cmp	r3, #1
 8004788:	d11b      	bne.n	80047c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e16c      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d11b      	bne.n	8004802 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	e14c      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004828:	e138      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482e:	2b03      	cmp	r3, #3
 8004830:	f200 80f1 	bhi.w	8004a16 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004838:	2b01      	cmp	r3, #1
 800483a:	d123      	bne.n	8004884 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fd1b 	bl	800527c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e139      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004882:	e10b      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	2b02      	cmp	r3, #2
 800488a:	d14e      	bne.n	800492a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	2200      	movs	r2, #0
 8004894:	4906      	ldr	r1, [pc, #24]	; (80048b0 <HAL_I2C_Master_Receive+0x22c>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 fb98 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e10e      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
 80048a6:	bf00      	nop
 80048a8:	00100002 	.word	0x00100002
 80048ac:	ffff0000 	.word	0xffff0000
 80048b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004928:	e0b8      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	2200      	movs	r2, #0
 8004932:	4966      	ldr	r1, [pc, #408]	; (8004acc <HAL_I2C_Master_Receive+0x448>)
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fb49 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0bf      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	2200      	movs	r2, #0
 800498e:	494f      	ldr	r1, [pc, #316]	; (8004acc <HAL_I2C_Master_Receive+0x448>)
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fb1b 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e091      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a14:	e042      	b.n	8004a9c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fc2e 	bl	800527c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e04c      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d118      	bne.n	8004a9c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f47f aec2 	bne.w	800482a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	; 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	00010004 	.word	0x00010004

08004ad0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	460b      	mov	r3, r1
 8004ade:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ae0:	f7fe fd16 	bl	8003510 <HAL_GetTick>
 8004ae4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	f040 8111 	bne.w	8004d1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2319      	movs	r3, #25
 8004afe:	2201      	movs	r2, #1
 8004b00:	4988      	ldr	r1, [pc, #544]	; (8004d24 <HAL_I2C_IsDeviceReady+0x254>)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fa62 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e104      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_I2C_IsDeviceReady+0x50>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e0fd      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d007      	beq.n	8004b46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2224      	movs	r2, #36	; 0x24
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a70      	ldr	r2, [pc, #448]	; (8004d28 <HAL_I2C_IsDeviceReady+0x258>)
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fa20 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba0:	d103      	bne.n	8004baa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0b6      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004bbe:	f7fe fca7 	bl	8003510 <HAL_GetTick>
 8004bc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	bf0c      	ite	eq
 8004bd2:	2301      	moveq	r3, #1
 8004bd4:	2300      	movne	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be8:	bf0c      	ite	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	2300      	movne	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bf2:	e025      	b.n	8004c40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fe fc8c 	bl	8003510 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <HAL_I2C_IsDeviceReady+0x13a>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	22a0      	movs	r2, #160	; 0xa0
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2ba0      	cmp	r3, #160	; 0xa0
 8004c4a:	d005      	beq.n	8004c58 <HAL_I2C_IsDeviceReady+0x188>
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <HAL_I2C_IsDeviceReady+0x188>
 8004c52:	7dbb      	ldrb	r3, [r7, #22]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0cd      	beq.n	8004bf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d129      	bne.n	8004cc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2319      	movs	r3, #25
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4921      	ldr	r1, [pc, #132]	; (8004d24 <HAL_I2C_IsDeviceReady+0x254>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f994 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e036      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e02c      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2319      	movs	r3, #25
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	490f      	ldr	r1, [pc, #60]	; (8004d24 <HAL_I2C_IsDeviceReady+0x254>)
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f970 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e012      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	f4ff af32 	bcc.w	8004b6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	00100002 	.word	0x00100002
 8004d28:	ffff0000 	.word	0xffff0000

08004d2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d006      	beq.n	8004d56 <I2C_MasterRequestWrite+0x2a>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d003      	beq.n	8004d56 <I2C_MasterRequestWrite+0x2a>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d54:	d108      	bne.n	8004d68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e00b      	b.n	8004d80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	2b12      	cmp	r3, #18
 8004d6e:	d107      	bne.n	8004d80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f91d 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00d      	beq.n	8004db4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da6:	d103      	bne.n	8004db0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e035      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dbc:	d108      	bne.n	8004dd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dbe:	897b      	ldrh	r3, [r7, #10]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	e01b      	b.n	8004e08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dd0:	897b      	ldrh	r3, [r7, #10]
 8004dd2:	11db      	asrs	r3, r3, #7
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f063 030f 	orn	r3, r3, #15
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	490e      	ldr	r1, [pc, #56]	; (8004e28 <I2C_MasterRequestWrite+0xfc>)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f943 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e010      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dfe:	897b      	ldrh	r3, [r7, #10]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4907      	ldr	r1, [pc, #28]	; (8004e2c <I2C_MasterRequestWrite+0x100>)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f933 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	00010008 	.word	0x00010008
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d006      	beq.n	8004e6a <I2C_MasterRequestRead+0x3a>
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d003      	beq.n	8004e6a <I2C_MasterRequestRead+0x3a>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e68:	d108      	bne.n	8004e7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e00b      	b.n	8004e94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	2b11      	cmp	r3, #17
 8004e82:	d107      	bne.n	8004e94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f893 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00d      	beq.n	8004ec8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eba:	d103      	bne.n	8004ec4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e079      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed0:	d108      	bne.n	8004ee4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ed2:	897b      	ldrh	r3, [r7, #10]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]
 8004ee2:	e05f      	b.n	8004fa4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ee4:	897b      	ldrh	r3, [r7, #10]
 8004ee6:	11db      	asrs	r3, r3, #7
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f063 030f 	orn	r3, r3, #15
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4930      	ldr	r1, [pc, #192]	; (8004fc4 <I2C_MasterRequestRead+0x194>)
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f8b9 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e054      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4929      	ldr	r1, [pc, #164]	; (8004fc8 <I2C_MasterRequestRead+0x198>)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f8a9 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e044      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f831 	bl	8004fcc <I2C_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00d      	beq.n	8004f8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d103      	bne.n	8004f88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e017      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f8c:	897b      	ldrh	r3, [r7, #10]
 8004f8e:	11db      	asrs	r3, r3, #7
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0306 	and.w	r3, r3, #6
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f063 030e 	orn	r3, r3, #14
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4907      	ldr	r1, [pc, #28]	; (8004fc8 <I2C_MasterRequestRead+0x198>)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f865 	bl	800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	00010008 	.word	0x00010008
 8004fc8:	00010002 	.word	0x00010002

08004fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fdc:	e025      	b.n	800502a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d021      	beq.n	800502a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe6:	f7fe fa93 	bl	8003510 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d302      	bcc.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d116      	bne.n	800502a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e023      	b.n	8005072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10d      	bne.n	8005050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	43da      	mvns	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf0c      	ite	eq
 8005046:	2301      	moveq	r3, #1
 8005048:	2300      	movne	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	461a      	mov	r2, r3
 800504e:	e00c      	b.n	800506a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d0b6      	beq.n	8004fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005088:	e051      	b.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d123      	bne.n	80050e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0204 	orr.w	r2, r3, #4
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e046      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d021      	beq.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ea:	f7fe fa11 	bl	8003510 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d302      	bcc.n	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d116      	bne.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e020      	b.n	8005170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10c      	bne.n	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e00b      	b.n	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	43da      	mvns	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d18d      	bne.n	800508a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005184:	e02d      	b.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f8ce 	bl	8005328 <I2C_IsAcknowledgeFailed>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e02d      	b.n	80051f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d021      	beq.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe f9b7 	bl	8003510 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e007      	b.n	80051f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b80      	cmp	r3, #128	; 0x80
 80051ee:	d1ca      	bne.n	8005186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005206:	e02d      	b.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f88d 	bl	8005328 <I2C_IsAcknowledgeFailed>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e02d      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d021      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005220:	f7fe f976 	bl	8003510 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d116      	bne.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d1ca      	bne.n	8005208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005288:	e042      	b.n	8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d119      	bne.n	80052cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0210 	mvn.w	r2, #16
 80052a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e029      	b.n	8005320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052cc:	f7fe f920 	bl	8003510 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d302      	bcc.n	80052e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e007      	b.n	8005320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d1b5      	bne.n	800528a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d11b      	bne.n	8005378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f043 0204 	orr.w	r2, r3, #4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0cc      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b68      	ldr	r3, [pc, #416]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d90c      	bls.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b65      	ldr	r3, [pc, #404]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	4b63      	ldr	r3, [pc, #396]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0b8      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d020      	beq.n	8005412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a58      	ldr	r2, [pc, #352]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053f4:	4b53      	ldr	r3, [pc, #332]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4a52      	ldr	r2, [pc, #328]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005400:	4b50      	ldr	r3, [pc, #320]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	494d      	ldr	r1, [pc, #308]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d044      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b47      	ldr	r3, [pc, #284]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d119      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e07f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d003      	beq.n	8005446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005442:	2b03      	cmp	r3, #3
 8005444:	d107      	bne.n	8005456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005446:	4b3f      	ldr	r3, [pc, #252]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e06f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e067      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f023 0203 	bic.w	r2, r3, #3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4934      	ldr	r1, [pc, #208]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005478:	f7fe f84a 	bl	8003510 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547e:	e00a      	b.n	8005496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005480:	f7fe f846 	bl	8003510 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f241 3288 	movw	r2, #5000	; 0x1388
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e04f      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 020c 	and.w	r2, r3, #12
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1eb      	bne.n	8005480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a8:	4b25      	ldr	r3, [pc, #148]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20c      	bcs.n	80054d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e032      	b.n	8005536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4916      	ldr	r1, [pc, #88]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	490e      	ldr	r1, [pc, #56]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800550e:	f000 f855 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8005512:	4602      	mov	r2, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	490a      	ldr	r1, [pc, #40]	; (8005548 <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	5ccb      	ldrb	r3, [r1, r3]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <HAL_RCC_ClockConfig+0x1c8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fd ffaa 	bl	8003488 <HAL_InitTick>

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40023c00 	.word	0x40023c00
 8005544:	40023800 	.word	0x40023800
 8005548:	08009368 	.word	0x08009368
 800554c:	2000000c 	.word	0x2000000c
 8005550:	20000010 	.word	0x20000010

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	2000000c 	.word	0x2000000c

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	08009378 	.word	0x08009378

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005598:	f7ff ffdc 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0b5b      	lsrs	r3, r3, #13
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	08009378 	.word	0x08009378

080055bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b0ae      	sub	sp, #184	; 0xb8
 80055c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055e2:	4bcb      	ldr	r3, [pc, #812]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	f200 8204 	bhi.w	80059f8 <HAL_RCC_GetSysClockFreq+0x43c>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	080059f9 	.word	0x080059f9
 8005600:	080059f9 	.word	0x080059f9
 8005604:	080059f9 	.word	0x080059f9
 8005608:	08005635 	.word	0x08005635
 800560c:	080059f9 	.word	0x080059f9
 8005610:	080059f9 	.word	0x080059f9
 8005614:	080059f9 	.word	0x080059f9
 8005618:	0800563d 	.word	0x0800563d
 800561c:	080059f9 	.word	0x080059f9
 8005620:	080059f9 	.word	0x080059f9
 8005624:	080059f9 	.word	0x080059f9
 8005628:	0800582d 	.word	0x0800582d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800562c:	4bb9      	ldr	r3, [pc, #740]	; (8005914 <HAL_RCC_GetSysClockFreq+0x358>)
 800562e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005632:	e1e5      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005634:	4bb7      	ldr	r3, [pc, #732]	; (8005914 <HAL_RCC_GetSysClockFreq+0x358>)
 8005636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800563a:	e1e1      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563c:	4bb4      	ldr	r3, [pc, #720]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005648:	4bb1      	ldr	r3, [pc, #708]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d071      	beq.n	8005738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005654:	4bae      	ldr	r3, [pc, #696]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005660:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800567a:	4622      	mov	r2, r4
 800567c:	462b      	mov	r3, r5
 800567e:	f04f 0000 	mov.w	r0, #0
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	0159      	lsls	r1, r3, #5
 8005688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800568c:	0150      	lsls	r0, r2, #5
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4621      	mov	r1, r4
 8005694:	1a51      	subs	r1, r2, r1
 8005696:	6439      	str	r1, [r7, #64]	; 0x40
 8005698:	4629      	mov	r1, r5
 800569a:	eb63 0301 	sbc.w	r3, r3, r1
 800569e:	647b      	str	r3, [r7, #68]	; 0x44
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80056ac:	4649      	mov	r1, r9
 80056ae:	018b      	lsls	r3, r1, #6
 80056b0:	4641      	mov	r1, r8
 80056b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056b6:	4641      	mov	r1, r8
 80056b8:	018a      	lsls	r2, r1, #6
 80056ba:	4641      	mov	r1, r8
 80056bc:	1a51      	subs	r1, r2, r1
 80056be:	63b9      	str	r1, [r7, #56]	; 0x38
 80056c0:	4649      	mov	r1, r9
 80056c2:	eb63 0301 	sbc.w	r3, r3, r1
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80056d4:	4649      	mov	r1, r9
 80056d6:	00cb      	lsls	r3, r1, #3
 80056d8:	4641      	mov	r1, r8
 80056da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056de:	4641      	mov	r1, r8
 80056e0:	00ca      	lsls	r2, r1, #3
 80056e2:	4610      	mov	r0, r2
 80056e4:	4619      	mov	r1, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	4622      	mov	r2, r4
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30
 80056ee:	462b      	mov	r3, r5
 80056f0:	460a      	mov	r2, r1
 80056f2:	eb42 0303 	adc.w	r3, r2, r3
 80056f6:	637b      	str	r3, [r7, #52]	; 0x34
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005704:	4629      	mov	r1, r5
 8005706:	028b      	lsls	r3, r1, #10
 8005708:	4621      	mov	r1, r4
 800570a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800570e:	4621      	mov	r1, r4
 8005710:	028a      	lsls	r2, r1, #10
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005720:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005728:	f7fb fa52 	bl	8000bd0 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4613      	mov	r3, r2
 8005732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005736:	e067      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005738:	4b75      	ldr	r3, [pc, #468]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	099b      	lsrs	r3, r3, #6
 800573e:	2200      	movs	r2, #0
 8005740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005744:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800574c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005750:	67bb      	str	r3, [r7, #120]	; 0x78
 8005752:	2300      	movs	r3, #0
 8005754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800575a:	4622      	mov	r2, r4
 800575c:	462b      	mov	r3, r5
 800575e:	f04f 0000 	mov.w	r0, #0
 8005762:	f04f 0100 	mov.w	r1, #0
 8005766:	0159      	lsls	r1, r3, #5
 8005768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800576c:	0150      	lsls	r0, r2, #5
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4621      	mov	r1, r4
 8005774:	1a51      	subs	r1, r2, r1
 8005776:	62b9      	str	r1, [r7, #40]	; 0x28
 8005778:	4629      	mov	r1, r5
 800577a:	eb63 0301 	sbc.w	r3, r3, r1
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800578c:	4649      	mov	r1, r9
 800578e:	018b      	lsls	r3, r1, #6
 8005790:	4641      	mov	r1, r8
 8005792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005796:	4641      	mov	r1, r8
 8005798:	018a      	lsls	r2, r1, #6
 800579a:	4641      	mov	r1, r8
 800579c:	ebb2 0a01 	subs.w	sl, r2, r1
 80057a0:	4649      	mov	r1, r9
 80057a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ba:	4692      	mov	sl, r2
 80057bc:	469b      	mov	fp, r3
 80057be:	4623      	mov	r3, r4
 80057c0:	eb1a 0303 	adds.w	r3, sl, r3
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	462b      	mov	r3, r5
 80057c8:	eb4b 0303 	adc.w	r3, fp, r3
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80057da:	4629      	mov	r1, r5
 80057dc:	028b      	lsls	r3, r1, #10
 80057de:	4621      	mov	r1, r4
 80057e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057e4:	4621      	mov	r1, r4
 80057e6:	028a      	lsls	r2, r1, #10
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057f0:	2200      	movs	r2, #0
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
 80057f4:	677a      	str	r2, [r7, #116]	; 0x74
 80057f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80057fa:	f7fb f9e9 	bl	8000bd0 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4613      	mov	r3, r2
 8005804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005808:	4b41      	ldr	r3, [pc, #260]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800581a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800581e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800582a:	e0e9      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800582c:	4b38      	ldr	r3, [pc, #224]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005838:	4b35      	ldr	r3, [pc, #212]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d069      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005844:	4b32      	ldr	r3, [pc, #200]	; (8005910 <HAL_RCC_GetSysClockFreq+0x354>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	099b      	lsrs	r3, r3, #6
 800584a:	2200      	movs	r2, #0
 800584c:	66bb      	str	r3, [r7, #104]	; 0x68
 800584e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005856:	663b      	str	r3, [r7, #96]	; 0x60
 8005858:	2300      	movs	r3, #0
 800585a:	667b      	str	r3, [r7, #100]	; 0x64
 800585c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005860:	4622      	mov	r2, r4
 8005862:	462b      	mov	r3, r5
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	0159      	lsls	r1, r3, #5
 800586e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005872:	0150      	lsls	r0, r2, #5
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4621      	mov	r1, r4
 800587a:	1a51      	subs	r1, r2, r1
 800587c:	61b9      	str	r1, [r7, #24]
 800587e:	4629      	mov	r1, r5
 8005880:	eb63 0301 	sbc.w	r3, r3, r1
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005892:	4659      	mov	r1, fp
 8005894:	018b      	lsls	r3, r1, #6
 8005896:	4651      	mov	r1, sl
 8005898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800589c:	4651      	mov	r1, sl
 800589e:	018a      	lsls	r2, r1, #6
 80058a0:	4651      	mov	r1, sl
 80058a2:	ebb2 0801 	subs.w	r8, r2, r1
 80058a6:	4659      	mov	r1, fp
 80058a8:	eb63 0901 	sbc.w	r9, r3, r1
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058c0:	4690      	mov	r8, r2
 80058c2:	4699      	mov	r9, r3
 80058c4:	4623      	mov	r3, r4
 80058c6:	eb18 0303 	adds.w	r3, r8, r3
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb49 0303 	adc.w	r3, r9, r3
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80058e0:	4629      	mov	r1, r5
 80058e2:	028b      	lsls	r3, r1, #10
 80058e4:	4621      	mov	r1, r4
 80058e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058ea:	4621      	mov	r1, r4
 80058ec:	028a      	lsls	r2, r1, #10
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058f6:	2200      	movs	r2, #0
 80058f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005900:	f7fb f966 	bl	8000bd0 <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4613      	mov	r3, r2
 800590a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800590e:	e063      	b.n	80059d8 <HAL_RCC_GetSysClockFreq+0x41c>
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005918:	4b3d      	ldr	r3, [pc, #244]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x454>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	099b      	lsrs	r3, r3, #6
 800591e:	2200      	movs	r2, #0
 8005920:	4618      	mov	r0, r3
 8005922:	4611      	mov	r1, r2
 8005924:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005928:	653b      	str	r3, [r7, #80]	; 0x50
 800592a:	2300      	movs	r3, #0
 800592c:	657b      	str	r3, [r7, #84]	; 0x54
 800592e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005932:	4642      	mov	r2, r8
 8005934:	464b      	mov	r3, r9
 8005936:	f04f 0000 	mov.w	r0, #0
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	0159      	lsls	r1, r3, #5
 8005940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005944:	0150      	lsls	r0, r2, #5
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4641      	mov	r1, r8
 800594c:	1a51      	subs	r1, r2, r1
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	4649      	mov	r1, r9
 8005952:	eb63 0301 	sbc.w	r3, r3, r1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005964:	4659      	mov	r1, fp
 8005966:	018b      	lsls	r3, r1, #6
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800596e:	4651      	mov	r1, sl
 8005970:	018a      	lsls	r2, r1, #6
 8005972:	4651      	mov	r1, sl
 8005974:	1a54      	subs	r4, r2, r1
 8005976:	4659      	mov	r1, fp
 8005978:	eb63 0501 	sbc.w	r5, r3, r1
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	00eb      	lsls	r3, r5, #3
 8005986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800598a:	00e2      	lsls	r2, r4, #3
 800598c:	4614      	mov	r4, r2
 800598e:	461d      	mov	r5, r3
 8005990:	4643      	mov	r3, r8
 8005992:	18e3      	adds	r3, r4, r3
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	464b      	mov	r3, r9
 8005998:	eb45 0303 	adc.w	r3, r5, r3
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059aa:	4629      	mov	r1, r5
 80059ac:	028b      	lsls	r3, r1, #10
 80059ae:	4621      	mov	r1, r4
 80059b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059b4:	4621      	mov	r1, r4
 80059b6:	028a      	lsls	r2, r1, #10
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
 80059bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059c0:	2200      	movs	r2, #0
 80059c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80059c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059ca:	f7fb f901 	bl	8000bd0 <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4613      	mov	r3, r2
 80059d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x454>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	0f1b      	lsrs	r3, r3, #28
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80059e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059f6:	e003      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80059fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	37b8      	adds	r7, #184	; 0xb8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400

08005a18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e28d      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8083 	beq.w	8005b3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a38:	4b94      	ldr	r3, [pc, #592]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d019      	beq.n	8005a78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a44:	4b91      	ldr	r3, [pc, #580]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d106      	bne.n	8005a5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a50:	4b8e      	ldr	r3, [pc, #568]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5c:	d00c      	beq.n	8005a78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5e:	4b8b      	ldr	r3, [pc, #556]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d112      	bne.n	8005a90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a6a:	4b88      	ldr	r3, [pc, #544]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a76:	d10b      	bne.n	8005a90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a78:	4b84      	ldr	r3, [pc, #528]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05b      	beq.n	8005b3c <HAL_RCC_OscConfig+0x124>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d157      	bne.n	8005b3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e25a      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x90>
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7b      	ldr	r2, [pc, #492]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e01d      	b.n	8005ae4 <HAL_RCC_OscConfig+0xcc>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0xb4>
 8005ab2:	4b76      	ldr	r3, [pc, #472]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a75      	ldr	r2, [pc, #468]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b73      	ldr	r3, [pc, #460]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a72      	ldr	r2, [pc, #456]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e00b      	b.n	8005ae4 <HAL_RCC_OscConfig+0xcc>
 8005acc:	4b6f      	ldr	r3, [pc, #444]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6e      	ldr	r2, [pc, #440]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b6c      	ldr	r3, [pc, #432]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a6b      	ldr	r2, [pc, #428]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d013      	beq.n	8005b14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fd fd10 	bl	8003510 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005af4:	f7fd fd0c 	bl	8003510 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e21f      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	4b61      	ldr	r3, [pc, #388]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0xdc>
 8005b12:	e014      	b.n	8005b3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fd fcfc 	bl	8003510 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b1c:	f7fd fcf8 	bl	8003510 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e20b      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	4b57      	ldr	r3, [pc, #348]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x104>
 8005b3a:	e000      	b.n	8005b3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d06f      	beq.n	8005c2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b4a:	4b50      	ldr	r3, [pc, #320]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d017      	beq.n	8005b86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b56:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d105      	bne.n	8005b6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b62:	4b4a      	ldr	r3, [pc, #296]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b76:	2b0c      	cmp	r3, #12
 8005b78:	d11c      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b7a:	4b44      	ldr	r3, [pc, #272]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d116      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b86:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_RCC_OscConfig+0x186>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e1d3      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4937      	ldr	r1, [pc, #220]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb2:	e03a      	b.n	8005c2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d020      	beq.n	8005bfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bbc:	4b34      	ldr	r3, [pc, #208]	; (8005c90 <HAL_RCC_OscConfig+0x278>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc2:	f7fd fca5 	bl	8003510 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bca:	f7fd fca1 	bl	8003510 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e1b4      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be8:	4b28      	ldr	r3, [pc, #160]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	4925      	ldr	r1, [pc, #148]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	e015      	b.n	8005c2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfe:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <HAL_RCC_OscConfig+0x278>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c04:	f7fd fc84 	bl	8003510 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c0c:	f7fd fc80 	bl	8003510 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e193      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d036      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <HAL_RCC_OscConfig+0x27c>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fd fc64 	bl	8003510 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fc60 	bl	8003510 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e173      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5e:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_OscConfig+0x274>)
 8005c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0f0      	beq.n	8005c4c <HAL_RCC_OscConfig+0x234>
 8005c6a:	e01b      	b.n	8005ca4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <HAL_RCC_OscConfig+0x27c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c72:	f7fd fc4d 	bl	8003510 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	e00e      	b.n	8005c98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c7a:	f7fd fc49 	bl	8003510 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d907      	bls.n	8005c98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e15c      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	42470000 	.word	0x42470000
 8005c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c98:	4b8a      	ldr	r3, [pc, #552]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ea      	bne.n	8005c7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8097 	beq.w	8005de0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cb6:	4b83      	ldr	r3, [pc, #524]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10f      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	4b7f      	ldr	r3, [pc, #508]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	4a7e      	ldr	r2, [pc, #504]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd2:	4b7c      	ldr	r3, [pc, #496]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce2:	4b79      	ldr	r3, [pc, #484]	; (8005ec8 <HAL_RCC_OscConfig+0x4b0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d118      	bne.n	8005d20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cee:	4b76      	ldr	r3, [pc, #472]	; (8005ec8 <HAL_RCC_OscConfig+0x4b0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a75      	ldr	r2, [pc, #468]	; (8005ec8 <HAL_RCC_OscConfig+0x4b0>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfa:	f7fd fc09 	bl	8003510 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d02:	f7fd fc05 	bl	8003510 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e118      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d14:	4b6c      	ldr	r3, [pc, #432]	; (8005ec8 <HAL_RCC_OscConfig+0x4b0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0f0      	beq.n	8005d02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x31e>
 8005d28:	4b66      	ldr	r3, [pc, #408]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	4a65      	ldr	r2, [pc, #404]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	6713      	str	r3, [r2, #112]	; 0x70
 8005d34:	e01c      	b.n	8005d70 <HAL_RCC_OscConfig+0x358>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x340>
 8005d3e:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	4a60      	ldr	r2, [pc, #384]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4a:	4b5e      	ldr	r3, [pc, #376]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	4a5d      	ldr	r2, [pc, #372]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6713      	str	r3, [r2, #112]	; 0x70
 8005d56:	e00b      	b.n	8005d70 <HAL_RCC_OscConfig+0x358>
 8005d58:	4b5a      	ldr	r3, [pc, #360]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	4a59      	ldr	r2, [pc, #356]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	6713      	str	r3, [r2, #112]	; 0x70
 8005d64:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d68:	4a56      	ldr	r2, [pc, #344]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d6a:	f023 0304 	bic.w	r3, r3, #4
 8005d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d015      	beq.n	8005da4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d78:	f7fd fbca 	bl	8003510 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d80:	f7fd fbc6 	bl	8003510 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0d7      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d96:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ee      	beq.n	8005d80 <HAL_RCC_OscConfig+0x368>
 8005da2:	e014      	b.n	8005dce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fd fbb4 	bl	8003510 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dac:	f7fd fbb0 	bl	8003510 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e0c1      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc2:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1ee      	bne.n	8005dac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	4a3a      	ldr	r2, [pc, #232]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80ad 	beq.w	8005f44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d060      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d145      	bne.n	8005e8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b33      	ldr	r3, [pc, #204]	; (8005ecc <HAL_RCC_OscConfig+0x4b4>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fd fb84 	bl	8003510 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0c:	f7fd fb80 	bl	8003510 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e093      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1e:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	019b      	lsls	r3, r3, #6
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	3b01      	subs	r3, #1
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	061b      	lsls	r3, r3, #24
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	071b      	lsls	r3, r3, #28
 8005e56:	491b      	ldr	r1, [pc, #108]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x4b4>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fd fb55 	bl	8003510 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fd fb51 	bl	8003510 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e064      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7c:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x452>
 8005e88:	e05c      	b.n	8005f44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCC_OscConfig+0x4b4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fd fb3e 	bl	8003510 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fd fb3a 	bl	8003510 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e04d      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_RCC_OscConfig+0x4ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x480>
 8005eb6:	e045      	b.n	8005f44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e040      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <HAL_RCC_OscConfig+0x538>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d030      	beq.n	8005f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d129      	bne.n	8005f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d122      	bne.n	8005f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f00:	4013      	ands	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d119      	bne.n	8005f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d10f      	bne.n	8005f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40023800 	.word	0x40023800

08005f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e041      	b.n	8005fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fc fe0a 	bl	8002b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f000 fcbc 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e041      	b.n	8006088 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f839 	bl	8006090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f000 fc6d 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e022      	b.n	8006116 <HAL_TIM_PWM_Start_DMA+0x72>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d109      	bne.n	80060ea <HAL_TIM_PWM_Start_DMA+0x46>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	bf0c      	ite	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	2300      	movne	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	e015      	b.n	8006116 <HAL_TIM_PWM_Start_DMA+0x72>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d109      	bne.n	8006104 <HAL_TIM_PWM_Start_DMA+0x60>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	bf0c      	ite	eq
 80060fc:	2301      	moveq	r3, #1
 80060fe:	2300      	movne	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	e008      	b.n	8006116 <HAL_TIM_PWM_Start_DMA+0x72>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
 800611c:	e171      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <HAL_TIM_PWM_Start_DMA+0x94>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	bf0c      	ite	eq
 8006130:	2301      	moveq	r3, #1
 8006132:	2300      	movne	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	e022      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0xda>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b04      	cmp	r3, #4
 800613c:	d109      	bne.n	8006152 <HAL_TIM_PWM_Start_DMA+0xae>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e015      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0xda>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b08      	cmp	r3, #8
 8006156:	d109      	bne.n	800616c <HAL_TIM_PWM_Start_DMA+0xc8>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e008      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0xda>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	bf0c      	ite	eq
 8006178:	2301      	moveq	r3, #1
 800617a:	2300      	movne	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d024      	beq.n	80061cc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <HAL_TIM_PWM_Start_DMA+0xee>
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e137      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a0:	e016      	b.n	80061d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	e00e      	b.n	80061d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c0:	e006      	b.n	80061d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ca:	e001      	b.n	80061d0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e118      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	f200 80ae 	bhi.w	8006334 <HAL_TIM_PWM_Start_DMA+0x290>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	08006215 	.word	0x08006215
 80061e4:	08006335 	.word	0x08006335
 80061e8:	08006335 	.word	0x08006335
 80061ec:	08006335 	.word	0x08006335
 80061f0:	0800625d 	.word	0x0800625d
 80061f4:	08006335 	.word	0x08006335
 80061f8:	08006335 	.word	0x08006335
 80061fc:	08006335 	.word	0x08006335
 8006200:	080062a5 	.word	0x080062a5
 8006204:	08006335 	.word	0x08006335
 8006208:	08006335 	.word	0x08006335
 800620c:	08006335 	.word	0x08006335
 8006210:	080062ed 	.word	0x080062ed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	4a7c      	ldr	r2, [pc, #496]	; (800640c <HAL_TIM_PWM_Start_DMA+0x368>)
 800621a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	4a7b      	ldr	r2, [pc, #492]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	4a7a      	ldr	r2, [pc, #488]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x370>)
 800622a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3334      	adds	r3, #52	; 0x34
 8006238:	461a      	mov	r2, r3
 800623a:	887b      	ldrh	r3, [r7, #2]
 800623c:	f7fd fb58 	bl	80038f0 <HAL_DMA_Start_IT>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e0db      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006258:	60da      	str	r2, [r3, #12]
      break;
 800625a:	e06e      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	4a6a      	ldr	r2, [pc, #424]	; (800640c <HAL_TIM_PWM_Start_DMA+0x368>)
 8006262:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	4a69      	ldr	r2, [pc, #420]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	4a68      	ldr	r2, [pc, #416]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006272:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3338      	adds	r3, #56	; 0x38
 8006280:	461a      	mov	r2, r3
 8006282:	887b      	ldrh	r3, [r7, #2]
 8006284:	f7fd fb34 	bl	80038f0 <HAL_DMA_Start_IT>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0b7      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062a0:	60da      	str	r2, [r3, #12]
      break;
 80062a2:	e04a      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	4a58      	ldr	r2, [pc, #352]	; (800640c <HAL_TIM_PWM_Start_DMA+0x368>)
 80062aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	4a57      	ldr	r2, [pc, #348]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	4a56      	ldr	r2, [pc, #344]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x370>)
 80062ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	333c      	adds	r3, #60	; 0x3c
 80062c8:	461a      	mov	r2, r3
 80062ca:	887b      	ldrh	r3, [r7, #2]
 80062cc:	f7fd fb10 	bl	80038f0 <HAL_DMA_Start_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e093      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e8:	60da      	str	r2, [r3, #12]
      break;
 80062ea:	e026      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	4a46      	ldr	r2, [pc, #280]	; (800640c <HAL_TIM_PWM_Start_DMA+0x368>)
 80062f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	4a45      	ldr	r2, [pc, #276]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	4a44      	ldr	r2, [pc, #272]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3340      	adds	r3, #64	; 0x40
 8006310:	461a      	mov	r2, r3
 8006312:	887b      	ldrh	r3, [r7, #2]
 8006314:	f7fd faec 	bl	80038f0 <HAL_DMA_Start_IT>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e06f      	b.n	8006402 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006330:	60da      	str	r2, [r3, #12]
      break;
 8006332:	e002      	b.n	800633a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
      break;
 8006338:	bf00      	nop
  }

  if (status == HAL_OK)
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d15f      	bne.n	8006400 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2201      	movs	r2, #1
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fdcb 	bl	8006ee4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a31      	ldr	r2, [pc, #196]	; (8006418 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_TIM_PWM_Start_DMA+0x2be>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <HAL_TIM_PWM_Start_DMA+0x378>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d101      	bne.n	8006366 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a25      	ldr	r2, [pc, #148]	; (8006418 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d01d      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a22      	ldr	r2, [pc, #136]	; (8006420 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a21      	ldr	r2, [pc, #132]	; (8006424 <HAL_TIM_PWM_Start_DMA+0x380>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_TIM_PWM_Start_DMA+0x384>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1a      	ldr	r2, [pc, #104]	; (800641c <HAL_TIM_PWM_Start_DMA+0x378>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1b      	ldr	r2, [pc, #108]	; (800642c <HAL_TIM_PWM_Start_DMA+0x388>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_PWM_Start_DMA+0x328>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1a      	ldr	r2, [pc, #104]	; (8006430 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d111      	bne.n	80063f0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d010      	beq.n	8006400 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	e007      	b.n	8006400 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	08006801 	.word	0x08006801
 8006410:	080068a9 	.word	0x080068a9
 8006414:	0800676f 	.word	0x0800676f
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40014000 	.word	0x40014000
 8006430:	40001800 	.word	0x40001800

08006434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800644e:	2302      	movs	r3, #2
 8006450:	e0ae      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	f200 809f 	bhi.w	80065a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	0800649d 	.word	0x0800649d
 800646c:	080065a1 	.word	0x080065a1
 8006470:	080065a1 	.word	0x080065a1
 8006474:	080065a1 	.word	0x080065a1
 8006478:	080064dd 	.word	0x080064dd
 800647c:	080065a1 	.word	0x080065a1
 8006480:	080065a1 	.word	0x080065a1
 8006484:	080065a1 	.word	0x080065a1
 8006488:	0800651f 	.word	0x0800651f
 800648c:	080065a1 	.word	0x080065a1
 8006490:	080065a1 	.word	0x080065a1
 8006494:	080065a1 	.word	0x080065a1
 8006498:	0800655f 	.word	0x0800655f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fad4 	bl	8006a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0208 	orr.w	r2, r2, #8
 80064b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0204 	bic.w	r2, r2, #4
 80064c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6999      	ldr	r1, [r3, #24]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	619a      	str	r2, [r3, #24]
      break;
 80064da:	e064      	b.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fb24 	bl	8006b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	021a      	lsls	r2, r3, #8
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	619a      	str	r2, [r3, #24]
      break;
 800651c:	e043      	b.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fb79 	bl	8006c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0208 	orr.w	r2, r2, #8
 8006538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69da      	ldr	r2, [r3, #28]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0204 	bic.w	r2, r2, #4
 8006548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69d9      	ldr	r1, [r3, #28]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	61da      	str	r2, [r3, #28]
      break;
 800655c:	e023      	b.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fbcd 	bl	8006d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	021a      	lsls	r2, r3, #8
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	61da      	str	r2, [r3, #28]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75fb      	strb	r3, [r7, #23]
      break;
 80065a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIM_ConfigClockSource+0x1c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e0b4      	b.n	800673e <HAL_TIM_ConfigClockSource+0x186>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660c:	d03e      	beq.n	800668c <HAL_TIM_ConfigClockSource+0xd4>
 800660e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006612:	f200 8087 	bhi.w	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	f000 8086 	beq.w	800672a <HAL_TIM_ConfigClockSource+0x172>
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006622:	d87f      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 8006624:	2b70      	cmp	r3, #112	; 0x70
 8006626:	d01a      	beq.n	800665e <HAL_TIM_ConfigClockSource+0xa6>
 8006628:	2b70      	cmp	r3, #112	; 0x70
 800662a:	d87b      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 800662c:	2b60      	cmp	r3, #96	; 0x60
 800662e:	d050      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006630:	2b60      	cmp	r3, #96	; 0x60
 8006632:	d877      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 8006634:	2b50      	cmp	r3, #80	; 0x50
 8006636:	d03c      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006638:	2b50      	cmp	r3, #80	; 0x50
 800663a:	d873      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d058      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d86f      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d064      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x15a>
 8006648:	2b30      	cmp	r3, #48	; 0x30
 800664a:	d86b      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d060      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x15a>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d867      	bhi.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d05c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x15a>
 8006658:	2b10      	cmp	r3, #16
 800665a:	d05a      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x15a>
 800665c:	e062      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6899      	ldr	r1, [r3, #8]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f000 fc19 	bl	8006ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	609a      	str	r2, [r3, #8]
      break;
 800668a:	e04f      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6899      	ldr	r1, [r3, #8]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f000 fc02 	bl	8006ea4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ae:	609a      	str	r2, [r3, #8]
      break;
 80066b0:	e03c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	f000 fb76 	bl	8006db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2150      	movs	r1, #80	; 0x50
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fbcf 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80066d0:	e02c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	461a      	mov	r2, r3
 80066e0:	f000 fb95 	bl	8006e0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2160      	movs	r1, #96	; 0x60
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fbbf 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 80066f0:	e01c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	461a      	mov	r2, r3
 8006700:	f000 fb56 	bl	8006db0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2140      	movs	r1, #64	; 0x40
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fbaf 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006710:	e00c      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f000 fba6 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006722:	e003      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e000      	b.n	800672c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800672a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d107      	bne.n	8006796 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006794:	e02a      	b.n	80067ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d107      	bne.n	80067b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2202      	movs	r2, #2
 80067a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ae:	e01d      	b.n	80067ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d107      	bne.n	80067ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2204      	movs	r2, #4
 80067be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c8:	e010      	b.n	80067ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d107      	bne.n	80067e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2208      	movs	r2, #8
 80067d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067e2:	e003      	b.n	80067ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff ffb4 	bl	800675a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d10b      	bne.n	8006830 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d136      	bne.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800682e:	e031      	b.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d10b      	bne.n	8006852 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2202      	movs	r2, #2
 800683e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d125      	bne.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006850:	e020      	b.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d10b      	bne.n	8006874 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2204      	movs	r2, #4
 8006860:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d114      	bne.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006872:	e00f      	b.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	429a      	cmp	r2, r3
 800687c:	d10a      	bne.n	8006894 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2208      	movs	r2, #8
 8006882:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7fb f87d 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
}
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d103      	bne.n	80068c8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	771a      	strb	r2, [r3, #28]
 80068c6:	e019      	b.n	80068fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d103      	bne.n	80068da <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2202      	movs	r2, #2
 80068d6:	771a      	strb	r2, [r3, #28]
 80068d8:	e010      	b.n	80068fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d103      	bne.n	80068ec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2204      	movs	r2, #4
 80068e8:	771a      	strb	r2, [r3, #28]
 80068ea:	e007      	b.n	80068fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d102      	bne.n	80068fc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2208      	movs	r2, #8
 80068fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ff22 	bl	8006746 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a40      	ldr	r2, [pc, #256]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d00f      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a3d      	ldr	r2, [pc, #244]	; (8006a28 <TIM_Base_SetConfig+0x118>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00b      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a3c      	ldr	r2, [pc, #240]	; (8006a2c <TIM_Base_SetConfig+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d007      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a3b      	ldr	r2, [pc, #236]	; (8006a30 <TIM_Base_SetConfig+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a3a      	ldr	r2, [pc, #232]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d108      	bne.n	8006962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d02b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d027      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <TIM_Base_SetConfig+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d023      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <TIM_Base_SetConfig+0x11c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01f      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <TIM_Base_SetConfig+0x120>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d017      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a28      	ldr	r2, [pc, #160]	; (8006a38 <TIM_Base_SetConfig+0x128>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <TIM_Base_SetConfig+0x12c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00f      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a26      	ldr	r2, [pc, #152]	; (8006a40 <TIM_Base_SetConfig+0x130>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00b      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a25      	ldr	r2, [pc, #148]	; (8006a44 <TIM_Base_SetConfig+0x134>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d007      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <TIM_Base_SetConfig+0x138>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a23      	ldr	r2, [pc, #140]	; (8006a4c <TIM_Base_SetConfig+0x13c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <TIM_Base_SetConfig+0x114>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_Base_SetConfig+0xf8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0c      	ldr	r2, [pc, #48]	; (8006a34 <TIM_Base_SetConfig+0x124>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d103      	bne.n	8006a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	615a      	str	r2, [r3, #20]
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40010000 	.word	0x40010000
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40000c00 	.word	0x40000c00
 8006a34:	40010400 	.word	0x40010400
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800
 8006a44:	40001800 	.word	0x40001800
 8006a48:	40001c00 	.word	0x40001c00
 8006a4c:	40002000 	.word	0x40002000

08006a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f023 0302 	bic.w	r3, r3, #2
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <TIM_OC1_SetConfig+0xd8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x64>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <TIM_OC1_SetConfig+0xdc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10c      	bne.n	8006ace <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0308 	bic.w	r3, r3, #8
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <TIM_OC1_SetConfig+0xd8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d003      	beq.n	8006ade <TIM_OC1_SetConfig+0x8e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a14      	ldr	r2, [pc, #80]	; (8006b2c <TIM_OC1_SetConfig+0xdc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d111      	bne.n	8006b02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	621a      	str	r2, [r3, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40010400 	.word	0x40010400

08006b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0210 	bic.w	r2, r3, #16
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0320 	bic.w	r3, r3, #32
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <TIM_OC2_SetConfig+0xe4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d003      	beq.n	8006b98 <TIM_OC2_SetConfig+0x68>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <TIM_OC2_SetConfig+0xe8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10d      	bne.n	8006bb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a17      	ldr	r2, [pc, #92]	; (8006c14 <TIM_OC2_SetConfig+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC2_SetConfig+0x94>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <TIM_OC2_SetConfig+0xe8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d113      	bne.n	8006bec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400

08006c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a21      	ldr	r2, [pc, #132]	; (8006cfc <TIM_OC3_SetConfig+0xe0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_OC3_SetConfig+0x66>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <TIM_OC3_SetConfig+0xe4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d10d      	bne.n	8006c9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <TIM_OC3_SetConfig+0xe0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_OC3_SetConfig+0x92>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <TIM_OC3_SetConfig+0xe4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d113      	bne.n	8006cd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40010400 	.word	0x40010400

08006d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	031b      	lsls	r3, r3, #12
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a12      	ldr	r2, [pc, #72]	; (8006da8 <TIM_OC4_SetConfig+0xa4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC4_SetConfig+0x68>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a11      	ldr	r2, [pc, #68]	; (8006dac <TIM_OC4_SetConfig+0xa8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d109      	bne.n	8006d80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	019b      	lsls	r3, r3, #6
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40010400 	.word	0x40010400

08006db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f023 030a 	bic.w	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b087      	sub	sp, #28
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0210 	bic.w	r2, r3, #16
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	621a      	str	r2, [r3, #32]
}
 8006e62:	bf00      	nop
 8006e64:	371c      	adds	r7, #28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e05a      	b.n	8006ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a21      	ldr	r2, [pc, #132]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f94:	d01d      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1a      	ldr	r2, [pc, #104]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a15      	ldr	r2, [pc, #84]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d10c      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010000 	.word	0x40010000
 8007010:	40000400 	.word	0x40000400
 8007014:	40000800 	.word	0x40000800
 8007018:	40000c00 	.word	0x40000c00
 800701c:	40010400 	.word	0x40010400
 8007020:	40014000 	.word	0x40014000
 8007024:	40001800 	.word	0x40001800

08007028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e03f      	b.n	80070ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fb fe36 	bl	8002cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2224      	movs	r2, #36	; 0x24
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800706a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fba5 	bl	80077bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b08a      	sub	sp, #40	; 0x28
 80070c6:	af02      	add	r7, sp, #8
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	4613      	mov	r3, r2
 80070d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d17c      	bne.n	80071dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_UART_Transmit+0x2c>
 80070e8:	88fb      	ldrh	r3, [r7, #6]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e075      	b.n	80071de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_UART_Transmit+0x3e>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e06e      	b.n	80071de <HAL_UART_Transmit+0x11c>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2221      	movs	r2, #33	; 0x21
 8007112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007116:	f7fc f9fb 	bl	8003510 <HAL_GetTick>
 800711a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	88fa      	ldrh	r2, [r7, #6]
 8007126:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007130:	d108      	bne.n	8007144 <HAL_UART_Transmit+0x82>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	e003      	b.n	800714c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007154:	e02a      	b.n	80071ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2200      	movs	r2, #0
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f992 	bl	800748a <UART_WaitOnFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e036      	b.n	80071de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10b      	bne.n	800718e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	3302      	adds	r3, #2
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	e007      	b.n	800719e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	3301      	adds	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1cf      	bne.n	8007156 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	2140      	movs	r1, #64	; 0x40
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f962 	bl	800748a <UART_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e006      	b.n	80071de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e000      	b.n	80071de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071dc:	2302      	movs	r3, #2
  }
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3720      	adds	r7, #32
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	4613      	mov	r3, r2
 80071f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d11d      	bne.n	800723c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_UART_Receive_DMA+0x26>
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e016      	b.n	800723e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_UART_Receive_DMA+0x38>
 800721a:	2302      	movs	r3, #2
 800721c:	e00f      	b.n	800723e <HAL_UART_Receive_DMA+0x58>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	461a      	mov	r2, r3
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 f998 	bl	8007568 <UART_Start_Receive_DMA>
 8007238:	4603      	mov	r3, r0
 800723a:	e000      	b.n	800723e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b09c      	sub	sp, #112	; 0x70
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d172      	bne.n	800739c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80072b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b8:	2200      	movs	r2, #0
 80072ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80072de:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e5      	bne.n	80072bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3314      	adds	r3, #20
 80072f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007302:	f023 0301 	bic.w	r3, r3, #1
 8007306:	667b      	str	r3, [r7, #100]	; 0x64
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007310:	647a      	str	r2, [r7, #68]	; 0x44
 8007312:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e5      	bne.n	80072f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	623b      	str	r3, [r7, #32]
   return(result);
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733a:	663b      	str	r3, [r7, #96]	; 0x60
 800733c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3314      	adds	r3, #20
 8007342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007344:	633a      	str	r2, [r7, #48]	; 0x30
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800734a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e5      	bne.n	8007324 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	2b01      	cmp	r3, #1
 8007366:	d119      	bne.n	800739c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	60fb      	str	r3, [r7, #12]
   return(result);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0310 	bic.w	r3, r3, #16
 800737e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	330c      	adds	r3, #12
 8007386:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007388:	61fa      	str	r2, [r7, #28]
 800738a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	617b      	str	r3, [r7, #20]
   return(result);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e5      	bne.n	8007368 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d106      	bne.n	80073b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073a8:	4619      	mov	r1, r3
 80073aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073ac:	f7ff ff69 	bl	8007282 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073b0:	e002      	b.n	80073b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80073b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80073b4:	f7ff ff47 	bl	8007246 <HAL_UART_RxCpltCallback>
}
 80073b8:	bf00      	nop
 80073ba:	3770      	adds	r7, #112	; 0x70
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d108      	bne.n	80073e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4619      	mov	r1, r3
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff ff4e 	bl	8007282 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073e6:	e002      	b.n	80073ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff ff36 	bl	800725a <HAL_UART_RxHalfCpltCallback>
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	bf0c      	ite	eq
 8007416:	2301      	moveq	r3, #1
 8007418:	2300      	movne	r3, #0
 800741a:	b2db      	uxtb	r3, r3
 800741c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b21      	cmp	r3, #33	; 0x21
 8007428:	d108      	bne.n	800743c <UART_DMAError+0x46>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007436:	68b8      	ldr	r0, [r7, #8]
 8007438:	f000 f934 	bl	80076a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	bf0c      	ite	eq
 800744a:	2301      	moveq	r3, #1
 800744c:	2300      	movne	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b22      	cmp	r3, #34	; 0x22
 800745c:	d108      	bne.n	8007470 <UART_DMAError+0x7a>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800746a:	68b8      	ldr	r0, [r7, #8]
 800746c:	f000 f942 	bl	80076f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	f043 0210 	orr.w	r2, r3, #16
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800747c:	68b8      	ldr	r0, [r7, #8]
 800747e:	f7ff fef6 	bl	800726e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b090      	sub	sp, #64	; 0x40
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	4613      	mov	r3, r2
 8007498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749a:	e050      	b.n	800753e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d04c      	beq.n	800753e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <UART_WaitOnFlagUntilTimeout+0x30>
 80074aa:	f7fc f831 	bl	8003510 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d241      	bcs.n	800753e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	330c      	adds	r3, #12
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074da:	637a      	str	r2, [r7, #52]	; 0x34
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e5      	bne.n	80074ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3314      	adds	r3, #20
 80074f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	613b      	str	r3, [r7, #16]
   return(result);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	63bb      	str	r3, [r7, #56]	; 0x38
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3314      	adds	r3, #20
 800750c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800750e:	623a      	str	r2, [r7, #32]
 8007510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69f9      	ldr	r1, [r7, #28]
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	61bb      	str	r3, [r7, #24]
   return(result);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e5      	bne.n	80074ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e00f      	b.n	800755e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4013      	ands	r3, r2
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	bf0c      	ite	eq
 800754e:	2301      	moveq	r3, #1
 8007550:	2300      	movne	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	429a      	cmp	r2, r3
 800755a:	d09f      	beq.n	800749c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3740      	adds	r7, #64	; 0x40
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b098      	sub	sp, #96	; 0x60
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2222      	movs	r2, #34	; 0x22
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	4a40      	ldr	r2, [pc, #256]	; (8007698 <UART_Start_Receive_DMA+0x130>)
 8007596:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	4a3f      	ldr	r2, [pc, #252]	; (800769c <UART_Start_Receive_DMA+0x134>)
 800759e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	4a3e      	ldr	r2, [pc, #248]	; (80076a0 <UART_Start_Receive_DMA+0x138>)
 80075a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	2200      	movs	r2, #0
 80075ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80075b0:	f107 0308 	add.w	r3, r7, #8
 80075b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	f7fc f992 	bl	80038f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d019      	beq.n	8007626 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007608:	65bb      	str	r3, [r7, #88]	; 0x58
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007612:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007614:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	657b      	str	r3, [r7, #84]	; 0x54
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007646:	63ba      	str	r2, [r7, #56]	; 0x38
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800764c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e5      	bne.n	8007626 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3314      	adds	r3, #20
 8007660:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	617b      	str	r3, [r7, #20]
   return(result);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007670:	653b      	str	r3, [r7, #80]	; 0x50
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3314      	adds	r3, #20
 8007678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800767a:	627a      	str	r2, [r7, #36]	; 0x24
 800767c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6a39      	ldr	r1, [r7, #32]
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	61fb      	str	r3, [r7, #28]
   return(result);
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3760      	adds	r7, #96	; 0x60
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	0800729b 	.word	0x0800729b
 800769c:	080073c1 	.word	0x080073c1
 80076a0:	080073f7 	.word	0x080073f7

080076a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b089      	sub	sp, #36	; 0x24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	330c      	adds	r3, #12
 80076b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	330c      	adds	r3, #12
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	61ba      	str	r2, [r7, #24]
 80076ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6979      	ldr	r1, [r7, #20]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	613b      	str	r3, [r7, #16]
   return(result);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80076e8:	bf00      	nop
 80076ea:	3724      	adds	r7, #36	; 0x24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b095      	sub	sp, #84	; 0x54
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800771c:	643a      	str	r2, [r7, #64]	; 0x40
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e5      	bne.n	80076fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	2b01      	cmp	r3, #1
 800776a:	d119      	bne.n	80077a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60bb      	str	r3, [r7, #8]
   return(result);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f023 0310 	bic.w	r3, r3, #16
 8007782:	647b      	str	r3, [r7, #68]	; 0x44
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	330c      	adds	r3, #12
 800778a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800778c:	61ba      	str	r2, [r7, #24]
 800778e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6979      	ldr	r1, [r7, #20]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077ae:	bf00      	nop
 80077b0:	3754      	adds	r7, #84	; 0x54
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077c0:	b0c0      	sub	sp, #256	; 0x100
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d8:	68d9      	ldr	r1, [r3, #12]
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	ea40 0301 	orr.w	r3, r0, r1
 80077e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007814:	f021 010c 	bic.w	r1, r1, #12
 8007818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007822:	430b      	orrs	r3, r1
 8007824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007836:	6999      	ldr	r1, [r3, #24]
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	ea40 0301 	orr.w	r3, r0, r1
 8007842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4b8f      	ldr	r3, [pc, #572]	; (8007a88 <UART_SetConfig+0x2cc>)
 800784c:	429a      	cmp	r2, r3
 800784e:	d005      	beq.n	800785c <UART_SetConfig+0xa0>
 8007850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	4b8d      	ldr	r3, [pc, #564]	; (8007a8c <UART_SetConfig+0x2d0>)
 8007858:	429a      	cmp	r2, r3
 800785a:	d104      	bne.n	8007866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fd fe9a 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8007860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007864:	e003      	b.n	800786e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007866:	f7fd fe81 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 800786a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800786e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007878:	f040 810c 	bne.w	8007a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800787c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007880:	2200      	movs	r2, #0
 8007882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800788a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	1891      	adds	r1, r2, r2
 8007894:	65b9      	str	r1, [r7, #88]	; 0x58
 8007896:	415b      	adcs	r3, r3
 8007898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800789a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800789e:	4621      	mov	r1, r4
 80078a0:	eb12 0801 	adds.w	r8, r2, r1
 80078a4:	4629      	mov	r1, r5
 80078a6:	eb43 0901 	adc.w	r9, r3, r1
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078be:	4690      	mov	r8, r2
 80078c0:	4699      	mov	r9, r3
 80078c2:	4623      	mov	r3, r4
 80078c4:	eb18 0303 	adds.w	r3, r8, r3
 80078c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078cc:	462b      	mov	r3, r5
 80078ce:	eb49 0303 	adc.w	r3, r9, r3
 80078d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80078e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80078ea:	460b      	mov	r3, r1
 80078ec:	18db      	adds	r3, r3, r3
 80078ee:	653b      	str	r3, [r7, #80]	; 0x50
 80078f0:	4613      	mov	r3, r2
 80078f2:	eb42 0303 	adc.w	r3, r2, r3
 80078f6:	657b      	str	r3, [r7, #84]	; 0x54
 80078f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80078fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007900:	f7f9 f966 	bl	8000bd0 <__aeabi_uldivmod>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4b61      	ldr	r3, [pc, #388]	; (8007a90 <UART_SetConfig+0x2d4>)
 800790a:	fba3 2302 	umull	r2, r3, r3, r2
 800790e:	095b      	lsrs	r3, r3, #5
 8007910:	011c      	lsls	r4, r3, #4
 8007912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007916:	2200      	movs	r2, #0
 8007918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800791c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007924:	4642      	mov	r2, r8
 8007926:	464b      	mov	r3, r9
 8007928:	1891      	adds	r1, r2, r2
 800792a:	64b9      	str	r1, [r7, #72]	; 0x48
 800792c:	415b      	adcs	r3, r3
 800792e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007934:	4641      	mov	r1, r8
 8007936:	eb12 0a01 	adds.w	sl, r2, r1
 800793a:	4649      	mov	r1, r9
 800793c:	eb43 0b01 	adc.w	fp, r3, r1
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800794c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007954:	4692      	mov	sl, r2
 8007956:	469b      	mov	fp, r3
 8007958:	4643      	mov	r3, r8
 800795a:	eb1a 0303 	adds.w	r3, sl, r3
 800795e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007962:	464b      	mov	r3, r9
 8007964:	eb4b 0303 	adc.w	r3, fp, r3
 8007968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800797c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007980:	460b      	mov	r3, r1
 8007982:	18db      	adds	r3, r3, r3
 8007984:	643b      	str	r3, [r7, #64]	; 0x40
 8007986:	4613      	mov	r3, r2
 8007988:	eb42 0303 	adc.w	r3, r2, r3
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007996:	f7f9 f91b 	bl	8000bd0 <__aeabi_uldivmod>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	4b3b      	ldr	r3, [pc, #236]	; (8007a90 <UART_SetConfig+0x2d4>)
 80079a2:	fba3 2301 	umull	r2, r3, r3, r1
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	2264      	movs	r2, #100	; 0x64
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	1acb      	subs	r3, r1, r3
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80079b6:	4b36      	ldr	r3, [pc, #216]	; (8007a90 <UART_SetConfig+0x2d4>)
 80079b8:	fba3 2302 	umull	r2, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079c4:	441c      	add	r4, r3
 80079c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80079d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80079d8:	4642      	mov	r2, r8
 80079da:	464b      	mov	r3, r9
 80079dc:	1891      	adds	r1, r2, r2
 80079de:	63b9      	str	r1, [r7, #56]	; 0x38
 80079e0:	415b      	adcs	r3, r3
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80079e8:	4641      	mov	r1, r8
 80079ea:	1851      	adds	r1, r2, r1
 80079ec:	6339      	str	r1, [r7, #48]	; 0x30
 80079ee:	4649      	mov	r1, r9
 80079f0:	414b      	adcs	r3, r1
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
 80079f4:	f04f 0200 	mov.w	r2, #0
 80079f8:	f04f 0300 	mov.w	r3, #0
 80079fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007a00:	4659      	mov	r1, fp
 8007a02:	00cb      	lsls	r3, r1, #3
 8007a04:	4651      	mov	r1, sl
 8007a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a0a:	4651      	mov	r1, sl
 8007a0c:	00ca      	lsls	r2, r1, #3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4619      	mov	r1, r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	4642      	mov	r2, r8
 8007a16:	189b      	adds	r3, r3, r2
 8007a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	460a      	mov	r2, r1
 8007a20:	eb42 0303 	adc.w	r3, r2, r3
 8007a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	18db      	adds	r3, r3, r3
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a42:	4613      	mov	r3, r2
 8007a44:	eb42 0303 	adc.w	r3, r2, r3
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007a52:	f7f9 f8bd 	bl	8000bd0 <__aeabi_uldivmod>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <UART_SetConfig+0x2d4>)
 8007a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	2164      	movs	r1, #100	; 0x64
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	3332      	adds	r3, #50	; 0x32
 8007a6e:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <UART_SetConfig+0x2d4>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	095b      	lsrs	r3, r3, #5
 8007a76:	f003 0207 	and.w	r2, r3, #7
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4422      	add	r2, r4
 8007a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a84:	e105      	b.n	8007c92 <UART_SetConfig+0x4d6>
 8007a86:	bf00      	nop
 8007a88:	40011000 	.word	0x40011000
 8007a8c:	40011400 	.word	0x40011400
 8007a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	1891      	adds	r1, r2, r2
 8007aac:	6239      	str	r1, [r7, #32]
 8007aae:	415b      	adcs	r3, r3
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	1854      	adds	r4, r2, r1
 8007aba:	4649      	mov	r1, r9
 8007abc:	eb43 0501 	adc.w	r5, r3, r1
 8007ac0:	f04f 0200 	mov.w	r2, #0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	00eb      	lsls	r3, r5, #3
 8007aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ace:	00e2      	lsls	r2, r4, #3
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	461d      	mov	r5, r3
 8007ad4:	4643      	mov	r3, r8
 8007ad6:	18e3      	adds	r3, r4, r3
 8007ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007adc:	464b      	mov	r3, r9
 8007ade:	eb45 0303 	adc.w	r3, r5, r3
 8007ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b02:	4629      	mov	r1, r5
 8007b04:	008b      	lsls	r3, r1, #2
 8007b06:	4621      	mov	r1, r4
 8007b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	008a      	lsls	r2, r1, #2
 8007b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b14:	f7f9 f85c 	bl	8000bd0 <__aeabi_uldivmod>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4b60      	ldr	r3, [pc, #384]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	011c      	lsls	r4, r3, #4
 8007b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	1891      	adds	r1, r2, r2
 8007b3e:	61b9      	str	r1, [r7, #24]
 8007b40:	415b      	adcs	r3, r3
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b48:	4641      	mov	r1, r8
 8007b4a:	1851      	adds	r1, r2, r1
 8007b4c:	6139      	str	r1, [r7, #16]
 8007b4e:	4649      	mov	r1, r9
 8007b50:	414b      	adcs	r3, r1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b60:	4659      	mov	r1, fp
 8007b62:	00cb      	lsls	r3, r1, #3
 8007b64:	4651      	mov	r1, sl
 8007b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6a:	4651      	mov	r1, sl
 8007b6c:	00ca      	lsls	r2, r1, #3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	4642      	mov	r2, r8
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	460a      	mov	r2, r1
 8007b80:	eb42 0303 	adc.w	r3, r2, r3
 8007b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b94:	f04f 0200 	mov.w	r2, #0
 8007b98:	f04f 0300 	mov.w	r3, #0
 8007b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	008b      	lsls	r3, r1, #2
 8007ba4:	4641      	mov	r1, r8
 8007ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007baa:	4641      	mov	r1, r8
 8007bac:	008a      	lsls	r2, r1, #2
 8007bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007bb2:	f7f9 f80d 	bl	8000bd0 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4b39      	ldr	r3, [pc, #228]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	2164      	movs	r1, #100	; 0x64
 8007bc4:	fb01 f303 	mul.w	r3, r1, r3
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	3332      	adds	r3, #50	; 0x32
 8007bce:	4a34      	ldr	r2, [pc, #208]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	095b      	lsrs	r3, r3, #5
 8007bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bda:	441c      	add	r4, r3
 8007bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007be0:	2200      	movs	r2, #0
 8007be2:	673b      	str	r3, [r7, #112]	; 0x70
 8007be4:	677a      	str	r2, [r7, #116]	; 0x74
 8007be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007bea:	4642      	mov	r2, r8
 8007bec:	464b      	mov	r3, r9
 8007bee:	1891      	adds	r1, r2, r2
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	415b      	adcs	r3, r3
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	1851      	adds	r1, r2, r1
 8007bfe:	6039      	str	r1, [r7, #0]
 8007c00:	4649      	mov	r1, r9
 8007c02:	414b      	adcs	r3, r1
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c12:	4659      	mov	r1, fp
 8007c14:	00cb      	lsls	r3, r1, #3
 8007c16:	4651      	mov	r1, sl
 8007c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c1c:	4651      	mov	r1, sl
 8007c1e:	00ca      	lsls	r2, r1, #3
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	4603      	mov	r3, r0
 8007c26:	4642      	mov	r2, r8
 8007c28:	189b      	adds	r3, r3, r2
 8007c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	460a      	mov	r2, r1
 8007c30:	eb42 0303 	adc.w	r3, r2, r3
 8007c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c40:	667a      	str	r2, [r7, #100]	; 0x64
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007c4e:	4649      	mov	r1, r9
 8007c50:	008b      	lsls	r3, r1, #2
 8007c52:	4641      	mov	r1, r8
 8007c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c58:	4641      	mov	r1, r8
 8007c5a:	008a      	lsls	r2, r1, #2
 8007c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007c60:	f7f8 ffb6 	bl	8000bd0 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	2164      	movs	r1, #100	; 0x64
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	3332      	adds	r3, #50	; 0x32
 8007c7c:	4a08      	ldr	r2, [pc, #32]	; (8007ca0 <UART_SetConfig+0x4e4>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	f003 020f 	and.w	r2, r3, #15
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4422      	add	r2, r4
 8007c90:	609a      	str	r2, [r3, #8]
}
 8007c92:	bf00      	nop
 8007c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c9e:	bf00      	nop
 8007ca0:	51eb851f 	.word	0x51eb851f

08007ca4 <copysign>:
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	ec51 0b10 	vmov	r0, r1, d0
 8007caa:	ed8d 1b00 	vstr	d1, [sp]
 8007cae:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8007cb2:	9901      	ldr	r1, [sp, #4]
 8007cb4:	ee10 2a10 	vmov	r2, s0
 8007cb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007cbc:	ea40 0301 	orr.w	r3, r0, r1
 8007cc0:	ec43 2b10 	vmov	d0, r2, r3
 8007cc4:	b002      	add	sp, #8
 8007cc6:	4770      	bx	lr

08007cc8 <cosf>:
 8007cc8:	ee10 3a10 	vmov	r3, s0
 8007ccc:	b507      	push	{r0, r1, r2, lr}
 8007cce:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <cosf+0x80>)
 8007cd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	dc06      	bgt.n	8007ce6 <cosf+0x1e>
 8007cd8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007d4c <cosf+0x84>
 8007cdc:	b003      	add	sp, #12
 8007cde:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce2:	f000 bd65 	b.w	80087b0 <__kernel_cosf>
 8007ce6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007cea:	db04      	blt.n	8007cf6 <cosf+0x2e>
 8007cec:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007cf0:	b003      	add	sp, #12
 8007cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007cf6:	4668      	mov	r0, sp
 8007cf8:	f000 fc1e 	bl	8008538 <__ieee754_rem_pio2f>
 8007cfc:	f000 0003 	and.w	r0, r0, #3
 8007d00:	2801      	cmp	r0, #1
 8007d02:	d009      	beq.n	8007d18 <cosf+0x50>
 8007d04:	2802      	cmp	r0, #2
 8007d06:	d010      	beq.n	8007d2a <cosf+0x62>
 8007d08:	b9b0      	cbnz	r0, 8007d38 <cosf+0x70>
 8007d0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d0e:	ed9d 0a00 	vldr	s0, [sp]
 8007d12:	f000 fd4d 	bl	80087b0 <__kernel_cosf>
 8007d16:	e7eb      	b.n	8007cf0 <cosf+0x28>
 8007d18:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d1c:	ed9d 0a00 	vldr	s0, [sp]
 8007d20:	f001 f81c 	bl	8008d5c <__kernel_sinf>
 8007d24:	eeb1 0a40 	vneg.f32	s0, s0
 8007d28:	e7e2      	b.n	8007cf0 <cosf+0x28>
 8007d2a:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d2e:	ed9d 0a00 	vldr	s0, [sp]
 8007d32:	f000 fd3d 	bl	80087b0 <__kernel_cosf>
 8007d36:	e7f5      	b.n	8007d24 <cosf+0x5c>
 8007d38:	eddd 0a01 	vldr	s1, [sp, #4]
 8007d3c:	ed9d 0a00 	vldr	s0, [sp]
 8007d40:	2001      	movs	r0, #1
 8007d42:	f001 f80b 	bl	8008d5c <__kernel_sinf>
 8007d46:	e7d3      	b.n	8007cf0 <cosf+0x28>
 8007d48:	3f490fd8 	.word	0x3f490fd8
 8007d4c:	00000000 	.word	0x00000000

08007d50 <asin>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	ed2d 8b02 	vpush	{d8}
 8007d56:	ec55 4b10 	vmov	r4, r5, d0
 8007d5a:	f000 f85d 	bl	8007e18 <__ieee754_asin>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	4620      	mov	r0, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	eeb0 8a40 	vmov.f32	s16, s0
 8007d6a:	eef0 8a60 	vmov.f32	s17, s1
 8007d6e:	f7f8 fea1 	bl	8000ab4 <__aeabi_dcmpun>
 8007d72:	b9a8      	cbnz	r0, 8007da0 <asin+0x50>
 8007d74:	ec45 4b10 	vmov	d0, r4, r5
 8007d78:	f001 f9da 	bl	8009130 <fabs>
 8007d7c:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <asin+0x60>)
 8007d7e:	ec51 0b10 	vmov	r0, r1, d0
 8007d82:	2200      	movs	r2, #0
 8007d84:	f7f8 fe8c 	bl	8000aa0 <__aeabi_dcmpgt>
 8007d88:	b150      	cbz	r0, 8007da0 <asin+0x50>
 8007d8a:	f001 faa1 	bl	80092d0 <__errno>
 8007d8e:	ecbd 8b02 	vpop	{d8}
 8007d92:	2321      	movs	r3, #33	; 0x21
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d9a:	4806      	ldr	r0, [pc, #24]	; (8007db4 <asin+0x64>)
 8007d9c:	f001 b9d4 	b.w	8009148 <nan>
 8007da0:	eeb0 0a48 	vmov.f32	s0, s16
 8007da4:	eef0 0a68 	vmov.f32	s1, s17
 8007da8:	ecbd 8b02 	vpop	{d8}
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	3ff00000 	.word	0x3ff00000
 8007db4:	08009388 	.word	0x08009388

08007db8 <atan2>:
 8007db8:	f000 ba42 	b.w	8008240 <__ieee754_atan2>

08007dbc <sqrt>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	ed2d 8b02 	vpush	{d8}
 8007dc2:	ec55 4b10 	vmov	r4, r5, d0
 8007dc6:	f000 fb05 	bl	80083d4 <__ieee754_sqrt>
 8007dca:	4622      	mov	r2, r4
 8007dcc:	462b      	mov	r3, r5
 8007dce:	4620      	mov	r0, r4
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8007dd6:	eef0 8a60 	vmov.f32	s17, s1
 8007dda:	f7f8 fe6b 	bl	8000ab4 <__aeabi_dcmpun>
 8007dde:	b990      	cbnz	r0, 8007e06 <sqrt+0x4a>
 8007de0:	2200      	movs	r2, #0
 8007de2:	2300      	movs	r3, #0
 8007de4:	4620      	mov	r0, r4
 8007de6:	4629      	mov	r1, r5
 8007de8:	f7f8 fe3c 	bl	8000a64 <__aeabi_dcmplt>
 8007dec:	b158      	cbz	r0, 8007e06 <sqrt+0x4a>
 8007dee:	f001 fa6f 	bl	80092d0 <__errno>
 8007df2:	2321      	movs	r3, #33	; 0x21
 8007df4:	6003      	str	r3, [r0, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f7f8 fce9 	bl	80007d4 <__aeabi_ddiv>
 8007e02:	ec41 0b18 	vmov	d8, r0, r1
 8007e06:	eeb0 0a48 	vmov.f32	s0, s16
 8007e0a:	eef0 0a68 	vmov.f32	s1, s17
 8007e0e:	ecbd 8b02 	vpop	{d8}
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	0000      	movs	r0, r0
	...

08007e18 <__ieee754_asin>:
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1c:	ed2d 8b04 	vpush	{d8-d9}
 8007e20:	ec55 4b10 	vmov	r4, r5, d0
 8007e24:	4bcc      	ldr	r3, [pc, #816]	; (8008158 <__ieee754_asin+0x340>)
 8007e26:	b083      	sub	sp, #12
 8007e28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007e2c:	4598      	cmp	r8, r3
 8007e2e:	9501      	str	r5, [sp, #4]
 8007e30:	dd35      	ble.n	8007e9e <__ieee754_asin+0x86>
 8007e32:	ee10 3a10 	vmov	r3, s0
 8007e36:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007e3a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007e3e:	ea58 0303 	orrs.w	r3, r8, r3
 8007e42:	d117      	bne.n	8007e74 <__ieee754_asin+0x5c>
 8007e44:	a3aa      	add	r3, pc, #680	; (adr r3, 80080f0 <__ieee754_asin+0x2d8>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	ee10 0a10 	vmov	r0, s0
 8007e4e:	4629      	mov	r1, r5
 8007e50:	f7f8 fb96 	bl	8000580 <__aeabi_dmul>
 8007e54:	a3a8      	add	r3, pc, #672	; (adr r3, 80080f8 <__ieee754_asin+0x2e0>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	4620      	mov	r0, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	f7f8 fb8d 	bl	8000580 <__aeabi_dmul>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	f7f8 f9d1 	bl	8000214 <__adddf3>
 8007e72:	e00b      	b.n	8007e8c <__ieee754_asin+0x74>
 8007e74:	ee10 2a10 	vmov	r2, s0
 8007e78:	462b      	mov	r3, r5
 8007e7a:	ee10 0a10 	vmov	r0, s0
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 f9c6 	bl	8000210 <__aeabi_dsub>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	f7f8 fca4 	bl	80007d4 <__aeabi_ddiv>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	ec45 4b10 	vmov	d0, r4, r5
 8007e94:	b003      	add	sp, #12
 8007e96:	ecbd 8b04 	vpop	{d8-d9}
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	4baf      	ldr	r3, [pc, #700]	; (800815c <__ieee754_asin+0x344>)
 8007ea0:	4598      	cmp	r8, r3
 8007ea2:	dc11      	bgt.n	8007ec8 <__ieee754_asin+0xb0>
 8007ea4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007ea8:	f280 80ae 	bge.w	8008008 <__ieee754_asin+0x1f0>
 8007eac:	a394      	add	r3, pc, #592	; (adr r3, 8008100 <__ieee754_asin+0x2e8>)
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	ee10 0a10 	vmov	r0, s0
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 f9ac 	bl	8000214 <__adddf3>
 8007ebc:	4ba8      	ldr	r3, [pc, #672]	; (8008160 <__ieee754_asin+0x348>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f7f8 fdee 	bl	8000aa0 <__aeabi_dcmpgt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1e3      	bne.n	8007e90 <__ieee754_asin+0x78>
 8007ec8:	ec45 4b10 	vmov	d0, r4, r5
 8007ecc:	f001 f930 	bl	8009130 <fabs>
 8007ed0:	49a3      	ldr	r1, [pc, #652]	; (8008160 <__ieee754_asin+0x348>)
 8007ed2:	ec53 2b10 	vmov	r2, r3, d0
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f7f8 f99a 	bl	8000210 <__aeabi_dsub>
 8007edc:	4ba1      	ldr	r3, [pc, #644]	; (8008164 <__ieee754_asin+0x34c>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f7f8 fb4e 	bl	8000580 <__aeabi_dmul>
 8007ee4:	a388      	add	r3, pc, #544	; (adr r3, 8008108 <__ieee754_asin+0x2f0>)
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	4604      	mov	r4, r0
 8007eec:	460d      	mov	r5, r1
 8007eee:	f7f8 fb47 	bl	8000580 <__aeabi_dmul>
 8007ef2:	a387      	add	r3, pc, #540	; (adr r3, 8008110 <__ieee754_asin+0x2f8>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f98c 	bl	8000214 <__adddf3>
 8007efc:	4622      	mov	r2, r4
 8007efe:	462b      	mov	r3, r5
 8007f00:	f7f8 fb3e 	bl	8000580 <__aeabi_dmul>
 8007f04:	a384      	add	r3, pc, #528	; (adr r3, 8008118 <__ieee754_asin+0x300>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f981 	bl	8000210 <__aeabi_dsub>
 8007f0e:	4622      	mov	r2, r4
 8007f10:	462b      	mov	r3, r5
 8007f12:	f7f8 fb35 	bl	8000580 <__aeabi_dmul>
 8007f16:	a382      	add	r3, pc, #520	; (adr r3, 8008120 <__ieee754_asin+0x308>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f97a 	bl	8000214 <__adddf3>
 8007f20:	4622      	mov	r2, r4
 8007f22:	462b      	mov	r3, r5
 8007f24:	f7f8 fb2c 	bl	8000580 <__aeabi_dmul>
 8007f28:	a37f      	add	r3, pc, #508	; (adr r3, 8008128 <__ieee754_asin+0x310>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 f96f 	bl	8000210 <__aeabi_dsub>
 8007f32:	4622      	mov	r2, r4
 8007f34:	462b      	mov	r3, r5
 8007f36:	f7f8 fb23 	bl	8000580 <__aeabi_dmul>
 8007f3a:	a37d      	add	r3, pc, #500	; (adr r3, 8008130 <__ieee754_asin+0x318>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 f968 	bl	8000214 <__adddf3>
 8007f44:	4622      	mov	r2, r4
 8007f46:	462b      	mov	r3, r5
 8007f48:	f7f8 fb1a 	bl	8000580 <__aeabi_dmul>
 8007f4c:	a37a      	add	r3, pc, #488	; (adr r3, 8008138 <__ieee754_asin+0x320>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	ec41 0b18 	vmov	d8, r0, r1
 8007f56:	4620      	mov	r0, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7f8 fb11 	bl	8000580 <__aeabi_dmul>
 8007f5e:	a378      	add	r3, pc, #480	; (adr r3, 8008140 <__ieee754_asin+0x328>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 f954 	bl	8000210 <__aeabi_dsub>
 8007f68:	4622      	mov	r2, r4
 8007f6a:	462b      	mov	r3, r5
 8007f6c:	f7f8 fb08 	bl	8000580 <__aeabi_dmul>
 8007f70:	a375      	add	r3, pc, #468	; (adr r3, 8008148 <__ieee754_asin+0x330>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f94d 	bl	8000214 <__adddf3>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	f7f8 faff 	bl	8000580 <__aeabi_dmul>
 8007f82:	a373      	add	r3, pc, #460	; (adr r3, 8008150 <__ieee754_asin+0x338>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 f942 	bl	8000210 <__aeabi_dsub>
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f7f8 faf6 	bl	8000580 <__aeabi_dmul>
 8007f94:	4b72      	ldr	r3, [pc, #456]	; (8008160 <__ieee754_asin+0x348>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	f7f8 f93c 	bl	8000214 <__adddf3>
 8007f9c:	ec45 4b10 	vmov	d0, r4, r5
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	f000 fa16 	bl	80083d4 <__ieee754_sqrt>
 8007fa8:	4b6f      	ldr	r3, [pc, #444]	; (8008168 <__ieee754_asin+0x350>)
 8007faa:	4598      	cmp	r8, r3
 8007fac:	ec5b ab10 	vmov	sl, fp, d0
 8007fb0:	f340 80dc 	ble.w	800816c <__ieee754_asin+0x354>
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	ec51 0b18 	vmov	r0, r1, d8
 8007fbc:	f7f8 fc0a 	bl	80007d4 <__aeabi_ddiv>
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	f7f8 fadc 	bl	8000580 <__aeabi_dmul>
 8007fc8:	4652      	mov	r2, sl
 8007fca:	465b      	mov	r3, fp
 8007fcc:	f7f8 f922 	bl	8000214 <__adddf3>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	f7f8 f91e 	bl	8000214 <__adddf3>
 8007fd8:	a347      	add	r3, pc, #284	; (adr r3, 80080f8 <__ieee754_asin+0x2e0>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 f917 	bl	8000210 <__aeabi_dsub>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	a142      	add	r1, pc, #264	; (adr r1, 80080f0 <__ieee754_asin+0x2d8>)
 8007fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fec:	f7f8 f910 	bl	8000210 <__aeabi_dsub>
 8007ff0:	9b01      	ldr	r3, [sp, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bfdc      	itt	le
 8007ff6:	4602      	movle	r2, r0
 8007ff8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	bfdc      	itt	le
 8008002:	4614      	movle	r4, r2
 8008004:	461d      	movle	r5, r3
 8008006:	e743      	b.n	8007e90 <__ieee754_asin+0x78>
 8008008:	ee10 2a10 	vmov	r2, s0
 800800c:	ee10 0a10 	vmov	r0, s0
 8008010:	462b      	mov	r3, r5
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 fab4 	bl	8000580 <__aeabi_dmul>
 8008018:	a33b      	add	r3, pc, #236	; (adr r3, 8008108 <__ieee754_asin+0x2f0>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	f7f8 faad 	bl	8000580 <__aeabi_dmul>
 8008026:	a33a      	add	r3, pc, #232	; (adr r3, 8008110 <__ieee754_asin+0x2f8>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 f8f2 	bl	8000214 <__adddf3>
 8008030:	4632      	mov	r2, r6
 8008032:	463b      	mov	r3, r7
 8008034:	f7f8 faa4 	bl	8000580 <__aeabi_dmul>
 8008038:	a337      	add	r3, pc, #220	; (adr r3, 8008118 <__ieee754_asin+0x300>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 f8e7 	bl	8000210 <__aeabi_dsub>
 8008042:	4632      	mov	r2, r6
 8008044:	463b      	mov	r3, r7
 8008046:	f7f8 fa9b 	bl	8000580 <__aeabi_dmul>
 800804a:	a335      	add	r3, pc, #212	; (adr r3, 8008120 <__ieee754_asin+0x308>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f8e0 	bl	8000214 <__adddf3>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	f7f8 fa92 	bl	8000580 <__aeabi_dmul>
 800805c:	a332      	add	r3, pc, #200	; (adr r3, 8008128 <__ieee754_asin+0x310>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f8d5 	bl	8000210 <__aeabi_dsub>
 8008066:	4632      	mov	r2, r6
 8008068:	463b      	mov	r3, r7
 800806a:	f7f8 fa89 	bl	8000580 <__aeabi_dmul>
 800806e:	a330      	add	r3, pc, #192	; (adr r3, 8008130 <__ieee754_asin+0x318>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f8ce 	bl	8000214 <__adddf3>
 8008078:	4632      	mov	r2, r6
 800807a:	463b      	mov	r3, r7
 800807c:	f7f8 fa80 	bl	8000580 <__aeabi_dmul>
 8008080:	a32d      	add	r3, pc, #180	; (adr r3, 8008138 <__ieee754_asin+0x320>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	4680      	mov	r8, r0
 8008088:	4689      	mov	r9, r1
 800808a:	4630      	mov	r0, r6
 800808c:	4639      	mov	r1, r7
 800808e:	f7f8 fa77 	bl	8000580 <__aeabi_dmul>
 8008092:	a32b      	add	r3, pc, #172	; (adr r3, 8008140 <__ieee754_asin+0x328>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f8ba 	bl	8000210 <__aeabi_dsub>
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	f7f8 fa6e 	bl	8000580 <__aeabi_dmul>
 80080a4:	a328      	add	r3, pc, #160	; (adr r3, 8008148 <__ieee754_asin+0x330>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8b3 	bl	8000214 <__adddf3>
 80080ae:	4632      	mov	r2, r6
 80080b0:	463b      	mov	r3, r7
 80080b2:	f7f8 fa65 	bl	8000580 <__aeabi_dmul>
 80080b6:	a326      	add	r3, pc, #152	; (adr r3, 8008150 <__ieee754_asin+0x338>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f7f8 f8a8 	bl	8000210 <__aeabi_dsub>
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	f7f8 fa5c 	bl	8000580 <__aeabi_dmul>
 80080c8:	4b25      	ldr	r3, [pc, #148]	; (8008160 <__ieee754_asin+0x348>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7f8 f8a2 	bl	8000214 <__adddf3>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4640      	mov	r0, r8
 80080d6:	4649      	mov	r1, r9
 80080d8:	f7f8 fb7c 	bl	80007d4 <__aeabi_ddiv>
 80080dc:	4622      	mov	r2, r4
 80080de:	462b      	mov	r3, r5
 80080e0:	f7f8 fa4e 	bl	8000580 <__aeabi_dmul>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4620      	mov	r0, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	e6bf      	b.n	8007e6e <__ieee754_asin+0x56>
 80080ee:	bf00      	nop
 80080f0:	54442d18 	.word	0x54442d18
 80080f4:	3ff921fb 	.word	0x3ff921fb
 80080f8:	33145c07 	.word	0x33145c07
 80080fc:	3c91a626 	.word	0x3c91a626
 8008100:	8800759c 	.word	0x8800759c
 8008104:	7e37e43c 	.word	0x7e37e43c
 8008108:	0dfdf709 	.word	0x0dfdf709
 800810c:	3f023de1 	.word	0x3f023de1
 8008110:	7501b288 	.word	0x7501b288
 8008114:	3f49efe0 	.word	0x3f49efe0
 8008118:	b5688f3b 	.word	0xb5688f3b
 800811c:	3fa48228 	.word	0x3fa48228
 8008120:	0e884455 	.word	0x0e884455
 8008124:	3fc9c155 	.word	0x3fc9c155
 8008128:	03eb6f7d 	.word	0x03eb6f7d
 800812c:	3fd4d612 	.word	0x3fd4d612
 8008130:	55555555 	.word	0x55555555
 8008134:	3fc55555 	.word	0x3fc55555
 8008138:	b12e9282 	.word	0xb12e9282
 800813c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008140:	1b8d0159 	.word	0x1b8d0159
 8008144:	3fe6066c 	.word	0x3fe6066c
 8008148:	9c598ac8 	.word	0x9c598ac8
 800814c:	40002ae5 	.word	0x40002ae5
 8008150:	1c8a2d4b 	.word	0x1c8a2d4b
 8008154:	40033a27 	.word	0x40033a27
 8008158:	3fefffff 	.word	0x3fefffff
 800815c:	3fdfffff 	.word	0x3fdfffff
 8008160:	3ff00000 	.word	0x3ff00000
 8008164:	3fe00000 	.word	0x3fe00000
 8008168:	3fef3332 	.word	0x3fef3332
 800816c:	ee10 2a10 	vmov	r2, s0
 8008170:	ee10 0a10 	vmov	r0, s0
 8008174:	465b      	mov	r3, fp
 8008176:	4659      	mov	r1, fp
 8008178:	f7f8 f84c 	bl	8000214 <__adddf3>
 800817c:	4632      	mov	r2, r6
 800817e:	463b      	mov	r3, r7
 8008180:	ec41 0b19 	vmov	d9, r0, r1
 8008184:	ec51 0b18 	vmov	r0, r1, d8
 8008188:	f7f8 fb24 	bl	80007d4 <__aeabi_ddiv>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	ec51 0b19 	vmov	r0, r1, d9
 8008194:	f7f8 f9f4 	bl	8000580 <__aeabi_dmul>
 8008198:	f04f 0800 	mov.w	r8, #0
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	4642      	mov	r2, r8
 80081a2:	465b      	mov	r3, fp
 80081a4:	4640      	mov	r0, r8
 80081a6:	4659      	mov	r1, fp
 80081a8:	f7f8 f9ea 	bl	8000580 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 f82c 	bl	8000210 <__aeabi_dsub>
 80081b8:	4642      	mov	r2, r8
 80081ba:	4604      	mov	r4, r0
 80081bc:	460d      	mov	r5, r1
 80081be:	465b      	mov	r3, fp
 80081c0:	4650      	mov	r0, sl
 80081c2:	4659      	mov	r1, fp
 80081c4:	f7f8 f826 	bl	8000214 <__adddf3>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4620      	mov	r0, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fb00 	bl	80007d4 <__aeabi_ddiv>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	f7f8 f81c 	bl	8000214 <__adddf3>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	a113      	add	r1, pc, #76	; (adr r1, 8008230 <__ieee754_asin+0x418>)
 80081e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e6:	f7f8 f813 	bl	8000210 <__aeabi_dsub>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 f80d 	bl	8000210 <__aeabi_dsub>
 80081f6:	4642      	mov	r2, r8
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	465b      	mov	r3, fp
 80081fe:	4640      	mov	r0, r8
 8008200:	4659      	mov	r1, fp
 8008202:	f7f8 f807 	bl	8000214 <__adddf3>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	a10b      	add	r1, pc, #44	; (adr r1, 8008238 <__ieee754_asin+0x420>)
 800820c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008210:	f7f7 fffe 	bl	8000210 <__aeabi_dsub>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4620      	mov	r0, r4
 800821a:	4629      	mov	r1, r5
 800821c:	f7f7 fff8 	bl	8000210 <__aeabi_dsub>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	a104      	add	r1, pc, #16	; (adr r1, 8008238 <__ieee754_asin+0x420>)
 8008226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822a:	e6df      	b.n	8007fec <__ieee754_asin+0x1d4>
 800822c:	f3af 8000 	nop.w
 8008230:	33145c07 	.word	0x33145c07
 8008234:	3c91a626 	.word	0x3c91a626
 8008238:	54442d18 	.word	0x54442d18
 800823c:	3fe921fb 	.word	0x3fe921fb

08008240 <__ieee754_atan2>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	ec57 6b11 	vmov	r6, r7, d1
 8008248:	4273      	negs	r3, r6
 800824a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80083d0 <__ieee754_atan2+0x190>
 800824e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008252:	4333      	orrs	r3, r6
 8008254:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008258:	4573      	cmp	r3, lr
 800825a:	ec51 0b10 	vmov	r0, r1, d0
 800825e:	ee11 8a10 	vmov	r8, s2
 8008262:	d80a      	bhi.n	800827a <__ieee754_atan2+0x3a>
 8008264:	4244      	negs	r4, r0
 8008266:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800826a:	4304      	orrs	r4, r0
 800826c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008270:	4574      	cmp	r4, lr
 8008272:	ee10 9a10 	vmov	r9, s0
 8008276:	468c      	mov	ip, r1
 8008278:	d907      	bls.n	800828a <__ieee754_atan2+0x4a>
 800827a:	4632      	mov	r2, r6
 800827c:	463b      	mov	r3, r7
 800827e:	f7f7 ffc9 	bl	8000214 <__adddf3>
 8008282:	ec41 0b10 	vmov	d0, r0, r1
 8008286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800828e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008292:	4334      	orrs	r4, r6
 8008294:	d103      	bne.n	800829e <__ieee754_atan2+0x5e>
 8008296:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800829a:	f000 bda9 	b.w	8008df0 <atan>
 800829e:	17bc      	asrs	r4, r7, #30
 80082a0:	f004 0402 	and.w	r4, r4, #2
 80082a4:	ea53 0909 	orrs.w	r9, r3, r9
 80082a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80082ac:	d107      	bne.n	80082be <__ieee754_atan2+0x7e>
 80082ae:	2c02      	cmp	r4, #2
 80082b0:	d060      	beq.n	8008374 <__ieee754_atan2+0x134>
 80082b2:	2c03      	cmp	r4, #3
 80082b4:	d1e5      	bne.n	8008282 <__ieee754_atan2+0x42>
 80082b6:	a142      	add	r1, pc, #264	; (adr r1, 80083c0 <__ieee754_atan2+0x180>)
 80082b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082bc:	e7e1      	b.n	8008282 <__ieee754_atan2+0x42>
 80082be:	ea52 0808 	orrs.w	r8, r2, r8
 80082c2:	d106      	bne.n	80082d2 <__ieee754_atan2+0x92>
 80082c4:	f1bc 0f00 	cmp.w	ip, #0
 80082c8:	da5f      	bge.n	800838a <__ieee754_atan2+0x14a>
 80082ca:	a13f      	add	r1, pc, #252	; (adr r1, 80083c8 <__ieee754_atan2+0x188>)
 80082cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d0:	e7d7      	b.n	8008282 <__ieee754_atan2+0x42>
 80082d2:	4572      	cmp	r2, lr
 80082d4:	d10f      	bne.n	80082f6 <__ieee754_atan2+0xb6>
 80082d6:	4293      	cmp	r3, r2
 80082d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80082dc:	d107      	bne.n	80082ee <__ieee754_atan2+0xae>
 80082de:	2c02      	cmp	r4, #2
 80082e0:	d84c      	bhi.n	800837c <__ieee754_atan2+0x13c>
 80082e2:	4b35      	ldr	r3, [pc, #212]	; (80083b8 <__ieee754_atan2+0x178>)
 80082e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80082e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80082ec:	e7c9      	b.n	8008282 <__ieee754_atan2+0x42>
 80082ee:	2c02      	cmp	r4, #2
 80082f0:	d848      	bhi.n	8008384 <__ieee754_atan2+0x144>
 80082f2:	4b32      	ldr	r3, [pc, #200]	; (80083bc <__ieee754_atan2+0x17c>)
 80082f4:	e7f6      	b.n	80082e4 <__ieee754_atan2+0xa4>
 80082f6:	4573      	cmp	r3, lr
 80082f8:	d0e4      	beq.n	80082c4 <__ieee754_atan2+0x84>
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008300:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008304:	da1e      	bge.n	8008344 <__ieee754_atan2+0x104>
 8008306:	2f00      	cmp	r7, #0
 8008308:	da01      	bge.n	800830e <__ieee754_atan2+0xce>
 800830a:	323c      	adds	r2, #60	; 0x3c
 800830c:	db1e      	blt.n	800834c <__ieee754_atan2+0x10c>
 800830e:	4632      	mov	r2, r6
 8008310:	463b      	mov	r3, r7
 8008312:	f7f8 fa5f 	bl	80007d4 <__aeabi_ddiv>
 8008316:	ec41 0b10 	vmov	d0, r0, r1
 800831a:	f000 ff09 	bl	8009130 <fabs>
 800831e:	f000 fd67 	bl	8008df0 <atan>
 8008322:	ec51 0b10 	vmov	r0, r1, d0
 8008326:	2c01      	cmp	r4, #1
 8008328:	d013      	beq.n	8008352 <__ieee754_atan2+0x112>
 800832a:	2c02      	cmp	r4, #2
 800832c:	d015      	beq.n	800835a <__ieee754_atan2+0x11a>
 800832e:	2c00      	cmp	r4, #0
 8008330:	d0a7      	beq.n	8008282 <__ieee754_atan2+0x42>
 8008332:	a319      	add	r3, pc, #100	; (adr r3, 8008398 <__ieee754_atan2+0x158>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f7f7 ff6a 	bl	8000210 <__aeabi_dsub>
 800833c:	a318      	add	r3, pc, #96	; (adr r3, 80083a0 <__ieee754_atan2+0x160>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	e014      	b.n	800836e <__ieee754_atan2+0x12e>
 8008344:	a118      	add	r1, pc, #96	; (adr r1, 80083a8 <__ieee754_atan2+0x168>)
 8008346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834a:	e7ec      	b.n	8008326 <__ieee754_atan2+0xe6>
 800834c:	2000      	movs	r0, #0
 800834e:	2100      	movs	r1, #0
 8008350:	e7e9      	b.n	8008326 <__ieee754_atan2+0xe6>
 8008352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008356:	4619      	mov	r1, r3
 8008358:	e793      	b.n	8008282 <__ieee754_atan2+0x42>
 800835a:	a30f      	add	r3, pc, #60	; (adr r3, 8008398 <__ieee754_atan2+0x158>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f7f7 ff56 	bl	8000210 <__aeabi_dsub>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	a10d      	add	r1, pc, #52	; (adr r1, 80083a0 <__ieee754_atan2+0x160>)
 800836a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836e:	f7f7 ff4f 	bl	8000210 <__aeabi_dsub>
 8008372:	e786      	b.n	8008282 <__ieee754_atan2+0x42>
 8008374:	a10a      	add	r1, pc, #40	; (adr r1, 80083a0 <__ieee754_atan2+0x160>)
 8008376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837a:	e782      	b.n	8008282 <__ieee754_atan2+0x42>
 800837c:	a10c      	add	r1, pc, #48	; (adr r1, 80083b0 <__ieee754_atan2+0x170>)
 800837e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008382:	e77e      	b.n	8008282 <__ieee754_atan2+0x42>
 8008384:	2000      	movs	r0, #0
 8008386:	2100      	movs	r1, #0
 8008388:	e77b      	b.n	8008282 <__ieee754_atan2+0x42>
 800838a:	a107      	add	r1, pc, #28	; (adr r1, 80083a8 <__ieee754_atan2+0x168>)
 800838c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008390:	e777      	b.n	8008282 <__ieee754_atan2+0x42>
 8008392:	bf00      	nop
 8008394:	f3af 8000 	nop.w
 8008398:	33145c07 	.word	0x33145c07
 800839c:	3ca1a626 	.word	0x3ca1a626
 80083a0:	54442d18 	.word	0x54442d18
 80083a4:	400921fb 	.word	0x400921fb
 80083a8:	54442d18 	.word	0x54442d18
 80083ac:	3ff921fb 	.word	0x3ff921fb
 80083b0:	54442d18 	.word	0x54442d18
 80083b4:	3fe921fb 	.word	0x3fe921fb
 80083b8:	08009390 	.word	0x08009390
 80083bc:	080093a8 	.word	0x080093a8
 80083c0:	54442d18 	.word	0x54442d18
 80083c4:	c00921fb 	.word	0xc00921fb
 80083c8:	54442d18 	.word	0x54442d18
 80083cc:	bff921fb 	.word	0xbff921fb
 80083d0:	7ff00000 	.word	0x7ff00000

080083d4 <__ieee754_sqrt>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	ec55 4b10 	vmov	r4, r5, d0
 80083dc:	4e55      	ldr	r6, [pc, #340]	; (8008534 <__ieee754_sqrt+0x160>)
 80083de:	43ae      	bics	r6, r5
 80083e0:	ee10 0a10 	vmov	r0, s0
 80083e4:	ee10 3a10 	vmov	r3, s0
 80083e8:	462a      	mov	r2, r5
 80083ea:	4629      	mov	r1, r5
 80083ec:	d110      	bne.n	8008410 <__ieee754_sqrt+0x3c>
 80083ee:	ee10 2a10 	vmov	r2, s0
 80083f2:	462b      	mov	r3, r5
 80083f4:	f7f8 f8c4 	bl	8000580 <__aeabi_dmul>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f7 ff08 	bl	8000214 <__adddf3>
 8008404:	4604      	mov	r4, r0
 8008406:	460d      	mov	r5, r1
 8008408:	ec45 4b10 	vmov	d0, r4, r5
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	2d00      	cmp	r5, #0
 8008412:	dc10      	bgt.n	8008436 <__ieee754_sqrt+0x62>
 8008414:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008418:	4330      	orrs	r0, r6
 800841a:	d0f5      	beq.n	8008408 <__ieee754_sqrt+0x34>
 800841c:	b15d      	cbz	r5, 8008436 <__ieee754_sqrt+0x62>
 800841e:	ee10 2a10 	vmov	r2, s0
 8008422:	462b      	mov	r3, r5
 8008424:	ee10 0a10 	vmov	r0, s0
 8008428:	f7f7 fef2 	bl	8000210 <__aeabi_dsub>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	f7f8 f9d0 	bl	80007d4 <__aeabi_ddiv>
 8008434:	e7e6      	b.n	8008404 <__ieee754_sqrt+0x30>
 8008436:	1512      	asrs	r2, r2, #20
 8008438:	d074      	beq.n	8008524 <__ieee754_sqrt+0x150>
 800843a:	07d4      	lsls	r4, r2, #31
 800843c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008440:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008448:	bf5e      	ittt	pl
 800844a:	0fda      	lsrpl	r2, r3, #31
 800844c:	005b      	lslpl	r3, r3, #1
 800844e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008452:	2400      	movs	r4, #0
 8008454:	0fda      	lsrs	r2, r3, #31
 8008456:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800845a:	107f      	asrs	r7, r7, #1
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	2516      	movs	r5, #22
 8008460:	4620      	mov	r0, r4
 8008462:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008466:	1886      	adds	r6, r0, r2
 8008468:	428e      	cmp	r6, r1
 800846a:	bfde      	ittt	le
 800846c:	1b89      	suble	r1, r1, r6
 800846e:	18b0      	addle	r0, r6, r2
 8008470:	18a4      	addle	r4, r4, r2
 8008472:	0049      	lsls	r1, r1, #1
 8008474:	3d01      	subs	r5, #1
 8008476:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800847a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800847e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008482:	d1f0      	bne.n	8008466 <__ieee754_sqrt+0x92>
 8008484:	462a      	mov	r2, r5
 8008486:	f04f 0e20 	mov.w	lr, #32
 800848a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800848e:	4281      	cmp	r1, r0
 8008490:	eb06 0c05 	add.w	ip, r6, r5
 8008494:	dc02      	bgt.n	800849c <__ieee754_sqrt+0xc8>
 8008496:	d113      	bne.n	80084c0 <__ieee754_sqrt+0xec>
 8008498:	459c      	cmp	ip, r3
 800849a:	d811      	bhi.n	80084c0 <__ieee754_sqrt+0xec>
 800849c:	f1bc 0f00 	cmp.w	ip, #0
 80084a0:	eb0c 0506 	add.w	r5, ip, r6
 80084a4:	da43      	bge.n	800852e <__ieee754_sqrt+0x15a>
 80084a6:	2d00      	cmp	r5, #0
 80084a8:	db41      	blt.n	800852e <__ieee754_sqrt+0x15a>
 80084aa:	f100 0801 	add.w	r8, r0, #1
 80084ae:	1a09      	subs	r1, r1, r0
 80084b0:	459c      	cmp	ip, r3
 80084b2:	bf88      	it	hi
 80084b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80084b8:	eba3 030c 	sub.w	r3, r3, ip
 80084bc:	4432      	add	r2, r6
 80084be:	4640      	mov	r0, r8
 80084c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80084c4:	f1be 0e01 	subs.w	lr, lr, #1
 80084c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80084cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80084d4:	d1db      	bne.n	800848e <__ieee754_sqrt+0xba>
 80084d6:	430b      	orrs	r3, r1
 80084d8:	d006      	beq.n	80084e8 <__ieee754_sqrt+0x114>
 80084da:	1c50      	adds	r0, r2, #1
 80084dc:	bf13      	iteet	ne
 80084de:	3201      	addne	r2, #1
 80084e0:	3401      	addeq	r4, #1
 80084e2:	4672      	moveq	r2, lr
 80084e4:	f022 0201 	bicne.w	r2, r2, #1
 80084e8:	1063      	asrs	r3, r4, #1
 80084ea:	0852      	lsrs	r2, r2, #1
 80084ec:	07e1      	lsls	r1, r4, #31
 80084ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80084f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80084f6:	bf48      	it	mi
 80084f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80084fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008500:	4614      	mov	r4, r2
 8008502:	e781      	b.n	8008408 <__ieee754_sqrt+0x34>
 8008504:	0ad9      	lsrs	r1, r3, #11
 8008506:	3815      	subs	r0, #21
 8008508:	055b      	lsls	r3, r3, #21
 800850a:	2900      	cmp	r1, #0
 800850c:	d0fa      	beq.n	8008504 <__ieee754_sqrt+0x130>
 800850e:	02cd      	lsls	r5, r1, #11
 8008510:	d50a      	bpl.n	8008528 <__ieee754_sqrt+0x154>
 8008512:	f1c2 0420 	rsb	r4, r2, #32
 8008516:	fa23 f404 	lsr.w	r4, r3, r4
 800851a:	1e55      	subs	r5, r2, #1
 800851c:	4093      	lsls	r3, r2
 800851e:	4321      	orrs	r1, r4
 8008520:	1b42      	subs	r2, r0, r5
 8008522:	e78a      	b.n	800843a <__ieee754_sqrt+0x66>
 8008524:	4610      	mov	r0, r2
 8008526:	e7f0      	b.n	800850a <__ieee754_sqrt+0x136>
 8008528:	0049      	lsls	r1, r1, #1
 800852a:	3201      	adds	r2, #1
 800852c:	e7ef      	b.n	800850e <__ieee754_sqrt+0x13a>
 800852e:	4680      	mov	r8, r0
 8008530:	e7bd      	b.n	80084ae <__ieee754_sqrt+0xda>
 8008532:	bf00      	nop
 8008534:	7ff00000 	.word	0x7ff00000

08008538 <__ieee754_rem_pio2f>:
 8008538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853a:	ee10 6a10 	vmov	r6, s0
 800853e:	4b8e      	ldr	r3, [pc, #568]	; (8008778 <__ieee754_rem_pio2f+0x240>)
 8008540:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008544:	429d      	cmp	r5, r3
 8008546:	b087      	sub	sp, #28
 8008548:	eef0 7a40 	vmov.f32	s15, s0
 800854c:	4604      	mov	r4, r0
 800854e:	dc05      	bgt.n	800855c <__ieee754_rem_pio2f+0x24>
 8008550:	2300      	movs	r3, #0
 8008552:	ed80 0a00 	vstr	s0, [r0]
 8008556:	6043      	str	r3, [r0, #4]
 8008558:	2000      	movs	r0, #0
 800855a:	e01a      	b.n	8008592 <__ieee754_rem_pio2f+0x5a>
 800855c:	4b87      	ldr	r3, [pc, #540]	; (800877c <__ieee754_rem_pio2f+0x244>)
 800855e:	429d      	cmp	r5, r3
 8008560:	dc46      	bgt.n	80085f0 <__ieee754_rem_pio2f+0xb8>
 8008562:	2e00      	cmp	r6, #0
 8008564:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008780 <__ieee754_rem_pio2f+0x248>
 8008568:	4b86      	ldr	r3, [pc, #536]	; (8008784 <__ieee754_rem_pio2f+0x24c>)
 800856a:	f025 050f 	bic.w	r5, r5, #15
 800856e:	dd1f      	ble.n	80085b0 <__ieee754_rem_pio2f+0x78>
 8008570:	429d      	cmp	r5, r3
 8008572:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008576:	d00e      	beq.n	8008596 <__ieee754_rem_pio2f+0x5e>
 8008578:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008788 <__ieee754_rem_pio2f+0x250>
 800857c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008580:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008584:	ed80 0a00 	vstr	s0, [r0]
 8008588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800858c:	2001      	movs	r0, #1
 800858e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008592:	b007      	add	sp, #28
 8008594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008596:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800878c <__ieee754_rem_pio2f+0x254>
 800859a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008790 <__ieee754_rem_pio2f+0x258>
 800859e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085a2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80085a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085aa:	edc0 6a00 	vstr	s13, [r0]
 80085ae:	e7eb      	b.n	8008588 <__ieee754_rem_pio2f+0x50>
 80085b0:	429d      	cmp	r5, r3
 80085b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085b6:	d00e      	beq.n	80085d6 <__ieee754_rem_pio2f+0x9e>
 80085b8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008788 <__ieee754_rem_pio2f+0x250>
 80085bc:	ee37 0a87 	vadd.f32	s0, s15, s14
 80085c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80085c4:	ed80 0a00 	vstr	s0, [r0]
 80085c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	edc4 7a01 	vstr	s15, [r4, #4]
 80085d4:	e7dd      	b.n	8008592 <__ieee754_rem_pio2f+0x5a>
 80085d6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800878c <__ieee754_rem_pio2f+0x254>
 80085da:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008790 <__ieee754_rem_pio2f+0x258>
 80085de:	ee77 7a80 	vadd.f32	s15, s15, s0
 80085e2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80085e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085ea:	edc0 6a00 	vstr	s13, [r0]
 80085ee:	e7eb      	b.n	80085c8 <__ieee754_rem_pio2f+0x90>
 80085f0:	4b68      	ldr	r3, [pc, #416]	; (8008794 <__ieee754_rem_pio2f+0x25c>)
 80085f2:	429d      	cmp	r5, r3
 80085f4:	dc72      	bgt.n	80086dc <__ieee754_rem_pio2f+0x1a4>
 80085f6:	f000 fdaf 	bl	8009158 <fabsf>
 80085fa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008798 <__ieee754_rem_pio2f+0x260>
 80085fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008602:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800860a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800860e:	ee17 0a90 	vmov	r0, s15
 8008612:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008780 <__ieee754_rem_pio2f+0x248>
 8008616:	eea7 0a67 	vfms.f32	s0, s14, s15
 800861a:	281f      	cmp	r0, #31
 800861c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008788 <__ieee754_rem_pio2f+0x250>
 8008620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008624:	eeb1 6a47 	vneg.f32	s12, s14
 8008628:	ee70 6a67 	vsub.f32	s13, s0, s15
 800862c:	ee16 2a90 	vmov	r2, s13
 8008630:	dc1c      	bgt.n	800866c <__ieee754_rem_pio2f+0x134>
 8008632:	495a      	ldr	r1, [pc, #360]	; (800879c <__ieee754_rem_pio2f+0x264>)
 8008634:	1e47      	subs	r7, r0, #1
 8008636:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800863a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800863e:	428b      	cmp	r3, r1
 8008640:	d014      	beq.n	800866c <__ieee754_rem_pio2f+0x134>
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	ed94 7a00 	vldr	s14, [r4]
 8008648:	ee30 0a47 	vsub.f32	s0, s0, s14
 800864c:	2e00      	cmp	r6, #0
 800864e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008652:	ed84 0a01 	vstr	s0, [r4, #4]
 8008656:	da9c      	bge.n	8008592 <__ieee754_rem_pio2f+0x5a>
 8008658:	eeb1 7a47 	vneg.f32	s14, s14
 800865c:	eeb1 0a40 	vneg.f32	s0, s0
 8008660:	ed84 7a00 	vstr	s14, [r4]
 8008664:	ed84 0a01 	vstr	s0, [r4, #4]
 8008668:	4240      	negs	r0, r0
 800866a:	e792      	b.n	8008592 <__ieee754_rem_pio2f+0x5a>
 800866c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008670:	15eb      	asrs	r3, r5, #23
 8008672:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008676:	2d08      	cmp	r5, #8
 8008678:	dde3      	ble.n	8008642 <__ieee754_rem_pio2f+0x10a>
 800867a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800878c <__ieee754_rem_pio2f+0x254>
 800867e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008790 <__ieee754_rem_pio2f+0x258>
 8008682:	eef0 6a40 	vmov.f32	s13, s0
 8008686:	eee6 6a27 	vfma.f32	s13, s12, s15
 800868a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800868e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008692:	eef0 7a40 	vmov.f32	s15, s0
 8008696:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800869a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800869e:	ee15 2a90 	vmov	r2, s11
 80086a2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80086a6:	1a5b      	subs	r3, r3, r1
 80086a8:	2b19      	cmp	r3, #25
 80086aa:	dc04      	bgt.n	80086b6 <__ieee754_rem_pio2f+0x17e>
 80086ac:	edc4 5a00 	vstr	s11, [r4]
 80086b0:	eeb0 0a66 	vmov.f32	s0, s13
 80086b4:	e7c6      	b.n	8008644 <__ieee754_rem_pio2f+0x10c>
 80086b6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80087a0 <__ieee754_rem_pio2f+0x268>
 80086ba:	eeb0 0a66 	vmov.f32	s0, s13
 80086be:	eea6 0a25 	vfma.f32	s0, s12, s11
 80086c2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80086c6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80087a4 <__ieee754_rem_pio2f+0x26c>
 80086ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 80086ce:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80086d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80086d6:	ed84 7a00 	vstr	s14, [r4]
 80086da:	e7b3      	b.n	8008644 <__ieee754_rem_pio2f+0x10c>
 80086dc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80086e0:	db06      	blt.n	80086f0 <__ieee754_rem_pio2f+0x1b8>
 80086e2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80086e6:	edc0 7a01 	vstr	s15, [r0, #4]
 80086ea:	edc0 7a00 	vstr	s15, [r0]
 80086ee:	e733      	b.n	8008558 <__ieee754_rem_pio2f+0x20>
 80086f0:	15ea      	asrs	r2, r5, #23
 80086f2:	3a86      	subs	r2, #134	; 0x86
 80086f4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008700:	eddf 6a29 	vldr	s13, [pc, #164]	; 80087a8 <__ieee754_rem_pio2f+0x270>
 8008704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008708:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800870c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008710:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008714:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008718:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800871c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008720:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008724:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008728:	eef5 7a40 	vcmp.f32	s15, #0.0
 800872c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008730:	edcd 7a05 	vstr	s15, [sp, #20]
 8008734:	d11e      	bne.n	8008774 <__ieee754_rem_pio2f+0x23c>
 8008736:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	bf14      	ite	ne
 8008740:	2302      	movne	r3, #2
 8008742:	2301      	moveq	r3, #1
 8008744:	4919      	ldr	r1, [pc, #100]	; (80087ac <__ieee754_rem_pio2f+0x274>)
 8008746:	9101      	str	r1, [sp, #4]
 8008748:	2102      	movs	r1, #2
 800874a:	9100      	str	r1, [sp, #0]
 800874c:	a803      	add	r0, sp, #12
 800874e:	4621      	mov	r1, r4
 8008750:	f000 f88e 	bl	8008870 <__kernel_rem_pio2f>
 8008754:	2e00      	cmp	r6, #0
 8008756:	f6bf af1c 	bge.w	8008592 <__ieee754_rem_pio2f+0x5a>
 800875a:	edd4 7a00 	vldr	s15, [r4]
 800875e:	eef1 7a67 	vneg.f32	s15, s15
 8008762:	edc4 7a00 	vstr	s15, [r4]
 8008766:	edd4 7a01 	vldr	s15, [r4, #4]
 800876a:	eef1 7a67 	vneg.f32	s15, s15
 800876e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008772:	e779      	b.n	8008668 <__ieee754_rem_pio2f+0x130>
 8008774:	2303      	movs	r3, #3
 8008776:	e7e5      	b.n	8008744 <__ieee754_rem_pio2f+0x20c>
 8008778:	3f490fd8 	.word	0x3f490fd8
 800877c:	4016cbe3 	.word	0x4016cbe3
 8008780:	3fc90f80 	.word	0x3fc90f80
 8008784:	3fc90fd0 	.word	0x3fc90fd0
 8008788:	37354443 	.word	0x37354443
 800878c:	37354400 	.word	0x37354400
 8008790:	2e85a308 	.word	0x2e85a308
 8008794:	43490f80 	.word	0x43490f80
 8008798:	3f22f984 	.word	0x3f22f984
 800879c:	080093c0 	.word	0x080093c0
 80087a0:	2e85a300 	.word	0x2e85a300
 80087a4:	248d3132 	.word	0x248d3132
 80087a8:	43800000 	.word	0x43800000
 80087ac:	08009440 	.word	0x08009440

080087b0 <__kernel_cosf>:
 80087b0:	ee10 3a10 	vmov	r3, s0
 80087b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80087bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80087c0:	da05      	bge.n	80087ce <__kernel_cosf+0x1e>
 80087c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80087c6:	ee17 2a90 	vmov	r2, s15
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d03d      	beq.n	800884a <__kernel_cosf+0x9a>
 80087ce:	ee60 5a00 	vmul.f32	s11, s0, s0
 80087d2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008850 <__kernel_cosf+0xa0>
 80087d6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008854 <__kernel_cosf+0xa4>
 80087da:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008858 <__kernel_cosf+0xa8>
 80087de:	4a1f      	ldr	r2, [pc, #124]	; (800885c <__kernel_cosf+0xac>)
 80087e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80087e4:	4293      	cmp	r3, r2
 80087e6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008860 <__kernel_cosf+0xb0>
 80087ea:	eee7 7a25 	vfma.f32	s15, s14, s11
 80087ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008864 <__kernel_cosf+0xb4>
 80087f2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80087f6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008868 <__kernel_cosf+0xb8>
 80087fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80087fe:	eeb0 7a66 	vmov.f32	s14, s13
 8008802:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008806:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800880a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800880e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008812:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008816:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800881a:	dc04      	bgt.n	8008826 <__kernel_cosf+0x76>
 800881c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008820:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008824:	4770      	bx	lr
 8008826:	4a11      	ldr	r2, [pc, #68]	; (800886c <__kernel_cosf+0xbc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	bfda      	itte	le
 800882c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008830:	ee06 3a90 	vmovle	s13, r3
 8008834:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800883c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008844:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008848:	4770      	bx	lr
 800884a:	eeb0 0a46 	vmov.f32	s0, s12
 800884e:	4770      	bx	lr
 8008850:	ad47d74e 	.word	0xad47d74e
 8008854:	310f74f6 	.word	0x310f74f6
 8008858:	3d2aaaab 	.word	0x3d2aaaab
 800885c:	3e999999 	.word	0x3e999999
 8008860:	b493f27c 	.word	0xb493f27c
 8008864:	37d00d01 	.word	0x37d00d01
 8008868:	bab60b61 	.word	0xbab60b61
 800886c:	3f480000 	.word	0x3f480000

08008870 <__kernel_rem_pio2f>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	ed2d 8b04 	vpush	{d8-d9}
 8008878:	b0d9      	sub	sp, #356	; 0x164
 800887a:	4688      	mov	r8, r1
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	49bb      	ldr	r1, [pc, #748]	; (8008b6c <__kernel_rem_pio2f+0x2fc>)
 8008880:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008888:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800888c:	1e59      	subs	r1, r3, #1
 800888e:	1d13      	adds	r3, r2, #4
 8008890:	db27      	blt.n	80088e2 <__kernel_rem_pio2f+0x72>
 8008892:	f1b2 0b03 	subs.w	fp, r2, #3
 8008896:	bf48      	it	mi
 8008898:	f102 0b04 	addmi.w	fp, r2, #4
 800889c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80088a0:	1c45      	adds	r5, r0, #1
 80088a2:	00ec      	lsls	r4, r5, #3
 80088a4:	1a47      	subs	r7, r0, r1
 80088a6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 80088aa:	9403      	str	r4, [sp, #12]
 80088ac:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80088b0:	eb0a 0c01 	add.w	ip, sl, r1
 80088b4:	ae1c      	add	r6, sp, #112	; 0x70
 80088b6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80088ba:	2400      	movs	r4, #0
 80088bc:	4564      	cmp	r4, ip
 80088be:	dd12      	ble.n	80088e6 <__kernel_rem_pio2f+0x76>
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	ac1c      	add	r4, sp, #112	; 0x70
 80088c4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80088c8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80088cc:	f04f 0c00 	mov.w	ip, #0
 80088d0:	45d4      	cmp	ip, sl
 80088d2:	dc27      	bgt.n	8008924 <__kernel_rem_pio2f+0xb4>
 80088d4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80088d8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 80088dc:	4627      	mov	r7, r4
 80088de:	2600      	movs	r6, #0
 80088e0:	e016      	b.n	8008910 <__kernel_rem_pio2f+0xa0>
 80088e2:	2000      	movs	r0, #0
 80088e4:	e7dc      	b.n	80088a0 <__kernel_rem_pio2f+0x30>
 80088e6:	42e7      	cmn	r7, r4
 80088e8:	bf5d      	ittte	pl
 80088ea:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80088ee:	ee07 3a90 	vmovpl	s15, r3
 80088f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80088f6:	eef0 7a47 	vmovmi.f32	s15, s14
 80088fa:	ece6 7a01 	vstmia	r6!, {s15}
 80088fe:	3401      	adds	r4, #1
 8008900:	e7dc      	b.n	80088bc <__kernel_rem_pio2f+0x4c>
 8008902:	ecf9 6a01 	vldmia	r9!, {s13}
 8008906:	ed97 7a00 	vldr	s14, [r7]
 800890a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800890e:	3601      	adds	r6, #1
 8008910:	428e      	cmp	r6, r1
 8008912:	f1a7 0704 	sub.w	r7, r7, #4
 8008916:	ddf4      	ble.n	8008902 <__kernel_rem_pio2f+0x92>
 8008918:	eceb 7a01 	vstmia	fp!, {s15}
 800891c:	f10c 0c01 	add.w	ip, ip, #1
 8008920:	3404      	adds	r4, #4
 8008922:	e7d5      	b.n	80088d0 <__kernel_rem_pio2f+0x60>
 8008924:	ab08      	add	r3, sp, #32
 8008926:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800892a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008b78 <__kernel_rem_pio2f+0x308>
 800892e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008b74 <__kernel_rem_pio2f+0x304>
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008938:	4656      	mov	r6, sl
 800893a:	00b3      	lsls	r3, r6, #2
 800893c:	9305      	str	r3, [sp, #20]
 800893e:	ab58      	add	r3, sp, #352	; 0x160
 8008940:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008944:	ac08      	add	r4, sp, #32
 8008946:	ab44      	add	r3, sp, #272	; 0x110
 8008948:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800894c:	46a4      	mov	ip, r4
 800894e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008952:	4637      	mov	r7, r6
 8008954:	2f00      	cmp	r7, #0
 8008956:	f1a0 0004 	sub.w	r0, r0, #4
 800895a:	dc4f      	bgt.n	80089fc <__kernel_rem_pio2f+0x18c>
 800895c:	4628      	mov	r0, r5
 800895e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008962:	f000 fc43 	bl	80091ec <scalbnf>
 8008966:	eeb0 8a40 	vmov.f32	s16, s0
 800896a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800896e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008972:	f000 fbf9 	bl	8009168 <floorf>
 8008976:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800897a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800897e:	2d00      	cmp	r5, #0
 8008980:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008984:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008988:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800898c:	ee17 9a90 	vmov	r9, s15
 8008990:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008994:	dd44      	ble.n	8008a20 <__kernel_rem_pio2f+0x1b0>
 8008996:	f106 3cff 	add.w	ip, r6, #4294967295
 800899a:	ab08      	add	r3, sp, #32
 800899c:	f1c5 0e08 	rsb	lr, r5, #8
 80089a0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80089a4:	fa47 f00e 	asr.w	r0, r7, lr
 80089a8:	4481      	add	r9, r0
 80089aa:	fa00 f00e 	lsl.w	r0, r0, lr
 80089ae:	1a3f      	subs	r7, r7, r0
 80089b0:	f1c5 0007 	rsb	r0, r5, #7
 80089b4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80089b8:	4107      	asrs	r7, r0
 80089ba:	2f00      	cmp	r7, #0
 80089bc:	dd3f      	ble.n	8008a3e <__kernel_rem_pio2f+0x1ce>
 80089be:	f04f 0e00 	mov.w	lr, #0
 80089c2:	f109 0901 	add.w	r9, r9, #1
 80089c6:	4673      	mov	r3, lr
 80089c8:	4576      	cmp	r6, lr
 80089ca:	dc6b      	bgt.n	8008aa4 <__kernel_rem_pio2f+0x234>
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	dd04      	ble.n	80089da <__kernel_rem_pio2f+0x16a>
 80089d0:	2d01      	cmp	r5, #1
 80089d2:	d078      	beq.n	8008ac6 <__kernel_rem_pio2f+0x256>
 80089d4:	2d02      	cmp	r5, #2
 80089d6:	f000 8081 	beq.w	8008adc <__kernel_rem_pio2f+0x26c>
 80089da:	2f02      	cmp	r7, #2
 80089dc:	d12f      	bne.n	8008a3e <__kernel_rem_pio2f+0x1ce>
 80089de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80089e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80089e6:	b353      	cbz	r3, 8008a3e <__kernel_rem_pio2f+0x1ce>
 80089e8:	4628      	mov	r0, r5
 80089ea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80089ee:	f000 fbfd 	bl	80091ec <scalbnf>
 80089f2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80089f6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80089fa:	e020      	b.n	8008a3e <__kernel_rem_pio2f+0x1ce>
 80089fc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008a00:	3f01      	subs	r7, #1
 8008a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a0a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008a0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a12:	ecac 0a01 	vstmia	ip!, {s0}
 8008a16:	ed90 0a00 	vldr	s0, [r0]
 8008a1a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008a1e:	e799      	b.n	8008954 <__kernel_rem_pio2f+0xe4>
 8008a20:	d105      	bne.n	8008a2e <__kernel_rem_pio2f+0x1be>
 8008a22:	1e70      	subs	r0, r6, #1
 8008a24:	ab08      	add	r3, sp, #32
 8008a26:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008a2a:	11ff      	asrs	r7, r7, #7
 8008a2c:	e7c5      	b.n	80089ba <__kernel_rem_pio2f+0x14a>
 8008a2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3a:	da31      	bge.n	8008aa0 <__kernel_rem_pio2f+0x230>
 8008a3c:	2700      	movs	r7, #0
 8008a3e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	f040 809b 	bne.w	8008b80 <__kernel_rem_pio2f+0x310>
 8008a4a:	1e74      	subs	r4, r6, #1
 8008a4c:	46a4      	mov	ip, r4
 8008a4e:	2000      	movs	r0, #0
 8008a50:	45d4      	cmp	ip, sl
 8008a52:	da4a      	bge.n	8008aea <__kernel_rem_pio2f+0x27a>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d07a      	beq.n	8008b4e <__kernel_rem_pio2f+0x2de>
 8008a58:	ab08      	add	r3, sp, #32
 8008a5a:	3d08      	subs	r5, #8
 8008a5c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 8081 	beq.w	8008b68 <__kernel_rem_pio2f+0x2f8>
 8008a66:	4628      	mov	r0, r5
 8008a68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a6c:	00a5      	lsls	r5, r4, #2
 8008a6e:	f000 fbbd 	bl	80091ec <scalbnf>
 8008a72:	aa44      	add	r2, sp, #272	; 0x110
 8008a74:	1d2b      	adds	r3, r5, #4
 8008a76:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008b78 <__kernel_rem_pio2f+0x308>
 8008a7a:	18d1      	adds	r1, r2, r3
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	f280 80ae 	bge.w	8008be0 <__kernel_rem_pio2f+0x370>
 8008a84:	4622      	mov	r2, r4
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	f2c0 80cc 	blt.w	8008c24 <__kernel_rem_pio2f+0x3b4>
 8008a8c:	a944      	add	r1, sp, #272	; 0x110
 8008a8e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008a92:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008b70 <__kernel_rem_pio2f+0x300>
 8008a96:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	1aa1      	subs	r1, r4, r2
 8008a9e:	e0b6      	b.n	8008c0e <__kernel_rem_pio2f+0x39e>
 8008aa0:	2702      	movs	r7, #2
 8008aa2:	e78c      	b.n	80089be <__kernel_rem_pio2f+0x14e>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	b94b      	cbnz	r3, 8008abc <__kernel_rem_pio2f+0x24c>
 8008aa8:	b118      	cbz	r0, 8008ab2 <__kernel_rem_pio2f+0x242>
 8008aaa:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008aae:	6020      	str	r0, [r4, #0]
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f10e 0e01 	add.w	lr, lr, #1
 8008ab6:	3404      	adds	r4, #4
 8008ab8:	4603      	mov	r3, r0
 8008aba:	e785      	b.n	80089c8 <__kernel_rem_pio2f+0x158>
 8008abc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008ac0:	6020      	str	r0, [r4, #0]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	e7f5      	b.n	8008ab2 <__kernel_rem_pio2f+0x242>
 8008ac6:	1e74      	subs	r4, r6, #1
 8008ac8:	a808      	add	r0, sp, #32
 8008aca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008ace:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008ad2:	f10d 0c20 	add.w	ip, sp, #32
 8008ad6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008ada:	e77e      	b.n	80089da <__kernel_rem_pio2f+0x16a>
 8008adc:	1e74      	subs	r4, r6, #1
 8008ade:	a808      	add	r0, sp, #32
 8008ae0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008ae4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008ae8:	e7f3      	b.n	8008ad2 <__kernel_rem_pio2f+0x262>
 8008aea:	ab08      	add	r3, sp, #32
 8008aec:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008af0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008af4:	4318      	orrs	r0, r3
 8008af6:	e7ab      	b.n	8008a50 <__kernel_rem_pio2f+0x1e0>
 8008af8:	f10c 0c01 	add.w	ip, ip, #1
 8008afc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	d0f9      	beq.n	8008af8 <__kernel_rem_pio2f+0x288>
 8008b04:	9b05      	ldr	r3, [sp, #20]
 8008b06:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008b0a:	eb0d 0003 	add.w	r0, sp, r3
 8008b0e:	9b01      	ldr	r3, [sp, #4]
 8008b10:	18f4      	adds	r4, r6, r3
 8008b12:	ab1c      	add	r3, sp, #112	; 0x70
 8008b14:	1c77      	adds	r7, r6, #1
 8008b16:	384c      	subs	r0, #76	; 0x4c
 8008b18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b1c:	4466      	add	r6, ip
 8008b1e:	42be      	cmp	r6, r7
 8008b20:	f6ff af0b 	blt.w	800893a <__kernel_rem_pio2f+0xca>
 8008b24:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008b28:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008b2c:	ee07 3a90 	vmov	s15, r3
 8008b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b34:	f04f 0c00 	mov.w	ip, #0
 8008b38:	ece4 7a01 	vstmia	r4!, {s15}
 8008b3c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 8008b40:	46a1      	mov	r9, r4
 8008b42:	458c      	cmp	ip, r1
 8008b44:	dd07      	ble.n	8008b56 <__kernel_rem_pio2f+0x2e6>
 8008b46:	ece0 7a01 	vstmia	r0!, {s15}
 8008b4a:	3701      	adds	r7, #1
 8008b4c:	e7e7      	b.n	8008b1e <__kernel_rem_pio2f+0x2ae>
 8008b4e:	9804      	ldr	r0, [sp, #16]
 8008b50:	f04f 0c01 	mov.w	ip, #1
 8008b54:	e7d2      	b.n	8008afc <__kernel_rem_pio2f+0x28c>
 8008b56:	ecfe 6a01 	vldmia	lr!, {s13}
 8008b5a:	ed39 7a01 	vldmdb	r9!, {s14}
 8008b5e:	f10c 0c01 	add.w	ip, ip, #1
 8008b62:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008b66:	e7ec      	b.n	8008b42 <__kernel_rem_pio2f+0x2d2>
 8008b68:	3c01      	subs	r4, #1
 8008b6a:	e775      	b.n	8008a58 <__kernel_rem_pio2f+0x1e8>
 8008b6c:	08009784 	.word	0x08009784
 8008b70:	08009758 	.word	0x08009758
 8008b74:	43800000 	.word	0x43800000
 8008b78:	3b800000 	.word	0x3b800000
 8008b7c:	00000000 	.word	0x00000000
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	eeb0 0a48 	vmov.f32	s0, s16
 8008b86:	1a98      	subs	r0, r3, r2
 8008b88:	f000 fb30 	bl	80091ec <scalbnf>
 8008b8c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008b74 <__kernel_rem_pio2f+0x304>
 8008b90:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b98:	db19      	blt.n	8008bce <__kernel_rem_pio2f+0x35e>
 8008b9a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008b78 <__kernel_rem_pio2f+0x308>
 8008b9e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008ba2:	aa08      	add	r2, sp, #32
 8008ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ba8:	1c74      	adds	r4, r6, #1
 8008baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bae:	3508      	adds	r5, #8
 8008bb0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bb8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bbc:	ee10 3a10 	vmov	r3, s0
 8008bc0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008bc4:	ee17 3a90 	vmov	r3, s15
 8008bc8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008bcc:	e74b      	b.n	8008a66 <__kernel_rem_pio2f+0x1f6>
 8008bce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008bd2:	aa08      	add	r2, sp, #32
 8008bd4:	ee10 3a10 	vmov	r3, s0
 8008bd8:	4634      	mov	r4, r6
 8008bda:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008bde:	e742      	b.n	8008a66 <__kernel_rem_pio2f+0x1f6>
 8008be0:	a808      	add	r0, sp, #32
 8008be2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008be6:	9001      	str	r0, [sp, #4]
 8008be8:	ee07 0a90 	vmov	s15, r0
 8008bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bf0:	3a01      	subs	r2, #1
 8008bf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008bf6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008bfa:	ed61 7a01 	vstmdb	r1!, {s15}
 8008bfe:	e73e      	b.n	8008a7e <__kernel_rem_pio2f+0x20e>
 8008c00:	ecfc 6a01 	vldmia	ip!, {s13}
 8008c04:	ecb6 7a01 	vldmia	r6!, {s14}
 8008c08:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	4550      	cmp	r0, sl
 8008c10:	dc01      	bgt.n	8008c16 <__kernel_rem_pio2f+0x3a6>
 8008c12:	4288      	cmp	r0, r1
 8008c14:	ddf4      	ble.n	8008c00 <__kernel_rem_pio2f+0x390>
 8008c16:	a858      	add	r0, sp, #352	; 0x160
 8008c18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c1c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008c20:	3a01      	subs	r2, #1
 8008c22:	e730      	b.n	8008a86 <__kernel_rem_pio2f+0x216>
 8008c24:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008c26:	2a02      	cmp	r2, #2
 8008c28:	dc09      	bgt.n	8008c3e <__kernel_rem_pio2f+0x3ce>
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	dc2a      	bgt.n	8008c84 <__kernel_rem_pio2f+0x414>
 8008c2e:	d043      	beq.n	8008cb8 <__kernel_rem_pio2f+0x448>
 8008c30:	f009 0007 	and.w	r0, r9, #7
 8008c34:	b059      	add	sp, #356	; 0x164
 8008c36:	ecbd 8b04 	vpop	{d8-d9}
 8008c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d1f5      	bne.n	8008c30 <__kernel_rem_pio2f+0x3c0>
 8008c44:	ab30      	add	r3, sp, #192	; 0xc0
 8008c46:	442b      	add	r3, r5
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f1a1 0104 	sub.w	r1, r1, #4
 8008c54:	dc51      	bgt.n	8008cfa <__kernel_rem_pio2f+0x48a>
 8008c56:	4621      	mov	r1, r4
 8008c58:	2901      	cmp	r1, #1
 8008c5a:	f1a2 0204 	sub.w	r2, r2, #4
 8008c5e:	dc5c      	bgt.n	8008d1a <__kernel_rem_pio2f+0x4aa>
 8008c60:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 8008c64:	3304      	adds	r3, #4
 8008c66:	2c01      	cmp	r4, #1
 8008c68:	dc67      	bgt.n	8008d3a <__kernel_rem_pio2f+0x4ca>
 8008c6a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008c6e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008c72:	2f00      	cmp	r7, #0
 8008c74:	d167      	bne.n	8008d46 <__kernel_rem_pio2f+0x4d6>
 8008c76:	edc8 6a00 	vstr	s13, [r8]
 8008c7a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008c7e:	edc8 7a02 	vstr	s15, [r8, #8]
 8008c82:	e7d5      	b.n	8008c30 <__kernel_rem_pio2f+0x3c0>
 8008c84:	aa30      	add	r2, sp, #192	; 0xc0
 8008c86:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 8008c8a:	4413      	add	r3, r2
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	da24      	bge.n	8008cdc <__kernel_rem_pio2f+0x46c>
 8008c92:	b34f      	cbz	r7, 8008ce8 <__kernel_rem_pio2f+0x478>
 8008c94:	eef1 7a47 	vneg.f32	s15, s14
 8008c98:	edc8 7a00 	vstr	s15, [r8]
 8008c9c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ca4:	aa31      	add	r2, sp, #196	; 0xc4
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	429c      	cmp	r4, r3
 8008caa:	da20      	bge.n	8008cee <__kernel_rem_pio2f+0x47e>
 8008cac:	b10f      	cbz	r7, 8008cb2 <__kernel_rem_pio2f+0x442>
 8008cae:	eef1 7a67 	vneg.f32	s15, s15
 8008cb2:	edc8 7a01 	vstr	s15, [r8, #4]
 8008cb6:	e7bb      	b.n	8008c30 <__kernel_rem_pio2f+0x3c0>
 8008cb8:	aa30      	add	r2, sp, #192	; 0xc0
 8008cba:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008b7c <__kernel_rem_pio2f+0x30c>
 8008cbe:	4413      	add	r3, r2
 8008cc0:	2c00      	cmp	r4, #0
 8008cc2:	da05      	bge.n	8008cd0 <__kernel_rem_pio2f+0x460>
 8008cc4:	b10f      	cbz	r7, 8008cca <__kernel_rem_pio2f+0x45a>
 8008cc6:	eef1 7a67 	vneg.f32	s15, s15
 8008cca:	edc8 7a00 	vstr	s15, [r8]
 8008cce:	e7af      	b.n	8008c30 <__kernel_rem_pio2f+0x3c0>
 8008cd0:	ed33 7a01 	vldmdb	r3!, {s14}
 8008cd4:	3c01      	subs	r4, #1
 8008cd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cda:	e7f1      	b.n	8008cc0 <__kernel_rem_pio2f+0x450>
 8008cdc:	ed73 7a01 	vldmdb	r3!, {s15}
 8008ce0:	3a01      	subs	r2, #1
 8008ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ce6:	e7d2      	b.n	8008c8e <__kernel_rem_pio2f+0x41e>
 8008ce8:	eef0 7a47 	vmov.f32	s15, s14
 8008cec:	e7d4      	b.n	8008c98 <__kernel_rem_pio2f+0x428>
 8008cee:	ecb2 7a01 	vldmia	r2!, {s14}
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cf8:	e7d6      	b.n	8008ca8 <__kernel_rem_pio2f+0x438>
 8008cfa:	edd1 7a00 	vldr	s15, [r1]
 8008cfe:	edd1 6a01 	vldr	s13, [r1, #4]
 8008d02:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d06:	3801      	subs	r0, #1
 8008d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d0c:	ed81 7a00 	vstr	s14, [r1]
 8008d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d14:	edc1 7a01 	vstr	s15, [r1, #4]
 8008d18:	e799      	b.n	8008c4e <__kernel_rem_pio2f+0x3de>
 8008d1a:	edd2 7a00 	vldr	s15, [r2]
 8008d1e:	edd2 6a01 	vldr	s13, [r2, #4]
 8008d22:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008d26:	3901      	subs	r1, #1
 8008d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d2c:	ed82 7a00 	vstr	s14, [r2]
 8008d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d34:	edc2 7a01 	vstr	s15, [r2, #4]
 8008d38:	e78e      	b.n	8008c58 <__kernel_rem_pio2f+0x3e8>
 8008d3a:	ed33 7a01 	vldmdb	r3!, {s14}
 8008d3e:	3c01      	subs	r4, #1
 8008d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d44:	e78f      	b.n	8008c66 <__kernel_rem_pio2f+0x3f6>
 8008d46:	eef1 6a66 	vneg.f32	s13, s13
 8008d4a:	eeb1 7a47 	vneg.f32	s14, s14
 8008d4e:	edc8 6a00 	vstr	s13, [r8]
 8008d52:	ed88 7a01 	vstr	s14, [r8, #4]
 8008d56:	eef1 7a67 	vneg.f32	s15, s15
 8008d5a:	e790      	b.n	8008c7e <__kernel_rem_pio2f+0x40e>

08008d5c <__kernel_sinf>:
 8008d5c:	ee10 3a10 	vmov	r3, s0
 8008d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008d68:	da04      	bge.n	8008d74 <__kernel_sinf+0x18>
 8008d6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008d6e:	ee17 3a90 	vmov	r3, s15
 8008d72:	b35b      	cbz	r3, 8008dcc <__kernel_sinf+0x70>
 8008d74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008d78:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008dd0 <__kernel_sinf+0x74>
 8008d7c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008dd4 <__kernel_sinf+0x78>
 8008d80:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008d84:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008dd8 <__kernel_sinf+0x7c>
 8008d88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008d8c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008ddc <__kernel_sinf+0x80>
 8008d90:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008d94:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008de0 <__kernel_sinf+0x84>
 8008d98:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008d9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008da0:	b930      	cbnz	r0, 8008db0 <__kernel_sinf+0x54>
 8008da2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008de4 <__kernel_sinf+0x88>
 8008da6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008daa:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008dae:	4770      	bx	lr
 8008db0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008db4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008db8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008dbc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008dc0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008de8 <__kernel_sinf+0x8c>
 8008dc4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008dc8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	2f2ec9d3 	.word	0x2f2ec9d3
 8008dd4:	b2d72f34 	.word	0xb2d72f34
 8008dd8:	3638ef1b 	.word	0x3638ef1b
 8008ddc:	b9500d01 	.word	0xb9500d01
 8008de0:	3c088889 	.word	0x3c088889
 8008de4:	be2aaaab 	.word	0xbe2aaaab
 8008de8:	3e2aaaab 	.word	0x3e2aaaab
 8008dec:	00000000 	.word	0x00000000

08008df0 <atan>:
 8008df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	ec55 4b10 	vmov	r4, r5, d0
 8008df8:	4bc3      	ldr	r3, [pc, #780]	; (8009108 <atan+0x318>)
 8008dfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008dfe:	429e      	cmp	r6, r3
 8008e00:	46ab      	mov	fp, r5
 8008e02:	dd18      	ble.n	8008e36 <atan+0x46>
 8008e04:	4bc1      	ldr	r3, [pc, #772]	; (800910c <atan+0x31c>)
 8008e06:	429e      	cmp	r6, r3
 8008e08:	dc01      	bgt.n	8008e0e <atan+0x1e>
 8008e0a:	d109      	bne.n	8008e20 <atan+0x30>
 8008e0c:	b144      	cbz	r4, 8008e20 <atan+0x30>
 8008e0e:	4622      	mov	r2, r4
 8008e10:	462b      	mov	r3, r5
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 f9fd 	bl	8000214 <__adddf3>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	e006      	b.n	8008e2e <atan+0x3e>
 8008e20:	f1bb 0f00 	cmp.w	fp, #0
 8008e24:	f300 8131 	bgt.w	800908a <atan+0x29a>
 8008e28:	a59b      	add	r5, pc, #620	; (adr r5, 8009098 <atan+0x2a8>)
 8008e2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e2e:	ec45 4b10 	vmov	d0, r4, r5
 8008e32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	4bb6      	ldr	r3, [pc, #728]	; (8009110 <atan+0x320>)
 8008e38:	429e      	cmp	r6, r3
 8008e3a:	dc14      	bgt.n	8008e66 <atan+0x76>
 8008e3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008e40:	429e      	cmp	r6, r3
 8008e42:	dc0d      	bgt.n	8008e60 <atan+0x70>
 8008e44:	a396      	add	r3, pc, #600	; (adr r3, 80090a0 <atan+0x2b0>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	ee10 0a10 	vmov	r0, s0
 8008e4e:	4629      	mov	r1, r5
 8008e50:	f7f7 f9e0 	bl	8000214 <__adddf3>
 8008e54:	4baf      	ldr	r3, [pc, #700]	; (8009114 <atan+0x324>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	f7f7 fe22 	bl	8000aa0 <__aeabi_dcmpgt>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d1e6      	bne.n	8008e2e <atan+0x3e>
 8008e60:	f04f 3aff 	mov.w	sl, #4294967295
 8008e64:	e02b      	b.n	8008ebe <atan+0xce>
 8008e66:	f000 f963 	bl	8009130 <fabs>
 8008e6a:	4bab      	ldr	r3, [pc, #684]	; (8009118 <atan+0x328>)
 8008e6c:	429e      	cmp	r6, r3
 8008e6e:	ec55 4b10 	vmov	r4, r5, d0
 8008e72:	f300 80bf 	bgt.w	8008ff4 <atan+0x204>
 8008e76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008e7a:	429e      	cmp	r6, r3
 8008e7c:	f300 80a0 	bgt.w	8008fc0 <atan+0x1d0>
 8008e80:	ee10 2a10 	vmov	r2, s0
 8008e84:	ee10 0a10 	vmov	r0, s0
 8008e88:	462b      	mov	r3, r5
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	f7f7 f9c2 	bl	8000214 <__adddf3>
 8008e90:	4ba0      	ldr	r3, [pc, #640]	; (8009114 <atan+0x324>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	f7f7 f9bc 	bl	8000210 <__aeabi_dsub>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	460f      	mov	r7, r1
 8008e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	f7f7 f9b5 	bl	8000214 <__adddf3>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4630      	mov	r0, r6
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	f7f7 fc8f 	bl	80007d4 <__aeabi_ddiv>
 8008eb6:	f04f 0a00 	mov.w	sl, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	f7f7 fb5b 	bl	8000580 <__aeabi_dmul>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4680      	mov	r8, r0
 8008ed0:	4689      	mov	r9, r1
 8008ed2:	f7f7 fb55 	bl	8000580 <__aeabi_dmul>
 8008ed6:	a374      	add	r3, pc, #464	; (adr r3, 80090a8 <atan+0x2b8>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	4606      	mov	r6, r0
 8008ede:	460f      	mov	r7, r1
 8008ee0:	f7f7 fb4e 	bl	8000580 <__aeabi_dmul>
 8008ee4:	a372      	add	r3, pc, #456	; (adr r3, 80090b0 <atan+0x2c0>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f993 	bl	8000214 <__adddf3>
 8008eee:	4632      	mov	r2, r6
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	f7f7 fb45 	bl	8000580 <__aeabi_dmul>
 8008ef6:	a370      	add	r3, pc, #448	; (adr r3, 80090b8 <atan+0x2c8>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	f7f7 f98a 	bl	8000214 <__adddf3>
 8008f00:	4632      	mov	r2, r6
 8008f02:	463b      	mov	r3, r7
 8008f04:	f7f7 fb3c 	bl	8000580 <__aeabi_dmul>
 8008f08:	a36d      	add	r3, pc, #436	; (adr r3, 80090c0 <atan+0x2d0>)
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f7f7 f981 	bl	8000214 <__adddf3>
 8008f12:	4632      	mov	r2, r6
 8008f14:	463b      	mov	r3, r7
 8008f16:	f7f7 fb33 	bl	8000580 <__aeabi_dmul>
 8008f1a:	a36b      	add	r3, pc, #428	; (adr r3, 80090c8 <atan+0x2d8>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f7f7 f978 	bl	8000214 <__adddf3>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	f7f7 fb2a 	bl	8000580 <__aeabi_dmul>
 8008f2c:	a368      	add	r3, pc, #416	; (adr r3, 80090d0 <atan+0x2e0>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	f7f7 f96f 	bl	8000214 <__adddf3>
 8008f36:	4642      	mov	r2, r8
 8008f38:	464b      	mov	r3, r9
 8008f3a:	f7f7 fb21 	bl	8000580 <__aeabi_dmul>
 8008f3e:	a366      	add	r3, pc, #408	; (adr r3, 80090d8 <atan+0x2e8>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	4630      	mov	r0, r6
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	f7f7 fb18 	bl	8000580 <__aeabi_dmul>
 8008f50:	a363      	add	r3, pc, #396	; (adr r3, 80090e0 <atan+0x2f0>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 f95b 	bl	8000210 <__aeabi_dsub>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	f7f7 fb0f 	bl	8000580 <__aeabi_dmul>
 8008f62:	a361      	add	r3, pc, #388	; (adr r3, 80090e8 <atan+0x2f8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 f952 	bl	8000210 <__aeabi_dsub>
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	f7f7 fb06 	bl	8000580 <__aeabi_dmul>
 8008f74:	a35e      	add	r3, pc, #376	; (adr r3, 80090f0 <atan+0x300>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 f949 	bl	8000210 <__aeabi_dsub>
 8008f7e:	4632      	mov	r2, r6
 8008f80:	463b      	mov	r3, r7
 8008f82:	f7f7 fafd 	bl	8000580 <__aeabi_dmul>
 8008f86:	a35c      	add	r3, pc, #368	; (adr r3, 80090f8 <atan+0x308>)
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f7f7 f940 	bl	8000210 <__aeabi_dsub>
 8008f90:	4632      	mov	r2, r6
 8008f92:	463b      	mov	r3, r7
 8008f94:	f7f7 faf4 	bl	8000580 <__aeabi_dmul>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 f938 	bl	8000214 <__adddf3>
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	f7f7 faea 	bl	8000580 <__aeabi_dmul>
 8008fac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	d14b      	bne.n	800904e <atan+0x25e>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 f929 	bl	8000210 <__aeabi_dsub>
 8008fbe:	e72c      	b.n	8008e1a <atan+0x2a>
 8008fc0:	ee10 0a10 	vmov	r0, s0
 8008fc4:	4b53      	ldr	r3, [pc, #332]	; (8009114 <atan+0x324>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7f7 f921 	bl	8000210 <__aeabi_dsub>
 8008fce:	4b51      	ldr	r3, [pc, #324]	; (8009114 <atan+0x324>)
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 f91b 	bl	8000214 <__adddf3>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	f7f7 fbf5 	bl	80007d4 <__aeabi_ddiv>
 8008fea:	f04f 0a01 	mov.w	sl, #1
 8008fee:	4604      	mov	r4, r0
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	e764      	b.n	8008ebe <atan+0xce>
 8008ff4:	4b49      	ldr	r3, [pc, #292]	; (800911c <atan+0x32c>)
 8008ff6:	429e      	cmp	r6, r3
 8008ff8:	da1d      	bge.n	8009036 <atan+0x246>
 8008ffa:	ee10 0a10 	vmov	r0, s0
 8008ffe:	4b48      	ldr	r3, [pc, #288]	; (8009120 <atan+0x330>)
 8009000:	2200      	movs	r2, #0
 8009002:	4629      	mov	r1, r5
 8009004:	f7f7 f904 	bl	8000210 <__aeabi_dsub>
 8009008:	4b45      	ldr	r3, [pc, #276]	; (8009120 <atan+0x330>)
 800900a:	4606      	mov	r6, r0
 800900c:	460f      	mov	r7, r1
 800900e:	2200      	movs	r2, #0
 8009010:	4620      	mov	r0, r4
 8009012:	4629      	mov	r1, r5
 8009014:	f7f7 fab4 	bl	8000580 <__aeabi_dmul>
 8009018:	4b3e      	ldr	r3, [pc, #248]	; (8009114 <atan+0x324>)
 800901a:	2200      	movs	r2, #0
 800901c:	f7f7 f8fa 	bl	8000214 <__adddf3>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f7f7 fbd4 	bl	80007d4 <__aeabi_ddiv>
 800902c:	f04f 0a02 	mov.w	sl, #2
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	e743      	b.n	8008ebe <atan+0xce>
 8009036:	462b      	mov	r3, r5
 8009038:	ee10 2a10 	vmov	r2, s0
 800903c:	4939      	ldr	r1, [pc, #228]	; (8009124 <atan+0x334>)
 800903e:	2000      	movs	r0, #0
 8009040:	f7f7 fbc8 	bl	80007d4 <__aeabi_ddiv>
 8009044:	f04f 0a03 	mov.w	sl, #3
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	e737      	b.n	8008ebe <atan+0xce>
 800904e:	4b36      	ldr	r3, [pc, #216]	; (8009128 <atan+0x338>)
 8009050:	4e36      	ldr	r6, [pc, #216]	; (800912c <atan+0x33c>)
 8009052:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009056:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800905a:	e9da 2300 	ldrd	r2, r3, [sl]
 800905e:	f7f7 f8d7 	bl	8000210 <__aeabi_dsub>
 8009062:	4622      	mov	r2, r4
 8009064:	462b      	mov	r3, r5
 8009066:	f7f7 f8d3 	bl	8000210 <__aeabi_dsub>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009072:	f7f7 f8cd 	bl	8000210 <__aeabi_dsub>
 8009076:	f1bb 0f00 	cmp.w	fp, #0
 800907a:	4604      	mov	r4, r0
 800907c:	460d      	mov	r5, r1
 800907e:	f6bf aed6 	bge.w	8008e2e <atan+0x3e>
 8009082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009086:	461d      	mov	r5, r3
 8009088:	e6d1      	b.n	8008e2e <atan+0x3e>
 800908a:	a51d      	add	r5, pc, #116	; (adr r5, 8009100 <atan+0x310>)
 800908c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009090:	e6cd      	b.n	8008e2e <atan+0x3e>
 8009092:	bf00      	nop
 8009094:	f3af 8000 	nop.w
 8009098:	54442d18 	.word	0x54442d18
 800909c:	bff921fb 	.word	0xbff921fb
 80090a0:	8800759c 	.word	0x8800759c
 80090a4:	7e37e43c 	.word	0x7e37e43c
 80090a8:	e322da11 	.word	0xe322da11
 80090ac:	3f90ad3a 	.word	0x3f90ad3a
 80090b0:	24760deb 	.word	0x24760deb
 80090b4:	3fa97b4b 	.word	0x3fa97b4b
 80090b8:	a0d03d51 	.word	0xa0d03d51
 80090bc:	3fb10d66 	.word	0x3fb10d66
 80090c0:	c54c206e 	.word	0xc54c206e
 80090c4:	3fb745cd 	.word	0x3fb745cd
 80090c8:	920083ff 	.word	0x920083ff
 80090cc:	3fc24924 	.word	0x3fc24924
 80090d0:	5555550d 	.word	0x5555550d
 80090d4:	3fd55555 	.word	0x3fd55555
 80090d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80090dc:	bfa2b444 	.word	0xbfa2b444
 80090e0:	52defd9a 	.word	0x52defd9a
 80090e4:	3fadde2d 	.word	0x3fadde2d
 80090e8:	af749a6d 	.word	0xaf749a6d
 80090ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80090f0:	fe231671 	.word	0xfe231671
 80090f4:	3fbc71c6 	.word	0x3fbc71c6
 80090f8:	9998ebc4 	.word	0x9998ebc4
 80090fc:	3fc99999 	.word	0x3fc99999
 8009100:	54442d18 	.word	0x54442d18
 8009104:	3ff921fb 	.word	0x3ff921fb
 8009108:	440fffff 	.word	0x440fffff
 800910c:	7ff00000 	.word	0x7ff00000
 8009110:	3fdbffff 	.word	0x3fdbffff
 8009114:	3ff00000 	.word	0x3ff00000
 8009118:	3ff2ffff 	.word	0x3ff2ffff
 800911c:	40038000 	.word	0x40038000
 8009120:	3ff80000 	.word	0x3ff80000
 8009124:	bff00000 	.word	0xbff00000
 8009128:	080097b0 	.word	0x080097b0
 800912c:	08009790 	.word	0x08009790

08009130 <fabs>:
 8009130:	ec51 0b10 	vmov	r0, r1, d0
 8009134:	ee10 2a10 	vmov	r2, s0
 8009138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800913c:	ec43 2b10 	vmov	d0, r2, r3
 8009140:	4770      	bx	lr
 8009142:	0000      	movs	r0, r0
 8009144:	0000      	movs	r0, r0
	...

08009148 <nan>:
 8009148:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009150 <nan+0x8>
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	00000000 	.word	0x00000000
 8009154:	7ff80000 	.word	0x7ff80000

08009158 <fabsf>:
 8009158:	ee10 3a10 	vmov	r3, s0
 800915c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009160:	ee00 3a10 	vmov	s0, r3
 8009164:	4770      	bx	lr
	...

08009168 <floorf>:
 8009168:	ee10 3a10 	vmov	r3, s0
 800916c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009170:	3a7f      	subs	r2, #127	; 0x7f
 8009172:	2a16      	cmp	r2, #22
 8009174:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009178:	dc2a      	bgt.n	80091d0 <floorf+0x68>
 800917a:	2a00      	cmp	r2, #0
 800917c:	da11      	bge.n	80091a2 <floorf+0x3a>
 800917e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80091e0 <floorf+0x78>
 8009182:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009186:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	dd05      	ble.n	800919c <floorf+0x34>
 8009190:	2b00      	cmp	r3, #0
 8009192:	da23      	bge.n	80091dc <floorf+0x74>
 8009194:	4a13      	ldr	r2, [pc, #76]	; (80091e4 <floorf+0x7c>)
 8009196:	2900      	cmp	r1, #0
 8009198:	bf18      	it	ne
 800919a:	4613      	movne	r3, r2
 800919c:	ee00 3a10 	vmov	s0, r3
 80091a0:	4770      	bx	lr
 80091a2:	4911      	ldr	r1, [pc, #68]	; (80091e8 <floorf+0x80>)
 80091a4:	4111      	asrs	r1, r2
 80091a6:	420b      	tst	r3, r1
 80091a8:	d0fa      	beq.n	80091a0 <floorf+0x38>
 80091aa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80091e0 <floorf+0x78>
 80091ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80091b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	ddef      	ble.n	800919c <floorf+0x34>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	bfbe      	ittt	lt
 80091c0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80091c4:	fa40 f202 	asrlt.w	r2, r0, r2
 80091c8:	189b      	addlt	r3, r3, r2
 80091ca:	ea23 0301 	bic.w	r3, r3, r1
 80091ce:	e7e5      	b.n	800919c <floorf+0x34>
 80091d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80091d4:	d3e4      	bcc.n	80091a0 <floorf+0x38>
 80091d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80091da:	4770      	bx	lr
 80091dc:	2300      	movs	r3, #0
 80091de:	e7dd      	b.n	800919c <floorf+0x34>
 80091e0:	7149f2ca 	.word	0x7149f2ca
 80091e4:	bf800000 	.word	0xbf800000
 80091e8:	007fffff 	.word	0x007fffff

080091ec <scalbnf>:
 80091ec:	ee10 3a10 	vmov	r3, s0
 80091f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80091f4:	d025      	beq.n	8009242 <scalbnf+0x56>
 80091f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80091fa:	d302      	bcc.n	8009202 <scalbnf+0x16>
 80091fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009200:	4770      	bx	lr
 8009202:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009206:	d122      	bne.n	800924e <scalbnf+0x62>
 8009208:	4b2a      	ldr	r3, [pc, #168]	; (80092b4 <scalbnf+0xc8>)
 800920a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80092b8 <scalbnf+0xcc>
 800920e:	4298      	cmp	r0, r3
 8009210:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009214:	db16      	blt.n	8009244 <scalbnf+0x58>
 8009216:	ee10 3a10 	vmov	r3, s0
 800921a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800921e:	3a19      	subs	r2, #25
 8009220:	4402      	add	r2, r0
 8009222:	2afe      	cmp	r2, #254	; 0xfe
 8009224:	dd15      	ble.n	8009252 <scalbnf+0x66>
 8009226:	ee10 3a10 	vmov	r3, s0
 800922a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80092bc <scalbnf+0xd0>
 800922e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80092c0 <scalbnf+0xd4>
 8009232:	2b00      	cmp	r3, #0
 8009234:	eeb0 7a67 	vmov.f32	s14, s15
 8009238:	bfb8      	it	lt
 800923a:	eef0 7a66 	vmovlt.f32	s15, s13
 800923e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009242:	4770      	bx	lr
 8009244:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80092c4 <scalbnf+0xd8>
 8009248:	ee20 0a27 	vmul.f32	s0, s0, s15
 800924c:	4770      	bx	lr
 800924e:	0dd2      	lsrs	r2, r2, #23
 8009250:	e7e6      	b.n	8009220 <scalbnf+0x34>
 8009252:	2a00      	cmp	r2, #0
 8009254:	dd06      	ble.n	8009264 <scalbnf+0x78>
 8009256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800925a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800925e:	ee00 3a10 	vmov	s0, r3
 8009262:	4770      	bx	lr
 8009264:	f112 0f16 	cmn.w	r2, #22
 8009268:	da1a      	bge.n	80092a0 <scalbnf+0xb4>
 800926a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800926e:	4298      	cmp	r0, r3
 8009270:	ee10 3a10 	vmov	r3, s0
 8009274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009278:	dd0a      	ble.n	8009290 <scalbnf+0xa4>
 800927a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80092bc <scalbnf+0xd0>
 800927e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80092c0 <scalbnf+0xd4>
 8009282:	eef0 7a40 	vmov.f32	s15, s0
 8009286:	2b00      	cmp	r3, #0
 8009288:	bf18      	it	ne
 800928a:	eeb0 0a47 	vmovne.f32	s0, s14
 800928e:	e7db      	b.n	8009248 <scalbnf+0x5c>
 8009290:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80092c4 <scalbnf+0xd8>
 8009294:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80092c8 <scalbnf+0xdc>
 8009298:	eef0 7a40 	vmov.f32	s15, s0
 800929c:	2b00      	cmp	r3, #0
 800929e:	e7f3      	b.n	8009288 <scalbnf+0x9c>
 80092a0:	3219      	adds	r2, #25
 80092a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80092a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80092aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 80092cc <scalbnf+0xe0>
 80092ae:	ee07 3a10 	vmov	s14, r3
 80092b2:	e7c4      	b.n	800923e <scalbnf+0x52>
 80092b4:	ffff3cb0 	.word	0xffff3cb0
 80092b8:	4c000000 	.word	0x4c000000
 80092bc:	7149f2ca 	.word	0x7149f2ca
 80092c0:	f149f2ca 	.word	0xf149f2ca
 80092c4:	0da24260 	.word	0x0da24260
 80092c8:	8da24260 	.word	0x8da24260
 80092cc:	33000000 	.word	0x33000000

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	; (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000018 	.word	0x20000018

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	4d0d      	ldr	r5, [pc, #52]	; (8009314 <__libc_init_array+0x38>)
 80092e0:	4c0d      	ldr	r4, [pc, #52]	; (8009318 <__libc_init_array+0x3c>)
 80092e2:	1b64      	subs	r4, r4, r5
 80092e4:	10a4      	asrs	r4, r4, #2
 80092e6:	2600      	movs	r6, #0
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	4d0b      	ldr	r5, [pc, #44]	; (800931c <__libc_init_array+0x40>)
 80092ee:	4c0c      	ldr	r4, [pc, #48]	; (8009320 <__libc_init_array+0x44>)
 80092f0:	f000 f82e 	bl	8009350 <_init>
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	2600      	movs	r6, #0
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	080097d8 	.word	0x080097d8
 8009318:	080097d8 	.word	0x080097d8
 800931c:	080097d8 	.word	0x080097d8
 8009320:	080097e0 	.word	0x080097e0

08009324 <memcpy>:
 8009324:	440a      	add	r2, r1
 8009326:	4291      	cmp	r1, r2
 8009328:	f100 33ff 	add.w	r3, r0, #4294967295
 800932c:	d100      	bne.n	8009330 <memcpy+0xc>
 800932e:	4770      	bx	lr
 8009330:	b510      	push	{r4, lr}
 8009332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800933a:	4291      	cmp	r1, r2
 800933c:	d1f9      	bne.n	8009332 <memcpy+0xe>
 800933e:	bd10      	pop	{r4, pc}

08009340 <memset>:
 8009340:	4402      	add	r2, r0
 8009342:	4603      	mov	r3, r0
 8009344:	4293      	cmp	r3, r2
 8009346:	d100      	bne.n	800934a <memset+0xa>
 8009348:	4770      	bx	lr
 800934a:	f803 1b01 	strb.w	r1, [r3], #1
 800934e:	e7f9      	b.n	8009344 <memset+0x4>

08009350 <_init>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	bf00      	nop
 8009354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009356:	bc08      	pop	{r3}
 8009358:	469e      	mov	lr, r3
 800935a:	4770      	bx	lr

0800935c <_fini>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr
