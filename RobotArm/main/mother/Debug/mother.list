
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00008960  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008b28  08008b28  00018b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bc0  08008bc0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc8  08008bc8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  20000074  08008c48  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  08008c48  00021b64  2**0
=======
  1 .text         0000acd8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800aea0  0800aea0  0001aea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b308  0800b308  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b310  0800b310  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b318  0800b318  0001b318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  2000007c  0800b398  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b5c  0800b398  00021b5c  2**0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   000185f5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c11  00000000  00000000  00038699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  0003c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025228  00000000  00000000  0003d320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c27  00000000  00000000  00062548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5fed  00000000  00000000  0007816f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e15c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  0014e1ac  2**2
=======
 12 .debug_info   0001a5f0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6a  00000000  00000000  0003a69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0003d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556f  00000000  00000000  0003f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001732f  00000000  00000000  00064c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6139  00000000  00000000  0007bf96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001520cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  00152120  2**2
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001e8:	08008b10 	.word	0x08008b10
=======
 80001e8:	0800ae88 	.word	0x0800ae88
>>>>>>> parent of feb78f6 (本番パフォーマンス)

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000200:	20000078 	.word	0x20000078
 8000204:	08008b10 	.word	0x08008b10
=======
 8000200:	20000080 	.word	0x20000080
 8000204:	0800ae88 	.word	0x0800ae88
>>>>>>> parent of feb78f6 (本番パフォーマンス)

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000ef2:	f007 fdf7 	bl	8008ae4 <memcpy>
=======
 8000ef2:	f009 ffb3 	bl	800ae5c <memcpy>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
<<<<<<< HEAD
 8000f1c:	f003 fa34 	bl	8004388 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f002 fa98 	bl	8003458 <HAL_Delay>
=======
 8000f1c:	f004 fea4 	bl	8005c68 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f003 fef0 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
<<<<<<< HEAD
 8000f5e:	f003 fa13 	bl	8004388 <HAL_I2C_Master_Transmit>
=======
 8000f5e:	f004 fe83 	bl	8005c68 <HAL_I2C_Master_Transmit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
<<<<<<< HEAD
 8000f7a:	f003 fb03 	bl	8004584 <HAL_I2C_Master_Receive>
=======
 8000f7a:	f004 ff73 	bl	8005e64 <HAL_I2C_Master_Receive>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
<<<<<<< HEAD
 800111c:	f006 ff44 	bl	8007fa8 <atan2>
=======
 800111c:	f008 fbe8 	bl	80098f0 <atan2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
<<<<<<< HEAD
 8001188:	f006 fec7 	bl	8007f1a <copysign>
=======
 8001188:	f008 fb28 	bl	80097dc <copysign>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
<<<<<<< HEAD
 80011a2:	f006 fecd 	bl	8007f40 <asin>
=======
 80011a2:	f008 fb71 	bl	8009888 <asin>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
<<<<<<< HEAD
 8001234:	f006 feb8 	bl	8007fa8 <atan2>
=======
 8001234:	f008 fb5c 	bl	80098f0 <atan2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"
#include "math.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	80da      	strh	r2, [r3, #6]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  ID = id;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	711a      	strb	r2, [r3, #4]
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_ZN3STS8moveContEtss>:

void STS::moveCont(uint16_t abs_speed, int16_t goal_position, int16_t now_position)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	747b      	strb	r3, [r7, #17]
 80012f6:	2305      	movs	r3, #5
 80012f8:	74fb      	strb	r3, [r7, #19]
 80012fa:	2303      	movs	r3, #3
 80012fc:	753b      	strb	r3, [r7, #20]
 80012fe:	232e      	movs	r3, #46	; 0x2e
 8001300:	757b      	strb	r3, [r7, #21]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	74bb      	strb	r3, [r7, #18]
  uint8_t checksum = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t diff = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
  int16_t inst_speed = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	847b      	strh	r3, [r7, #34]	; 0x22

  diff = abs(goal_position - now_position);
 800131a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bfb8      	it	lt
 8001328:	425b      	neglt	r3, r3
 800132a:	837b      	strh	r3, [r7, #26]

  if(diff < 10){
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	2b09      	cmp	r3, #9
 8001330:	d802      	bhi.n	8001338 <_ZN3STS8moveContEtss+0x70>
	  inst_speed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001336:	e01f      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else if(diff < abs_speed * abs_speed / 6000){
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <_ZN3STS8moveContEtss+0x174>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	11c9      	asrs	r1, r1, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	429a      	cmp	r2, r3
 8001350:	da10      	bge.n	8001374 <_ZN3STS8moveContEtss+0xac>
	  inst_speed = sqrt(1500 * diff);
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f9a6 	bl	80016ae <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbb9 	bl	8000ae0 <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	e001      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else{
	  inst_speed = abs_speed;
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if(goal_position < now_position){
 8001378:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	da02      	bge.n	800138a <_ZN3STS8moveContEtss+0xc2>
	  speed = inst_speed;
 8001384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	e003      	b.n	8001392 <_ZN3STS8moveContEtss+0xca>
  }else{
	  speed = -inst_speed;
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	425b      	negs	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((goal_position - now_position < 0 && speed > 0) || (goal_position - now_position > 0 && speed < 0))
 8001392:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da03      	bge.n	80013a8 <_ZN3STS8moveContEtss+0xe0>
 80013a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc0a      	bgt.n	80013be <_ZN3STS8moveContEtss+0xf6>
 80013a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd18      	ble.n	80013e8 <_ZN3STS8moveContEtss+0x120>
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da14      	bge.n	80013e8 <_ZN3STS8moveContEtss+0x120>
  {
    if (speed < 0)
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da04      	bge.n	80013d0 <_ZN3STS8moveContEtss+0x108>
    {
      speed = 32768 - speed;
 80013c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <_ZN3STS8moveContEtss+0x178>)
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    send_Buf[6] = speed;
 80013d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75bb      	strb	r3, [r7, #22]
    send_Buf[7] = speed >> 8;
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
<<<<<<< HEAD
 80013e4:	f002 f838 	bl	8003458 <HAL_Delay>
=======
 80013e4:	f003 fc90 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  for (int i = 2; i < 8; i++)
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dc0d      	bgt.n	800140e <_ZN3STS8moveContEtss+0x146>
  {
    checksum += send_Buf[i];
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	4413      	add	r3, r2
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e7ee      	b.n	80013ec <_ZN3STS8moveContEtss+0x124>
  }
  checksum = ~checksum;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	43db      	mvns	r3, r3
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	763b      	strb	r3, [r7, #24]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	2332      	movs	r3, #50	; 0x32
 8001428:	2209      	movs	r2, #9
<<<<<<< HEAD
 800142a:	f005 ff76 	bl	800731a <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f002 f812 	bl	8003458 <HAL_Delay>
=======
 800142a:	f007 fbe6 	bl	8008bfa <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f003 fc6a 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	057619f1 	.word	0x057619f1
 8001440:	ffff8000 	.word	0xffff8000

08001444 <_ZN3STS9moveStop1Ess>:

void STS::moveStop1(int16_t speed, int16_t goal_position){
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	803b      	strh	r3, [r7, #0]
	uint8_t send_Buf[13] = {255, 255, ID, 9, 3, 42, 0, 0, 0, 0, 0, 0, 0};
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	731a      	strb	r2, [r3, #12]
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	723b      	strb	r3, [r7, #8]
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	727b      	strb	r3, [r7, #9]
 800146a:	2309      	movs	r3, #9
 800146c:	72fb      	strb	r3, [r7, #11]
 800146e:	2303      	movs	r3, #3
 8001470:	733b      	strb	r3, [r7, #12]
 8001472:	232a      	movs	r3, #42	; 0x2a
 8001474:	737b      	strb	r3, [r7, #13]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	72bb      	strb	r3, [r7, #10]
	uint8_t checksum = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]

	goal_position = 4095 - goal_position;
 8001480:	883b      	ldrh	r3, [r7, #0]
 8001482:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001486:	330f      	adds	r3, #15
 8001488:	b29b      	uxth	r3, r3
 800148a:	803b      	strh	r3, [r7, #0]

	send_Buf[6] = goal_position;
 800148c:	883b      	ldrh	r3, [r7, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	73bb      	strb	r3, [r7, #14]
	send_Buf[7] = goal_position >> 8;
 8001492:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001496:	121b      	asrs	r3, r3, #8
 8001498:	b21b      	sxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]

	send_Buf[10] = speed;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	74bb      	strb	r3, [r7, #18]
	send_Buf[11] = speed >> 8;
 80014a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014a8:	121b      	asrs	r3, r3, #8
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	74fb      	strb	r3, [r7, #19]

	for (int i = 2; i < 12; i++)
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0b      	cmp	r3, #11
 80014b8:	dc0b      	bgt.n	80014d2 <_ZN3STS9moveStop1Ess+0x8e>
	{
	checksum += send_Buf[i];
 80014ba:	f107 0208 	add.w	r2, r7, #8
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4413      	add	r3, r2
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	4413      	add	r3, r2
 80014c8:	77fb      	strb	r3, [r7, #31]
	for (int i = 2; i < 12; i++)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	e7f0      	b.n	80014b4 <_ZN3STS9moveStop1Ess+0x70>
	}
	checksum = ~checksum;
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
	send_Buf[12] = checksum;
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(UART, send_Buf, 13, 50);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	2332      	movs	r3, #50	; 0x32
 80014e6:	220d      	movs	r2, #13
<<<<<<< HEAD
 80014e8:	f005 ff17 	bl	800731a <HAL_UART_Transmit>
	HAL_Delay(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f001 ffb3 	bl	8003458 <HAL_Delay>
=======
 80014e8:	f007 fb87 	bl	8008bfa <HAL_UART_Transmit>
	HAL_Delay(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f003 fc0b 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZN3STS9moveStop3Ess>:

void STS::moveStop3(int16_t speed, int16_t goal_position){
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	803b      	strh	r3, [r7, #0]
	uint8_t send_Buf[13] = {255, 255, ID, 9, 3, 42, 0, 0, 0, 0, 0, 0, 0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	731a      	strb	r2, [r3, #12]
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	723b      	strb	r3, [r7, #8]
 800151c:	23ff      	movs	r3, #255	; 0xff
 800151e:	727b      	strb	r3, [r7, #9]
 8001520:	2309      	movs	r3, #9
 8001522:	72fb      	strb	r3, [r7, #11]
 8001524:	2303      	movs	r3, #3
 8001526:	733b      	strb	r3, [r7, #12]
 8001528:	232a      	movs	r3, #42	; 0x2a
 800152a:	737b      	strb	r3, [r7, #13]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	72bb      	strb	r3, [r7, #10]
	uint8_t checksum = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	77fb      	strb	r3, [r7, #31]

	send_Buf[6] = goal_position;
 8001536:	883b      	ldrh	r3, [r7, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	73bb      	strb	r3, [r7, #14]
	send_Buf[7] = goal_position >> 8;
 800153c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b21b      	sxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	73fb      	strb	r3, [r7, #15]

	send_Buf[10] = speed;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	74bb      	strb	r3, [r7, #18]
	send_Buf[11] = speed >> 8;
 800154e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	b21b      	sxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	74fb      	strb	r3, [r7, #19]

	for (int i = 2; i < 12; i++)
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b0b      	cmp	r3, #11
 8001562:	dc0b      	bgt.n	800157c <_ZN3STS9moveStop3Ess+0x82>
	{
	checksum += send_Buf[i];
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	4413      	add	r3, r2
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	4413      	add	r3, r2
 8001572:	77fb      	strb	r3, [r7, #31]
	for (int i = 2; i < 12; i++)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3301      	adds	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e7f0      	b.n	800155e <_ZN3STS9moveStop3Ess+0x64>
	}
	checksum = ~checksum;
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	43db      	mvns	r3, r3
 8001580:	77fb      	strb	r3, [r7, #31]
	send_Buf[12] = checksum;
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(UART, send_Buf, 13, 50);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	f107 0108 	add.w	r1, r7, #8
 800158e:	2332      	movs	r3, #50	; 0x32
 8001590:	220d      	movs	r2, #13
<<<<<<< HEAD
 8001592:	f005 fec2 	bl	800731a <HAL_UART_Transmit>
	HAL_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f001 ff5e 	bl	8003458 <HAL_Delay>
=======
 8001592:	f007 fb32 	bl	8008bfa <HAL_UART_Transmit>
	HAL_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f003 fbb6 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN3STS4sendEv>:

void STS::send()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	23ff      	movs	r3, #255	; 0xff
 80015b8:	723b      	strb	r3, [r7, #8]
 80015ba:	23ff      	movs	r3, #255	; 0xff
 80015bc:	727b      	strb	r3, [r7, #9]
 80015be:	2304      	movs	r3, #4
 80015c0:	72fb      	strb	r3, [r7, #11]
 80015c2:	2302      	movs	r3, #2
 80015c4:	733b      	strb	r3, [r7, #12]
 80015c6:	2338      	movs	r3, #56	; 0x38
 80015c8:	737b      	strb	r3, [r7, #13]
 80015ca:	2302      	movs	r3, #2
 80015cc:	73bb      	strb	r3, [r7, #14]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	791b      	ldrb	r3, [r3, #4]
 80015d2:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	dc0b      	bgt.n	80015fa <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4413      	add	r3, r2
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	4413      	add	r3, r2
 80015f0:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	e7f0      	b.n	80015dc <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f107 0108 	add.w	r1, r7, #8
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2208      	movs	r2, #8
<<<<<<< HEAD
 8001610:	f005 fe83 	bl	800731a <HAL_UART_Transmit>
=======
 8001610:	f007 faf3 	bl	8008bfa <HAL_UART_Transmit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 8001628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001638:	4293      	cmp	r3, r2
 800163a:	dd08      	ble.n	800164e <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	b25a      	sxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001660:	4293      	cmp	r3, r2
 8001662:	dd08      	ble.n	8001676 <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	b25a      	sxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800167c:	b29b      	uxth	r3, r3
 800167e:	031b      	lsls	r3, r3, #12
 8001680:	b29a      	uxth	r2, r3
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	811a      	strh	r2, [r3, #8]

  return -position;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800169a:	b29b      	uxth	r3, r3
 800169c:	425b      	negs	r3, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21b      	sxth	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe fef8 	bl	80004ac <__aeabi_i2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b10 	vmov	d0, r2, r3
<<<<<<< HEAD
 80016c4:	f006 fc72 	bl	8007fac <sqrt>
=======
 80016c4:	f008 f916 	bl	80098f4 <sqrt>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 80016c8:	eeb0 7a40 	vmov.f32	s14, s0
 80016cc:	eef0 7a60 	vmov.f32	s15, s1
 80016d0:	eeb0 0a47 	vmov.f32	s0, s14
 80016d4:	eef0 0a67 	vmov.f32	s1, s15
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
=======

080016de <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80016e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ec:	f008 f888 	bl	8009800 <cosf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
>>>>>>> parent of feb78f6 (本番パフォーマンス)
	...

080016e0 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
  {
    NeopixelTape.execute();
<<<<<<< HEAD
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80016f2:	f001 fd57 	bl	80031a4 <_ZN7WS2812C7executeEv>
=======
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001cc6:	f002 fec5 	bl	8004a54 <_ZN7WS2812C7executeEv>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200000e4 	.word	0x200000e4
 8001704:	20000360 	.word	0x20000360

08001708 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d104      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    millis++;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001720:	6013      	str	r3, [r2, #0]
  }
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000012c 	.word	0x2000012c
 8001734:	20001b2c 	.word	0x20001b2c

08001738 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b0ae      	sub	sp, #184	; 0xb8
 800173c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800173e:	f001 fe19 	bl	8003374 <HAL_Init>
=======
 8001d16:	f002 ff85 	bl	8004c24 <HAL_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f98d 	bl	8001a60 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001746:	f000 fbbf 	bl	8001ec8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800174a:	f000 fb8d 	bl	8001e68 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800174e:	f000 f9fd 	bl	8001b4c <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001752:	f000 fa2f 	bl	8001bb4 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8001756:	f000 fb29 	bl	8001dac <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 800175a:	f000 fb57 	bl	8001e0c <_ZL19MX_USART3_UART_Initv>
  MX_UART5_Init();
 800175e:	f000 faf7 	bl	8001d50 <_ZL13MX_UART5_Initv>
  MX_TIM6_Init();
 8001762:	f000 fab5 	bl	8001cd0 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
<<<<<<< HEAD
 8001766:	48a8      	ldr	r0, [pc, #672]	; (8001a08 <main+0x2d0>)
 8001768:	f001 fda5 	bl	80032b6 <_ZN7WS2812C4initEv>
  //  {
  //    while (1)
  //      ;
  //  }

  HAL_TIM_Base_Start_IT(&htim6);
 800176c:	48a7      	ldr	r0, [pc, #668]	; (8001a0c <main+0x2d4>)
 800176e:	f004 fbc1 	bl	8005ef4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	49a6      	ldr	r1, [pc, #664]	; (8001a10 <main+0x2d8>)
 8001776:	48a7      	ldr	r0, [pc, #668]	; (8001a14 <main+0x2dc>)
 8001778:	f005 fe61 	bl	800743e <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, tweliteRxBuf, sizeof(tweliteRxBuf));
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	49a6      	ldr	r1, [pc, #664]	; (8001a18 <main+0x2e0>)
 8001780:	48a6      	ldr	r0, [pc, #664]	; (8001a1c <main+0x2e4>)
 8001782:	f005 fe5c 	bl	800743e <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2102      	movs	r1, #2
 800178a:	48a5      	ldr	r0, [pc, #660]	; (8001a20 <main+0x2e8>)
 800178c:	f002 fc9e 	bl	80040cc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001794:	f001 fe60 	bl	8003458 <HAL_Delay>
=======
 8001d3e:	48b2      	ldr	r0, [pc, #712]	; (8002008 <main+0x2f8>)
 8001d40:	f002 ff11 	bl	8004b66 <_ZN7WS2812C4initEv>

  if (HAL_GPIO_ReadPin(dipsw1_GPIO_Port, dipsw1_Pin) == 1)
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	48b0      	ldr	r0, [pc, #704]	; (800200c <main+0x2fc>)
 8001d4a:	f003 fe17 	bl	800597c <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <main+0x56>
  {
    ID = 1;
 8001d5e:	4bac      	ldr	r3, [pc, #688]	; (8002010 <main+0x300>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e022      	b.n	8001dac <main+0x9c>
  }
  else if (HAL_GPIO_ReadPin(dipsw2_GPIO_Port, dipsw2_Pin) == 1)
 8001d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6a:	48a8      	ldr	r0, [pc, #672]	; (800200c <main+0x2fc>)
 8001d6c:	f003 fe06 	bl	800597c <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <main+0x78>
  {
    ID = 2;
 8001d80:	4ba3      	ldr	r3, [pc, #652]	; (8002010 <main+0x300>)
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e011      	b.n	8001dac <main+0x9c>
  }
  else if (HAL_GPIO_ReadPin(dipsw3_GPIO_Port, dipsw3_Pin) == 1)
 8001d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8c:	489f      	ldr	r0, [pc, #636]	; (800200c <main+0x2fc>)
 8001d8e:	f003 fdf5 	bl	800597c <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <main+0x9a>
  {
    ID = 3;
 8001da2:	4b9b      	ldr	r3, [pc, #620]	; (8002010 <main+0x300>)
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e000      	b.n	8001dac <main+0x9c>
  }
  else
  {
    while (1)
 8001daa:	e7fe      	b.n	8001daa <main+0x9a>
      ;
  }

  HAL_TIM_Base_Start_IT(&htim6);
 8001dac:	4899      	ldr	r0, [pc, #612]	; (8002014 <main+0x304>)
 8001dae:	f005 fd11 	bl	80077d4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4998      	ldr	r1, [pc, #608]	; (8002018 <main+0x308>)
 8001db6:	4899      	ldr	r0, [pc, #612]	; (800201c <main+0x30c>)
 8001db8:	f006 ffb1 	bl	8008d1e <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, tweliteRxBuf, sizeof(tweliteRxBuf));
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	4998      	ldr	r1, [pc, #608]	; (8002020 <main+0x310>)
 8001dc0:	4898      	ldr	r0, [pc, #608]	; (8002024 <main+0x314>)
 8001dc2:	f006 ffac 	bl	8008d1e <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4890      	ldr	r0, [pc, #576]	; (800200c <main+0x2fc>)
 8001dcc:	f003 fdee 	bl	80059ac <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd4:	f002 ff98 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  while (!ready)
 8001798:	4ba2      	ldr	r3, [pc, #648]	; (8001a24 <main+0x2ec>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d116      	bne.n	80017ce <main+0x96>
  {
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28 << 1, 10, 1000) == HAL_OK)
<<<<<<< HEAD
 80017a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a4:	220a      	movs	r2, #10
 80017a6:	2150      	movs	r1, #80	; 0x50
 80017a8:	489f      	ldr	r0, [pc, #636]	; (8001a28 <main+0x2f0>)
 80017aa:	f003 f911 	bl	80049d0 <HAL_I2C_IsDeviceReady>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <main+0x8e>
=======
 8001de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de4:	220a      	movs	r2, #10
 8001de6:	2150      	movs	r1, #80	; 0x50
 8001de8:	4890      	ldr	r0, [pc, #576]	; (800202c <main+0x31c>)
 8001dea:	f004 fa61 	bl	80062b0 <HAL_I2C_IsDeviceReady>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <main+0xf6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
      ready = 1;
 80017be:	4b99      	ldr	r3, [pc, #612]	; (8001a24 <main+0x2ec>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e7e8      	b.n	8001798 <main+0x60>
    }
    else
    {
      HAL_Delay(100);
<<<<<<< HEAD
 80017c6:	2064      	movs	r0, #100	; 0x64
 80017c8:	f001 fe46 	bl	8003458 <HAL_Delay>
=======
 8001e06:	2064      	movs	r0, #100	; 0x64
 8001e08:	f002 ff7e 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  while (!ready)
 80017cc:	e7e4      	b.n	8001798 <main+0x60>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 80017ce:	2328      	movs	r3, #40	; 0x28
 80017d0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  BNO055 bno055(hi2c1, address);
<<<<<<< HEAD
 80017d4:	4c94      	ldr	r4, [pc, #592]	; (8001a28 <main+0x2f0>)
 80017d6:	f107 050c 	add.w	r5, r7, #12
 80017da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80017de:	9312      	str	r3, [sp, #72]	; 0x48
 80017e0:	4668      	mov	r0, sp
 80017e2:	f104 030c 	add.w	r3, r4, #12
 80017e6:	2248      	movs	r2, #72	; 0x48
 80017e8:	4619      	mov	r1, r3
 80017ea:	f007 f97b 	bl	8008ae4 <memcpy>
 80017ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017f2:	4628      	mov	r0, r5
 80017f4:	f7ff fb6e 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
=======
 8001e14:	4c85      	ldr	r4, [pc, #532]	; (800202c <main+0x31c>)
 8001e16:	f107 050c 	add.w	r5, r7, #12
 8001e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e1e:	9312      	str	r3, [sp, #72]	; 0x48
 8001e20:	4668      	mov	r0, sp
 8001e22:	f104 030c 	add.w	r3, r4, #12
 8001e26:	2248      	movs	r2, #72	; 0x48
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f009 f817 	bl	800ae5c <memcpy>
 8001e2e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e32:	4628      	mov	r0, r5
 8001e34:	f7ff f84e 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    e = bno055.get_eular();
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc37 	bl	8001070 <_ZN6BNO0559get_eularEv>
 8001802:	eef0 6a40 	vmov.f32	s13, s0
 8001806:	eeb0 7a60 	vmov.f32	s14, s1
 800180a:	eef0 7a41 	vmov.f32	s15, s2
 800180e:	edc7 6a00 	vstr	s13, [r7]
 8001812:	ed87 7a01 	vstr	s14, [r7, #4]
 8001816:	edc7 7a02 	vstr	s15, [r7, #8]
    gyro = (e.z / M_PI) * 180;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe57 	bl	80004d0 <__aeabi_f2d>
 8001822:	a377      	add	r3, pc, #476	; (adr r3, 8001a00 <main+0x2c8>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe ffd4 	bl	80007d4 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <main+0x2f4>)
 800183a:	f7fe fea1 	bl	8000580 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f94b 	bl	8000ae0 <__aeabi_d2iz>
 800184a:	4603      	mov	r3, r0
 800184c:	b21a      	sxth	r2, r3
 800184e:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <main+0x2f8>)
 8001850:	801a      	strh	r2, [r3, #0]

    ledPos0 = (-gyro + ((servoPos0 % 4096 + 4096) % 4096) * 360 / 4096 + 360) % 360;
 8001852:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <main+0x2fc>)
 8001854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001858:	425a      	negs	r2, r3
 800185a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001862:	bf58      	it	pl
 8001864:	4253      	negpl	r3, r2
 8001866:	b21b      	sxth	r3, r3
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	425a      	negs	r2, r3
 800186e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001872:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001876:	bf58      	it	pl
 8001878:	4253      	negpl	r3, r2
 800187a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	da01      	bge.n	800188a <main+0x152>
 8001886:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800188a:	131b      	asrs	r3, r3, #12
 800188c:	461a      	mov	r2, r3
 800188e:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <main+0x2f8>)
 8001890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800189a:	4a67      	ldr	r2, [pc, #412]	; (8001a38 <main+0x300>)
 800189c:	fb82 1203 	smull	r1, r2, r2, r3
 80018a0:	441a      	add	r2, r3
 80018a2:	1211      	asrs	r1, r2, #8
 80018a4:	17da      	asrs	r2, r3, #31
 80018a6:	1a8a      	subs	r2, r1, r2
 80018a8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80018ac:	fb01 f202 	mul.w	r2, r1, r2
 80018b0:	1a9a      	subs	r2, r3, r2
 80018b2:	b212      	sxth	r2, r2
 80018b4:	4b61      	ldr	r3, [pc, #388]	; (8001a3c <main+0x304>)
 80018b6:	801a      	strh	r2, [r3, #0]
    ledPos2 = (ledPos0 + ((servoPos2 % 4096 + 4096) % 4096) * 360 / 4096) % 360;
 80018b8:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <main+0x304>)
 80018ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018be:	4619      	mov	r1, r3
 80018c0:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <main+0x308>)
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	425a      	negs	r2, r3
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018d0:	bf58      	it	pl
 80018d2:	4253      	negpl	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018da:	425a      	negs	r2, r3
 80018dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da01      	bge.n	80018f8 <main+0x1c0>
 80018f4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018f8:	131b      	asrs	r3, r3, #12
 80018fa:	440b      	add	r3, r1
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <main+0x300>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	441a      	add	r2, r3
 8001904:	1211      	asrs	r1, r2, #8
 8001906:	17da      	asrs	r2, r3, #31
 8001908:	1a8a      	subs	r2, r1, r2
 800190a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800190e:	fb01 f202 	mul.w	r2, r1, r2
 8001912:	1a9a      	subs	r2, r3, r2
 8001914:	b212      	sxth	r2, r2
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <main+0x30c>)
 8001918:	801a      	strh	r2, [r3, #0]

    get_position(0);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 fb78 	bl	8002010 <_Z12get_positionh>
    get_position(2);
 8001920:	2002      	movs	r0, #2
 8001922:	f000 fb75 	bl	8002010 <_Z12get_positionh>




<<<<<<< HEAD
    twelite();
 8001926:	f000 fcb9 	bl	800229c <_Z7twelitev>
    //	setMode();

    if (gesture == 0)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <main+0x310>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <main+0x200>
    {
      pfmStatus = 1;
 8001932:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <main+0x314>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
    }
    if (gesture == 1)
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <main+0x310>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d102      	bne.n	8001946 <main+0x20e>
    {
      pfmStatus = 2;
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <main+0x314>)
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
    }
    if (gesture == 2)
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <main+0x310>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d102      	bne.n	8001954 <main+0x21c>
    {
      pfmStatus = 3;
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <main+0x314>)
 8001950:	2203      	movs	r2, #3
 8001952:	701a      	strb	r2, [r3, #0]
    }
=======
        twelite();
 8001f66:	f000 fd81 	bl	8002a6c <_Z7twelitev>
        setMode();
 8001f6a:	f000 fe1b 	bl	8002ba4 <_Z7setModev>
        if (mode == 0)
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <main+0x33c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <main+0x26c>
        {
          mode0();
 8001f76:	f000 ff39 	bl	8002dec <_Z5mode0v>
 8001f7a:	e75d      	b.n	8001e38 <main+0x128>
        }
        else if (mode == 1 || millis < 7500)
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <main+0x33c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <main+0x280>
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <main+0x340>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d802      	bhi.n	8001f96 <main+0x286>
        {
          mode1();
 8001f90:	f000 ff80 	bl	8002e94 <_Z5mode1v>
 8001f94:	e0d8      	b.n	8002148 <main+0x438>
        }
        else if (mode == 2 || millis < 22500)
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <main+0x33c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d005      	beq.n	8001faa <main+0x29a>
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <main+0x340>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f245 72e3 	movw	r2, #22499	; 0x57e3
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d802      	bhi.n	8001fb0 <main+0x2a0>
        {
          mode2();
 8001faa:	f000 ffbf 	bl	8002f2c <_Z5mode2v>
 8001fae:	e0cb      	b.n	8002148 <main+0x438>
        }
        else if (mode == 3 || millis < 37000)
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <main+0x33c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d005      	beq.n	8001fc4 <main+0x2b4>
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <main+0x340>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f249 0287 	movw	r2, #36999	; 0x9087
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d802      	bhi.n	8001fca <main+0x2ba>
        {
          mode3();
 8001fc4:	f000 ffe0 	bl	8002f88 <_Z5mode3v>
 8001fc8:	e0be      	b.n	8002148 <main+0x438>
        }
        else if (mode == 4 || millis < 52000)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <main+0x33c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d005      	beq.n	8001fde <main+0x2ce>
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <main+0x340>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f64c 321f 	movw	r2, #51999	; 0xcb1f
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <main+0x2d4>
        {
          mode4();
 8001fde:	f001 f94f 	bl	8003280 <_Z5mode4v>
 8001fe2:	e0b1      	b.n	8002148 <main+0x438>
        }
        else if (mode == 5 || millis < 60000)
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <main+0x33c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d005      	beq.n	8001ff8 <main+0x2e8>
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <main+0x340>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d82d      	bhi.n	8002054 <main+0x344>
        {
          mode5();
 8001ff8:	f001 fb4a 	bl	8003690 <_Z5mode5v>
 8001ffc:	e0a4      	b.n	8002148 <main+0x438>
 8001ffe:	bf00      	nop
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb
 8002008:	20000368 	.word	0x20000368
 800200c:	40020000 	.word	0x40020000
 8002010:	20001b34 	.word	0x20001b34
 8002014:	20000134 	.word	0x20000134
 8002018:	20001a2c 	.word	0x20001a2c
 800201c:	20000220 	.word	0x20000220
 8002020:	20001aac 	.word	0x20001aac
 8002024:	200001dc 	.word	0x200001dc
 8002028:	20001b30 	.word	0x20001b30
 800202c:	20000098 	.word	0x20000098
 8002030:	40668000 	.word	0x40668000
 8002034:	20001b32 	.word	0x20001b32
 8002038:	20001a24 	.word	0x20001a24
 800203c:	b60b60b7 	.word	0xb60b60b7
 8002040:	20001b2c 	.word	0x20001b2c
 8002044:	20001a28 	.word	0x20001a28
 8002048:	20001b2e 	.word	0x20001b2e
 800204c:	20001b35 	.word	0x20001b35
 8002050:	20001b3c 	.word	0x20001b3c
        }
        else if (mode == 6 || millis < 67000)
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <main+0x43c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b06      	cmp	r3, #6
 800205a:	d004      	beq.n	8002066 <main+0x356>
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <main+0x440>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3c      	ldr	r2, [pc, #240]	; (8002154 <main+0x444>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d802      	bhi.n	800206c <main+0x35c>
        {
          mode6();
 8002066:	f001 fb5f 	bl	8003728 <_Z5mode6v>
 800206a:	e06d      	b.n	8002148 <main+0x438>
        }
        else if (mode == 7 || millis < 74500)
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <main+0x43c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b07      	cmp	r3, #7
 8002072:	d004      	beq.n	800207e <main+0x36e>
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <main+0x440>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <main+0x448>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d802      	bhi.n	8002084 <main+0x374>
        {
          mode7();
 800207e:	f001 fb9f 	bl	80037c0 <_Z5mode7v>
 8002082:	e061      	b.n	8002148 <main+0x438>
        }
        else if (mode == 8 || millis < 100000)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <main+0x43c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d004      	beq.n	8002096 <main+0x386>
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <main+0x440>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <main+0x44c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d802      	bhi.n	800209c <main+0x38c>
        {
          mode8();
 8002096:	f001 fbed 	bl	8003874 <_Z5mode8v>
 800209a:	e055      	b.n	8002148 <main+0x438>
        }
        else if (mode == 9 || millis < 200000)
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <main+0x43c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d004      	beq.n	80020ae <main+0x39e>
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <main+0x440>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <main+0x450>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <main+0x3a4>
        {
          mode9();
 80020ae:	f001 fc03 	bl	80038b8 <_Z5mode9v>
 80020b2:	e049      	b.n	8002148 <main+0x438>
        }
        else if (mode == 10 || millis < 208500)
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <main+0x43c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b0a      	cmp	r3, #10
 80020ba:	d004      	beq.n	80020c6 <main+0x3b6>
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <main+0x440>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <main+0x454>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d802      	bhi.n	80020cc <main+0x3bc>
        {
          mode10();
 80020c6:	f001 fbfe 	bl	80038c6 <_Z6mode10v>
 80020ca:	e03d      	b.n	8002148 <main+0x438>
        }
        else if (mode == 11 || millis < 222500)
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <main+0x43c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b0b      	cmp	r3, #11
 80020d2:	d004      	beq.n	80020de <main+0x3ce>
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <main+0x440>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <main+0x458>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d802      	bhi.n	80020e4 <main+0x3d4>
        {
          mode11();
 80020de:	f001 fbf9 	bl	80038d4 <_Z6mode11v>
 80020e2:	e031      	b.n	8002148 <main+0x438>
        }
        else if (mode == 12 || millis < 234700)
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <main+0x43c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d004      	beq.n	80020f6 <main+0x3e6>
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <main+0x440>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <main+0x45c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <main+0x3ec>
        {
          mode12();
 80020f6:	f001 fcc5 	bl	8003a84 <_Z6mode12v>
 80020fa:	e025      	b.n	8002148 <main+0x438>
        }
        else if (mode == 13 || millis < 238000)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <main+0x43c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b0d      	cmp	r3, #13
 8002102:	d004      	beq.n	800210e <main+0x3fe>
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <main+0x440>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <main+0x460>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d802      	bhi.n	8002114 <main+0x404>
        {
          mode13();
 800210e:	f001 fe8b 	bl	8003e28 <_Z6mode13v>
 8002112:	e019      	b.n	8002148 <main+0x438>
        }
        else if (mode == 14 || millis < 244500)
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <main+0x43c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b0e      	cmp	r3, #14
 800211a:	d004      	beq.n	8002126 <main+0x416>
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <main+0x440>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <main+0x464>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d802      	bhi.n	800212c <main+0x41c>
        {
          mode14();
 8002126:	f001 ff15 	bl	8003f54 <_Z6mode14v>
 800212a:	e00d      	b.n	8002148 <main+0x438>
        }
        else if (mode == 15 || millis >= 244500)
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <main+0x43c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d004      	beq.n	800213e <main+0x42e>
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <main+0x440>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <main+0x464>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d902      	bls.n	8002144 <main+0x434>
        {
          mode15();
 800213e:	f001 ff79 	bl	8004034 <_Z6mode15v>
 8002142:	e001      	b.n	8002148 <main+0x438>
        }
        else
        {
          modeError();
 8002144:	f001 ffd2 	bl	80040ec <_Z9modeErrorv>
    e = bno055.get_eular();
 8002148:	e676      	b.n	8001e38 <main+0x128>
 800214a:	bf00      	nop
 800214c:	20001b35 	.word	0x20001b35
 8002150:	20001b3c 	.word	0x20001b3c
 8002154:	000105b7 	.word	0x000105b7
 8002158:	00012303 	.word	0x00012303
 800215c:	0001869f 	.word	0x0001869f
 8002160:	00030d3f 	.word	0x00030d3f
 8002164:	00032e73 	.word	0x00032e73
 8002168:	00036523 	.word	0x00036523
 800216c:	000394cb 	.word	0x000394cb
 8002170:	0003a1af 	.word	0x0003a1af
 8002174:	0003bb13 	.word	0x0003bb13
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    if (pfmStatus == 1)
 8001954:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <main+0x314>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <main+0x22a>
    {
      gesture0();
 800195c:	f000 fd26 	bl	80023ac <_Z8gesture0v>
 8001960:	e74a      	b.n	80017f8 <main+0xc0>
    }
    else if (pfmStatus == 2)
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <main+0x314>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d102      	bne.n	8001970 <main+0x238>
    {
      gesture1();
 800196a:	f000 fde9 	bl	8002540 <_Z8gesture1v>
 800196e:	e743      	b.n	80017f8 <main+0xc0>
    }
    else if (pfmStatus == 3)
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <main+0x314>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d102      	bne.n	800197e <main+0x246>
    {
      gesture2();
 8001978:	f000 fee6 	bl	8002748 <_Z8gesture2v>
 800197c:	e73c      	b.n	80017f8 <main+0xc0>
    }
    else
    {
        for (uint8_t led = 0; led < 48; led++)
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001984:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001988:	2b2f      	cmp	r3, #47	; 0x2f
 800198a:	d80f      	bhi.n	80019ac <main+0x274>
        {
          NeopixelTape.set_hsv(led, 180, 255, 255);
 800198c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001990:	b299      	uxth	r1, r3
 8001992:	23ff      	movs	r3, #255	; 0xff
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	22b4      	movs	r2, #180	; 0xb4
 800199a:	481b      	ldr	r0, [pc, #108]	; (8001a08 <main+0x2d0>)
 800199c:	f001 fb28 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
        for (uint8_t led = 0; led < 48; led++)
 80019a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80019aa:	e7eb      	b.n	8001984 <main+0x24c>
        }
        NeopixelTape.show();
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <main+0x2d0>)
 80019ae:	f001 fbe9 	bl	8003184 <_ZN7WS2812C4showEv>
        HAL_Delay(1);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f001 fd50 	bl	8003458 <HAL_Delay>
        servo0.moveCont(1000, 2047, servoPos0);
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <main+0x2fc>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c6:	4822      	ldr	r0, [pc, #136]	; (8001a50 <main+0x318>)
 80019c8:	f7ff fc7e 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(1000, 2047);
 80019cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019d4:	481f      	ldr	r0, [pc, #124]	; (8001a54 <main+0x31c>)
 80019d6:	f7ff fd35 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(500, 2047, servoPos2);
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <main+0x308>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019e8:	481b      	ldr	r0, [pc, #108]	; (8001a58 <main+0x320>)
 80019ea:	f7ff fc6d 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(500, 1800);
 80019ee:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80019f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019f6:	4819      	ldr	r0, [pc, #100]	; (8001a5c <main+0x324>)
 80019f8:	f7ff fd7f 	bl	80014fa <_ZN3STS9moveStop3Ess>
    }
  }
 80019fc:	e6fc      	b.n	80017f8 <main+0xc0>
 80019fe:	bf00      	nop
 8001a00:	54442d18 	.word	0x54442d18
 8001a04:	400921fb 	.word	0x400921fb
 8001a08:	20000360 	.word	0x20000360
 8001a0c:	2000012c 	.word	0x2000012c
 8001a10:	20001a20 	.word	0x20001a20
 8001a14:	20000218 	.word	0x20000218
 8001a18:	20001aa0 	.word	0x20001aa0
 8001a1c:	200001d4 	.word	0x200001d4
 8001a20:	40020000 	.word	0x40020000
 8001a24:	20001b24 	.word	0x20001b24
 8001a28:	20000090 	.word	0x20000090
 8001a2c:	40668000 	.word	0x40668000
 8001a30:	20001b26 	.word	0x20001b26
 8001a34:	20001a18 	.word	0x20001a18
 8001a38:	b60b60b7 	.word	0xb60b60b7
 8001a3c:	20001b20 	.word	0x20001b20
 8001a40:	20001a1c 	.word	0x20001a1c
 8001a44:	20001b22 	.word	0x20001b22
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	20001b34 	.word	0x20001b34
 8001a50:	200019e8 	.word	0x200019e8
 8001a54:	200019f4 	.word	0x200019f4
 8001a58:	20001a00 	.word	0x20001a00
 8001a5c:	20001a0c 	.word	0x20001a0c

08001a60 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	2234      	movs	r2, #52	; 0x34
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 f846 	bl	8008b00 <memset>
=======
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	2234      	movs	r2, #52	; 0x34
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f008 fe76 	bl	800ae78 <memset>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <_Z18SystemClock_Configv+0xe4>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <_Z18SystemClock_Configv+0xe4>)
 8001a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <_Z18SystemClock_Configv+0xe4>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <_Z18SystemClock_Configv+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <_Z18SystemClock_Configv+0xe8>)
 8001aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <_Z18SystemClock_Configv+0xe8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aca:	2302      	movs	r3, #2
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ad8:	23c0      	movs	r3, #192	; 0xc0
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001adc:	2306      	movs	r3, #6
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 ff13 	bl	8005918 <HAL_RCC_OscConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001b02:	f000 feeb 	bl	80028dc <Error_Handler>
=======
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fff7 	bl	80071f8 <HAL_RCC_OscConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800221a:	f001 ffb7 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	230f      	movs	r3, #15
 8001b08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
<<<<<<< HEAD
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fbb1 	bl	8005288 <HAL_RCC_ClockConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001b36:	f000 fed1 	bl	80028dc <Error_Handler>
=======
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fc95 	bl	8006b68 <HAL_RCC_ClockConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800224e:	f001 ff9d 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3750      	adds	r7, #80	; 0x50
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000

08001b4c <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b52:	4a16      	ldr	r2, [pc, #88]	; (8001bac <_ZL12MX_I2C1_Initv+0x60>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b58:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <_ZL12MX_I2C1_Initv+0x64>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
<<<<<<< HEAD
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001b8a:	f002 fab9 	bl	8004100 <HAL_I2C_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001b9e:	f000 fe9d 	bl	80028dc <Error_Handler>
=======
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 80022a2:	f003 fb9d 	bl	80059e0 <HAL_I2C_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80022b6:	f001 ff69 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000090 	.word	0x20000090
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	000186a0 	.word	0x000186a0

08001bb4 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08e      	sub	sp, #56	; 0x38
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	615a      	str	r2, [r3, #20]
 8001be2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <_ZL12MX_TIM3_Initv+0x118>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1 - 1;
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40 - 1;
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001bf8:	2227      	movs	r2, #39	; 0x27
 8001bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
<<<<<<< HEAD
 8001c08:	482f      	ldr	r0, [pc, #188]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001c0a:	f004 f923 	bl	8005e54 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001c1e:	f000 fe5d 	bl	80028dc <Error_Handler>
=======
 8002320:	482f      	ldr	r0, [pc, #188]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002322:	f005 fa07 	bl	8007734 <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8002336:	f001 ff29 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
<<<<<<< HEAD
 8001c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001c30:	f004 fdbc 	bl	80067ac <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8001c44:	f000 fe4a 	bl	80028dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c48:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001c4a:	f004 f9c3 	bl	8005fd4 <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001c5e:	f000 fe3d 	bl	80028dc <Error_Handler>
=======
 8002340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002344:	4619      	mov	r1, r3
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002348:	f005 fea0 	bl	800808c <HAL_TIM_ConfigClockSource>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800235c:	f001 ff16 	bl	800418c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002360:	481f      	ldr	r0, [pc, #124]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002362:	f005 faa7 	bl	80078b4 <HAL_TIM_PWM_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8002376:	f001 ff09 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 8001c6a:	f107 0320 	add.w	r3, r7, #32
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001c72:	f005 fa75 	bl	8007160 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 8001c86:	f000 fe29 	bl	80028dc <Error_Handler>
=======
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	4619      	mov	r1, r3
 8002388:	4815      	ldr	r0, [pc, #84]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 800238a:	f006 fb59 	bl	8008a40 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800239e:	f001 fef5 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
<<<<<<< HEAD
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001ca2:	f004 fcc1 	bl	8006628 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf14      	ite	ne
 8001cac:	2301      	movne	r3, #1
 8001cae:	2300      	moveq	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 8001cb6:	f000 fe11 	bl	80028dc <Error_Handler>
=======
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	4619      	mov	r1, r3
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 80023ba:	f005 fda5 	bl	8007f08 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80023ce:	f001 fedd 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 8001cba:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <_ZL12MX_TIM3_Initv+0x114>)
 8001cbc:	f000 ff4a 	bl	8002b54 <HAL_TIM_MspPostInit>
=======
 80023d2:	4803      	ldr	r0, [pc, #12]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 80023d4:	f002 f816 	bl	8004404 <HAL_TIM_MspPostInit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 8001cc0:	bf00      	nop
 8001cc2:	3738      	adds	r7, #56	; 0x38
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200000e4 	.word	0x200000e4
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <_ZL12MX_TIM6_Initv>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	; (8001d4c <_ZL12MX_TIM6_Initv+0x7c>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32 - 1;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001ce6:	221f      	movs	r2, #31
 8001ce8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001cf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
<<<<<<< HEAD
 8001cfe:	4812      	ldr	r0, [pc, #72]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001d00:	f004 f8a8 	bl	8005e54 <HAL_TIM_Base_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001d14:	f000 fde2 	bl	80028dc <Error_Handler>
=======
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 8002418:	f005 f98c 	bl	8007734 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 800242c:	f001 feae 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
<<<<<<< HEAD
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4808      	ldr	r0, [pc, #32]	; (8001d48 <_ZL12MX_TIM6_Initv+0x78>)
 8001d26:	f005 fa1b 	bl	8007160 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8001d3a:	f000 fdcf 	bl	80028dc <Error_Handler>
=======
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4808      	ldr	r0, [pc, #32]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 800243e:	f006 faff 	bl	8008a40 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8002452:	f001 fe9b 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000012c 	.word	0x2000012c
 8001d4c:	40001000 	.word	0x40001000

08001d50 <_ZL13MX_UART5_Initv>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d56:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_ZL13MX_UART5_Initv+0x58>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
<<<<<<< HEAD
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <_ZL13MX_UART5_Initv+0x54>)
 8001d88:	f005 fa7a 	bl	8007280 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8001d9c:	f000 fd9e 	bl	80028dc <Error_Handler>
=======
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 80024a0:	f006 fb5e 	bl	8008b60 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80024b4:	f001 fe6a 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200001d4 	.word	0x200001d4
 8001da8:	40005000 	.word	0x40005000

08001dac <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8001dba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dd0:	220c      	movs	r2, #12
 8001dd2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
<<<<<<< HEAD
 8001de0:	4807      	ldr	r0, [pc, #28]	; (8001e00 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001de2:	f005 fa4d 	bl	8007280 <HAL_UART_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8001df6:	f000 fd71 	bl	80028dc <Error_Handler>
=======
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024fa:	f006 fb31 	bl	8008b60 <HAL_UART_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800250e:	f001 fe3d 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000218 	.word	0x20000218
 8001e04:	40004400 	.word	0x40004400
 8001e08:	000f4240 	.word	0x000f4240

08001e0c <_ZL19MX_USART3_UART_Initv>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
<<<<<<< HEAD
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001e44:	f005 fa1c 	bl	8007280 <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001e58:	f000 fd40 	bl	80028dc <Error_Handler>
=======
 800255a:	4807      	ldr	r0, [pc, #28]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 800255c:	f006 fb00 	bl	8008b60 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002570:	f001 fe0c 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000025c 	.word	0x2000025c
 8001e64:	40004800 	.word	0x40004800

08001e68 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <_ZL11MX_DMA_Initv+0x5c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <_ZL11MX_DMA_Initv+0x5c>)
 8001e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_ZL11MX_DMA_Initv+0x5c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	200b      	movs	r0, #11
 8001e90:	f001 fbe1 	bl	8003656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e94:	200b      	movs	r0, #11
 8001e96:	f001 fbfa 	bl	800368e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	f001 fbd9 	bl	8003656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f001 fbf2 	bl	800368e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2010      	movs	r0, #16
 8001eb0:	f001 fbd1 	bl	8003656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001eb4:	2010      	movs	r0, #16
 8001eb6:	f001 fbea 	bl	800368e <HAL_NVIC_EnableIRQ>
=======
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	200b      	movs	r0, #11
 80025a8:	f002 fcad 	bl	8004f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025ac:	200b      	movs	r0, #11
 80025ae:	f002 fcc6 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	200f      	movs	r0, #15
 80025b8:	f002 fca5 	bl	8004f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025bc:	200f      	movs	r0, #15
 80025be:	f002 fcbe 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2010      	movs	r0, #16
 80025c8:	f002 fc9d 	bl	8004f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025cc:	2010      	movs	r0, #16
 80025ce:	f002 fcb6 	bl	8004f3e <HAL_NVIC_EnableIRQ>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a46      	ldr	r2, [pc, #280]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a38      	ldr	r2, [pc, #224]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a31      	ldr	r2, [pc, #196]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <_ZL12MX_GPIO_Initv+0x138>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4825      	ldr	r0, [pc, #148]	; (8002004 <_ZL12MX_GPIO_Initv+0x13c>)
 8001f70:	f002 f8ac 	bl	80040cc <HAL_GPIO_WritePin>
=======
 8002682:	2200      	movs	r2, #0
 8002684:	2102      	movs	r1, #2
 8002686:	4825      	ldr	r0, [pc, #148]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 8002688:	f003 f990 	bl	80059ac <HAL_GPIO_WritePin>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	481f      	ldr	r0, [pc, #124]	; (8002004 <_ZL12MX_GPIO_Initv+0x13c>)
 8001f88:	f001 ff0c 	bl	8003da4 <HAL_GPIO_Init>
=======
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4619      	mov	r1, r3
 800269e:	481f      	ldr	r0, [pc, #124]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 80026a0:	f002 ffd8 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4818      	ldr	r0, [pc, #96]	; (8002004 <_ZL12MX_GPIO_Initv+0x13c>)
 8001fa4:	f001 fefe 	bl	8003da4 <HAL_GPIO_Init>
=======
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4818      	ldr	r0, [pc, #96]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 80026bc:	f002 ffca 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*Configure GPIO pins : slidesw1_Pin slidesw2_Pin */
  GPIO_InitStruct.Pin = slidesw1_Pin | slidesw2_Pin;
 8001fa8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4812      	ldr	r0, [pc, #72]	; (8002008 <_ZL12MX_GPIO_Initv+0x140>)
 8001fbe:	f001 fef1 	bl	8003da4 <HAL_GPIO_Init>
=======
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4812      	ldr	r0, [pc, #72]	; (8002720 <_ZL12MX_GPIO_Initv+0x140>)
 80026d6:	f002 ffbd 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*Configure GPIO pins : dipsw3_Pin dipsw2_Pin dipsw1_Pin */
  GPIO_InitStruct.Pin = dipsw3_Pin | dipsw2_Pin | dipsw1_Pin;
 8001fc2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480b      	ldr	r0, [pc, #44]	; (8002004 <_ZL12MX_GPIO_Initv+0x13c>)
 8001fd8:	f001 fee4 	bl	8003da4 <HAL_GPIO_Init>
=======
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 80026f0:	f002 ffb0 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*Configure GPIO pins : dipsw4_Pin dipsw5_Pin */
  GPIO_InitStruct.Pin = dipsw4_Pin | dipsw5_Pin;
 8001fdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <_ZL12MX_GPIO_Initv+0x144>)
 8001ff2:	f001 fed7 	bl	8003da4 <HAL_GPIO_Init>
=======
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <_ZL12MX_GPIO_Initv+0x144>)
 800270a:	f002 ffa3 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800

08002010 <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t servoID)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  static int16_t inst_pos0 = 0;
  static int16_t inst_pos1 = 0;
  static int16_t inst_pos2 = 0;
  static int16_t inst_pos3 = 0;
  static uint8_t readPos = 0;
  uint8_t checksum = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t read[15] = {0};
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	f8c3 2007 	str.w	r2, [r3, #7]
  uint8_t position[6] = {0};
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	2300      	movs	r3, #0
 8002038:	823b      	strh	r3, [r7, #16]

  switch (servoID)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d81b      	bhi.n	8002078 <_Z12get_positionh+0x68>
 8002040:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <_Z12get_positionh+0x38>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	08002059 	.word	0x08002059
 800204c:	08002061 	.word	0x08002061
 8002050:	08002069 	.word	0x08002069
 8002054:	08002071 	.word	0x08002071
  {
  case 0:
    servo0.send();
 8002058:	4881      	ldr	r0, [pc, #516]	; (8002260 <_Z12get_positionh+0x250>)
 800205a:	f7ff faa3 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 800205e:	e00c      	b.n	800207a <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 8002060:	4880      	ldr	r0, [pc, #512]	; (8002264 <_Z12get_positionh+0x254>)
 8002062:	f7ff fa9f 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 8002066:	e008      	b.n	800207a <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 8002068:	487f      	ldr	r0, [pc, #508]	; (8002268 <_Z12get_positionh+0x258>)
 800206a:	f7ff fa9b 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 800206e:	e004      	b.n	800207a <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 8002070:	487e      	ldr	r0, [pc, #504]	; (800226c <_Z12get_positionh+0x25c>)
 8002072:	f7ff fa97 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 8002076:	e000      	b.n	800207a <_Z12get_positionh+0x6a>
  default:
    break;
 8002078:	bf00      	nop
  }

  HAL_Delay(1);
<<<<<<< HEAD
 800207a:	2001      	movs	r0, #1
 800207c:	f001 f9ec 	bl	8003458 <HAL_Delay>
=======
 8002792:	2001      	movs	r0, #1
 8002794:	f002 fab8 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  readPos = huart2.hdmarx->Instance->NDTR;
 8002080:	4b7b      	ldr	r3, [pc, #492]	; (8002270 <_Z12get_positionh+0x260>)
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <_Z12get_positionh+0x264>)
 800208c:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(rxBuf) - readPos;
 800208e:	4b79      	ldr	r3, [pc, #484]	; (8002274 <_Z12get_positionh+0x264>)
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b76      	ldr	r3, [pc, #472]	; (8002274 <_Z12get_positionh+0x264>)
 800209c:	701a      	strb	r2, [r3, #0]

  if (readPos >= 15)
 800209e:	4b75      	ldr	r3, [pc, #468]	; (8002274 <_Z12get_positionh+0x264>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b0e      	cmp	r3, #14
 80020a4:	d919      	bls.n	80020da <_Z12get_positionh+0xca>
  {
    for (int i = 0; i < 15; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	2b0e      	cmp	r3, #14
 80020ae:	dc14      	bgt.n	80020da <_Z12get_positionh+0xca>
    {
      read[i] = rxBuf[readPos - 14 + i];
 80020b0:	4b70      	ldr	r3, [pc, #448]	; (8002274 <_Z12get_positionh+0x264>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f1a3 020e 	sub.w	r2, r3, #14
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	4413      	add	r3, r2
 80020bc:	4a6e      	ldr	r2, [pc, #440]	; (8002278 <_Z12get_positionh+0x268>)
 80020be:	5cd1      	ldrb	r1, [r2, r3]
 80020c0:	f107 0214 	add.w	r2, r7, #20
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	4413      	add	r3, r2
 80020c8:	460a      	mov	r2, r1
 80020ca:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
<<<<<<< HEAD
 80020cc:	2001      	movs	r0, #1
 80020ce:	f001 f9c3 	bl	8003458 <HAL_Delay>
=======
 80027e4:	2001      	movs	r0, #1
 80027e6:	f002 fa8f 	bl	8004d08 <HAL_Delay>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    for (int i = 0; i < 15; i++)
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	3301      	adds	r3, #1
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
 80020d8:	e7e7      	b.n	80020aa <_Z12get_positionh+0x9a>
    }
  }

  for (int i = 0; i < 8; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	2b07      	cmp	r3, #7
 80020e2:	dc29      	bgt.n	8002138 <_Z12get_positionh+0x128>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 80020e4:	f107 0214 	add.w	r2, r7, #20
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2bff      	cmp	r3, #255	; 0xff
 80020f0:	d11e      	bne.n	8002130 <_Z12get_positionh+0x120>
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	3301      	adds	r3, #1
 80020f6:	3338      	adds	r3, #56	; 0x38
 80020f8:	443b      	add	r3, r7
 80020fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d116      	bne.n	8002130 <_Z12get_positionh+0x120>
    {
      for (int j = 0; j < 6; j++)
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	2b05      	cmp	r3, #5
 800210a:	dc11      	bgt.n	8002130 <_Z12get_positionh+0x120>
      {
        position[j] = read[i + j + 2];
 800210c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002110:	4413      	add	r3, r2
 8002112:	3302      	adds	r3, #2
 8002114:	3338      	adds	r3, #56	; 0x38
 8002116:	443b      	add	r3, r7
 8002118:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800211c:	f107 020c 	add.w	r2, r7, #12
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	4413      	add	r3, r2
 8002124:	460a      	mov	r2, r1
 8002126:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	3301      	adds	r3, #1
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	e7ea      	b.n	8002106 <_Z12get_positionh+0xf6>
  for (int i = 0; i < 8; i++)
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	3301      	adds	r3, #1
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002136:	e7d2      	b.n	80020de <_Z12get_positionh+0xce>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	2b04      	cmp	r3, #4
 8002140:	dc0d      	bgt.n	800215e <_Z12get_positionh+0x14e>
  {
    checksum += position[i];
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	4413      	add	r3, r2
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002150:	4413      	add	r3, r2
 8002152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	3301      	adds	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	e7ee      	b.n	800213c <_Z12get_positionh+0x12c>
  }
  checksum = ~checksum;
 800215e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002162:	43db      	mvns	r3, r3
 8002164:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 8002168:	7c7b      	ldrb	r3, [r7, #17]
 800216a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800216e:	429a      	cmp	r2, r3
 8002170:	d118      	bne.n	80021a4 <_Z12get_positionh+0x194>
 8002172:	7b3b      	ldrb	r3, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d115      	bne.n	80021a4 <_Z12get_positionh+0x194>
  {
    inst_pos0 = position[3] + position[4] * 256;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	b29a      	uxth	r2, r3
 800217c:	7c3b      	ldrb	r3, [r7, #16]
 800217e:	b29b      	uxth	r3, r3
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b29b      	uxth	r3, r3
 8002184:	4413      	add	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <_Z12get_positionh+0x26c>)
 800218c:	801a      	strh	r2, [r3, #0]
    servoPos0 = servo0.calculate_position(inst_pos0);
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <_Z12get_positionh+0x26c>)
 8002190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002194:	4619      	mov	r1, r3
 8002196:	4832      	ldr	r0, [pc, #200]	; (8002260 <_Z12get_positionh+0x250>)
 8002198:	f7ff fa40 	bl	800161c <_ZN3STS18calculate_positionEs>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b37      	ldr	r3, [pc, #220]	; (8002280 <_Z12get_positionh+0x270>)
 80021a2:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 80021a4:	7c7b      	ldrb	r3, [r7, #17]
 80021a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d118      	bne.n	80021e0 <_Z12get_positionh+0x1d0>
 80021ae:	7b3b      	ldrb	r3, [r7, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d115      	bne.n	80021e0 <_Z12get_positionh+0x1d0>
  {
    inst_pos1 = position[3] + position[4] * 256;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	7c3b      	ldrb	r3, [r7, #16]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <_Z12get_positionh+0x274>)
 80021c8:	801a      	strh	r2, [r3, #0]
    servoPos1 = servo1.calculate_position(inst_pos1);
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <_Z12get_positionh+0x274>)
 80021cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4824      	ldr	r0, [pc, #144]	; (8002264 <_Z12get_positionh+0x254>)
 80021d4:	f7ff fa22 	bl	800161c <_ZN3STS18calculate_positionEs>
 80021d8:	4603      	mov	r3, r0
 80021da:	461a      	mov	r2, r3
 80021dc:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <_Z12get_positionh+0x278>)
 80021de:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 80021e0:	7c7b      	ldrb	r3, [r7, #17]
 80021e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d118      	bne.n	800221c <_Z12get_positionh+0x20c>
 80021ea:	7b3b      	ldrb	r3, [r7, #12]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d115      	bne.n	800221c <_Z12get_positionh+0x20c>
  {
    inst_pos2 = position[3] + position[4] * 256;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	7c3b      	ldrb	r3, [r7, #16]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	b21a      	sxth	r2, r3
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <_Z12get_positionh+0x27c>)
 8002204:	801a      	strh	r2, [r3, #0]
    servoPos2 = servo2.calculate_position(inst_pos2);
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <_Z12get_positionh+0x27c>)
 8002208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220c:	4619      	mov	r1, r3
 800220e:	4816      	ldr	r0, [pc, #88]	; (8002268 <_Z12get_positionh+0x258>)
 8002210:	f7ff fa04 	bl	800161c <_ZN3STS18calculate_positionEs>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <_Z12get_positionh+0x280>)
 800221a:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 800221c:	7c7b      	ldrb	r3, [r7, #17]
 800221e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002222:	429a      	cmp	r2, r3
 8002224:	d118      	bne.n	8002258 <_Z12get_positionh+0x248>
 8002226:	7b3b      	ldrb	r3, [r7, #12]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d115      	bne.n	8002258 <_Z12get_positionh+0x248>
  {
    inst_pos3 = position[3] + position[4] * 256;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	b29a      	uxth	r2, r3
 8002230:	7c3b      	ldrb	r3, [r7, #16]
 8002232:	b29b      	uxth	r3, r3
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	b29b      	uxth	r3, r3
 8002238:	4413      	add	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	b21a      	sxth	r2, r3
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <_Z12get_positionh+0x284>)
 8002240:	801a      	strh	r2, [r3, #0]
    servoPos3 = servo3.calculate_position(inst_pos3);
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <_Z12get_positionh+0x284>)
 8002244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002248:	4619      	mov	r1, r3
 800224a:	4808      	ldr	r0, [pc, #32]	; (800226c <_Z12get_positionh+0x25c>)
 800224c:	f7ff f9e6 	bl	800161c <_ZN3STS18calculate_positionEs>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <_Z12get_positionh+0x288>)
 8002256:	801a      	strh	r2, [r3, #0]
  }
}
<<<<<<< HEAD
 8002258:	bf00      	nop
 800225a:	3738      	adds	r7, #56	; 0x38
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200019e8 	.word	0x200019e8
 8002264:	200019f4 	.word	0x200019f4
 8002268:	20001a00 	.word	0x20001a00
 800226c:	20001a0c 	.word	0x20001a0c
 8002270:	20000218 	.word	0x20000218
 8002274:	20001b3e 	.word	0x20001b3e
 8002278:	20001a20 	.word	0x20001a20
 800227c:	20001b36 	.word	0x20001b36
 8002280:	20001a18 	.word	0x20001a18
 8002284:	20001b38 	.word	0x20001b38
 8002288:	20001a1a 	.word	0x20001a1a
 800228c:	20001b3a 	.word	0x20001b3a
 8002290:	20001a1c 	.word	0x20001a1c
 8002294:	20001b3c 	.word	0x20001b3c
 8002298:	20001a1e 	.word	0x20001a1e
=======
 8002970:	bf00      	nop
 8002972:	3738      	adds	r7, #56	; 0x38
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	200019f4 	.word	0x200019f4
 800297c:	20001a00 	.word	0x20001a00
 8002980:	20001a0c 	.word	0x20001a0c
 8002984:	20001a18 	.word	0x20001a18
 8002988:	20000220 	.word	0x20000220
 800298c:	20001b50 	.word	0x20001b50
 8002990:	20001a2c 	.word	0x20001a2c
 8002994:	20001b48 	.word	0x20001b48
 8002998:	20001a24 	.word	0x20001a24
 800299c:	20001b4a 	.word	0x20001b4a
 80029a0:	20001a26 	.word	0x20001a26
 80029a4:	20001b4c 	.word	0x20001b4c
 80029a8:	20001a28 	.word	0x20001a28
 80029ac:	20001b4e 	.word	0x20001b4e
 80029b0:	20001a2a 	.word	0x20001a2a
>>>>>>> parent of feb78f6 (本番パフォーマンス)

0800229c <_Z7twelitev>:
  HAL_UART_Transmit(&huart3, sendArray, 8, 100);
<<<<<<< HEAD
  HAL_Delay(1);
}

void twelite()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
  static uint8_t readPos = 0;
  uint8_t tweliteRead[9] = {0};
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	711a      	strb	r2, [r3, #4]

  HAL_Delay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f001 f8d2 	bl	8003458 <HAL_Delay>

  readPos = huart5.hdmarx->Instance->NDTR;
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <_Z7twelitev+0xf8>)
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <_Z7twelitev+0xfc>)
 80022c0:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(tweliteRxBuf) - readPos;
 80022c2:	4b35      	ldr	r3, [pc, #212]	; (8002398 <_Z7twelitev+0xfc>)
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <_Z7twelitev+0xfc>)
 80022d0:	701a      	strb	r2, [r3, #0]

  if (readPos >= 9)
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <_Z7twelitev+0xfc>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d918      	bls.n	800230c <_Z7twelitev+0x70>
  {
    for (int i = 0; i < 9; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	dc13      	bgt.n	800230c <_Z7twelitev+0x70>
    {
      tweliteRead[i] = tweliteRxBuf[readPos - 8 + i];
 80022e4:	4b2c      	ldr	r3, [pc, #176]	; (8002398 <_Z7twelitev+0xfc>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f1a3 0208 	sub.w	r2, r3, #8
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a2a      	ldr	r2, [pc, #168]	; (800239c <_Z7twelitev+0x100>)
 80022f2:	5cd1      	ldrb	r1, [r2, r3]
 80022f4:	463a      	mov	r2, r7
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4413      	add	r3, r2
 80022fa:	460a      	mov	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80022fe:	2001      	movs	r0, #1
 8002300:	f001 f8aa 	bl	8003458 <HAL_Delay>
    for (int i = 0; i < 9; i++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e7e8      	b.n	80022de <_Z7twelitev+0x42>
=======
 8002a48:	2364      	movs	r3, #100	; 0x64
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4905      	ldr	r1, [pc, #20]	; (8002a64 <_Z8sendDataths+0xb0>)
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <_Z8sendDataths+0xb4>)
 8002a50:	f006 f8d3 	bl	8008bfa <HAL_UART_Transmit>
  HAL_Delay(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f002 f957 	bl	8004d08 <HAL_Delay>
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000264 	.word	0x20000264

08002a6c <_Z7twelitev>:

void twelite()
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
  static uint8_t readPos = 0;
  uint8_t tweliteRead[9] = {0};
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	711a      	strb	r2, [r3, #4]

  HAL_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f002 f942 	bl	8004d08 <HAL_Delay>

  readPos = huart5.hdmarx->Instance->NDTR;
 8002a84:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <_Z7twelitev+0x11c>)
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <_Z7twelitev+0x120>)
 8002a90:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(tweliteRxBuf) - readPos;
 8002a92:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <_Z7twelitev+0x120>)
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <_Z7twelitev+0x120>)
 8002aa0:	701a      	strb	r2, [r3, #0]

  if (readPos >= 9)
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <_Z7twelitev+0x120>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d918      	bls.n	8002adc <_Z7twelitev+0x70>
  {
    for (int i = 0; i < 9; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	dc13      	bgt.n	8002adc <_Z7twelitev+0x70>
    {
      tweliteRead[i] = tweliteRxBuf[readPos - 8 + i];
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <_Z7twelitev+0x120>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f1a3 0208 	sub.w	r2, r3, #8
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a33      	ldr	r2, [pc, #204]	; (8002b90 <_Z7twelitev+0x124>)
 8002ac2:	5cd1      	ldrb	r1, [r2, r3]
 8002ac4:	463a      	mov	r2, r7
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4413      	add	r3, r2
 8002aca:	460a      	mov	r2, r1
 8002acc:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f002 f91a 	bl	8004d08 <HAL_Delay>
    for (int i = 0; i < 9; i++)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e7e8      	b.n	8002aae <_Z7twelitev+0x42>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }

  for (int i = 0; i < 5; i++)
<<<<<<< HEAD
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b04      	cmp	r3, #4
 8002314:	dc2f      	bgt.n	8002376 <_Z7twelitev+0xda>
  {
    if (tweliteRead[i] == 250 && tweliteRead[i + 1] <= 20 && tweliteRead[i + 1] >= 5)
 8002316:	463a      	mov	r2, r7
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2bfa      	cmp	r3, #250	; 0xfa
 8002320:	d125      	bne.n	800236e <_Z7twelitev+0xd2>
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	3301      	adds	r3, #1
 8002326:	3318      	adds	r3, #24
 8002328:	443b      	add	r3, r7
 800232a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800232e:	2b14      	cmp	r3, #20
 8002330:	d81d      	bhi.n	800236e <_Z7twelitev+0xd2>
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3301      	adds	r3, #1
 8002336:	3318      	adds	r3, #24
 8002338:	443b      	add	r3, r7
 800233a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d915      	bls.n	800236e <_Z7twelitev+0xd2>
    {
      for (int j = 0; j < 4; j++)
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b03      	cmp	r3, #3
 800234a:	dc10      	bgt.n	800236e <_Z7twelitev+0xd2>
      {
        tweliteData[j] = tweliteRead[i + j + 1];
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4413      	add	r3, r2
 8002352:	3301      	adds	r3, #1
 8002354:	3318      	adds	r3, #24
 8002356:	443b      	add	r3, r7
 8002358:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800235c:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <_Z7twelitev+0x104>)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	460a      	mov	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 4; j++)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e7eb      	b.n	8002346 <_Z7twelitev+0xaa>
  for (int i = 0; i < 5; i++)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	3301      	adds	r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e7cc      	b.n	8002310 <_Z7twelitev+0x74>
  }

  //  mode = tweliteData[0] - 5;
  //  count = (tweliteData[1] - 5) * 240 + tweliteData[2] - 5;
  //  beat = (int)(count / 20.32);
  gesture = tweliteData[1] - 5;
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <_Z7twelitev+0x104>)
 8002378:	785b      	ldrb	r3, [r3, #1]
 800237a:	3b05      	subs	r3, #5
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <_Z7twelitev+0x108>)
 8002380:	701a      	strb	r2, [r3, #0]
  //  }
  //  else
  //  {
  //    measureB = (beat - 18) / 4;
  //  }
  hue = tweliteData[3];
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <_Z7twelitev+0x104>)
 8002384:	78da      	ldrb	r2, [r3, #3]
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <_Z7twelitev+0x10c>)
 8002388:	701a      	strb	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200001d4 	.word	0x200001d4
 8002398:	20001b3f 	.word	0x20001b3f
 800239c:	20001aa0 	.word	0x20001aa0
 80023a0:	20001b30 	.word	0x20001b30
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20001b28 	.word	0x20001b28

080023ac <_Z8gesture0v>:
=======
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	dc2f      	bgt.n	8002b46 <_Z7twelitev+0xda>
  {
    if (tweliteRead[i] == 250 && tweliteRead[i + 1] <= 20 && tweliteRead[i + 1] >= 5)
 8002ae6:	463a      	mov	r2, r7
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2bfa      	cmp	r3, #250	; 0xfa
 8002af0:	d125      	bne.n	8002b3e <_Z7twelitev+0xd2>
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3301      	adds	r3, #1
 8002af6:	3318      	adds	r3, #24
 8002af8:	443b      	add	r3, r7
 8002afa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002afe:	2b14      	cmp	r3, #20
 8002b00:	d81d      	bhi.n	8002b3e <_Z7twelitev+0xd2>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3301      	adds	r3, #1
 8002b06:	3318      	adds	r3, #24
 8002b08:	443b      	add	r3, r7
 8002b0a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d915      	bls.n	8002b3e <_Z7twelitev+0xd2>
    {
      for (int j = 0; j < 4; j++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	dc10      	bgt.n	8002b3e <_Z7twelitev+0xd2>
      {
        tweliteData[j] = tweliteRead[i + j + 1];
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	3301      	adds	r3, #1
 8002b24:	3318      	adds	r3, #24
 8002b26:	443b      	add	r3, r7
 8002b28:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <_Z7twelitev+0x128>)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	460a      	mov	r2, r1
 8002b34:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 4; j++)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e7eb      	b.n	8002b16 <_Z7twelitev+0xaa>
  for (int i = 0; i < 5; i++)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	3301      	adds	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	e7cc      	b.n	8002ae0 <_Z7twelitev+0x74>
      }
    }
  }

  mode = tweliteData[0] - 5;
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_Z7twelitev+0x128>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	3b05      	subs	r3, #5
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <_Z7twelitev+0x12c>)
 8002b50:	701a      	strb	r2, [r3, #0]
  count = (tweliteData[1] - 5) * 240 + tweliteData[2] - 5;
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_Z7twelitev+0x128>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	3b05      	subs	r3, #5
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <_Z7twelitev+0x128>)
 8002b66:	789b      	ldrb	r3, [r3, #2]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b05      	subs	r3, #5
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <_Z7twelitev+0x130>)
 8002b74:	801a      	strh	r2, [r3, #0]
  hue = tweliteData[3];
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_Z7twelitev+0x128>)
 8002b78:	78da      	ldrb	r2, [r3, #3]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <_Z7twelitev+0x134>)
 8002b7c:	701a      	strb	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200001dc 	.word	0x200001dc
 8002b8c:	20001b51 	.word	0x20001b51
 8002b90:	20001aac 	.word	0x20001aac
 8002b94:	20001b44 	.word	0x20001b44
 8002b98:	20001b35 	.word	0x20001b35
 8002b9c:	20001b36 	.word	0x20001b36
 8002ba0:	20001b38 	.word	0x20001b38

08002ba4 <_Z7setModev>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

void gesture0()
{
<<<<<<< HEAD
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
  uint16_t nowTime = millis;
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <_Z8gesture0v+0x16c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	80bb      	strh	r3, [r7, #4]
  static uint16_t preTime = millis;
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <_Z8gesture0v+0x170>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f3bf 8f5b 	dmb	ish
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <_Z8gesture0v+0x4e>
 80023d4:	4851      	ldr	r0, [pc, #324]	; (800251c <_Z8gesture0v+0x170>)
 80023d6:	f005 fd91 	bl	8007efc <__cxa_guard_acquire>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <_Z8gesture0v+0x4e>
 80023ea:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <_Z8gesture0v+0x16c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <_Z8gesture0v+0x174>)
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	4849      	ldr	r0, [pc, #292]	; (800251c <_Z8gesture0v+0x170>)
 80023f6:	f005 fd8d 	bl	8007f14 <__cxa_guard_release>
  if (nowTime - preTime < 1500)
 80023fa:	88bb      	ldrh	r3, [r7, #4]
 80023fc:	4a48      	ldr	r2, [pc, #288]	; (8002520 <_Z8gesture0v+0x174>)
 80023fe:	8812      	ldrh	r2, [r2, #0]
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	f240 52db 	movw	r2, #1499	; 0x5db
 8002406:	4293      	cmp	r3, r2
 8002408:	dc3a      	bgt.n	8002480 <_Z8gesture0v+0xd4>
  {
    servo0.moveCont(1000, 3071, servoPos0);
 800240a:	4b46      	ldr	r3, [pc, #280]	; (8002524 <_Z8gesture0v+0x178>)
 800240c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002410:	f640 32ff 	movw	r2, #3071	; 0xbff
 8002414:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002418:	4843      	ldr	r0, [pc, #268]	; (8002528 <_Z8gesture0v+0x17c>)
 800241a:	f7fe ff55 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(1000, 2047);
 800241e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002426:	4841      	ldr	r0, [pc, #260]	; (800252c <_Z8gesture0v+0x180>)
 8002428:	f7ff f80c 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2047, servoPos2);
 800242c:	4b40      	ldr	r3, [pc, #256]	; (8002530 <_Z8gesture0v+0x184>)
 800242e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002432:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002436:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800243a:	483e      	ldr	r0, [pc, #248]	; (8002534 <_Z8gesture0v+0x188>)
 800243c:	f7fe ff44 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(1000, 1800);
 8002440:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002444:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002448:	483b      	ldr	r0, [pc, #236]	; (8002538 <_Z8gesture0v+0x18c>)
 800244a:	f7ff f856 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 800244e:	2300      	movs	r3, #0
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b2f      	cmp	r3, #47	; 0x2f
 8002456:	d80c      	bhi.n	8002472 <_Z8gesture0v+0xc6>
    {
      NeopixelTape.set_hsv(led, 127, 255, 255);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	b299      	uxth	r1, r3
 800245c:	23ff      	movs	r3, #255	; 0xff
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	23ff      	movs	r3, #255	; 0xff
 8002462:	227f      	movs	r2, #127	; 0x7f
 8002464:	4835      	ldr	r0, [pc, #212]	; (800253c <_Z8gesture0v+0x190>)
 8002466:	f000 fdc3 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	3301      	adds	r3, #1
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	e7ef      	b.n	8002452 <_Z8gesture0v+0xa6>
    }
    NeopixelTape.show();
 8002472:	4832      	ldr	r0, [pc, #200]	; (800253c <_Z8gesture0v+0x190>)
 8002474:	f000 fe86 	bl	8003184 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8002478:	2001      	movs	r0, #1
 800247a:	f000 ffed 	bl	8003458 <HAL_Delay>
  }
  else
  {
    preTime = millis;
  }
}
 800247e:	e047      	b.n	8002510 <_Z8gesture0v+0x164>
  else if (nowTime - preTime < 3000)
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	4a27      	ldr	r2, [pc, #156]	; (8002520 <_Z8gesture0v+0x174>)
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800248c:	4293      	cmp	r3, r2
 800248e:	dc3a      	bgt.n	8002506 <_Z8gesture0v+0x15a>
    servo0.moveCont(1000, 1023, servoPos0);
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <_Z8gesture0v+0x178>)
 8002492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002496:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800249a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249e:	4822      	ldr	r0, [pc, #136]	; (8002528 <_Z8gesture0v+0x17c>)
 80024a0:	f7fe ff12 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(1000, 2047);
 80024a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024ac:	481f      	ldr	r0, [pc, #124]	; (800252c <_Z8gesture0v+0x180>)
 80024ae:	f7fe ffc9 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2047, servoPos2);
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <_Z8gesture0v+0x184>)
 80024b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024c0:	481c      	ldr	r0, [pc, #112]	; (8002534 <_Z8gesture0v+0x188>)
 80024c2:	f7fe ff01 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(1000, 3000);
 80024c6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80024ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024ce:	481a      	ldr	r0, [pc, #104]	; (8002538 <_Z8gesture0v+0x18c>)
 80024d0:	f7ff f813 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	71bb      	strb	r3, [r7, #6]
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	2b2f      	cmp	r3, #47	; 0x2f
 80024dc:	d80c      	bhi.n	80024f8 <_Z8gesture0v+0x14c>
      NeopixelTape.set_hsv(led, 127, 255, 255);
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	b299      	uxth	r1, r3
 80024e2:	23ff      	movs	r3, #255	; 0xff
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	23ff      	movs	r3, #255	; 0xff
 80024e8:	227f      	movs	r2, #127	; 0x7f
 80024ea:	4814      	ldr	r0, [pc, #80]	; (800253c <_Z8gesture0v+0x190>)
 80024ec:	f000 fd80 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	3301      	adds	r3, #1
 80024f4:	71bb      	strb	r3, [r7, #6]
 80024f6:	e7ef      	b.n	80024d8 <_Z8gesture0v+0x12c>
    NeopixelTape.show();
 80024f8:	4810      	ldr	r0, [pc, #64]	; (800253c <_Z8gesture0v+0x190>)
 80024fa:	f000 fe43 	bl	8003184 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 ffaa 	bl	8003458 <HAL_Delay>
}
 8002504:	e004      	b.n	8002510 <_Z8gesture0v+0x164>
    preTime = millis;
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <_Z8gesture0v+0x16c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <_Z8gesture0v+0x174>)
 800250e:	801a      	strh	r2, [r3, #0]
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20001b2c 	.word	0x20001b2c
 800251c:	20001b44 	.word	0x20001b44
 8002520:	20001b40 	.word	0x20001b40
 8002524:	20001a18 	.word	0x20001a18
 8002528:	200019e8 	.word	0x200019e8
 800252c:	200019f4 	.word	0x200019f4
 8002530:	20001a1c 	.word	0x20001a1c
 8002534:	20001a00 	.word	0x20001a00
 8002538:	20001a0c 	.word	0x20001a0c
 800253c:	20000360 	.word	0x20000360

08002540 <_Z8gesture1v>:
=======
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  static uint8_t modeStatus = 0;
  if (mode == 1 && modeStatus == 0)
 8002ba8:	4b84      	ldr	r3, [pc, #528]	; (8002dbc <_Z7setModev+0x218>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10c      	bne.n	8002bca <_Z7setModev+0x26>
 8002bb0:	4b83      	ldr	r3, [pc, #524]	; (8002dc0 <_Z7setModev+0x21c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <_Z7setModev+0x26>
  {
    millis = 0;
 8002bb8:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <_Z7setModev+0x220>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002bbe:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <_Z7setModev+0x21c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b7e      	ldr	r3, [pc, #504]	; (8002dc0 <_Z7setModev+0x21c>)
 8002bc8:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 2 && modeStatus == 1)
 8002bca:	4b7c      	ldr	r3, [pc, #496]	; (8002dbc <_Z7setModev+0x218>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d10d      	bne.n	8002bee <_Z7setModev+0x4a>
 8002bd2:	4b7b      	ldr	r3, [pc, #492]	; (8002dc0 <_Z7setModev+0x21c>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d109      	bne.n	8002bee <_Z7setModev+0x4a>
  {
    millis = 7500;
 8002bda:	4b7a      	ldr	r3, [pc, #488]	; (8002dc4 <_Z7setModev+0x220>)
 8002bdc:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002be0:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002be2:	4b77      	ldr	r3, [pc, #476]	; (8002dc0 <_Z7setModev+0x21c>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	3301      	adds	r3, #1
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4b75      	ldr	r3, [pc, #468]	; (8002dc0 <_Z7setModev+0x21c>)
 8002bec:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 3 && modeStatus == 2)
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <_Z7setModev+0x218>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d10d      	bne.n	8002c12 <_Z7setModev+0x6e>
 8002bf6:	4b72      	ldr	r3, [pc, #456]	; (8002dc0 <_Z7setModev+0x21c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d109      	bne.n	8002c12 <_Z7setModev+0x6e>
  {
    millis = 22500;
 8002bfe:	4b71      	ldr	r3, [pc, #452]	; (8002dc4 <_Z7setModev+0x220>)
 8002c00:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8002c04:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c06:	4b6e      	ldr	r3, [pc, #440]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c10:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 4 && modeStatus == 3)
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <_Z7setModev+0x218>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d10d      	bne.n	8002c36 <_Z7setModev+0x92>
 8002c1a:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d109      	bne.n	8002c36 <_Z7setModev+0x92>
  {
    millis = 37000;
 8002c22:	4b68      	ldr	r3, [pc, #416]	; (8002dc4 <_Z7setModev+0x220>)
 8002c24:	f249 0288 	movw	r2, #37000	; 0x9088
 8002c28:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c2a:	4b65      	ldr	r3, [pc, #404]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c34:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 5 && modeStatus == 4)
 8002c36:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <_Z7setModev+0x218>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d10d      	bne.n	8002c5a <_Z7setModev+0xb6>
 8002c3e:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d109      	bne.n	8002c5a <_Z7setModev+0xb6>
  {
    millis = 52000;
 8002c46:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <_Z7setModev+0x220>)
 8002c48:	f64c 3220 	movw	r2, #52000	; 0xcb20
 8002c4c:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c58:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 6 && modeStatus == 5)
 8002c5a:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <_Z7setModev+0x218>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d10d      	bne.n	8002c7e <_Z7setModev+0xda>
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d109      	bne.n	8002c7e <_Z7setModev+0xda>
  {
    millis = 60000;
 8002c6a:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <_Z7setModev+0x220>)
 8002c6c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002c70:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c7c:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 7 && modeStatus == 6)
 8002c7e:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <_Z7setModev+0x218>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b07      	cmp	r3, #7
 8002c84:	d10c      	bne.n	8002ca0 <_Z7setModev+0xfc>
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b06      	cmp	r3, #6
 8002c8c:	d108      	bne.n	8002ca0 <_Z7setModev+0xfc>
  {
    millis = 67000;
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <_Z7setModev+0x220>)
 8002c90:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <_Z7setModev+0x224>)
 8002c92:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <_Z7setModev+0x21c>)
 8002c9e:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 8 && modeStatus == 7)
 8002ca0:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <_Z7setModev+0x218>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d10c      	bne.n	8002cc2 <_Z7setModev+0x11e>
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <_Z7setModev+0x21c>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b07      	cmp	r3, #7
 8002cae:	d108      	bne.n	8002cc2 <_Z7setModev+0x11e>
  {
    millis = 745000;
 8002cb0:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <_Z7setModev+0x220>)
 8002cb2:	4a46      	ldr	r2, [pc, #280]	; (8002dcc <_Z7setModev+0x228>)
 8002cb4:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <_Z7setModev+0x21c>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <_Z7setModev+0x21c>)
 8002cc0:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 9 && modeStatus == 8)
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <_Z7setModev+0x218>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	d10c      	bne.n	8002ce4 <_Z7setModev+0x140>
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <_Z7setModev+0x21c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d108      	bne.n	8002ce4 <_Z7setModev+0x140>
  {
    millis = 1000000;
 8002cd2:	4b3c      	ldr	r3, [pc, #240]	; (8002dc4 <_Z7setModev+0x220>)
 8002cd4:	4a3e      	ldr	r2, [pc, #248]	; (8002dd0 <_Z7setModev+0x22c>)
 8002cd6:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002cd8:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <_Z7setModev+0x21c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <_Z7setModev+0x21c>)
 8002ce2:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 10 && modeStatus == 11)
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <_Z7setModev+0x218>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b0a      	cmp	r3, #10
 8002cea:	d10c      	bne.n	8002d06 <_Z7setModev+0x162>
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <_Z7setModev+0x21c>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b0b      	cmp	r3, #11
 8002cf2:	d108      	bne.n	8002d06 <_Z7setModev+0x162>
  {
    millis = 2000000;
 8002cf4:	4b33      	ldr	r3, [pc, #204]	; (8002dc4 <_Z7setModev+0x220>)
 8002cf6:	4a37      	ldr	r2, [pc, #220]	; (8002dd4 <_Z7setModev+0x230>)
 8002cf8:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002cfa:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <_Z7setModev+0x21c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d04:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 11 && modeStatus == 10)
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <_Z7setModev+0x218>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b0b      	cmp	r3, #11
 8002d0c:	d10c      	bne.n	8002d28 <_Z7setModev+0x184>
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b0a      	cmp	r3, #10
 8002d14:	d108      	bne.n	8002d28 <_Z7setModev+0x184>
  {
    millis = 2008500;
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <_Z7setModev+0x220>)
 8002d18:	4a2f      	ldr	r2, [pc, #188]	; (8002dd8 <_Z7setModev+0x234>)
 8002d1a:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d26:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 12 && modeStatus == 11)
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <_Z7setModev+0x218>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d10c      	bne.n	8002d4a <_Z7setModev+0x1a6>
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b0b      	cmp	r3, #11
 8002d36:	d108      	bne.n	8002d4a <_Z7setModev+0x1a6>
  {
    millis = 2022500;
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <_Z7setModev+0x220>)
 8002d3a:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <_Z7setModev+0x238>)
 8002d3c:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d48:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 13 && modeStatus == 12)
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <_Z7setModev+0x218>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b0d      	cmp	r3, #13
 8002d50:	d10c      	bne.n	8002d6c <_Z7setModev+0x1c8>
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d108      	bne.n	8002d6c <_Z7setModev+0x1c8>
  {
    millis = 2034700;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <_Z7setModev+0x220>)
 8002d5c:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <_Z7setModev+0x23c>)
 8002d5e:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d6a:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 14 && modeStatus == 13)
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <_Z7setModev+0x218>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b0e      	cmp	r3, #14
 8002d72:	d10c      	bne.n	8002d8e <_Z7setModev+0x1ea>
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b0d      	cmp	r3, #13
 8002d7a:	d108      	bne.n	8002d8e <_Z7setModev+0x1ea>
  {
    millis = 2038000;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_Z7setModev+0x220>)
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <_Z7setModev+0x240>)
 8002d80:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3301      	adds	r3, #1
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d8c:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 15 && modeStatus == 14)
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <_Z7setModev+0x218>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	d10c      	bne.n	8002db0 <_Z7setModev+0x20c>
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <_Z7setModev+0x21c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b0e      	cmp	r3, #14
 8002d9c:	d108      	bne.n	8002db0 <_Z7setModev+0x20c>
  {
    millis = 2044500;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <_Z7setModev+0x220>)
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <_Z7setModev+0x244>)
 8002da2:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <_Z7setModev+0x21c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <_Z7setModev+0x21c>)
 8002dae:	701a      	strb	r2, [r3, #0]
  }
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20001b35 	.word	0x20001b35
 8002dc0:	20001b52 	.word	0x20001b52
 8002dc4:	20001b3c 	.word	0x20001b3c
 8002dc8:	000105b8 	.word	0x000105b8
 8002dcc:	000b5e28 	.word	0x000b5e28
 8002dd0:	000f4240 	.word	0x000f4240
 8002dd4:	001e8480 	.word	0x001e8480
 8002dd8:	001ea5b4 	.word	0x001ea5b4
 8002ddc:	001edc64 	.word	0x001edc64
 8002de0:	001f0c0c 	.word	0x001f0c0c
 8002de4:	001f18f0 	.word	0x001f18f0
 8002de8:	001f3254 	.word	0x001f3254

08002dec <_Z5mode0v>:

void mode0()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af02      	add	r7, sp, #8
  servo0.moveCont(500, 2048, servoPos0);
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <_Z5mode0v+0x88>)
 8002df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dfc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e00:	481d      	ldr	r0, [pc, #116]	; (8002e78 <_Z5mode0v+0x8c>)
 8002e02:	f7fe fa61 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(500, 2048);
 8002e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e0e:	481b      	ldr	r0, [pc, #108]	; (8002e7c <_Z5mode0v+0x90>)
 8002e10:	f7fe fb18 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(500, 2048, servoPos2);
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <_Z5mode0v+0x94>)
 8002e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e22:	4818      	ldr	r0, [pc, #96]	; (8002e84 <_Z5mode0v+0x98>)
 8002e24:	f7fe fa50 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(500, 1800);
 8002e28:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002e2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e30:	4815      	ldr	r0, [pc, #84]	; (8002e88 <_Z5mode0v+0x9c>)
 8002e32:	f7fe fb62 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	71fb      	strb	r3, [r7, #7]
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8002e3e:	d814      	bhi.n	8002e6a <_Z5mode0v+0x7e>
  {
    NeopixelTape.set_hsv(led, hue, 255, 100);
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	b299      	uxth	r1, r3
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <_Z5mode0v+0xa0>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b21a      	sxth	r2, r3
 8002e4a:	2364      	movs	r3, #100	; 0x64
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	23ff      	movs	r3, #255	; 0xff
 8002e50:	480f      	ldr	r0, [pc, #60]	; (8002e90 <_Z5mode0v+0xa4>)
 8002e52:	f001 fd25 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    NeopixelTape.show();
 8002e56:	480e      	ldr	r0, [pc, #56]	; (8002e90 <_Z5mode0v+0xa4>)
 8002e58:	f001 fdec 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f001 ff53 	bl	8004d08 <HAL_Delay>
  for (uint8_t led = 0; led < 48; led++)
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	3301      	adds	r3, #1
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	e7e7      	b.n	8002e3a <_Z5mode0v+0x4e>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20001a24 	.word	0x20001a24
 8002e78:	200019f4 	.word	0x200019f4
 8002e7c:	20001a00 	.word	0x20001a00
 8002e80:	20001a28 	.word	0x20001a28
 8002e84:	20001a0c 	.word	0x20001a0c
 8002e88:	20001a18 	.word	0x20001a18
 8002e8c:	20001b38 	.word	0x20001b38
 8002e90:	20000368 	.word	0x20000368

08002e94 <_Z5mode1v>:

void mode1()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <_Z5mode1v+0x7c>)
 8002e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	481b      	ldr	r0, [pc, #108]	; (8002f14 <_Z5mode1v+0x80>)
 8002ea8:	f7fe fa0e 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4819      	ldr	r0, [pc, #100]	; (8002f18 <_Z5mode1v+0x84>)
 8002eb4:	f7fe fac6 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <_Z5mode1v+0x88>)
 8002eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4816      	ldr	r0, [pc, #88]	; (8002f20 <_Z5mode1v+0x8c>)
 8002ec6:	f7fe f9ff 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8002eca:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4814      	ldr	r0, [pc, #80]	; (8002f24 <_Z5mode1v+0x90>)
 8002ed2:	f7fe fb12 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	2b2f      	cmp	r3, #47	; 0x2f
 8002ede:	d812      	bhi.n	8002f06 <_Z5mode1v+0x72>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2200      	movs	r2, #0
 8002eec:	480e      	ldr	r0, [pc, #56]	; (8002f28 <_Z5mode1v+0x94>)
 8002eee:	f001 fcd7 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    NeopixelTape.show();
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <_Z5mode1v+0x94>)
 8002ef4:	f001 fd9e 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f001 ff05 	bl	8004d08 <HAL_Delay>
  for (uint8_t led = 0; led < 48; led++)
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	3301      	adds	r3, #1
 8002f02:	71fb      	strb	r3, [r7, #7]
 8002f04:	e7e9      	b.n	8002eda <_Z5mode1v+0x46>
  }
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20001a24 	.word	0x20001a24
 8002f14:	200019f4 	.word	0x200019f4
 8002f18:	20001a00 	.word	0x20001a00
 8002f1c:	20001a28 	.word	0x20001a28
 8002f20:	20001a0c 	.word	0x20001a0c
 8002f24:	20001a18 	.word	0x20001a18
 8002f28:	20000368 	.word	0x20000368

08002f2c <_Z5mode2v>:

void mode2()
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  servo0.moveCont(0, 2048, servoPos0);
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <_Z5mode2v+0x44>)
 8002f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	480d      	ldr	r0, [pc, #52]	; (8002f74 <_Z5mode2v+0x48>)
 8002f3e:	f7fe f9c3 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8002f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f46:	2100      	movs	r1, #0
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <_Z5mode2v+0x4c>)
 8002f4a:	f7fe fa7b 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <_Z5mode2v+0x50>)
 8002f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4809      	ldr	r0, [pc, #36]	; (8002f80 <_Z5mode2v+0x54>)
 8002f5c:	f7fe f9b4 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8002f60:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002f64:	2100      	movs	r1, #0
 8002f66:	4807      	ldr	r0, [pc, #28]	; (8002f84 <_Z5mode2v+0x58>)
 8002f68:	f7fe fac7 	bl	80014fa <_ZN3STS9moveStop3Ess>
}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20001a24 	.word	0x20001a24
 8002f74:	200019f4 	.word	0x200019f4
 8002f78:	20001a00 	.word	0x20001a00
 8002f7c:	20001a28 	.word	0x20001a28
 8002f80:	20001a0c 	.word	0x20001a0c
 8002f84:	20001a18 	.word	0x20001a18

08002f88 <_Z5mode3v>:

void mode3()
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af02      	add	r7, sp, #8
  countLocal = millis - 22500;
 8002f8e:	4bae      	ldr	r3, [pc, #696]	; (8003248 <_Z5mode3v+0x2c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f5a3 43af 	sub.w	r3, r3, #22400	; 0x5780
 8002f98:	3b64      	subs	r3, #100	; 0x64
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	4bab      	ldr	r3, [pc, #684]	; (800324c <_Z5mode3v+0x2c4>)
 8002f9e:	801a      	strh	r2, [r3, #0]
  if (ID == 1)
 8002fa0:	4bab      	ldr	r3, [pc, #684]	; (8003250 <_Z5mode3v+0x2c8>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	f040 8110 	bne.w	80031ca <_Z5mode3v+0x242>
  {
    for (uint8_t led = 0; led < 16; led++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	71fb      	strb	r3, [r7, #7]
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	f200 8103 	bhi.w	80031bc <_Z5mode3v+0x234>
    {
      if (countLocal < 10000)
 8002fb6:	4ba5      	ldr	r3, [pc, #660]	; (800324c <_Z5mode3v+0x2c4>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	f242 720f 	movw	r2, #9999	; 0x270f
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d850      	bhi.n	8003064 <_Z5mode3v+0xdc>
      {
        servo0.moveCont(0, 2048, servoPos0);
 8002fc2:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <_Z5mode3v+0x2cc>)
 8002fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fcc:	2100      	movs	r1, #0
 8002fce:	48a2      	ldr	r0, [pc, #648]	; (8003258 <_Z5mode3v+0x2d0>)
 8002fd0:	f7fe f97a 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(0, 2048);
 8002fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd8:	2100      	movs	r1, #0
 8002fda:	48a0      	ldr	r0, [pc, #640]	; (800325c <_Z5mode3v+0x2d4>)
 8002fdc:	f7fe fa32 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(0, 2048, servoPos2);
 8002fe0:	4b9f      	ldr	r3, [pc, #636]	; (8003260 <_Z5mode3v+0x2d8>)
 8002fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fea:	2100      	movs	r1, #0
 8002fec:	489d      	ldr	r0, [pc, #628]	; (8003264 <_Z5mode3v+0x2dc>)
 8002fee:	f7fe f96b 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(0, 1800);
 8002ff2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	489b      	ldr	r0, [pc, #620]	; (8003268 <_Z5mode3v+0x2e0>)
 8002ffa:	f7fe fa7e 	bl	80014fa <_ZN3STS9moveStop3Ess>
        NeopixelTape.set_hsv(led, hue, 255, 255);
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	b299      	uxth	r1, r3
 8003002:	4b9a      	ldr	r3, [pc, #616]	; (800326c <_Z5mode3v+0x2e4>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b21a      	sxth	r2, r3
 8003008:	23ff      	movs	r3, #255	; 0xff
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	23ff      	movs	r3, #255	; 0xff
 800300e:	4898      	ldr	r0, [pc, #608]	; (8003270 <_Z5mode3v+0x2e8>)
 8003010:	f001 fc46 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 16, hue, 255, calc.similarityNormal(led, 180, countLocal / 30));
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	b29b      	uxth	r3, r3
 8003018:	3310      	adds	r3, #16
 800301a:	b29c      	uxth	r4, r3
 800301c:	4b93      	ldr	r3, [pc, #588]	; (800326c <_Z5mode3v+0x2e4>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b21d      	sxth	r5, r3
 8003022:	4b8a      	ldr	r3, [pc, #552]	; (800324c <_Z5mode3v+0x2c4>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	4a93      	ldr	r2, [pc, #588]	; (8003274 <_Z5mode3v+0x2ec>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	b29b      	uxth	r3, r3
 8003030:	79f9      	ldrb	r1, [r7, #7]
 8003032:	22b4      	movs	r2, #180	; 0xb4
 8003034:	4890      	ldr	r0, [pc, #576]	; (8003278 <_Z5mode3v+0x2f0>)
 8003036:	f7fe fd4f 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 800303a:	4603      	mov	r3, r0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	23ff      	movs	r3, #255	; 0xff
 8003040:	462a      	mov	r2, r5
 8003042:	4621      	mov	r1, r4
 8003044:	488a      	ldr	r0, [pc, #552]	; (8003270 <_Z5mode3v+0x2e8>)
 8003046:	f001 fc2b 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 32, hue, 255, 0);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	b29b      	uxth	r3, r3
 800304e:	3320      	adds	r3, #32
 8003050:	b299      	uxth	r1, r3
 8003052:	4b86      	ldr	r3, [pc, #536]	; (800326c <_Z5mode3v+0x2e4>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b21a      	sxth	r2, r3
 8003058:	2300      	movs	r3, #0
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	23ff      	movs	r3, #255	; 0xff
 800305e:	4884      	ldr	r0, [pc, #528]	; (8003270 <_Z5mode3v+0x2e8>)
 8003060:	f001 fc1e 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      }
      if (countLocal > 10000 && countLocal < 12550)
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <_Z5mode3v+0x2c4>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	f242 7210 	movw	r2, #10000	; 0x2710
 800306c:	4293      	cmp	r3, r2
 800306e:	d954      	bls.n	800311a <_Z5mode3v+0x192>
 8003070:	4b76      	ldr	r3, [pc, #472]	; (800324c <_Z5mode3v+0x2c4>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	f243 1205 	movw	r2, #12549	; 0x3105
 8003078:	4293      	cmp	r3, r2
 800307a:	d84e      	bhi.n	800311a <_Z5mode3v+0x192>
      {
        servo0.moveCont(0, 2048, servoPos0);
 800307c:	4b75      	ldr	r3, [pc, #468]	; (8003254 <_Z5mode3v+0x2cc>)
 800307e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003086:	2100      	movs	r1, #0
 8003088:	4873      	ldr	r0, [pc, #460]	; (8003258 <_Z5mode3v+0x2d0>)
 800308a:	f7fe f91d 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(0, 2048);
 800308e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003092:	2100      	movs	r1, #0
 8003094:	4871      	ldr	r0, [pc, #452]	; (800325c <_Z5mode3v+0x2d4>)
 8003096:	f7fe f9d5 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(0, 2048, servoPos2);
 800309a:	4b71      	ldr	r3, [pc, #452]	; (8003260 <_Z5mode3v+0x2d8>)
 800309c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030a4:	2100      	movs	r1, #0
 80030a6:	486f      	ldr	r0, [pc, #444]	; (8003264 <_Z5mode3v+0x2dc>)
 80030a8:	f7fe f90e 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(0, 1800);
 80030ac:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80030b0:	2100      	movs	r1, #0
 80030b2:	486d      	ldr	r0, [pc, #436]	; (8003268 <_Z5mode3v+0x2e0>)
 80030b4:	f7fe fa21 	bl	80014fa <_ZN3STS9moveStop3Ess>
        NeopixelTape.set_hsv(led, hue, 255, 255);
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	b299      	uxth	r1, r3
 80030bc:	4b6b      	ldr	r3, [pc, #428]	; (800326c <_Z5mode3v+0x2e4>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	23ff      	movs	r3, #255	; 0xff
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	23ff      	movs	r3, #255	; 0xff
 80030c8:	4869      	ldr	r0, [pc, #420]	; (8003270 <_Z5mode3v+0x2e8>)
 80030ca:	f001 fbe9 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 16, hue, 255, 255);
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3310      	adds	r3, #16
 80030d4:	b299      	uxth	r1, r3
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <_Z5mode3v+0x2e4>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b21a      	sxth	r2, r3
 80030dc:	23ff      	movs	r3, #255	; 0xff
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	23ff      	movs	r3, #255	; 0xff
 80030e2:	4863      	ldr	r0, [pc, #396]	; (8003270 <_Z5mode3v+0x2e8>)
 80030e4:	f001 fbdc 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 32, hue, 255, (countLocal - 10000) / 10);
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3320      	adds	r3, #32
 80030ee:	b299      	uxth	r1, r3
 80030f0:	4b5e      	ldr	r3, [pc, #376]	; (800326c <_Z5mode3v+0x2e4>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b218      	sxth	r0, r3
 80030f6:	4b55      	ldr	r3, [pc, #340]	; (800324c <_Z5mode3v+0x2c4>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80030fe:	3b10      	subs	r3, #16
 8003100:	4a5e      	ldr	r2, [pc, #376]	; (800327c <_Z5mode3v+0x2f4>)
 8003102:	fb82 4203 	smull	r4, r2, r2, r3
 8003106:	1092      	asrs	r2, r2, #2
 8003108:	17db      	asrs	r3, r3, #31
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b21b      	sxth	r3, r3
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	4602      	mov	r2, r0
 8003114:	4856      	ldr	r0, [pc, #344]	; (8003270 <_Z5mode3v+0x2e8>)
 8003116:	f001 fbc3 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      }
      if (countLocal > 12550)
 800311a:	4b4c      	ldr	r3, [pc, #304]	; (800324c <_Z5mode3v+0x2c4>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f243 1206 	movw	r2, #12550	; 0x3106
 8003122:	4293      	cmp	r3, r2
 8003124:	d946      	bls.n	80031b4 <_Z5mode3v+0x22c>
      {
        servo0.moveCont(500, 2048, servoPos0);
 8003126:	4b4b      	ldr	r3, [pc, #300]	; (8003254 <_Z5mode3v+0x2cc>)
 8003128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003130:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003134:	4848      	ldr	r0, [pc, #288]	; (8003258 <_Z5mode3v+0x2d0>)
 8003136:	f7fe f8c7 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(2000, 1024);
 800313a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003142:	4846      	ldr	r0, [pc, #280]	; (800325c <_Z5mode3v+0x2d4>)
 8003144:	f7fe f97e 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(500, 2048, servoPos2);
 8003148:	4b45      	ldr	r3, [pc, #276]	; (8003260 <_Z5mode3v+0x2d8>)
 800314a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003156:	4843      	ldr	r0, [pc, #268]	; (8003264 <_Z5mode3v+0x2dc>)
 8003158:	f7fe f8b6 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(2000, 2800);
 800315c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8003160:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003164:	4840      	ldr	r0, [pc, #256]	; (8003268 <_Z5mode3v+0x2e0>)
 8003166:	f7fe f9c8 	bl	80014fa <_ZN3STS9moveStop3Ess>
        NeopixelTape.set_hsv(led, hue, 255, 0);
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	b299      	uxth	r1, r3
 800316e:	4b3f      	ldr	r3, [pc, #252]	; (800326c <_Z5mode3v+0x2e4>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b21a      	sxth	r2, r3
 8003174:	2300      	movs	r3, #0
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	23ff      	movs	r3, #255	; 0xff
 800317a:	483d      	ldr	r0, [pc, #244]	; (8003270 <_Z5mode3v+0x2e8>)
 800317c:	f001 fb90 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 16, hue, 255, 0);
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	b29b      	uxth	r3, r3
 8003184:	3310      	adds	r3, #16
 8003186:	b299      	uxth	r1, r3
 8003188:	4b38      	ldr	r3, [pc, #224]	; (800326c <_Z5mode3v+0x2e4>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b21a      	sxth	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	23ff      	movs	r3, #255	; 0xff
 8003194:	4836      	ldr	r0, [pc, #216]	; (8003270 <_Z5mode3v+0x2e8>)
 8003196:	f001 fb83 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 32, hue, 255, 0);
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	b29b      	uxth	r3, r3
 800319e:	3320      	adds	r3, #32
 80031a0:	b299      	uxth	r1, r3
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <_Z5mode3v+0x2e4>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	23ff      	movs	r3, #255	; 0xff
 80031ae:	4830      	ldr	r0, [pc, #192]	; (8003270 <_Z5mode3v+0x2e8>)
 80031b0:	f001 fb76 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	3301      	adds	r3, #1
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	e6f8      	b.n	8002fae <_Z5mode3v+0x26>
      }
    }
    NeopixelTape.show();
 80031bc:	482c      	ldr	r0, [pc, #176]	; (8003270 <_Z5mode3v+0x2e8>)
 80031be:	f001 fc39 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f001 fda0 	bl	8004d08 <HAL_Delay>
    servo0.moveCont(500, 2048, servoPos0);
    servo1.moveStop1(500, 2048);
    servo2.moveCont(500, 2048, servoPos2);
    servo3.moveStop3(500, 1800);
  }
}
 80031c8:	e039      	b.n	800323e <_Z5mode3v+0x2b6>
    for (uint8_t led = 0; led < 48; led++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	71bb      	strb	r3, [r7, #6]
 80031ce:	79bb      	ldrb	r3, [r7, #6]
 80031d0:	2b2f      	cmp	r3, #47	; 0x2f
 80031d2:	d80c      	bhi.n	80031ee <_Z5mode3v+0x266>
      NeopixelTape.set_hsv(led, 0, 0, 0);
 80031d4:	79bb      	ldrb	r3, [r7, #6]
 80031d6:	b299      	uxth	r1, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	2200      	movs	r2, #0
 80031e0:	4823      	ldr	r0, [pc, #140]	; (8003270 <_Z5mode3v+0x2e8>)
 80031e2:	f001 fb5d 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 80031e6:	79bb      	ldrb	r3, [r7, #6]
 80031e8:	3301      	adds	r3, #1
 80031ea:	71bb      	strb	r3, [r7, #6]
 80031ec:	e7ef      	b.n	80031ce <_Z5mode3v+0x246>
    NeopixelTape.show();
 80031ee:	4820      	ldr	r0, [pc, #128]	; (8003270 <_Z5mode3v+0x2e8>)
 80031f0:	f001 fc20 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80031f4:	2001      	movs	r0, #1
 80031f6:	f001 fd87 	bl	8004d08 <HAL_Delay>
    servo0.moveCont(500, 2048, servoPos0);
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <_Z5mode3v+0x2cc>)
 80031fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003204:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003208:	4813      	ldr	r0, [pc, #76]	; (8003258 <_Z5mode3v+0x2d0>)
 800320a:	f7fe f85d 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 2048);
 800320e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003212:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003216:	4811      	ldr	r0, [pc, #68]	; (800325c <_Z5mode3v+0x2d4>)
 8003218:	f7fe f914 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2048, servoPos2);
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <_Z5mode3v+0x2d8>)
 800321e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003226:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800322a:	480e      	ldr	r0, [pc, #56]	; (8003264 <_Z5mode3v+0x2dc>)
 800322c:	f7fe f84c 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 8003230:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003234:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003238:	480b      	ldr	r0, [pc, #44]	; (8003268 <_Z5mode3v+0x2e0>)
 800323a:	f7fe f95e 	bl	80014fa <_ZN3STS9moveStop3Ess>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bdb0      	pop	{r4, r5, r7, pc}
 8003246:	bf00      	nop
 8003248:	20001b3c 	.word	0x20001b3c
 800324c:	20001b40 	.word	0x20001b40
 8003250:	20001b34 	.word	0x20001b34
 8003254:	20001a24 	.word	0x20001a24
 8003258:	200019f4 	.word	0x200019f4
 800325c:	20001a00 	.word	0x20001a00
 8003260:	20001a28 	.word	0x20001a28
 8003264:	20001a0c 	.word	0x20001a0c
 8003268:	20001a18 	.word	0x20001a18
 800326c:	20001b38 	.word	0x20001b38
 8003270:	20000368 	.word	0x20000368
 8003274:	88888889 	.word	0x88888889
 8003278:	200019f0 	.word	0x200019f0
 800327c:	66666667 	.word	0x66666667

08003280 <_Z5mode4v>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

void gesture1()
{
<<<<<<< HEAD
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af02      	add	r7, sp, #8
  uint16_t nowTime1 = millis;
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <_Z8gesture1v+0x1d4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	80bb      	strh	r3, [r7, #4]
  static uint16_t preTime1 = millis;
 800254c:	4b72      	ldr	r3, [pc, #456]	; (8002718 <_Z8gesture1v+0x1d8>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f3bf 8f5b 	dmb	ish
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d012      	beq.n	800258e <_Z8gesture1v+0x4e>
 8002568:	486b      	ldr	r0, [pc, #428]	; (8002718 <_Z8gesture1v+0x1d8>)
 800256a:	f005 fcc7 	bl	8007efc <__cxa_guard_acquire>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <_Z8gesture1v+0x4e>
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <_Z8gesture1v+0x1d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29a      	uxth	r2, r3
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <_Z8gesture1v+0x1dc>)
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	4863      	ldr	r0, [pc, #396]	; (8002718 <_Z8gesture1v+0x1d8>)
 800258a:	f005 fcc3 	bl	8007f14 <__cxa_guard_release>
  uint16_t nowTime2 = millis;
 800258e:	4b61      	ldr	r3, [pc, #388]	; (8002714 <_Z8gesture1v+0x1d4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	807b      	strh	r3, [r7, #2]
  static uint16_t preTime2 = millis;
 8002594:	4b62      	ldr	r3, [pc, #392]	; (8002720 <_Z8gesture1v+0x1e0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f3bf 8f5b 	dmb	ish
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <_Z8gesture1v+0x96>
 80025b0:	485b      	ldr	r0, [pc, #364]	; (8002720 <_Z8gesture1v+0x1e0>)
 80025b2:	f005 fca3 	bl	8007efc <__cxa_guard_acquire>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <_Z8gesture1v+0x96>
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <_Z8gesture1v+0x1d4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b55      	ldr	r3, [pc, #340]	; (8002724 <_Z8gesture1v+0x1e4>)
 80025ce:	801a      	strh	r2, [r3, #0]
 80025d0:	4853      	ldr	r0, [pc, #332]	; (8002720 <_Z8gesture1v+0x1e0>)
 80025d2:	f005 fc9f 	bl	8007f14 <__cxa_guard_release>
  if (nowTime1 - preTime1 < 4000)
 80025d6:	88bb      	ldrh	r3, [r7, #4]
 80025d8:	4a50      	ldr	r2, [pc, #320]	; (800271c <_Z8gesture1v+0x1dc>)
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80025e2:	da21      	bge.n	8002628 <_Z8gesture1v+0xe8>
  {
    servo0.moveCont(1000, 8191, servoPos0);
 80025e4:	4b50      	ldr	r3, [pc, #320]	; (8002728 <_Z8gesture1v+0x1e8>)
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80025ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025f2:	484e      	ldr	r0, [pc, #312]	; (800272c <_Z8gesture1v+0x1ec>)
 80025f4:	f7fe fe68 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(1000, 1000);
 80025f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002600:	484b      	ldr	r0, [pc, #300]	; (8002730 <_Z8gesture1v+0x1f0>)
 8002602:	f7fe ff1f 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 4095, servoPos2);
 8002606:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <_Z8gesture1v+0x1f4>)
 8002608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002610:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002614:	4848      	ldr	r0, [pc, #288]	; (8002738 <_Z8gesture1v+0x1f8>)
 8002616:	f7fe fe57 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(100, 1800);
 800261a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800261e:	2164      	movs	r1, #100	; 0x64
 8002620:	4846      	ldr	r0, [pc, #280]	; (800273c <_Z8gesture1v+0x1fc>)
 8002622:	f7fe ff6a 	bl	80014fa <_ZN3STS9moveStop3Ess>
 8002626:	e02b      	b.n	8002680 <_Z8gesture1v+0x140>
  }
  else if (nowTime1 - preTime1 < 8000)
 8002628:	88bb      	ldrh	r3, [r7, #4]
 800262a:	4a3c      	ldr	r2, [pc, #240]	; (800271c <_Z8gesture1v+0x1dc>)
 800262c:	8812      	ldrh	r2, [r2, #0]
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002634:	da1f      	bge.n	8002676 <_Z8gesture1v+0x136>
  {
    servo0.moveCont(1000, 0, servoPos0);
 8002636:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <_Z8gesture1v+0x1e8>)
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002642:	483a      	ldr	r0, [pc, #232]	; (800272c <_Z8gesture1v+0x1ec>)
 8002644:	f7fe fe40 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(1000, 3000);
 8002648:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800264c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002650:	4837      	ldr	r0, [pc, #220]	; (8002730 <_Z8gesture1v+0x1f0>)
 8002652:	f7fe fef7 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 0, servoPos2);
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <_Z8gesture1v+0x1f4>)
 8002658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002662:	4835      	ldr	r0, [pc, #212]	; (8002738 <_Z8gesture1v+0x1f8>)
 8002664:	f7fe fe30 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(100, 1800);
 8002668:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800266c:	2164      	movs	r1, #100	; 0x64
 800266e:	4833      	ldr	r0, [pc, #204]	; (800273c <_Z8gesture1v+0x1fc>)
 8002670:	f7fe ff43 	bl	80014fa <_ZN3STS9moveStop3Ess>
 8002674:	e004      	b.n	8002680 <_Z8gesture1v+0x140>
  }
  else
  {
    preTime1 = millis;
 8002676:	4b27      	ldr	r3, [pc, #156]	; (8002714 <_Z8gesture1v+0x1d4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <_Z8gesture1v+0x1dc>)
 800267e:	801a      	strh	r2, [r3, #0]
  }
  if (nowTime2 - preTime2 <= 53000)
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	4a28      	ldr	r2, [pc, #160]	; (8002724 <_Z8gesture1v+0x1e4>)
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	f64c 7208 	movw	r2, #53000	; 0xcf08
 800268c:	4293      	cmp	r3, r2
 800268e:	dc25      	bgt.n	80026dc <_Z8gesture1v+0x19c>
  {
    for (uint8_t led = 0; led < 48; led++)
 8002690:	2300      	movs	r3, #0
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2b2f      	cmp	r3, #47	; 0x2f
 8002698:	d819      	bhi.n	80026ce <_Z8gesture1v+0x18e>
    {
      NeopixelTape.set_hsv(led, 180 - (nowTime2 - preTime2) / 1000, 255, 255);
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	b299      	uxth	r1, r3
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <_Z8gesture1v+0x1e4>)
 80026a2:	8812      	ldrh	r2, [r2, #0]
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	4a26      	ldr	r2, [pc, #152]	; (8002740 <_Z8gesture1v+0x200>)
 80026a8:	fb82 0203 	smull	r0, r2, r2, r3
 80026ac:	1192      	asrs	r2, r2, #6
 80026ae:	17db      	asrs	r3, r3, #31
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	33b4      	adds	r3, #180	; 0xb4
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	23ff      	movs	r3, #255	; 0xff
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	23ff      	movs	r3, #255	; 0xff
 80026c0:	4820      	ldr	r0, [pc, #128]	; (8002744 <_Z8gesture1v+0x204>)
 80026c2:	f000 fc95 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	3301      	adds	r3, #1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	e7e2      	b.n	8002694 <_Z8gesture1v+0x154>
    }
    NeopixelTape.show();
 80026ce:	481d      	ldr	r0, [pc, #116]	; (8002744 <_Z8gesture1v+0x204>)
 80026d0:	f000 fd58 	bl	8003184 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f000 febf 	bl	8003458 <HAL_Delay>
      NeopixelTape.set_hsv(led, 127, 255, 255);
    }
    NeopixelTape.show();
    HAL_Delay(1);
  }
}
 80026da:	e017      	b.n	800270c <_Z8gesture1v+0x1cc>
    for (uint8_t led = 0; led < 48; led++)
 80026dc:	2300      	movs	r3, #0
 80026de:	71bb      	strb	r3, [r7, #6]
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	2b2f      	cmp	r3, #47	; 0x2f
 80026e4:	d80c      	bhi.n	8002700 <_Z8gesture1v+0x1c0>
      NeopixelTape.set_hsv(led, 127, 255, 255);
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	b299      	uxth	r1, r3
 80026ea:	23ff      	movs	r3, #255	; 0xff
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	23ff      	movs	r3, #255	; 0xff
 80026f0:	227f      	movs	r2, #127	; 0x7f
 80026f2:	4814      	ldr	r0, [pc, #80]	; (8002744 <_Z8gesture1v+0x204>)
 80026f4:	f000 fc7c 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	3301      	adds	r3, #1
 80026fc:	71bb      	strb	r3, [r7, #6]
 80026fe:	e7ef      	b.n	80026e0 <_Z8gesture1v+0x1a0>
    NeopixelTape.show();
 8002700:	4810      	ldr	r0, [pc, #64]	; (8002744 <_Z8gesture1v+0x204>)
 8002702:	f000 fd3f 	bl	8003184 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f000 fea6 	bl	8003458 <HAL_Delay>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20001b2c 	.word	0x20001b2c
 8002718:	20001b4c 	.word	0x20001b4c
 800271c:	20001b48 	.word	0x20001b48
 8002720:	20001b54 	.word	0x20001b54
 8002724:	20001b50 	.word	0x20001b50
 8002728:	20001a18 	.word	0x20001a18
 800272c:	200019e8 	.word	0x200019e8
 8002730:	200019f4 	.word	0x200019f4
 8002734:	20001a1c 	.word	0x20001a1c
 8002738:	20001a00 	.word	0x20001a00
 800273c:	20001a0c 	.word	0x20001a0c
 8002740:	10624dd3 	.word	0x10624dd3
 8002744:	20000360 	.word	0x20000360

08002748 <_Z8gesture2v>:

void gesture2()
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af02      	add	r7, sp, #8
  uint16_t nowTime = millis;
 800274e:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <_Z8gesture2v+0x16c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	80bb      	strh	r3, [r7, #4]
  static uint16_t preTime = millis;
 8002754:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <_Z8gesture2v+0x170>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f3bf 8f5b 	dmb	ish
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <_Z8gesture2v+0x4e>
 8002770:	4851      	ldr	r0, [pc, #324]	; (80028b8 <_Z8gesture2v+0x170>)
 8002772:	f005 fbc3 	bl	8007efc <__cxa_guard_acquire>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf14      	ite	ne
 800277c:	2301      	movne	r3, #1
 800277e:	2300      	moveq	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <_Z8gesture2v+0x4e>
 8002786:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <_Z8gesture2v+0x16c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <_Z8gesture2v+0x174>)
 800278e:	801a      	strh	r2, [r3, #0]
 8002790:	4849      	ldr	r0, [pc, #292]	; (80028b8 <_Z8gesture2v+0x170>)
 8002792:	f005 fbbf 	bl	8007f14 <__cxa_guard_release>
  if (nowTime - preTime < 1500)
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	4a48      	ldr	r2, [pc, #288]	; (80028bc <_Z8gesture2v+0x174>)
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	f240 52db 	movw	r2, #1499	; 0x5db
 80027a2:	4293      	cmp	r3, r2
 80027a4:	dc3a      	bgt.n	800281c <_Z8gesture2v+0xd4>
  {
    servo0.moveCont(1000, 2047, servoPos0);
 80027a6:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <_Z8gesture2v+0x178>)
 80027a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027b4:	4843      	ldr	r0, [pc, #268]	; (80028c4 <_Z8gesture2v+0x17c>)
 80027b6:	f7fe fd87 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(1000, 1000);
 80027ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027c2:	4841      	ldr	r0, [pc, #260]	; (80028c8 <_Z8gesture2v+0x180>)
 80027c4:	f7fe fe3e 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2047, servoPos2);
 80027c8:	4b40      	ldr	r3, [pc, #256]	; (80028cc <_Z8gesture2v+0x184>)
 80027ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027d6:	483e      	ldr	r0, [pc, #248]	; (80028d0 <_Z8gesture2v+0x188>)
 80027d8:	f7fe fd76 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 80027dc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80027e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027e4:	483b      	ldr	r0, [pc, #236]	; (80028d4 <_Z8gesture2v+0x18c>)
 80027e6:	f7fe fe88 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b2f      	cmp	r3, #47	; 0x2f
 80027f2:	d80c      	bhi.n	800280e <_Z8gesture2v+0xc6>
    {
      NeopixelTape.set_hsv(led, 127, 255, 255);
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	b299      	uxth	r1, r3
 80027f8:	23ff      	movs	r3, #255	; 0xff
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	23ff      	movs	r3, #255	; 0xff
 80027fe:	227f      	movs	r2, #127	; 0x7f
 8002800:	4835      	ldr	r0, [pc, #212]	; (80028d8 <_Z8gesture2v+0x190>)
 8002802:	f000 fbf5 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	3301      	adds	r3, #1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	e7ef      	b.n	80027ee <_Z8gesture2v+0xa6>
    }
    NeopixelTape.show();
 800280e:	4832      	ldr	r0, [pc, #200]	; (80028d8 <_Z8gesture2v+0x190>)
 8002810:	f000 fcb8 	bl	8003184 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f000 fe1f 	bl	8003458 <HAL_Delay>
  }
  else
  {
    preTime = millis;
  }
}
 800281a:	e047      	b.n	80028ac <_Z8gesture2v+0x164>
  else if (nowTime - preTime < 3000)
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	4a27      	ldr	r2, [pc, #156]	; (80028bc <_Z8gesture2v+0x174>)
 8002820:	8812      	ldrh	r2, [r2, #0]
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002828:	4293      	cmp	r3, r2
 800282a:	dc3a      	bgt.n	80028a2 <_Z8gesture2v+0x15a>
    servo0.moveCont(1000, 2047, servoPos0);
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <_Z8gesture2v+0x178>)
 800282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002832:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002836:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800283a:	4822      	ldr	r0, [pc, #136]	; (80028c4 <_Z8gesture2v+0x17c>)
 800283c:	f7fe fd44 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(1000, 3000);
 8002840:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002848:	481f      	ldr	r0, [pc, #124]	; (80028c8 <_Z8gesture2v+0x180>)
 800284a:	f7fe fdfb 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2047, servoPos2);
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <_Z8gesture2v+0x184>)
 8002850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002854:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800285c:	481c      	ldr	r0, [pc, #112]	; (80028d0 <_Z8gesture2v+0x188>)
 800285e:	f7fe fd33 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 3000);
 8002862:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002866:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800286a:	481a      	ldr	r0, [pc, #104]	; (80028d4 <_Z8gesture2v+0x18c>)
 800286c:	f7fe fe45 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 8002870:	2300      	movs	r3, #0
 8002872:	71bb      	strb	r3, [r7, #6]
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	2b2f      	cmp	r3, #47	; 0x2f
 8002878:	d80c      	bhi.n	8002894 <_Z8gesture2v+0x14c>
      NeopixelTape.set_hsv(led, 127, 255, 255);
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	b299      	uxth	r1, r3
 800287e:	23ff      	movs	r3, #255	; 0xff
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	23ff      	movs	r3, #255	; 0xff
 8002884:	227f      	movs	r2, #127	; 0x7f
 8002886:	4814      	ldr	r0, [pc, #80]	; (80028d8 <_Z8gesture2v+0x190>)
 8002888:	f000 fbb2 	bl	8002ff0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	3301      	adds	r3, #1
 8002890:	71bb      	strb	r3, [r7, #6]
 8002892:	e7ef      	b.n	8002874 <_Z8gesture2v+0x12c>
    NeopixelTape.show();
 8002894:	4810      	ldr	r0, [pc, #64]	; (80028d8 <_Z8gesture2v+0x190>)
 8002896:	f000 fc75 	bl	8003184 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f000 fddc 	bl	8003458 <HAL_Delay>
}
 80028a0:	e004      	b.n	80028ac <_Z8gesture2v+0x164>
    preTime = millis;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <_Z8gesture2v+0x16c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <_Z8gesture2v+0x174>)
 80028aa:	801a      	strh	r2, [r3, #0]
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20001b2c 	.word	0x20001b2c
 80028b8:	20001b5c 	.word	0x20001b5c
 80028bc:	20001b58 	.word	0x20001b58
 80028c0:	20001a18 	.word	0x20001a18
 80028c4:	200019e8 	.word	0x200019e8
 80028c8:	200019f4 	.word	0x200019f4
 80028cc:	20001a1c 	.word	0x20001a1c
 80028d0:	20001a00 	.word	0x20001a00
 80028d4:	20001a0c 	.word	0x20001a0c
 80028d8:	20000360 	.word	0x20000360

080028dc <Error_Handler>:
=======
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af02      	add	r7, sp, #8
  countLocal = millis - 37000;
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <_Z5mode4v+0x19c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
 8003290:	3378      	adds	r3, #120	; 0x78
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b62      	ldr	r3, [pc, #392]	; (8003420 <_Z5mode4v+0x1a0>)
 8003296:	801a      	strh	r2, [r3, #0]
  if (ID == 1)
 8003298:	4b62      	ldr	r3, [pc, #392]	; (8003424 <_Z5mode4v+0x1a4>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d139      	bne.n	8003314 <_Z5mode4v+0x94>
  {
    for (uint8_t led = 0; led < 48; led++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	71fb      	strb	r3, [r7, #7]
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b2f      	cmp	r3, #47	; 0x2f
 80032a8:	d80c      	bhi.n	80032c4 <_Z5mode4v+0x44>
    {
      NeopixelTape.set_hsv(led, 0, 0, 0);
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	b299      	uxth	r1, r3
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	2200      	movs	r2, #0
 80032b6:	485c      	ldr	r0, [pc, #368]	; (8003428 <_Z5mode4v+0x1a8>)
 80032b8:	f001 faf2 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	3301      	adds	r3, #1
 80032c0:	71fb      	strb	r3, [r7, #7]
 80032c2:	e7ef      	b.n	80032a4 <_Z5mode4v+0x24>
    }
    NeopixelTape.show();
 80032c4:	4858      	ldr	r0, [pc, #352]	; (8003428 <_Z5mode4v+0x1a8>)
 80032c6:	f001 fbb5 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f001 fd1c 	bl	8004d08 <HAL_Delay>
    servo0.moveCont(500, 2048, servoPos0);
 80032d0:	4b56      	ldr	r3, [pc, #344]	; (800342c <_Z5mode4v+0x1ac>)
 80032d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80032de:	4854      	ldr	r0, [pc, #336]	; (8003430 <_Z5mode4v+0x1b0>)
 80032e0:	f7fd fff2 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 1000);
 80032e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80032ec:	4851      	ldr	r0, [pc, #324]	; (8003434 <_Z5mode4v+0x1b4>)
 80032ee:	f7fe f8a9 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2048, servoPos2);
 80032f2:	4b51      	ldr	r3, [pc, #324]	; (8003438 <_Z5mode4v+0x1b8>)
 80032f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003300:	484e      	ldr	r0, [pc, #312]	; (800343c <_Z5mode4v+0x1bc>)
 8003302:	f7fd ffe1 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 3000);
 8003306:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800330a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800330e:	484c      	ldr	r0, [pc, #304]	; (8003440 <_Z5mode4v+0x1c0>)
 8003310:	f7fe f8f3 	bl	80014fa <_ZN3STS9moveStop3Ess>
  }
  if (ID == 2 && countLocal < 7500)
 8003314:	4b43      	ldr	r3, [pc, #268]	; (8003424 <_Z5mode4v+0x1a4>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d13e      	bne.n	800339a <_Z5mode4v+0x11a>
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <_Z5mode4v+0x1a0>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8003324:	4293      	cmp	r3, r2
 8003326:	d838      	bhi.n	800339a <_Z5mode4v+0x11a>
  {
    servo0.moveCont(1000, 6144, servoPos0);
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <_Z5mode4v+0x1ac>)
 800332a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800332e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003336:	483e      	ldr	r0, [pc, #248]	; (8003430 <_Z5mode4v+0x1b0>)
 8003338:	f7fd ffc6 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 2048);
 800333c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003340:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003344:	483b      	ldr	r0, [pc, #236]	; (8003434 <_Z5mode4v+0x1b4>)
 8003346:	f7fe f87d 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(1000, 6144, servoPos2);
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <_Z5mode4v+0x1b8>)
 800334c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003350:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003354:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003358:	4838      	ldr	r0, [pc, #224]	; (800343c <_Z5mode4v+0x1bc>)
 800335a:	f7fd ffb5 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 800335e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003362:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003366:	4836      	ldr	r0, [pc, #216]	; (8003440 <_Z5mode4v+0x1c0>)
 8003368:	f7fe f8c7 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 800336c:	2300      	movs	r3, #0
 800336e:	71bb      	strb	r3, [r7, #6]
 8003370:	79bb      	ldrb	r3, [r7, #6]
 8003372:	2b2f      	cmp	r3, #47	; 0x2f
 8003374:	d811      	bhi.n	800339a <_Z5mode4v+0x11a>
    {
      NeopixelTape.set_hsv(led, hue, 255, 100);
 8003376:	79bb      	ldrb	r3, [r7, #6]
 8003378:	b299      	uxth	r1, r3
 800337a:	4b32      	ldr	r3, [pc, #200]	; (8003444 <_Z5mode4v+0x1c4>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	b21a      	sxth	r2, r3
 8003380:	2364      	movs	r3, #100	; 0x64
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	23ff      	movs	r3, #255	; 0xff
 8003386:	4828      	ldr	r0, [pc, #160]	; (8003428 <_Z5mode4v+0x1a8>)
 8003388:	f001 fa8a 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 800338c:	4826      	ldr	r0, [pc, #152]	; (8003428 <_Z5mode4v+0x1a8>)
 800338e:	f001 fb51 	bl	8004a34 <_ZN7WS2812C4showEv>
    for (uint8_t led = 0; led < 48; led++)
 8003392:	79bb      	ldrb	r3, [r7, #6]
 8003394:	3301      	adds	r3, #1
 8003396:	71bb      	strb	r3, [r7, #6]
 8003398:	e7ea      	b.n	8003370 <_Z5mode4v+0xf0>
    }
  }
  if (ID == 2 && countLocal > 7500)
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <_Z5mode4v+0x1a4>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d158      	bne.n	8003454 <_Z5mode4v+0x1d4>
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <_Z5mode4v+0x1a0>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d952      	bls.n	8003454 <_Z5mode4v+0x1d4>
  {
    servo0.moveCont(1000, 6144, servoPos0);
 80033ae:	4b1f      	ldr	r3, [pc, #124]	; (800342c <_Z5mode4v+0x1ac>)
 80033b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80033b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033bc:	481c      	ldr	r0, [pc, #112]	; (8003430 <_Z5mode4v+0x1b0>)
 80033be:	f7fd ff83 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(2000, 1000);
 80033c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033c6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80033ca:	481a      	ldr	r0, [pc, #104]	; (8003434 <_Z5mode4v+0x1b4>)
 80033cc:	f7fe f83a 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(1000, 6144, servoPos2);
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <_Z5mode4v+0x1b8>)
 80033d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033d6:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80033da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033de:	4817      	ldr	r0, [pc, #92]	; (800343c <_Z5mode4v+0x1bc>)
 80033e0:	f7fd ff72 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(2000, 3000);
 80033e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80033e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80033ec:	4814      	ldr	r0, [pc, #80]	; (8003440 <_Z5mode4v+0x1c0>)
 80033ee:	f7fe f884 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	717b      	strb	r3, [r7, #5]
 80033f6:	797b      	ldrb	r3, [r7, #5]
 80033f8:	2b2f      	cmp	r3, #47	; 0x2f
 80033fa:	d825      	bhi.n	8003448 <_Z5mode4v+0x1c8>
    {
      NeopixelTape.set_hsv(led, hue, 255, 0);
 80033fc:	797b      	ldrb	r3, [r7, #5]
 80033fe:	b299      	uxth	r1, r3
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <_Z5mode4v+0x1c4>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b21a      	sxth	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	23ff      	movs	r3, #255	; 0xff
 800340c:	4806      	ldr	r0, [pc, #24]	; (8003428 <_Z5mode4v+0x1a8>)
 800340e:	f001 fa47 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 8003412:	797b      	ldrb	r3, [r7, #5]
 8003414:	3301      	adds	r3, #1
 8003416:	717b      	strb	r3, [r7, #5]
 8003418:	e7ed      	b.n	80033f6 <_Z5mode4v+0x176>
 800341a:	bf00      	nop
 800341c:	20001b3c 	.word	0x20001b3c
 8003420:	20001b40 	.word	0x20001b40
 8003424:	20001b34 	.word	0x20001b34
 8003428:	20000368 	.word	0x20000368
 800342c:	20001a24 	.word	0x20001a24
 8003430:	200019f4 	.word	0x200019f4
 8003434:	20001a00 	.word	0x20001a00
 8003438:	20001a28 	.word	0x20001a28
 800343c:	20001a0c 	.word	0x20001a0c
 8003440:	20001a18 	.word	0x20001a18
 8003444:	20001b38 	.word	0x20001b38
    }
    NeopixelTape.show();
 8003448:	4881      	ldr	r0, [pc, #516]	; (8003650 <_Z5mode4v+0x3d0>)
 800344a:	f001 faf3 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 800344e:	2001      	movs	r0, #1
 8003450:	f001 fc5a 	bl	8004d08 <HAL_Delay>
  }
  if (ID == 3 && countLocal < 7500)
 8003454:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <_Z5mode4v+0x3d4>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d127      	bne.n	80034ac <_Z5mode4v+0x22c>
 800345c:	4b7e      	ldr	r3, [pc, #504]	; (8003658 <_Z5mode4v+0x3d8>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8003464:	4293      	cmp	r3, r2
 8003466:	d821      	bhi.n	80034ac <_Z5mode4v+0x22c>
  {
    servo0.moveCont(500, 2048, servoPos0);
 8003468:	4b7c      	ldr	r3, [pc, #496]	; (800365c <_Z5mode4v+0x3dc>)
 800346a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003472:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003476:	487a      	ldr	r0, [pc, #488]	; (8003660 <_Z5mode4v+0x3e0>)
 8003478:	f7fd ff26 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 2048);
 800347c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003480:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003484:	4877      	ldr	r0, [pc, #476]	; (8003664 <_Z5mode4v+0x3e4>)
 8003486:	f7fd ffdd 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2048, servoPos2);
 800348a:	4b77      	ldr	r3, [pc, #476]	; (8003668 <_Z5mode4v+0x3e8>)
 800348c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003494:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003498:	4874      	ldr	r0, [pc, #464]	; (800366c <_Z5mode4v+0x3ec>)
 800349a:	f7fd ff15 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 800349e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80034a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034a6:	4872      	ldr	r0, [pc, #456]	; (8003670 <_Z5mode4v+0x3f0>)
 80034a8:	f7fe f827 	bl	80014fa <_ZN3STS9moveStop3Ess>
  }
  if (ID == 3 && countLocal > 7500 && countLocal < 11400)
 80034ac:	4b69      	ldr	r3, [pc, #420]	; (8003654 <_Z5mode4v+0x3d4>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	f040 8098 	bne.w	80035e6 <_Z5mode4v+0x366>
 80034b6:	4b68      	ldr	r3, [pc, #416]	; (8003658 <_Z5mode4v+0x3d8>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80034be:	4293      	cmp	r3, r2
 80034c0:	f240 8091 	bls.w	80035e6 <_Z5mode4v+0x366>
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <_Z5mode4v+0x3d8>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f642 4287 	movw	r2, #11399	; 0x2c87
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f200 808a 	bhi.w	80035e6 <_Z5mode4v+0x366>
  {
    servo0.moveCont(0, 2048, servoPos0);
 80034d2:	4b62      	ldr	r3, [pc, #392]	; (800365c <_Z5mode4v+0x3dc>)
 80034d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034dc:	2100      	movs	r1, #0
 80034de:	4860      	ldr	r0, [pc, #384]	; (8003660 <_Z5mode4v+0x3e0>)
 80034e0:	f7fd fef2 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(0, 2048);
 80034e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e8:	2100      	movs	r1, #0
 80034ea:	485e      	ldr	r0, [pc, #376]	; (8003664 <_Z5mode4v+0x3e4>)
 80034ec:	f7fd ffaa 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(0, 2048, servoPos2);
 80034f0:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <_Z5mode4v+0x3e8>)
 80034f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034fa:	2100      	movs	r1, #0
 80034fc:	485b      	ldr	r0, [pc, #364]	; (800366c <_Z5mode4v+0x3ec>)
 80034fe:	f7fd fee3 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(0, 1800);
 8003502:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003506:	2100      	movs	r1, #0
 8003508:	4859      	ldr	r0, [pc, #356]	; (8003670 <_Z5mode4v+0x3f0>)
 800350a:	f7fd fff6 	bl	80014fa <_ZN3STS9moveStop3Ess>
    moveRotation = calc.calcRotation((countLocal - 7500) / 10, gyro);
 800350e:	4b52      	ldr	r3, [pc, #328]	; (8003658 <_Z5mode4v+0x3d8>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	f5a3 53ea 	sub.w	r3, r3, #7488	; 0x1d40
 8003516:	3b0c      	subs	r3, #12
 8003518:	4a56      	ldr	r2, [pc, #344]	; (8003674 <_Z5mode4v+0x3f4>)
 800351a:	fb82 1203 	smull	r1, r2, r2, r3
 800351e:	1092      	asrs	r2, r2, #2
 8003520:	17db      	asrs	r3, r3, #31
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b21b      	sxth	r3, r3
 8003526:	4a54      	ldr	r2, [pc, #336]	; (8003678 <_Z5mode4v+0x3f8>)
 8003528:	f9b2 2000 	ldrsh.w	r2, [r2]
 800352c:	4619      	mov	r1, r3
 800352e:	4853      	ldr	r0, [pc, #332]	; (800367c <_Z5mode4v+0x3fc>)
 8003530:	f7fe fb96 	bl	8001c60 <_ZN4CALC12calcRotationEss>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	4b51      	ldr	r3, [pc, #324]	; (8003680 <_Z5mode4v+0x400>)
 800353a:	801a      	strh	r2, [r3, #0]
    sendData(0, 0, moveRotation);
 800353c:	4b50      	ldr	r3, [pc, #320]	; (8003680 <_Z5mode4v+0x400>)
 800353e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003542:	461a      	mov	r2, r3
 8003544:	2100      	movs	r1, #0
 8003546:	2000      	movs	r0, #0
 8003548:	f7ff fa34 	bl	80029b4 <_Z8sendDataths>
    for (uint8_t led = 0; led < 16; led++)
 800354c:	2300      	movs	r3, #0
 800354e:	713b      	strb	r3, [r7, #4]
 8003550:	793b      	ldrb	r3, [r7, #4]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	d841      	bhi.n	80035da <_Z5mode4v+0x35a>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, (ledPos0 + 180) % 360, 90, hue, 100), 255, calc.similarityNormal(led, (ledPos0 + 180) % 360, 90));
 8003556:	793b      	ldrb	r3, [r7, #4]
 8003558:	b29c      	uxth	r4, r3
 800355a:	4b4a      	ldr	r3, [pc, #296]	; (8003684 <_Z5mode4v+0x404>)
 800355c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003560:	33b4      	adds	r3, #180	; 0xb4
 8003562:	4a49      	ldr	r2, [pc, #292]	; (8003688 <_Z5mode4v+0x408>)
 8003564:	fb82 1203 	smull	r1, r2, r2, r3
 8003568:	441a      	add	r2, r3
 800356a:	1211      	asrs	r1, r2, #8
 800356c:	17da      	asrs	r2, r3, #31
 800356e:	1a8a      	subs	r2, r1, r2
 8003570:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003574:	fb01 f202 	mul.w	r2, r1, r2
 8003578:	1a9a      	subs	r2, r3, r2
 800357a:	b212      	sxth	r2, r2
 800357c:	4b43      	ldr	r3, [pc, #268]	; (800368c <_Z5mode4v+0x40c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	7939      	ldrb	r1, [r7, #4]
 8003584:	2064      	movs	r0, #100	; 0x64
 8003586:	9001      	str	r0, [sp, #4]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	235a      	movs	r3, #90	; 0x5a
 800358c:	483b      	ldr	r0, [pc, #236]	; (800367c <_Z5mode4v+0x3fc>)
 800358e:	f7fe f997 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003592:	4603      	mov	r3, r0
 8003594:	461d      	mov	r5, r3
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <_Z5mode4v+0x404>)
 8003598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359c:	33b4      	adds	r3, #180	; 0xb4
 800359e:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <_Z5mode4v+0x408>)
 80035a0:	fb82 1203 	smull	r1, r2, r2, r3
 80035a4:	441a      	add	r2, r3
 80035a6:	1211      	asrs	r1, r2, #8
 80035a8:	17da      	asrs	r2, r3, #31
 80035aa:	1a8a      	subs	r2, r1, r2
 80035ac:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80035b0:	fb01 f202 	mul.w	r2, r1, r2
 80035b4:	1a9a      	subs	r2, r3, r2
 80035b6:	b212      	sxth	r2, r2
 80035b8:	7939      	ldrb	r1, [r7, #4]
 80035ba:	235a      	movs	r3, #90	; 0x5a
 80035bc:	482f      	ldr	r0, [pc, #188]	; (800367c <_Z5mode4v+0x3fc>)
 80035be:	f7fe fa8b 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 80035c2:	4603      	mov	r3, r0
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	23ff      	movs	r3, #255	; 0xff
 80035c8:	462a      	mov	r2, r5
 80035ca:	4621      	mov	r1, r4
 80035cc:	4820      	ldr	r0, [pc, #128]	; (8003650 <_Z5mode4v+0x3d0>)
 80035ce:	f001 f967 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 80035d2:	793b      	ldrb	r3, [r7, #4]
 80035d4:	3301      	adds	r3, #1
 80035d6:	713b      	strb	r3, [r7, #4]
 80035d8:	e7ba      	b.n	8003550 <_Z5mode4v+0x2d0>
    }
    NeopixelTape.show();
 80035da:	481d      	ldr	r0, [pc, #116]	; (8003650 <_Z5mode4v+0x3d0>)
 80035dc:	f001 fa2a 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f001 fb91 	bl	8004d08 <HAL_Delay>
  }
  if (ID == 3 && countLocal > 11400)
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <_Z5mode4v+0x3d4>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d12c      	bne.n	8003648 <_Z5mode4v+0x3c8>
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <_Z5mode4v+0x3d8>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	f642 4288 	movw	r2, #11400	; 0x2c88
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d926      	bls.n	8003648 <_Z5mode4v+0x3c8>
  {
    sendData(0, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2000      	movs	r0, #0
 8003600:	f7ff f9d8 	bl	80029b4 <_Z8sendDataths>
    servo0.moveCont(2000, 3072, servoPos0);
 8003604:	4b15      	ldr	r3, [pc, #84]	; (800365c <_Z5mode4v+0x3dc>)
 8003606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800360e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003612:	4813      	ldr	r0, [pc, #76]	; (8003660 <_Z5mode4v+0x3e0>)
 8003614:	f7fd fe58 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(2000, 1024);
 8003618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003620:	4810      	ldr	r0, [pc, #64]	; (8003664 <_Z5mode4v+0x3e4>)
 8003622:	f7fd ff0f 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(1000, 2048, servoPos2);
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <_Z5mode4v+0x3e8>)
 8003628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003630:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003634:	480d      	ldr	r0, [pc, #52]	; (800366c <_Z5mode4v+0x3ec>)
 8003636:	f7fd fe47 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(2000, 2800);
 800363a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800363e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003642:	480b      	ldr	r0, [pc, #44]	; (8003670 <_Z5mode4v+0x3f0>)
 8003644:	f7fd ff59 	bl	80014fa <_ZN3STS9moveStop3Ess>
  }
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bdb0      	pop	{r4, r5, r7, pc}
 8003650:	20000368 	.word	0x20000368
 8003654:	20001b34 	.word	0x20001b34
 8003658:	20001b40 	.word	0x20001b40
 800365c:	20001a24 	.word	0x20001a24
 8003660:	200019f4 	.word	0x200019f4
 8003664:	20001a00 	.word	0x20001a00
 8003668:	20001a28 	.word	0x20001a28
 800366c:	20001a0c 	.word	0x20001a0c
 8003670:	20001a18 	.word	0x20001a18
 8003674:	66666667 	.word	0x66666667
 8003678:	20001b32 	.word	0x20001b32
 800367c:	200019f0 	.word	0x200019f0
 8003680:	20001b42 	.word	0x20001b42
 8003684:	20001b2c 	.word	0x20001b2c
 8003688:	b60b60b7 	.word	0xb60b60b7
 800368c:	20001b38 	.word	0x20001b38

08003690 <_Z5mode5v>:

void mode5()
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <_Z5mode5v+0x7c>)
 8003698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a0:	2100      	movs	r1, #0
 80036a2:	481b      	ldr	r0, [pc, #108]	; (8003710 <_Z5mode5v+0x80>)
 80036a4:	f7fd fe10 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 80036a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ac:	2100      	movs	r1, #0
 80036ae:	4819      	ldr	r0, [pc, #100]	; (8003714 <_Z5mode5v+0x84>)
 80036b0:	f7fd fec8 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 80036b4:	4b18      	ldr	r3, [pc, #96]	; (8003718 <_Z5mode5v+0x88>)
 80036b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036be:	2100      	movs	r1, #0
 80036c0:	4816      	ldr	r0, [pc, #88]	; (800371c <_Z5mode5v+0x8c>)
 80036c2:	f7fd fe01 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 80036c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80036ca:	2100      	movs	r1, #0
 80036cc:	4814      	ldr	r0, [pc, #80]	; (8003720 <_Z5mode5v+0x90>)
 80036ce:	f7fd ff14 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	71fb      	strb	r3, [r7, #7]
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b2f      	cmp	r3, #47	; 0x2f
 80036da:	d80c      	bhi.n	80036f6 <_Z5mode5v+0x66>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	b299      	uxth	r1, r3
 80036e0:	2300      	movs	r3, #0
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	2200      	movs	r2, #0
 80036e8:	480e      	ldr	r0, [pc, #56]	; (8003724 <_Z5mode5v+0x94>)
 80036ea:	f001 f8d9 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	3301      	adds	r3, #1
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	e7ef      	b.n	80036d6 <_Z5mode5v+0x46>
  }
  NeopixelTape.show();
 80036f6:	480b      	ldr	r0, [pc, #44]	; (8003724 <_Z5mode5v+0x94>)
 80036f8:	f001 f99c 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 80036fc:	2001      	movs	r0, #1
 80036fe:	f001 fb03 	bl	8004d08 <HAL_Delay>
}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20001a24 	.word	0x20001a24
 8003710:	200019f4 	.word	0x200019f4
 8003714:	20001a00 	.word	0x20001a00
 8003718:	20001a28 	.word	0x20001a28
 800371c:	20001a0c 	.word	0x20001a0c
 8003720:	20001a18 	.word	0x20001a18
 8003724:	20000368 	.word	0x20000368

08003728 <_Z5mode6v>:

void mode6()
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <_Z5mode6v+0x7c>)
 8003730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003738:	2100      	movs	r1, #0
 800373a:	481b      	ldr	r0, [pc, #108]	; (80037a8 <_Z5mode6v+0x80>)
 800373c:	f7fd fdc4 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8003740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003744:	2100      	movs	r1, #0
 8003746:	4819      	ldr	r0, [pc, #100]	; (80037ac <_Z5mode6v+0x84>)
 8003748:	f7fd fe7c 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <_Z5mode6v+0x88>)
 800374e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003756:	2100      	movs	r1, #0
 8003758:	4816      	ldr	r0, [pc, #88]	; (80037b4 <_Z5mode6v+0x8c>)
 800375a:	f7fd fdb5 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 800375e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003762:	2100      	movs	r1, #0
 8003764:	4814      	ldr	r0, [pc, #80]	; (80037b8 <_Z5mode6v+0x90>)
 8003766:	f7fd fec8 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 800376a:	2300      	movs	r3, #0
 800376c:	71fb      	strb	r3, [r7, #7]
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	2b2f      	cmp	r3, #47	; 0x2f
 8003772:	d80c      	bhi.n	800378e <_Z5mode6v+0x66>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	b299      	uxth	r1, r3
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	2200      	movs	r2, #0
 8003780:	480e      	ldr	r0, [pc, #56]	; (80037bc <_Z5mode6v+0x94>)
 8003782:	f001 f88d 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	3301      	adds	r3, #1
 800378a:	71fb      	strb	r3, [r7, #7]
 800378c:	e7ef      	b.n	800376e <_Z5mode6v+0x46>
  }
  NeopixelTape.show();
 800378e:	480b      	ldr	r0, [pc, #44]	; (80037bc <_Z5mode6v+0x94>)
 8003790:	f001 f950 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003794:	2001      	movs	r0, #1
 8003796:	f001 fab7 	bl	8004d08 <HAL_Delay>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20001a24 	.word	0x20001a24
 80037a8:	200019f4 	.word	0x200019f4
 80037ac:	20001a00 	.word	0x20001a00
 80037b0:	20001a28 	.word	0x20001a28
 80037b4:	20001a0c 	.word	0x20001a0c
 80037b8:	20001a18 	.word	0x20001a18
 80037bc:	20000368 	.word	0x20000368

080037c0 <_Z5mode7v>:

void mode7()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 80037c6:	4b23      	ldr	r3, [pc, #140]	; (8003854 <_Z5mode7v+0x94>)
 80037c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d0:	2100      	movs	r1, #0
 80037d2:	4821      	ldr	r0, [pc, #132]	; (8003858 <_Z5mode7v+0x98>)
 80037d4:	f7fd fd78 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 80037d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037dc:	2100      	movs	r1, #0
 80037de:	481f      	ldr	r0, [pc, #124]	; (800385c <_Z5mode7v+0x9c>)
 80037e0:	f7fd fe30 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <_Z5mode7v+0xa0>)
 80037e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ee:	2100      	movs	r1, #0
 80037f0:	481c      	ldr	r0, [pc, #112]	; (8003864 <_Z5mode7v+0xa4>)
 80037f2:	f7fd fd69 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 80037f6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80037fa:	2100      	movs	r1, #0
 80037fc:	481a      	ldr	r0, [pc, #104]	; (8003868 <_Z5mode7v+0xa8>)
 80037fe:	f7fd fe7c 	bl	80014fa <_ZN3STS9moveStop3Ess>
  static uint16_t randomNum = 0;
  randomNum += 47;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <_Z5mode7v+0xac>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	332f      	adds	r3, #47	; 0x2f
 8003808:	b29a      	uxth	r2, r3
 800380a:	4b18      	ldr	r3, [pc, #96]	; (800386c <_Z5mode7v+0xac>)
 800380c:	801a      	strh	r2, [r3, #0]
  for (uint8_t led = 0; led < 48; led++)
 800380e:	2300      	movs	r3, #0
 8003810:	71fb      	strb	r3, [r7, #7]
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	2b2f      	cmp	r3, #47	; 0x2f
 8003816:	d813      	bhi.n	8003840 <_Z5mode7v+0x80>
  {
    NeopixelTape.set_hsv(led, randomNum, randomNum, randomNum);
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	b299      	uxth	r1, r3
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <_Z5mode7v+0xac>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b21a      	sxth	r2, r3
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <_Z5mode7v+0xac>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b218      	sxth	r0, r3
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <_Z5mode7v+0xac>)
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b21b      	sxth	r3, r3
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4603      	mov	r3, r0
 8003832:	480f      	ldr	r0, [pc, #60]	; (8003870 <_Z5mode7v+0xb0>)
 8003834:	f001 f834 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	3301      	adds	r3, #1
 800383c:	71fb      	strb	r3, [r7, #7]
 800383e:	e7e8      	b.n	8003812 <_Z5mode7v+0x52>
  }
  NeopixelTape.show();
 8003840:	480b      	ldr	r0, [pc, #44]	; (8003870 <_Z5mode7v+0xb0>)
 8003842:	f001 f8f7 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003846:	2001      	movs	r0, #1
 8003848:	f001 fa5e 	bl	8004d08 <HAL_Delay>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20001a24 	.word	0x20001a24
 8003858:	200019f4 	.word	0x200019f4
 800385c:	20001a00 	.word	0x20001a00
 8003860:	20001a28 	.word	0x20001a28
 8003864:	20001a0c 	.word	0x20001a0c
 8003868:	20001a18 	.word	0x20001a18
 800386c:	20001b54 	.word	0x20001b54
 8003870:	20000368 	.word	0x20000368

08003874 <_Z5mode8v>:

void mode8()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af02      	add	r7, sp, #8
  for (uint8_t led = 0; led < 48; led++)
 800387a:	2300      	movs	r3, #0
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b2f      	cmp	r3, #47	; 0x2f
 8003882:	d80c      	bhi.n	800389e <_Z5mode8v+0x2a>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	b299      	uxth	r1, r3
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2300      	movs	r3, #0
 800388e:	2200      	movs	r2, #0
 8003890:	4808      	ldr	r0, [pc, #32]	; (80038b4 <_Z5mode8v+0x40>)
 8003892:	f001 f805 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	3301      	adds	r3, #1
 800389a:	71fb      	strb	r3, [r7, #7]
 800389c:	e7ef      	b.n	800387e <_Z5mode8v+0xa>
  }
  NeopixelTape.show();
 800389e:	4805      	ldr	r0, [pc, #20]	; (80038b4 <_Z5mode8v+0x40>)
 80038a0:	f001 f8c8 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 80038a4:	2001      	movs	r0, #1
 80038a6:	f001 fa2f 	bl	8004d08 <HAL_Delay>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000368 	.word	0x20000368

080038b8 <_Z5mode9v>:

void mode9() {}
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_Z6mode10v>:

void mode10() {}
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_Z6mode11v>:

void mode11()
{
 80038d4:	b5b0      	push	{r4, r5, r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af02      	add	r7, sp, #8
  countLocal = millis - 208500;
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <_Z6mode11v+0x17c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f5a3 5339 	sub.w	r3, r3, #11840	; 0x2e40
 80038e4:	3b34      	subs	r3, #52	; 0x34
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	4b5a      	ldr	r3, [pc, #360]	; (8003a54 <_Z6mode11v+0x180>)
 80038ea:	801a      	strh	r2, [r3, #0]
  static uint8_t status = 0;
  static uint16_t degree = 0;

  servo0.moveCont(1000, countLocal % 2000 * 2, servoPos0);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <_Z6mode11v+0x180>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	4a59      	ldr	r2, [pc, #356]	; (8003a58 <_Z6mode11v+0x184>)
 80038f2:	fba2 1203 	umull	r1, r2, r2, r3
 80038f6:	09d2      	lsrs	r2, r2, #7
 80038f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80038fc:	fb01 f202 	mul.w	r2, r1, r2
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	b29b      	uxth	r3, r3
 8003908:	b21a      	sxth	r2, r3
 800390a:	4b54      	ldr	r3, [pc, #336]	; (8003a5c <_Z6mode11v+0x188>)
 800390c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003910:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003914:	4852      	ldr	r0, [pc, #328]	; (8003a60 <_Z6mode11v+0x18c>)
 8003916:	f7fd fcd7 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(1000, countLocal % 2000 + 1100);
 800391a:	4b4e      	ldr	r3, [pc, #312]	; (8003a54 <_Z6mode11v+0x180>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	4a4e      	ldr	r2, [pc, #312]	; (8003a58 <_Z6mode11v+0x184>)
 8003920:	fba2 1203 	umull	r1, r2, r2, r3
 8003924:	09d2      	lsrs	r2, r2, #7
 8003926:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800392a:	fb01 f202 	mul.w	r2, r1, r2
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	b29b      	uxth	r3, r3
 8003932:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8003936:	b29b      	uxth	r3, r3
 8003938:	b21b      	sxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003940:	4848      	ldr	r0, [pc, #288]	; (8003a64 <_Z6mode11v+0x190>)
 8003942:	f7fd fd7f 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(1000, countLocal % 2000 * 2, servoPos2);
 8003946:	4b43      	ldr	r3, [pc, #268]	; (8003a54 <_Z6mode11v+0x180>)
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	4a43      	ldr	r2, [pc, #268]	; (8003a58 <_Z6mode11v+0x184>)
 800394c:	fba2 1203 	umull	r1, r2, r2, r3
 8003950:	09d2      	lsrs	r2, r2, #7
 8003952:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003956:	fb01 f202 	mul.w	r2, r1, r2
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	b21a      	sxth	r2, r3
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <_Z6mode11v+0x194>)
 8003966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800396e:	483f      	ldr	r0, [pc, #252]	; (8003a6c <_Z6mode11v+0x198>)
 8003970:	f7fd fcaa 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(1000, countLocal % 2000 / 2 + 1900);
 8003974:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <_Z6mode11v+0x180>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	4a37      	ldr	r2, [pc, #220]	; (8003a58 <_Z6mode11v+0x184>)
 800397a:	fba2 1203 	umull	r1, r2, r2, r3
 800397e:	09d2      	lsrs	r2, r2, #7
 8003980:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003984:	fb01 f202 	mul.w	r2, r1, r2
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	b29b      	uxth	r3, r3
 8003990:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8003994:	b29b      	uxth	r3, r3
 8003996:	b21b      	sxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800399e:	4834      	ldr	r0, [pc, #208]	; (8003a70 <_Z6mode11v+0x19c>)
 80039a0:	f7fd fdab 	bl	80014fa <_ZN3STS9moveStop3Ess>

  for (uint8_t led = 0; led < 48; led++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	71fb      	strb	r3, [r7, #7]
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	2b2f      	cmp	r3, #47	; 0x2f
 80039ac:	d84c      	bhi.n	8003a48 <_Z6mode11v+0x174>
  {
    NeopixelTape.set_hsv(led, calc.similarityPeak(led, (countLocal / 3) % 360, 90, countLocal % 256, 50), 255, calc.similarityNormal(led, (countLocal / 3) % 360, 90));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	b29c      	uxth	r4, r3
 80039b2:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <_Z6mode11v+0x180>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	4a2f      	ldr	r2, [pc, #188]	; (8003a74 <_Z6mode11v+0x1a0>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	b29b      	uxth	r3, r3
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	492d      	ldr	r1, [pc, #180]	; (8003a78 <_Z6mode11v+0x1a4>)
 80039c4:	fba1 1202 	umull	r1, r2, r1, r2
 80039c8:	0892      	lsrs	r2, r2, #2
 80039ca:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80039ce:	fb01 f202 	mul.w	r2, r1, r2
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b21a      	sxth	r2, r3
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <_Z6mode11v+0x180>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	79f9      	ldrb	r1, [r7, #7]
 80039e2:	2032      	movs	r0, #50	; 0x32
 80039e4:	9001      	str	r0, [sp, #4]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	235a      	movs	r3, #90	; 0x5a
 80039ea:	4824      	ldr	r0, [pc, #144]	; (8003a7c <_Z6mode11v+0x1a8>)
 80039ec:	f7fd fe88 	bl	8001700 <_ZN4CALC14similarityPeakEhsttt>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461d      	mov	r5, r3
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <_Z6mode11v+0x180>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <_Z6mode11v+0x1a0>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	08da      	lsrs	r2, r3, #3
 8003a04:	491c      	ldr	r1, [pc, #112]	; (8003a78 <_Z6mode11v+0x1a4>)
 8003a06:	fba1 1202 	umull	r1, r2, r1, r2
 8003a0a:	0892      	lsrs	r2, r2, #2
 8003a0c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003a10:	fb01 f202 	mul.w	r2, r1, r2
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	b21a      	sxth	r2, r3
 8003a1a:	79f9      	ldrb	r1, [r7, #7]
 8003a1c:	235a      	movs	r3, #90	; 0x5a
 8003a1e:	4817      	ldr	r0, [pc, #92]	; (8003a7c <_Z6mode11v+0x1a8>)
 8003a20:	f7fe f85a 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003a24:	4603      	mov	r3, r0
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	23ff      	movs	r3, #255	; 0xff
 8003a2a:	462a      	mov	r2, r5
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4814      	ldr	r0, [pc, #80]	; (8003a80 <_Z6mode11v+0x1ac>)
 8003a30:	f000 ff36 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
    NeopixelTape.show();
 8003a34:	4812      	ldr	r0, [pc, #72]	; (8003a80 <_Z6mode11v+0x1ac>)
 8003a36:	f000 fffd 	bl	8004a34 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f001 f964 	bl	8004d08 <HAL_Delay>
  for (uint8_t led = 0; led < 48; led++)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	3301      	adds	r3, #1
 8003a44:	71fb      	strb	r3, [r7, #7]
 8003a46:	e7af      	b.n	80039a8 <_Z6mode11v+0xd4>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a50:	20001b3c 	.word	0x20001b3c
 8003a54:	20001b40 	.word	0x20001b40
 8003a58:	10624dd3 	.word	0x10624dd3
 8003a5c:	20001a24 	.word	0x20001a24
 8003a60:	200019f4 	.word	0x200019f4
 8003a64:	20001a00 	.word	0x20001a00
 8003a68:	20001a28 	.word	0x20001a28
 8003a6c:	20001a0c 	.word	0x20001a0c
 8003a70:	20001a18 	.word	0x20001a18
 8003a74:	aaaaaaab 	.word	0xaaaaaaab
 8003a78:	16c16c17 	.word	0x16c16c17
 8003a7c:	200019f0 	.word	0x200019f0
 8003a80:	20000368 	.word	0x20000368

08003a84 <_Z6mode12v>:

void mode12()
{
 8003a84:	b5b0      	push	{r4, r5, r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af02      	add	r7, sp, #8
  countLocal = millis - 222500;
 8003a8a:	4b6b      	ldr	r3, [pc, #428]	; (8003c38 <_Z6mode12v+0x1b4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f5a3 43ca 	sub.w	r3, r3, #25856	; 0x6500
 8003a94:	3b24      	subs	r3, #36	; 0x24
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b68      	ldr	r3, [pc, #416]	; (8003c3c <_Z6mode12v+0x1b8>)
 8003a9a:	801a      	strh	r2, [r3, #0]
  static int16_t i = 8;
  if (countLocal % 6000 < 3000)
 8003a9c:	4b67      	ldr	r3, [pc, #412]	; (8003c3c <_Z6mode12v+0x1b8>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	4a67      	ldr	r2, [pc, #412]	; (8003c40 <_Z6mode12v+0x1bc>)
 8003aa2:	fba2 1203 	umull	r1, r2, r2, r3
 8003aa6:	09d2      	lsrs	r2, r2, #7
 8003aa8:	f241 7170 	movw	r1, #6000	; 0x1770
 8003aac:	fb01 f202 	mul.w	r2, r1, r2
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	f200 80d9 	bhi.w	8003c70 <_Z6mode12v+0x1ec>
  {
    servo0.moveCont(1500, 8191, servoPos0);
 8003abe:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <_Z6mode12v+0x1c0>)
 8003ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003ac8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003acc:	485e      	ldr	r0, [pc, #376]	; (8003c48 <_Z6mode12v+0x1c4>)
 8003ace:	f7fd fbfb 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo2.moveCont(1500, 8191, servoPos2);
 8003ad2:	4b5e      	ldr	r3, [pc, #376]	; (8003c4c <_Z6mode12v+0x1c8>)
 8003ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003adc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003ae0:	485b      	ldr	r0, [pc, #364]	; (8003c50 <_Z6mode12v+0x1cc>)
 8003ae2:	f7fd fbf1 	bl	80012c8 <_ZN3STS8moveContEtss>

    if (i != 0)
 8003ae6:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <_Z6mode12v+0x9c>
    {
      i += 8;
 8003af0:	4b58      	ldr	r3, [pc, #352]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3308      	adds	r3, #8
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	b21a      	sxth	r2, r3
 8003afe:	4b55      	ldr	r3, [pc, #340]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003b00:	801a      	strh	r2, [r3, #0]
      if (i >= 180)
 8003b02:	4b54      	ldr	r3, [pc, #336]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b08:	2bb3      	cmp	r3, #179	; 0xb3
 8003b0a:	dd09      	ble.n	8003b20 <_Z6mode12v+0x9c>
      {
        i -= 360;
 8003b0c:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b21a      	sxth	r2, r3
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003b1e:	801a      	strh	r2, [r3, #0]
      }
    }

    moveRotation = calc.calcRotation(i, gyro);
 8003b20:	4b4c      	ldr	r3, [pc, #304]	; (8003c54 <_Z6mode12v+0x1d0>)
 8003b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b26:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <_Z6mode12v+0x1d4>)
 8003b28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	484b      	ldr	r0, [pc, #300]	; (8003c5c <_Z6mode12v+0x1d8>)
 8003b30:	f7fe f896 	bl	8001c60 <_ZN4CALC12calcRotationEss>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b3a:	801a      	strh	r2, [r3, #0]

    if (moveRotation > 0)
 8003b3c:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dd08      	ble.n	8003b58 <_Z6mode12v+0xd4>
    {
      moveRotation += 10;
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	330a      	adds	r3, #10
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	b21a      	sxth	r2, r3
 8003b54:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b56:	801a      	strh	r2, [r3, #0]
    }
    if (moveRotation < 0)
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	da08      	bge.n	8003b74 <_Z6mode12v+0xf0>
    {
      moveRotation -= 10;
 8003b62:	4b3f      	ldr	r3, [pc, #252]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b0a      	subs	r3, #10
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b72:	801a      	strh	r2, [r3, #0]
    }

    sendData(0, 0, moveRotation);
 8003b74:	4b3a      	ldr	r3, [pc, #232]	; (8003c60 <_Z6mode12v+0x1dc>)
 8003b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fe ff18 	bl	80029b4 <_Z8sendDataths>

    for (uint8_t led = 0; led < 16; led++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	71fb      	strb	r3, [r7, #7]
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d826      	bhi.n	8003bdc <_Z6mode12v+0x158>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos0, 90, 128, 100), 255, calc.similarityNormal(led, ledPos0, 90));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	b29c      	uxth	r4, r3
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <_Z6mode12v+0x1e0>)
 8003b94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003b98:	79f9      	ldrb	r1, [r7, #7]
 8003b9a:	2364      	movs	r3, #100	; 0x64
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	235a      	movs	r3, #90	; 0x5a
 8003ba4:	482d      	ldr	r0, [pc, #180]	; (8003c5c <_Z6mode12v+0x1d8>)
 8003ba6:	f7fd fe8b 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461d      	mov	r5, r3
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <_Z6mode12v+0x1e0>)
 8003bb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003bb4:	79f9      	ldrb	r1, [r7, #7]
 8003bb6:	235a      	movs	r3, #90	; 0x5a
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <_Z6mode12v+0x1d8>)
 8003bba:	f7fd ff8d 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	23ff      	movs	r3, #255	; 0xff
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4827      	ldr	r0, [pc, #156]	; (8003c68 <_Z6mode12v+0x1e4>)
 8003bca:	f000 fe69 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8003bce:	4826      	ldr	r0, [pc, #152]	; (8003c68 <_Z6mode12v+0x1e4>)
 8003bd0:	f000 ff30 	bl	8004a34 <_ZN7WS2812C4showEv>
    for (uint8_t led = 0; led < 16; led++)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	71fb      	strb	r3, [r7, #7]
 8003bda:	e7d5      	b.n	8003b88 <_Z6mode12v+0x104>
    }
    for (uint8_t led = 32; led < 48; led++)
 8003bdc:	2320      	movs	r3, #32
 8003bde:	71bb      	strb	r3, [r7, #6]
 8003be0:	79bb      	ldrb	r3, [r7, #6]
 8003be2:	2b2f      	cmp	r3, #47	; 0x2f
 8003be4:	f200 8108 	bhi.w	8003df8 <_Z6mode12v+0x374>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, ledPos2, 90));
 8003be8:	79bb      	ldrb	r3, [r7, #6]
 8003bea:	b29c      	uxth	r4, r3
 8003bec:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <_Z6mode12v+0x1e8>)
 8003bee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003bf2:	79b9      	ldrb	r1, [r7, #6]
 8003bf4:	2364      	movs	r3, #100	; 0x64
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	235a      	movs	r3, #90	; 0x5a
 8003bfe:	4817      	ldr	r0, [pc, #92]	; (8003c5c <_Z6mode12v+0x1d8>)
 8003c00:	f7fd fe5e 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461d      	mov	r5, r3
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <_Z6mode12v+0x1e8>)
 8003c0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c0e:	79b9      	ldrb	r1, [r7, #6]
 8003c10:	235a      	movs	r3, #90	; 0x5a
 8003c12:	4812      	ldr	r0, [pc, #72]	; (8003c5c <_Z6mode12v+0x1d8>)
 8003c14:	f7fd ff60 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	23ff      	movs	r3, #255	; 0xff
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4621      	mov	r1, r4
 8003c22:	4811      	ldr	r0, [pc, #68]	; (8003c68 <_Z6mode12v+0x1e4>)
 8003c24:	f000 fe3c 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8003c28:	480f      	ldr	r0, [pc, #60]	; (8003c68 <_Z6mode12v+0x1e4>)
 8003c2a:	f000 ff03 	bl	8004a34 <_ZN7WS2812C4showEv>
    for (uint8_t led = 32; led < 48; led++)
 8003c2e:	79bb      	ldrb	r3, [r7, #6]
 8003c30:	3301      	adds	r3, #1
 8003c32:	71bb      	strb	r3, [r7, #6]
 8003c34:	e7d4      	b.n	8003be0 <_Z6mode12v+0x15c>
 8003c36:	bf00      	nop
 8003c38:	20001b3c 	.word	0x20001b3c
 8003c3c:	20001b40 	.word	0x20001b40
 8003c40:	057619f1 	.word	0x057619f1
 8003c44:	20001a24 	.word	0x20001a24
 8003c48:	200019f4 	.word	0x200019f4
 8003c4c:	20001a28 	.word	0x20001a28
 8003c50:	20001a0c 	.word	0x20001a0c
 8003c54:	20000008 	.word	0x20000008
 8003c58:	20001b32 	.word	0x20001b32
 8003c5c:	200019f0 	.word	0x200019f0
 8003c60:	20001b42 	.word	0x20001b42
 8003c64:	20001b2c 	.word	0x20001b2c
 8003c68:	20000368 	.word	0x20000368
 8003c6c:	20001b2e 	.word	0x20001b2e
    }
  }
  else
  {
    servo0.moveCont(1500, 0, servoPos0);
 8003c70:	4b63      	ldr	r3, [pc, #396]	; (8003e00 <_Z6mode12v+0x37c>)
 8003c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003c7c:	4861      	ldr	r0, [pc, #388]	; (8003e04 <_Z6mode12v+0x380>)
 8003c7e:	f7fd fb23 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo2.moveCont(1500, 0, servoPos2);
 8003c82:	4b61      	ldr	r3, [pc, #388]	; (8003e08 <_Z6mode12v+0x384>)
 8003c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003c8e:	485f      	ldr	r0, [pc, #380]	; (8003e0c <_Z6mode12v+0x388>)
 8003c90:	f7fd fb1a 	bl	80012c8 <_ZN3STS8moveContEtss>

    if (i != 8)
 8003c94:	4b5e      	ldr	r3, [pc, #376]	; (8003e10 <_Z6mode12v+0x38c>)
 8003c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d018      	beq.n	8003cd0 <_Z6mode12v+0x24c>
    {
      i -= 8;
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <_Z6mode12v+0x38c>)
 8003ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b08      	subs	r3, #8
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b21a      	sxth	r2, r3
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <_Z6mode12v+0x38c>)
 8003cae:	801a      	strh	r2, [r3, #0]
      if (i < -180)
 8003cb0:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <_Z6mode12v+0x38c>)
 8003cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb6:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8003cba:	da09      	bge.n	8003cd0 <_Z6mode12v+0x24c>
      {
        i += 360;
 8003cbc:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <_Z6mode12v+0x38c>)
 8003cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	b21a      	sxth	r2, r3
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <_Z6mode12v+0x38c>)
 8003cce:	801a      	strh	r2, [r3, #0]
      }
    }

    moveRotation = calc.calcRotation(i, gyro);
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <_Z6mode12v+0x38c>)
 8003cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd6:	4a4f      	ldr	r2, [pc, #316]	; (8003e14 <_Z6mode12v+0x390>)
 8003cd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	484e      	ldr	r0, [pc, #312]	; (8003e18 <_Z6mode12v+0x394>)
 8003ce0:	f7fd ffbe 	bl	8001c60 <_ZN4CALC12calcRotationEss>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <_Z6mode12v+0x398>)
 8003cea:	801a      	strh	r2, [r3, #0]

    if (moveRotation > 0)
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <_Z6mode12v+0x398>)
 8003cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	dd08      	ble.n	8003d08 <_Z6mode12v+0x284>
    {
      moveRotation += 10;
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <_Z6mode12v+0x398>)
 8003cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	330a      	adds	r3, #10
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <_Z6mode12v+0x398>)
 8003d06:	801a      	strh	r2, [r3, #0]
    }
    if (moveRotation < 0)
 8003d08:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <_Z6mode12v+0x398>)
 8003d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da08      	bge.n	8003d24 <_Z6mode12v+0x2a0>
    {
      moveRotation -= 10;
 8003d12:	4b42      	ldr	r3, [pc, #264]	; (8003e1c <_Z6mode12v+0x398>)
 8003d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b0a      	subs	r3, #10
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b21a      	sxth	r2, r3
 8003d20:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <_Z6mode12v+0x398>)
 8003d22:	801a      	strh	r2, [r3, #0]
    }

    sendData(0, 0, moveRotation);
 8003d24:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <_Z6mode12v+0x398>)
 8003d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7fe fe40 	bl	80029b4 <_Z8sendDataths>

    for (uint8_t led = 0; led < 16; led++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	717b      	strb	r3, [r7, #5]
 8003d38:	797b      	ldrb	r3, [r7, #5]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d82b      	bhi.n	8003d96 <_Z6mode12v+0x312>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8003d3e:	797b      	ldrb	r3, [r7, #5]
 8003d40:	b29c      	uxth	r4, r3
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <_Z6mode12v+0x39c>)
 8003d44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003d48:	7979      	ldrb	r1, [r7, #5]
 8003d4a:	2364      	movs	r3, #100	; 0x64
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	235a      	movs	r3, #90	; 0x5a
 8003d54:	4830      	ldr	r0, [pc, #192]	; (8003e18 <_Z6mode12v+0x394>)
 8003d56:	f7fd fdb3 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461d      	mov	r5, r3
 8003d5e:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <_Z6mode12v+0x39c>)
 8003d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	7979      	ldrb	r1, [r7, #5]
 8003d70:	235a      	movs	r3, #90	; 0x5a
 8003d72:	4829      	ldr	r0, [pc, #164]	; (8003e18 <_Z6mode12v+0x394>)
 8003d74:	f7fd feb0 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	23ff      	movs	r3, #255	; 0xff
 8003d7e:	462a      	mov	r2, r5
 8003d80:	4621      	mov	r1, r4
 8003d82:	4828      	ldr	r0, [pc, #160]	; (8003e24 <_Z6mode12v+0x3a0>)
 8003d84:	f000 fd8c 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8003d88:	4826      	ldr	r0, [pc, #152]	; (8003e24 <_Z6mode12v+0x3a0>)
 8003d8a:	f000 fe53 	bl	8004a34 <_ZN7WS2812C4showEv>
    for (uint8_t led = 0; led < 16; led++)
 8003d8e:	797b      	ldrb	r3, [r7, #5]
 8003d90:	3301      	adds	r3, #1
 8003d92:	717b      	strb	r3, [r7, #5]
 8003d94:	e7d0      	b.n	8003d38 <_Z6mode12v+0x2b4>
    }
    for (uint8_t led = 32; led < 48; led++)
 8003d96:	2320      	movs	r3, #32
 8003d98:	713b      	strb	r3, [r7, #4]
 8003d9a:	793b      	ldrb	r3, [r7, #4]
 8003d9c:	2b2f      	cmp	r3, #47	; 0x2f
 8003d9e:	d82b      	bhi.n	8003df8 <_Z6mode12v+0x374>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8003da0:	793b      	ldrb	r3, [r7, #4]
 8003da2:	b29c      	uxth	r4, r3
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <_Z6mode12v+0x39c>)
 8003da6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003daa:	7939      	ldrb	r1, [r7, #4]
 8003dac:	2364      	movs	r3, #100	; 0x64
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	235a      	movs	r3, #90	; 0x5a
 8003db6:	4818      	ldr	r0, [pc, #96]	; (8003e18 <_Z6mode12v+0x394>)
 8003db8:	f7fd fd82 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <_Z6mode12v+0x39c>)
 8003dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b21a      	sxth	r2, r3
 8003dd0:	7939      	ldrb	r1, [r7, #4]
 8003dd2:	235a      	movs	r3, #90	; 0x5a
 8003dd4:	4810      	ldr	r0, [pc, #64]	; (8003e18 <_Z6mode12v+0x394>)
 8003dd6:	f7fd fe7f 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	23ff      	movs	r3, #255	; 0xff
 8003de0:	462a      	mov	r2, r5
 8003de2:	4621      	mov	r1, r4
 8003de4:	480f      	ldr	r0, [pc, #60]	; (8003e24 <_Z6mode12v+0x3a0>)
 8003de6:	f000 fd5b 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8003dea:	480e      	ldr	r0, [pc, #56]	; (8003e24 <_Z6mode12v+0x3a0>)
 8003dec:	f000 fe22 	bl	8004a34 <_ZN7WS2812C4showEv>
    for (uint8_t led = 32; led < 48; led++)
 8003df0:	793b      	ldrb	r3, [r7, #4]
 8003df2:	3301      	adds	r3, #1
 8003df4:	713b      	strb	r3, [r7, #4]
 8003df6:	e7d0      	b.n	8003d9a <_Z6mode12v+0x316>
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8003e00:	20001a24 	.word	0x20001a24
 8003e04:	200019f4 	.word	0x200019f4
 8003e08:	20001a28 	.word	0x20001a28
 8003e0c:	20001a0c 	.word	0x20001a0c
 8003e10:	20000008 	.word	0x20000008
 8003e14:	20001b32 	.word	0x20001b32
 8003e18:	200019f0 	.word	0x200019f0
 8003e1c:	20001b42 	.word	0x20001b42
 8003e20:	20001b2e 	.word	0x20001b2e
 8003e24:	20000368 	.word	0x20000368

08003e28 <_Z6mode13v>:

void mode13()
{
 8003e28:	b5b0      	push	{r4, r5, r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af02      	add	r7, sp, #8
  countLocal = millis - 234700;
 8003e2e:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <_Z6mode13v+0x104>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8003e38:	3334      	adds	r3, #52	; 0x34
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <_Z6mode13v+0x108>)
 8003e3e:	801a      	strh	r2, [r3, #0]
  sendData(0, 0, 60);
 8003e40:	223c      	movs	r2, #60	; 0x3c
 8003e42:	2100      	movs	r1, #0
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fe fdb5 	bl	80029b4 <_Z8sendDataths>
  servo0.moveCont(1000, countLocal * 2, servoPos0);
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <_Z6mode13v+0x108>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <_Z6mode13v+0x10c>)
 8003e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e5e:	4836      	ldr	r0, [pc, #216]	; (8003f38 <_Z6mode13v+0x110>)
 8003e60:	f7fd fa32 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo2.moveCont(1000, countLocal * 2, servoPos2);
 8003e64:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <_Z6mode13v+0x108>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b21a      	sxth	r2, r3
 8003e6e:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <_Z6mode13v+0x114>)
 8003e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e78:	4831      	ldr	r0, [pc, #196]	; (8003f40 <_Z6mode13v+0x118>)
 8003e7a:	f7fd fa25 	bl	80012c8 <_ZN3STS8moveContEtss>
  for (uint8_t led = 0; led < 48; led++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	2b2f      	cmp	r3, #47	; 0x2f
 8003e86:	d846      	bhi.n	8003f16 <_Z6mode13v+0xee>
  {
    NeopixelTape.set_hsv(led, calc.similarityPeak(led, (countLocal / 3) % 360, 90, countLocal % 256, 50), 255, calc.similarityNormal(led, (countLocal / 3) % 360, 90));
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	b29c      	uxth	r4, r3
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <_Z6mode13v+0x108>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <_Z6mode13v+0x11c>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	08da      	lsrs	r2, r3, #3
 8003e9c:	492a      	ldr	r1, [pc, #168]	; (8003f48 <_Z6mode13v+0x120>)
 8003e9e:	fba1 1202 	umull	r1, r2, r1, r2
 8003ea2:	0892      	lsrs	r2, r2, #2
 8003ea4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003ea8:	fb01 f202 	mul.w	r2, r1, r2
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b21a      	sxth	r2, r3
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <_Z6mode13v+0x108>)
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	79f9      	ldrb	r1, [r7, #7]
 8003ebc:	2032      	movs	r0, #50	; 0x32
 8003ebe:	9001      	str	r0, [sp, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	235a      	movs	r3, #90	; 0x5a
 8003ec4:	4821      	ldr	r0, [pc, #132]	; (8003f4c <_Z6mode13v+0x124>)
 8003ec6:	f7fd fc1b 	bl	8001700 <_ZN4CALC14similarityPeakEhsttt>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	461d      	mov	r5, r3
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <_Z6mode13v+0x108>)
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	; (8003f44 <_Z6mode13v+0x11c>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	491a      	ldr	r1, [pc, #104]	; (8003f48 <_Z6mode13v+0x120>)
 8003ee0:	fba1 1202 	umull	r1, r2, r1, r2
 8003ee4:	0892      	lsrs	r2, r2, #2
 8003ee6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003eea:	fb01 f202 	mul.w	r2, r1, r2
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	79f9      	ldrb	r1, [r7, #7]
 8003ef6:	235a      	movs	r3, #90	; 0x5a
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <_Z6mode13v+0x124>)
 8003efa:	f7fd fded 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003efe:	4603      	mov	r3, r0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	23ff      	movs	r3, #255	; 0xff
 8003f04:	462a      	mov	r2, r5
 8003f06:	4621      	mov	r1, r4
 8003f08:	4811      	ldr	r0, [pc, #68]	; (8003f50 <_Z6mode13v+0x128>)
 8003f0a:	f000 fcc9 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3301      	adds	r3, #1
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	e7b5      	b.n	8003e82 <_Z6mode13v+0x5a>
  }
  NeopixelTape.show();
 8003f16:	480e      	ldr	r0, [pc, #56]	; (8003f50 <_Z6mode13v+0x128>)
 8003f18:	f000 fd8c 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f000 fef3 	bl	8004d08 <HAL_Delay>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bdb0      	pop	{r4, r5, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20001b3c 	.word	0x20001b3c
 8003f30:	20001b40 	.word	0x20001b40
 8003f34:	20001a24 	.word	0x20001a24
 8003f38:	200019f4 	.word	0x200019f4
 8003f3c:	20001a28 	.word	0x20001a28
 8003f40:	20001a0c 	.word	0x20001a0c
 8003f44:	aaaaaaab 	.word	0xaaaaaaab
 8003f48:	16c16c17 	.word	0x16c16c17
 8003f4c:	200019f0 	.word	0x200019f0
 8003f50:	20000368 	.word	0x20000368

08003f54 <_Z6mode14v>:

void mode14()
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af02      	add	r7, sp, #8
  countLocal = millis - 238000;
 8003f5a:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <_Z6mode14v+0xb4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003f64:	3350      	adds	r3, #80	; 0x50
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <_Z6mode14v+0xb8>)
 8003f6a:	801a      	strh	r2, [r3, #0]
  sendData(0, 0, 0);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2100      	movs	r1, #0
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7fe fd1f 	bl	80029b4 <_Z8sendDataths>
  servo0.moveCont(0, 6000, servoPos0);
 8003f76:	4b26      	ldr	r3, [pc, #152]	; (8004010 <_Z6mode14v+0xbc>)
 8003f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f7c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003f80:	2100      	movs	r1, #0
 8003f82:	4824      	ldr	r0, [pc, #144]	; (8004014 <_Z6mode14v+0xc0>)
 8003f84:	f7fd f9a0 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8003f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4822      	ldr	r0, [pc, #136]	; (8004018 <_Z6mode14v+0xc4>)
 8003f90:	f7fd fa58 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 6000, servoPos2);
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <_Z6mode14v+0xc8>)
 8003f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f9a:	f241 7270 	movw	r2, #6000	; 0x1770
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	481f      	ldr	r0, [pc, #124]	; (8004020 <_Z6mode14v+0xcc>)
 8003fa2:	f7fd f991 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1900);
 8003fa6:	f240 726c 	movw	r2, #1900	; 0x76c
 8003faa:	2100      	movs	r1, #0
 8003fac:	481d      	ldr	r0, [pc, #116]	; (8004024 <_Z6mode14v+0xd0>)
 8003fae:	f7fd faa4 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	71fb      	strb	r3, [r7, #7]
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8003fba:	d81b      	bhi.n	8003ff4 <_Z6mode14v+0xa0>
  {
    NeopixelTape.set_hsv(led, hue, 255, (7000 - countLocal) / 30);
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	b299      	uxth	r1, r3
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <_Z6mode14v+0xd4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	b218      	sxth	r0, r3
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <_Z6mode14v+0xb8>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	f5c3 53da 	rsb	r3, r3, #6976	; 0x1b40
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <_Z6mode14v+0xd8>)
 8003fd2:	fb82 c203 	smull	ip, r2, r2, r3
 8003fd6:	441a      	add	r2, r3
 8003fd8:	1112      	asrs	r2, r2, #4
 8003fda:	17db      	asrs	r3, r3, #31
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	b21b      	sxth	r3, r3
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	23ff      	movs	r3, #255	; 0xff
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4812      	ldr	r0, [pc, #72]	; (8004030 <_Z6mode14v+0xdc>)
 8003fe8:	f000 fc5a 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	71fb      	strb	r3, [r7, #7]
 8003ff2:	e7e0      	b.n	8003fb6 <_Z6mode14v+0x62>
  }
  NeopixelTape.show();
 8003ff4:	480e      	ldr	r0, [pc, #56]	; (8004030 <_Z6mode14v+0xdc>)
 8003ff6:	f000 fd1d 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f000 fe84 	bl	8004d08 <HAL_Delay>
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20001b3c 	.word	0x20001b3c
 800400c:	20001b40 	.word	0x20001b40
 8004010:	20001a24 	.word	0x20001a24
 8004014:	200019f4 	.word	0x200019f4
 8004018:	20001a00 	.word	0x20001a00
 800401c:	20001a28 	.word	0x20001a28
 8004020:	20001a0c 	.word	0x20001a0c
 8004024:	20001a18 	.word	0x20001a18
 8004028:	20001b38 	.word	0x20001b38
 800402c:	88888889 	.word	0x88888889
 8004030:	20000368 	.word	0x20000368

08004034 <_Z6mode15v>:

void mode15()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af02      	add	r7, sp, #8
  countLocal = millis - 244500;
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <_Z6mode15v+0x90>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 8004044:	336c      	adds	r3, #108	; 0x6c
 8004046:	b29a      	uxth	r2, r3
 8004048:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <_Z6mode15v+0x94>)
 800404a:	801a      	strh	r2, [r3, #0]
  servo0.moveCont(0, 6000, servoPos0);
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <_Z6mode15v+0x98>)
 800404e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004052:	f241 7270 	movw	r2, #6000	; 0x1770
 8004056:	2100      	movs	r1, #0
 8004058:	481d      	ldr	r0, [pc, #116]	; (80040d0 <_Z6mode15v+0x9c>)
 800405a:	f7fd f935 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 800405e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004062:	2100      	movs	r1, #0
 8004064:	481b      	ldr	r0, [pc, #108]	; (80040d4 <_Z6mode15v+0xa0>)
 8004066:	f7fd f9ed 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 6000, servoPos2);
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <_Z6mode15v+0xa4>)
 800406c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004070:	f241 7270 	movw	r2, #6000	; 0x1770
 8004074:	2100      	movs	r1, #0
 8004076:	4819      	ldr	r0, [pc, #100]	; (80040dc <_Z6mode15v+0xa8>)
 8004078:	f7fd f926 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1900);
 800407c:	f240 726c 	movw	r2, #1900	; 0x76c
 8004080:	2100      	movs	r1, #0
 8004082:	4817      	ldr	r0, [pc, #92]	; (80040e0 <_Z6mode15v+0xac>)
 8004084:	f7fd fa39 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8004088:	2300      	movs	r3, #0
 800408a:	71fb      	strb	r3, [r7, #7]
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	2b2f      	cmp	r3, #47	; 0x2f
 8004090:	d80e      	bhi.n	80040b0 <_Z6mode15v+0x7c>
  {
    NeopixelTape.set_hsv(led, hue, 255, 0);
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	b299      	uxth	r1, r3
 8004096:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <_Z6mode15v+0xb0>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b21a      	sxth	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	23ff      	movs	r3, #255	; 0xff
 80040a2:	4811      	ldr	r0, [pc, #68]	; (80040e8 <_Z6mode15v+0xb4>)
 80040a4:	f000 fbfc 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	3301      	adds	r3, #1
 80040ac:	71fb      	strb	r3, [r7, #7]
 80040ae:	e7ed      	b.n	800408c <_Z6mode15v+0x58>
  }
  NeopixelTape.show();
 80040b0:	480d      	ldr	r0, [pc, #52]	; (80040e8 <_Z6mode15v+0xb4>)
 80040b2:	f000 fcbf 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 80040b6:	2001      	movs	r0, #1
 80040b8:	f000 fe26 	bl	8004d08 <HAL_Delay>
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20001b3c 	.word	0x20001b3c
 80040c8:	20001b40 	.word	0x20001b40
 80040cc:	20001a24 	.word	0x20001a24
 80040d0:	200019f4 	.word	0x200019f4
 80040d4:	20001a00 	.word	0x20001a00
 80040d8:	20001a28 	.word	0x20001a28
 80040dc:	20001a0c 	.word	0x20001a0c
 80040e0:	20001a18 	.word	0x20001a18
 80040e4:	20001b38 	.word	0x20001b38
 80040e8:	20000368 	.word	0x20000368

080040ec <_Z9modeErrorv>:

void modeError()
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af02      	add	r7, sp, #8
  servo0.moveCont(500, 2048, servoPos0);
 80040f2:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <_Z9modeErrorv+0x84>)
 80040f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004100:	481c      	ldr	r0, [pc, #112]	; (8004174 <_Z9modeErrorv+0x88>)
 8004102:	f7fd f8e1 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(500, 2048);
 8004106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800410a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800410e:	481a      	ldr	r0, [pc, #104]	; (8004178 <_Z9modeErrorv+0x8c>)
 8004110:	f7fd f998 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(500, 2048, servoPos2);
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <_Z9modeErrorv+0x90>)
 8004116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800411a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800411e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004122:	4817      	ldr	r0, [pc, #92]	; (8004180 <_Z9modeErrorv+0x94>)
 8004124:	f7fd f8d0 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(500, 1800);
 8004128:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800412c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004130:	4814      	ldr	r0, [pc, #80]	; (8004184 <_Z9modeErrorv+0x98>)
 8004132:	f7fd f9e2 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8004136:	2300      	movs	r3, #0
 8004138:	71fb      	strb	r3, [r7, #7]
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	2b2f      	cmp	r3, #47	; 0x2f
 800413e:	d80c      	bhi.n	800415a <_Z9modeErrorv+0x6e>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	b299      	uxth	r1, r3
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	2200      	movs	r2, #0
 800414c:	480e      	ldr	r0, [pc, #56]	; (8004188 <_Z9modeErrorv+0x9c>)
 800414e:	f000 fba7 	bl	80048a0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	3301      	adds	r3, #1
 8004156:	71fb      	strb	r3, [r7, #7]
 8004158:	e7ef      	b.n	800413a <_Z9modeErrorv+0x4e>
  }
  NeopixelTape.show();
 800415a:	480b      	ldr	r0, [pc, #44]	; (8004188 <_Z9modeErrorv+0x9c>)
 800415c:	f000 fc6a 	bl	8004a34 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8004160:	2001      	movs	r0, #1
 8004162:	f000 fdd1 	bl	8004d08 <HAL_Delay>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20001a24 	.word	0x20001a24
 8004174:	200019f4 	.word	0x200019f4
 8004178:	20001a00 	.word	0x20001a00
 800417c:	20001a28 	.word	0x20001a28
 8004180:	20001a0c 	.word	0x20001a0c
 8004184:	20001a18 	.word	0x20001a18
 8004188:	20000368 	.word	0x20000368

0800418c <Error_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
<<<<<<< HEAD
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
=======
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
=======
 8004190:	b672      	cpsid	i
}
 8004192:	bf00      	nop
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <_Z41__static_initialization_and_destruction_0ii>:
=======
 8004194:	e7fe      	b.n	8004194 <Error_Handler+0x8>
	...

08004198 <_Z41__static_initialization_and_destruction_0ii>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d11e      	bne.n	8002936 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fe:	4293      	cmp	r3, r2
 8002900:	d119      	bne.n	8002936 <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002904:	2200      	movs	r2, #0
 8002906:	490f      	ldr	r1, [pc, #60]	; (8002944 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002908:	480f      	ldr	r0, [pc, #60]	; (8002948 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800290a:	f000 fb27 	bl	8002f5c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002912:	480f      	ldr	r0, [pc, #60]	; (8002950 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002914:	f7fe fcba 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8002918:	2201      	movs	r2, #1
 800291a:	490c      	ldr	r1, [pc, #48]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800291e:	f7fe fcb5 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 8002922:	2202      	movs	r2, #2
 8002924:	4909      	ldr	r1, [pc, #36]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002926:	480c      	ldr	r0, [pc, #48]	; (8002958 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002928:	f7fe fcb0 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 800292c:	2203      	movs	r2, #3
 800292e:	4907      	ldr	r1, [pc, #28]	; (800294c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002932:	f7fe fcab 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000174 	.word	0x20000174
 8002944:	200000e4 	.word	0x200000e4
 8002948:	20000360 	.word	0x20000360
 800294c:	20000218 	.word	0x20000218
 8002950:	200019e8 	.word	0x200019e8
 8002954:	200019f4 	.word	0x200019f4
 8002958:	20001a00 	.word	0x20001a00
 800295c:	20001a0c 	.word	0x20001a0c

08002960 <_GLOBAL__sub_I_hi2c1>:
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
 8002964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002968:	2001      	movs	r0, #1
 800296a:	f7ff ffbd 	bl	80028e8 <_Z41__static_initialization_and_destruction_0ii>
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_MspInit>:
=======
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d11e      	bne.n	80041e6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d119      	bne.n	80041e6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 80041b2:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	490f      	ldr	r1, [pc, #60]	; (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80041b8:	480f      	ldr	r0, [pc, #60]	; (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80041ba:	f000 fb27 	bl	800480c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	490e      	ldr	r1, [pc, #56]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80041c2:	480f      	ldr	r0, [pc, #60]	; (8004200 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80041c4:	f7fd f862 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 80041c8:	2201      	movs	r2, #1
 80041ca:	490c      	ldr	r1, [pc, #48]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80041ce:	f7fd f85d 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 80041d2:	2202      	movs	r2, #2
 80041d4:	4909      	ldr	r1, [pc, #36]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80041d6:	480c      	ldr	r0, [pc, #48]	; (8004208 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80041d8:	f7fd f858 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 80041dc:	2203      	movs	r2, #3
 80041de:	4907      	ldr	r1, [pc, #28]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80041e0:	480a      	ldr	r0, [pc, #40]	; (800420c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80041e2:	f7fd f853 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000017c 	.word	0x2000017c
 80041f4:	200000ec 	.word	0x200000ec
 80041f8:	20000368 	.word	0x20000368
 80041fc:	20000220 	.word	0x20000220
 8004200:	200019f4 	.word	0x200019f4
 8004204:	20001a00 	.word	0x20001a00
 8004208:	20001a0c 	.word	0x20001a0c
 800420c:	20001a18 	.word	0x20001a18

08004210 <_GLOBAL__sub_I_hi2c1>:
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
 8004214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004218:	2001      	movs	r0, #1
 800421a:	f7ff ffbd 	bl	8004198 <_Z41__static_initialization_and_destruction_0ii>
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_MspInit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
=======
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_MspInit+0x4c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_MspInit+0x4c>)
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_MspInit+0x4c>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a08      	ldr	r2, [pc, #32]	; (80029bc <HAL_MspInit+0x4c>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_MspInit+0x4c>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
=======
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_MspInit+0x4c>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a0f      	ldr	r2, [pc, #60]	; (800426c <HAL_MspInit+0x4c>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_MspInit+0x4c>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_MspInit+0x4c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <HAL_MspInit+0x4c>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_MspInit+0x4c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_I2C_MspInit>:
=======
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_I2C_MspInit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_I2C_MspInit+0x84>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d12c      	bne.n	8002a3c <HAL_I2C_MspInit+0x7c>
=======
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_I2C_MspInit+0x84>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12c      	bne.n	80042ec <HAL_I2C_MspInit+0x7c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_I2C_MspInit+0x88>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_I2C_MspInit+0x88>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_I2C_MspInit+0x88>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
=======
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <HAL_I2C_MspInit+0x88>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a17      	ldr	r2, [pc, #92]	; (80042f8 <HAL_I2C_MspInit+0x88>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_I2C_MspInit+0x88>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
<<<<<<< HEAD
 80029fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a04:	2312      	movs	r3, #18
 8002a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a10:	2304      	movs	r3, #4
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480c      	ldr	r0, [pc, #48]	; (8002a4c <HAL_I2C_MspInit+0x8c>)
 8002a1c:	f001 f9c2 	bl	8003da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_I2C_MspInit+0x88>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <HAL_I2C_MspInit+0x88>)
 8002a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_I2C_MspInit+0x88>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
=======
 80042ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80042b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b4:	2312      	movs	r3, #18
 80042b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042c0:	2304      	movs	r3, #4
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4619      	mov	r1, r3
 80042ca:	480c      	ldr	r0, [pc, #48]	; (80042fc <HAL_I2C_MspInit+0x8c>)
 80042cc:	f001 f9c2 	bl	8005654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <HAL_I2C_MspInit+0x88>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <HAL_I2C_MspInit+0x88>)
 80042da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042de:	6413      	str	r3, [r2, #64]	; 0x40
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_I2C_MspInit+0x88>)
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40005400 	.word	0x40005400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020400 	.word	0x40020400

08002a50 <HAL_TIM_Base_MspInit>:
=======
 80042ec:	bf00      	nop
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40005400 	.word	0x40005400
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020400 	.word	0x40020400

08004300 <HAL_TIM_Base_MspInit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <HAL_TIM_Base_MspInit+0xf0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d14e      	bne.n	8002b00 <HAL_TIM_Base_MspInit+0xb0>
=======
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_TIM_Base_MspInit+0xf0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d14e      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0xb0>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_TIM_Base_MspInit+0xf4>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a36      	ldr	r2, [pc, #216]	; (8002b44 <HAL_TIM_Base_MspInit+0xf4>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_TIM_Base_MspInit+0xf4>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
=======
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_TIM_Base_MspInit+0xf4>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a36      	ldr	r2, [pc, #216]	; (80043f4 <HAL_TIM_Base_MspInit+0xf4>)
 800431c:	f043 0302 	orr.w	r3, r3, #2
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
 8004322:	4b34      	ldr	r3, [pc, #208]	; (80043f4 <HAL_TIM_Base_MspInit+0xf4>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
<<<<<<< HEAD
 8002a7e:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002a80:	4a32      	ldr	r2, [pc, #200]	; (8002b4c <HAL_TIM_Base_MspInit+0xfc>)
 8002a82:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002a86:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a8a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a9e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aa6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002aa8:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002aba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002abe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002ac6:	4820      	ldr	r0, [pc, #128]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002ac8:	f000 fdfc 	bl	80036c4 <HAL_DMA_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8002ad2:	f7ff ff03 	bl	80028dc <Error_Handler>
=======
 800432e:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004330:	4a32      	ldr	r2, [pc, #200]	; (80043fc <HAL_TIM_Base_MspInit+0xfc>)
 8004332:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8004334:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004336:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800433a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800433e:	2240      	movs	r2, #64	; 0x40
 8004340:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8004348:	4b2b      	ldr	r3, [pc, #172]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800434a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800434e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004352:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004356:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800435a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800435e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004366:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004368:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800436a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800436e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004372:	2200      	movs	r2, #0
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8004376:	4820      	ldr	r0, [pc, #128]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004378:	f000 fdfc 	bl	8004f74 <HAL_DMA_Init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8004382:	f7ff ff03 	bl	800418c <Error_Handler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
<<<<<<< HEAD
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_TIM_Base_MspInit+0xf8>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	201d      	movs	r0, #29
 8002af4:	f000 fdaf 	bl	8003656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002af8:	201d      	movs	r0, #29
 8002afa:	f000 fdc8 	bl	800368e <HAL_NVIC_EnableIRQ>
=======
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800438a:	625a      	str	r2, [r3, #36]	; 0x24
 800438c:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
 8004398:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <HAL_TIM_Base_MspInit+0xf8>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800439e:	2200      	movs	r2, #0
 80043a0:	2100      	movs	r1, #0
 80043a2:	201d      	movs	r0, #29
 80043a4:	f000 fdaf 	bl	8004f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043a8:	201d      	movs	r0, #29
 80043aa:	f000 fdc8 	bl	8004f3e <HAL_NVIC_EnableIRQ>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002afe:	e01a      	b.n	8002b36 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM6)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_TIM_Base_MspInit+0x100>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d115      	bne.n	8002b36 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_TIM_Base_MspInit+0xf4>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_TIM_Base_MspInit+0xf4>)
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_TIM_Base_MspInit+0xf4>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2100      	movs	r1, #0
 8002b2a:	2036      	movs	r0, #54	; 0x36
 8002b2c:	f000 fd93 	bl	8003656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b30:	2036      	movs	r0, #54	; 0x36
 8002b32:	f000 fdac 	bl	800368e <HAL_NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40023800 	.word	0x40023800
 8002b48:	20000174 	.word	0x20000174
 8002b4c:	40026070 	.word	0x40026070
 8002b50:	40001000 	.word	0x40001000

08002b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_TIM_MspPostInit+0x68>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d11d      	bne.n	8002bb2 <HAL_TIM_MspPostInit+0x5e>
=======
 80043ae:	e01a      	b.n	80043e6 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM6)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a12      	ldr	r2, [pc, #72]	; (8004400 <HAL_TIM_Base_MspInit+0x100>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d115      	bne.n	80043e6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_TIM_Base_MspInit+0xf4>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a0c      	ldr	r2, [pc, #48]	; (80043f4 <HAL_TIM_Base_MspInit+0xf4>)
 80043c4:	f043 0310 	orr.w	r3, r3, #16
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_TIM_Base_MspInit+0xf4>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	2100      	movs	r1, #0
 80043da:	2036      	movs	r0, #54	; 0x36
 80043dc:	f000 fd93 	bl	8004f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043e0:	2036      	movs	r0, #54	; 0x36
 80043e2:	f000 fdac 	bl	8004f3e <HAL_NVIC_EnableIRQ>
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40023800 	.word	0x40023800
 80043f8:	2000017c 	.word	0x2000017c
 80043fc:	40026070 	.word	0x40026070
 8004400:	40001000 	.word	0x40001000

08004404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440c:	f107 030c 	add.w	r3, r7, #12
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	609a      	str	r2, [r3, #8]
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_TIM_MspPostInit+0x68>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d11d      	bne.n	8004462 <HAL_TIM_MspPostInit+0x5e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_TIM_MspPostInit+0x6c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_TIM_MspPostInit+0x6c>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6313      	str	r3, [r2, #48]	; 0x30
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_TIM_MspPostInit+0x6c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
=======
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_TIM_MspPostInit+0x6c>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <HAL_TIM_MspPostInit+0x6c>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6313      	str	r3, [r2, #48]	; 0x30
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_TIM_MspPostInit+0x6c>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
<<<<<<< HEAD
 8002b92:	2340      	movs	r3, #64	; 0x40
 8002b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <HAL_TIM_MspPostInit+0x70>)
 8002bae:	f001 f8f9 	bl	8003da4 <HAL_GPIO_Init>
=======
 8004442:	2340      	movs	r3, #64	; 0x40
 8004444:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004446:	2302      	movs	r3, #2
 8004448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004452:	2302      	movs	r3, #2
 8004454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004456:	f107 030c 	add.w	r3, r7, #12
 800445a:	4619      	mov	r1, r3
 800445c:	4805      	ldr	r0, [pc, #20]	; (8004474 <HAL_TIM_MspPostInit+0x70>)
 800445e:	f001 f8f9 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8002bb2:	bf00      	nop
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000

08002bc8 <HAL_UART_MspInit>:
=======
 8004462:	bf00      	nop
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40000400 	.word	0x40000400
 8004470:	40023800 	.word	0x40023800
 8004474:	40020000 	.word	0x40020000

08004478 <HAL_UART_MspInit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b090      	sub	sp, #64	; 0x40
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a9a      	ldr	r2, [pc, #616]	; (8002e50 <HAL_UART_MspInit+0x288>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d17b      	bne.n	8002ce2 <HAL_UART_MspInit+0x11a>
=======
 8004478:	b580      	push	{r7, lr}
 800447a:	b090      	sub	sp, #64	; 0x40
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a9a      	ldr	r2, [pc, #616]	; (8004700 <HAL_UART_MspInit+0x288>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d17b      	bne.n	8004592 <HAL_UART_MspInit+0x11a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
<<<<<<< HEAD
 8002bea:	2300      	movs	r3, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	4b99      	ldr	r3, [pc, #612]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	4a98      	ldr	r2, [pc, #608]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b96      	ldr	r3, [pc, #600]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a91      	ldr	r2, [pc, #580]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b8f      	ldr	r3, [pc, #572]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	4b8b      	ldr	r3, [pc, #556]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a8a      	ldr	r2, [pc, #552]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
=======
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
 800449e:	4b99      	ldr	r3, [pc, #612]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a98      	ldr	r2, [pc, #608]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b96      	ldr	r3, [pc, #600]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	4b92      	ldr	r3, [pc, #584]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	4a91      	ldr	r2, [pc, #580]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044c0:	f043 0304 	orr.w	r3, r3, #4
 80044c4:	6313      	str	r3, [r2, #48]	; 0x30
 80044c6:	4b8f      	ldr	r3, [pc, #572]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a8a      	ldr	r2, [pc, #552]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044dc:	f043 0308 	orr.w	r3, r3, #8
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b88      	ldr	r3, [pc, #544]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	623b      	str	r3, [r7, #32]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
<<<<<<< HEAD
 8002c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2302      	movs	r3, #2
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c50:	2308      	movs	r3, #8
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c58:	4619      	mov	r1, r3
 8002c5a:	487f      	ldr	r0, [pc, #508]	; (8002e58 <HAL_UART_MspInit+0x290>)
 8002c5c:	f001 f8a2 	bl	8003da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c60:	2304      	movs	r3, #4
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c70:	2308      	movs	r3, #8
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4878      	ldr	r0, [pc, #480]	; (8002e5c <HAL_UART_MspInit+0x294>)
 8002c7c:	f001 f892 	bl	8003da4 <HAL_GPIO_Init>
=======
 80044ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004500:	2308      	movs	r3, #8
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004508:	4619      	mov	r1, r3
 800450a:	487f      	ldr	r0, [pc, #508]	; (8004708 <HAL_UART_MspInit+0x290>)
 800450c:	f001 f8a2 	bl	8005654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004510:	2304      	movs	r3, #4
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004514:	2302      	movs	r3, #2
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451c:	2303      	movs	r3, #3
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004520:	2308      	movs	r3, #8
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004528:	4619      	mov	r1, r3
 800452a:	4878      	ldr	r0, [pc, #480]	; (800470c <HAL_UART_MspInit+0x294>)
 800452c:	f001 f892 	bl	8005654 <HAL_GPIO_Init>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
<<<<<<< HEAD
 8002c80:	4b77      	ldr	r3, [pc, #476]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002c82:	4a78      	ldr	r2, [pc, #480]	; (8002e64 <HAL_UART_MspInit+0x29c>)
 8002c84:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002c88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c8c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c8e:	4b74      	ldr	r3, [pc, #464]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c94:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9a:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca0:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca2:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca8:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002cae:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cb6:	4b6a      	ldr	r3, [pc, #424]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002cb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cbc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cbe:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002cc4:	4866      	ldr	r0, [pc, #408]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002cc6:	f000 fcfd 	bl	80036c4 <HAL_DMA_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002cd0:	f7ff fe04 	bl	80028dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8002cda:	4a61      	ldr	r2, [pc, #388]	; (8002e60 <HAL_UART_MspInit+0x298>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004532:	4a78      	ldr	r2, [pc, #480]	; (8004714 <HAL_UART_MspInit+0x29c>)
 8004534:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800453c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800453e:	4b74      	ldr	r3, [pc, #464]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004544:	4b72      	ldr	r3, [pc, #456]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800454a:	4b71      	ldr	r3, [pc, #452]	; (8004710 <HAL_UART_MspInit+0x298>)
 800454c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004550:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004552:	4b6f      	ldr	r3, [pc, #444]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004554:	2200      	movs	r2, #0
 8004556:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004558:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_UART_MspInit+0x298>)
 800455a:	2200      	movs	r2, #0
 800455c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800455e:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004564:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004566:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004568:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800456c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800456e:	4b68      	ldr	r3, [pc, #416]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004570:	2200      	movs	r2, #0
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004574:	4866      	ldr	r0, [pc, #408]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004576:	f000 fcfd 	bl	8004f74 <HAL_DMA_Init>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004580:	f7ff fe04 	bl	800418c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a62      	ldr	r2, [pc, #392]	; (8004710 <HAL_UART_MspInit+0x298>)
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
 800458a:	4a61      	ldr	r2, [pc, #388]	; (8004710 <HAL_UART_MspInit+0x298>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002ce0:	e0b1      	b.n	8002e46 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a60      	ldr	r2, [pc, #384]	; (8002e68 <HAL_UART_MspInit+0x2a0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d15c      	bne.n	8002da6 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	4a57      	ldr	r2, [pc, #348]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfc:	4b55      	ldr	r3, [pc, #340]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4a50      	ldr	r2, [pc, #320]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6313      	str	r3, [r2, #48]	; 0x30
 8002d18:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d24:	230c      	movs	r3, #12
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d34:	2307      	movs	r3, #7
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	484b      	ldr	r0, [pc, #300]	; (8002e6c <HAL_UART_MspInit+0x2a4>)
 8002d40:	f001 f830 	bl	8003da4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d44:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d46:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_UART_MspInit+0x2ac>)
 8002d48:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d4a:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d50:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d58:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5e:	4b44      	ldr	r3, [pc, #272]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d64:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d66:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d72:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d78:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d80:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d82:	4b3b      	ldr	r3, [pc, #236]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d88:	4839      	ldr	r0, [pc, #228]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d8a:	f000 fc9b 	bl	80036c4 <HAL_DMA_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002d94:	f7ff fda2 	bl	80028dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9e:	4a34      	ldr	r2, [pc, #208]	; (8002e70 <HAL_UART_MspInit+0x2a8>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002da4:	e04f      	b.n	8002e46 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <HAL_UART_MspInit+0x2b0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d14a      	bne.n	8002e46 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6313      	str	r3, [r2, #48]	; 0x30
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002df2:	f043 0302 	orr.w	r3, r3, #2
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <HAL_UART_MspInit+0x28c>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e04:	2320      	movs	r3, #32
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e14:	2307      	movs	r3, #7
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480e      	ldr	r0, [pc, #56]	; (8002e58 <HAL_UART_MspInit+0x290>)
 8002e20:	f000 ffc0 	bl	8003da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e32:	2303      	movs	r3, #3
 8002e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e36:	2307      	movs	r3, #7
 8002e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480e      	ldr	r0, [pc, #56]	; (8002e7c <HAL_UART_MspInit+0x2b4>)
 8002e42:	f000 ffaf 	bl	8003da4 <HAL_GPIO_Init>
}
 8002e46:	bf00      	nop
 8002e48:	3740      	adds	r7, #64	; 0x40
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40005000 	.word	0x40005000
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	200002a0 	.word	0x200002a0
 8002e64:	40026010 	.word	0x40026010
 8002e68:	40004400 	.word	0x40004400
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	20000300 	.word	0x20000300
 8002e74:	40026088 	.word	0x40026088
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40020400 	.word	0x40020400

08002e80 <NMI_Handler>:
=======
 8004590:	e0b1      	b.n	80046f6 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a60      	ldr	r2, [pc, #384]	; (8004718 <HAL_UART_MspInit+0x2a0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d15c      	bne.n	8004656 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART2_CLK_ENABLE();
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	4b58      	ldr	r3, [pc, #352]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	4a57      	ldr	r2, [pc, #348]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	6413      	str	r3, [r2, #64]	; 0x40
 80045ac:	4b55      	ldr	r3, [pc, #340]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	4b51      	ldr	r3, [pc, #324]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	4a50      	ldr	r2, [pc, #320]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6313      	str	r3, [r2, #48]	; 0x30
 80045c8:	4b4e      	ldr	r3, [pc, #312]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045d4:	230c      	movs	r3, #12
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d8:	2302      	movs	r3, #2
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e0:	2303      	movs	r3, #3
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045e4:	2307      	movs	r3, #7
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ec:	4619      	mov	r1, r3
 80045ee:	484b      	ldr	r0, [pc, #300]	; (800471c <HAL_UART_MspInit+0x2a4>)
 80045f0:	f001 f830 	bl	8005654 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 80045f6:	4a4b      	ldr	r2, [pc, #300]	; (8004724 <HAL_UART_MspInit+0x2ac>)
 80045f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80045fa:	4b49      	ldr	r3, [pc, #292]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 80045fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004600:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004608:	4b45      	ldr	r3, [pc, #276]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800460e:	4b44      	ldr	r3, [pc, #272]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 8004610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004614:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004616:	4b42      	ldr	r3, [pc, #264]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 8004618:	2200      	movs	r2, #0
 800461a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800461c:	4b40      	ldr	r3, [pc, #256]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 800461e:	2200      	movs	r2, #0
 8004620:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004622:	4b3f      	ldr	r3, [pc, #252]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 8004624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004628:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800462a:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 800462c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004630:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004632:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 8004634:	2200      	movs	r2, #0
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004638:	4839      	ldr	r0, [pc, #228]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 800463a:	f000 fc9b 	bl	8004f74 <HAL_DMA_Init>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8004644:	f7ff fda2 	bl	800418c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a35      	ldr	r2, [pc, #212]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
 800464e:	4a34      	ldr	r2, [pc, #208]	; (8004720 <HAL_UART_MspInit+0x2a8>)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004654:	e04f      	b.n	80046f6 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a33      	ldr	r2, [pc, #204]	; (8004728 <HAL_UART_MspInit+0x2b0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d14a      	bne.n	80046f6 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <HAL_UART_MspInit+0x28c>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <HAL_UART_MspInit+0x28c>)
 800466a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466e:	6413      	str	r3, [r2, #64]	; 0x40
 8004670:	4b24      	ldr	r3, [pc, #144]	; (8004704 <HAL_UART_MspInit+0x28c>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_UART_MspInit+0x28c>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <HAL_UART_MspInit+0x28c>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	6313      	str	r3, [r2, #48]	; 0x30
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HAL_UART_MspInit+0x28c>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_UART_MspInit+0x28c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80046a2:	f043 0302 	orr.w	r3, r3, #2
 80046a6:	6313      	str	r3, [r2, #48]	; 0x30
 80046a8:	4b16      	ldr	r3, [pc, #88]	; (8004704 <HAL_UART_MspInit+0x28c>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046b4:	2320      	movs	r3, #32
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b8:	2302      	movs	r3, #2
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c0:	2303      	movs	r3, #3
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046c4:	2307      	movs	r3, #7
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046cc:	4619      	mov	r1, r3
 80046ce:	480e      	ldr	r0, [pc, #56]	; (8004708 <HAL_UART_MspInit+0x290>)
 80046d0:	f000 ffc0 	bl	8005654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046da:	2302      	movs	r3, #2
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046e6:	2307      	movs	r3, #7
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ee:	4619      	mov	r1, r3
 80046f0:	480e      	ldr	r0, [pc, #56]	; (800472c <HAL_UART_MspInit+0x2b4>)
 80046f2:	f000 ffaf 	bl	8005654 <HAL_GPIO_Init>
}
 80046f6:	bf00      	nop
 80046f8:	3740      	adds	r7, #64	; 0x40
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40005000 	.word	0x40005000
 8004704:	40023800 	.word	0x40023800
 8004708:	40020800 	.word	0x40020800
 800470c:	40020c00 	.word	0x40020c00
 8004710:	200002a8 	.word	0x200002a8
 8004714:	40026010 	.word	0x40026010
 8004718:	40004400 	.word	0x40004400
 800471c:	40020000 	.word	0x40020000
 8004720:	20000308 	.word	0x20000308
 8004724:	40026088 	.word	0x40026088
 8004728:	40004800 	.word	0x40004800
 800472c:	40020400 	.word	0x40020400

08004730 <NMI_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
=======
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8002e84:	e7fe      	b.n	8002e84 <NMI_Handler+0x4>

08002e86 <HardFault_Handler>:
=======
 8004734:	e7fe      	b.n	8004734 <NMI_Handler+0x4>

08004736 <HardFault_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
=======
 8004736:	b480      	push	{r7}
 8004738:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:
=======
 800473a:	e7fe      	b.n	800473a <HardFault_Handler+0x4>

0800473c <MemManage_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
=======
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:
=======
 8004740:	e7fe      	b.n	8004740 <MemManage_Handler+0x4>

08004742 <BusFault_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
=======
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:
=======
 8004746:	e7fe      	b.n	8004746 <BusFault_Handler+0x4>

08004748 <UsageFault_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
=======
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:
=======
 800474c:	e7fe      	b.n	800474c <UsageFault_Handler+0x4>

0800474e <SVC_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
=======
 800474e:	b480      	push	{r7}
 8004750:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:
=======
 8004752:	bf00      	nop
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <DebugMon_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
=======
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:
=======
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <PendSV_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
=======
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:
=======
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <SysTick_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
=======
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8002ecc:	f000 faa4 	bl	8003418 <HAL_IncTick>
=======
 800477c:	f000 faa4 	bl	8004cc8 <HAL_IncTick>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <DMA1_Stream0_IRQHandler>:
=======
 8004780:	bf00      	nop
 8004782:	bd80      	pop	{r7, pc}

08004784 <DMA1_Stream0_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
=======
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
<<<<<<< HEAD
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA1_Stream0_IRQHandler+0x10>)
 8002eda:	f000 fcf9 	bl	80038d0 <HAL_DMA_IRQHandler>
=======
 8004788:	4802      	ldr	r0, [pc, #8]	; (8004794 <DMA1_Stream0_IRQHandler+0x10>)
 800478a:	f000 fcf9 	bl	8005180 <HAL_DMA_IRQHandler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200002a0 	.word	0x200002a0

08002ee8 <DMA1_Stream4_IRQHandler>:
=======
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200002a8 	.word	0x200002a8

08004798 <DMA1_Stream4_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
<<<<<<< HEAD
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
=======
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
<<<<<<< HEAD
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA1_Stream4_IRQHandler+0x10>)
 8002eee:	f000 fcef 	bl	80038d0 <HAL_DMA_IRQHandler>
=======
 800479c:	4802      	ldr	r0, [pc, #8]	; (80047a8 <DMA1_Stream4_IRQHandler+0x10>)
 800479e:	f000 fcef 	bl	8005180 <HAL_DMA_IRQHandler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
<<<<<<< HEAD
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000174 	.word	0x20000174

08002efc <DMA1_Stream5_IRQHandler>:
=======
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2000017c 	.word	0x2000017c

080047ac <DMA1_Stream5_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
<<<<<<< HEAD
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
=======
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
<<<<<<< HEAD
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <DMA1_Stream5_IRQHandler+0x10>)
 8002f02:	f000 fce5 	bl	80038d0 <HAL_DMA_IRQHandler>
=======
 80047b0:	4802      	ldr	r0, [pc, #8]	; (80047bc <DMA1_Stream5_IRQHandler+0x10>)
 80047b2:	f000 fce5 	bl	8005180 <HAL_DMA_IRQHandler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
<<<<<<< HEAD
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000300 	.word	0x20000300

08002f10 <TIM3_IRQHandler>:
=======
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000308 	.word	0x20000308

080047c0 <TIM3_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
=======
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <TIM3_IRQHandler+0x10>)
 8002f16:	f003 fa7f 	bl	8006418 <HAL_TIM_IRQHandler>
=======
 80047c4:	4802      	ldr	r0, [pc, #8]	; (80047d0 <TIM3_IRQHandler+0x10>)
 80047c6:	f003 fa97 	bl	8007cf8 <HAL_TIM_IRQHandler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200000e4 	.word	0x200000e4

08002f24 <TIM6_DAC_IRQHandler>:
=======
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200000ec 	.word	0x200000ec

080047d4 <TIM6_DAC_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< HEAD
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
=======
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <TIM6_DAC_IRQHandler+0x10>)
 8002f2a:	f003 fa75 	bl	8006418 <HAL_TIM_IRQHandler>
=======
 80047d8:	4802      	ldr	r0, [pc, #8]	; (80047e4 <TIM6_DAC_IRQHandler+0x10>)
 80047da:	f003 fa8d 	bl	8007cf8 <HAL_TIM_IRQHandler>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< HEAD
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000012c 	.word	0x2000012c

08002f38 <SystemInit>:
=======
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000134 	.word	0x20000134

080047e8 <SystemInit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <SystemInit+0x20>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <SystemInit+0x20>)
 8002f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <SystemInit+0x20>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	4a05      	ldr	r2, [pc, #20]	; (8004808 <SystemInit+0x20>)
 80047f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	807b      	strh	r3, [r7, #2]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	707b      	strb	r3, [r7, #1]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	2b2f      	cmp	r3, #47	; 0x2f
 8002faa:	d81a      	bhi.n	8002fe2 <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	330c      	adds	r3, #12
 8002fba:	783a      	ldrb	r2, [r7, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	330d      	adds	r3, #13
 8002fcc:	787a      	ldrb	r2, [r7, #1]
 8002fce:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8002fd0:	887a      	ldrh	r2, [r7, #2]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	330e      	adds	r3, #14
 8002fde:	7c3a      	ldrb	r2, [r7, #16]
 8002fe0:	701a      	strb	r2, [r3, #0]
	}
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08c      	sub	sp, #48	; 0x30
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	4608      	mov	r0, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	817b      	strh	r3, [r7, #10]
 8003002:	460b      	mov	r3, r1
 8003004:	813b      	strh	r3, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 800300a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 8003012:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003014:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003018:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800301c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003028:	e09c      	b.n	8003164 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 800302a:	893b      	ldrh	r3, [r7, #8]
 800302c:	461a      	mov	r2, r3
 800302e:	0052      	lsls	r2, r2, #1
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	b29b      	uxth	r3, r3
 8003036:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 8003038:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	da00      	bge.n	8003042 <_ZN7WS2812C7set_hsvEtsss+0x52>
 8003040:	33ff      	adds	r3, #255	; 0xff
 8003042:	121b      	asrs	r3, r3, #8
 8003044:	b21b      	sxth	r3, r3
 8003046:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 8003048:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800304c:	425a      	negs	r2, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	bf58      	it	pl
 8003054:	4253      	negpl	r3, r2
 8003056:	b21b      	sxth	r3, r3
 8003058:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 800305a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800305e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003062:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	da00      	bge.n	8003070 <_ZN7WS2812C7set_hsvEtsss+0x80>
 800306e:	33ff      	adds	r3, #255	; 0xff
 8003070:	121b      	asrs	r3, r3, #8
 8003072:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8003074:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800307c:	69f9      	ldr	r1, [r7, #28]
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	da00      	bge.n	8003088 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8003086:	33ff      	adds	r3, #255	; 0xff
 8003088:	121b      	asrs	r3, r3, #8
 800308a:	425b      	negs	r3, r3
 800308c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	da00      	bge.n	800309a <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8003098:	33ff      	adds	r3, #255	; 0xff
 800309a:	121b      	asrs	r3, r3, #8
 800309c:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 800309e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80030a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a6:	69f9      	ldr	r1, [r7, #28]
 80030a8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da00      	bge.n	80030b6 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 80030b4:	33ff      	adds	r3, #255	; 0xff
 80030b6:	121b      	asrs	r3, r3, #8
 80030b8:	425b      	negs	r3, r3
 80030ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da00      	bge.n	80030c8 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 80030c6:	33ff      	adds	r3, #255	; 0xff
 80030c8:	121b      	asrs	r3, r3, #8
 80030ca:	613b      	str	r3, [r7, #16]

		switch (i) {
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d83e      	bhi.n	8003150 <_ZN7WS2812C7set_hsvEtsss+0x160>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030ed 	.word	0x080030ed
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003115 	.word	0x08003115
 80030e4:	08003129 	.word	0x08003129
 80030e8:	0800313d 	.word	0x0800313d
			case 0: r = v; g = t; b = p; break;
 80030ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80030fe:	e031      	b.n	8003164 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003106:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003108:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003112:	e027      	b.n	8003164 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800311a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800311c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003126:	e01d      	b.n	8003164 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003134:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003136:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800313a:	e013      	b.n	8003164 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003148:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800314a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800314e:	e009      	b.n	8003164 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8003150:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003162:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8003164:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8003168:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4603      	mov	r3, r0
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff ff08 	bl	8002f8c <_ZN7WS2812C7set_rgbEthhh>
}
 800317c:	bf00      	nop
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b2:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d179      	bne.n	80032ae <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2bf9      	cmp	r3, #249	; 0xf9
 80031c2:	dc0a      	bgt.n	80031da <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3326      	adds	r3, #38	; 0x26
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e7f1      	b.n	80031be <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b2f      	cmp	r3, #47	; 0x2f
 80031e2:	dc52      	bgt.n	800328a <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	dc49      	bgt.n	8003282 <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 80031ee:	2307      	movs	r3, #7
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db40      	blt.n	800327a <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	18ca      	adds	r2, r1, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4413      	add	r3, r2
 8003208:	330c      	adds	r3, #12
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	fa42 f303 	asr.w	r3, r2, r3
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d114      	bne.n	800324a <_ZN7WS2812C7executeEv+0xa6>
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	441a      	add	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	4413      	add	r3, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	3326      	adds	r3, #38	; 0x26
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	2214      	movs	r2, #20
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	e013      	b.n	8003272 <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	441a      	add	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f1c3 0307 	rsb	r3, r3, #7
 8003264:	4413      	add	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	3326      	adds	r3, #38	; 0x26
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	220a      	movs	r2, #10
 8003270:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3b01      	subs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e7bb      	b.n	80031f2 <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e7b2      	b.n	80031e8 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3301      	adds	r3, #1
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e7a9      	b.n	80031de <_ZN7WS2812C7executeEv+0x3a>
=======
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	807b      	strh	r3, [r7, #2]
 800484e:	460b      	mov	r3, r1
 8004850:	707b      	strb	r3, [r7, #1]
 8004852:	4613      	mov	r3, r2
 8004854:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8004856:	887b      	ldrh	r3, [r7, #2]
 8004858:	2b2f      	cmp	r3, #47	; 0x2f
 800485a:	d81a      	bhi.n	8004892 <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	440b      	add	r3, r1
 8004868:	330c      	adds	r3, #12
 800486a:	783a      	ldrb	r2, [r7, #0]
 800486c:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	440b      	add	r3, r1
 800487a:	330d      	adds	r3, #13
 800487c:	787a      	ldrb	r2, [r7, #1]
 800487e:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8004880:	887a      	ldrh	r2, [r7, #2]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	440b      	add	r3, r1
 800488c:	330e      	adds	r3, #14
 800488e:	7c3a      	ldrb	r2, [r7, #16]
 8004890:	701a      	strb	r2, [r3, #0]
	}
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08c      	sub	sp, #48	; 0x30
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	4608      	mov	r0, r1
 80048aa:	4611      	mov	r1, r2
 80048ac:	461a      	mov	r2, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	817b      	strh	r3, [r7, #10]
 80048b2:	460b      	mov	r3, r1
 80048b4:	813b      	strh	r3, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 80048ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 80048c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80048c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80048c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80048cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80048d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048d8:	e09c      	b.n	8004a14 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 80048da:	893b      	ldrh	r3, [r7, #8]
 80048dc:	461a      	mov	r2, r3
 80048de:	0052      	lsls	r2, r2, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 80048e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da00      	bge.n	80048f2 <_ZN7WS2812C7set_hsvEtsss+0x52>
 80048f0:	33ff      	adds	r3, #255	; 0xff
 80048f2:	121b      	asrs	r3, r3, #8
 80048f4:	b21b      	sxth	r3, r3
 80048f6:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 80048f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80048fc:	425a      	negs	r2, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	bf58      	it	pl
 8004904:	4253      	negpl	r3, r2
 8004906:	b21b      	sxth	r3, r3
 8004908:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 800490a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800490e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004912:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	da00      	bge.n	8004920 <_ZN7WS2812C7set_hsvEtsss+0x80>
 800491e:	33ff      	adds	r3, #255	; 0xff
 8004920:	121b      	asrs	r3, r3, #8
 8004922:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8004924:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492c:	69f9      	ldr	r1, [r7, #28]
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	da00      	bge.n	8004938 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8004936:	33ff      	adds	r3, #255	; 0xff
 8004938:	121b      	asrs	r3, r3, #8
 800493a:	425b      	negs	r3, r3
 800493c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	da00      	bge.n	800494a <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8004948:	33ff      	adds	r3, #255	; 0xff
 800494a:	121b      	asrs	r3, r3, #8
 800494c:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 800494e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004956:	69f9      	ldr	r1, [r7, #28]
 8004958:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	da00      	bge.n	8004966 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8004964:	33ff      	adds	r3, #255	; 0xff
 8004966:	121b      	asrs	r3, r3, #8
 8004968:	425b      	negs	r3, r3
 800496a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	da00      	bge.n	8004978 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8004976:	33ff      	adds	r3, #255	; 0xff
 8004978:	121b      	asrs	r3, r3, #8
 800497a:	613b      	str	r3, [r7, #16]

		switch (i) {
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d83e      	bhi.n	8004a00 <_ZN7WS2812C7set_hsvEtsss+0x160>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	0800499d 	.word	0x0800499d
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049d9 	.word	0x080049d9
 8004998:	080049ed 	.word	0x080049ed
			case 0: r = v; g = t; b = p; break;
 800499c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049ae:	e031      	b.n	8004a14 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049c2:	e027      	b.n	8004a14 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049d6:	e01d      	b.n	8004a14 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80049e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049ea:	e013      	b.n	8004a14 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80049f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049fe:	e009      	b.n	8004a14 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8004a00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004a12:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8004a14:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004a18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff ff08 	bl	800483c <_ZN7WS2812C7set_rgbEthhh>
}
 8004a2c:	bf00      	nop
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a62:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d179      	bne.n	8004b5e <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2bf9      	cmp	r3, #249	; 0xf9
 8004a72:	dc0a      	bgt.n	8004a8a <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3326      	adds	r3, #38	; 0x26
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e7f1      	b.n	8004a6e <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b2f      	cmp	r3, #47	; 0x2f
 8004a92:	dc52      	bgt.n	8004b3a <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	dc49      	bgt.n	8004b32 <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 8004a9e:	2307      	movs	r3, #7
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db40      	blt.n	8004b2a <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	18ca      	adds	r2, r1, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	330c      	adds	r3, #12
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	fa42 f303 	asr.w	r3, r2, r3
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d114      	bne.n	8004afa <_ZN7WS2812C7executeEv+0xa6>
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	441a      	add	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f1c3 0307 	rsb	r3, r3, #7
 8004aea:	4413      	add	r3, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	3326      	adds	r3, #38	; 0x26
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	2214      	movs	r2, #20
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	e013      	b.n	8004b22 <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4613      	mov	r3, r2
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	4413      	add	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	441a      	add	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f1c3 0307 	rsb	r3, r3, #7
 8004b14:	4413      	add	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	3326      	adds	r3, #38	; 0x26
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	220a      	movs	r2, #10
 8004b20:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e7bb      	b.n	8004aa2 <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e7b2      	b.n	8004a98 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e7a9      	b.n	8004a8e <_ZN7WS2812C7executeEv+0x3a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
<<<<<<< HEAD
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6858      	ldr	r0, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800329a:	f240 537a 	movw	r3, #1402	; 0x57a
 800329e:	f002 fef3 	bl	8006088 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
=======
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6858      	ldr	r0, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8004b4a:	f240 537a 	movw	r3, #1402	; 0x57a
 8004b4e:	f002 ff0b 	bl	8007968 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
>>>>>>> parent of feb78f6 (本番パフォーマンス)
		// (uint32_t*)

	}else{

	}
}
<<<<<<< HEAD
 80032ae:	bf00      	nop
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2bf9      	cmp	r3, #249	; 0xf9
 80032c6:	dc0a      	bgt.n	80032de <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3326      	adds	r3, #38	; 0x26
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3301      	adds	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e7f1      	b.n	80032c2 <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 80032de:	23fa      	movs	r3, #250	; 0xfa
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80032e8:	da0a      	bge.n	8003300 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3326      	adds	r3, #38	; 0x26
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	220a      	movs	r2, #10
 80032f6:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	e7f0      	b.n	80032e2 <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6858      	ldr	r0, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8003310:	f240 537a 	movw	r3, #1402	; 0x57a
 8003314:	f002 feb8 	bl	8006088 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <Reset_Handler>:
=======
 8004b5e:	bf00      	nop
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2bf9      	cmp	r3, #249	; 0xf9
 8004b76:	dc0a      	bgt.n	8004b8e <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3326      	adds	r3, #38	; 0x26
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e7f1      	b.n	8004b72 <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8004b8e:	23fa      	movs	r3, #250	; 0xfa
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004b98:	da0a      	bge.n	8004bb0 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	3326      	adds	r3, #38	; 0x26
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	e7f0      	b.n	8004b92 <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6858      	ldr	r0, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8004bc0:	f240 537a 	movw	r3, #1402	; 0x57a
 8004bc4:	f002 fed0 	bl	8007968 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <Reset_Handler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8003320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003358 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003324:	480d      	ldr	r0, [pc, #52]	; (800335c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003326:	490e      	ldr	r1, [pc, #56]	; (8003360 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003328:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800333c:	4c0b      	ldr	r4, [pc, #44]	; (800336c <LoopFillZerobss+0x26>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800334a:	f7ff fdf5 	bl	8002f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800334e:	f005 fba5 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003352:	f7fe f9f1 	bl	8001738 <main>
  bx  lr    
 8003356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003358:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800335c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003360:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003364:	08008bd4 	.word	0x08008bd4
  ldr r2, =_sbss
 8003368:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800336c:	20001b64 	.word	0x20001b64

08003370 <ADC_IRQHandler>:
=======
 8004bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bd4:	480d      	ldr	r0, [pc, #52]	; (8004c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bd6:	490e      	ldr	r1, [pc, #56]	; (8004c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bd8:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bdc:	e002      	b.n	8004be4 <LoopCopyDataInit>

08004bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004be2:	3304      	adds	r3, #4

08004be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004be8:	d3f9      	bcc.n	8004bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bec:	4c0b      	ldr	r4, [pc, #44]	; (8004c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bf0:	e001      	b.n	8004bf6 <LoopFillZerobss>

08004bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bf4:	3204      	adds	r2, #4

08004bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bf8:	d3fb      	bcc.n	8004bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bfa:	f7ff fdf5 	bl	80047e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bfe:	f006 f909 	bl	800ae14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c02:	f7fd f885 	bl	8001d10 <main>
  bx  lr    
 8004c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c10:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004c14:	0800b31c 	.word	0x0800b31c
  ldr r2, =_sbss
 8004c18:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004c1c:	20001b5c 	.word	0x20001b5c

08004c20 <ADC_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8003370:	e7fe      	b.n	8003370 <ADC_IRQHandler>
	...

08003374 <HAL_Init>:
=======
 8004c20:	e7fe      	b.n	8004c20 <ADC_IRQHandler>
	...

08004c24 <HAL_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003378:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <HAL_Init+0x40>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <HAL_Init+0x40>)
 800337e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003382:	6013      	str	r3, [r2, #0]
=======
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_Init+0x40>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <HAL_Init+0x40>)
 8004c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c32:	6013      	str	r3, [r2, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_Init+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_Init+0x40>)
 800338a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800338e:	6013      	str	r3, [r2, #0]
=======
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_Init+0x40>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <HAL_Init+0x40>)
 8004c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c3e:	6013      	str	r3, [r2, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <HAL_Init+0x40>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	6013      	str	r3, [r2, #0]
=======
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <HAL_Init+0x40>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <HAL_Init+0x40>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 800339c:	2003      	movs	r0, #3
 800339e:	f000 f94f 	bl	8003640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033a2:	200f      	movs	r0, #15
 80033a4:	f000 f808 	bl	80033b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033a8:	f7ff fae2 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023c00 	.word	0x40023c00

080033b8 <HAL_InitTick>:
=======
 8004c4c:	2003      	movs	r0, #3
 8004c4e:	f000 f94f 	bl	8004ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c52:	200f      	movs	r0, #15
 8004c54:	f000 f808 	bl	8004c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c58:	f7ff fae2 	bl	8004220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40023c00 	.word	0x40023c00

08004c68 <HAL_InitTick>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_InitTick+0x54>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_InitTick+0x58>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f967 	bl	80036aa <HAL_SYSTICK_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00e      	b.n	8003404 <HAL_InitTick+0x4c>
=======
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <HAL_InitTick+0x54>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_InitTick+0x58>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f967 	bl	8004f5a <HAL_SYSTICK_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e00e      	b.n	8004cb4 <HAL_InitTick+0x4c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b0f      	cmp	r3, #15
 80033ea:	d80a      	bhi.n	8003402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033ec:	2200      	movs	r2, #0
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f000 f92f 	bl	8003656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033f8:	4a06      	ldr	r2, [pc, #24]	; (8003414 <HAL_InitTick+0x5c>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
=======
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b0f      	cmp	r3, #15
 8004c9a:	d80a      	bhi.n	8004cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	f000 f92f 	bl	8004f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ca8:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <HAL_InitTick+0x5c>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6013      	str	r3, [r2, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80033fe:	2300      	movs	r3, #0
 8003400:	e000      	b.n	8003404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000004 	.word	0x20000004
 8003410:	2000000c 	.word	0x2000000c
 8003414:	20000008 	.word	0x20000008

08003418 <HAL_IncTick>:
=======
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	2000000c 	.word	0x2000000c
 8004cc0:	20000014 	.word	0x20000014
 8004cc4:	20000010 	.word	0x20000010

08004cc8 <HAL_IncTick>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_IncTick+0x20>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_IncTick+0x24>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4413      	add	r3, r2
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <HAL_IncTick+0x24>)
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	2000000c 	.word	0x2000000c
 800343c:	20001b60 	.word	0x20001b60

08003440 <HAL_GetTick>:
=======
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_IncTick+0x20>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_IncTick+0x24>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <HAL_IncTick+0x24>)
 8004cda:	6013      	str	r3, [r2, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000014 	.word	0x20000014
 8004cec:	20001b58 	.word	0x20001b58

08004cf0 <HAL_GetTick>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return uwTick;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_GetTick+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20001b60 	.word	0x20001b60

08003458 <HAL_Delay>:
=======
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8004cf4:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <HAL_GetTick+0x14>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20001b58 	.word	0x20001b58

08004d08 <HAL_Delay>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003460:	f7ff ffee 	bl	8003440 <HAL_GetTick>
 8003464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d005      	beq.n	800347e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_Delay+0x44>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800347e:	bf00      	nop
 8003480:	f7ff ffde 	bl	8003440 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	429a      	cmp	r2, r3
 800348e:	d8f7      	bhi.n	8003480 <HAL_Delay+0x28>
  {
  }
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__NVIC_SetPriorityGrouping>:
=======
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d10:	f7ff ffee 	bl	8004cf0 <HAL_GetTick>
 8004d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d005      	beq.n	8004d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_Delay+0x44>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d2e:	bf00      	nop
 8004d30:	f7ff ffde 	bl	8004cf0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d8f7      	bhi.n	8004d30 <HAL_Delay+0x28>
  {
  }
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000014 	.word	0x20000014

08004d50 <__NVIC_SetPriorityGrouping>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034bc:	4013      	ands	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d2:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	60d3      	str	r3, [r2, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_GetPriorityGrouping>:
=======
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <__NVIC_SetPriorityGrouping+0x44>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d82:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <__NVIC_SetPriorityGrouping+0x44>)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	60d3      	str	r3, [r2, #12]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <__NVIC_GetPriorityGrouping>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <__NVIC_GetPriorityGrouping+0x18>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	f003 0307 	and.w	r3, r3, #7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_EnableIRQ>:
=======
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d9c:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <__NVIC_GetPriorityGrouping+0x18>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	f003 0307 	and.w	r3, r3, #7
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <__NVIC_EnableIRQ>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	db0b      	blt.n	800352e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4907      	ldr	r1, [pc, #28]	; (800353c <__NVIC_EnableIRQ+0x38>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2001      	movs	r0, #1
 8003526:	fa00 f202 	lsl.w	r2, r0, r2
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000e100 	.word	0xe000e100

08003540 <__NVIC_SetPriority>:
=======
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	db0b      	blt.n	8004dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	f003 021f 	and.w	r2, r3, #31
 8004dcc:	4907      	ldr	r1, [pc, #28]	; (8004dec <__NVIC_EnableIRQ+0x38>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	e000e100 	.word	0xe000e100

08004df0 <__NVIC_SetPriority>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	db0a      	blt.n	800356a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	490c      	ldr	r1, [pc, #48]	; (800358c <__NVIC_SetPriority+0x4c>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	440b      	add	r3, r1
 8003564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	6039      	str	r1, [r7, #0]
 8004dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	db0a      	blt.n	8004e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	490c      	ldr	r1, [pc, #48]	; (8004e3c <__NVIC_SetPriority+0x4c>)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	0112      	lsls	r2, r2, #4
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	440b      	add	r3, r1
 8004e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8003568:	e00a      	b.n	8003580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4908      	ldr	r1, [pc, #32]	; (8003590 <__NVIC_SetPriority+0x50>)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3b04      	subs	r3, #4
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	440b      	add	r3, r1
 800357e:	761a      	strb	r2, [r3, #24]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000e100 	.word	0xe000e100
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <NVIC_EncodePriority>:
=======
 8004e18:	e00a      	b.n	8004e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <__NVIC_SetPriority+0x50>)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	3b04      	subs	r3, #4
 8004e28:	0112      	lsls	r2, r2, #4
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	761a      	strb	r2, [r3, #24]
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	e000e100 	.word	0xe000e100
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <NVIC_EncodePriority>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	61fb      	str	r3, [r7, #28]
=======
 8004e44:	b480      	push	{r7}
 8004e46:	b089      	sub	sp, #36	; 0x24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f1c3 0307 	rsb	r3, r3, #7
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	bf28      	it	cs
 80035b2:	2304      	movcs	r3, #4
 80035b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d902      	bls.n	80035c4 <NVIC_EncodePriority+0x30>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3b03      	subs	r3, #3
 80035c2:	e000      	b.n	80035c6 <NVIC_EncodePriority+0x32>
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	401a      	ands	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43d9      	mvns	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	4313      	orrs	r3, r2
         );
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <SysTick_Config>:
=======
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f1c3 0307 	rsb	r3, r3, #7
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	bf28      	it	cs
 8004e62:	2304      	movcs	r3, #4
 8004e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2b06      	cmp	r3, #6
 8004e6c:	d902      	bls.n	8004e74 <NVIC_EncodePriority+0x30>
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3b03      	subs	r3, #3
 8004e72:	e000      	b.n	8004e76 <NVIC_EncodePriority+0x32>
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e78:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43da      	mvns	r2, r3
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	401a      	ands	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	43d9      	mvns	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e9c:	4313      	orrs	r3, r2
         );
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <SysTick_Config>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360c:	d301      	bcc.n	8003612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360e:	2301      	movs	r3, #1
 8003610:	e00f      	b.n	8003632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <SysTick_Config+0x40>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800361a:	210f      	movs	r1, #15
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	f7ff ff8e 	bl	8003540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <SysTick_Config+0x40>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <SysTick_Config+0x40>)
 800362c:	2207      	movs	r2, #7
 800362e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	e000e010 	.word	0xe000e010

08003640 <HAL_NVIC_SetPriorityGrouping>:
=======
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ebc:	d301      	bcc.n	8004ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e00f      	b.n	8004ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <SysTick_Config+0x40>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eca:	210f      	movs	r1, #15
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	f7ff ff8e 	bl	8004df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <SysTick_Config+0x40>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <SysTick_Config+0x40>)
 8004edc:	2207      	movs	r2, #7
 8004ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	e000e010 	.word	0xe000e010

08004ef0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
=======
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ff29 	bl	80034a0 <__NVIC_SetPriorityGrouping>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_NVIC_SetPriority>:
=======
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff29 	bl	8004d50 <__NVIC_SetPriorityGrouping>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_NVIC_SetPriority>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
=======
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003668:	f7ff ff3e 	bl	80034e8 <__NVIC_GetPriorityGrouping>
 800366c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	6978      	ldr	r0, [r7, #20]
 8003674:	f7ff ff8e 	bl	8003594 <NVIC_EncodePriority>
 8003678:	4602      	mov	r2, r0
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff5d 	bl	8003540 <__NVIC_SetPriority>
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_NVIC_EnableIRQ>:
=======
 8004f18:	f7ff ff3e 	bl	8004d98 <__NVIC_GetPriorityGrouping>
 8004f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	6978      	ldr	r0, [r7, #20]
 8004f24:	f7ff ff8e 	bl	8004e44 <NVIC_EncodePriority>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ff5d 	bl	8004df0 <__NVIC_SetPriority>
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_NVIC_EnableIRQ>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	71fb      	strb	r3, [r7, #7]
=======
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	4603      	mov	r3, r0
 8004f46:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff31 	bl	8003504 <__NVIC_EnableIRQ>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_SYSTICK_Config>:
=======
 8004f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff ff31 	bl	8004db4 <__NVIC_EnableIRQ>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_SYSTICK_Config>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffa2 	bl	80035fc <SysTick_Config>
 80036b8:	4603      	mov	r3, r0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_DMA_Init>:
=======
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff ffa2 	bl	8004eac <SysTick_Config>
 8004f68:	4603      	mov	r3, r0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_DMA_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff feb6 	bl	8003440 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]
=======
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f80:	f7ff feb6 	bl	8004cf0 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e099      	b.n	8003814 <HAL_DMA_Init+0x150>
=======
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e099      	b.n	80050c4 <HAL_DMA_Init+0x150>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003700:	e00f      	b.n	8003722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003702:	f7ff fe9d 	bl	8003440 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b05      	cmp	r3, #5
 800370e:	d908      	bls.n	8003722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2203      	movs	r2, #3
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e078      	b.n	8003814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e8      	bne.n	8003702 <HAL_DMA_Init+0x3e>
=======
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb0:	e00f      	b.n	8004fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fb2:	f7ff fe9d 	bl	8004cf0 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d908      	bls.n	8004fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2203      	movs	r2, #3
 8004fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e078      	b.n	80050c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e8      	bne.n	8004fb2 <HAL_DMA_Init+0x3e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4b38      	ldr	r3, [pc, #224]	; (800381c <HAL_DMA_Init+0x158>)
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
=======
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_DMA_Init+0x158>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2b04      	cmp	r3, #4
 800377a:	d107      	bne.n	800378c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	4313      	orrs	r3, r2
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
=======
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b04      	cmp	r3, #4
 800502a:	d107      	bne.n	800503c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	4313      	orrs	r3, r2
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d117      	bne.n	80037e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
=======
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0307 	bic.w	r3, r3, #7
 8005052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b04      	cmp	r3, #4
 8005064:	d117      	bne.n	8005096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa6f 	bl	8003cac <DMA_CheckFifoParam>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037e2:	2301      	movs	r3, #1
 80037e4:	e016      	b.n	8003814 <HAL_DMA_Init+0x150>
=======
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fa6f 	bl	800555c <DMA_CheckFifoParam>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005092:	2301      	movs	r3, #1
 8005094:	e016      	b.n	80050c4 <HAL_DMA_Init+0x150>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	615a      	str	r2, [r3, #20]
=======
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	615a      	str	r2, [r3, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa26 	bl	8003c40 <DMA_CalcBaseAndBitshift>
 80037f4:	4603      	mov	r3, r0
 80037f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	223f      	movs	r2, #63	; 0x3f
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	f010803f 	.word	0xf010803f

08003820 <HAL_DMA_Start_IT>:
=======
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa26 	bl	80054f0 <DMA_CalcBaseAndBitshift>
 80050a4:	4603      	mov	r3, r0
 80050a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	223f      	movs	r2, #63	; 0x3f
 80050ae:	409a      	lsls	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	f010803f 	.word	0xf010803f

080050d0 <HAL_DMA_Start_IT>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	613b      	str	r3, [r7, #16]
=======
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	613b      	str	r3, [r7, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_DMA_Start_IT+0x26>
 8003842:	2302      	movs	r3, #2
 8003844:	e040      	b.n	80038c8 <HAL_DMA_Start_IT+0xa8>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d12f      	bne.n	80038ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f9b8 	bl	8003be4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	223f      	movs	r2, #63	; 0x3f
 800387a:	409a      	lsls	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0216 	orr.w	r2, r2, #22
 800388e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0208 	orr.w	r2, r2, #8
 80038a6:	601a      	str	r2, [r3, #0]
=======
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA_Start_IT+0x26>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e040      	b.n	8005178 <HAL_DMA_Start_IT+0xa8>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d12f      	bne.n	800516a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f9b8 	bl	8005494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005128:	223f      	movs	r2, #63	; 0x3f
 800512a:	409a      	lsls	r2, r3
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0216 	orr.w	r2, r2, #22
 800513e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e005      	b.n	80038c6 <HAL_DMA_Start_IT+0xa6>
=======
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e005      	b.n	8005176 <HAL_DMA_Start_IT+0xa6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_DMA_IRQHandler>:
=======
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005172:	2302      	movs	r3, #2
 8005174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_DMA_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038dc:	4b8e      	ldr	r3, [pc, #568]	; (8003b18 <HAL_DMA_IRQHandler+0x248>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a8e      	ldr	r2, [pc, #568]	; (8003b1c <HAL_DMA_IRQHandler+0x24c>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	2208      	movs	r2, #8
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01a      	beq.n	800393c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	2208      	movs	r2, #8
 800392a:	409a      	lsls	r2, r3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800518c:	4b8e      	ldr	r3, [pc, #568]	; (80053c8 <HAL_DMA_IRQHandler+0x248>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a8e      	ldr	r2, [pc, #568]	; (80053cc <HAL_DMA_IRQHandler+0x24c>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	2208      	movs	r2, #8
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01a      	beq.n	80051ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d013      	beq.n	80051ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	2208      	movs	r2, #8
 80051da:	409a      	lsls	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	f043 0201 	orr.w	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	2201      	movs	r2, #1
 8003942:	409a      	lsls	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d012      	beq.n	8003972 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	2201      	movs	r2, #1
 8003960:	409a      	lsls	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	2201      	movs	r2, #1
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	2204      	movs	r2, #4
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	2204      	movs	r2, #4
 8003996:	409a      	lsls	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	2204      	movs	r2, #4
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d012      	beq.n	8005258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005244:	2204      	movs	r2, #4
 8005246:	409a      	lsls	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2210      	movs	r2, #16
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d043      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03c      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2210      	movs	r2, #16
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d018      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d024      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
 80039fe:	e01f      	b.n	8003a40 <HAL_DMA_IRQHandler+0x170>
=======
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	2210      	movs	r2, #16
 800525e:	409a      	lsls	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d043      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d03c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	2210      	movs	r2, #16
 800527c:	409a      	lsls	r2, r3
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d024      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e01f      	b.n	80052f0 <HAL_DMA_IRQHandler+0x170>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
 8003a10:	e016      	b.n	8003a40 <HAL_DMA_IRQHandler+0x170>
=======
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
 80052c0:	e016      	b.n	80052f0 <HAL_DMA_IRQHandler+0x170>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0208 	bic.w	r2, r2, #8
 8003a2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
=======
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0208 	bic.w	r2, r2, #8
 80052de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	2220      	movs	r2, #32
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 808f 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8087 	beq.w	8003b70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2220      	movs	r2, #32
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d136      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0216 	bic.w	r2, r2, #22
 8003a88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x1da>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d007      	beq.n	8003aba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
=======
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f4:	2220      	movs	r2, #32
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 808f 	beq.w	8005420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8087 	beq.w	8005420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005316:	2220      	movs	r2, #32
 8005318:	409a      	lsls	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b05      	cmp	r3, #5
 8005328:	d136      	bne.n	8005398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0216 	bic.w	r2, r2, #22
 8005338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_DMA_IRQHandler+0x1da>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0208 	bic.w	r2, r2, #8
 8005368:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	223f      	movs	r2, #63	; 0x3f
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d07e      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
        }
        return;
 8003ae6:	e079      	b.n	8003bdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10d      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d031      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
 8003b14:	e02c      	b.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
 8003b16:	bf00      	nop
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	1b4e81b5 	.word	0x1b4e81b5
=======
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	223f      	movs	r2, #63	; 0x3f
 8005370:	409a      	lsls	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d07e      	beq.n	800548c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
        }
        return;
 8005396:	e079      	b.n	800548c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	e02c      	b.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
 80053c6:	bf00      	nop
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d023      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
 8003b30:	e01e      	b.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
=======
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d023      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	e01e      	b.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10f      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0210 	bic.w	r2, r2, #16
 8003b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
=======
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0210 	bic.w	r2, r2, #16
 80053fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d032      	beq.n	8003bde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2205      	movs	r2, #5
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
=======
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d032      	beq.n	800548e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d022      	beq.n	800547a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2205      	movs	r2, #5
 8005438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d307      	bcc.n	8003bb8 <HAL_DMA_IRQHandler+0x2e8>
=======
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	429a      	cmp	r2, r3
 8005456:	d307      	bcc.n	8005468 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f2      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x2cc>
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
 8003bda:	e000      	b.n	8003bde <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bdc:	bf00      	nop
    }
  }
}
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <DMA_SetConfig>:
=======
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f2      	bne.n	800544c <HAL_DMA_IRQHandler+0x2cc>
 8005466:	e000      	b.n	800546a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	e000      	b.n	800548e <HAL_DMA_IRQHandler+0x30e>
        return;
 800548c:	bf00      	nop
    }
  }
}
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <DMA_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d108      	bne.n	8003c24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	60da      	str	r2, [r3, #12]
=======
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d108      	bne.n	80054d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	60da      	str	r2, [r3, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 8003c22:	e007      	b.n	8003c34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <DMA_CalcBaseAndBitshift>:
=======
 80054d2:	e007      	b.n	80054e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <DMA_CalcBaseAndBitshift>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	3b10      	subs	r3, #16
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x64>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
=======
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	3b10      	subs	r3, #16
 8005500:	4a14      	ldr	r2, [pc, #80]	; (8005554 <DMA_CalcBaseAndBitshift+0x64>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8003c5a:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x68>)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d909      	bls.n	8003c82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c80:	e007      	b.n	8003c92 <DMA_CalcBaseAndBitshift+0x52>
=======
 800550a:	4a13      	ldr	r2, [pc, #76]	; (8005558 <DMA_CalcBaseAndBitshift+0x68>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b03      	cmp	r3, #3
 800551c:	d909      	bls.n	8005532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	659a      	str	r2, [r3, #88]	; 0x58
 8005530:	e007      	b.n	8005542 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	aaaaaaab 	.word	0xaaaaaaab
 8003ca8:	08008b40 	.word	0x08008b40

08003cac <DMA_CheckFifoParam>:
=======
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	aaaaaaab 	.word	0xaaaaaaab
 8005558:	0800aeb8 	.word	0x0800aeb8

0800555c <DMA_CheckFifoParam>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11f      	bne.n	8003d06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d856      	bhi.n	8003d7a <DMA_CheckFifoParam+0xce>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <DMA_CheckFifoParam+0x28>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf7 	.word	0x08003cf7
 8003cdc:	08003ce5 	.word	0x08003ce5
 8003ce0:	08003d7b 	.word	0x08003d7b
=======
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d11f      	bne.n	80055b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d856      	bhi.n	800562a <DMA_CheckFifoParam+0xce>
 800557c:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <DMA_CheckFifoParam+0x28>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	08005595 	.word	0x08005595
 8005588:	080055a7 	.word	0x080055a7
 800558c:	08005595 	.word	0x08005595
 8005590:	0800562b 	.word	0x0800562b
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d046      	beq.n	8003d7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e043      	b.n	8003d7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cfe:	d140      	bne.n	8003d82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d04:	e03d      	b.n	8003d82 <DMA_CheckFifoParam+0xd6>
=======
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d046      	beq.n	800562e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a4:	e043      	b.n	800562e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ae:	d140      	bne.n	8005632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b4:	e03d      	b.n	8005632 <DMA_CheckFifoParam+0xd6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0e:	d121      	bne.n	8003d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d837      	bhi.n	8003d86 <DMA_CheckFifoParam+0xda>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <DMA_CheckFifoParam+0x70>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d33 	.word	0x08003d33
 8003d24:	08003d2d 	.word	0x08003d2d
 8003d28:	08003d45 	.word	0x08003d45
=======
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	d121      	bne.n	8005604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d837      	bhi.n	8005636 <DMA_CheckFifoParam+0xda>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <DMA_CheckFifoParam+0x70>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055e3 	.word	0x080055e3
 80055d4:	080055dd 	.word	0x080055dd
 80055d8:	080055f5 	.word	0x080055f5
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	e030      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d025      	beq.n	8003d8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d42:	e022      	b.n	8003d8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4c:	d11f      	bne.n	8003d8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d52:	e01c      	b.n	8003d8e <DMA_CheckFifoParam+0xe2>
=======
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e030      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d025      	beq.n	800563a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f2:	e022      	b.n	800563a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055fc:	d11f      	bne.n	800563e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005602:	e01c      	b.n	800563e <DMA_CheckFifoParam+0xe2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d903      	bls.n	8003d62 <DMA_CheckFifoParam+0xb6>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d003      	beq.n	8003d68 <DMA_CheckFifoParam+0xbc>
=======
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d903      	bls.n	8005612 <DMA_CheckFifoParam+0xb6>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d003      	beq.n	8005618 <DMA_CheckFifoParam+0xbc>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8003d60:	e018      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
      break;
 8003d66:	e015      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      break;
 8003d78:	e00b      	b.n	8003d92 <DMA_CheckFifoParam+0xe6>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e00a      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e008      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e006      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e004      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e002      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
=======
 8005610:	e018      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
      break;
 8005616:	e015      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      break;
 8005628:	e00b      	b.n	8005642 <DMA_CheckFifoParam+0xe6>
      break;
 800562a:	bf00      	nop
 800562c:	e00a      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 800562e:	bf00      	nop
 8005630:	e008      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 8005632:	bf00      	nop
 8005634:	e006      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 8005636:	bf00      	nop
 8005638:	e004      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;   
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <DMA_CheckFifoParam+0xe8>
      break;
 8005642:	bf00      	nop
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop

08003da4 <HAL_GPIO_Init>:
=======
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop

08005654 <HAL_GPIO_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	; 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61bb      	str	r3, [r7, #24]
=======
 8005654:	b480      	push	{r7}
 8005656:	b089      	sub	sp, #36	; 0x24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e165      	b.n	800408c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	f040 8154 	bne.w	8004086 <HAL_GPIO_Init+0x2e2>
=======
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e165      	b.n	800593c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005670:	2201      	movs	r2, #1
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	429a      	cmp	r2, r3
 800568a:	f040 8154 	bne.w	8005936 <HAL_GPIO_Init+0x2e2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d005      	beq.n	8003df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d130      	bne.n	8003e58 <HAL_GPIO_Init+0xb4>
=======
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d005      	beq.n	80056a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d130      	bne.n	8005708 <HAL_GPIO_Init+0xb4>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	2203      	movs	r2, #3
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 0201 	and.w	r2, r3, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d017      	beq.n	8003e94 <HAL_GPIO_Init+0xf0>
=======
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	2203      	movs	r2, #3
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056dc:	2201      	movs	r2, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	091b      	lsrs	r3, r3, #4
 80056f2:	f003 0201 	and.w	r2, r3, #1
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	4313      	orrs	r3, r2
 8005700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	2b03      	cmp	r3, #3
 8005712:	d017      	beq.n	8005744 <HAL_GPIO_Init+0xf0>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	2203      	movs	r2, #3
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	60da      	str	r2, [r3, #12]
=======
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	2203      	movs	r2, #3
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4313      	orrs	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	60da      	str	r2, [r3, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d123      	bne.n	8003ee8 <HAL_GPIO_Init+0x144>
=======
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d123      	bne.n	8005798 <HAL_GPIO_Init+0x144>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	08da      	lsrs	r2, r3, #3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3208      	adds	r2, #8
 8003ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	220f      	movs	r2, #15
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	69b9      	ldr	r1, [r7, #24]
 8003ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	08da      	lsrs	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3208      	adds	r2, #8
 8005758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	220f      	movs	r2, #15
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	08da      	lsrs	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3208      	adds	r2, #8
 8005792:	69b9      	ldr	r1, [r7, #24]
 8005794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0203 	and.w	r2, r3, #3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	601a      	str	r2, [r3, #0]
=======
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2203      	movs	r2, #3
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0203 	and.w	r2, r3, #3
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80ae 	beq.w	8004086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4a5c      	ldr	r2, [pc, #368]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f38:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3a:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_GPIO_Init+0x300>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f46:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_GPIO_Init+0x304>)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a4f      	ldr	r2, [pc, #316]	; (80040ac <HAL_GPIO_Init+0x308>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d025      	beq.n	8003fbe <HAL_GPIO_Init+0x21a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a4e      	ldr	r2, [pc, #312]	; (80040b0 <HAL_GPIO_Init+0x30c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <HAL_GPIO_Init+0x216>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4d      	ldr	r2, [pc, #308]	; (80040b4 <HAL_GPIO_Init+0x310>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_GPIO_Init+0x212>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4c      	ldr	r2, [pc, #304]	; (80040b8 <HAL_GPIO_Init+0x314>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0x20e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	; (80040bc <HAL_GPIO_Init+0x318>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_GPIO_Init+0x20a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4a      	ldr	r2, [pc, #296]	; (80040c0 <HAL_GPIO_Init+0x31c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x206>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a49      	ldr	r2, [pc, #292]	; (80040c4 <HAL_GPIO_Init+0x320>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_GPIO_Init+0x202>
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	e00c      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fa6:	2307      	movs	r3, #7
 8003fa8:	e00a      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003faa:	2305      	movs	r3, #5
 8003fac:	e008      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fae:	2304      	movs	r3, #4
 8003fb0:	e006      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e004      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_GPIO_Init+0x21c>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	f002 0203 	and.w	r2, r2, #3
 8003fc6:	0092      	lsls	r2, r2, #2
 8003fc8:	4093      	lsls	r3, r2
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd0:	4935      	ldr	r1, [pc, #212]	; (80040a8 <HAL_GPIO_Init+0x304>)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	089b      	lsrs	r3, r3, #2
 8003fd6:	3302      	adds	r3, #2
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fde:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004002:	4a31      	ldr	r2, [pc, #196]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_GPIO_Init+0x324>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800402c:	4a26      	ldr	r2, [pc, #152]	; (80040c8 <HAL_GPIO_Init+0x324>)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_GPIO_Init+0x324>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <HAL_GPIO_Init+0x324>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	3301      	adds	r3, #1
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	f67f ae96 	bls.w	8003dc0 <HAL_GPIO_Init+0x1c>
=======
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80ae 	beq.w	8005936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <HAL_GPIO_Init+0x300>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	4a5c      	ldr	r2, [pc, #368]	; (8005954 <HAL_GPIO_Init+0x300>)
 80057e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057e8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ea:	4b5a      	ldr	r3, [pc, #360]	; (8005954 <HAL_GPIO_Init+0x300>)
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057f6:	4a58      	ldr	r2, [pc, #352]	; (8005958 <HAL_GPIO_Init+0x304>)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	3302      	adds	r3, #2
 80057fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	220f      	movs	r2, #15
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a4f      	ldr	r2, [pc, #316]	; (800595c <HAL_GPIO_Init+0x308>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d025      	beq.n	800586e <HAL_GPIO_Init+0x21a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4e      	ldr	r2, [pc, #312]	; (8005960 <HAL_GPIO_Init+0x30c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01f      	beq.n	800586a <HAL_GPIO_Init+0x216>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a4d      	ldr	r2, [pc, #308]	; (8005964 <HAL_GPIO_Init+0x310>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d019      	beq.n	8005866 <HAL_GPIO_Init+0x212>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a4c      	ldr	r2, [pc, #304]	; (8005968 <HAL_GPIO_Init+0x314>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_GPIO_Init+0x20e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a4b      	ldr	r2, [pc, #300]	; (800596c <HAL_GPIO_Init+0x318>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00d      	beq.n	800585e <HAL_GPIO_Init+0x20a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a4a      	ldr	r2, [pc, #296]	; (8005970 <HAL_GPIO_Init+0x31c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <HAL_GPIO_Init+0x206>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a49      	ldr	r2, [pc, #292]	; (8005974 <HAL_GPIO_Init+0x320>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d101      	bne.n	8005856 <HAL_GPIO_Init+0x202>
 8005852:	2306      	movs	r3, #6
 8005854:	e00c      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 8005856:	2307      	movs	r3, #7
 8005858:	e00a      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 800585a:	2305      	movs	r3, #5
 800585c:	e008      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 800585e:	2304      	movs	r3, #4
 8005860:	e006      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 8005862:	2303      	movs	r3, #3
 8005864:	e004      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 8005866:	2302      	movs	r3, #2
 8005868:	e002      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_GPIO_Init+0x21c>
 800586e:	2300      	movs	r3, #0
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	f002 0203 	and.w	r2, r2, #3
 8005876:	0092      	lsls	r2, r2, #2
 8005878:	4093      	lsls	r3, r2
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005880:	4935      	ldr	r1, [pc, #212]	; (8005958 <HAL_GPIO_Init+0x304>)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	3302      	adds	r3, #2
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800588e:	4b3a      	ldr	r3, [pc, #232]	; (8005978 <HAL_GPIO_Init+0x324>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058b2:	4a31      	ldr	r2, [pc, #196]	; (8005978 <HAL_GPIO_Init+0x324>)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058b8:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <HAL_GPIO_Init+0x324>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058dc:	4a26      	ldr	r2, [pc, #152]	; (8005978 <HAL_GPIO_Init+0x324>)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058e2:	4b25      	ldr	r3, [pc, #148]	; (8005978 <HAL_GPIO_Init+0x324>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005906:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_GPIO_Init+0x324>)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <HAL_GPIO_Init+0x324>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005930:	4a11      	ldr	r2, [pc, #68]	; (8005978 <HAL_GPIO_Init+0x324>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b0f      	cmp	r3, #15
 8005940:	f67f ae96 	bls.w	8005670 <HAL_GPIO_Init+0x1c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
}
<<<<<<< HEAD
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3724      	adds	r7, #36	; 0x24
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40020000 	.word	0x40020000
 80040b0:	40020400 	.word	0x40020400
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40021400 	.word	0x40021400
 80040c4:	40021800 	.word	0x40021800
 80040c8:	40013c00 	.word	0x40013c00

080040cc <HAL_GPIO_WritePin>:
=======
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	3724      	adds	r7, #36	; 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
 8005958:	40013800 	.word	0x40013800
 800595c:	40020000 	.word	0x40020000
 8005960:	40020400 	.word	0x40020400
 8005964:	40020800 	.word	0x40020800
 8005968:	40020c00 	.word	0x40020c00
 800596c:	40021000 	.word	0x40021000
 8005970:	40021400 	.word	0x40021400
 8005974:	40021800 	.word	0x40021800
 8005978:	40013c00 	.word	0x40013c00

0800597c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	887b      	ldrh	r3, [r7, #2]
 800598e:	4013      	ands	r3, r2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
 8005998:	e001      	b.n	800599e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_GPIO_WritePin>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
 80040d8:	4613      	mov	r3, r2
 80040da:	707b      	strb	r3, [r7, #1]
=======
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	807b      	strh	r3, [r7, #2]
 80059b8:	4613      	mov	r3, r2
 80059ba:	707b      	strb	r3, [r7, #1]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80040dc:	787b      	ldrb	r3, [r7, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
=======
 80059bc:	787b      	ldrb	r3, [r7, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	619a      	str	r2, [r3, #24]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 80040e8:	e003      	b.n	80040f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	041a      	lsls	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	619a      	str	r2, [r3, #24]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_I2C_Init>:
=======
 80059c8:	e003      	b.n	80059d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059ca:	887b      	ldrh	r3, [r7, #2]
 80059cc:	041a      	lsls	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
	...

080059e0 <HAL_I2C_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
=======
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e12b      	b.n	800436a <HAL_I2C_Init+0x26a>
=======
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e12b      	b.n	8005c4a <HAL_I2C_Init+0x26a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fe fc4a 	bl	80029c0 <HAL_I2C_MspInit>
=======
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fe fc32 	bl	8004270 <HAL_I2C_MspInit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	; 0x24
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004164:	f001 f982 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8004168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4a81      	ldr	r2, [pc, #516]	; (8004374 <HAL_I2C_Init+0x274>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d807      	bhi.n	8004184 <HAL_I2C_Init+0x84>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a80      	ldr	r2, [pc, #512]	; (8004378 <HAL_I2C_Init+0x278>)
 8004178:	4293      	cmp	r3, r2
 800417a:	bf94      	ite	ls
 800417c:	2301      	movls	r3, #1
 800417e:	2300      	movhi	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e006      	b.n	8004192 <HAL_I2C_Init+0x92>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a7d      	ldr	r2, [pc, #500]	; (800437c <HAL_I2C_Init+0x27c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	bf94      	ite	ls
 800418c:	2301      	movls	r3, #1
 800418e:	2300      	movhi	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0e7      	b.n	800436a <HAL_I2C_Init+0x26a>
=======
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0201 	bic.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a44:	f001 f982 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 8005a48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4a81      	ldr	r2, [pc, #516]	; (8005c54 <HAL_I2C_Init+0x274>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d807      	bhi.n	8005a64 <HAL_I2C_Init+0x84>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4a80      	ldr	r2, [pc, #512]	; (8005c58 <HAL_I2C_Init+0x278>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bf94      	ite	ls
 8005a5c:	2301      	movls	r3, #1
 8005a5e:	2300      	movhi	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e006      	b.n	8005a72 <HAL_I2C_Init+0x92>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4a7d      	ldr	r2, [pc, #500]	; (8005c5c <HAL_I2C_Init+0x27c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	bf94      	ite	ls
 8005a6c:	2301      	movls	r3, #1
 8005a6e:	2300      	movhi	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0e7      	b.n	8005c4a <HAL_I2C_Init+0x26a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a78      	ldr	r2, [pc, #480]	; (8004380 <HAL_I2C_Init+0x280>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0c9b      	lsrs	r3, r3, #18
 80041a4:	60bb      	str	r3, [r7, #8]
=======
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a78      	ldr	r2, [pc, #480]	; (8005c60 <HAL_I2C_Init+0x280>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	0c9b      	lsrs	r3, r3, #18
 8005a84:	60bb      	str	r3, [r7, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
=======
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a6a      	ldr	r2, [pc, #424]	; (8004374 <HAL_I2C_Init+0x274>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d802      	bhi.n	80041d4 <HAL_I2C_Init+0xd4>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	3301      	adds	r3, #1
 80041d2:	e009      	b.n	80041e8 <HAL_I2C_Init+0xe8>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	4a69      	ldr	r2, [pc, #420]	; (8004384 <HAL_I2C_Init+0x284>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	099b      	lsrs	r3, r3, #6
 80041e6:	3301      	adds	r3, #1
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6213      	str	r3, [r2, #32]
=======
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a6a      	ldr	r2, [pc, #424]	; (8005c54 <HAL_I2C_Init+0x274>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d802      	bhi.n	8005ab4 <HAL_I2C_Init+0xd4>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	e009      	b.n	8005ac8 <HAL_I2C_Init+0xe8>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	4a69      	ldr	r2, [pc, #420]	; (8005c64 <HAL_I2C_Init+0x284>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	099b      	lsrs	r3, r3, #6
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6213      	str	r3, [r2, #32]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	495c      	ldr	r1, [pc, #368]	; (8004374 <HAL_I2C_Init+0x274>)
 8004204:	428b      	cmp	r3, r1
 8004206:	d819      	bhi.n	800423c <HAL_I2C_Init+0x13c>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1e59      	subs	r1, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fbb1 f3f3 	udiv	r3, r1, r3
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800421c:	400b      	ands	r3, r1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_I2C_Init+0x138>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1e59      	subs	r1, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004230:	3301      	adds	r3, #1
 8004232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004236:	e051      	b.n	80042dc <HAL_I2C_Init+0x1dc>
 8004238:	2304      	movs	r3, #4
 800423a:	e04f      	b.n	80042dc <HAL_I2C_Init+0x1dc>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d111      	bne.n	8004268 <HAL_I2C_Init+0x168>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e58      	subs	r0, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	440b      	add	r3, r1
 8004252:	fbb0 f3f3 	udiv	r3, r0, r3
 8004256:	3301      	adds	r3, #1
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e012      	b.n	800428e <HAL_I2C_Init+0x18e>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1e58      	subs	r0, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	0099      	lsls	r1, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	fbb0 f3f3 	udiv	r3, r0, r3
 800427e:	3301      	adds	r3, #1
 8004280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_I2C_Init+0x196>
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_I2C_Init+0x1dc>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10e      	bne.n	80042bc <HAL_I2C_Init+0x1bc>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1e58      	subs	r0, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	440b      	add	r3, r1
 80042ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ba:	e00f      	b.n	80042dc <HAL_I2C_Init+0x1dc>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1e58      	subs	r0, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	0099      	lsls	r1, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	6809      	ldr	r1, [r1, #0]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61cb      	str	r3, [r1, #28]
=======
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ada:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	495c      	ldr	r1, [pc, #368]	; (8005c54 <HAL_I2C_Init+0x274>)
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	d819      	bhi.n	8005b1c <HAL_I2C_Init+0x13c>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1e59      	subs	r1, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005afc:	400b      	ands	r3, r1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_I2C_Init+0x138>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1e59      	subs	r1, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b10:	3301      	adds	r3, #1
 8005b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b16:	e051      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	e04f      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d111      	bne.n	8005b48 <HAL_I2C_Init+0x168>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1e58      	subs	r0, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	440b      	add	r3, r1
 8005b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e012      	b.n	8005b6e <HAL_I2C_Init+0x18e>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1e58      	subs	r0, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6859      	ldr	r1, [r3, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	440b      	add	r3, r1
 8005b56:	0099      	lsls	r1, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Init+0x196>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e022      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10e      	bne.n	8005b9c <HAL_I2C_Init+0x1bc>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1e58      	subs	r0, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	440b      	add	r3, r1
 8005b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b90:	3301      	adds	r3, #1
 8005b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9a:	e00f      	b.n	8005bbc <HAL_I2C_Init+0x1dc>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1e58      	subs	r0, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	0099      	lsls	r1, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	6809      	ldr	r1, [r1, #0]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61cb      	str	r3, [r1, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]
=======
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800430a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6911      	ldr	r1, [r2, #16]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d2      	ldr	r2, [r2, #12]
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	430b      	orrs	r3, r1
 800431e:	6093      	str	r3, [r2, #8]
=======
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6911      	ldr	r1, [r2, #16]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68d2      	ldr	r2, [r2, #12]
 8005bf6:	4311      	orrs	r1, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6093      	str	r3, [r2, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	000186a0 	.word	0x000186a0
 8004378:	001e847f 	.word	0x001e847f
 800437c:	003d08ff 	.word	0x003d08ff
 8004380:	431bde83 	.word	0x431bde83
 8004384:	10624dd3 	.word	0x10624dd3

08004388 <HAL_I2C_Master_Transmit>:
=======
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695a      	ldr	r2, [r3, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	000186a0 	.word	0x000186a0
 8005c58:	001e847f 	.word	0x001e847f
 8005c5c:	003d08ff 	.word	0x003d08ff
 8005c60:	431bde83 	.word	0x431bde83
 8005c64:	10624dd3 	.word	0x10624dd3

08005c68 <HAL_I2C_Master_Transmit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7ff f850 	bl	8003440 <HAL_GetTick>
 80043a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	f040 80e0 	bne.w	8004570 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2319      	movs	r3, #25
 80043b6:	2201      	movs	r2, #1
 80043b8:	4970      	ldr	r1, [pc, #448]	; (800457c <HAL_I2C_Master_Transmit+0x1f4>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fd86 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
 80043c8:	e0d3      	b.n	8004572 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	461a      	mov	r2, r3
 8005c74:	460b      	mov	r3, r1
 8005c76:	817b      	strh	r3, [r7, #10]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c7c:	f7ff f838 	bl	8004cf0 <HAL_GetTick>
 8005c80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	f040 80e0 	bne.w	8005e50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	2319      	movs	r3, #25
 8005c96:	2201      	movs	r2, #1
 8005c98:	4970      	ldr	r1, [pc, #448]	; (8005e5c <HAL_I2C_Master_Transmit+0x1f4>)
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fd86 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e0d3      	b.n	8005e52 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_I2C_Master_Transmit+0x50>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0cc      	b.n	8004572 <HAL_I2C_Master_Transmit+0x1ea>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d007      	beq.n	80043fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
=======
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_I2C_Master_Transmit+0x50>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e0cc      	b.n	8005e52 <HAL_I2C_Master_Transmit+0x1ea>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d007      	beq.n	8005cde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800440c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2221      	movs	r2, #33	; 0x21
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2210      	movs	r2, #16
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	893a      	ldrh	r2, [r7, #8]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a50      	ldr	r2, [pc, #320]	; (8004580 <HAL_I2C_Master_Transmit+0x1f8>)
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004440:	8979      	ldrh	r1, [r7, #10]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fbf0 	bl	8004c2c <I2C_MasterRequestWrite>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e08d      	b.n	8004572 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2221      	movs	r2, #33	; 0x21
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	893a      	ldrh	r2, [r7, #8]
 8005d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4a50      	ldr	r2, [pc, #320]	; (8005e60 <HAL_I2C_Master_Transmit+0x1f8>)
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d20:	8979      	ldrh	r1, [r7, #10]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	6a3a      	ldr	r2, [r7, #32]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fbf0 	bl	800650c <I2C_MasterRequestWrite>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e08d      	b.n	8005e52 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800446c:	e066      	b.n	800453c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	6a39      	ldr	r1, [r7, #32]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fe00 	bl	8005078 <I2C_WaitOnTXEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b04      	cmp	r3, #4
 8004484:	d107      	bne.n	8004496 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e06b      	b.n	8004572 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d4c:	e066      	b.n	8005e1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	6a39      	ldr	r1, [r7, #32]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fe00 	bl	8006958 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d107      	bne.n	8005d76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e06b      	b.n	8005e52 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	781a      	ldrb	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d11b      	bne.n	8004510 <HAL_I2C_Master_Transmit+0x188>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d017      	beq.n	8004510 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	; 0x28
=======
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	781a      	ldrb	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_I2C_Master_Transmit+0x188>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d017      	beq.n	8005df0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	781a      	ldrb	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	6a39      	ldr	r1, [r7, #32]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fdf0 	bl	80050fa <I2C_WaitOnBTFFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00d      	beq.n	800453c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b04      	cmp	r3, #4
 8004526:	d107      	bne.n	8004538 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004536:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e01a      	b.n	8004572 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	2b00      	cmp	r3, #0
 8004542:	d194      	bne.n	800446e <HAL_I2C_Master_Transmit+0xe6>
=======
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	6a39      	ldr	r1, [r7, #32]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fdf0 	bl	80069da <I2C_WaitOnBTFFlagUntilTimeout>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00d      	beq.n	8005e1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d107      	bne.n	8005e18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e01a      	b.n	8005e52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d194      	bne.n	8005d4e <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2220      	movs	r2, #32
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e000      	b.n	8005e52 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	00100002 	.word	0x00100002
 8004580:	ffff0000 	.word	0xffff0000

08004584 <HAL_I2C_Master_Receive>:
=======
 8005e50:	2302      	movs	r3, #2
  }
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	00100002 	.word	0x00100002
 8005e60:	ffff0000 	.word	0xffff0000

08005e64 <HAL_I2C_Master_Receive>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004584:	b580      	push	{r7, lr}
 8004586:	b08c      	sub	sp, #48	; 0x30
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	461a      	mov	r2, r3
 8004590:	460b      	mov	r3, r1
 8004592:	817b      	strh	r3, [r7, #10]
 8004594:	4613      	mov	r3, r2
 8004596:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004598:	f7fe ff52 	bl	8003440 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	f040 820b 	bne.w	80049c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2319      	movs	r3, #25
 80045b2:	2201      	movs	r2, #1
 80045b4:	497c      	ldr	r1, [pc, #496]	; (80047a8 <HAL_I2C_Master_Receive+0x224>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fc88 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	e1fe      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
=======
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	460b      	mov	r3, r1
 8005e72:	817b      	strh	r3, [r7, #10]
 8005e74:	4613      	mov	r3, r2
 8005e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e78:	f7fe ff3a 	bl	8004cf0 <HAL_GetTick>
 8005e7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	f040 820b 	bne.w	80062a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2319      	movs	r3, #25
 8005e92:	2201      	movs	r2, #1
 8005e94:	497c      	ldr	r1, [pc, #496]	; (8006088 <HAL_I2C_Master_Receive+0x224>)
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fc88 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e1fe      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_I2C_Master_Receive+0x50>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e1f7      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d007      	beq.n	80045fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
=======
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_I2C_Master_Receive+0x50>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e1f7      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d007      	beq.n	8005eda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004608:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2222      	movs	r2, #34	; 0x22
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2210      	movs	r2, #16
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	893a      	ldrh	r2, [r7, #8]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a5c      	ldr	r2, [pc, #368]	; (80047ac <HAL_I2C_Master_Receive+0x228>)
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800463c:	8979      	ldrh	r1, [r7, #10]
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fb74 	bl	8004d30 <I2C_MasterRequestRead>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1b8      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	623b      	str	r3, [r7, #32]
 800466e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e18c      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	2b01      	cmp	r3, #1
 8004688:	d11b      	bne.n	80046c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e16c      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d11b      	bne.n	8004702 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	e14c      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
=======
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2222      	movs	r2, #34	; 0x22
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2210      	movs	r2, #16
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	893a      	ldrh	r2, [r7, #8]
 8005f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a5c      	ldr	r2, [pc, #368]	; (800608c <HAL_I2C_Master_Receive+0x228>)
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f1c:	8979      	ldrh	r1, [r7, #10]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fb74 	bl	8006610 <I2C_MasterRequestRead>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e1b8      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d113      	bne.n	8005f62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e18c      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d11b      	bne.n	8005fa2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e16c      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	e14c      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004728:	e138      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	2b03      	cmp	r3, #3
 8004730:	f200 80f1 	bhi.w	8004916 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	2b01      	cmp	r3, #1
 800473a:	d123      	bne.n	8004784 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fd1b 	bl	800517c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e139      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
=======
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006008:	e138      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	2b03      	cmp	r3, #3
 8006010:	f200 80f1 	bhi.w	80061f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006018:	2b01      	cmp	r3, #1
 800601a:	d123      	bne.n	8006064 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800601c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fd1b 	bl	8006a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e139      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004782:	e10b      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004788:	2b02      	cmp	r3, #2
 800478a:	d14e      	bne.n	800482a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	2200      	movs	r2, #0
 8004794:	4906      	ldr	r1, [pc, #24]	; (80047b0 <HAL_I2C_Master_Receive+0x22c>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fb98 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e10e      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
 80047a6:	bf00      	nop
 80047a8:	00100002 	.word	0x00100002
 80047ac:	ffff0000 	.word	0xffff0000
 80047b0:	00010004 	.word	0x00010004
=======
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691a      	ldr	r2, [r3, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006062:	e10b      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	2b02      	cmp	r3, #2
 800606a:	d14e      	bne.n	800610a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	4906      	ldr	r1, [pc, #24]	; (8006090 <HAL_I2C_Master_Receive+0x22c>)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fb98 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e10e      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
 8006086:	bf00      	nop
 8006088:	00100002 	.word	0x00100002
 800608c:	ffff0000 	.word	0xffff0000
 8006090:	00010004 	.word	0x00010004
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004828:	e0b8      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
=======
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006108:	e0b8      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2200      	movs	r2, #0
 8004832:	4966      	ldr	r1, [pc, #408]	; (80049cc <HAL_I2C_Master_Receive+0x448>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fb49 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0bf      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
=======
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	2200      	movs	r2, #0
 8006112:	4966      	ldr	r1, [pc, #408]	; (80062ac <HAL_I2C_Master_Receive+0x448>)
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fb49 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0bf      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	2200      	movs	r2, #0
 800488e:	494f      	ldr	r1, [pc, #316]	; (80049cc <HAL_I2C_Master_Receive+0x448>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fb1b 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e091      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
=======
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616c:	2200      	movs	r2, #0
 800616e:	494f      	ldr	r1, [pc, #316]	; (80062ac <HAL_I2C_Master_Receive+0x448>)
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fb1b 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e091      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004914:	e042      	b.n	800499c <HAL_I2C_Master_Receive+0x418>
=======
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061f4:	e042      	b.n	800627c <HAL_I2C_Master_Receive+0x418>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fc2e 	bl	800517c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e04c      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
=======
 80061f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fc2e 	bl	8006a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e04c      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d118      	bne.n	800499c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f47f aec2 	bne.w	800472a <HAL_I2C_Master_Receive+0x1a6>
=======
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d118      	bne.n	800627c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f aec2 	bne.w	800600a <HAL_I2C_Master_Receive+0x1a6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e000      	b.n	80049c4 <HAL_I2C_Master_Receive+0x440>
=======
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_I2C_Master_Receive+0x440>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80049c2:	2302      	movs	r3, #2
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	00010004 	.word	0x00010004

080049d0 <HAL_I2C_IsDeviceReady>:
=======
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3728      	adds	r7, #40	; 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	00010004 	.word	0x00010004

080062b0 <HAL_I2C_IsDeviceReady>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
<<<<<<< HEAD
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	460b      	mov	r3, r1
 80049de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80049e0:	f7fe fd2e 	bl	8003440 <HAL_GetTick>
 80049e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
=======
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	460b      	mov	r3, r1
 80062be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80062c0:	f7fe fd16 	bl	8004cf0 <HAL_GetTick>
 80062c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	f040 8111 	bne.w	8004c1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2319      	movs	r3, #25
 80049fe:	2201      	movs	r2, #1
 8004a00:	4988      	ldr	r1, [pc, #544]	; (8004c24 <HAL_I2C_IsDeviceReady+0x254>)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fa62 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e104      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
=======
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	f040 8111 	bne.w	80064fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	2319      	movs	r3, #25
 80062de:	2201      	movs	r2, #1
 80062e0:	4988      	ldr	r1, [pc, #544]	; (8006504 <HAL_I2C_IsDeviceReady+0x254>)
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fa62 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
 80062f0:	e104      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_I2C_IsDeviceReady+0x50>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e0fd      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d007      	beq.n	8004a46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
=======
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_I2C_IsDeviceReady+0x50>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e0fd      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d007      	beq.n	8006326 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2224      	movs	r2, #36	; 0x24
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a70      	ldr	r2, [pc, #448]	; (8004c28 <HAL_I2C_IsDeviceReady+0x258>)
 8004a68:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006334:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a70      	ldr	r2, [pc, #448]	; (8006508 <HAL_I2C_IsDeviceReady+0x258>)
 8006348:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa20 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa0:	d103      	bne.n	8004aaa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0b6      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
=======
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006358:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2200      	movs	r2, #0
 8006362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fa20 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006380:	d103      	bne.n	800638a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e0b6      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8004aae:	897b      	ldrh	r3, [r7, #10]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004abc:	611a      	str	r2, [r3, #16]
=======
 800638e:	897b      	ldrh	r3, [r7, #10]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800639c:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004abe:	f7fe fcbf 	bl	8003440 <HAL_GetTick>
 8004ac2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004af2:	e025      	b.n	8004b40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004af4:	f7fe fca4 	bl	8003440 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <HAL_I2C_IsDeviceReady+0x13a>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d103      	bne.n	8004b12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22a0      	movs	r2, #160	; 0xa0
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2ba0      	cmp	r3, #160	; 0xa0
 8004b4a:	d005      	beq.n	8004b58 <HAL_I2C_IsDeviceReady+0x188>
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_I2C_IsDeviceReady+0x188>
 8004b52:	7dbb      	ldrb	r3, [r7, #22]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0cd      	beq.n	8004af4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d129      	bne.n	8004bc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2319      	movs	r3, #25
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4921      	ldr	r1, [pc, #132]	; (8004c24 <HAL_I2C_IsDeviceReady+0x254>)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f994 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e036      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e02c      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
=======
 800639e:	f7fe fca7 	bl	8004cf0 <HAL_GetTick>
 80063a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c8:	bf0c      	ite	eq
 80063ca:	2301      	moveq	r3, #1
 80063cc:	2300      	movne	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80063d2:	e025      	b.n	8006420 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063d4:	f7fe fc8c 	bl	8004cf0 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <HAL_I2C_IsDeviceReady+0x13a>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	22a0      	movs	r2, #160	; 0xa0
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2ba0      	cmp	r3, #160	; 0xa0
 800642a:	d005      	beq.n	8006438 <HAL_I2C_IsDeviceReady+0x188>
 800642c:	7dfb      	ldrb	r3, [r7, #23]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <HAL_I2C_IsDeviceReady+0x188>
 8006432:	7dbb      	ldrb	r3, [r7, #22]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0cd      	beq.n	80063d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d129      	bne.n	80064a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	2319      	movs	r3, #25
 800647a:	2201      	movs	r2, #1
 800647c:	4921      	ldr	r1, [pc, #132]	; (8006504 <HAL_I2C_IsDeviceReady+0x254>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f994 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e036      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e02c      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2319      	movs	r3, #25
 8004be2:	2201      	movs	r2, #1
 8004be4:	490f      	ldr	r1, [pc, #60]	; (8004c24 <HAL_I2C_IsDeviceReady+0x254>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f970 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e012      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
=======
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2319      	movs	r3, #25
 80064c2:	2201      	movs	r2, #1
 80064c4:	490f      	ldr	r1, [pc, #60]	; (8006504 <HAL_I2C_IsDeviceReady+0x254>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f970 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e012      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }

      /* Increment Trials */
      I2C_Trials++;
<<<<<<< HEAD
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	f4ff af32 	bcc.w	8004a6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x24c>
=======
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	3301      	adds	r3, #1
 80064da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f4ff af32 	bcc.w	800634a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <HAL_I2C_IsDeviceReady+0x24c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	00100002 	.word	0x00100002
 8004c28:	ffff0000 	.word	0xffff0000

08004c2c <I2C_MasterRequestWrite>:
=======
 80064fa:	2302      	movs	r3, #2
  }
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	00100002 	.word	0x00100002
 8006508:	ffff0000 	.word	0xffff0000

0800650c <I2C_MasterRequestWrite>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d006      	beq.n	8004c56 <I2C_MasterRequestWrite+0x2a>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d003      	beq.n	8004c56 <I2C_MasterRequestWrite+0x2a>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c54:	d108      	bne.n	8004c68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e00b      	b.n	8004c80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	2b12      	cmp	r3, #18
 8004c6e:	d107      	bne.n	8004c80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7e:	601a      	str	r2, [r3, #0]
=======
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	460b      	mov	r3, r1
 800651a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b08      	cmp	r3, #8
 8006526:	d006      	beq.n	8006536 <I2C_MasterRequestWrite+0x2a>
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d003      	beq.n	8006536 <I2C_MasterRequestWrite+0x2a>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006534:	d108      	bne.n	8006548 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e00b      	b.n	8006560 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b12      	cmp	r3, #18
 800654e:	d107      	bne.n	8006560 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655e:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f91d 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca6:	d103      	bne.n	8004cb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e035      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cbc:	d108      	bne.n	8004cd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cbe:	897b      	ldrh	r3, [r7, #10]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ccc:	611a      	str	r2, [r3, #16]
 8004cce:	e01b      	b.n	8004d08 <I2C_MasterRequestWrite+0xdc>
=======
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f91d 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006586:	d103      	bne.n	8006590 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e035      	b.n	8006600 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800659c:	d108      	bne.n	80065b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800659e:	897b      	ldrh	r3, [r7, #10]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065ac:	611a      	str	r2, [r3, #16]
 80065ae:	e01b      	b.n	80065e8 <I2C_MasterRequestWrite+0xdc>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 8004cd0:	897b      	ldrh	r3, [r7, #10]
 8004cd2:	11db      	asrs	r3, r3, #7
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f003 0306 	and.w	r3, r3, #6
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f063 030f 	orn	r3, r3, #15
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	490e      	ldr	r1, [pc, #56]	; (8004d28 <I2C_MasterRequestWrite+0xfc>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f943 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e010      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
=======
 80065b0:	897b      	ldrh	r3, [r7, #10]
 80065b2:	11db      	asrs	r3, r3, #7
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f003 0306 	and.w	r3, r3, #6
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f063 030f 	orn	r3, r3, #15
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	490e      	ldr	r1, [pc, #56]	; (8006608 <I2C_MasterRequestWrite+0xfc>)
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f943 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e010      	b.n	8006600 <I2C_MasterRequestWrite+0xf4>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
=======
 80065de:	897b      	ldrh	r3, [r7, #10]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4907      	ldr	r1, [pc, #28]	; (8004d2c <I2C_MasterRequestWrite+0x100>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f933 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	00010008 	.word	0x00010008
 8004d2c:	00010002 	.word	0x00010002

08004d30 <I2C_MasterRequestRead>:
=======
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4907      	ldr	r1, [pc, #28]	; (800660c <I2C_MasterRequestWrite+0x100>)
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f933 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	00010008 	.word	0x00010008
 800660c:	00010002 	.word	0x00010002

08006610 <I2C_MasterRequestRead>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d006      	beq.n	8004d6a <I2C_MasterRequestRead+0x3a>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d003      	beq.n	8004d6a <I2C_MasterRequestRead+0x3a>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d68:	d108      	bne.n	8004d7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e00b      	b.n	8004d94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	2b11      	cmp	r3, #17
 8004d82:	d107      	bne.n	8004d94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d92:	601a      	str	r2, [r3, #0]
=======
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	460b      	mov	r3, r1
 800661e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006634:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d006      	beq.n	800664a <I2C_MasterRequestRead+0x3a>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d003      	beq.n	800664a <I2C_MasterRequestRead+0x3a>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006648:	d108      	bne.n	800665c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	e00b      	b.n	8006674 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	2b11      	cmp	r3, #17
 8006662:	d107      	bne.n	8006674 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006672:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f893 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00d      	beq.n	8004dc8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dba:	d103      	bne.n	8004dc4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e079      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd0:	d108      	bne.n	8004de4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]
 8004de2:	e05f      	b.n	8004ea4 <I2C_MasterRequestRead+0x174>
=======
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f893 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d103      	bne.n	80066a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e079      	b.n	800679c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066b0:	d108      	bne.n	80066c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066b2:	897b      	ldrh	r3, [r7, #10]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	611a      	str	r2, [r3, #16]
 80066c2:	e05f      	b.n	8006784 <I2C_MasterRequestRead+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 8004de4:	897b      	ldrh	r3, [r7, #10]
 8004de6:	11db      	asrs	r3, r3, #7
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0306 	and.w	r3, r3, #6
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f063 030f 	orn	r3, r3, #15
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4930      	ldr	r1, [pc, #192]	; (8004ec4 <I2C_MasterRequestRead+0x194>)
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f8b9 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e054      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
=======
 80066c4:	897b      	ldrh	r3, [r7, #10]
 80066c6:	11db      	asrs	r3, r3, #7
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0306 	and.w	r3, r3, #6
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f063 030f 	orn	r3, r3, #15
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4930      	ldr	r1, [pc, #192]	; (80067a4 <I2C_MasterRequestRead+0x194>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f8b9 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e054      	b.n	800679c <I2C_MasterRequestRead+0x18c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 8004e12:	897b      	ldrh	r3, [r7, #10]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4929      	ldr	r1, [pc, #164]	; (8004ec8 <I2C_MasterRequestRead+0x198>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f8a9 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e044      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
=======
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4929      	ldr	r1, [pc, #164]	; (80067a8 <I2C_MasterRequestRead+0x198>)
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f8a9 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e044      	b.n	800679c <I2C_MasterRequestRead+0x18c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f831 	bl	8004ecc <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7e:	d103      	bne.n	8004e88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e017      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
=======
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	613b      	str	r3, [r7, #16]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006736:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f831 	bl	80067ac <I2C_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800675e:	d103      	bne.n	8006768 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006766:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e017      	b.n	800679c <I2C_MasterRequestRead+0x18c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
<<<<<<< HEAD
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	11db      	asrs	r3, r3, #7
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0306 	and.w	r3, r3, #6
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f063 030e 	orn	r3, r3, #14
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]
=======
 800676c:	897b      	ldrh	r3, [r7, #10]
 800676e:	11db      	asrs	r3, r3, #7
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f063 030e 	orn	r3, r3, #14
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4907      	ldr	r1, [pc, #28]	; (8004ec8 <I2C_MasterRequestRead+0x198>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f865 	bl	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	00010008 	.word	0x00010008
 8004ec8:	00010002 	.word	0x00010002

08004ecc <I2C_WaitOnFlagUntilTimeout>:
=======
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4907      	ldr	r1, [pc, #28]	; (80067a8 <I2C_MasterRequestRead+0x198>)
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f865 	bl	800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	00010008 	.word	0x00010008
 80067a8:	00010002 	.word	0x00010002

080067ac <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004edc:	e025      	b.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d021      	beq.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fe faab 	bl	8003440 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e023      	b.n	8004f72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d10d      	bne.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	e00c      	b.n	8004f6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	43da      	mvns	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d0b6      	beq.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067bc:	e025      	b.n	800680a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d021      	beq.n	800680a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c6:	f7fe fa93 	bl	8004cf0 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d302      	bcc.n	80067dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d116      	bne.n	800680a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f043 0220 	orr.w	r2, r3, #32
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e023      	b.n	8006852 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d10d      	bne.n	8006830 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	43da      	mvns	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	e00c      	b.n	800684a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf0c      	ite	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	2300      	movne	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	429a      	cmp	r2, r3
 800684e:	d0b6      	beq.n	80067be <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f88:	e051      	b.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d123      	bne.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0204 	orr.w	r2, r3, #4
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e046      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006868:	e051      	b.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006878:	d123      	bne.n	80068c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006888:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006892:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e046      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d021      	beq.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7fe fa29 	bl	8003440 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e020      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d10c      	bne.n	8005052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e00b      	b.n	800506a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	43da      	mvns	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	4013      	ands	r3, r2
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d18d      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d021      	beq.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fe fa11 	bl	8004cf0 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e020      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10c      	bne.n	8006932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	43da      	mvns	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4013      	ands	r3, r2
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf14      	ite	ne
 800692a:	2301      	movne	r3, #1
 800692c:	2300      	moveq	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e00b      	b.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	43da      	mvns	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf14      	ite	ne
 8006944:	2301      	movne	r3, #1
 8006946:	2300      	moveq	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d18d      	bne.n	800686a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005084:	e02d      	b.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f8ce 	bl	8005228 <I2C_IsAcknowledgeFailed>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e02d      	b.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
=======
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006964:	e02d      	b.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f8ce 	bl	8006b08 <I2C_IsAcknowledgeFailed>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e02d      	b.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d021      	beq.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fe f9cf 	bl	8003440 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e007      	b.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d1ca      	bne.n	8005086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d021      	beq.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fe f9b7 	bl	8004cf0 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d116      	bne.n	80069c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f043 0220 	orr.w	r2, r3, #32
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e007      	b.n	80069d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d1ca      	bne.n	8006966 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005106:	e02d      	b.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f88d 	bl	8005228 <I2C_IsAcknowledgeFailed>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e02d      	b.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
=======
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069e6:	e02d      	b.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f88d 	bl	8006b08 <I2C_IsAcknowledgeFailed>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e02d      	b.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d021      	beq.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005120:	f7fe f98e 	bl	8003440 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d116      	bne.n	8005164 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e007      	b.n	8005174 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d1ca      	bne.n	8005108 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d021      	beq.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a00:	f7fe f976 	bl	8004cf0 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e007      	b.n	8006a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d1ca      	bne.n	80069e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005188:	e042      	b.n	8005210 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b10      	cmp	r3, #16
 8005196:	d119      	bne.n	80051cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0210 	mvn.w	r2, #16
 80051a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e029      	b.n	8005220 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
=======
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a68:	e042      	b.n	8006af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d119      	bne.n	8006aac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0210 	mvn.w	r2, #16
 8006a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e029      	b.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 80051cc:	f7fe f938 	bl	8003440 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d116      	bne.n	8005210 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f043 0220 	orr.w	r2, r3, #32
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e007      	b.n	8005220 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d1b5      	bne.n	800518a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_IsAcknowledgeFailed>:
=======
 8006aac:	f7fe f920 	bl	8004cf0 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d302      	bcc.n	8006ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d116      	bne.n	8006af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	f043 0220 	orr.w	r2, r3, #32
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e007      	b.n	8006b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	d1b5      	bne.n	8006a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <I2C_IsAcknowledgeFailed>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d11b      	bne.n	8005278 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005248:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_RCC_ClockConfig>:
=======
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1e:	d11b      	bne.n	8006b58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f043 0204 	orr.w	r2, r3, #4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_RCC_ClockConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
=======
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0cc      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0cc      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800529c:	4b68      	ldr	r3, [pc, #416]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90c      	bls.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
=======
 8006b7c:	4b68      	ldr	r3, [pc, #416]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d90c      	bls.n	8006ba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b65      	ldr	r3, [pc, #404]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80052b2:	4b63      	ldr	r3, [pc, #396]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0b8      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006b92:	4b63      	ldr	r3, [pc, #396]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0b8      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_ClockConfig+0x8a>
=======
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d020      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052dc:	4b59      	ldr	r3, [pc, #356]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a58      	ldr	r2, [pc, #352]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4a52      	ldr	r2, [pc, #328]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052fe:	6093      	str	r3, [r2, #8]
=======
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bbc:	4b59      	ldr	r3, [pc, #356]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4a58      	ldr	r2, [pc, #352]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bd4:	4b53      	ldr	r3, [pc, #332]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bde:	6093      	str	r3, [r2, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8005300:	4b50      	ldr	r3, [pc, #320]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	494d      	ldr	r1, [pc, #308]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	608b      	str	r3, [r1, #8]
=======
 8006be0:	4b50      	ldr	r3, [pc, #320]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	494d      	ldr	r1, [pc, #308]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d044      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x120>
=======
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d044      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x120>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c06:	4b47      	ldr	r3, [pc, #284]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d119      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e07f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d003      	beq.n	8005346 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005342:	2b03      	cmp	r3, #3
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e06f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d003      	beq.n	8006c26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d107      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c26:	4b3f      	ldr	r3, [pc, #252]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e06f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8005356:	4b3b      	ldr	r3, [pc, #236]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e067      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006c36:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e067      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4934      	ldr	r1, [pc, #208]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005378:	f7fe f862 	bl	8003440 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fe f85e 	bl	8003440 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e04f      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0xf8>
=======
 8006c46:	4b37      	ldr	r3, [pc, #220]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f023 0203 	bic.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	4934      	ldr	r1, [pc, #208]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c58:	f7fe f84a 	bl	8004cf0 <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fe f846 	bl	8004cf0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e04f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c76:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 020c 	and.w	r2, r3, #12
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1eb      	bne.n	8006c60 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80053a8:	4b25      	ldr	r3, [pc, #148]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20c      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
=======
 8006c88:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d20c      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b22      	ldr	r3, [pc, #136]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e032      	b.n	8005436 <HAL_RCC_ClockConfig+0x1ae>
=======
 8006c9e:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e032      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053dc:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4916      	ldr	r1, [pc, #88]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
=======
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cbc:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4916      	ldr	r1, [pc, #88]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	490e      	ldr	r1, [pc, #56]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
=======
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	490e      	ldr	r1, [pc, #56]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800540e:	f000 f855 	bl	80054bc <HAL_RCC_GetSysClockFreq>
 8005412:	4602      	mov	r2, r0
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	490a      	ldr	r1, [pc, #40]	; (8005448 <HAL_RCC_ClockConfig+0x1c0>)
 8005420:	5ccb      	ldrb	r3, [r1, r3]
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	4a09      	ldr	r2, [pc, #36]	; (800544c <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800542a:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd ffc2 	bl	80033b8 <HAL_InitTick>

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00
 8005444:	40023800 	.word	0x40023800
 8005448:	08008b28 	.word	0x08008b28
 800544c:	20000004 	.word	0x20000004
 8005450:	20000008 	.word	0x20000008

08005454 <HAL_RCC_GetHCLKFreq>:
=======
 8006cee:	f000 f855 	bl	8006d9c <HAL_RCC_GetSysClockFreq>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	490a      	ldr	r1, [pc, #40]	; (8006d28 <HAL_RCC_ClockConfig+0x1c0>)
 8006d00:	5ccb      	ldrb	r3, [r1, r3]
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	4a09      	ldr	r2, [pc, #36]	; (8006d2c <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <HAL_RCC_ClockConfig+0x1c8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fd ffaa 	bl	8004c68 <HAL_InitTick>

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40023c00 	.word	0x40023c00
 8006d24:	40023800 	.word	0x40023800
 8006d28:	0800aea0 	.word	0x0800aea0
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	20000010 	.word	0x20000010

08006d34 <HAL_RCC_GetHCLKFreq>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_RCC_GetHCLKFreq+0x14>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000004 	.word	0x20000004

0800546c <HAL_RCC_GetPCLK1Freq>:
=======
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000000c 	.word	0x2000000c

08006d4c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005470:	f7ff fff0 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0a9b      	lsrs	r3, r3, #10
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40023800 	.word	0x40023800
 8005490:	08008b38 	.word	0x08008b38

08005494 <HAL_RCC_GetPCLK2Freq>:
=======
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d50:	f7ff fff0 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d54:	4602      	mov	r2, r0
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	0a9b      	lsrs	r3, r3, #10
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d62:	5ccb      	ldrb	r3, [r1, r3]
 8006d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	0800aeb0 	.word	0x0800aeb0

08006d74 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005498:	f7ff ffdc 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	0b5b      	lsrs	r3, r3, #13
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4903      	ldr	r1, [pc, #12]	; (80054b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40023800 	.word	0x40023800
 80054b8:	08008b38 	.word	0x08008b38

080054bc <HAL_RCC_GetSysClockFreq>:
=======
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d78:	f7ff ffdc 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	0b5b      	lsrs	r3, r3, #13
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	4903      	ldr	r1, [pc, #12]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d8a:	5ccb      	ldrb	r3, [r1, r3]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40023800 	.word	0x40023800
 8006d98:	0800aeb0 	.word	0x0800aeb0

08006d9c <HAL_RCC_GetSysClockFreq>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80054bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c0:	b0ae      	sub	sp, #184	; 0xb8
 80054c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e2:	4bcb      	ldr	r3, [pc, #812]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	f200 8204 	bhi.w	80058f8 <HAL_RCC_GetSysClockFreq+0x43c>
 80054f0:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	080058f9 	.word	0x080058f9
 8005500:	080058f9 	.word	0x080058f9
 8005504:	080058f9 	.word	0x080058f9
 8005508:	08005535 	.word	0x08005535
 800550c:	080058f9 	.word	0x080058f9
 8005510:	080058f9 	.word	0x080058f9
 8005514:	080058f9 	.word	0x080058f9
 8005518:	0800553d 	.word	0x0800553d
 800551c:	080058f9 	.word	0x080058f9
 8005520:	080058f9 	.word	0x080058f9
 8005524:	080058f9 	.word	0x080058f9
 8005528:	0800572d 	.word	0x0800572d
=======
 8006d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da0:	b0ae      	sub	sp, #184	; 0xb8
 8006da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dc2:	4bcb      	ldr	r3, [pc, #812]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	f200 8204 	bhi.w	80071d8 <HAL_RCC_GetSysClockFreq+0x43c>
 8006dd0:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd6:	bf00      	nop
 8006dd8:	08006e0d 	.word	0x08006e0d
 8006ddc:	080071d9 	.word	0x080071d9
 8006de0:	080071d9 	.word	0x080071d9
 8006de4:	080071d9 	.word	0x080071d9
 8006de8:	08006e15 	.word	0x08006e15
 8006dec:	080071d9 	.word	0x080071d9
 8006df0:	080071d9 	.word	0x080071d9
 8006df4:	080071d9 	.word	0x080071d9
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	080071d9 	.word	0x080071d9
 8006e00:	080071d9 	.word	0x080071d9
 8006e04:	080071d9 	.word	0x080071d9
 8006e08:	0800700d 	.word	0x0800700d
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800552c:	4bb9      	ldr	r3, [pc, #740]	; (8005814 <HAL_RCC_GetSysClockFreq+0x358>)
 800552e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005532:	e1e5      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x444>
=======
 8006e0c:	4bb9      	ldr	r3, [pc, #740]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006e12:	e1e5      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x444>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8005534:	4bb7      	ldr	r3, [pc, #732]	; (8005814 <HAL_RCC_GetSysClockFreq+0x358>)
 8005536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800553a:	e1e1      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x444>
=======
 8006e14:	4bb7      	ldr	r3, [pc, #732]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006e1a:	e1e1      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x444>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800553c:	4bb4      	ldr	r3, [pc, #720]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005548:	4bb1      	ldr	r3, [pc, #708]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d071      	beq.n	8005638 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005554:	4bae      	ldr	r3, [pc, #696]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	2200      	movs	r2, #0
 800555c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005560:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005570:	2300      	movs	r3, #0
 8005572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800557a:	4622      	mov	r2, r4
 800557c:	462b      	mov	r3, r5
 800557e:	f04f 0000 	mov.w	r0, #0
 8005582:	f04f 0100 	mov.w	r1, #0
 8005586:	0159      	lsls	r1, r3, #5
 8005588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800558c:	0150      	lsls	r0, r2, #5
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4621      	mov	r1, r4
 8005594:	1a51      	subs	r1, r2, r1
 8005596:	6439      	str	r1, [r7, #64]	; 0x40
 8005598:	4629      	mov	r1, r5
 800559a:	eb63 0301 	sbc.w	r3, r3, r1
 800559e:	647b      	str	r3, [r7, #68]	; 0x44
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80055ac:	4649      	mov	r1, r9
 80055ae:	018b      	lsls	r3, r1, #6
 80055b0:	4641      	mov	r1, r8
 80055b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055b6:	4641      	mov	r1, r8
 80055b8:	018a      	lsls	r2, r1, #6
 80055ba:	4641      	mov	r1, r8
 80055bc:	1a51      	subs	r1, r2, r1
 80055be:	63b9      	str	r1, [r7, #56]	; 0x38
 80055c0:	4649      	mov	r1, r9
 80055c2:	eb63 0301 	sbc.w	r3, r3, r1
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80055d4:	4649      	mov	r1, r9
 80055d6:	00cb      	lsls	r3, r1, #3
 80055d8:	4641      	mov	r1, r8
 80055da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055de:	4641      	mov	r1, r8
 80055e0:	00ca      	lsls	r2, r1, #3
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	4622      	mov	r2, r4
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	633b      	str	r3, [r7, #48]	; 0x30
 80055ee:	462b      	mov	r3, r5
 80055f0:	460a      	mov	r2, r1
 80055f2:	eb42 0303 	adc.w	r3, r2, r3
 80055f6:	637b      	str	r3, [r7, #52]	; 0x34
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005604:	4629      	mov	r1, r5
 8005606:	028b      	lsls	r3, r1, #10
 8005608:	4621      	mov	r1, r4
 800560a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800560e:	4621      	mov	r1, r4
 8005610:	028a      	lsls	r2, r1, #10
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800561a:	2200      	movs	r2, #0
 800561c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005624:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005628:	f7fb fad2 	bl	8000bd0 <__aeabi_uldivmod>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4613      	mov	r3, r2
 8005632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005636:	e067      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x24c>
=======
 8006e1c:	4bb4      	ldr	r3, [pc, #720]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e28:	4bb1      	ldr	r3, [pc, #708]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d071      	beq.n	8006f18 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e34:	4bae      	ldr	r3, [pc, #696]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	099b      	lsrs	r3, r3, #6
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e40:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006e44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e50:	2300      	movs	r3, #0
 8006e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	f04f 0000 	mov.w	r0, #0
 8006e62:	f04f 0100 	mov.w	r1, #0
 8006e66:	0159      	lsls	r1, r3, #5
 8006e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e6c:	0150      	lsls	r0, r2, #5
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4621      	mov	r1, r4
 8006e74:	1a51      	subs	r1, r2, r1
 8006e76:	6439      	str	r1, [r7, #64]	; 0x40
 8006e78:	4629      	mov	r1, r5
 8006e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	018b      	lsls	r3, r1, #6
 8006e90:	4641      	mov	r1, r8
 8006e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e96:	4641      	mov	r1, r8
 8006e98:	018a      	lsls	r2, r1, #6
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	1a51      	subs	r1, r2, r1
 8006e9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	00cb      	lsls	r3, r1, #3
 8006eb8:	4641      	mov	r1, r8
 8006eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ebe:	4641      	mov	r1, r8
 8006ec0:	00ca      	lsls	r2, r1, #3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4622      	mov	r2, r4
 8006eca:	189b      	adds	r3, r3, r2
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8006ece:	462b      	mov	r3, r5
 8006ed0:	460a      	mov	r2, r1
 8006ed2:	eb42 0303 	adc.w	r3, r2, r3
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	028b      	lsls	r3, r1, #10
 8006ee8:	4621      	mov	r1, r4
 8006eea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eee:	4621      	mov	r1, r4
 8006ef0:	028a      	lsls	r2, r1, #10
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006f08:	f7f9 fe62 	bl	8000bd0 <__aeabi_uldivmod>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4613      	mov	r3, r2
 8006f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f16:	e067      	b.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x24c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8005638:	4b75      	ldr	r3, [pc, #468]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	2200      	movs	r2, #0
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005644:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	67bb      	str	r3, [r7, #120]	; 0x78
 8005652:	2300      	movs	r3, #0
 8005654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005656:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800565a:	4622      	mov	r2, r4
 800565c:	462b      	mov	r3, r5
 800565e:	f04f 0000 	mov.w	r0, #0
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	0159      	lsls	r1, r3, #5
 8005668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800566c:	0150      	lsls	r0, r2, #5
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4621      	mov	r1, r4
 8005674:	1a51      	subs	r1, r2, r1
 8005676:	62b9      	str	r1, [r7, #40]	; 0x28
 8005678:	4629      	mov	r1, r5
 800567a:	eb63 0301 	sbc.w	r3, r3, r1
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800568c:	4649      	mov	r1, r9
 800568e:	018b      	lsls	r3, r1, #6
 8005690:	4641      	mov	r1, r8
 8005692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005696:	4641      	mov	r1, r8
 8005698:	018a      	lsls	r2, r1, #6
 800569a:	4641      	mov	r1, r8
 800569c:	ebb2 0a01 	subs.w	sl, r2, r1
 80056a0:	4649      	mov	r1, r9
 80056a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	f04f 0300 	mov.w	r3, #0
 80056ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ba:	4692      	mov	sl, r2
 80056bc:	469b      	mov	fp, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	eb1a 0303 	adds.w	r3, sl, r3
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	462b      	mov	r3, r5
 80056c8:	eb4b 0303 	adc.w	r3, fp, r3
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80056da:	4629      	mov	r1, r5
 80056dc:	028b      	lsls	r3, r1, #10
 80056de:	4621      	mov	r1, r4
 80056e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056e4:	4621      	mov	r1, r4
 80056e6:	028a      	lsls	r2, r1, #10
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056f0:	2200      	movs	r2, #0
 80056f2:	673b      	str	r3, [r7, #112]	; 0x70
 80056f4:	677a      	str	r2, [r7, #116]	; 0x74
 80056f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056fa:	f7fb fa69 	bl	8000bd0 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4613      	mov	r3, r2
 8005704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	3301      	adds	r3, #1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800571a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800571e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005722:	fbb2 f3f3 	udiv	r3, r2, r3
 8005726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800572a:	e0e9      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x444>
=======
 8006f18:	4b75      	ldr	r3, [pc, #468]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	099b      	lsrs	r3, r3, #6
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f24:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f32:	2300      	movs	r3, #0
 8006f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	f04f 0000 	mov.w	r0, #0
 8006f42:	f04f 0100 	mov.w	r1, #0
 8006f46:	0159      	lsls	r1, r3, #5
 8006f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f4c:	0150      	lsls	r0, r2, #5
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4621      	mov	r1, r4
 8006f54:	1a51      	subs	r1, r2, r1
 8006f56:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f58:	4629      	mov	r1, r5
 8006f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	018b      	lsls	r3, r1, #6
 8006f70:	4641      	mov	r1, r8
 8006f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f76:	4641      	mov	r1, r8
 8006f78:	018a      	lsls	r2, r1, #6
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f80:	4649      	mov	r1, r9
 8006f82:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f92:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f9a:	4692      	mov	sl, r2
 8006f9c:	469b      	mov	fp, r3
 8006f9e:	4623      	mov	r3, r4
 8006fa0:	eb1a 0303 	adds.w	r3, sl, r3
 8006fa4:	623b      	str	r3, [r7, #32]
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006fba:	4629      	mov	r1, r5
 8006fbc:	028b      	lsls	r3, r1, #10
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	028a      	lsls	r2, r1, #10
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8006fd4:	677a      	str	r2, [r7, #116]	; 0x74
 8006fd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006fda:	f7f9 fdf9 	bl	8000bd0 <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fe8:	4b41      	ldr	r3, [pc, #260]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800700a:	e0e9      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x444>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800572c:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005738:	4b35      	ldr	r3, [pc, #212]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d069      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005744:	4b32      	ldr	r3, [pc, #200]	; (8005810 <HAL_RCC_GetSysClockFreq+0x354>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	099b      	lsrs	r3, r3, #6
 800574a:	2200      	movs	r2, #0
 800574c:	66bb      	str	r3, [r7, #104]	; 0x68
 800574e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005756:	663b      	str	r3, [r7, #96]	; 0x60
 8005758:	2300      	movs	r3, #0
 800575a:	667b      	str	r3, [r7, #100]	; 0x64
 800575c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005760:	4622      	mov	r2, r4
 8005762:	462b      	mov	r3, r5
 8005764:	f04f 0000 	mov.w	r0, #0
 8005768:	f04f 0100 	mov.w	r1, #0
 800576c:	0159      	lsls	r1, r3, #5
 800576e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005772:	0150      	lsls	r0, r2, #5
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4621      	mov	r1, r4
 800577a:	1a51      	subs	r1, r2, r1
 800577c:	61b9      	str	r1, [r7, #24]
 800577e:	4629      	mov	r1, r5
 8005780:	eb63 0301 	sbc.w	r3, r3, r1
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005792:	4659      	mov	r1, fp
 8005794:	018b      	lsls	r3, r1, #6
 8005796:	4651      	mov	r1, sl
 8005798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800579c:	4651      	mov	r1, sl
 800579e:	018a      	lsls	r2, r1, #6
 80057a0:	4651      	mov	r1, sl
 80057a2:	ebb2 0801 	subs.w	r8, r2, r1
 80057a6:	4659      	mov	r1, fp
 80057a8:	eb63 0901 	sbc.w	r9, r3, r1
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057c0:	4690      	mov	r8, r2
 80057c2:	4699      	mov	r9, r3
 80057c4:	4623      	mov	r3, r4
 80057c6:	eb18 0303 	adds.w	r3, r8, r3
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	462b      	mov	r3, r5
 80057ce:	eb49 0303 	adc.w	r3, r9, r3
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80057e0:	4629      	mov	r1, r5
 80057e2:	028b      	lsls	r3, r1, #10
 80057e4:	4621      	mov	r1, r4
 80057e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057ea:	4621      	mov	r1, r4
 80057ec:	028a      	lsls	r2, r1, #10
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057f6:	2200      	movs	r2, #0
 80057f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80057fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005800:	f7fb f9e6 	bl	8000bd0 <__aeabi_uldivmod>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4613      	mov	r3, r2
 800580a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800580e:	e063      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x41c>
 8005810:	40023800 	.word	0x40023800
 8005814:	00f42400 	.word	0x00f42400
=======
 800700c:	4b38      	ldr	r3, [pc, #224]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007018:	4b35      	ldr	r3, [pc, #212]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d069      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007024:	4b32      	ldr	r3, [pc, #200]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	099b      	lsrs	r3, r3, #6
 800702a:	2200      	movs	r2, #0
 800702c:	66bb      	str	r3, [r7, #104]	; 0x68
 800702e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	663b      	str	r3, [r7, #96]	; 0x60
 8007038:	2300      	movs	r3, #0
 800703a:	667b      	str	r3, [r7, #100]	; 0x64
 800703c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	f04f 0000 	mov.w	r0, #0
 8007048:	f04f 0100 	mov.w	r1, #0
 800704c:	0159      	lsls	r1, r3, #5
 800704e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007052:	0150      	lsls	r0, r2, #5
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4621      	mov	r1, r4
 800705a:	1a51      	subs	r1, r2, r1
 800705c:	61b9      	str	r1, [r7, #24]
 800705e:	4629      	mov	r1, r5
 8007060:	eb63 0301 	sbc.w	r3, r3, r1
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007072:	4659      	mov	r1, fp
 8007074:	018b      	lsls	r3, r1, #6
 8007076:	4651      	mov	r1, sl
 8007078:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800707c:	4651      	mov	r1, sl
 800707e:	018a      	lsls	r2, r1, #6
 8007080:	4651      	mov	r1, sl
 8007082:	ebb2 0801 	subs.w	r8, r2, r1
 8007086:	4659      	mov	r1, fp
 8007088:	eb63 0901 	sbc.w	r9, r3, r1
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007098:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800709c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070a0:	4690      	mov	r8, r2
 80070a2:	4699      	mov	r9, r3
 80070a4:	4623      	mov	r3, r4
 80070a6:	eb18 0303 	adds.w	r3, r8, r3
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	462b      	mov	r3, r5
 80070ae:	eb49 0303 	adc.w	r3, r9, r3
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	f04f 0200 	mov.w	r2, #0
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80070c0:	4629      	mov	r1, r5
 80070c2:	028b      	lsls	r3, r1, #10
 80070c4:	4621      	mov	r1, r4
 80070c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070ca:	4621      	mov	r1, r4
 80070cc:	028a      	lsls	r2, r1, #10
 80070ce:	4610      	mov	r0, r2
 80070d0:	4619      	mov	r1, r3
 80070d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070d6:	2200      	movs	r2, #0
 80070d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80070da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80070dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070e0:	f7f9 fd76 	bl	8000bd0 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4613      	mov	r3, r2
 80070ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070ee:	e063      	b.n	80071b8 <HAL_RCC_GetSysClockFreq+0x41c>
 80070f0:	40023800 	.word	0x40023800
 80070f4:	00f42400 	.word	0x00f42400
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8005818:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <HAL_RCC_GetSysClockFreq+0x454>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	099b      	lsrs	r3, r3, #6
 800581e:	2200      	movs	r2, #0
 8005820:	4618      	mov	r0, r3
 8005822:	4611      	mov	r1, r2
 8005824:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005828:	653b      	str	r3, [r7, #80]	; 0x50
 800582a:	2300      	movs	r3, #0
 800582c:	657b      	str	r3, [r7, #84]	; 0x54
 800582e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005832:	4642      	mov	r2, r8
 8005834:	464b      	mov	r3, r9
 8005836:	f04f 0000 	mov.w	r0, #0
 800583a:	f04f 0100 	mov.w	r1, #0
 800583e:	0159      	lsls	r1, r3, #5
 8005840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005844:	0150      	lsls	r0, r2, #5
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4641      	mov	r1, r8
 800584c:	1a51      	subs	r1, r2, r1
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	4649      	mov	r1, r9
 8005852:	eb63 0301 	sbc.w	r3, r3, r1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005864:	4659      	mov	r1, fp
 8005866:	018b      	lsls	r3, r1, #6
 8005868:	4651      	mov	r1, sl
 800586a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800586e:	4651      	mov	r1, sl
 8005870:	018a      	lsls	r2, r1, #6
 8005872:	4651      	mov	r1, sl
 8005874:	1a54      	subs	r4, r2, r1
 8005876:	4659      	mov	r1, fp
 8005878:	eb63 0501 	sbc.w	r5, r3, r1
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	00eb      	lsls	r3, r5, #3
 8005886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800588a:	00e2      	lsls	r2, r4, #3
 800588c:	4614      	mov	r4, r2
 800588e:	461d      	mov	r5, r3
 8005890:	4643      	mov	r3, r8
 8005892:	18e3      	adds	r3, r4, r3
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	464b      	mov	r3, r9
 8005898:	eb45 0303 	adc.w	r3, r5, r3
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058aa:	4629      	mov	r1, r5
 80058ac:	028b      	lsls	r3, r1, #10
 80058ae:	4621      	mov	r1, r4
 80058b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058b4:	4621      	mov	r1, r4
 80058b6:	028a      	lsls	r2, r1, #10
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058c0:	2200      	movs	r2, #0
 80058c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80058c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058ca:	f7fb f981 	bl	8000bd0 <__aeabi_uldivmod>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4613      	mov	r3, r2
 80058d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_RCC_GetSysClockFreq+0x454>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	0f1b      	lsrs	r3, r3, #28
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80058e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058f6:	e003      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x444>
=======
 80070f8:	4b3d      	ldr	r3, [pc, #244]	; (80071f0 <HAL_RCC_GetSysClockFreq+0x454>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	099b      	lsrs	r3, r3, #6
 80070fe:	2200      	movs	r2, #0
 8007100:	4618      	mov	r0, r3
 8007102:	4611      	mov	r1, r2
 8007104:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
 800710a:	2300      	movs	r3, #0
 800710c:	657b      	str	r3, [r7, #84]	; 0x54
 800710e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007112:	4642      	mov	r2, r8
 8007114:	464b      	mov	r3, r9
 8007116:	f04f 0000 	mov.w	r0, #0
 800711a:	f04f 0100 	mov.w	r1, #0
 800711e:	0159      	lsls	r1, r3, #5
 8007120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007124:	0150      	lsls	r0, r2, #5
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4641      	mov	r1, r8
 800712c:	1a51      	subs	r1, r2, r1
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	4649      	mov	r1, r9
 8007132:	eb63 0301 	sbc.w	r3, r3, r1
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007144:	4659      	mov	r1, fp
 8007146:	018b      	lsls	r3, r1, #6
 8007148:	4651      	mov	r1, sl
 800714a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800714e:	4651      	mov	r1, sl
 8007150:	018a      	lsls	r2, r1, #6
 8007152:	4651      	mov	r1, sl
 8007154:	1a54      	subs	r4, r2, r1
 8007156:	4659      	mov	r1, fp
 8007158:	eb63 0501 	sbc.w	r5, r3, r1
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	00eb      	lsls	r3, r5, #3
 8007166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800716a:	00e2      	lsls	r2, r4, #3
 800716c:	4614      	mov	r4, r2
 800716e:	461d      	mov	r5, r3
 8007170:	4643      	mov	r3, r8
 8007172:	18e3      	adds	r3, r4, r3
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	464b      	mov	r3, r9
 8007178:	eb45 0303 	adc.w	r3, r5, r3
 800717c:	607b      	str	r3, [r7, #4]
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	f04f 0300 	mov.w	r3, #0
 8007186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800718a:	4629      	mov	r1, r5
 800718c:	028b      	lsls	r3, r1, #10
 800718e:	4621      	mov	r1, r4
 8007190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007194:	4621      	mov	r1, r4
 8007196:	028a      	lsls	r2, r1, #10
 8007198:	4610      	mov	r0, r2
 800719a:	4619      	mov	r1, r3
 800719c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071a0:	2200      	movs	r2, #0
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071aa:	f7f9 fd11 	bl	8000bd0 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4613      	mov	r3, r2
 80071b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <HAL_RCC_GetSysClockFreq+0x454>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	0f1b      	lsrs	r3, r3, #28
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80071c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80071d6:	e003      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x444>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_RCC_GetSysClockFreq+0x458>)
 80058fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80058fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005904:	4618      	mov	r0, r3
 8005906:	37b8      	adds	r7, #184	; 0xb8
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400

08005918 <HAL_RCC_OscConfig>:
=======
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80071da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80071de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	37b8      	adds	r7, #184	; 0xb8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ee:	bf00      	nop
 80071f0:	40023800 	.word	0x40023800
 80071f4:	00f42400 	.word	0x00f42400

080071f8 <HAL_RCC_OscConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
=======
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e28d      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
=======
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e28d      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8083 	beq.w	8005a3e <HAL_RCC_OscConfig+0x126>
=======
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8083 	beq.w	800731e <HAL_RCC_OscConfig+0x126>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
<<<<<<< HEAD
 8005938:	4b94      	ldr	r3, [pc, #592]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b04      	cmp	r3, #4
 8005942:	d019      	beq.n	8005978 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005944:	4b91      	ldr	r3, [pc, #580]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800594c:	2b08      	cmp	r3, #8
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005950:	4b8e      	ldr	r3, [pc, #568]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595c:	d00c      	beq.n	8005978 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595e:	4b8b      	ldr	r3, [pc, #556]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d112      	bne.n	8005990 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800596a:	4b88      	ldr	r3, [pc, #544]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005976:	d10b      	bne.n	8005990 <HAL_RCC_OscConfig+0x78>
=======
 8007218:	4b94      	ldr	r3, [pc, #592]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 030c 	and.w	r3, r3, #12
 8007220:	2b04      	cmp	r3, #4
 8007222:	d019      	beq.n	8007258 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007224:	4b91      	ldr	r3, [pc, #580]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800722c:	2b08      	cmp	r3, #8
 800722e:	d106      	bne.n	800723e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007230:	4b8e      	ldr	r3, [pc, #568]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723c:	d00c      	beq.n	8007258 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800723e:	4b8b      	ldr	r3, [pc, #556]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007246:	2b0c      	cmp	r3, #12
 8007248:	d112      	bne.n	8007270 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800724a:	4b88      	ldr	r3, [pc, #544]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007256:	d10b      	bne.n	8007270 <HAL_RCC_OscConfig+0x78>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8005978:	4b84      	ldr	r3, [pc, #528]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d05b      	beq.n	8005a3c <HAL_RCC_OscConfig+0x124>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d157      	bne.n	8005a3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e25a      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
=======
 8007258:	4b84      	ldr	r3, [pc, #528]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d05b      	beq.n	800731c <HAL_RCC_OscConfig+0x124>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d157      	bne.n	800731c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e25a      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005998:	d106      	bne.n	80059a8 <HAL_RCC_OscConfig+0x90>
 800599a:	4b7c      	ldr	r3, [pc, #496]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7b      	ldr	r2, [pc, #492]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e01d      	b.n	80059e4 <HAL_RCC_OscConfig+0xcc>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059b0:	d10c      	bne.n	80059cc <HAL_RCC_OscConfig+0xb4>
 80059b2:	4b76      	ldr	r3, [pc, #472]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a75      	ldr	r2, [pc, #468]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	4b73      	ldr	r3, [pc, #460]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a72      	ldr	r2, [pc, #456]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	e00b      	b.n	80059e4 <HAL_RCC_OscConfig+0xcc>
 80059cc:	4b6f      	ldr	r3, [pc, #444]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a6e      	ldr	r2, [pc, #440]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4b6c      	ldr	r3, [pc, #432]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6b      	ldr	r2, [pc, #428]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 80059de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d013      	beq.n	8005a14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fd fd28 	bl	8003440 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f4:	f7fd fd24 	bl	8003440 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e21f      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a06:	4b61      	ldr	r3, [pc, #388]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0xdc>
 8005a12:	e014      	b.n	8005a3e <HAL_RCC_OscConfig+0x126>
=======
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007278:	d106      	bne.n	8007288 <HAL_RCC_OscConfig+0x90>
 800727a:	4b7c      	ldr	r3, [pc, #496]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a7b      	ldr	r2, [pc, #492]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	e01d      	b.n	80072c4 <HAL_RCC_OscConfig+0xcc>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007290:	d10c      	bne.n	80072ac <HAL_RCC_OscConfig+0xb4>
 8007292:	4b76      	ldr	r3, [pc, #472]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a75      	ldr	r2, [pc, #468]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	4b73      	ldr	r3, [pc, #460]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a72      	ldr	r2, [pc, #456]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	e00b      	b.n	80072c4 <HAL_RCC_OscConfig+0xcc>
 80072ac:	4b6f      	ldr	r3, [pc, #444]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a6e      	ldr	r2, [pc, #440]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	4b6c      	ldr	r3, [pc, #432]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a6b      	ldr	r2, [pc, #428]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d013      	beq.n	80072f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fd fd10 	bl	8004cf0 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072d4:	f7fd fd0c 	bl	8004cf0 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b64      	cmp	r3, #100	; 0x64
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e21f      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072e6:	4b61      	ldr	r3, [pc, #388]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCC_OscConfig+0xdc>
 80072f2:	e014      	b.n	800731e <HAL_RCC_OscConfig+0x126>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005a14:	f7fd fd14 	bl	8003440 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a1c:	f7fd fd10 	bl	8003440 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b64      	cmp	r3, #100	; 0x64
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e20b      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2e:	4b57      	ldr	r3, [pc, #348]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x104>
 8005a3a:	e000      	b.n	8005a3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a3c:	bf00      	nop
=======
 80072f4:	f7fd fcfc 	bl	8004cf0 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072fc:	f7fd fcf8 	bl	8004cf0 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b64      	cmp	r3, #100	; 0x64
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e20b      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800730e:	4b57      	ldr	r3, [pc, #348]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1f0      	bne.n	80072fc <HAL_RCC_OscConfig+0x104>
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800731c:	bf00      	nop
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d06f      	beq.n	8005b2a <HAL_RCC_OscConfig+0x212>
=======
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d06f      	beq.n	800740a <HAL_RCC_OscConfig+0x212>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
<<<<<<< HEAD
 8005a4a:	4b50      	ldr	r3, [pc, #320]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d017      	beq.n	8005a86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a56:	4b4d      	ldr	r3, [pc, #308]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d105      	bne.n	8005a6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a62:	4b4a      	ldr	r3, [pc, #296]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a6e:	4b47      	ldr	r3, [pc, #284]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d11c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a7a:	4b44      	ldr	r3, [pc, #272]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d116      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x19c>
=======
 800732a:	4b50      	ldr	r3, [pc, #320]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007336:	4b4d      	ldr	r3, [pc, #308]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800733e:	2b08      	cmp	r3, #8
 8007340:	d105      	bne.n	800734e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007342:	4b4a      	ldr	r3, [pc, #296]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800734e:	4b47      	ldr	r3, [pc, #284]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d11c      	bne.n	8007394 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800735a:	4b44      	ldr	r3, [pc, #272]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d116      	bne.n	8007394 <HAL_RCC_OscConfig+0x19c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8005a86:	4b41      	ldr	r3, [pc, #260]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_RCC_OscConfig+0x186>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e1d3      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
=======
 8007366:	4b41      	ldr	r3, [pc, #260]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_RCC_OscConfig+0x186>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d001      	beq.n	800737e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e1d3      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005a9e:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4937      	ldr	r1, [pc, #220]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ab2:	e03a      	b.n	8005b2a <HAL_RCC_OscConfig+0x212>
=======
 800737e:	4b3b      	ldr	r3, [pc, #236]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4937      	ldr	r1, [pc, #220]	; (800746c <HAL_RCC_OscConfig+0x274>)
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007392:	e03a      	b.n	800740a <HAL_RCC_OscConfig+0x212>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d020      	beq.n	8005afe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005abc:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <HAL_RCC_OscConfig+0x278>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac2:	f7fd fcbd 	bl	8003440 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aca:	f7fd fcb9 	bl	8003440 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e1b4      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCC_OscConfig+0x1b2>
=======
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d020      	beq.n	80073de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800739c:	4b34      	ldr	r3, [pc, #208]	; (8007470 <HAL_RCC_OscConfig+0x278>)
 800739e:	2201      	movs	r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a2:	f7fd fca5 	bl	8004cf0 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073aa:	f7fd fca1 	bl	8004cf0 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e1b4      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073bc:	4b2b      	ldr	r3, [pc, #172]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0f0      	beq.n	80073aa <HAL_RCC_OscConfig+0x1b2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005ae8:	4b28      	ldr	r3, [pc, #160]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4925      	ldr	r1, [pc, #148]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
 8005afc:	e015      	b.n	8005b2a <HAL_RCC_OscConfig+0x212>
=======
 80073c8:	4b28      	ldr	r3, [pc, #160]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	4925      	ldr	r1, [pc, #148]	; (800746c <HAL_RCC_OscConfig+0x274>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	600b      	str	r3, [r1, #0]
 80073dc:	e015      	b.n	800740a <HAL_RCC_OscConfig+0x212>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8005afe:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <HAL_RCC_OscConfig+0x278>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd fc9c 	bl	8003440 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0c:	f7fd fc98 	bl	8003440 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e193      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1e:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x1f4>
=======
 80073de:	4b24      	ldr	r3, [pc, #144]	; (8007470 <HAL_RCC_OscConfig+0x278>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fd fc84 	bl	8004cf0 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ec:	f7fd fc80 	bl	8004cf0 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e193      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073fe:	4b1b      	ldr	r3, [pc, #108]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x1f4>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d036      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x28c>
=======
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0308 	and.w	r3, r3, #8
 8007412:	2b00      	cmp	r3, #0
 8007414:	d036      	beq.n	8007484 <HAL_RCC_OscConfig+0x28c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b3e:	4b15      	ldr	r3, [pc, #84]	; (8005b94 <HAL_RCC_OscConfig+0x27c>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fd fc7c 	bl	8003440 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b4c:	f7fd fc78 	bl	8003440 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e173      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <HAL_RCC_OscConfig+0x274>)
 8005b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x234>
 8005b6a:	e01b      	b.n	8005ba4 <HAL_RCC_OscConfig+0x28c>
=======
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d016      	beq.n	800744c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800741e:	4b15      	ldr	r3, [pc, #84]	; (8007474 <HAL_RCC_OscConfig+0x27c>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007424:	f7fd fc64 	bl	8004cf0 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800742c:	f7fd fc60 	bl	8004cf0 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e173      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800743e:	4b0b      	ldr	r3, [pc, #44]	; (800746c <HAL_RCC_OscConfig+0x274>)
 8007440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0f0      	beq.n	800742c <HAL_RCC_OscConfig+0x234>
 800744a:	e01b      	b.n	8007484 <HAL_RCC_OscConfig+0x28c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b72:	f7fd fc65 	bl	8003440 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b78:	e00e      	b.n	8005b98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b7a:	f7fd fc61 	bl	8003440 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d907      	bls.n	8005b98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e15c      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	42470000 	.word	0x42470000
 8005b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b98:	4b8a      	ldr	r3, [pc, #552]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ea      	bne.n	8005b7a <HAL_RCC_OscConfig+0x262>
=======
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <HAL_RCC_OscConfig+0x27c>)
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fd fc4d 	bl	8004cf0 <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007458:	e00e      	b.n	8007478 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800745a:	f7fd fc49 	bl	8004cf0 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d907      	bls.n	8007478 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e15c      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
 800746c:	40023800 	.word	0x40023800
 8007470:	42470000 	.word	0x42470000
 8007474:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007478:	4b8a      	ldr	r3, [pc, #552]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ea      	bne.n	800745a <HAL_RCC_OscConfig+0x262>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8097 	beq.w	8005ce0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]
=======
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8097 	beq.w	80075c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007492:	2300      	movs	r3, #0
 8007494:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005bb6:	4b83      	ldr	r3, [pc, #524]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	4b7f      	ldr	r3, [pc, #508]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	4a7e      	ldr	r2, [pc, #504]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd2:	4b7c      	ldr	r3, [pc, #496]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be2:	4b79      	ldr	r3, [pc, #484]	; (8005dc8 <HAL_RCC_OscConfig+0x4b0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d118      	bne.n	8005c20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bee:	4b76      	ldr	r3, [pc, #472]	; (8005dc8 <HAL_RCC_OscConfig+0x4b0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a75      	ldr	r2, [pc, #468]	; (8005dc8 <HAL_RCC_OscConfig+0x4b0>)
 8005bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfa:	f7fd fc21 	bl	8003440 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c02:	f7fd fc1d 	bl	8003440 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e118      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c14:	4b6c      	ldr	r3, [pc, #432]	; (8005dc8 <HAL_RCC_OscConfig+0x4b0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x2ea>
=======
 8007496:	4b83      	ldr	r3, [pc, #524]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10f      	bne.n	80074c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	4b7f      	ldr	r3, [pc, #508]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	4a7e      	ldr	r2, [pc, #504]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80074ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b0:	6413      	str	r3, [r2, #64]	; 0x40
 80074b2:	4b7c      	ldr	r3, [pc, #496]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074be:	2301      	movs	r3, #1
 80074c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c2:	4b79      	ldr	r3, [pc, #484]	; (80076a8 <HAL_RCC_OscConfig+0x4b0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d118      	bne.n	8007500 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ce:	4b76      	ldr	r3, [pc, #472]	; (80076a8 <HAL_RCC_OscConfig+0x4b0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	; (80076a8 <HAL_RCC_OscConfig+0x4b0>)
 80074d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074da:	f7fd fc09 	bl	8004cf0 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e2:	f7fd fc05 	bl	8004cf0 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e118      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f4:	4b6c      	ldr	r3, [pc, #432]	; (80076a8 <HAL_RCC_OscConfig+0x4b0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d0f0      	beq.n	80074e2 <HAL_RCC_OscConfig+0x2ea>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d106      	bne.n	8005c36 <HAL_RCC_OscConfig+0x31e>
 8005c28:	4b66      	ldr	r3, [pc, #408]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	6713      	str	r3, [r2, #112]	; 0x70
 8005c34:	e01c      	b.n	8005c70 <HAL_RCC_OscConfig+0x358>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d10c      	bne.n	8005c58 <HAL_RCC_OscConfig+0x340>
 8005c3e:	4b61      	ldr	r3, [pc, #388]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	4a60      	ldr	r2, [pc, #384]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c44:	f043 0304 	orr.w	r3, r3, #4
 8005c48:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4a:	4b5e      	ldr	r3, [pc, #376]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4a5d      	ldr	r2, [pc, #372]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	6713      	str	r3, [r2, #112]	; 0x70
 8005c56:	e00b      	b.n	8005c70 <HAL_RCC_OscConfig+0x358>
 8005c58:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	4a59      	ldr	r2, [pc, #356]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	6713      	str	r3, [r2, #112]	; 0x70
 8005c64:	4b57      	ldr	r3, [pc, #348]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	4a56      	ldr	r2, [pc, #344]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c6a:	f023 0304 	bic.w	r3, r3, #4
 8005c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c78:	f7fd fbe2 	bl	8003440 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fd fbde 	bl	8003440 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e0d7      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c96:	4b4b      	ldr	r3, [pc, #300]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0ee      	beq.n	8005c80 <HAL_RCC_OscConfig+0x368>
 8005ca2:	e014      	b.n	8005cce <HAL_RCC_OscConfig+0x3b6>
=======
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d106      	bne.n	8007516 <HAL_RCC_OscConfig+0x31e>
 8007508:	4b66      	ldr	r3, [pc, #408]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750c:	4a65      	ldr	r2, [pc, #404]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6713      	str	r3, [r2, #112]	; 0x70
 8007514:	e01c      	b.n	8007550 <HAL_RCC_OscConfig+0x358>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b05      	cmp	r3, #5
 800751c:	d10c      	bne.n	8007538 <HAL_RCC_OscConfig+0x340>
 800751e:	4b61      	ldr	r3, [pc, #388]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	4a60      	ldr	r2, [pc, #384]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007524:	f043 0304 	orr.w	r3, r3, #4
 8007528:	6713      	str	r3, [r2, #112]	; 0x70
 800752a:	4b5e      	ldr	r3, [pc, #376]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	4a5d      	ldr	r2, [pc, #372]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	6713      	str	r3, [r2, #112]	; 0x70
 8007536:	e00b      	b.n	8007550 <HAL_RCC_OscConfig+0x358>
 8007538:	4b5a      	ldr	r3, [pc, #360]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753c:	4a59      	ldr	r2, [pc, #356]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800753e:	f023 0301 	bic.w	r3, r3, #1
 8007542:	6713      	str	r3, [r2, #112]	; 0x70
 8007544:	4b57      	ldr	r3, [pc, #348]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	4a56      	ldr	r2, [pc, #344]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800754a:	f023 0304 	bic.w	r3, r3, #4
 800754e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d015      	beq.n	8007584 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007558:	f7fd fbca 	bl	8004cf0 <HAL_GetTick>
 800755c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800755e:	e00a      	b.n	8007576 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007560:	f7fd fbc6 	bl	8004cf0 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	f241 3288 	movw	r2, #5000	; 0x1388
 800756e:	4293      	cmp	r3, r2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e0d7      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007576:	4b4b      	ldr	r3, [pc, #300]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0ee      	beq.n	8007560 <HAL_RCC_OscConfig+0x368>
 8007582:	e014      	b.n	80075ae <HAL_RCC_OscConfig+0x3b6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005ca4:	f7fd fbcc 	bl	8003440 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cac:	f7fd fbc8 	bl	8003440 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e0c1      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc2:	4b40      	ldr	r3, [pc, #256]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1ee      	bne.n	8005cac <HAL_RCC_OscConfig+0x394>
=======
 8007584:	f7fd fbb4 	bl	8004cf0 <HAL_GetTick>
 8007588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800758a:	e00a      	b.n	80075a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800758c:	f7fd fbb0 	bl	8004cf0 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	f241 3288 	movw	r2, #5000	; 0x1388
 800759a:	4293      	cmp	r3, r2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e0c1      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075a2:	4b40      	ldr	r3, [pc, #256]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1ee      	bne.n	800758c <HAL_RCC_OscConfig+0x394>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d105      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd4:	4b3b      	ldr	r3, [pc, #236]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	4a3a      	ldr	r2, [pc, #232]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cde:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d105      	bne.n	80075c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075b4:	4b3b      	ldr	r3, [pc, #236]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	4a3a      	ldr	r2, [pc, #232]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80075ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075be:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80ad 	beq.w	8005e44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cea:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d060      	beq.n	8005db8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d145      	bne.n	8005d8a <HAL_RCC_OscConfig+0x472>
=======
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80ad 	beq.w	8007724 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075ca:	4b36      	ldr	r3, [pc, #216]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d060      	beq.n	8007698 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d145      	bne.n	800766a <HAL_RCC_OscConfig+0x472>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005cfe:	4b33      	ldr	r3, [pc, #204]	; (8005dcc <HAL_RCC_OscConfig+0x4b4>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fd fb9c 	bl	8003440 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fd fb98 	bl	8003440 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e093      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1e:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x3f4>
=======
 80075de:	4b33      	ldr	r3, [pc, #204]	; (80076ac <HAL_RCC_OscConfig+0x4b4>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fd fb84 	bl	8004cf0 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ec:	f7fd fb80 	bl	8004cf0 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e093      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fe:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f0      	bne.n	80075ec <HAL_RCC_OscConfig+0x3f4>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	019b      	lsls	r3, r3, #6
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	3b01      	subs	r3, #1
 8005d44:	041b      	lsls	r3, r3, #16
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	061b      	lsls	r3, r3, #24
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	071b      	lsls	r3, r3, #28
 8005d56:	491b      	ldr	r1, [pc, #108]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	604b      	str	r3, [r1, #4]
=======
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69da      	ldr	r2, [r3, #28]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	019b      	lsls	r3, r3, #6
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	085b      	lsrs	r3, r3, #1
 8007622:	3b01      	subs	r3, #1
 8007624:	041b      	lsls	r3, r3, #16
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	061b      	lsls	r3, r3, #24
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	071b      	lsls	r3, r3, #28
 8007636:	491b      	ldr	r1, [pc, #108]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 8007638:	4313      	orrs	r3, r2
 800763a:	604b      	str	r3, [r1, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCC_OscConfig+0x4b4>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d62:	f7fd fb6d 	bl	8003440 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d6a:	f7fd fb69 	bl	8003440 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e064      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCC_OscConfig+0x452>
 8005d88:	e05c      	b.n	8005e44 <HAL_RCC_OscConfig+0x52c>
=======
 800763c:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <HAL_RCC_OscConfig+0x4b4>)
 800763e:	2201      	movs	r2, #1
 8007640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fd fb55 	bl	8004cf0 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800764a:	f7fd fb51 	bl	8004cf0 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e064      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765c:	4b11      	ldr	r3, [pc, #68]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0f0      	beq.n	800764a <HAL_RCC_OscConfig+0x452>
 8007668:	e05c      	b.n	8007724 <HAL_RCC_OscConfig+0x52c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005d8a:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <HAL_RCC_OscConfig+0x4b4>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fd fb56 	bl	8003440 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d98:	f7fd fb52 	bl	8003440 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e04d      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCC_OscConfig+0x4ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x480>
 8005db6:	e045      	b.n	8005e44 <HAL_RCC_OscConfig+0x52c>
=======
 800766a:	4b10      	ldr	r3, [pc, #64]	; (80076ac <HAL_RCC_OscConfig+0x4b4>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007670:	f7fd fb3e 	bl	8004cf0 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007678:	f7fd fb3a 	bl	8004cf0 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e04d      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <HAL_RCC_OscConfig+0x4ac>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0x480>
 8007696:	e045      	b.n	8007724 <HAL_RCC_OscConfig+0x52c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e040      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40007000 	.word	0x40007000
 8005dcc:	42470060 	.word	0x42470060
=======
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d107      	bne.n	80076b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e040      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40007000 	.word	0x40007000
 80076ac:	42470060 	.word	0x42470060
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8005dd0:	4b1f      	ldr	r3, [pc, #124]	; (8005e50 <HAL_RCC_OscConfig+0x538>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d030      	beq.n	8005e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d129      	bne.n	8005e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d122      	bne.n	8005e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e00:	4013      	ands	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d119      	bne.n	8005e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d10f      	bne.n	8005e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d001      	beq.n	8005e44 <HAL_RCC_OscConfig+0x52c>
=======
 80076b0:	4b1f      	ldr	r3, [pc, #124]	; (8007730 <HAL_RCC_OscConfig+0x538>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d030      	beq.n	8007720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d129      	bne.n	8007720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d122      	bne.n	8007720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076e0:	4013      	ands	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d119      	bne.n	8007720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	3b01      	subs	r3, #1
 80076fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d10f      	bne.n	8007720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d107      	bne.n	8007720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800771c:	429a      	cmp	r2, r3
 800771e:	d001      	beq.n	8007724 <HAL_RCC_OscConfig+0x52c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
<<<<<<< HEAD
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <HAL_RCC_OscConfig+0x52e>
=======
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <HAL_RCC_OscConfig+0x52e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40023800 	.word	0x40023800

08005e54 <HAL_TIM_Base_Init>:
=======
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023800 	.word	0x40023800

08007734 <HAL_TIM_Base_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e041      	b.n	8005eea <HAL_TIM_Base_Init+0x96>
=======
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e041      	b.n	80077ca <HAL_TIM_Base_Init+0x96>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fde8 	bl	8002a50 <HAL_TIM_Base_MspInit>
=======
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fc fdd0 	bl	8004300 <HAL_TIM_Base_MspInit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	4619      	mov	r1, r3
 8005e92:	4610      	mov	r0, r2
 8005e94:	f000 fe54 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_TIM_Base_Start_IT>:
=======
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	3304      	adds	r3, #4
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f000 fe54 	bl	8008420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <HAL_TIM_Base_Start_IT>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
=======
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d001      	beq.n	8005f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e04e      	b.n	8005faa <HAL_TIM_Base_Start_IT+0xb6>
=======
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d001      	beq.n	80077ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e04e      	b.n	800788a <HAL_TIM_Base_Start_IT+0xb6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a23      	ldr	r2, [pc, #140]	; (8005fb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d022      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f36:	d01d      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <HAL_TIM_Base_Start_IT+0xc8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d018      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1e      	ldr	r2, [pc, #120]	; (8005fc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1c      	ldr	r2, [pc, #112]	; (8005fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1b      	ldr	r2, [pc, #108]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a19      	ldr	r2, [pc, #100]	; (8005fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x80>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a18      	ldr	r2, [pc, #96]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d111      	bne.n	8005f98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d010      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f96:	e007      	b.n	8005fa8 <HAL_TIM_Base_Start_IT+0xb4>
=======
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a23      	ldr	r2, [pc, #140]	; (8007898 <HAL_TIM_Base_Start_IT+0xc4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d022      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007816:	d01d      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1f      	ldr	r2, [pc, #124]	; (800789c <HAL_TIM_Base_Start_IT+0xc8>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d018      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d013      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1c      	ldr	r2, [pc, #112]	; (80078a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00e      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a1b      	ldr	r2, [pc, #108]	; (80078a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x80>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a18      	ldr	r2, [pc, #96]	; (80078b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d111      	bne.n	8007878 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b06      	cmp	r3, #6
 8007864:	d010      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0201 	orr.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007876:	e007      	b.n	8007888 <HAL_TIM_Base_Start_IT+0xb4>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
=======
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0201 	orr.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40010400 	.word	0x40010400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40001800 	.word	0x40001800

08005fd4 <HAL_TIM_PWM_Init>:
=======
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	40010000 	.word	0x40010000
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40000c00 	.word	0x40000c00
 80078a8:	40010400 	.word	0x40010400
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40001800 	.word	0x40001800

080078b4 <HAL_TIM_PWM_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e041      	b.n	800606a <HAL_TIM_PWM_Init+0x96>
=======
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e041      	b.n	800794a <HAL_TIM_PWM_Init+0x96>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f839 	bl	8006072 <HAL_TIM_PWM_MspInit>
=======
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f839 	bl	8007952 <HAL_TIM_PWM_MspInit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f000 fd94 	bl	8006b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_TIM_PWM_MspInit>:
=======
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f000 fd94 	bl	8008420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_TIM_PWM_MspInit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
=======
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <HAL_TIM_PWM_Start_DMA>:
=======
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <HAL_TIM_PWM_Start_DMA>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
<<<<<<< HEAD
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]
=======
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
<<<<<<< HEAD
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	bf0c      	ite	eq
 80060ac:	2301      	moveq	r3, #1
 80060ae:	2300      	movne	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e022      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x72>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d109      	bne.n	80060ce <HAL_TIM_PWM_Start_DMA+0x46>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	bf0c      	ite	eq
 80060c6:	2301      	moveq	r3, #1
 80060c8:	2300      	movne	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e015      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x72>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d109      	bne.n	80060e8 <HAL_TIM_PWM_Start_DMA+0x60>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e008      	b.n	80060fa <HAL_TIM_PWM_Start_DMA+0x72>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
 8006100:	e171      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_TIM_PWM_Start_DMA+0x94>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	e022      	b.n	8006162 <HAL_TIM_PWM_Start_DMA+0xda>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b04      	cmp	r3, #4
 8006120:	d109      	bne.n	8006136 <HAL_TIM_PWM_Start_DMA+0xae>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	e015      	b.n	8006162 <HAL_TIM_PWM_Start_DMA+0xda>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d109      	bne.n	8006150 <HAL_TIM_PWM_Start_DMA+0xc8>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e008      	b.n	8006162 <HAL_TIM_PWM_Start_DMA+0xda>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d024      	beq.n	80061b0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start_DMA+0xee>
 800616c:	887b      	ldrh	r3, [r7, #2]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e137      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
=======
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d109      	bne.n	8007994 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	bf0c      	ite	eq
 800798c:	2301      	moveq	r3, #1
 800798e:	2300      	movne	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	e022      	b.n	80079da <HAL_TIM_PWM_Start_DMA+0x72>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b04      	cmp	r3, #4
 8007998:	d109      	bne.n	80079ae <HAL_TIM_PWM_Start_DMA+0x46>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	bf0c      	ite	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	2300      	movne	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e015      	b.n	80079da <HAL_TIM_PWM_Start_DMA+0x72>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d109      	bne.n	80079c8 <HAL_TIM_PWM_Start_DMA+0x60>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	bf0c      	ite	eq
 80079c0:	2301      	moveq	r3, #1
 80079c2:	2300      	movne	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	e008      	b.n	80079da <HAL_TIM_PWM_Start_DMA+0x72>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
 80079e0:	e171      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d109      	bne.n	80079fc <HAL_TIM_PWM_Start_DMA+0x94>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	bf0c      	ite	eq
 80079f4:	2301      	moveq	r3, #1
 80079f6:	2300      	movne	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	e022      	b.n	8007a42 <HAL_TIM_PWM_Start_DMA+0xda>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d109      	bne.n	8007a16 <HAL_TIM_PWM_Start_DMA+0xae>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2301      	moveq	r3, #1
 8007a10:	2300      	movne	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	e015      	b.n	8007a42 <HAL_TIM_PWM_Start_DMA+0xda>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d109      	bne.n	8007a30 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	bf0c      	ite	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2300      	movne	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	e008      	b.n	8007a42 <HAL_TIM_PWM_Start_DMA+0xda>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	bf0c      	ite	eq
 8007a3c:	2301      	moveq	r3, #1
 8007a3e:	2300      	movne	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d024      	beq.n	8007a90 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d104      	bne.n	8007a56 <HAL_TIM_PWM_Start_DMA+0xee>
 8007a4c:	887b      	ldrh	r3, [r7, #2]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e137      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <HAL_TIM_PWM_Start_DMA+0xfe>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006184:	e016      	b.n	80061b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Start_DMA+0x10e>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006194:	e00e      	b.n	80061b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_PWM_Start_DMA+0x11e>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a4:	e006      	b.n	80061b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ae:	e001      	b.n	80061b4 <HAL_TIM_PWM_Start_DMA+0x12c>
=======
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d104      	bne.n	8007a66 <HAL_TIM_PWM_Start_DMA+0xfe>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a64:	e016      	b.n	8007a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d104      	bne.n	8007a76 <HAL_TIM_PWM_Start_DMA+0x10e>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a74:	e00e      	b.n	8007a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d104      	bne.n	8007a86 <HAL_TIM_PWM_Start_DMA+0x11e>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a84:	e006      	b.n	8007a94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a8e:	e001      	b.n	8007a94 <HAL_TIM_PWM_Start_DMA+0x12c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80061b0:	2301      	movs	r3, #1
 80061b2:	e118      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b0c      	cmp	r3, #12
 80061b8:	f200 80ae 	bhi.w	8006318 <HAL_TIM_PWM_Start_DMA+0x290>
 80061bc:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	080061f9 	.word	0x080061f9
 80061c8:	08006319 	.word	0x08006319
 80061cc:	08006319 	.word	0x08006319
 80061d0:	08006319 	.word	0x08006319
 80061d4:	08006241 	.word	0x08006241
 80061d8:	08006319 	.word	0x08006319
 80061dc:	08006319 	.word	0x08006319
 80061e0:	08006319 	.word	0x08006319
 80061e4:	08006289 	.word	0x08006289
 80061e8:	08006319 	.word	0x08006319
 80061ec:	08006319 	.word	0x08006319
 80061f0:	08006319 	.word	0x08006319
 80061f4:	080062d1 	.word	0x080062d1
=======
 8007a90:	2301      	movs	r3, #1
 8007a92:	e118      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b0c      	cmp	r3, #12
 8007a98:	f200 80ae 	bhi.w	8007bf8 <HAL_TIM_PWM_Start_DMA+0x290>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ad9 	.word	0x08007ad9
 8007aa8:	08007bf9 	.word	0x08007bf9
 8007aac:	08007bf9 	.word	0x08007bf9
 8007ab0:	08007bf9 	.word	0x08007bf9
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007bf9 	.word	0x08007bf9
 8007abc:	08007bf9 	.word	0x08007bf9
 8007ac0:	08007bf9 	.word	0x08007bf9
 8007ac4:	08007b69 	.word	0x08007b69
 8007ac8:	08007bf9 	.word	0x08007bf9
 8007acc:	08007bf9 	.word	0x08007bf9
 8007ad0:	08007bf9 	.word	0x08007bf9
 8007ad4:	08007bb1 	.word	0x08007bb1
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	4a7c      	ldr	r2, [pc, #496]	; (80063f0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	4a7b      	ldr	r2, [pc, #492]	; (80063f4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	4a7a      	ldr	r2, [pc, #488]	; (80063f8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800620e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3334      	adds	r3, #52	; 0x34
 800621c:	461a      	mov	r2, r3
 800621e:	887b      	ldrh	r3, [r7, #2]
 8006220:	f7fd fafe 	bl	8003820 <HAL_DMA_Start_IT>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_TIM_PWM_Start_DMA+0x1a6>
=======
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	4a7c      	ldr	r2, [pc, #496]	; (8007cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007ade:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	4a7b      	ldr	r2, [pc, #492]	; (8007cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	4a7a      	ldr	r2, [pc, #488]	; (8007cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007aee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3334      	adds	r3, #52	; 0x34
 8007afc:	461a      	mov	r2, r3
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	f7fd fae6 	bl	80050d0 <HAL_DMA_Start_IT>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_TIM_PWM_Start_DMA+0x1a6>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 800622a:	2301      	movs	r3, #1
 800622c:	e0db      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
=======
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e0db      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
<<<<<<< HEAD
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623c:	60da      	str	r2, [r3, #12]
      break;
 800623e:	e06e      	b.n	800631e <HAL_TIM_PWM_Start_DMA+0x296>
=======
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b1c:	60da      	str	r2, [r3, #12]
      break;
 8007b1e:	e06e      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	4a6a      	ldr	r2, [pc, #424]	; (80063f0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006246:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624c:	4a69      	ldr	r2, [pc, #420]	; (80063f4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800624e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	4a68      	ldr	r2, [pc, #416]	; (80063f8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006256:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3338      	adds	r3, #56	; 0x38
 8006264:	461a      	mov	r2, r3
 8006266:	887b      	ldrh	r3, [r7, #2]
 8006268:	f7fd fada 	bl	8003820 <HAL_DMA_Start_IT>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_TIM_PWM_Start_DMA+0x1ee>
=======
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	4a6a      	ldr	r2, [pc, #424]	; (8007cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007b26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	4a69      	ldr	r2, [pc, #420]	; (8007cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b34:	4a68      	ldr	r2, [pc, #416]	; (8007cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007b36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3338      	adds	r3, #56	; 0x38
 8007b44:	461a      	mov	r2, r3
 8007b46:	887b      	ldrh	r3, [r7, #2]
 8007b48:	f7fd fac2 	bl	80050d0 <HAL_DMA_Start_IT>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_TIM_PWM_Start_DMA+0x1ee>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 8006272:	2301      	movs	r3, #1
 8006274:	e0b7      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006284:	60da      	str	r2, [r3, #12]
      break;
 8006286:	e04a      	b.n	800631e <HAL_TIM_PWM_Start_DMA+0x296>
=======
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0b7      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b64:	60da      	str	r2, [r3, #12]
      break;
 8007b66:	e04a      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	4a58      	ldr	r2, [pc, #352]	; (80063f0 <HAL_TIM_PWM_Start_DMA+0x368>)
 800628e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	4a57      	ldr	r2, [pc, #348]	; (80063f4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	4a56      	ldr	r2, [pc, #344]	; (80063f8 <HAL_TIM_PWM_Start_DMA+0x370>)
 800629e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	333c      	adds	r3, #60	; 0x3c
 80062ac:	461a      	mov	r2, r3
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	f7fd fab6 	bl	8003820 <HAL_DMA_Start_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_TIM_PWM_Start_DMA+0x236>
=======
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	4a58      	ldr	r2, [pc, #352]	; (8007cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a57      	ldr	r2, [pc, #348]	; (8007cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	4a56      	ldr	r2, [pc, #344]	; (8007cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007b7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	333c      	adds	r3, #60	; 0x3c
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	887b      	ldrh	r3, [r7, #2]
 8007b90:	f7fd fa9e 	bl	80050d0 <HAL_DMA_Start_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_TIM_PWM_Start_DMA+0x236>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 80062ba:	2301      	movs	r3, #1
 80062bc:	e093      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062cc:	60da      	str	r2, [r3, #12]
      break;
 80062ce:	e026      	b.n	800631e <HAL_TIM_PWM_Start_DMA+0x296>
=======
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e093      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bac:	60da      	str	r2, [r3, #12]
      break;
 8007bae:	e026      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	4a46      	ldr	r2, [pc, #280]	; (80063f0 <HAL_TIM_PWM_Start_DMA+0x368>)
 80062d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	4a45      	ldr	r2, [pc, #276]	; (80063f4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80062de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	4a44      	ldr	r2, [pc, #272]	; (80063f8 <HAL_TIM_PWM_Start_DMA+0x370>)
 80062e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3340      	adds	r3, #64	; 0x40
 80062f4:	461a      	mov	r2, r3
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	f7fd fa92 	bl	8003820 <HAL_DMA_Start_IT>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_TIM_PWM_Start_DMA+0x27e>
=======
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	4a46      	ldr	r2, [pc, #280]	; (8007cd0 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007bb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	4a45      	ldr	r2, [pc, #276]	; (8007cd4 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc4:	4a44      	ldr	r2, [pc, #272]	; (8007cd8 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007bc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3340      	adds	r3, #64	; 0x40
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	887b      	ldrh	r3, [r7, #2]
 8007bd8:	f7fd fa7a 	bl	80050d0 <HAL_DMA_Start_IT>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_TIM_PWM_Start_DMA+0x27e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
<<<<<<< HEAD
 8006302:	2301      	movs	r3, #1
 8006304:	e06f      	b.n	80063e6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006314:	60da      	str	r2, [r3, #12]
      break;
 8006316:	e002      	b.n	800631e <HAL_TIM_PWM_Start_DMA+0x296>
=======
 8007be2:	2301      	movs	r3, #1
 8007be4:	e06f      	b.n	8007cc6 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bf4:	60da      	str	r2, [r3, #12]
      break;
 8007bf6:	e002      	b.n	8007bfe <HAL_TIM_PWM_Start_DMA+0x296>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8006318:	2301      	movs	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]
      break;
 800631c:	bf00      	nop
  }

  if (status == HAL_OK)
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d15f      	bne.n	80063e4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2201      	movs	r2, #1
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fef1 	bl	8007114 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a31      	ldr	r2, [pc, #196]	; (80063fc <HAL_TIM_PWM_Start_DMA+0x374>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_PWM_Start_DMA+0x2be>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a2f      	ldr	r2, [pc, #188]	; (8006400 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800635e:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d15f      	bne.n	8007cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 fef1 	bl	80089f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a31      	ldr	r2, [pc, #196]	; (8007cdc <HAL_TIM_PWM_Start_DMA+0x374>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <HAL_TIM_PWM_Start_DMA+0x2be>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a2f      	ldr	r2, [pc, #188]	; (8007ce0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d101      	bne.n	8007c2a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8007c26:	2301      	movs	r3, #1
 8007c28:	e000      	b.n	8007c2c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c3e:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a25      	ldr	r2, [pc, #148]	; (80063fc <HAL_TIM_PWM_Start_DMA+0x374>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d022      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006372:	d01d      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a22      	ldr	r2, [pc, #136]	; (8006404 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d018      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a21      	ldr	r2, [pc, #132]	; (8006408 <HAL_TIM_PWM_Start_DMA+0x380>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <HAL_TIM_PWM_Start_DMA+0x384>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00e      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d009      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <HAL_TIM_PWM_Start_DMA+0x388>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PWM_Start_DMA+0x328>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1a      	ldr	r2, [pc, #104]	; (8006414 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d111      	bne.n	80063d4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b06      	cmp	r3, #6
 80063c0:	d010      	beq.n	80063e4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0201 	orr.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d2:	e007      	b.n	80063e4 <HAL_TIM_PWM_Start_DMA+0x35c>
=======
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a25      	ldr	r2, [pc, #148]	; (8007cdc <HAL_TIM_PWM_Start_DMA+0x374>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d022      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c52:	d01d      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a22      	ldr	r2, [pc, #136]	; (8007ce4 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d018      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <HAL_TIM_PWM_Start_DMA+0x380>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d013      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a1f      	ldr	r2, [pc, #124]	; (8007cec <HAL_TIM_PWM_Start_DMA+0x384>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00e      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1a      	ldr	r2, [pc, #104]	; (8007ce0 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x328>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1a      	ldr	r2, [pc, #104]	; (8007cf4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d111      	bne.n	8007cb4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b06      	cmp	r3, #6
 8007ca0:	d010      	beq.n	8007cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0201 	orr.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb2:	e007      	b.n	8007cc4 <HAL_TIM_PWM_Start_DMA+0x35c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
=======
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	08006a31 	.word	0x08006a31
 80063f4:	08006ad9 	.word	0x08006ad9
 80063f8:	0800699f 	.word	0x0800699f
 80063fc:	40010000 	.word	0x40010000
 8006400:	40010400 	.word	0x40010400
 8006404:	40000400 	.word	0x40000400
 8006408:	40000800 	.word	0x40000800
 800640c:	40000c00 	.word	0x40000c00
 8006410:	40014000 	.word	0x40014000
 8006414:	40001800 	.word	0x40001800

08006418 <HAL_TIM_IRQHandler>:
=======
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	08008311 	.word	0x08008311
 8007cd4:	080083b9 	.word	0x080083b9
 8007cd8:	0800827f 	.word	0x0800827f
 8007cdc:	40010000 	.word	0x40010000
 8007ce0:	40010400 	.word	0x40010400
 8007ce4:	40000400 	.word	0x40000400
 8007ce8:	40000800 	.word	0x40000800
 8007cec:	40000c00 	.word	0x40000c00
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40001800 	.word	0x40001800

08007cf8 <HAL_TIM_IRQHandler>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b02      	cmp	r3, #2
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0202 	mvn.w	r2, #2
 8006444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x4a>
=======
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d122      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d11b      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0202 	mvn.w	r2, #2
 8007d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa77 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0x56>
=======
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa77 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8007d40:	e005      	b.n	8007d4e <HAL_TIM_IRQHandler+0x56>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa69 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fb f939 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
=======
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa69 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7f9 ffb3 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d122      	bne.n	80064c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b04      	cmp	r3, #4
 800648e:	d11b      	bne.n	80064c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0204 	mvn.w	r2, #4
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x9e>
=======
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0204 	mvn.w	r2, #4
 8007d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fa4d 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0xaa>
=======
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa4d 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa3f 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fb f90f 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
=======
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa3f 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7f9 ff89 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d122      	bne.n	800651c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d11b      	bne.n	800651c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0208 	mvn.w	r2, #8
 80064ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2204      	movs	r2, #4
 80064f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0xf2>
=======
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0208 	mvn.w	r2, #8
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0xf2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa23 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0xfe>
=======
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa23 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa15 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7fb f8e5 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
=======
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa15 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7f9 ff5f 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b10      	cmp	r3, #16
 8006528:	d122      	bne.n	8006570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b10      	cmp	r3, #16
 8006536:	d11b      	bne.n	8006570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0210 	mvn.w	r2, #16
 8006540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2208      	movs	r2, #8
 8006546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x146>
=======
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0210 	mvn.w	r2, #16
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2208      	movs	r2, #8
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x146>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9f9 	bl	800694e <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0x152>
=======
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9f9 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x152>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9eb 	bl	800693a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fb f8bb 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
=======
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9eb 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7f9 ff35 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d10e      	bne.n	800659c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d107      	bne.n	800659c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0201 	mvn.w	r2, #1
 8006594:	611a      	str	r2, [r3, #16]
=======
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10e      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d107      	bne.n	8007e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0201 	mvn.w	r2, #1
 8007e74:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fb f8b6 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
=======
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7f9 ff30 	bl	8001cdc <HAL_TIM_PeriodElapsedCallback>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d10e      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d107      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065c0:	611a      	str	r2, [r3, #16]
=======
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e86:	2b80      	cmp	r3, #128	; 0x80
 8007e88:	d10e      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ea0:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fe52 	bl	800726c <HAL_TIMEx_BreakCallback>
=======
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fe52 	bl	8008b4c <HAL_TIMEx_BreakCallback>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ec:	611a      	str	r2, [r3, #16]
=======
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b40      	cmp	r3, #64	; 0x40
 8007eb4:	d10e      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d107      	bne.n	8007ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ecc:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f9c1 	bl	8006976 <HAL_TIM_TriggerCallback>
=======
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9c1 	bl	8008256 <HAL_TIM_TriggerCallback>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b20      	cmp	r3, #32
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0220 	mvn.w	r2, #32
 8006618:	611a      	str	r2, [r3, #16]
=======
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d10e      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d107      	bne.n	8007f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0220 	mvn.w	r2, #32
 8007ef8:	611a      	str	r2, [r3, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fe1c 	bl	8007258 <HAL_TIMEx_CommutCallback>
=======
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fe1c 	bl	8008b38 <HAL_TIMEx_CommutCallback>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_PWM_ConfigChannel>:
=======
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	75fb      	strb	r3, [r7, #23]
=======
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006642:	2302      	movs	r3, #2
 8006644:	e0ae      	b.n	80067a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b0c      	cmp	r3, #12
 8006652:	f200 809f 	bhi.w	8006794 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006691 	.word	0x08006691
 8006660:	08006795 	.word	0x08006795
 8006664:	08006795 	.word	0x08006795
 8006668:	08006795 	.word	0x08006795
 800666c:	080066d1 	.word	0x080066d1
 8006670:	08006795 	.word	0x08006795
 8006674:	08006795 	.word	0x08006795
 8006678:	08006795 	.word	0x08006795
 800667c:	08006713 	.word	0x08006713
 8006680:	08006795 	.word	0x08006795
 8006684:	08006795 	.word	0x08006795
 8006688:	08006795 	.word	0x08006795
 800668c:	08006753 	.word	0x08006753
=======
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e0ae      	b.n	8008084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b0c      	cmp	r3, #12
 8007f32:	f200 809f 	bhi.w	8008074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08007f71 	.word	0x08007f71
 8007f40:	08008075 	.word	0x08008075
 8007f44:	08008075 	.word	0x08008075
 8007f48:	08008075 	.word	0x08008075
 8007f4c:	08007fb1 	.word	0x08007fb1
 8007f50:	08008075 	.word	0x08008075
 8007f54:	08008075 	.word	0x08008075
 8007f58:	08008075 	.word	0x08008075
 8007f5c:	08007ff3 	.word	0x08007ff3
 8007f60:	08008075 	.word	0x08008075
 8007f64:	08008075 	.word	0x08008075
 8007f68:	08008075 	.word	0x08008075
 8007f6c:	08008033 	.word	0x08008033
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 faf2 	bl	8006c80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0208 	orr.w	r2, r2, #8
 80066aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0204 	bic.w	r2, r2, #4
 80066ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6999      	ldr	r1, [r3, #24]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	619a      	str	r2, [r3, #24]
      break;
 80066ce:	e064      	b.n	800679a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 faf2 	bl	8008560 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0208 	orr.w	r2, r2, #8
 8007f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0204 	bic.w	r2, r2, #4
 8007f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6999      	ldr	r1, [r3, #24]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691a      	ldr	r2, [r3, #16]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	619a      	str	r2, [r3, #24]
      break;
 8007fae:	e064      	b.n	800807a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fb42 	bl	8006d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6999      	ldr	r1, [r3, #24]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	619a      	str	r2, [r3, #24]
      break;
 8006710:	e043      	b.n	800679a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fb42 	bl	8008640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6999      	ldr	r1, [r3, #24]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	021a      	lsls	r2, r3, #8
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	619a      	str	r2, [r3, #24]
      break;
 8007ff0:	e043      	b.n	800807a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fb97 	bl	8006e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0208 	orr.w	r2, r2, #8
 800672c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69da      	ldr	r2, [r3, #28]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0204 	bic.w	r2, r2, #4
 800673c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69d9      	ldr	r1, [r3, #28]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	61da      	str	r2, [r3, #28]
      break;
 8006750:	e023      	b.n	800679a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fb97 	bl	800872c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0208 	orr.w	r2, r2, #8
 800800c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0204 	bic.w	r2, r2, #4
 800801c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69d9      	ldr	r1, [r3, #28]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	61da      	str	r2, [r3, #28]
      break;
 8008030:	e023      	b.n	800807a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fbeb 	bl	8006f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800676c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69da      	ldr	r2, [r3, #28]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69d9      	ldr	r1, [r3, #28]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	021a      	lsls	r2, r3, #8
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	61da      	str	r2, [r3, #28]
      break;
 8006792:	e002      	b.n	800679a <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fbeb 	bl	8008814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69da      	ldr	r2, [r3, #28]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	69d9      	ldr	r1, [r3, #28]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	021a      	lsls	r2, r3, #8
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	61da      	str	r2, [r3, #28]
      break;
 8008072:	e002      	b.n	800807a <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8006794:	2301      	movs	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
      break;
 8006798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_TIM_ConfigClockSource>:
=======
 8008074:	2301      	movs	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
      break;
 8008078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008082:	7dfb      	ldrb	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_TIM_ConfigClockSource>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
=======
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_ConfigClockSource+0x1c>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e0b4      	b.n	8006932 <HAL_TIM_ConfigClockSource+0x186>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_TIM_ConfigClockSource+0x1c>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e0b4      	b.n	8008212 <HAL_TIM_ConfigClockSource+0x186>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006800:	d03e      	beq.n	8006880 <HAL_TIM_ConfigClockSource+0xd4>
 8006802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006806:	f200 8087 	bhi.w	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	f000 8086 	beq.w	800691e <HAL_TIM_ConfigClockSource+0x172>
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d87f      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006818:	2b70      	cmp	r3, #112	; 0x70
 800681a:	d01a      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0xa6>
 800681c:	2b70      	cmp	r3, #112	; 0x70
 800681e:	d87b      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d050      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d877      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d03c      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0xfa>
 800682c:	2b50      	cmp	r3, #80	; 0x50
 800682e:	d873      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d058      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d86f      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d064      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x15a>
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d86b      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d060      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x15a>
 8006844:	2b20      	cmp	r3, #32
 8006846:	d867      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d05c      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x15a>
 800684c:	2b10      	cmp	r3, #16
 800684e:	d05a      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x15a>
 8006850:	e062      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x16c>
=======
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e0:	d03e      	beq.n	8008160 <HAL_TIM_ConfigClockSource+0xd4>
 80080e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e6:	f200 8087 	bhi.w	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 80080ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ee:	f000 8086 	beq.w	80081fe <HAL_TIM_ConfigClockSource+0x172>
 80080f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f6:	d87f      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 80080f8:	2b70      	cmp	r3, #112	; 0x70
 80080fa:	d01a      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0xa6>
 80080fc:	2b70      	cmp	r3, #112	; 0x70
 80080fe:	d87b      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008100:	2b60      	cmp	r3, #96	; 0x60
 8008102:	d050      	beq.n	80081a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008104:	2b60      	cmp	r3, #96	; 0x60
 8008106:	d877      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008108:	2b50      	cmp	r3, #80	; 0x50
 800810a:	d03c      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0xfa>
 800810c:	2b50      	cmp	r3, #80	; 0x50
 800810e:	d873      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d058      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	d86f      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008118:	2b30      	cmp	r3, #48	; 0x30
 800811a:	d064      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x15a>
 800811c:	2b30      	cmp	r3, #48	; 0x30
 800811e:	d86b      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008120:	2b20      	cmp	r3, #32
 8008122:	d060      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008124:	2b20      	cmp	r3, #32
 8008126:	d867      	bhi.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008128:	2b00      	cmp	r3, #0
 800812a:	d05c      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x15a>
 800812c:	2b10      	cmp	r3, #16
 800812e:	d05a      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008130:	e062      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6899      	ldr	r1, [r3, #8]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f000 fc37 	bl	80070d4 <TIM_ETR_SetConfig>
=======
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6899      	ldr	r1, [r3, #8]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f000 fc37 	bl	80089b4 <TIM_ETR_SetConfig>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006874:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	609a      	str	r2, [r3, #8]
      break;
 800687e:	e04f      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
=======
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	609a      	str	r2, [r3, #8]
      break;
 800815e:	e04f      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6899      	ldr	r1, [r3, #8]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f000 fc20 	bl	80070d4 <TIM_ETR_SetConfig>
=======
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	6899      	ldr	r1, [r3, #8]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f000 fc20 	bl	80089b4 <TIM_ETR_SetConfig>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a2:	609a      	str	r2, [r3, #8]
      break;
 80068a4:	e03c      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
=======
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008182:	609a      	str	r2, [r3, #8]
      break;
 8008184:	e03c      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fb94 	bl	8006fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2150      	movs	r1, #80	; 0x50
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fbed 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 80068c4:	e02c      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
=======
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6859      	ldr	r1, [r3, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	461a      	mov	r2, r3
 8008194:	f000 fb94 	bl	80088c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2150      	movs	r1, #80	; 0x50
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fbed 	bl	800897e <TIM_ITRx_SetConfig>
      break;
 80081a4:	e02c      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f000 fbb3 	bl	800703e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2160      	movs	r1, #96	; 0x60
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fbdd 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 80068e4:	e01c      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
=======
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6859      	ldr	r1, [r3, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	461a      	mov	r2, r3
 80081b4:	f000 fbb3 	bl	800891e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2160      	movs	r1, #96	; 0x60
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fbdd 	bl	800897e <TIM_ITRx_SetConfig>
      break;
 80081c4:	e01c      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f000 fb74 	bl	8006fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2140      	movs	r1, #64	; 0x40
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fbcd 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 8006904:	e00c      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
=======
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	6859      	ldr	r1, [r3, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f000 fb74 	bl	80088c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2140      	movs	r1, #64	; 0x40
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fbcd 	bl	800897e <TIM_ITRx_SetConfig>
      break;
 80081e4:	e00c      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f000 fbc4 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 8006916:	e003      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
=======
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f000 fbc4 	bl	800897e <TIM_ITRx_SetConfig>
      break;
 80081f6:	e003      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
      break;
 800691c:	e000      	b.n	8006920 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800691e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80081f8:	2301      	movs	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]
      break;
 80081fc:	e000      	b.n	8008200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008210:	7bfb      	ldrb	r3, [r7, #15]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
=======
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_IC_CaptureCallback>:
=======
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_TIM_IC_CaptureCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
=======
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
=======
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
=======
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_TIM_TriggerCallback>:
=======
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <HAL_TIM_TriggerCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
=======
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_TIM_ErrorCallback>:
=======
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_TIM_ErrorCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
=======
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <TIM_DMAError>:
=======
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <TIM_DMAError>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d107      	bne.n	80069c6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069c4:	e02a      	b.n	8006a1c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d107      	bne.n	80069e0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2202      	movs	r2, #2
 80069d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069de:	e01d      	b.n	8006a1c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d107      	bne.n	80069fa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2204      	movs	r2, #4
 80069ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f8:	e010      	b.n	8006a1c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d107      	bne.n	8006a14 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2208      	movs	r2, #8
 8006a08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a12:	e003      	b.n	8006a1c <TIM_DMAError+0x7e>
=======
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d107      	bne.n	80082a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a4:	e02a      	b.n	80082fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d107      	bne.n	80082c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2202      	movs	r2, #2
 80082b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082be:	e01d      	b.n	80082fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d107      	bne.n	80082da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2204      	movs	r2, #4
 80082ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082d8:	e010      	b.n	80082fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d107      	bne.n	80082f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2208      	movs	r2, #8
 80082e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082f2:	e003      	b.n	80082fc <TIM_DMAError+0x7e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
<<<<<<< HEAD
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff ffb4 	bl	800698a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <TIM_DMADelayPulseCplt>:
=======
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff ffb4 	bl	800826a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <TIM_DMADelayPulseCplt>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d10b      	bne.n	8006a60 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d136      	bne.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a5e:	e031      	b.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d10b      	bne.n	8006a82 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d125      	bne.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a80:	e020      	b.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d10b      	bne.n	8006aa4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d114      	bne.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa2:	e00f      	b.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d10a      	bne.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d103      	bne.n	8006ac4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d10b      	bne.n	8008340 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d136      	bne.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800833e:	e031      	b.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d10b      	bne.n	8008362 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2202      	movs	r2, #2
 800834e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d125      	bne.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008360:	e020      	b.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d10b      	bne.n	8008384 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2204      	movs	r2, #4
 8008370:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d114      	bne.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008382:	e00f      	b.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d10a      	bne.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2208      	movs	r2, #8
 8008392:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7fa fe0b 	bl	80016e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <TIM_DMADelayPulseHalfCplt>:
=======
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7f9 fc85 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <TIM_DMADelayPulseHalfCplt>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d103      	bne.n	8006af8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	771a      	strb	r2, [r3, #28]
 8006af6:	e019      	b.n	8006b2c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d103      	bne.n	8006b0a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2202      	movs	r2, #2
 8006b06:	771a      	strb	r2, [r3, #28]
 8006b08:	e010      	b.n	8006b2c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d103      	bne.n	8006b1c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2204      	movs	r2, #4
 8006b18:	771a      	strb	r2, [r3, #28]
 8006b1a:	e007      	b.n	8006b2c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d102      	bne.n	8006b2c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	771a      	strb	r2, [r3, #28]
=======
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d103      	bne.n	80083d8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	771a      	strb	r2, [r3, #28]
 80083d6:	e019      	b.n	800840c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d103      	bne.n	80083ea <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2202      	movs	r2, #2
 80083e6:	771a      	strb	r2, [r3, #28]
 80083e8:	e010      	b.n	800840c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d103      	bne.n	80083fc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2204      	movs	r2, #4
 80083f8:	771a      	strb	r2, [r3, #28]
 80083fa:	e007      	b.n	800840c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d102      	bne.n	800840c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2208      	movs	r2, #8
 800840a:	771a      	strb	r2, [r3, #28]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
<<<<<<< HEAD
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff ff18 	bl	8006962 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <TIM_Base_SetConfig>:
=======
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f7ff ff18 	bl	8008242 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	771a      	strb	r2, [r3, #28]
}
 8008418:	bf00      	nop
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <TIM_Base_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a40      	ldr	r2, [pc, #256]	; (8006c54 <TIM_Base_SetConfig+0x114>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5e:	d00f      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a3d      	ldr	r2, [pc, #244]	; (8006c58 <TIM_Base_SetConfig+0x118>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00b      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a3c      	ldr	r2, [pc, #240]	; (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3b      	ldr	r2, [pc, #236]	; (8006c60 <TIM_Base_SetConfig+0x120>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_Base_SetConfig+0x40>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a3a      	ldr	r2, [pc, #232]	; (8006c64 <TIM_Base_SetConfig+0x124>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d108      	bne.n	8006b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2f      	ldr	r2, [pc, #188]	; (8006c54 <TIM_Base_SetConfig+0x114>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02b      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba0:	d027      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <TIM_Base_SetConfig+0x118>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d023      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <TIM_Base_SetConfig+0x11c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01f      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a2a      	ldr	r2, [pc, #168]	; (8006c60 <TIM_Base_SetConfig+0x120>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d01b      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <TIM_Base_SetConfig+0x124>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d017      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a28      	ldr	r2, [pc, #160]	; (8006c68 <TIM_Base_SetConfig+0x128>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a27      	ldr	r2, [pc, #156]	; (8006c6c <TIM_Base_SetConfig+0x12c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00f      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <TIM_Base_SetConfig+0x130>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <TIM_Base_SetConfig+0x134>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a24      	ldr	r2, [pc, #144]	; (8006c78 <TIM_Base_SetConfig+0x138>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a23      	ldr	r2, [pc, #140]	; (8006c7c <TIM_Base_SetConfig+0x13c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d108      	bne.n	8006c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
=======
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a40      	ldr	r2, [pc, #256]	; (8008534 <TIM_Base_SetConfig+0x114>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d013      	beq.n	8008460 <TIM_Base_SetConfig+0x40>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843e:	d00f      	beq.n	8008460 <TIM_Base_SetConfig+0x40>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a3d      	ldr	r2, [pc, #244]	; (8008538 <TIM_Base_SetConfig+0x118>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00b      	beq.n	8008460 <TIM_Base_SetConfig+0x40>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a3c      	ldr	r2, [pc, #240]	; (800853c <TIM_Base_SetConfig+0x11c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d007      	beq.n	8008460 <TIM_Base_SetConfig+0x40>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a3b      	ldr	r2, [pc, #236]	; (8008540 <TIM_Base_SetConfig+0x120>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_Base_SetConfig+0x40>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a3a      	ldr	r2, [pc, #232]	; (8008544 <TIM_Base_SetConfig+0x124>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d108      	bne.n	8008472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a2f      	ldr	r2, [pc, #188]	; (8008534 <TIM_Base_SetConfig+0x114>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d02b      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008480:	d027      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a2c      	ldr	r2, [pc, #176]	; (8008538 <TIM_Base_SetConfig+0x118>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d023      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a2b      	ldr	r2, [pc, #172]	; (800853c <TIM_Base_SetConfig+0x11c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d01f      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a2a      	ldr	r2, [pc, #168]	; (8008540 <TIM_Base_SetConfig+0x120>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d01b      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a29      	ldr	r2, [pc, #164]	; (8008544 <TIM_Base_SetConfig+0x124>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d017      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a28      	ldr	r2, [pc, #160]	; (8008548 <TIM_Base_SetConfig+0x128>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a27      	ldr	r2, [pc, #156]	; (800854c <TIM_Base_SetConfig+0x12c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00f      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a26      	ldr	r2, [pc, #152]	; (8008550 <TIM_Base_SetConfig+0x130>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00b      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a25      	ldr	r2, [pc, #148]	; (8008554 <TIM_Base_SetConfig+0x134>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a24      	ldr	r2, [pc, #144]	; (8008558 <TIM_Base_SetConfig+0x138>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_Base_SetConfig+0xb2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a23      	ldr	r2, [pc, #140]	; (800855c <TIM_Base_SetConfig+0x13c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <TIM_Base_SetConfig+0x114>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0xf8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a0c      	ldr	r2, [pc, #48]	; (8006c64 <TIM_Base_SetConfig+0x124>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d103      	bne.n	8006c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a0a      	ldr	r2, [pc, #40]	; (8008534 <TIM_Base_SetConfig+0x114>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d003      	beq.n	8008518 <TIM_Base_SetConfig+0xf8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a0c      	ldr	r2, [pc, #48]	; (8008544 <TIM_Base_SetConfig+0x124>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d103      	bne.n	8008520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	691a      	ldr	r2, [r3, #16]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	615a      	str	r2, [r3, #20]
}
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40000400 	.word	0x40000400
 8006c5c:	40000800 	.word	0x40000800
 8006c60:	40000c00 	.word	0x40000c00
 8006c64:	40010400 	.word	0x40010400
 8006c68:	40014000 	.word	0x40014000
 8006c6c:	40014400 	.word	0x40014400
 8006c70:	40014800 	.word	0x40014800
 8006c74:	40001800 	.word	0x40001800
 8006c78:	40001c00 	.word	0x40001c00
 8006c7c:	40002000 	.word	0x40002000

08006c80 <TIM_OC1_SetConfig>:
=======
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	615a      	str	r2, [r3, #20]
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	40010000 	.word	0x40010000
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40010400 	.word	0x40010400
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400
 8008550:	40014800 	.word	0x40014800
 8008554:	40001800 	.word	0x40001800
 8008558:	40001c00 	.word	0x40001c00
 800855c:	40002000 	.word	0x40002000

08008560 <TIM_OC1_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
=======
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f023 0302 	bic.w	r3, r3, #2
 8006cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <TIM_OC1_SetConfig+0xd8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC1_SetConfig+0x64>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <TIM_OC1_SetConfig+0xdc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d10c      	bne.n	8006cfe <TIM_OC1_SetConfig+0x7e>
=======
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f023 0201 	bic.w	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f023 0302 	bic.w	r3, r3, #2
 80085a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a20      	ldr	r2, [pc, #128]	; (8008638 <TIM_OC1_SetConfig+0xd8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_OC1_SetConfig+0x64>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a1f      	ldr	r2, [pc, #124]	; (800863c <TIM_OC1_SetConfig+0xdc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d10c      	bne.n	80085de <TIM_OC1_SetConfig+0x7e>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0308 	bic.w	r3, r3, #8
 8006cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 0304 	bic.w	r3, r3, #4
 8006cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <TIM_OC1_SetConfig+0xd8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_OC1_SetConfig+0x8e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a14      	ldr	r2, [pc, #80]	; (8006d5c <TIM_OC1_SetConfig+0xdc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d111      	bne.n	8006d32 <TIM_OC1_SetConfig+0xb2>
=======
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0308 	bic.w	r3, r3, #8
 80085ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f023 0304 	bic.w	r3, r3, #4
 80085dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a15      	ldr	r2, [pc, #84]	; (8008638 <TIM_OC1_SetConfig+0xd8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d003      	beq.n	80085ee <TIM_OC1_SetConfig+0x8e>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a14      	ldr	r2, [pc, #80]	; (800863c <TIM_OC1_SetConfig+0xdc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d111      	bne.n	8008612 <TIM_OC1_SetConfig+0xb2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
=======
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	4313      	orrs	r3, r2
 8008606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	621a      	str	r2, [r3, #32]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400

08006d60 <TIM_OC2_SetConfig>:
=======
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	621a      	str	r2, [r3, #32]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40010000 	.word	0x40010000
 800863c:	40010400 	.word	0x40010400

08008640 <TIM_OC2_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
=======
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f023 0210 	bic.w	r2, r3, #16
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0320 	bic.w	r3, r3, #32
 8006daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a22      	ldr	r2, [pc, #136]	; (8006e44 <TIM_OC2_SetConfig+0xe4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC2_SetConfig+0x68>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a21      	ldr	r2, [pc, #132]	; (8006e48 <TIM_OC2_SetConfig+0xe8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d10d      	bne.n	8006de4 <TIM_OC2_SetConfig+0x84>
=======
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f023 0210 	bic.w	r2, r3, #16
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	021b      	lsls	r3, r3, #8
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0320 	bic.w	r3, r3, #32
 800868a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a22      	ldr	r2, [pc, #136]	; (8008724 <TIM_OC2_SetConfig+0xe4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d003      	beq.n	80086a8 <TIM_OC2_SetConfig+0x68>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a21      	ldr	r2, [pc, #132]	; (8008728 <TIM_OC2_SetConfig+0xe8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d10d      	bne.n	80086c4 <TIM_OC2_SetConfig+0x84>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de2:	617b      	str	r3, [r7, #20]
=======
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086c2:	617b      	str	r3, [r7, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a17      	ldr	r2, [pc, #92]	; (8006e44 <TIM_OC2_SetConfig+0xe4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC2_SetConfig+0x94>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <TIM_OC2_SetConfig+0xe8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d113      	bne.n	8006e1c <TIM_OC2_SetConfig+0xbc>
=======
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a17      	ldr	r2, [pc, #92]	; (8008724 <TIM_OC2_SetConfig+0xe4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_OC2_SetConfig+0x94>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a16      	ldr	r2, [pc, #88]	; (8008728 <TIM_OC2_SetConfig+0xe8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d113      	bne.n	80086fc <TIM_OC2_SetConfig+0xbc>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
=======
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40010400 	.word	0x40010400

08006e4c <TIM_OC3_SetConfig>:
=======
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40010000 	.word	0x40010000
 8008728:	40010400 	.word	0x40010400

0800872c <TIM_OC3_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
=======
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <TIM_OC3_SetConfig+0xe0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_OC3_SetConfig+0x66>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <TIM_OC3_SetConfig+0xe4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d10d      	bne.n	8006ece <TIM_OC3_SetConfig+0x82>
=======
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 0303 	bic.w	r3, r3, #3
 8008762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	4313      	orrs	r3, r2
 8008780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a21      	ldr	r2, [pc, #132]	; (800880c <TIM_OC3_SetConfig+0xe0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_OC3_SetConfig+0x66>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a20      	ldr	r2, [pc, #128]	; (8008810 <TIM_OC3_SetConfig+0xe4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d10d      	bne.n	80087ae <TIM_OC3_SetConfig+0x82>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <TIM_OC3_SetConfig+0xe0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC3_SetConfig+0x92>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a15      	ldr	r2, [pc, #84]	; (8006f30 <TIM_OC3_SetConfig+0xe4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d113      	bne.n	8006f06 <TIM_OC3_SetConfig+0xba>
=======
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a16      	ldr	r2, [pc, #88]	; (800880c <TIM_OC3_SetConfig+0xe0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d003      	beq.n	80087be <TIM_OC3_SetConfig+0x92>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a15      	ldr	r2, [pc, #84]	; (8008810 <TIM_OC3_SetConfig+0xe4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d113      	bne.n	80087e6 <TIM_OC3_SetConfig+0xba>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
=======
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400

08006f34 <TIM_OC4_SetConfig>:
=======
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	621a      	str	r2, [r3, #32]
}
 8008800:	bf00      	nop
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	40010000 	.word	0x40010000
 8008810:	40010400 	.word	0x40010400

08008814 <TIM_OC4_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
=======
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	031b      	lsls	r3, r3, #12
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <TIM_OC4_SetConfig+0xa4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_OC4_SetConfig+0x68>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a11      	ldr	r2, [pc, #68]	; (8006fdc <TIM_OC4_SetConfig+0xa8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d109      	bne.n	8006fb0 <TIM_OC4_SetConfig+0x7c>
=======
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800884a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4313      	orrs	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800885e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	031b      	lsls	r3, r3, #12
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <TIM_OC4_SetConfig+0xa4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC4_SetConfig+0x68>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a11      	ldr	r2, [pc, #68]	; (80088bc <TIM_OC4_SetConfig+0xa8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d109      	bne.n	8008890 <TIM_OC4_SetConfig+0x7c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	019b      	lsls	r3, r3, #6
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
=======
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	019b      	lsls	r3, r3, #6
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40010400 	.word	0x40010400

08006fe0 <TIM_TI1_ConfigInputStage>:
=======
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	40010000 	.word	0x40010000
 80088bc:	40010400 	.word	0x40010400

080088c0 <TIM_TI1_ConfigInputStage>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
=======
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f023 0201 	bic.w	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800700a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 030a 	bic.w	r3, r3, #10
 800701c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <TIM_TI2_ConfigInputStage>:
=======
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f023 0201 	bic.w	r2, r3, #1
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f023 030a 	bic.w	r3, r3, #10
 80088fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	621a      	str	r2, [r3, #32]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <TIM_TI2_ConfigInputStage>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800703e:	b480      	push	{r7}
 8007040:	b087      	sub	sp, #28
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
=======
 800891e:	b480      	push	{r7}
 8008920:	b087      	sub	sp, #28
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607a      	str	r2, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0210 	bic.w	r2, r3, #16
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800707a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <TIM_ITRx_SetConfig>:
=======
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	f023 0210 	bic.w	r2, r3, #16
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	031b      	lsls	r3, r3, #12
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800895a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	4313      	orrs	r3, r2
 8008964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <TIM_ITRx_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
=======
 800897e:	b480      	push	{r7}
 8008980:	b085      	sub	sp, #20
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f043 0307 	orr.w	r3, r3, #7
 80070c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	609a      	str	r2, [r3, #8]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_ETR_SetConfig>:
=======
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	f043 0307 	orr.w	r3, r3, #7
 80089a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	609a      	str	r2, [r3, #8]
}
 80089a8:	bf00      	nop
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <TIM_ETR_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	021a      	lsls	r2, r3, #8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <TIM_CCxChannelCmd>:
=======
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	021a      	lsls	r2, r3, #8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4313      	orrs	r3, r2
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	609a      	str	r2, [r3, #8]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <TIM_CCxChannelCmd>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
=======
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2201      	movs	r2, #1
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	43db      	mvns	r3, r3
 8007136:	401a      	ands	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a1a      	ldr	r2, [r3, #32]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	431a      	orrs	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	2201      	movs	r2, #1
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1a      	ldr	r2, [r3, #32]
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	43db      	mvns	r3, r3
 8008a16:	401a      	ands	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a1a      	ldr	r2, [r3, #32]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
	...

08008a40 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
=======
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e05a      	b.n	800722e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a21      	ldr	r2, [pc, #132]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d01d      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1a      	ldr	r2, [pc, #104]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a18      	ldr	r2, [pc, #96]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a17      	ldr	r2, [pc, #92]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a15      	ldr	r2, [pc, #84]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d10c      	bne.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	4313      	orrs	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	609a      	str	r2, [r3, #8]
=======
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e05a      	b.n	8008b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a21      	ldr	r2, [pc, #132]	; (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d022      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa4:	d01d      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a1d      	ldr	r2, [pc, #116]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d018      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a1b      	ldr	r2, [pc, #108]	; (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d013      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a1a      	ldr	r2, [pc, #104]	; (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00e      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d009      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d004      	beq.n	8008ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d10c      	bne.n	8008afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	609a      	str	r2, [r3, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40010000 	.word	0x40010000
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40010400 	.word	0x40010400
 8007250:	40014000 	.word	0x40014000
 8007254:	40001800 	.word	0x40001800

08007258 <HAL_TIMEx_CommutCallback>:
=======
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	40010000 	.word	0x40010000
 8008b20:	40000400 	.word	0x40000400
 8008b24:	40000800 	.word	0x40000800
 8008b28:	40000c00 	.word	0x40000c00
 8008b2c:	40010400 	.word	0x40010400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40001800 	.word	0x40001800

08008b38 <HAL_TIMEx_CommutCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
=======
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_TIMEx_BreakCallback>:
=======
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_TIMEx_BreakCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
=======
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_UART_Init>:
=======
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UART_Init>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e03f      	b.n	8007312 <HAL_UART_Init+0x92>
=======
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e03f      	b.n	8008bf2 <HAL_UART_Init+0x92>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb fc8e 	bl	8002bc8 <HAL_UART_MspInit>
=======
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fb fc76 	bl	8004478 <HAL_UART_MspInit>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fba5 	bl	8007a14 <UART_SetConfig>
=======
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2224      	movs	r2, #36	; 0x24
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fba5 	bl	80092f4 <UART_SetConfig>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695a      	ldr	r2, [r3, #20]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_UART_Transmit>:
=======
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	695a      	ldr	r2, [r3, #20]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_UART_Transmit>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800731a:	b580      	push	{r7, lr}
 800731c:	b08a      	sub	sp, #40	; 0x28
 800731e:	af02      	add	r7, sp, #8
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b20      	cmp	r3, #32
 8007338:	d17c      	bne.n	8007434 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_UART_Transmit+0x2c>
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e075      	b.n	8007436 <HAL_UART_Transmit+0x11c>
=======
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b08a      	sub	sp, #40	; 0x28
 8008bfe:	af02      	add	r7, sp, #8
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	603b      	str	r3, [r7, #0]
 8008c06:	4613      	mov	r3, r2
 8008c08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d17c      	bne.n	8008d14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_UART_Transmit+0x2c>
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e075      	b.n	8008d16 <HAL_UART_Transmit+0x11c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_UART_Transmit+0x3e>
 8007354:	2302      	movs	r3, #2
 8007356:	e06e      	b.n	8007436 <HAL_UART_Transmit+0x11c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2221      	movs	r2, #33	; 0x21
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800736e:	f7fc f867 	bl	8003440 <HAL_GetTick>
 8007372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	88fa      	ldrh	r2, [r7, #6]
 800737e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007388:	d108      	bne.n	800739c <HAL_UART_Transmit+0x82>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	e003      	b.n	80073a4 <HAL_UART_Transmit+0x8a>
=======
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_UART_Transmit+0x3e>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e06e      	b.n	8008d16 <HAL_UART_Transmit+0x11c>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2221      	movs	r2, #33	; 0x21
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c4e:	f7fc f84f 	bl	8004cf0 <HAL_GetTick>
 8008c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	88fa      	ldrh	r2, [r7, #6]
 8008c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c68:	d108      	bne.n	8008c7c <HAL_UART_Transmit+0x82>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e003      	b.n	8008c84 <HAL_UART_Transmit+0x8a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61bb      	str	r3, [r7, #24]
=======
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
<<<<<<< HEAD
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073ac:	e02a      	b.n	8007404 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2200      	movs	r2, #0
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f992 	bl	80076e2 <UART_WaitOnFlagUntilTimeout>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e036      	b.n	8007436 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	3302      	adds	r3, #2
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	e007      	b.n	80073f6 <HAL_UART_Transmit+0xdc>
=======
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c8c:	e02a      	b.n	8008ce4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2200      	movs	r2, #0
 8008c96:	2180      	movs	r1, #128	; 0x80
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f992 	bl	8008fc2 <UART_WaitOnFlagUntilTimeout>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e036      	b.n	8008d16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e007      	b.n	8008cd6 <HAL_UART_Transmit+0xdc>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3301      	adds	r3, #1
 80073f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1cf      	bne.n	80073ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	2140      	movs	r1, #64	; 0x40
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 f962 	bl	80076e2 <UART_WaitOnFlagUntilTimeout>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e006      	b.n	8007436 <HAL_UART_Transmit+0x11c>
=======
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1cf      	bne.n	8008c8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2140      	movs	r1, #64	; 0x40
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f962 	bl	8008fc2 <UART_WaitOnFlagUntilTimeout>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e006      	b.n	8008d16 <HAL_UART_Transmit+0x11c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <HAL_UART_Transmit+0x11c>
=======
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	e000      	b.n	8008d16 <HAL_UART_Transmit+0x11c>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007434:	2302      	movs	r3, #2
  }
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_UART_Receive_DMA>:
=======
 8008d14:	2302      	movs	r3, #2
  }
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_UART_Receive_DMA>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	4613      	mov	r3, r2
 800744a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b20      	cmp	r3, #32
 8007456:	d11d      	bne.n	8007494 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_UART_Receive_DMA+0x26>
 800745e:	88fb      	ldrh	r3, [r7, #6]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e016      	b.n	8007496 <HAL_UART_Receive_DMA+0x58>
=======
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d11d      	bne.n	8008d74 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <HAL_UART_Receive_DMA+0x26>
 8008d3e:	88fb      	ldrh	r3, [r7, #6]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e016      	b.n	8008d76 <HAL_UART_Receive_DMA+0x58>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_UART_Receive_DMA+0x38>
 8007472:	2302      	movs	r3, #2
 8007474:	e00f      	b.n	8007496 <HAL_UART_Receive_DMA+0x58>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	461a      	mov	r2, r3
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f998 	bl	80077c0 <UART_Start_Receive_DMA>
 8007490:	4603      	mov	r3, r0
 8007492:	e000      	b.n	8007496 <HAL_UART_Receive_DMA+0x58>
=======
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d101      	bne.n	8008d56 <HAL_UART_Receive_DMA+0x38>
 8008d52:	2302      	movs	r3, #2
 8008d54:	e00f      	b.n	8008d76 <HAL_UART_Receive_DMA+0x58>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	461a      	mov	r2, r3
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f998 	bl	80090a0 <UART_Start_Receive_DMA>
 8008d70:	4603      	mov	r3, r0
 8008d72:	e000      	b.n	8008d76 <HAL_UART_Receive_DMA+0x58>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8007494:	2302      	movs	r3, #2
  }
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_UART_RxCpltCallback>:
=======
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_UART_RxCpltCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
=======
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_UART_RxHalfCpltCallback>:
=======
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <HAL_UART_RxHalfCpltCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
=======
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_UART_ErrorCallback>:
=======
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_UART_ErrorCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
=======
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_UARTEx_RxEventCallback>:
=======
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_UARTEx_RxEventCallback>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	460b      	mov	r3, r1
 80074e4:	807b      	strh	r3, [r7, #2]
=======
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	807b      	strh	r3, [r7, #2]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <UART_DMAReceiveCplt>:
=======
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <UART_DMAReceiveCplt>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b09c      	sub	sp, #112	; 0x70
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750a:	2b00      	cmp	r3, #0
 800750c:	d172      	bne.n	80075f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800750e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007510:	2200      	movs	r2, #0
 8007512:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	64fb      	str	r3, [r7, #76]	; 0x4c
=======
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b09c      	sub	sp, #112	; 0x70
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d172      	bne.n	8008ed4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df0:	2200      	movs	r2, #0
 8008df2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 800751c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800752a:	66bb      	str	r3, [r7, #104]	; 0x68
 800752c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007534:	65ba      	str	r2, [r7, #88]	; 0x58
 8007536:	657b      	str	r3, [r7, #84]	; 0x54
=======
 8008dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	330c      	adds	r3, #12
 8008e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e14:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e16:	657b      	str	r3, [r7, #84]	; 0x54
>>>>>>> parent of feb78f6 (本番パフォーマンス)
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8007538:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800753a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e5      	bne.n	8007514 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3314      	adds	r3, #20
 800754e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	667b      	str	r3, [r7, #100]	; 0x64
 8007560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007568:	647a      	str	r2, [r7, #68]	; 0x44
 800756a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800756e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e5      	bne.n	8007548 <UART_DMAReceiveCplt+0x56>
=======
 8008e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e5      	bne.n	8008df4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3314      	adds	r3, #20
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e3a:	f023 0301 	bic.w	r3, r3, #1
 8008e3e:	667b      	str	r3, [r7, #100]	; 0x64
 8008e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3314      	adds	r3, #20
 8008e46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e48:	647a      	str	r2, [r7, #68]	; 0x44
 8008e4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e5      	bne.n	8008e28 <UART_DMAReceiveCplt+0x56>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 800757c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3314      	adds	r3, #20
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	623b      	str	r3, [r7, #32]
   return(result);
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007592:	663b      	str	r3, [r7, #96]	; 0x60
 8007594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3314      	adds	r3, #20
 800759a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800759c:	633a      	str	r2, [r7, #48]	; 0x30
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e5      	bne.n	800757c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d119      	bne.n	80075f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0310 	bic.w	r3, r3, #16
 80075d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075e0:	61fa      	str	r2, [r7, #28]
 80075e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	617b      	str	r3, [r7, #20]
   return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e5      	bne.n	80075c0 <UART_DMAReceiveCplt+0xce>
=======
 8008e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3314      	adds	r3, #20
 8008e62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e72:	663b      	str	r3, [r7, #96]	; 0x60
 8008e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e5      	bne.n	8008e5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d119      	bne.n	8008ed4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	330c      	adds	r3, #12
 8008ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	e853 3f00 	ldrex	r3, [r3]
 8008eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 0310 	bic.w	r3, r3, #16
 8008eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	330c      	adds	r3, #12
 8008ebe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ec0:	61fa      	str	r2, [r7, #28]
 8008ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	69b9      	ldr	r1, [r7, #24]
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e5      	bne.n	8008ea0 <UART_DMAReceiveCplt+0xce>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80075f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d106      	bne.n	800760a <UART_DMAReceiveCplt+0x118>
=======
 8008ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d106      	bne.n	8008eea <UART_DMAReceiveCplt+0x118>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007600:	4619      	mov	r1, r3
 8007602:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007604:	f7ff ff69 	bl	80074da <HAL_UARTEx_RxEventCallback>
=======
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ee4:	f7ff ff69 	bl	8008dba <HAL_UARTEx_RxEventCallback>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8007608:	e002      	b.n	8007610 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800760a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800760c:	f7ff ff47 	bl	800749e <HAL_UART_RxCpltCallback>
}
 8007610:	bf00      	nop
 8007612:	3770      	adds	r7, #112	; 0x70
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <UART_DMARxHalfCplt>:
=======
 8008ee8:	e002      	b.n	8008ef0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008eea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008eec:	f7ff ff47 	bl	8008d7e <HAL_UART_RxCpltCallback>
}
 8008ef0:	bf00      	nop
 8008ef2:	3770      	adds	r7, #112	; 0x70
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UART_DMARxHalfCplt>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	60fb      	str	r3, [r7, #12]
=======
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	60fb      	str	r3, [r7, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762a:	2b01      	cmp	r3, #1
 800762c:	d108      	bne.n	8007640 <UART_DMARxHalfCplt+0x28>
=======
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d108      	bne.n	8008f20 <UART_DMARxHalfCplt+0x28>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
<<<<<<< HEAD
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	b29b      	uxth	r3, r3
 8007636:	4619      	mov	r1, r3
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff ff4e 	bl	80074da <HAL_UARTEx_RxEventCallback>
=======
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	4619      	mov	r1, r3
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff ff4e 	bl	8008dba <HAL_UARTEx_RxEventCallback>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 800763e:	e002      	b.n	8007646 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff ff36 	bl	80074b2 <HAL_UART_RxHalfCpltCallback>
}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <UART_DMAError>:
=======
 8008f1e:	e002      	b.n	8008f26 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff ff36 	bl	8008d92 <HAL_UART_RxHalfCpltCallback>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <UART_DMAError>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	2b80      	cmp	r3, #128	; 0x80
 800766c:	bf0c      	ite	eq
 800766e:	2301      	moveq	r3, #1
 8007670:	2300      	movne	r3, #0
 8007672:	b2db      	uxtb	r3, r3
 8007674:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b21      	cmp	r3, #33	; 0x21
 8007680:	d108      	bne.n	8007694 <UART_DMAError+0x46>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800768e:	68b8      	ldr	r0, [r7, #8]
 8007690:	f000 f934 	bl	80078fc <UART_EndTxTransfer>
=======
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f4a:	2b80      	cmp	r3, #128	; 0x80
 8008f4c:	bf0c      	ite	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	2300      	movne	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b21      	cmp	r3, #33	; 0x21
 8008f60:	d108      	bne.n	8008f74 <UART_DMAError+0x46>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f6e:	68b8      	ldr	r0, [r7, #8]
 8008f70:	f000 f934 	bl	80091dc <UART_EndTxTransfer>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b22      	cmp	r3, #34	; 0x22
 80076b4:	d108      	bne.n	80076c8 <UART_DMAError+0x7a>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2200      	movs	r2, #0
 80076c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076c2:	68b8      	ldr	r0, [r7, #8]
 80076c4:	f000 f942 	bl	800794c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	f043 0210 	orr.w	r2, r3, #16
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7e:	2b40      	cmp	r3, #64	; 0x40
 8008f80:	bf0c      	ite	eq
 8008f82:	2301      	moveq	r3, #1
 8008f84:	2300      	movne	r3, #0
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b22      	cmp	r3, #34	; 0x22
 8008f94:	d108      	bne.n	8008fa8 <UART_DMAError+0x7a>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008fa2:	68b8      	ldr	r0, [r7, #8]
 8008fa4:	f000 f942 	bl	800922c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	f043 0210 	orr.w	r2, r3, #16
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> parent of feb78f6 (本番パフォーマンス)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80076d4:	68b8      	ldr	r0, [r7, #8]
 80076d6:	f7ff fef6 	bl	80074c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_WaitOnFlagUntilTimeout>:
=======
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f7ff fef6 	bl	8008da6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b090      	sub	sp, #64	; 0x40
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	4613      	mov	r3, r2
 80076f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f2:	e050      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d04c      	beq.n	8007796 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d007      	beq.n	8007712 <UART_WaitOnFlagUntilTimeout+0x30>
 8007702:	f7fb fe9d 	bl	8003440 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800770e:	429a      	cmp	r2, r3
 8007710:	d241      	bcs.n	8007796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	330c      	adds	r3, #12
 8007730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007732:	637a      	str	r2, [r7, #52]	; 0x34
 8007734:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3314      	adds	r3, #20
 800774c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	613b      	str	r3, [r7, #16]
   return(result);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	63bb      	str	r3, [r7, #56]	; 0x38
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3314      	adds	r3, #20
 8007764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007766:	623a      	str	r2, [r7, #32]
 8007768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	69f9      	ldr	r1, [r7, #28]
 800776c:	6a3a      	ldr	r2, [r7, #32]
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	61bb      	str	r3, [r7, #24]
   return(result);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e5      	bne.n	8007746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2220      	movs	r2, #32
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e00f      	b.n	80077b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	bf0c      	ite	eq
 80077a6:	2301      	moveq	r3, #1
 80077a8:	2300      	movne	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d09f      	beq.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b090      	sub	sp, #64	; 0x40
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fd2:	e050      	b.n	8009076 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fda:	d04c      	beq.n	8009076 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d007      	beq.n	8008ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fe2:	f7fb fe85 	bl	8004cf0 <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d241      	bcs.n	8009076 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	330c      	adds	r3, #12
 8008ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	330c      	adds	r3, #12
 8009010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009012:	637a      	str	r2, [r7, #52]	; 0x34
 8009014:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e5      	bne.n	8008ff2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3314      	adds	r3, #20
 800902c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	613b      	str	r3, [r7, #16]
   return(result);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	63bb      	str	r3, [r7, #56]	; 0x38
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3314      	adds	r3, #20
 8009044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009046:	623a      	str	r2, [r7, #32]
 8009048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	69f9      	ldr	r1, [r7, #28]
 800904c:	6a3a      	ldr	r2, [r7, #32]
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	61bb      	str	r3, [r7, #24]
   return(result);
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e5      	bne.n	8009026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2220      	movs	r2, #32
 8009066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e00f      	b.n	8009096 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4013      	ands	r3, r2
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	429a      	cmp	r2, r3
 8009084:	bf0c      	ite	eq
 8009086:	2301      	moveq	r3, #1
 8009088:	2300      	movne	r3, #0
 800908a:	b2db      	uxtb	r3, r3
 800908c:	461a      	mov	r2, r3
 800908e:	79fb      	ldrb	r3, [r7, #7]
 8009090:	429a      	cmp	r2, r3
 8009092:	d09f      	beq.n	8008fd4 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3740      	adds	r7, #64	; 0x40
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <UART_Start_Receive_DMA>:
=======
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3740      	adds	r7, #64	; 0x40
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <UART_Start_Receive_DMA>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b098      	sub	sp, #96	; 0x60
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	88fa      	ldrh	r2, [r7, #6]
 80077d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2222      	movs	r2, #34	; 0x22
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	4a40      	ldr	r2, [pc, #256]	; (80078f0 <UART_Start_Receive_DMA+0x130>)
 80077ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	4a3f      	ldr	r2, [pc, #252]	; (80078f4 <UART_Start_Receive_DMA+0x134>)
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	4a3e      	ldr	r2, [pc, #248]	; (80078f8 <UART_Start_Receive_DMA+0x138>)
 80077fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	2200      	movs	r2, #0
 8007806:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007808:	f107 0308 	add.w	r3, r7, #8
 800780c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	f7fb fffe 	bl	8003820 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007824:	2300      	movs	r3, #0
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	613b      	str	r3, [r7, #16]
 8007838:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d019      	beq.n	800787e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	330c      	adds	r3, #12
 8007850:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800785a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800785c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007860:	65bb      	str	r3, [r7, #88]	; 0x58
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800786a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800786c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e5      	bne.n	800784a <UART_Start_Receive_DMA+0x8a>
=======
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b098      	sub	sp, #96	; 0x60
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	88fa      	ldrh	r2, [r7, #6]
 80090b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2222      	movs	r2, #34	; 0x22
 80090c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	4a40      	ldr	r2, [pc, #256]	; (80091d0 <UART_Start_Receive_DMA+0x130>)
 80090ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	4a3f      	ldr	r2, [pc, #252]	; (80091d4 <UART_Start_Receive_DMA+0x134>)
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	4a3e      	ldr	r2, [pc, #248]	; (80091d8 <UART_Start_Receive_DMA+0x138>)
 80090de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	2200      	movs	r2, #0
 80090e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4619      	mov	r1, r3
 80090fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	88fb      	ldrh	r3, [r7, #6]
 8009100:	f7fb ffe6 	bl	80050d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	613b      	str	r3, [r7, #16]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d019      	beq.n	800915e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	330c      	adds	r3, #12
 8009130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009140:	65bb      	str	r3, [r7, #88]	; 0x58
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	330c      	adds	r3, #12
 8009148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800914a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800914c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_Start_Receive_DMA+0x8a>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
<<<<<<< HEAD
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3314      	adds	r3, #20
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	f043 0301 	orr.w	r3, r3, #1
 8007894:	657b      	str	r3, [r7, #84]	; 0x54
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3314      	adds	r3, #20
 800789c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800789e:	63ba      	str	r2, [r7, #56]	; 0x38
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e5      	bne.n	800787e <UART_Start_Receive_DMA+0xbe>
=======
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3314      	adds	r3, #20
 8009164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	f043 0301 	orr.w	r3, r3, #1
 8009174:	657b      	str	r3, [r7, #84]	; 0x54
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3314      	adds	r3, #20
 800917c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800917e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009180:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009186:	e841 2300 	strex	r3, r2, [r1]
 800918a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e5      	bne.n	800915e <UART_Start_Receive_DMA+0xbe>
>>>>>>> parent of feb78f6 (本番パフォーマンス)

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3314      	adds	r3, #20
 80078b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	617b      	str	r3, [r7, #20]
   return(result);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c8:	653b      	str	r3, [r7, #80]	; 0x50
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3314      	adds	r3, #20
 80078d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078d2:	627a      	str	r2, [r7, #36]	; 0x24
 80078d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6a39      	ldr	r1, [r7, #32]
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	61fb      	str	r3, [r7, #28]
   return(result);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3760      	adds	r7, #96	; 0x60
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	080074f3 	.word	0x080074f3
 80078f4:	08007619 	.word	0x08007619
 80078f8:	0800764f 	.word	0x0800764f

080078fc <UART_EndTxTransfer>:
=======
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3314      	adds	r3, #20
 8009198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	e853 3f00 	ldrex	r3, [r3]
 80091a0:	617b      	str	r3, [r7, #20]
   return(result);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a8:	653b      	str	r3, [r7, #80]	; 0x50
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3314      	adds	r3, #20
 80091b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091b2:	627a      	str	r2, [r7, #36]	; 0x24
 80091b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6a39      	ldr	r1, [r7, #32]
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e5      	bne.n	8009192 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3760      	adds	r7, #96	; 0x60
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	08008dd3 	.word	0x08008dd3
 80091d4:	08008ef9 	.word	0x08008ef9
 80091d8:	08008f2f 	.word	0x08008f2f

080091dc <UART_EndTxTransfer>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80078fc:	b480      	push	{r7}
 80078fe:	b089      	sub	sp, #36	; 0x24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	60bb      	str	r3, [r7, #8]
   return(result);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	330c      	adds	r3, #12
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	61ba      	str	r2, [r7, #24]
 8007926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6979      	ldr	r1, [r7, #20]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	613b      	str	r3, [r7, #16]
   return(result);
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007940:	bf00      	nop
 8007942:	3724      	adds	r7, #36	; 0x24
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <UART_EndRxTransfer>:
=======
 80091dc:	b480      	push	{r7}
 80091de:	b089      	sub	sp, #36	; 0x24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091fa:	61fb      	str	r3, [r7, #28]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	69fa      	ldr	r2, [r7, #28]
 8009204:	61ba      	str	r2, [r7, #24]
 8009206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	6979      	ldr	r1, [r7, #20]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	613b      	str	r3, [r7, #16]
   return(result);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e5      	bne.n	80091e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009220:	bf00      	nop
 8009222:	3724      	adds	r7, #36	; 0x24
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <UART_EndRxTransfer>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800794c:	b480      	push	{r7}
 800794e:	b095      	sub	sp, #84	; 0x54
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	330c      	adds	r3, #12
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795e:	e853 3f00 	ldrex	r3, [r3]
 8007962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800796a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	330c      	adds	r3, #12
 8007972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007974:	643a      	str	r2, [r7, #64]	; 0x40
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800797a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e5      	bne.n	8007954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	61fb      	str	r3, [r7, #28]
   return(result);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f023 0301 	bic.w	r3, r3, #1
 800799e:	64bb      	str	r3, [r7, #72]	; 0x48
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3314      	adds	r3, #20
 80079a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e5      	bne.n	8007988 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d119      	bne.n	80079f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330c      	adds	r3, #12
 80079ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f023 0310 	bic.w	r3, r3, #16
 80079da:	647b      	str	r3, [r7, #68]	; 0x44
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079e4:	61ba      	str	r2, [r7, #24]
 80079e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	6979      	ldr	r1, [r7, #20]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	e841 2300 	strex	r3, r2, [r1]
 80079f0:	613b      	str	r3, [r7, #16]
   return(result);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e5      	bne.n	80079c4 <UART_EndRxTransfer+0x78>
=======
 800922c:	b480      	push	{r7}
 800922e:	b095      	sub	sp, #84	; 0x54
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800924a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	330c      	adds	r3, #12
 8009252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009254:	643a      	str	r2, [r7, #64]	; 0x40
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800925a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e5      	bne.n	8009234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3314      	adds	r3, #20
 800926e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	61fb      	str	r3, [r7, #28]
   return(result);
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	f023 0301 	bic.w	r3, r3, #1
 800927e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3314      	adds	r3, #20
 8009286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800928a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800928e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e5      	bne.n	8009268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d119      	bne.n	80092d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f023 0310 	bic.w	r3, r3, #16
 80092ba:	647b      	str	r3, [r7, #68]	; 0x44
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	330c      	adds	r3, #12
 80092c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c4:	61ba      	str	r2, [r7, #24]
 80092c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6979      	ldr	r1, [r7, #20]
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	613b      	str	r3, [r7, #16]
   return(result);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e5      	bne.n	80092a4 <UART_EndRxTransfer+0x78>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a06:	bf00      	nop
 8007a08:	3754      	adds	r7, #84	; 0x54
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
	...

08007a14 <UART_SetConfig>:
=======
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2220      	movs	r2, #32
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092e6:	bf00      	nop
 80092e8:	3754      	adds	r7, #84	; 0x54
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
	...

080092f4 <UART_SetConfig>:
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a18:	b0c0      	sub	sp, #256	; 0x100
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
=======
 80092f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092f8:	b0c0      	sub	sp, #256	; 0x100
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a30:	68d9      	ldr	r1, [r3, #12]
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	ea40 0301 	orr.w	r3, r0, r1
 8007a3c:	6113      	str	r3, [r2, #16]
=======
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800930c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009310:	68d9      	ldr	r1, [r3, #12]
 8009312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	ea40 0301 	orr.w	r3, r0, r1
 800931c:	6113      	str	r3, [r2, #16]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8007a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a6c:	f021 010c 	bic.w	r1, r1, #12
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	60d3      	str	r3, [r2, #12]
=======
 800931e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	431a      	orrs	r2, r3
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	431a      	orrs	r2, r3
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800934c:	f021 010c 	bic.w	r1, r1, #12
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800935a:	430b      	orrs	r3, r1
 800935c:	60d3      	str	r3, [r2, #12]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8e:	6999      	ldr	r1, [r3, #24]
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	ea40 0301 	orr.w	r3, r0, r1
 8007a9a:	6153      	str	r3, [r2, #20]
=======
 800935e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936e:	6999      	ldr	r1, [r3, #24]
 8009370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	ea40 0301 	orr.w	r3, r0, r1
 800937a:	6153      	str	r3, [r2, #20]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b8f      	ldr	r3, [pc, #572]	; (8007ce0 <UART_SetConfig+0x2cc>)
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d005      	beq.n	8007ab4 <UART_SetConfig+0xa0>
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <UART_SetConfig+0x2d0>)
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d104      	bne.n	8007abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ab4:	f7fd fcee 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 8007ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007abc:	e003      	b.n	8007ac6 <UART_SetConfig+0xb2>
=======
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4b8f      	ldr	r3, [pc, #572]	; (80095c0 <UART_SetConfig+0x2cc>)
 8009384:	429a      	cmp	r2, r3
 8009386:	d005      	beq.n	8009394 <UART_SetConfig+0xa0>
 8009388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	4b8d      	ldr	r3, [pc, #564]	; (80095c4 <UART_SetConfig+0x2d0>)
 8009390:	429a      	cmp	r2, r3
 8009392:	d104      	bne.n	800939e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009394:	f7fd fcee 	bl	8006d74 <HAL_RCC_GetPCLK2Freq>
 8009398:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800939c:	e003      	b.n	80093a6 <UART_SetConfig+0xb2>
>>>>>>> parent of feb78f6 (本番パフォーマンス)
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8007abe:	f7fd fcd5 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8007ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad0:	f040 810c 	bne.w	8007cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	1891      	adds	r1, r2, r2
 8007aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8007aee:	415b      	adcs	r3, r3
 8007af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007af6:	4621      	mov	r1, r4
 8007af8:	eb12 0801 	adds.w	r8, r2, r1
 8007afc:	4629      	mov	r1, r5
 8007afe:	eb43 0901 	adc.w	r9, r3, r1
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b16:	4690      	mov	r8, r2
 8007b18:	4699      	mov	r9, r3
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	eb18 0303 	adds.w	r3, r8, r3
 8007b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b24:	462b      	mov	r3, r5
 8007b26:	eb49 0303 	adc.w	r3, r9, r3
 8007b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b42:	460b      	mov	r3, r1
 8007b44:	18db      	adds	r3, r3, r3
 8007b46:	653b      	str	r3, [r7, #80]	; 0x50
 8007b48:	4613      	mov	r3, r2
 8007b4a:	eb42 0303 	adc.w	r3, r2, r3
 8007b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b58:	f7f9 f83a 	bl	8000bd0 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4b61      	ldr	r3, [pc, #388]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007b62:	fba3 2302 	umull	r2, r3, r3, r2
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	011c      	lsls	r4, r3, #4
 8007b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b84:	415b      	adcs	r3, r3
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007b92:	4649      	mov	r1, r9
 8007b94:	eb43 0b01 	adc.w	fp, r3, r1
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bac:	4692      	mov	sl, r2
 8007bae:	469b      	mov	fp, r3
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8007bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	18db      	adds	r3, r3, r3
 8007bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bde:	4613      	mov	r3, r2
 8007be0:	eb42 0303 	adc.w	r3, r2, r3
 8007be4:	647b      	str	r3, [r7, #68]	; 0x44
 8007be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bee:	f7f8 ffef 	bl	8000bd0 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	2264      	movs	r2, #100	; 0x64
 8007c02:	fb02 f303 	mul.w	r3, r2, r3
 8007c06:	1acb      	subs	r3, r1, r3
 8007c08:	00db      	lsls	r3, r3, #3
 8007c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c0e:	4b36      	ldr	r3, [pc, #216]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007c10:	fba3 2302 	umull	r2, r3, r3, r2
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c1c:	441c      	add	r4, r3
 8007c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c30:	4642      	mov	r2, r8
 8007c32:	464b      	mov	r3, r9
 8007c34:	1891      	adds	r1, r2, r2
 8007c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c38:	415b      	adcs	r3, r3
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c40:	4641      	mov	r1, r8
 8007c42:	1851      	adds	r1, r2, r1
 8007c44:	6339      	str	r1, [r7, #48]	; 0x30
 8007c46:	4649      	mov	r1, r9
 8007c48:	414b      	adcs	r3, r1
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c58:	4659      	mov	r1, fp
 8007c5a:	00cb      	lsls	r3, r1, #3
 8007c5c:	4651      	mov	r1, sl
 8007c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c62:	4651      	mov	r1, sl
 8007c64:	00ca      	lsls	r2, r1, #3
 8007c66:	4610      	mov	r0, r2
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	189b      	adds	r3, r3, r2
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	464b      	mov	r3, r9
 8007c76:	460a      	mov	r2, r1
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c94:	460b      	mov	r3, r1
 8007c96:	18db      	adds	r3, r3, r3
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007caa:	f7f8 ff91 	bl	8000bd0 <__aeabi_uldivmod>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	2164      	movs	r1, #100	; 0x64
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	3332      	adds	r3, #50	; 0x32
 8007cc6:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <UART_SetConfig+0x2d4>)
 8007cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	f003 0207 	and.w	r2, r3, #7
 8007cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4422      	add	r2, r4
 8007cda:	609a      	str	r2, [r3, #8]
=======
 800939e:	f7fd fcd5 	bl	8006d4c <HAL_RCC_GetPCLK1Freq>
 80093a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093b0:	f040 810c 	bne.w	80095cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093c6:	4622      	mov	r2, r4
 80093c8:	462b      	mov	r3, r5
 80093ca:	1891      	adds	r1, r2, r2
 80093cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80093ce:	415b      	adcs	r3, r3
 80093d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093d6:	4621      	mov	r1, r4
 80093d8:	eb12 0801 	adds.w	r8, r2, r1
 80093dc:	4629      	mov	r1, r5
 80093de:	eb43 0901 	adc.w	r9, r3, r1
 80093e2:	f04f 0200 	mov.w	r2, #0
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093f6:	4690      	mov	r8, r2
 80093f8:	4699      	mov	r9, r3
 80093fa:	4623      	mov	r3, r4
 80093fc:	eb18 0303 	adds.w	r3, r8, r3
 8009400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009404:	462b      	mov	r3, r5
 8009406:	eb49 0303 	adc.w	r3, r9, r3
 800940a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800940e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800941a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800941e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009422:	460b      	mov	r3, r1
 8009424:	18db      	adds	r3, r3, r3
 8009426:	653b      	str	r3, [r7, #80]	; 0x50
 8009428:	4613      	mov	r3, r2
 800942a:	eb42 0303 	adc.w	r3, r2, r3
 800942e:	657b      	str	r3, [r7, #84]	; 0x54
 8009430:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009434:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009438:	f7f7 fbca 	bl	8000bd0 <__aeabi_uldivmod>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4b61      	ldr	r3, [pc, #388]	; (80095c8 <UART_SetConfig+0x2d4>)
 8009442:	fba3 2302 	umull	r2, r3, r3, r2
 8009446:	095b      	lsrs	r3, r3, #5
 8009448:	011c      	lsls	r4, r3, #4
 800944a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800944e:	2200      	movs	r2, #0
 8009450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009454:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009458:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800945c:	4642      	mov	r2, r8
 800945e:	464b      	mov	r3, r9
 8009460:	1891      	adds	r1, r2, r2
 8009462:	64b9      	str	r1, [r7, #72]	; 0x48
 8009464:	415b      	adcs	r3, r3
 8009466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009468:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800946c:	4641      	mov	r1, r8
 800946e:	eb12 0a01 	adds.w	sl, r2, r1
 8009472:	4649      	mov	r1, r9
 8009474:	eb43 0b01 	adc.w	fp, r3, r1
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800948c:	4692      	mov	sl, r2
 800948e:	469b      	mov	fp, r3
 8009490:	4643      	mov	r3, r8
 8009492:	eb1a 0303 	adds.w	r3, sl, r3
 8009496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800949a:	464b      	mov	r3, r9
 800949c:	eb4b 0303 	adc.w	r3, fp, r3
 80094a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094b8:	460b      	mov	r3, r1
 80094ba:	18db      	adds	r3, r3, r3
 80094bc:	643b      	str	r3, [r7, #64]	; 0x40
 80094be:	4613      	mov	r3, r2
 80094c0:	eb42 0303 	adc.w	r3, r2, r3
 80094c4:	647b      	str	r3, [r7, #68]	; 0x44
 80094c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094ce:	f7f7 fb7f 	bl	8000bd0 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	4b3b      	ldr	r3, [pc, #236]	; (80095c8 <UART_SetConfig+0x2d4>)
 80094da:	fba3 2301 	umull	r2, r3, r3, r1
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2264      	movs	r2, #100	; 0x64
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	1acb      	subs	r3, r1, r3
 80094e8:	00db      	lsls	r3, r3, #3
 80094ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094ee:	4b36      	ldr	r3, [pc, #216]	; (80095c8 <UART_SetConfig+0x2d4>)
 80094f0:	fba3 2302 	umull	r2, r3, r3, r2
 80094f4:	095b      	lsrs	r3, r3, #5
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094fc:	441c      	add	r4, r3
 80094fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009502:	2200      	movs	r2, #0
 8009504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009508:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800950c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	1891      	adds	r1, r2, r2
 8009516:	63b9      	str	r1, [r7, #56]	; 0x38
 8009518:	415b      	adcs	r3, r3
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800951c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009520:	4641      	mov	r1, r8
 8009522:	1851      	adds	r1, r2, r1
 8009524:	6339      	str	r1, [r7, #48]	; 0x30
 8009526:	4649      	mov	r1, r9
 8009528:	414b      	adcs	r3, r1
 800952a:	637b      	str	r3, [r7, #52]	; 0x34
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009538:	4659      	mov	r1, fp
 800953a:	00cb      	lsls	r3, r1, #3
 800953c:	4651      	mov	r1, sl
 800953e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009542:	4651      	mov	r1, sl
 8009544:	00ca      	lsls	r2, r1, #3
 8009546:	4610      	mov	r0, r2
 8009548:	4619      	mov	r1, r3
 800954a:	4603      	mov	r3, r0
 800954c:	4642      	mov	r2, r8
 800954e:	189b      	adds	r3, r3, r2
 8009550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009554:	464b      	mov	r3, r9
 8009556:	460a      	mov	r2, r1
 8009558:	eb42 0303 	adc.w	r3, r2, r3
 800955c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800956c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009574:	460b      	mov	r3, r1
 8009576:	18db      	adds	r3, r3, r3
 8009578:	62bb      	str	r3, [r7, #40]	; 0x28
 800957a:	4613      	mov	r3, r2
 800957c:	eb42 0303 	adc.w	r3, r2, r3
 8009580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800958a:	f7f7 fb21 	bl	8000bd0 <__aeabi_uldivmod>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4b0d      	ldr	r3, [pc, #52]	; (80095c8 <UART_SetConfig+0x2d4>)
 8009594:	fba3 1302 	umull	r1, r3, r3, r2
 8009598:	095b      	lsrs	r3, r3, #5
 800959a:	2164      	movs	r1, #100	; 0x64
 800959c:	fb01 f303 	mul.w	r3, r1, r3
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	3332      	adds	r3, #50	; 0x32
 80095a6:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <UART_SetConfig+0x2d4>)
 80095a8:	fba2 2303 	umull	r2, r3, r2, r3
 80095ac:	095b      	lsrs	r3, r3, #5
 80095ae:	f003 0207 	and.w	r2, r3, #7
 80095b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4422      	add	r2, r4
 80095ba:	609a      	str	r2, [r3, #8]
>>>>>>> parent of feb78f6 (本番パフォーマンス)
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 8007cdc:	e105      	b.n	8007eea <UART_SetConfig+0x4d6>
 8007cde:	bf00      	nop
 8007ce0:	40011000 	.word	0x40011000
 8007ce4:	40011400 	.word	0x40011400
 8007ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cfe:	4642      	mov	r2, r8
 8007d00:	464b      	mov	r3, r9
 8007d02:	1891      	adds	r1, r2, r2
 8007d04:	6239      	str	r1, [r7, #32]
 8007d06:	415b      	adcs	r3, r3
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d0e:	4641      	mov	r1, r8
 8007d10:	1854      	adds	r4, r2, r1
 8007d12:	4649      	mov	r1, r9
 8007d14:	eb43 0501 	adc.w	r5, r3, r1
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	00eb      	lsls	r3, r5, #3
 8007d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d26:	00e2      	lsls	r2, r4, #3
 8007d28:	4614      	mov	r4, r2
 8007d2a:	461d      	mov	r5, r3
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	18e3      	adds	r3, r4, r3
 8007d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d34:	464b      	mov	r3, r9
 8007d36:	eb45 0303 	adc.w	r3, r5, r3
 8007d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	f04f 0300 	mov.w	r3, #0
 8007d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	008b      	lsls	r3, r1, #2
 8007d5e:	4621      	mov	r1, r4
 8007d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d64:	4621      	mov	r1, r4
 8007d66:	008a      	lsls	r2, r1, #2
 8007d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d6c:	f7f8 ff30 	bl	8000bd0 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4b60      	ldr	r3, [pc, #384]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007d76:	fba3 2302 	umull	r2, r3, r3, r2
 8007d7a:	095b      	lsrs	r3, r3, #5
 8007d7c:	011c      	lsls	r4, r3, #4
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	61b9      	str	r1, [r7, #24]
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da0:	4641      	mov	r1, r8
 8007da2:	1851      	adds	r1, r2, r1
 8007da4:	6139      	str	r1, [r7, #16]
 8007da6:	4649      	mov	r1, r9
 8007da8:	414b      	adcs	r3, r1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007db8:	4659      	mov	r1, fp
 8007dba:	00cb      	lsls	r3, r1, #3
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc2:	4651      	mov	r1, sl
 8007dc4:	00ca      	lsls	r2, r1, #3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	189b      	adds	r3, r3, r2
 8007dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	eb42 0303 	adc.w	r3, r2, r3
 8007ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007df8:	4649      	mov	r1, r9
 8007dfa:	008b      	lsls	r3, r1, #2
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e02:	4641      	mov	r1, r8
 8007e04:	008a      	lsls	r2, r1, #2
 8007e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e0a:	f7f8 fee1 	bl	8000bd0 <__aeabi_uldivmod>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4b39      	ldr	r3, [pc, #228]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	2164      	movs	r1, #100	; 0x64
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	3332      	adds	r3, #50	; 0x32
 8007e26:	4a34      	ldr	r2, [pc, #208]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e32:	441c      	add	r4, r3
 8007e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e38:	2200      	movs	r2, #0
 8007e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8007e3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e42:	4642      	mov	r2, r8
 8007e44:	464b      	mov	r3, r9
 8007e46:	1891      	adds	r1, r2, r2
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	415b      	adcs	r3, r3
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e52:	4641      	mov	r1, r8
 8007e54:	1851      	adds	r1, r2, r1
 8007e56:	6039      	str	r1, [r7, #0]
 8007e58:	4649      	mov	r1, r9
 8007e5a:	414b      	adcs	r3, r1
 8007e5c:	607b      	str	r3, [r7, #4]
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	00cb      	lsls	r3, r1, #3
 8007e6e:	4651      	mov	r1, sl
 8007e70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e74:	4651      	mov	r1, sl
 8007e76:	00ca      	lsls	r2, r1, #3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4642      	mov	r2, r8
 8007e80:	189b      	adds	r3, r3, r2
 8007e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e84:	464b      	mov	r3, r9
 8007e86:	460a      	mov	r2, r1
 8007e88:	eb42 0303 	adc.w	r3, r2, r3
 8007e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	663b      	str	r3, [r7, #96]	; 0x60
 8007e98:	667a      	str	r2, [r7, #100]	; 0x64
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	008b      	lsls	r3, r1, #2
 8007eaa:	4641      	mov	r1, r8
 8007eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb0:	4641      	mov	r1, r8
 8007eb2:	008a      	lsls	r2, r1, #2
 8007eb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eb8:	f7f8 fe8a 	bl	8000bd0 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4b0d      	ldr	r3, [pc, #52]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	2164      	movs	r1, #100	; 0x64
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	3332      	adds	r3, #50	; 0x32
 8007ed4:	4a08      	ldr	r2, [pc, #32]	; (8007ef8 <UART_SetConfig+0x4e4>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f003 020f 	and.w	r2, r3, #15
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4422      	add	r2, r4
 8007ee8:	609a      	str	r2, [r3, #8]
}
 8007eea:	bf00      	nop
 8007eec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ef6:	bf00      	nop
 8007ef8:	51eb851f 	.word	0x51eb851f

08007efc <__cxa_guard_acquire>:
 8007efc:	6803      	ldr	r3, [r0, #0]
 8007efe:	07db      	lsls	r3, r3, #31
 8007f00:	d406      	bmi.n	8007f10 <__cxa_guard_acquire+0x14>
 8007f02:	7843      	ldrb	r3, [r0, #1]
 8007f04:	b103      	cbz	r3, 8007f08 <__cxa_guard_acquire+0xc>
 8007f06:	deff      	udf	#255	; 0xff
 8007f08:	2301      	movs	r3, #1
 8007f0a:	7043      	strb	r3, [r0, #1]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	4770      	bx	lr
 8007f10:	2000      	movs	r0, #0
 8007f12:	4770      	bx	lr

08007f14 <__cxa_guard_release>:
 8007f14:	2301      	movs	r3, #1
 8007f16:	6003      	str	r3, [r0, #0]
 8007f18:	4770      	bx	lr

08007f1a <copysign>:
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	ec51 0b10 	vmov	r0, r1, d0
 8007f20:	ed8d 1b00 	vstr	d1, [sp]
 8007f24:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8007f28:	9901      	ldr	r1, [sp, #4]
 8007f2a:	ee10 2a10 	vmov	r2, s0
 8007f2e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007f32:	ea40 0301 	orr.w	r3, r0, r1
 8007f36:	ec43 2b10 	vmov	d0, r2, r3
 8007f3a:	b002      	add	sp, #8
 8007f3c:	4770      	bx	lr
	...

08007f40 <asin>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	ed2d 8b02 	vpush	{d8}
 8007f46:	ec55 4b10 	vmov	r4, r5, d0
 8007f4a:	f000 f85d 	bl	8008008 <__ieee754_asin>
 8007f4e:	4622      	mov	r2, r4
 8007f50:	462b      	mov	r3, r5
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	eeb0 8a40 	vmov.f32	s16, s0
 8007f5a:	eef0 8a60 	vmov.f32	s17, s1
 8007f5e:	f7f8 fda9 	bl	8000ab4 <__aeabi_dcmpun>
 8007f62:	b9a8      	cbnz	r0, 8007f90 <asin+0x50>
 8007f64:	ec45 4b10 	vmov	d0, r4, r5
 8007f68:	f000 fd7e 	bl	8008a68 <fabs>
 8007f6c:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <asin+0x60>)
 8007f6e:	ec51 0b10 	vmov	r0, r1, d0
 8007f72:	2200      	movs	r2, #0
 8007f74:	f7f8 fd94 	bl	8000aa0 <__aeabi_dcmpgt>
 8007f78:	b150      	cbz	r0, 8007f90 <asin+0x50>
 8007f7a:	f000 fd89 	bl	8008a90 <__errno>
 8007f7e:	ecbd 8b02 	vpop	{d8}
 8007f82:	2321      	movs	r3, #33	; 0x21
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f8a:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <asin+0x64>)
 8007f8c:	f000 bd78 	b.w	8008a80 <nan>
 8007f90:	eeb0 0a48 	vmov.f32	s0, s16
 8007f94:	eef0 0a68 	vmov.f32	s1, s17
 8007f98:	ecbd 8b02 	vpop	{d8}
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
 8007f9e:	bf00      	nop
 8007fa0:	3ff00000 	.word	0x3ff00000
 8007fa4:	08008b48 	.word	0x08008b48

08007fa8 <atan2>:
 8007fa8:	f000 ba42 	b.w	8008430 <__ieee754_atan2>

08007fac <sqrt>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	ed2d 8b02 	vpush	{d8}
 8007fb2:	ec55 4b10 	vmov	r4, r5, d0
 8007fb6:	f000 fb05 	bl	80085c4 <__ieee754_sqrt>
 8007fba:	4622      	mov	r2, r4
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	eeb0 8a40 	vmov.f32	s16, s0
 8007fc6:	eef0 8a60 	vmov.f32	s17, s1
 8007fca:	f7f8 fd73 	bl	8000ab4 <__aeabi_dcmpun>
 8007fce:	b990      	cbnz	r0, 8007ff6 <sqrt+0x4a>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 fd44 	bl	8000a64 <__aeabi_dcmplt>
 8007fdc:	b158      	cbz	r0, 8007ff6 <sqrt+0x4a>
 8007fde:	f000 fd57 	bl	8008a90 <__errno>
 8007fe2:	2321      	movs	r3, #33	; 0x21
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4610      	mov	r0, r2
 8007fec:	4619      	mov	r1, r3
 8007fee:	f7f8 fbf1 	bl	80007d4 <__aeabi_ddiv>
 8007ff2:	ec41 0b18 	vmov	d8, r0, r1
 8007ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8007ffa:	eef0 0a68 	vmov.f32	s1, s17
 8007ffe:	ecbd 8b02 	vpop	{d8}
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	0000      	movs	r0, r0
	...

08008008 <__ieee754_asin>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	ed2d 8b04 	vpush	{d8-d9}
 8008010:	ec55 4b10 	vmov	r4, r5, d0
 8008014:	4bcc      	ldr	r3, [pc, #816]	; (8008348 <__ieee754_asin+0x340>)
 8008016:	b083      	sub	sp, #12
 8008018:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800801c:	4598      	cmp	r8, r3
 800801e:	9501      	str	r5, [sp, #4]
 8008020:	dd35      	ble.n	800808e <__ieee754_asin+0x86>
 8008022:	ee10 3a10 	vmov	r3, s0
 8008026:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800802a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800802e:	ea58 0303 	orrs.w	r3, r8, r3
 8008032:	d117      	bne.n	8008064 <__ieee754_asin+0x5c>
 8008034:	a3aa      	add	r3, pc, #680	; (adr r3, 80082e0 <__ieee754_asin+0x2d8>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	ee10 0a10 	vmov	r0, s0
 800803e:	4629      	mov	r1, r5
 8008040:	f7f8 fa9e 	bl	8000580 <__aeabi_dmul>
 8008044:	a3a8      	add	r3, pc, #672	; (adr r3, 80082e8 <__ieee754_asin+0x2e0>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	4606      	mov	r6, r0
 800804c:	460f      	mov	r7, r1
 800804e:	4620      	mov	r0, r4
 8008050:	4629      	mov	r1, r5
 8008052:	f7f8 fa95 	bl	8000580 <__aeabi_dmul>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 f8d9 	bl	8000214 <__adddf3>
 8008062:	e00b      	b.n	800807c <__ieee754_asin+0x74>
 8008064:	ee10 2a10 	vmov	r2, s0
 8008068:	462b      	mov	r3, r5
 800806a:	ee10 0a10 	vmov	r0, s0
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 f8ce 	bl	8000210 <__aeabi_dsub>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	f7f8 fbac 	bl	80007d4 <__aeabi_ddiv>
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	ec45 4b10 	vmov	d0, r4, r5
 8008084:	b003      	add	sp, #12
 8008086:	ecbd 8b04 	vpop	{d8-d9}
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	4baf      	ldr	r3, [pc, #700]	; (800834c <__ieee754_asin+0x344>)
 8008090:	4598      	cmp	r8, r3
 8008092:	dc11      	bgt.n	80080b8 <__ieee754_asin+0xb0>
 8008094:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008098:	f280 80ae 	bge.w	80081f8 <__ieee754_asin+0x1f0>
 800809c:	a394      	add	r3, pc, #592	; (adr r3, 80082f0 <__ieee754_asin+0x2e8>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	ee10 0a10 	vmov	r0, s0
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 f8b4 	bl	8000214 <__adddf3>
 80080ac:	4ba8      	ldr	r3, [pc, #672]	; (8008350 <__ieee754_asin+0x348>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	f7f8 fcf6 	bl	8000aa0 <__aeabi_dcmpgt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1e3      	bne.n	8008080 <__ieee754_asin+0x78>
 80080b8:	ec45 4b10 	vmov	d0, r4, r5
 80080bc:	f000 fcd4 	bl	8008a68 <fabs>
 80080c0:	49a3      	ldr	r1, [pc, #652]	; (8008350 <__ieee754_asin+0x348>)
 80080c2:	ec53 2b10 	vmov	r2, r3, d0
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7f8 f8a2 	bl	8000210 <__aeabi_dsub>
 80080cc:	4ba1      	ldr	r3, [pc, #644]	; (8008354 <__ieee754_asin+0x34c>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	f7f8 fa56 	bl	8000580 <__aeabi_dmul>
 80080d4:	a388      	add	r3, pc, #544	; (adr r3, 80082f8 <__ieee754_asin+0x2f0>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	4604      	mov	r4, r0
 80080dc:	460d      	mov	r5, r1
 80080de:	f7f8 fa4f 	bl	8000580 <__aeabi_dmul>
 80080e2:	a387      	add	r3, pc, #540	; (adr r3, 8008300 <__ieee754_asin+0x2f8>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f894 	bl	8000214 <__adddf3>
 80080ec:	4622      	mov	r2, r4
 80080ee:	462b      	mov	r3, r5
 80080f0:	f7f8 fa46 	bl	8000580 <__aeabi_dmul>
 80080f4:	a384      	add	r3, pc, #528	; (adr r3, 8008308 <__ieee754_asin+0x300>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f889 	bl	8000210 <__aeabi_dsub>
 80080fe:	4622      	mov	r2, r4
 8008100:	462b      	mov	r3, r5
 8008102:	f7f8 fa3d 	bl	8000580 <__aeabi_dmul>
 8008106:	a382      	add	r3, pc, #520	; (adr r3, 8008310 <__ieee754_asin+0x308>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f882 	bl	8000214 <__adddf3>
 8008110:	4622      	mov	r2, r4
 8008112:	462b      	mov	r3, r5
 8008114:	f7f8 fa34 	bl	8000580 <__aeabi_dmul>
 8008118:	a37f      	add	r3, pc, #508	; (adr r3, 8008318 <__ieee754_asin+0x310>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 f877 	bl	8000210 <__aeabi_dsub>
 8008122:	4622      	mov	r2, r4
 8008124:	462b      	mov	r3, r5
 8008126:	f7f8 fa2b 	bl	8000580 <__aeabi_dmul>
 800812a:	a37d      	add	r3, pc, #500	; (adr r3, 8008320 <__ieee754_asin+0x318>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f870 	bl	8000214 <__adddf3>
 8008134:	4622      	mov	r2, r4
 8008136:	462b      	mov	r3, r5
 8008138:	f7f8 fa22 	bl	8000580 <__aeabi_dmul>
 800813c:	a37a      	add	r3, pc, #488	; (adr r3, 8008328 <__ieee754_asin+0x320>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	ec41 0b18 	vmov	d8, r0, r1
 8008146:	4620      	mov	r0, r4
 8008148:	4629      	mov	r1, r5
 800814a:	f7f8 fa19 	bl	8000580 <__aeabi_dmul>
 800814e:	a378      	add	r3, pc, #480	; (adr r3, 8008330 <__ieee754_asin+0x328>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f85c 	bl	8000210 <__aeabi_dsub>
 8008158:	4622      	mov	r2, r4
 800815a:	462b      	mov	r3, r5
 800815c:	f7f8 fa10 	bl	8000580 <__aeabi_dmul>
 8008160:	a375      	add	r3, pc, #468	; (adr r3, 8008338 <__ieee754_asin+0x330>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f855 	bl	8000214 <__adddf3>
 800816a:	4622      	mov	r2, r4
 800816c:	462b      	mov	r3, r5
 800816e:	f7f8 fa07 	bl	8000580 <__aeabi_dmul>
 8008172:	a373      	add	r3, pc, #460	; (adr r3, 8008340 <__ieee754_asin+0x338>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f84a 	bl	8000210 <__aeabi_dsub>
 800817c:	4622      	mov	r2, r4
 800817e:	462b      	mov	r3, r5
 8008180:	f7f8 f9fe 	bl	8000580 <__aeabi_dmul>
 8008184:	4b72      	ldr	r3, [pc, #456]	; (8008350 <__ieee754_asin+0x348>)
 8008186:	2200      	movs	r2, #0
 8008188:	f7f8 f844 	bl	8000214 <__adddf3>
 800818c:	ec45 4b10 	vmov	d0, r4, r5
 8008190:	4606      	mov	r6, r0
 8008192:	460f      	mov	r7, r1
 8008194:	f000 fa16 	bl	80085c4 <__ieee754_sqrt>
 8008198:	4b6f      	ldr	r3, [pc, #444]	; (8008358 <__ieee754_asin+0x350>)
 800819a:	4598      	cmp	r8, r3
 800819c:	ec5b ab10 	vmov	sl, fp, d0
 80081a0:	f340 80dc 	ble.w	800835c <__ieee754_asin+0x354>
 80081a4:	4632      	mov	r2, r6
 80081a6:	463b      	mov	r3, r7
 80081a8:	ec51 0b18 	vmov	r0, r1, d8
 80081ac:	f7f8 fb12 	bl	80007d4 <__aeabi_ddiv>
 80081b0:	4652      	mov	r2, sl
 80081b2:	465b      	mov	r3, fp
 80081b4:	f7f8 f9e4 	bl	8000580 <__aeabi_dmul>
 80081b8:	4652      	mov	r2, sl
 80081ba:	465b      	mov	r3, fp
 80081bc:	f7f8 f82a 	bl	8000214 <__adddf3>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	f7f8 f826 	bl	8000214 <__adddf3>
 80081c8:	a347      	add	r3, pc, #284	; (adr r3, 80082e8 <__ieee754_asin+0x2e0>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 f81f 	bl	8000210 <__aeabi_dsub>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	a142      	add	r1, pc, #264	; (adr r1, 80082e0 <__ieee754_asin+0x2d8>)
 80081d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081dc:	f7f8 f818 	bl	8000210 <__aeabi_dsub>
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	bfdc      	itt	le
 80081e6:	4602      	movle	r2, r0
 80081e8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	bfdc      	itt	le
 80081f2:	4614      	movle	r4, r2
 80081f4:	461d      	movle	r5, r3
 80081f6:	e743      	b.n	8008080 <__ieee754_asin+0x78>
 80081f8:	ee10 2a10 	vmov	r2, s0
 80081fc:	ee10 0a10 	vmov	r0, s0
 8008200:	462b      	mov	r3, r5
 8008202:	4629      	mov	r1, r5
 8008204:	f7f8 f9bc 	bl	8000580 <__aeabi_dmul>
 8008208:	a33b      	add	r3, pc, #236	; (adr r3, 80082f8 <__ieee754_asin+0x2f0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	4606      	mov	r6, r0
 8008210:	460f      	mov	r7, r1
 8008212:	f7f8 f9b5 	bl	8000580 <__aeabi_dmul>
 8008216:	a33a      	add	r3, pc, #232	; (adr r3, 8008300 <__ieee754_asin+0x2f8>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f7 fffa 	bl	8000214 <__adddf3>
 8008220:	4632      	mov	r2, r6
 8008222:	463b      	mov	r3, r7
 8008224:	f7f8 f9ac 	bl	8000580 <__aeabi_dmul>
 8008228:	a337      	add	r3, pc, #220	; (adr r3, 8008308 <__ieee754_asin+0x300>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f7 ffef 	bl	8000210 <__aeabi_dsub>
 8008232:	4632      	mov	r2, r6
 8008234:	463b      	mov	r3, r7
 8008236:	f7f8 f9a3 	bl	8000580 <__aeabi_dmul>
 800823a:	a335      	add	r3, pc, #212	; (adr r3, 8008310 <__ieee754_asin+0x308>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f7f7 ffe8 	bl	8000214 <__adddf3>
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	f7f8 f99a 	bl	8000580 <__aeabi_dmul>
 800824c:	a332      	add	r3, pc, #200	; (adr r3, 8008318 <__ieee754_asin+0x310>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f7 ffdd 	bl	8000210 <__aeabi_dsub>
 8008256:	4632      	mov	r2, r6
 8008258:	463b      	mov	r3, r7
 800825a:	f7f8 f991 	bl	8000580 <__aeabi_dmul>
 800825e:	a330      	add	r3, pc, #192	; (adr r3, 8008320 <__ieee754_asin+0x318>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f7 ffd6 	bl	8000214 <__adddf3>
 8008268:	4632      	mov	r2, r6
 800826a:	463b      	mov	r3, r7
 800826c:	f7f8 f988 	bl	8000580 <__aeabi_dmul>
 8008270:	a32d      	add	r3, pc, #180	; (adr r3, 8008328 <__ieee754_asin+0x320>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	4680      	mov	r8, r0
 8008278:	4689      	mov	r9, r1
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f8 f97f 	bl	8000580 <__aeabi_dmul>
 8008282:	a32b      	add	r3, pc, #172	; (adr r3, 8008330 <__ieee754_asin+0x328>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f7 ffc2 	bl	8000210 <__aeabi_dsub>
 800828c:	4632      	mov	r2, r6
 800828e:	463b      	mov	r3, r7
 8008290:	f7f8 f976 	bl	8000580 <__aeabi_dmul>
 8008294:	a328      	add	r3, pc, #160	; (adr r3, 8008338 <__ieee754_asin+0x330>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f7 ffbb 	bl	8000214 <__adddf3>
 800829e:	4632      	mov	r2, r6
 80082a0:	463b      	mov	r3, r7
 80082a2:	f7f8 f96d 	bl	8000580 <__aeabi_dmul>
 80082a6:	a326      	add	r3, pc, #152	; (adr r3, 8008340 <__ieee754_asin+0x338>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f7f7 ffb0 	bl	8000210 <__aeabi_dsub>
 80082b0:	4632      	mov	r2, r6
 80082b2:	463b      	mov	r3, r7
 80082b4:	f7f8 f964 	bl	8000580 <__aeabi_dmul>
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <__ieee754_asin+0x348>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	f7f7 ffaa 	bl	8000214 <__adddf3>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 fa84 	bl	80007d4 <__aeabi_ddiv>
 80082cc:	4622      	mov	r2, r4
 80082ce:	462b      	mov	r3, r5
 80082d0:	f7f8 f956 	bl	8000580 <__aeabi_dmul>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	e6bf      	b.n	800805e <__ieee754_asin+0x56>
 80082de:	bf00      	nop
 80082e0:	54442d18 	.word	0x54442d18
 80082e4:	3ff921fb 	.word	0x3ff921fb
 80082e8:	33145c07 	.word	0x33145c07
 80082ec:	3c91a626 	.word	0x3c91a626
 80082f0:	8800759c 	.word	0x8800759c
 80082f4:	7e37e43c 	.word	0x7e37e43c
 80082f8:	0dfdf709 	.word	0x0dfdf709
 80082fc:	3f023de1 	.word	0x3f023de1
 8008300:	7501b288 	.word	0x7501b288
 8008304:	3f49efe0 	.word	0x3f49efe0
 8008308:	b5688f3b 	.word	0xb5688f3b
 800830c:	3fa48228 	.word	0x3fa48228
 8008310:	0e884455 	.word	0x0e884455
 8008314:	3fc9c155 	.word	0x3fc9c155
 8008318:	03eb6f7d 	.word	0x03eb6f7d
 800831c:	3fd4d612 	.word	0x3fd4d612
 8008320:	55555555 	.word	0x55555555
 8008324:	3fc55555 	.word	0x3fc55555
 8008328:	b12e9282 	.word	0xb12e9282
 800832c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008330:	1b8d0159 	.word	0x1b8d0159
 8008334:	3fe6066c 	.word	0x3fe6066c
 8008338:	9c598ac8 	.word	0x9c598ac8
 800833c:	40002ae5 	.word	0x40002ae5
 8008340:	1c8a2d4b 	.word	0x1c8a2d4b
 8008344:	40033a27 	.word	0x40033a27
 8008348:	3fefffff 	.word	0x3fefffff
 800834c:	3fdfffff 	.word	0x3fdfffff
 8008350:	3ff00000 	.word	0x3ff00000
 8008354:	3fe00000 	.word	0x3fe00000
 8008358:	3fef3332 	.word	0x3fef3332
 800835c:	ee10 2a10 	vmov	r2, s0
 8008360:	ee10 0a10 	vmov	r0, s0
 8008364:	465b      	mov	r3, fp
 8008366:	4659      	mov	r1, fp
 8008368:	f7f7 ff54 	bl	8000214 <__adddf3>
 800836c:	4632      	mov	r2, r6
 800836e:	463b      	mov	r3, r7
 8008370:	ec41 0b19 	vmov	d9, r0, r1
 8008374:	ec51 0b18 	vmov	r0, r1, d8
 8008378:	f7f8 fa2c 	bl	80007d4 <__aeabi_ddiv>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	ec51 0b19 	vmov	r0, r1, d9
 8008384:	f7f8 f8fc 	bl	8000580 <__aeabi_dmul>
 8008388:	f04f 0800 	mov.w	r8, #0
 800838c:	4606      	mov	r6, r0
 800838e:	460f      	mov	r7, r1
 8008390:	4642      	mov	r2, r8
 8008392:	465b      	mov	r3, fp
 8008394:	4640      	mov	r0, r8
 8008396:	4659      	mov	r1, fp
 8008398:	f7f8 f8f2 	bl	8000580 <__aeabi_dmul>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4620      	mov	r0, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	f7f7 ff34 	bl	8000210 <__aeabi_dsub>
 80083a8:	4642      	mov	r2, r8
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
 80083ae:	465b      	mov	r3, fp
 80083b0:	4650      	mov	r0, sl
 80083b2:	4659      	mov	r1, fp
 80083b4:	f7f7 ff2e 	bl	8000214 <__adddf3>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4620      	mov	r0, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	f7f8 fa08 	bl	80007d4 <__aeabi_ddiv>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	f7f7 ff24 	bl	8000214 <__adddf3>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	a113      	add	r1, pc, #76	; (adr r1, 8008420 <__ieee754_asin+0x418>)
 80083d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083d6:	f7f7 ff1b 	bl	8000210 <__aeabi_dsub>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4630      	mov	r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7f7 ff15 	bl	8000210 <__aeabi_dsub>
 80083e6:	4642      	mov	r2, r8
 80083e8:	4604      	mov	r4, r0
 80083ea:	460d      	mov	r5, r1
 80083ec:	465b      	mov	r3, fp
 80083ee:	4640      	mov	r0, r8
 80083f0:	4659      	mov	r1, fp
 80083f2:	f7f7 ff0f 	bl	8000214 <__adddf3>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	a10b      	add	r1, pc, #44	; (adr r1, 8008428 <__ieee754_asin+0x420>)
 80083fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008400:	f7f7 ff06 	bl	8000210 <__aeabi_dsub>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4620      	mov	r0, r4
 800840a:	4629      	mov	r1, r5
 800840c:	f7f7 ff00 	bl	8000210 <__aeabi_dsub>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	a104      	add	r1, pc, #16	; (adr r1, 8008428 <__ieee754_asin+0x420>)
 8008416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800841a:	e6df      	b.n	80081dc <__ieee754_asin+0x1d4>
 800841c:	f3af 8000 	nop.w
 8008420:	33145c07 	.word	0x33145c07
 8008424:	3c91a626 	.word	0x3c91a626
 8008428:	54442d18 	.word	0x54442d18
 800842c:	3fe921fb 	.word	0x3fe921fb

08008430 <__ieee754_atan2>:
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008434:	ec57 6b11 	vmov	r6, r7, d1
 8008438:	4273      	negs	r3, r6
 800843a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80085c0 <__ieee754_atan2+0x190>
 800843e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008442:	4333      	orrs	r3, r6
 8008444:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008448:	4573      	cmp	r3, lr
 800844a:	ec51 0b10 	vmov	r0, r1, d0
 800844e:	ee11 8a10 	vmov	r8, s2
 8008452:	d80a      	bhi.n	800846a <__ieee754_atan2+0x3a>
 8008454:	4244      	negs	r4, r0
 8008456:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800845a:	4304      	orrs	r4, r0
 800845c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008460:	4574      	cmp	r4, lr
 8008462:	ee10 9a10 	vmov	r9, s0
 8008466:	468c      	mov	ip, r1
 8008468:	d907      	bls.n	800847a <__ieee754_atan2+0x4a>
 800846a:	4632      	mov	r2, r6
 800846c:	463b      	mov	r3, r7
 800846e:	f7f7 fed1 	bl	8000214 <__adddf3>
 8008472:	ec41 0b10 	vmov	d0, r0, r1
 8008476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800847e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008482:	4334      	orrs	r4, r6
 8008484:	d103      	bne.n	800848e <__ieee754_atan2+0x5e>
 8008486:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848a:	f000 b94d 	b.w	8008728 <atan>
 800848e:	17bc      	asrs	r4, r7, #30
 8008490:	f004 0402 	and.w	r4, r4, #2
 8008494:	ea53 0909 	orrs.w	r9, r3, r9
 8008498:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800849c:	d107      	bne.n	80084ae <__ieee754_atan2+0x7e>
 800849e:	2c02      	cmp	r4, #2
 80084a0:	d060      	beq.n	8008564 <__ieee754_atan2+0x134>
 80084a2:	2c03      	cmp	r4, #3
 80084a4:	d1e5      	bne.n	8008472 <__ieee754_atan2+0x42>
 80084a6:	a142      	add	r1, pc, #264	; (adr r1, 80085b0 <__ieee754_atan2+0x180>)
 80084a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ac:	e7e1      	b.n	8008472 <__ieee754_atan2+0x42>
 80084ae:	ea52 0808 	orrs.w	r8, r2, r8
 80084b2:	d106      	bne.n	80084c2 <__ieee754_atan2+0x92>
 80084b4:	f1bc 0f00 	cmp.w	ip, #0
 80084b8:	da5f      	bge.n	800857a <__ieee754_atan2+0x14a>
 80084ba:	a13f      	add	r1, pc, #252	; (adr r1, 80085b8 <__ieee754_atan2+0x188>)
 80084bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c0:	e7d7      	b.n	8008472 <__ieee754_atan2+0x42>
 80084c2:	4572      	cmp	r2, lr
 80084c4:	d10f      	bne.n	80084e6 <__ieee754_atan2+0xb6>
 80084c6:	4293      	cmp	r3, r2
 80084c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80084cc:	d107      	bne.n	80084de <__ieee754_atan2+0xae>
 80084ce:	2c02      	cmp	r4, #2
 80084d0:	d84c      	bhi.n	800856c <__ieee754_atan2+0x13c>
 80084d2:	4b35      	ldr	r3, [pc, #212]	; (80085a8 <__ieee754_atan2+0x178>)
 80084d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80084d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80084dc:	e7c9      	b.n	8008472 <__ieee754_atan2+0x42>
 80084de:	2c02      	cmp	r4, #2
 80084e0:	d848      	bhi.n	8008574 <__ieee754_atan2+0x144>
 80084e2:	4b32      	ldr	r3, [pc, #200]	; (80085ac <__ieee754_atan2+0x17c>)
 80084e4:	e7f6      	b.n	80084d4 <__ieee754_atan2+0xa4>
 80084e6:	4573      	cmp	r3, lr
 80084e8:	d0e4      	beq.n	80084b4 <__ieee754_atan2+0x84>
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80084f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80084f4:	da1e      	bge.n	8008534 <__ieee754_atan2+0x104>
 80084f6:	2f00      	cmp	r7, #0
 80084f8:	da01      	bge.n	80084fe <__ieee754_atan2+0xce>
 80084fa:	323c      	adds	r2, #60	; 0x3c
 80084fc:	db1e      	blt.n	800853c <__ieee754_atan2+0x10c>
 80084fe:	4632      	mov	r2, r6
 8008500:	463b      	mov	r3, r7
 8008502:	f7f8 f967 	bl	80007d4 <__aeabi_ddiv>
 8008506:	ec41 0b10 	vmov	d0, r0, r1
 800850a:	f000 faad 	bl	8008a68 <fabs>
 800850e:	f000 f90b 	bl	8008728 <atan>
 8008512:	ec51 0b10 	vmov	r0, r1, d0
 8008516:	2c01      	cmp	r4, #1
 8008518:	d013      	beq.n	8008542 <__ieee754_atan2+0x112>
 800851a:	2c02      	cmp	r4, #2
 800851c:	d015      	beq.n	800854a <__ieee754_atan2+0x11a>
 800851e:	2c00      	cmp	r4, #0
 8008520:	d0a7      	beq.n	8008472 <__ieee754_atan2+0x42>
 8008522:	a319      	add	r3, pc, #100	; (adr r3, 8008588 <__ieee754_atan2+0x158>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f7f7 fe72 	bl	8000210 <__aeabi_dsub>
 800852c:	a318      	add	r3, pc, #96	; (adr r3, 8008590 <__ieee754_atan2+0x160>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	e014      	b.n	800855e <__ieee754_atan2+0x12e>
 8008534:	a118      	add	r1, pc, #96	; (adr r1, 8008598 <__ieee754_atan2+0x168>)
 8008536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800853a:	e7ec      	b.n	8008516 <__ieee754_atan2+0xe6>
 800853c:	2000      	movs	r0, #0
 800853e:	2100      	movs	r1, #0
 8008540:	e7e9      	b.n	8008516 <__ieee754_atan2+0xe6>
 8008542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008546:	4619      	mov	r1, r3
 8008548:	e793      	b.n	8008472 <__ieee754_atan2+0x42>
 800854a:	a30f      	add	r3, pc, #60	; (adr r3, 8008588 <__ieee754_atan2+0x158>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f7 fe5e 	bl	8000210 <__aeabi_dsub>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	a10d      	add	r1, pc, #52	; (adr r1, 8008590 <__ieee754_atan2+0x160>)
 800855a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800855e:	f7f7 fe57 	bl	8000210 <__aeabi_dsub>
 8008562:	e786      	b.n	8008472 <__ieee754_atan2+0x42>
 8008564:	a10a      	add	r1, pc, #40	; (adr r1, 8008590 <__ieee754_atan2+0x160>)
 8008566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800856a:	e782      	b.n	8008472 <__ieee754_atan2+0x42>
 800856c:	a10c      	add	r1, pc, #48	; (adr r1, 80085a0 <__ieee754_atan2+0x170>)
 800856e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008572:	e77e      	b.n	8008472 <__ieee754_atan2+0x42>
 8008574:	2000      	movs	r0, #0
 8008576:	2100      	movs	r1, #0
 8008578:	e77b      	b.n	8008472 <__ieee754_atan2+0x42>
 800857a:	a107      	add	r1, pc, #28	; (adr r1, 8008598 <__ieee754_atan2+0x168>)
 800857c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008580:	e777      	b.n	8008472 <__ieee754_atan2+0x42>
 8008582:	bf00      	nop
 8008584:	f3af 8000 	nop.w
 8008588:	33145c07 	.word	0x33145c07
 800858c:	3ca1a626 	.word	0x3ca1a626
 8008590:	54442d18 	.word	0x54442d18
 8008594:	400921fb 	.word	0x400921fb
 8008598:	54442d18 	.word	0x54442d18
 800859c:	3ff921fb 	.word	0x3ff921fb
 80085a0:	54442d18 	.word	0x54442d18
 80085a4:	3fe921fb 	.word	0x3fe921fb
 80085a8:	08008b50 	.word	0x08008b50
 80085ac:	08008b68 	.word	0x08008b68
 80085b0:	54442d18 	.word	0x54442d18
 80085b4:	c00921fb 	.word	0xc00921fb
 80085b8:	54442d18 	.word	0x54442d18
 80085bc:	bff921fb 	.word	0xbff921fb
 80085c0:	7ff00000 	.word	0x7ff00000

080085c4 <__ieee754_sqrt>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	ec55 4b10 	vmov	r4, r5, d0
 80085cc:	4e55      	ldr	r6, [pc, #340]	; (8008724 <__ieee754_sqrt+0x160>)
 80085ce:	43ae      	bics	r6, r5
 80085d0:	ee10 0a10 	vmov	r0, s0
 80085d4:	ee10 3a10 	vmov	r3, s0
 80085d8:	462a      	mov	r2, r5
 80085da:	4629      	mov	r1, r5
 80085dc:	d110      	bne.n	8008600 <__ieee754_sqrt+0x3c>
 80085de:	ee10 2a10 	vmov	r2, s0
 80085e2:	462b      	mov	r3, r5
 80085e4:	f7f7 ffcc 	bl	8000580 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4620      	mov	r0, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f7 fe10 	bl	8000214 <__adddf3>
 80085f4:	4604      	mov	r4, r0
 80085f6:	460d      	mov	r5, r1
 80085f8:	ec45 4b10 	vmov	d0, r4, r5
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	2d00      	cmp	r5, #0
 8008602:	dc10      	bgt.n	8008626 <__ieee754_sqrt+0x62>
 8008604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008608:	4330      	orrs	r0, r6
 800860a:	d0f5      	beq.n	80085f8 <__ieee754_sqrt+0x34>
 800860c:	b15d      	cbz	r5, 8008626 <__ieee754_sqrt+0x62>
 800860e:	ee10 2a10 	vmov	r2, s0
 8008612:	462b      	mov	r3, r5
 8008614:	ee10 0a10 	vmov	r0, s0
 8008618:	f7f7 fdfa 	bl	8000210 <__aeabi_dsub>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	f7f8 f8d8 	bl	80007d4 <__aeabi_ddiv>
 8008624:	e7e6      	b.n	80085f4 <__ieee754_sqrt+0x30>
 8008626:	1512      	asrs	r2, r2, #20
 8008628:	d074      	beq.n	8008714 <__ieee754_sqrt+0x150>
 800862a:	07d4      	lsls	r4, r2, #31
 800862c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008630:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008638:	bf5e      	ittt	pl
 800863a:	0fda      	lsrpl	r2, r3, #31
 800863c:	005b      	lslpl	r3, r3, #1
 800863e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008642:	2400      	movs	r4, #0
 8008644:	0fda      	lsrs	r2, r3, #31
 8008646:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800864a:	107f      	asrs	r7, r7, #1
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	2516      	movs	r5, #22
 8008650:	4620      	mov	r0, r4
 8008652:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008656:	1886      	adds	r6, r0, r2
 8008658:	428e      	cmp	r6, r1
 800865a:	bfde      	ittt	le
 800865c:	1b89      	suble	r1, r1, r6
 800865e:	18b0      	addle	r0, r6, r2
 8008660:	18a4      	addle	r4, r4, r2
 8008662:	0049      	lsls	r1, r1, #1
 8008664:	3d01      	subs	r5, #1
 8008666:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800866a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800866e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008672:	d1f0      	bne.n	8008656 <__ieee754_sqrt+0x92>
 8008674:	462a      	mov	r2, r5
 8008676:	f04f 0e20 	mov.w	lr, #32
 800867a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800867e:	4281      	cmp	r1, r0
 8008680:	eb06 0c05 	add.w	ip, r6, r5
 8008684:	dc02      	bgt.n	800868c <__ieee754_sqrt+0xc8>
 8008686:	d113      	bne.n	80086b0 <__ieee754_sqrt+0xec>
 8008688:	459c      	cmp	ip, r3
 800868a:	d811      	bhi.n	80086b0 <__ieee754_sqrt+0xec>
 800868c:	f1bc 0f00 	cmp.w	ip, #0
 8008690:	eb0c 0506 	add.w	r5, ip, r6
 8008694:	da43      	bge.n	800871e <__ieee754_sqrt+0x15a>
 8008696:	2d00      	cmp	r5, #0
 8008698:	db41      	blt.n	800871e <__ieee754_sqrt+0x15a>
 800869a:	f100 0801 	add.w	r8, r0, #1
 800869e:	1a09      	subs	r1, r1, r0
 80086a0:	459c      	cmp	ip, r3
 80086a2:	bf88      	it	hi
 80086a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80086a8:	eba3 030c 	sub.w	r3, r3, ip
 80086ac:	4432      	add	r2, r6
 80086ae:	4640      	mov	r0, r8
 80086b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80086b4:	f1be 0e01 	subs.w	lr, lr, #1
 80086b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80086bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80086c4:	d1db      	bne.n	800867e <__ieee754_sqrt+0xba>
 80086c6:	430b      	orrs	r3, r1
 80086c8:	d006      	beq.n	80086d8 <__ieee754_sqrt+0x114>
 80086ca:	1c50      	adds	r0, r2, #1
 80086cc:	bf13      	iteet	ne
 80086ce:	3201      	addne	r2, #1
 80086d0:	3401      	addeq	r4, #1
 80086d2:	4672      	moveq	r2, lr
 80086d4:	f022 0201 	bicne.w	r2, r2, #1
 80086d8:	1063      	asrs	r3, r4, #1
 80086da:	0852      	lsrs	r2, r2, #1
 80086dc:	07e1      	lsls	r1, r4, #31
 80086de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80086e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80086e6:	bf48      	it	mi
 80086e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80086ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80086f0:	4614      	mov	r4, r2
 80086f2:	e781      	b.n	80085f8 <__ieee754_sqrt+0x34>
 80086f4:	0ad9      	lsrs	r1, r3, #11
 80086f6:	3815      	subs	r0, #21
 80086f8:	055b      	lsls	r3, r3, #21
 80086fa:	2900      	cmp	r1, #0
 80086fc:	d0fa      	beq.n	80086f4 <__ieee754_sqrt+0x130>
 80086fe:	02cd      	lsls	r5, r1, #11
 8008700:	d50a      	bpl.n	8008718 <__ieee754_sqrt+0x154>
 8008702:	f1c2 0420 	rsb	r4, r2, #32
 8008706:	fa23 f404 	lsr.w	r4, r3, r4
 800870a:	1e55      	subs	r5, r2, #1
 800870c:	4093      	lsls	r3, r2
 800870e:	4321      	orrs	r1, r4
 8008710:	1b42      	subs	r2, r0, r5
 8008712:	e78a      	b.n	800862a <__ieee754_sqrt+0x66>
 8008714:	4610      	mov	r0, r2
 8008716:	e7f0      	b.n	80086fa <__ieee754_sqrt+0x136>
 8008718:	0049      	lsls	r1, r1, #1
 800871a:	3201      	adds	r2, #1
 800871c:	e7ef      	b.n	80086fe <__ieee754_sqrt+0x13a>
 800871e:	4680      	mov	r8, r0
 8008720:	e7bd      	b.n	800869e <__ieee754_sqrt+0xda>
 8008722:	bf00      	nop
 8008724:	7ff00000 	.word	0x7ff00000

08008728 <atan>:
 8008728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ec55 4b10 	vmov	r4, r5, d0
 8008730:	4bc3      	ldr	r3, [pc, #780]	; (8008a40 <atan+0x318>)
 8008732:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008736:	429e      	cmp	r6, r3
 8008738:	46ab      	mov	fp, r5
 800873a:	dd18      	ble.n	800876e <atan+0x46>
 800873c:	4bc1      	ldr	r3, [pc, #772]	; (8008a44 <atan+0x31c>)
 800873e:	429e      	cmp	r6, r3
 8008740:	dc01      	bgt.n	8008746 <atan+0x1e>
 8008742:	d109      	bne.n	8008758 <atan+0x30>
 8008744:	b144      	cbz	r4, 8008758 <atan+0x30>
 8008746:	4622      	mov	r2, r4
 8008748:	462b      	mov	r3, r5
 800874a:	4620      	mov	r0, r4
 800874c:	4629      	mov	r1, r5
 800874e:	f7f7 fd61 	bl	8000214 <__adddf3>
 8008752:	4604      	mov	r4, r0
 8008754:	460d      	mov	r5, r1
 8008756:	e006      	b.n	8008766 <atan+0x3e>
 8008758:	f1bb 0f00 	cmp.w	fp, #0
 800875c:	f300 8131 	bgt.w	80089c2 <atan+0x29a>
 8008760:	a59b      	add	r5, pc, #620	; (adr r5, 80089d0 <atan+0x2a8>)
 8008762:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008766:	ec45 4b10 	vmov	d0, r4, r5
 800876a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876e:	4bb6      	ldr	r3, [pc, #728]	; (8008a48 <atan+0x320>)
 8008770:	429e      	cmp	r6, r3
 8008772:	dc14      	bgt.n	800879e <atan+0x76>
 8008774:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008778:	429e      	cmp	r6, r3
 800877a:	dc0d      	bgt.n	8008798 <atan+0x70>
 800877c:	a396      	add	r3, pc, #600	; (adr r3, 80089d8 <atan+0x2b0>)
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	ee10 0a10 	vmov	r0, s0
 8008786:	4629      	mov	r1, r5
 8008788:	f7f7 fd44 	bl	8000214 <__adddf3>
 800878c:	4baf      	ldr	r3, [pc, #700]	; (8008a4c <atan+0x324>)
 800878e:	2200      	movs	r2, #0
 8008790:	f7f8 f986 	bl	8000aa0 <__aeabi_dcmpgt>
 8008794:	2800      	cmp	r0, #0
 8008796:	d1e6      	bne.n	8008766 <atan+0x3e>
 8008798:	f04f 3aff 	mov.w	sl, #4294967295
 800879c:	e02b      	b.n	80087f6 <atan+0xce>
 800879e:	f000 f963 	bl	8008a68 <fabs>
 80087a2:	4bab      	ldr	r3, [pc, #684]	; (8008a50 <atan+0x328>)
 80087a4:	429e      	cmp	r6, r3
 80087a6:	ec55 4b10 	vmov	r4, r5, d0
 80087aa:	f300 80bf 	bgt.w	800892c <atan+0x204>
 80087ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80087b2:	429e      	cmp	r6, r3
 80087b4:	f300 80a0 	bgt.w	80088f8 <atan+0x1d0>
 80087b8:	ee10 2a10 	vmov	r2, s0
 80087bc:	ee10 0a10 	vmov	r0, s0
 80087c0:	462b      	mov	r3, r5
 80087c2:	4629      	mov	r1, r5
 80087c4:	f7f7 fd26 	bl	8000214 <__adddf3>
 80087c8:	4ba0      	ldr	r3, [pc, #640]	; (8008a4c <atan+0x324>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	f7f7 fd20 	bl	8000210 <__aeabi_dsub>
 80087d0:	2200      	movs	r2, #0
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f7 fd19 	bl	8000214 <__adddf3>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	f7f7 fff3 	bl	80007d4 <__aeabi_ddiv>
 80087ee:	f04f 0a00 	mov.w	sl, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	460d      	mov	r5, r1
 80087f6:	4622      	mov	r2, r4
 80087f8:	462b      	mov	r3, r5
 80087fa:	4620      	mov	r0, r4
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7f7 febf 	bl	8000580 <__aeabi_dmul>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4680      	mov	r8, r0
 8008808:	4689      	mov	r9, r1
 800880a:	f7f7 feb9 	bl	8000580 <__aeabi_dmul>
 800880e:	a374      	add	r3, pc, #464	; (adr r3, 80089e0 <atan+0x2b8>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	4606      	mov	r6, r0
 8008816:	460f      	mov	r7, r1
 8008818:	f7f7 feb2 	bl	8000580 <__aeabi_dmul>
 800881c:	a372      	add	r3, pc, #456	; (adr r3, 80089e8 <atan+0x2c0>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f7f7 fcf7 	bl	8000214 <__adddf3>
 8008826:	4632      	mov	r2, r6
 8008828:	463b      	mov	r3, r7
 800882a:	f7f7 fea9 	bl	8000580 <__aeabi_dmul>
 800882e:	a370      	add	r3, pc, #448	; (adr r3, 80089f0 <atan+0x2c8>)
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f7f7 fcee 	bl	8000214 <__adddf3>
 8008838:	4632      	mov	r2, r6
 800883a:	463b      	mov	r3, r7
 800883c:	f7f7 fea0 	bl	8000580 <__aeabi_dmul>
 8008840:	a36d      	add	r3, pc, #436	; (adr r3, 80089f8 <atan+0x2d0>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fce5 	bl	8000214 <__adddf3>
 800884a:	4632      	mov	r2, r6
 800884c:	463b      	mov	r3, r7
 800884e:	f7f7 fe97 	bl	8000580 <__aeabi_dmul>
 8008852:	a36b      	add	r3, pc, #428	; (adr r3, 8008a00 <atan+0x2d8>)
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f7f7 fcdc 	bl	8000214 <__adddf3>
 800885c:	4632      	mov	r2, r6
 800885e:	463b      	mov	r3, r7
 8008860:	f7f7 fe8e 	bl	8000580 <__aeabi_dmul>
 8008864:	a368      	add	r3, pc, #416	; (adr r3, 8008a08 <atan+0x2e0>)
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f7f7 fcd3 	bl	8000214 <__adddf3>
 800886e:	4642      	mov	r2, r8
 8008870:	464b      	mov	r3, r9
 8008872:	f7f7 fe85 	bl	8000580 <__aeabi_dmul>
 8008876:	a366      	add	r3, pc, #408	; (adr r3, 8008a10 <atan+0x2e8>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	4680      	mov	r8, r0
 800887e:	4689      	mov	r9, r1
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f7 fe7c 	bl	8000580 <__aeabi_dmul>
 8008888:	a363      	add	r3, pc, #396	; (adr r3, 8008a18 <atan+0x2f0>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fcbf 	bl	8000210 <__aeabi_dsub>
 8008892:	4632      	mov	r2, r6
 8008894:	463b      	mov	r3, r7
 8008896:	f7f7 fe73 	bl	8000580 <__aeabi_dmul>
 800889a:	a361      	add	r3, pc, #388	; (adr r3, 8008a20 <atan+0x2f8>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	f7f7 fcb6 	bl	8000210 <__aeabi_dsub>
 80088a4:	4632      	mov	r2, r6
 80088a6:	463b      	mov	r3, r7
 80088a8:	f7f7 fe6a 	bl	8000580 <__aeabi_dmul>
 80088ac:	a35e      	add	r3, pc, #376	; (adr r3, 8008a28 <atan+0x300>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fcad 	bl	8000210 <__aeabi_dsub>
 80088b6:	4632      	mov	r2, r6
 80088b8:	463b      	mov	r3, r7
 80088ba:	f7f7 fe61 	bl	8000580 <__aeabi_dmul>
 80088be:	a35c      	add	r3, pc, #368	; (adr r3, 8008a30 <atan+0x308>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fca4 	bl	8000210 <__aeabi_dsub>
 80088c8:	4632      	mov	r2, r6
 80088ca:	463b      	mov	r3, r7
 80088cc:	f7f7 fe58 	bl	8000580 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4640      	mov	r0, r8
 80088d6:	4649      	mov	r1, r9
 80088d8:	f7f7 fc9c 	bl	8000214 <__adddf3>
 80088dc:	4622      	mov	r2, r4
 80088de:	462b      	mov	r3, r5
 80088e0:	f7f7 fe4e 	bl	8000580 <__aeabi_dmul>
 80088e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	d14b      	bne.n	8008986 <atan+0x25e>
 80088ee:	4620      	mov	r0, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	f7f7 fc8d 	bl	8000210 <__aeabi_dsub>
 80088f6:	e72c      	b.n	8008752 <atan+0x2a>
 80088f8:	ee10 0a10 	vmov	r0, s0
 80088fc:	4b53      	ldr	r3, [pc, #332]	; (8008a4c <atan+0x324>)
 80088fe:	2200      	movs	r2, #0
 8008900:	4629      	mov	r1, r5
 8008902:	f7f7 fc85 	bl	8000210 <__aeabi_dsub>
 8008906:	4b51      	ldr	r3, [pc, #324]	; (8008a4c <atan+0x324>)
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	2200      	movs	r2, #0
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f7 fc7f 	bl	8000214 <__adddf3>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 ff59 	bl	80007d4 <__aeabi_ddiv>
 8008922:	f04f 0a01 	mov.w	sl, #1
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	e764      	b.n	80087f6 <atan+0xce>
 800892c:	4b49      	ldr	r3, [pc, #292]	; (8008a54 <atan+0x32c>)
 800892e:	429e      	cmp	r6, r3
 8008930:	da1d      	bge.n	800896e <atan+0x246>
 8008932:	ee10 0a10 	vmov	r0, s0
 8008936:	4b48      	ldr	r3, [pc, #288]	; (8008a58 <atan+0x330>)
 8008938:	2200      	movs	r2, #0
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fc68 	bl	8000210 <__aeabi_dsub>
 8008940:	4b45      	ldr	r3, [pc, #276]	; (8008a58 <atan+0x330>)
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	2200      	movs	r2, #0
 8008948:	4620      	mov	r0, r4
 800894a:	4629      	mov	r1, r5
 800894c:	f7f7 fe18 	bl	8000580 <__aeabi_dmul>
 8008950:	4b3e      	ldr	r3, [pc, #248]	; (8008a4c <atan+0x324>)
 8008952:	2200      	movs	r2, #0
 8008954:	f7f7 fc5e 	bl	8000214 <__adddf3>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 ff38 	bl	80007d4 <__aeabi_ddiv>
 8008964:	f04f 0a02 	mov.w	sl, #2
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	e743      	b.n	80087f6 <atan+0xce>
 800896e:	462b      	mov	r3, r5
 8008970:	ee10 2a10 	vmov	r2, s0
 8008974:	4939      	ldr	r1, [pc, #228]	; (8008a5c <atan+0x334>)
 8008976:	2000      	movs	r0, #0
 8008978:	f7f7 ff2c 	bl	80007d4 <__aeabi_ddiv>
 800897c:	f04f 0a03 	mov.w	sl, #3
 8008980:	4604      	mov	r4, r0
 8008982:	460d      	mov	r5, r1
 8008984:	e737      	b.n	80087f6 <atan+0xce>
 8008986:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <atan+0x338>)
 8008988:	4e36      	ldr	r6, [pc, #216]	; (8008a64 <atan+0x33c>)
 800898a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800898e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008992:	e9da 2300 	ldrd	r2, r3, [sl]
 8008996:	f7f7 fc3b 	bl	8000210 <__aeabi_dsub>
 800899a:	4622      	mov	r2, r4
 800899c:	462b      	mov	r3, r5
 800899e:	f7f7 fc37 	bl	8000210 <__aeabi_dsub>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80089aa:	f7f7 fc31 	bl	8000210 <__aeabi_dsub>
 80089ae:	f1bb 0f00 	cmp.w	fp, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	460d      	mov	r5, r1
 80089b6:	f6bf aed6 	bge.w	8008766 <atan+0x3e>
 80089ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089be:	461d      	mov	r5, r3
 80089c0:	e6d1      	b.n	8008766 <atan+0x3e>
 80089c2:	a51d      	add	r5, pc, #116	; (adr r5, 8008a38 <atan+0x310>)
 80089c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80089c8:	e6cd      	b.n	8008766 <atan+0x3e>
 80089ca:	bf00      	nop
 80089cc:	f3af 8000 	nop.w
 80089d0:	54442d18 	.word	0x54442d18
 80089d4:	bff921fb 	.word	0xbff921fb
 80089d8:	8800759c 	.word	0x8800759c
 80089dc:	7e37e43c 	.word	0x7e37e43c
 80089e0:	e322da11 	.word	0xe322da11
 80089e4:	3f90ad3a 	.word	0x3f90ad3a
 80089e8:	24760deb 	.word	0x24760deb
 80089ec:	3fa97b4b 	.word	0x3fa97b4b
 80089f0:	a0d03d51 	.word	0xa0d03d51
 80089f4:	3fb10d66 	.word	0x3fb10d66
 80089f8:	c54c206e 	.word	0xc54c206e
 80089fc:	3fb745cd 	.word	0x3fb745cd
 8008a00:	920083ff 	.word	0x920083ff
 8008a04:	3fc24924 	.word	0x3fc24924
 8008a08:	5555550d 	.word	0x5555550d
 8008a0c:	3fd55555 	.word	0x3fd55555
 8008a10:	2c6a6c2f 	.word	0x2c6a6c2f
 8008a14:	bfa2b444 	.word	0xbfa2b444
 8008a18:	52defd9a 	.word	0x52defd9a
 8008a1c:	3fadde2d 	.word	0x3fadde2d
 8008a20:	af749a6d 	.word	0xaf749a6d
 8008a24:	3fb3b0f2 	.word	0x3fb3b0f2
 8008a28:	fe231671 	.word	0xfe231671
 8008a2c:	3fbc71c6 	.word	0x3fbc71c6
 8008a30:	9998ebc4 	.word	0x9998ebc4
 8008a34:	3fc99999 	.word	0x3fc99999
 8008a38:	54442d18 	.word	0x54442d18
 8008a3c:	3ff921fb 	.word	0x3ff921fb
 8008a40:	440fffff 	.word	0x440fffff
 8008a44:	7ff00000 	.word	0x7ff00000
 8008a48:	3fdbffff 	.word	0x3fdbffff
 8008a4c:	3ff00000 	.word	0x3ff00000
 8008a50:	3ff2ffff 	.word	0x3ff2ffff
 8008a54:	40038000 	.word	0x40038000
 8008a58:	3ff80000 	.word	0x3ff80000
 8008a5c:	bff00000 	.word	0xbff00000
 8008a60:	08008ba0 	.word	0x08008ba0
 8008a64:	08008b80 	.word	0x08008b80

08008a68 <fabs>:
 8008a68:	ec51 0b10 	vmov	r0, r1, d0
 8008a6c:	ee10 2a10 	vmov	r2, s0
 8008a70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a74:	ec43 2b10 	vmov	d0, r2, r3
 8008a78:	4770      	bx	lr
 8008a7a:	0000      	movs	r0, r0
 8008a7c:	0000      	movs	r0, r0
	...

08008a80 <nan>:
 8008a80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a88 <nan+0x8>
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	00000000 	.word	0x00000000
 8008a8c:	7ff80000 	.word	0x7ff80000

08008a90 <__errno>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <__errno+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000010 	.word	0x20000010

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1b64      	subs	r4, r4, r5
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	42a6      	cmp	r6, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4d0b      	ldr	r5, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f000 f82e 	bl	8008b10 <_init>
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2600      	movs	r6, #0
 8008aba:	42a6      	cmp	r6, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac4:	4798      	blx	r3
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ace:	4798      	blx	r3
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	08008bc8 	.word	0x08008bc8
 8008ad8:	08008bc8 	.word	0x08008bc8
 8008adc:	08008bc8 	.word	0x08008bc8
 8008ae0:	08008bd0 	.word	0x08008bd0

08008ae4 <memcpy>:
 8008ae4:	440a      	add	r2, r1
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aec:	d100      	bne.n	8008af0 <memcpy+0xc>
 8008aee:	4770      	bx	lr
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d1f9      	bne.n	8008af2 <memcpy+0xe>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <memset>:
 8008b00:	4402      	add	r2, r0
 8008b02:	4603      	mov	r3, r0
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
=======
 80095bc:	e105      	b.n	80097ca <UART_SetConfig+0x4d6>
 80095be:	bf00      	nop
 80095c0:	40011000 	.word	0x40011000
 80095c4:	40011400 	.word	0x40011400
 80095c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095de:	4642      	mov	r2, r8
 80095e0:	464b      	mov	r3, r9
 80095e2:	1891      	adds	r1, r2, r2
 80095e4:	6239      	str	r1, [r7, #32]
 80095e6:	415b      	adcs	r3, r3
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095ee:	4641      	mov	r1, r8
 80095f0:	1854      	adds	r4, r2, r1
 80095f2:	4649      	mov	r1, r9
 80095f4:	eb43 0501 	adc.w	r5, r3, r1
 80095f8:	f04f 0200 	mov.w	r2, #0
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	00eb      	lsls	r3, r5, #3
 8009602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009606:	00e2      	lsls	r2, r4, #3
 8009608:	4614      	mov	r4, r2
 800960a:	461d      	mov	r5, r3
 800960c:	4643      	mov	r3, r8
 800960e:	18e3      	adds	r3, r4, r3
 8009610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009614:	464b      	mov	r3, r9
 8009616:	eb45 0303 	adc.w	r3, r5, r3
 800961a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800962a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	f04f 0300 	mov.w	r3, #0
 8009636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800963a:	4629      	mov	r1, r5
 800963c:	008b      	lsls	r3, r1, #2
 800963e:	4621      	mov	r1, r4
 8009640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009644:	4621      	mov	r1, r4
 8009646:	008a      	lsls	r2, r1, #2
 8009648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800964c:	f7f7 fac0 	bl	8000bd0 <__aeabi_uldivmod>
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	4b60      	ldr	r3, [pc, #384]	; (80097d8 <UART_SetConfig+0x4e4>)
 8009656:	fba3 2302 	umull	r2, r3, r3, r2
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	011c      	lsls	r4, r3, #4
 800965e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009662:	2200      	movs	r2, #0
 8009664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009668:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800966c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009670:	4642      	mov	r2, r8
 8009672:	464b      	mov	r3, r9
 8009674:	1891      	adds	r1, r2, r2
 8009676:	61b9      	str	r1, [r7, #24]
 8009678:	415b      	adcs	r3, r3
 800967a:	61fb      	str	r3, [r7, #28]
 800967c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009680:	4641      	mov	r1, r8
 8009682:	1851      	adds	r1, r2, r1
 8009684:	6139      	str	r1, [r7, #16]
 8009686:	4649      	mov	r1, r9
 8009688:	414b      	adcs	r3, r1
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009698:	4659      	mov	r1, fp
 800969a:	00cb      	lsls	r3, r1, #3
 800969c:	4651      	mov	r1, sl
 800969e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096a2:	4651      	mov	r1, sl
 80096a4:	00ca      	lsls	r2, r1, #3
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	4642      	mov	r2, r8
 80096ae:	189b      	adds	r3, r3, r2
 80096b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096b4:	464b      	mov	r3, r9
 80096b6:	460a      	mov	r2, r1
 80096b8:	eb42 0303 	adc.w	r3, r2, r3
 80096bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096cc:	f04f 0200 	mov.w	r2, #0
 80096d0:	f04f 0300 	mov.w	r3, #0
 80096d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096d8:	4649      	mov	r1, r9
 80096da:	008b      	lsls	r3, r1, #2
 80096dc:	4641      	mov	r1, r8
 80096de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096e2:	4641      	mov	r1, r8
 80096e4:	008a      	lsls	r2, r1, #2
 80096e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096ea:	f7f7 fa71 	bl	8000bd0 <__aeabi_uldivmod>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4b39      	ldr	r3, [pc, #228]	; (80097d8 <UART_SetConfig+0x4e4>)
 80096f4:	fba3 1302 	umull	r1, r3, r3, r2
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	2164      	movs	r1, #100	; 0x64
 80096fc:	fb01 f303 	mul.w	r3, r1, r3
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	3332      	adds	r3, #50	; 0x32
 8009706:	4a34      	ldr	r2, [pc, #208]	; (80097d8 <UART_SetConfig+0x4e4>)
 8009708:	fba2 2303 	umull	r2, r3, r2, r3
 800970c:	095b      	lsrs	r3, r3, #5
 800970e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009712:	441c      	add	r4, r3
 8009714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009718:	2200      	movs	r2, #0
 800971a:	673b      	str	r3, [r7, #112]	; 0x70
 800971c:	677a      	str	r2, [r7, #116]	; 0x74
 800971e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009722:	4642      	mov	r2, r8
 8009724:	464b      	mov	r3, r9
 8009726:	1891      	adds	r1, r2, r2
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	415b      	adcs	r3, r3
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009732:	4641      	mov	r1, r8
 8009734:	1851      	adds	r1, r2, r1
 8009736:	6039      	str	r1, [r7, #0]
 8009738:	4649      	mov	r1, r9
 800973a:	414b      	adcs	r3, r1
 800973c:	607b      	str	r3, [r7, #4]
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800974a:	4659      	mov	r1, fp
 800974c:	00cb      	lsls	r3, r1, #3
 800974e:	4651      	mov	r1, sl
 8009750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009754:	4651      	mov	r1, sl
 8009756:	00ca      	lsls	r2, r1, #3
 8009758:	4610      	mov	r0, r2
 800975a:	4619      	mov	r1, r3
 800975c:	4603      	mov	r3, r0
 800975e:	4642      	mov	r2, r8
 8009760:	189b      	adds	r3, r3, r2
 8009762:	66bb      	str	r3, [r7, #104]	; 0x68
 8009764:	464b      	mov	r3, r9
 8009766:	460a      	mov	r2, r1
 8009768:	eb42 0303 	adc.w	r3, r2, r3
 800976c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800976e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	663b      	str	r3, [r7, #96]	; 0x60
 8009778:	667a      	str	r2, [r7, #100]	; 0x64
 800977a:	f04f 0200 	mov.w	r2, #0
 800977e:	f04f 0300 	mov.w	r3, #0
 8009782:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009786:	4649      	mov	r1, r9
 8009788:	008b      	lsls	r3, r1, #2
 800978a:	4641      	mov	r1, r8
 800978c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009790:	4641      	mov	r1, r8
 8009792:	008a      	lsls	r2, r1, #2
 8009794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009798:	f7f7 fa1a 	bl	8000bd0 <__aeabi_uldivmod>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <UART_SetConfig+0x4e4>)
 80097a2:	fba3 1302 	umull	r1, r3, r3, r2
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	2164      	movs	r1, #100	; 0x64
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	3332      	adds	r3, #50	; 0x32
 80097b4:	4a08      	ldr	r2, [pc, #32]	; (80097d8 <UART_SetConfig+0x4e4>)
 80097b6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ba:	095b      	lsrs	r3, r3, #5
 80097bc:	f003 020f 	and.w	r2, r3, #15
 80097c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4422      	add	r2, r4
 80097c8:	609a      	str	r2, [r3, #8]
}
 80097ca:	bf00      	nop
 80097cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097d0:	46bd      	mov	sp, r7
 80097d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097d6:	bf00      	nop
 80097d8:	51eb851f 	.word	0x51eb851f

080097dc <copysign>:
 80097dc:	b082      	sub	sp, #8
 80097de:	ec51 0b10 	vmov	r0, r1, d0
 80097e2:	ed8d 1b00 	vstr	d1, [sp]
 80097e6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80097ea:	9901      	ldr	r1, [sp, #4]
 80097ec:	ee10 2a10 	vmov	r2, s0
 80097f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80097f4:	ea40 0301 	orr.w	r3, r0, r1
 80097f8:	ec43 2b10 	vmov	d0, r2, r3
 80097fc:	b002      	add	sp, #8
 80097fe:	4770      	bx	lr

08009800 <cosf>:
 8009800:	ee10 3a10 	vmov	r3, s0
 8009804:	b507      	push	{r0, r1, r2, lr}
 8009806:	4a1e      	ldr	r2, [pc, #120]	; (8009880 <cosf+0x80>)
 8009808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800980c:	4293      	cmp	r3, r2
 800980e:	dc06      	bgt.n	800981e <cosf+0x1e>
 8009810:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009884 <cosf+0x84>
 8009814:	b003      	add	sp, #12
 8009816:	f85d eb04 	ldr.w	lr, [sp], #4
 800981a:	f000 bd65 	b.w	800a2e8 <__kernel_cosf>
 800981e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009822:	db04      	blt.n	800982e <cosf+0x2e>
 8009824:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009828:	b003      	add	sp, #12
 800982a:	f85d fb04 	ldr.w	pc, [sp], #4
 800982e:	4668      	mov	r0, sp
 8009830:	f000 fc1e 	bl	800a070 <__ieee754_rem_pio2f>
 8009834:	f000 0003 	and.w	r0, r0, #3
 8009838:	2801      	cmp	r0, #1
 800983a:	d009      	beq.n	8009850 <cosf+0x50>
 800983c:	2802      	cmp	r0, #2
 800983e:	d010      	beq.n	8009862 <cosf+0x62>
 8009840:	b9b0      	cbnz	r0, 8009870 <cosf+0x70>
 8009842:	eddd 0a01 	vldr	s1, [sp, #4]
 8009846:	ed9d 0a00 	vldr	s0, [sp]
 800984a:	f000 fd4d 	bl	800a2e8 <__kernel_cosf>
 800984e:	e7eb      	b.n	8009828 <cosf+0x28>
 8009850:	eddd 0a01 	vldr	s1, [sp, #4]
 8009854:	ed9d 0a00 	vldr	s0, [sp]
 8009858:	f001 f81c 	bl	800a894 <__kernel_sinf>
 800985c:	eeb1 0a40 	vneg.f32	s0, s0
 8009860:	e7e2      	b.n	8009828 <cosf+0x28>
 8009862:	eddd 0a01 	vldr	s1, [sp, #4]
 8009866:	ed9d 0a00 	vldr	s0, [sp]
 800986a:	f000 fd3d 	bl	800a2e8 <__kernel_cosf>
 800986e:	e7f5      	b.n	800985c <cosf+0x5c>
 8009870:	eddd 0a01 	vldr	s1, [sp, #4]
 8009874:	ed9d 0a00 	vldr	s0, [sp]
 8009878:	2001      	movs	r0, #1
 800987a:	f001 f80b 	bl	800a894 <__kernel_sinf>
 800987e:	e7d3      	b.n	8009828 <cosf+0x28>
 8009880:	3f490fd8 	.word	0x3f490fd8
 8009884:	00000000 	.word	0x00000000

08009888 <asin>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	ed2d 8b02 	vpush	{d8}
 800988e:	ec55 4b10 	vmov	r4, r5, d0
 8009892:	f000 f85d 	bl	8009950 <__ieee754_asin>
 8009896:	4622      	mov	r2, r4
 8009898:	462b      	mov	r3, r5
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	eeb0 8a40 	vmov.f32	s16, s0
 80098a2:	eef0 8a60 	vmov.f32	s17, s1
 80098a6:	f7f7 f905 	bl	8000ab4 <__aeabi_dcmpun>
 80098aa:	b9a8      	cbnz	r0, 80098d8 <asin+0x50>
 80098ac:	ec45 4b10 	vmov	d0, r4, r5
 80098b0:	f001 f9da 	bl	800ac68 <fabs>
 80098b4:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <asin+0x60>)
 80098b6:	ec51 0b10 	vmov	r0, r1, d0
 80098ba:	2200      	movs	r2, #0
 80098bc:	f7f7 f8f0 	bl	8000aa0 <__aeabi_dcmpgt>
 80098c0:	b150      	cbz	r0, 80098d8 <asin+0x50>
 80098c2:	f001 faa1 	bl	800ae08 <__errno>
 80098c6:	ecbd 8b02 	vpop	{d8}
 80098ca:	2321      	movs	r3, #33	; 0x21
 80098cc:	6003      	str	r3, [r0, #0]
 80098ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098d2:	4806      	ldr	r0, [pc, #24]	; (80098ec <asin+0x64>)
 80098d4:	f001 b9d4 	b.w	800ac80 <nan>
 80098d8:	eeb0 0a48 	vmov.f32	s0, s16
 80098dc:	eef0 0a68 	vmov.f32	s1, s17
 80098e0:	ecbd 8b02 	vpop	{d8}
 80098e4:	bd38      	pop	{r3, r4, r5, pc}
 80098e6:	bf00      	nop
 80098e8:	3ff00000 	.word	0x3ff00000
 80098ec:	0800aec0 	.word	0x0800aec0

080098f0 <atan2>:
 80098f0:	f000 ba42 	b.w	8009d78 <__ieee754_atan2>

080098f4 <sqrt>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	ed2d 8b02 	vpush	{d8}
 80098fa:	ec55 4b10 	vmov	r4, r5, d0
 80098fe:	f000 fb05 	bl	8009f0c <__ieee754_sqrt>
 8009902:	4622      	mov	r2, r4
 8009904:	462b      	mov	r3, r5
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	eeb0 8a40 	vmov.f32	s16, s0
 800990e:	eef0 8a60 	vmov.f32	s17, s1
 8009912:	f7f7 f8cf 	bl	8000ab4 <__aeabi_dcmpun>
 8009916:	b990      	cbnz	r0, 800993e <sqrt+0x4a>
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7f7 f8a0 	bl	8000a64 <__aeabi_dcmplt>
 8009924:	b158      	cbz	r0, 800993e <sqrt+0x4a>
 8009926:	f001 fa6f 	bl	800ae08 <__errno>
 800992a:	2321      	movs	r3, #33	; 0x21
 800992c:	6003      	str	r3, [r0, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	2300      	movs	r3, #0
 8009932:	4610      	mov	r0, r2
 8009934:	4619      	mov	r1, r3
 8009936:	f7f6 ff4d 	bl	80007d4 <__aeabi_ddiv>
 800993a:	ec41 0b18 	vmov	d8, r0, r1
 800993e:	eeb0 0a48 	vmov.f32	s0, s16
 8009942:	eef0 0a68 	vmov.f32	s1, s17
 8009946:	ecbd 8b02 	vpop	{d8}
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	0000      	movs	r0, r0
	...

08009950 <__ieee754_asin>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	ed2d 8b04 	vpush	{d8-d9}
 8009958:	ec55 4b10 	vmov	r4, r5, d0
 800995c:	4bcc      	ldr	r3, [pc, #816]	; (8009c90 <__ieee754_asin+0x340>)
 800995e:	b083      	sub	sp, #12
 8009960:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009964:	4598      	cmp	r8, r3
 8009966:	9501      	str	r5, [sp, #4]
 8009968:	dd35      	ble.n	80099d6 <__ieee754_asin+0x86>
 800996a:	ee10 3a10 	vmov	r3, s0
 800996e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009972:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009976:	ea58 0303 	orrs.w	r3, r8, r3
 800997a:	d117      	bne.n	80099ac <__ieee754_asin+0x5c>
 800997c:	a3aa      	add	r3, pc, #680	; (adr r3, 8009c28 <__ieee754_asin+0x2d8>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	ee10 0a10 	vmov	r0, s0
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 fdfa 	bl	8000580 <__aeabi_dmul>
 800998c:	a3a8      	add	r3, pc, #672	; (adr r3, 8009c30 <__ieee754_asin+0x2e0>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	4606      	mov	r6, r0
 8009994:	460f      	mov	r7, r1
 8009996:	4620      	mov	r0, r4
 8009998:	4629      	mov	r1, r5
 800999a:	f7f6 fdf1 	bl	8000580 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4630      	mov	r0, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	f7f6 fc35 	bl	8000214 <__adddf3>
 80099aa:	e00b      	b.n	80099c4 <__ieee754_asin+0x74>
 80099ac:	ee10 2a10 	vmov	r2, s0
 80099b0:	462b      	mov	r3, r5
 80099b2:	ee10 0a10 	vmov	r0, s0
 80099b6:	4629      	mov	r1, r5
 80099b8:	f7f6 fc2a 	bl	8000210 <__aeabi_dsub>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	f7f6 ff08 	bl	80007d4 <__aeabi_ddiv>
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	ec45 4b10 	vmov	d0, r4, r5
 80099cc:	b003      	add	sp, #12
 80099ce:	ecbd 8b04 	vpop	{d8-d9}
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	4baf      	ldr	r3, [pc, #700]	; (8009c94 <__ieee754_asin+0x344>)
 80099d8:	4598      	cmp	r8, r3
 80099da:	dc11      	bgt.n	8009a00 <__ieee754_asin+0xb0>
 80099dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80099e0:	f280 80ae 	bge.w	8009b40 <__ieee754_asin+0x1f0>
 80099e4:	a394      	add	r3, pc, #592	; (adr r3, 8009c38 <__ieee754_asin+0x2e8>)
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	ee10 0a10 	vmov	r0, s0
 80099ee:	4629      	mov	r1, r5
 80099f0:	f7f6 fc10 	bl	8000214 <__adddf3>
 80099f4:	4ba8      	ldr	r3, [pc, #672]	; (8009c98 <__ieee754_asin+0x348>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	f7f7 f852 	bl	8000aa0 <__aeabi_dcmpgt>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1e3      	bne.n	80099c8 <__ieee754_asin+0x78>
 8009a00:	ec45 4b10 	vmov	d0, r4, r5
 8009a04:	f001 f930 	bl	800ac68 <fabs>
 8009a08:	49a3      	ldr	r1, [pc, #652]	; (8009c98 <__ieee754_asin+0x348>)
 8009a0a:	ec53 2b10 	vmov	r2, r3, d0
 8009a0e:	2000      	movs	r0, #0
 8009a10:	f7f6 fbfe 	bl	8000210 <__aeabi_dsub>
 8009a14:	4ba1      	ldr	r3, [pc, #644]	; (8009c9c <__ieee754_asin+0x34c>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	f7f6 fdb2 	bl	8000580 <__aeabi_dmul>
 8009a1c:	a388      	add	r3, pc, #544	; (adr r3, 8009c40 <__ieee754_asin+0x2f0>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	4604      	mov	r4, r0
 8009a24:	460d      	mov	r5, r1
 8009a26:	f7f6 fdab 	bl	8000580 <__aeabi_dmul>
 8009a2a:	a387      	add	r3, pc, #540	; (adr r3, 8009c48 <__ieee754_asin+0x2f8>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f7f6 fbf0 	bl	8000214 <__adddf3>
 8009a34:	4622      	mov	r2, r4
 8009a36:	462b      	mov	r3, r5
 8009a38:	f7f6 fda2 	bl	8000580 <__aeabi_dmul>
 8009a3c:	a384      	add	r3, pc, #528	; (adr r3, 8009c50 <__ieee754_asin+0x300>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f6 fbe5 	bl	8000210 <__aeabi_dsub>
 8009a46:	4622      	mov	r2, r4
 8009a48:	462b      	mov	r3, r5
 8009a4a:	f7f6 fd99 	bl	8000580 <__aeabi_dmul>
 8009a4e:	a382      	add	r3, pc, #520	; (adr r3, 8009c58 <__ieee754_asin+0x308>)
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f7f6 fbde 	bl	8000214 <__adddf3>
 8009a58:	4622      	mov	r2, r4
 8009a5a:	462b      	mov	r3, r5
 8009a5c:	f7f6 fd90 	bl	8000580 <__aeabi_dmul>
 8009a60:	a37f      	add	r3, pc, #508	; (adr r3, 8009c60 <__ieee754_asin+0x310>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fbd3 	bl	8000210 <__aeabi_dsub>
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	f7f6 fd87 	bl	8000580 <__aeabi_dmul>
 8009a72:	a37d      	add	r3, pc, #500	; (adr r3, 8009c68 <__ieee754_asin+0x318>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f7f6 fbcc 	bl	8000214 <__adddf3>
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	462b      	mov	r3, r5
 8009a80:	f7f6 fd7e 	bl	8000580 <__aeabi_dmul>
 8009a84:	a37a      	add	r3, pc, #488	; (adr r3, 8009c70 <__ieee754_asin+0x320>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	ec41 0b18 	vmov	d8, r0, r1
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f6 fd75 	bl	8000580 <__aeabi_dmul>
 8009a96:	a378      	add	r3, pc, #480	; (adr r3, 8009c78 <__ieee754_asin+0x328>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f6 fbb8 	bl	8000210 <__aeabi_dsub>
 8009aa0:	4622      	mov	r2, r4
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	f7f6 fd6c 	bl	8000580 <__aeabi_dmul>
 8009aa8:	a375      	add	r3, pc, #468	; (adr r3, 8009c80 <__ieee754_asin+0x330>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	f7f6 fbb1 	bl	8000214 <__adddf3>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	f7f6 fd63 	bl	8000580 <__aeabi_dmul>
 8009aba:	a373      	add	r3, pc, #460	; (adr r3, 8009c88 <__ieee754_asin+0x338>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fba6 	bl	8000210 <__aeabi_dsub>
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	462b      	mov	r3, r5
 8009ac8:	f7f6 fd5a 	bl	8000580 <__aeabi_dmul>
 8009acc:	4b72      	ldr	r3, [pc, #456]	; (8009c98 <__ieee754_asin+0x348>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f7f6 fba0 	bl	8000214 <__adddf3>
 8009ad4:	ec45 4b10 	vmov	d0, r4, r5
 8009ad8:	4606      	mov	r6, r0
 8009ada:	460f      	mov	r7, r1
 8009adc:	f000 fa16 	bl	8009f0c <__ieee754_sqrt>
 8009ae0:	4b6f      	ldr	r3, [pc, #444]	; (8009ca0 <__ieee754_asin+0x350>)
 8009ae2:	4598      	cmp	r8, r3
 8009ae4:	ec5b ab10 	vmov	sl, fp, d0
 8009ae8:	f340 80dc 	ble.w	8009ca4 <__ieee754_asin+0x354>
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	ec51 0b18 	vmov	r0, r1, d8
 8009af4:	f7f6 fe6e 	bl	80007d4 <__aeabi_ddiv>
 8009af8:	4652      	mov	r2, sl
 8009afa:	465b      	mov	r3, fp
 8009afc:	f7f6 fd40 	bl	8000580 <__aeabi_dmul>
 8009b00:	4652      	mov	r2, sl
 8009b02:	465b      	mov	r3, fp
 8009b04:	f7f6 fb86 	bl	8000214 <__adddf3>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	f7f6 fb82 	bl	8000214 <__adddf3>
 8009b10:	a347      	add	r3, pc, #284	; (adr r3, 8009c30 <__ieee754_asin+0x2e0>)
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f7f6 fb7b 	bl	8000210 <__aeabi_dsub>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	a142      	add	r1, pc, #264	; (adr r1, 8009c28 <__ieee754_asin+0x2d8>)
 8009b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b24:	f7f6 fb74 	bl	8000210 <__aeabi_dsub>
 8009b28:	9b01      	ldr	r3, [sp, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bfdc      	itt	le
 8009b2e:	4602      	movle	r2, r0
 8009b30:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009b34:	4604      	mov	r4, r0
 8009b36:	460d      	mov	r5, r1
 8009b38:	bfdc      	itt	le
 8009b3a:	4614      	movle	r4, r2
 8009b3c:	461d      	movle	r5, r3
 8009b3e:	e743      	b.n	80099c8 <__ieee754_asin+0x78>
 8009b40:	ee10 2a10 	vmov	r2, s0
 8009b44:	ee10 0a10 	vmov	r0, s0
 8009b48:	462b      	mov	r3, r5
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fd18 	bl	8000580 <__aeabi_dmul>
 8009b50:	a33b      	add	r3, pc, #236	; (adr r3, 8009c40 <__ieee754_asin+0x2f0>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	4606      	mov	r6, r0
 8009b58:	460f      	mov	r7, r1
 8009b5a:	f7f6 fd11 	bl	8000580 <__aeabi_dmul>
 8009b5e:	a33a      	add	r3, pc, #232	; (adr r3, 8009c48 <__ieee754_asin+0x2f8>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7f6 fb56 	bl	8000214 <__adddf3>
 8009b68:	4632      	mov	r2, r6
 8009b6a:	463b      	mov	r3, r7
 8009b6c:	f7f6 fd08 	bl	8000580 <__aeabi_dmul>
 8009b70:	a337      	add	r3, pc, #220	; (adr r3, 8009c50 <__ieee754_asin+0x300>)
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f7f6 fb4b 	bl	8000210 <__aeabi_dsub>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	f7f6 fcff 	bl	8000580 <__aeabi_dmul>
 8009b82:	a335      	add	r3, pc, #212	; (adr r3, 8009c58 <__ieee754_asin+0x308>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 fb44 	bl	8000214 <__adddf3>
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	f7f6 fcf6 	bl	8000580 <__aeabi_dmul>
 8009b94:	a332      	add	r3, pc, #200	; (adr r3, 8009c60 <__ieee754_asin+0x310>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f7f6 fb39 	bl	8000210 <__aeabi_dsub>
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	463b      	mov	r3, r7
 8009ba2:	f7f6 fced 	bl	8000580 <__aeabi_dmul>
 8009ba6:	a330      	add	r3, pc, #192	; (adr r3, 8009c68 <__ieee754_asin+0x318>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f7f6 fb32 	bl	8000214 <__adddf3>
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	f7f6 fce4 	bl	8000580 <__aeabi_dmul>
 8009bb8:	a32d      	add	r3, pc, #180	; (adr r3, 8009c70 <__ieee754_asin+0x320>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	4689      	mov	r9, r1
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	f7f6 fcdb 	bl	8000580 <__aeabi_dmul>
 8009bca:	a32b      	add	r3, pc, #172	; (adr r3, 8009c78 <__ieee754_asin+0x328>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 fb1e 	bl	8000210 <__aeabi_dsub>
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	f7f6 fcd2 	bl	8000580 <__aeabi_dmul>
 8009bdc:	a328      	add	r3, pc, #160	; (adr r3, 8009c80 <__ieee754_asin+0x330>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f7f6 fb17 	bl	8000214 <__adddf3>
 8009be6:	4632      	mov	r2, r6
 8009be8:	463b      	mov	r3, r7
 8009bea:	f7f6 fcc9 	bl	8000580 <__aeabi_dmul>
 8009bee:	a326      	add	r3, pc, #152	; (adr r3, 8009c88 <__ieee754_asin+0x338>)
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f7f6 fb0c 	bl	8000210 <__aeabi_dsub>
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	f7f6 fcc0 	bl	8000580 <__aeabi_dmul>
 8009c00:	4b25      	ldr	r3, [pc, #148]	; (8009c98 <__ieee754_asin+0x348>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	f7f6 fb06 	bl	8000214 <__adddf3>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 fde0 	bl	80007d4 <__aeabi_ddiv>
 8009c14:	4622      	mov	r2, r4
 8009c16:	462b      	mov	r3, r5
 8009c18:	f7f6 fcb2 	bl	8000580 <__aeabi_dmul>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4620      	mov	r0, r4
 8009c22:	4629      	mov	r1, r5
 8009c24:	e6bf      	b.n	80099a6 <__ieee754_asin+0x56>
 8009c26:	bf00      	nop
 8009c28:	54442d18 	.word	0x54442d18
 8009c2c:	3ff921fb 	.word	0x3ff921fb
 8009c30:	33145c07 	.word	0x33145c07
 8009c34:	3c91a626 	.word	0x3c91a626
 8009c38:	8800759c 	.word	0x8800759c
 8009c3c:	7e37e43c 	.word	0x7e37e43c
 8009c40:	0dfdf709 	.word	0x0dfdf709
 8009c44:	3f023de1 	.word	0x3f023de1
 8009c48:	7501b288 	.word	0x7501b288
 8009c4c:	3f49efe0 	.word	0x3f49efe0
 8009c50:	b5688f3b 	.word	0xb5688f3b
 8009c54:	3fa48228 	.word	0x3fa48228
 8009c58:	0e884455 	.word	0x0e884455
 8009c5c:	3fc9c155 	.word	0x3fc9c155
 8009c60:	03eb6f7d 	.word	0x03eb6f7d
 8009c64:	3fd4d612 	.word	0x3fd4d612
 8009c68:	55555555 	.word	0x55555555
 8009c6c:	3fc55555 	.word	0x3fc55555
 8009c70:	b12e9282 	.word	0xb12e9282
 8009c74:	3fb3b8c5 	.word	0x3fb3b8c5
 8009c78:	1b8d0159 	.word	0x1b8d0159
 8009c7c:	3fe6066c 	.word	0x3fe6066c
 8009c80:	9c598ac8 	.word	0x9c598ac8
 8009c84:	40002ae5 	.word	0x40002ae5
 8009c88:	1c8a2d4b 	.word	0x1c8a2d4b
 8009c8c:	40033a27 	.word	0x40033a27
 8009c90:	3fefffff 	.word	0x3fefffff
 8009c94:	3fdfffff 	.word	0x3fdfffff
 8009c98:	3ff00000 	.word	0x3ff00000
 8009c9c:	3fe00000 	.word	0x3fe00000
 8009ca0:	3fef3332 	.word	0x3fef3332
 8009ca4:	ee10 2a10 	vmov	r2, s0
 8009ca8:	ee10 0a10 	vmov	r0, s0
 8009cac:	465b      	mov	r3, fp
 8009cae:	4659      	mov	r1, fp
 8009cb0:	f7f6 fab0 	bl	8000214 <__adddf3>
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	ec41 0b19 	vmov	d9, r0, r1
 8009cbc:	ec51 0b18 	vmov	r0, r1, d8
 8009cc0:	f7f6 fd88 	bl	80007d4 <__aeabi_ddiv>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	ec51 0b19 	vmov	r0, r1, d9
 8009ccc:	f7f6 fc58 	bl	8000580 <__aeabi_dmul>
 8009cd0:	f04f 0800 	mov.w	r8, #0
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	460f      	mov	r7, r1
 8009cd8:	4642      	mov	r2, r8
 8009cda:	465b      	mov	r3, fp
 8009cdc:	4640      	mov	r0, r8
 8009cde:	4659      	mov	r1, fp
 8009ce0:	f7f6 fc4e 	bl	8000580 <__aeabi_dmul>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4620      	mov	r0, r4
 8009cea:	4629      	mov	r1, r5
 8009cec:	f7f6 fa90 	bl	8000210 <__aeabi_dsub>
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	460d      	mov	r5, r1
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	4659      	mov	r1, fp
 8009cfc:	f7f6 fa8a 	bl	8000214 <__adddf3>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4620      	mov	r0, r4
 8009d06:	4629      	mov	r1, r5
 8009d08:	f7f6 fd64 	bl	80007d4 <__aeabi_ddiv>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	f7f6 fa80 	bl	8000214 <__adddf3>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	a113      	add	r1, pc, #76	; (adr r1, 8009d68 <__ieee754_asin+0x418>)
 8009d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d1e:	f7f6 fa77 	bl	8000210 <__aeabi_dsub>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4630      	mov	r0, r6
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 fa71 	bl	8000210 <__aeabi_dsub>
 8009d2e:	4642      	mov	r2, r8
 8009d30:	4604      	mov	r4, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	465b      	mov	r3, fp
 8009d36:	4640      	mov	r0, r8
 8009d38:	4659      	mov	r1, fp
 8009d3a:	f7f6 fa6b 	bl	8000214 <__adddf3>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	a10b      	add	r1, pc, #44	; (adr r1, 8009d70 <__ieee754_asin+0x420>)
 8009d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d48:	f7f6 fa62 	bl	8000210 <__aeabi_dsub>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4620      	mov	r0, r4
 8009d52:	4629      	mov	r1, r5
 8009d54:	f7f6 fa5c 	bl	8000210 <__aeabi_dsub>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	a104      	add	r1, pc, #16	; (adr r1, 8009d70 <__ieee754_asin+0x420>)
 8009d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d62:	e6df      	b.n	8009b24 <__ieee754_asin+0x1d4>
 8009d64:	f3af 8000 	nop.w
 8009d68:	33145c07 	.word	0x33145c07
 8009d6c:	3c91a626 	.word	0x3c91a626
 8009d70:	54442d18 	.word	0x54442d18
 8009d74:	3fe921fb 	.word	0x3fe921fb

08009d78 <__ieee754_atan2>:
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	ec57 6b11 	vmov	r6, r7, d1
 8009d80:	4273      	negs	r3, r6
 8009d82:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009f08 <__ieee754_atan2+0x190>
 8009d86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009d8a:	4333      	orrs	r3, r6
 8009d8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009d90:	4573      	cmp	r3, lr
 8009d92:	ec51 0b10 	vmov	r0, r1, d0
 8009d96:	ee11 8a10 	vmov	r8, s2
 8009d9a:	d80a      	bhi.n	8009db2 <__ieee754_atan2+0x3a>
 8009d9c:	4244      	negs	r4, r0
 8009d9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009da2:	4304      	orrs	r4, r0
 8009da4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009da8:	4574      	cmp	r4, lr
 8009daa:	ee10 9a10 	vmov	r9, s0
 8009dae:	468c      	mov	ip, r1
 8009db0:	d907      	bls.n	8009dc2 <__ieee754_atan2+0x4a>
 8009db2:	4632      	mov	r2, r6
 8009db4:	463b      	mov	r3, r7
 8009db6:	f7f6 fa2d 	bl	8000214 <__adddf3>
 8009dba:	ec41 0b10 	vmov	d0, r0, r1
 8009dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009dca:	4334      	orrs	r4, r6
 8009dcc:	d103      	bne.n	8009dd6 <__ieee754_atan2+0x5e>
 8009dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd2:	f000 bda9 	b.w	800a928 <atan>
 8009dd6:	17bc      	asrs	r4, r7, #30
 8009dd8:	f004 0402 	and.w	r4, r4, #2
 8009ddc:	ea53 0909 	orrs.w	r9, r3, r9
 8009de0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009de4:	d107      	bne.n	8009df6 <__ieee754_atan2+0x7e>
 8009de6:	2c02      	cmp	r4, #2
 8009de8:	d060      	beq.n	8009eac <__ieee754_atan2+0x134>
 8009dea:	2c03      	cmp	r4, #3
 8009dec:	d1e5      	bne.n	8009dba <__ieee754_atan2+0x42>
 8009dee:	a142      	add	r1, pc, #264	; (adr r1, 8009ef8 <__ieee754_atan2+0x180>)
 8009df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df4:	e7e1      	b.n	8009dba <__ieee754_atan2+0x42>
 8009df6:	ea52 0808 	orrs.w	r8, r2, r8
 8009dfa:	d106      	bne.n	8009e0a <__ieee754_atan2+0x92>
 8009dfc:	f1bc 0f00 	cmp.w	ip, #0
 8009e00:	da5f      	bge.n	8009ec2 <__ieee754_atan2+0x14a>
 8009e02:	a13f      	add	r1, pc, #252	; (adr r1, 8009f00 <__ieee754_atan2+0x188>)
 8009e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e08:	e7d7      	b.n	8009dba <__ieee754_atan2+0x42>
 8009e0a:	4572      	cmp	r2, lr
 8009e0c:	d10f      	bne.n	8009e2e <__ieee754_atan2+0xb6>
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e14:	d107      	bne.n	8009e26 <__ieee754_atan2+0xae>
 8009e16:	2c02      	cmp	r4, #2
 8009e18:	d84c      	bhi.n	8009eb4 <__ieee754_atan2+0x13c>
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <__ieee754_atan2+0x178>)
 8009e1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009e20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e24:	e7c9      	b.n	8009dba <__ieee754_atan2+0x42>
 8009e26:	2c02      	cmp	r4, #2
 8009e28:	d848      	bhi.n	8009ebc <__ieee754_atan2+0x144>
 8009e2a:	4b32      	ldr	r3, [pc, #200]	; (8009ef4 <__ieee754_atan2+0x17c>)
 8009e2c:	e7f6      	b.n	8009e1c <__ieee754_atan2+0xa4>
 8009e2e:	4573      	cmp	r3, lr
 8009e30:	d0e4      	beq.n	8009dfc <__ieee754_atan2+0x84>
 8009e32:	1a9b      	subs	r3, r3, r2
 8009e34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009e38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e3c:	da1e      	bge.n	8009e7c <__ieee754_atan2+0x104>
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	da01      	bge.n	8009e46 <__ieee754_atan2+0xce>
 8009e42:	323c      	adds	r2, #60	; 0x3c
 8009e44:	db1e      	blt.n	8009e84 <__ieee754_atan2+0x10c>
 8009e46:	4632      	mov	r2, r6
 8009e48:	463b      	mov	r3, r7
 8009e4a:	f7f6 fcc3 	bl	80007d4 <__aeabi_ddiv>
 8009e4e:	ec41 0b10 	vmov	d0, r0, r1
 8009e52:	f000 ff09 	bl	800ac68 <fabs>
 8009e56:	f000 fd67 	bl	800a928 <atan>
 8009e5a:	ec51 0b10 	vmov	r0, r1, d0
 8009e5e:	2c01      	cmp	r4, #1
 8009e60:	d013      	beq.n	8009e8a <__ieee754_atan2+0x112>
 8009e62:	2c02      	cmp	r4, #2
 8009e64:	d015      	beq.n	8009e92 <__ieee754_atan2+0x11a>
 8009e66:	2c00      	cmp	r4, #0
 8009e68:	d0a7      	beq.n	8009dba <__ieee754_atan2+0x42>
 8009e6a:	a319      	add	r3, pc, #100	; (adr r3, 8009ed0 <__ieee754_atan2+0x158>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f7f6 f9ce 	bl	8000210 <__aeabi_dsub>
 8009e74:	a318      	add	r3, pc, #96	; (adr r3, 8009ed8 <__ieee754_atan2+0x160>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	e014      	b.n	8009ea6 <__ieee754_atan2+0x12e>
 8009e7c:	a118      	add	r1, pc, #96	; (adr r1, 8009ee0 <__ieee754_atan2+0x168>)
 8009e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e82:	e7ec      	b.n	8009e5e <__ieee754_atan2+0xe6>
 8009e84:	2000      	movs	r0, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	e7e9      	b.n	8009e5e <__ieee754_atan2+0xe6>
 8009e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e8e:	4619      	mov	r1, r3
 8009e90:	e793      	b.n	8009dba <__ieee754_atan2+0x42>
 8009e92:	a30f      	add	r3, pc, #60	; (adr r3, 8009ed0 <__ieee754_atan2+0x158>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 f9ba 	bl	8000210 <__aeabi_dsub>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	a10d      	add	r1, pc, #52	; (adr r1, 8009ed8 <__ieee754_atan2+0x160>)
 8009ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea6:	f7f6 f9b3 	bl	8000210 <__aeabi_dsub>
 8009eaa:	e786      	b.n	8009dba <__ieee754_atan2+0x42>
 8009eac:	a10a      	add	r1, pc, #40	; (adr r1, 8009ed8 <__ieee754_atan2+0x160>)
 8009eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb2:	e782      	b.n	8009dba <__ieee754_atan2+0x42>
 8009eb4:	a10c      	add	r1, pc, #48	; (adr r1, 8009ee8 <__ieee754_atan2+0x170>)
 8009eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eba:	e77e      	b.n	8009dba <__ieee754_atan2+0x42>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	e77b      	b.n	8009dba <__ieee754_atan2+0x42>
 8009ec2:	a107      	add	r1, pc, #28	; (adr r1, 8009ee0 <__ieee754_atan2+0x168>)
 8009ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ec8:	e777      	b.n	8009dba <__ieee754_atan2+0x42>
 8009eca:	bf00      	nop
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	33145c07 	.word	0x33145c07
 8009ed4:	3ca1a626 	.word	0x3ca1a626
 8009ed8:	54442d18 	.word	0x54442d18
 8009edc:	400921fb 	.word	0x400921fb
 8009ee0:	54442d18 	.word	0x54442d18
 8009ee4:	3ff921fb 	.word	0x3ff921fb
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	3fe921fb 	.word	0x3fe921fb
 8009ef0:	0800aec8 	.word	0x0800aec8
 8009ef4:	0800aee0 	.word	0x0800aee0
 8009ef8:	54442d18 	.word	0x54442d18
 8009efc:	c00921fb 	.word	0xc00921fb
 8009f00:	54442d18 	.word	0x54442d18
 8009f04:	bff921fb 	.word	0xbff921fb
 8009f08:	7ff00000 	.word	0x7ff00000

08009f0c <__ieee754_sqrt>:
 8009f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f10:	ec55 4b10 	vmov	r4, r5, d0
 8009f14:	4e55      	ldr	r6, [pc, #340]	; (800a06c <__ieee754_sqrt+0x160>)
 8009f16:	43ae      	bics	r6, r5
 8009f18:	ee10 0a10 	vmov	r0, s0
 8009f1c:	ee10 3a10 	vmov	r3, s0
 8009f20:	462a      	mov	r2, r5
 8009f22:	4629      	mov	r1, r5
 8009f24:	d110      	bne.n	8009f48 <__ieee754_sqrt+0x3c>
 8009f26:	ee10 2a10 	vmov	r2, s0
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	f7f6 fb28 	bl	8000580 <__aeabi_dmul>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 f96c 	bl	8000214 <__adddf3>
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	460d      	mov	r5, r1
 8009f40:	ec45 4b10 	vmov	d0, r4, r5
 8009f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	dc10      	bgt.n	8009f6e <__ieee754_sqrt+0x62>
 8009f4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f50:	4330      	orrs	r0, r6
 8009f52:	d0f5      	beq.n	8009f40 <__ieee754_sqrt+0x34>
 8009f54:	b15d      	cbz	r5, 8009f6e <__ieee754_sqrt+0x62>
 8009f56:	ee10 2a10 	vmov	r2, s0
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	ee10 0a10 	vmov	r0, s0
 8009f60:	f7f6 f956 	bl	8000210 <__aeabi_dsub>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	f7f6 fc34 	bl	80007d4 <__aeabi_ddiv>
 8009f6c:	e7e6      	b.n	8009f3c <__ieee754_sqrt+0x30>
 8009f6e:	1512      	asrs	r2, r2, #20
 8009f70:	d074      	beq.n	800a05c <__ieee754_sqrt+0x150>
 8009f72:	07d4      	lsls	r4, r2, #31
 8009f74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009f78:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009f7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009f80:	bf5e      	ittt	pl
 8009f82:	0fda      	lsrpl	r2, r3, #31
 8009f84:	005b      	lslpl	r3, r3, #1
 8009f86:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	0fda      	lsrs	r2, r3, #31
 8009f8e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009f92:	107f      	asrs	r7, r7, #1
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	2516      	movs	r5, #22
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009f9e:	1886      	adds	r6, r0, r2
 8009fa0:	428e      	cmp	r6, r1
 8009fa2:	bfde      	ittt	le
 8009fa4:	1b89      	suble	r1, r1, r6
 8009fa6:	18b0      	addle	r0, r6, r2
 8009fa8:	18a4      	addle	r4, r4, r2
 8009faa:	0049      	lsls	r1, r1, #1
 8009fac:	3d01      	subs	r5, #1
 8009fae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009fb2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009fb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fba:	d1f0      	bne.n	8009f9e <__ieee754_sqrt+0x92>
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	f04f 0e20 	mov.w	lr, #32
 8009fc2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009fc6:	4281      	cmp	r1, r0
 8009fc8:	eb06 0c05 	add.w	ip, r6, r5
 8009fcc:	dc02      	bgt.n	8009fd4 <__ieee754_sqrt+0xc8>
 8009fce:	d113      	bne.n	8009ff8 <__ieee754_sqrt+0xec>
 8009fd0:	459c      	cmp	ip, r3
 8009fd2:	d811      	bhi.n	8009ff8 <__ieee754_sqrt+0xec>
 8009fd4:	f1bc 0f00 	cmp.w	ip, #0
 8009fd8:	eb0c 0506 	add.w	r5, ip, r6
 8009fdc:	da43      	bge.n	800a066 <__ieee754_sqrt+0x15a>
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	db41      	blt.n	800a066 <__ieee754_sqrt+0x15a>
 8009fe2:	f100 0801 	add.w	r8, r0, #1
 8009fe6:	1a09      	subs	r1, r1, r0
 8009fe8:	459c      	cmp	ip, r3
 8009fea:	bf88      	it	hi
 8009fec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009ff0:	eba3 030c 	sub.w	r3, r3, ip
 8009ff4:	4432      	add	r2, r6
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009ffc:	f1be 0e01 	subs.w	lr, lr, #1
 800a000:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a004:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a008:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a00c:	d1db      	bne.n	8009fc6 <__ieee754_sqrt+0xba>
 800a00e:	430b      	orrs	r3, r1
 800a010:	d006      	beq.n	800a020 <__ieee754_sqrt+0x114>
 800a012:	1c50      	adds	r0, r2, #1
 800a014:	bf13      	iteet	ne
 800a016:	3201      	addne	r2, #1
 800a018:	3401      	addeq	r4, #1
 800a01a:	4672      	moveq	r2, lr
 800a01c:	f022 0201 	bicne.w	r2, r2, #1
 800a020:	1063      	asrs	r3, r4, #1
 800a022:	0852      	lsrs	r2, r2, #1
 800a024:	07e1      	lsls	r1, r4, #31
 800a026:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a02a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a02e:	bf48      	it	mi
 800a030:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a034:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a038:	4614      	mov	r4, r2
 800a03a:	e781      	b.n	8009f40 <__ieee754_sqrt+0x34>
 800a03c:	0ad9      	lsrs	r1, r3, #11
 800a03e:	3815      	subs	r0, #21
 800a040:	055b      	lsls	r3, r3, #21
 800a042:	2900      	cmp	r1, #0
 800a044:	d0fa      	beq.n	800a03c <__ieee754_sqrt+0x130>
 800a046:	02cd      	lsls	r5, r1, #11
 800a048:	d50a      	bpl.n	800a060 <__ieee754_sqrt+0x154>
 800a04a:	f1c2 0420 	rsb	r4, r2, #32
 800a04e:	fa23 f404 	lsr.w	r4, r3, r4
 800a052:	1e55      	subs	r5, r2, #1
 800a054:	4093      	lsls	r3, r2
 800a056:	4321      	orrs	r1, r4
 800a058:	1b42      	subs	r2, r0, r5
 800a05a:	e78a      	b.n	8009f72 <__ieee754_sqrt+0x66>
 800a05c:	4610      	mov	r0, r2
 800a05e:	e7f0      	b.n	800a042 <__ieee754_sqrt+0x136>
 800a060:	0049      	lsls	r1, r1, #1
 800a062:	3201      	adds	r2, #1
 800a064:	e7ef      	b.n	800a046 <__ieee754_sqrt+0x13a>
 800a066:	4680      	mov	r8, r0
 800a068:	e7bd      	b.n	8009fe6 <__ieee754_sqrt+0xda>
 800a06a:	bf00      	nop
 800a06c:	7ff00000 	.word	0x7ff00000

0800a070 <__ieee754_rem_pio2f>:
 800a070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a072:	ee10 6a10 	vmov	r6, s0
 800a076:	4b8e      	ldr	r3, [pc, #568]	; (800a2b0 <__ieee754_rem_pio2f+0x240>)
 800a078:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a07c:	429d      	cmp	r5, r3
 800a07e:	b087      	sub	sp, #28
 800a080:	eef0 7a40 	vmov.f32	s15, s0
 800a084:	4604      	mov	r4, r0
 800a086:	dc05      	bgt.n	800a094 <__ieee754_rem_pio2f+0x24>
 800a088:	2300      	movs	r3, #0
 800a08a:	ed80 0a00 	vstr	s0, [r0]
 800a08e:	6043      	str	r3, [r0, #4]
 800a090:	2000      	movs	r0, #0
 800a092:	e01a      	b.n	800a0ca <__ieee754_rem_pio2f+0x5a>
 800a094:	4b87      	ldr	r3, [pc, #540]	; (800a2b4 <__ieee754_rem_pio2f+0x244>)
 800a096:	429d      	cmp	r5, r3
 800a098:	dc46      	bgt.n	800a128 <__ieee754_rem_pio2f+0xb8>
 800a09a:	2e00      	cmp	r6, #0
 800a09c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a2b8 <__ieee754_rem_pio2f+0x248>
 800a0a0:	4b86      	ldr	r3, [pc, #536]	; (800a2bc <__ieee754_rem_pio2f+0x24c>)
 800a0a2:	f025 050f 	bic.w	r5, r5, #15
 800a0a6:	dd1f      	ble.n	800a0e8 <__ieee754_rem_pio2f+0x78>
 800a0a8:	429d      	cmp	r5, r3
 800a0aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a0ae:	d00e      	beq.n	800a0ce <__ieee754_rem_pio2f+0x5e>
 800a0b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a2c0 <__ieee754_rem_pio2f+0x250>
 800a0b4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a0b8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a0bc:	ed80 0a00 	vstr	s0, [r0]
 800a0c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	edc4 7a01 	vstr	s15, [r4, #4]
 800a0ca:	b007      	add	sp, #28
 800a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ce:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a2c4 <__ieee754_rem_pio2f+0x254>
 800a0d2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a2c8 <__ieee754_rem_pio2f+0x258>
 800a0d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a0da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a0de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0e2:	edc0 6a00 	vstr	s13, [r0]
 800a0e6:	e7eb      	b.n	800a0c0 <__ieee754_rem_pio2f+0x50>
 800a0e8:	429d      	cmp	r5, r3
 800a0ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a0ee:	d00e      	beq.n	800a10e <__ieee754_rem_pio2f+0x9e>
 800a0f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a2c0 <__ieee754_rem_pio2f+0x250>
 800a0f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a0f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a0fc:	ed80 0a00 	vstr	s0, [r0]
 800a100:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	edc4 7a01 	vstr	s15, [r4, #4]
 800a10c:	e7dd      	b.n	800a0ca <__ieee754_rem_pio2f+0x5a>
 800a10e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a2c4 <__ieee754_rem_pio2f+0x254>
 800a112:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a2c8 <__ieee754_rem_pio2f+0x258>
 800a116:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a11a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a11e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a122:	edc0 6a00 	vstr	s13, [r0]
 800a126:	e7eb      	b.n	800a100 <__ieee754_rem_pio2f+0x90>
 800a128:	4b68      	ldr	r3, [pc, #416]	; (800a2cc <__ieee754_rem_pio2f+0x25c>)
 800a12a:	429d      	cmp	r5, r3
 800a12c:	dc72      	bgt.n	800a214 <__ieee754_rem_pio2f+0x1a4>
 800a12e:	f000 fdaf 	bl	800ac90 <fabsf>
 800a132:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a2d0 <__ieee754_rem_pio2f+0x260>
 800a136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a13a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a13e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a146:	ee17 0a90 	vmov	r0, s15
 800a14a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a2b8 <__ieee754_rem_pio2f+0x248>
 800a14e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a152:	281f      	cmp	r0, #31
 800a154:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a2c0 <__ieee754_rem_pio2f+0x250>
 800a158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15c:	eeb1 6a47 	vneg.f32	s12, s14
 800a160:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a164:	ee16 2a90 	vmov	r2, s13
 800a168:	dc1c      	bgt.n	800a1a4 <__ieee754_rem_pio2f+0x134>
 800a16a:	495a      	ldr	r1, [pc, #360]	; (800a2d4 <__ieee754_rem_pio2f+0x264>)
 800a16c:	1e47      	subs	r7, r0, #1
 800a16e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a172:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a176:	428b      	cmp	r3, r1
 800a178:	d014      	beq.n	800a1a4 <__ieee754_rem_pio2f+0x134>
 800a17a:	6022      	str	r2, [r4, #0]
 800a17c:	ed94 7a00 	vldr	s14, [r4]
 800a180:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a184:	2e00      	cmp	r6, #0
 800a186:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a18a:	ed84 0a01 	vstr	s0, [r4, #4]
 800a18e:	da9c      	bge.n	800a0ca <__ieee754_rem_pio2f+0x5a>
 800a190:	eeb1 7a47 	vneg.f32	s14, s14
 800a194:	eeb1 0a40 	vneg.f32	s0, s0
 800a198:	ed84 7a00 	vstr	s14, [r4]
 800a19c:	ed84 0a01 	vstr	s0, [r4, #4]
 800a1a0:	4240      	negs	r0, r0
 800a1a2:	e792      	b.n	800a0ca <__ieee754_rem_pio2f+0x5a>
 800a1a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a1a8:	15eb      	asrs	r3, r5, #23
 800a1aa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a1ae:	2d08      	cmp	r5, #8
 800a1b0:	dde3      	ble.n	800a17a <__ieee754_rem_pio2f+0x10a>
 800a1b2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a2c4 <__ieee754_rem_pio2f+0x254>
 800a1b6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a2c8 <__ieee754_rem_pio2f+0x258>
 800a1ba:	eef0 6a40 	vmov.f32	s13, s0
 800a1be:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a1c2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a1c6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a1ca:	eef0 7a40 	vmov.f32	s15, s0
 800a1ce:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a1d2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a1d6:	ee15 2a90 	vmov	r2, s11
 800a1da:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a1de:	1a5b      	subs	r3, r3, r1
 800a1e0:	2b19      	cmp	r3, #25
 800a1e2:	dc04      	bgt.n	800a1ee <__ieee754_rem_pio2f+0x17e>
 800a1e4:	edc4 5a00 	vstr	s11, [r4]
 800a1e8:	eeb0 0a66 	vmov.f32	s0, s13
 800a1ec:	e7c6      	b.n	800a17c <__ieee754_rem_pio2f+0x10c>
 800a1ee:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a2d8 <__ieee754_rem_pio2f+0x268>
 800a1f2:	eeb0 0a66 	vmov.f32	s0, s13
 800a1f6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a1fa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a1fe:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a2dc <__ieee754_rem_pio2f+0x26c>
 800a202:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a206:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a20a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a20e:	ed84 7a00 	vstr	s14, [r4]
 800a212:	e7b3      	b.n	800a17c <__ieee754_rem_pio2f+0x10c>
 800a214:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a218:	db06      	blt.n	800a228 <__ieee754_rem_pio2f+0x1b8>
 800a21a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a21e:	edc0 7a01 	vstr	s15, [r0, #4]
 800a222:	edc0 7a00 	vstr	s15, [r0]
 800a226:	e733      	b.n	800a090 <__ieee754_rem_pio2f+0x20>
 800a228:	15ea      	asrs	r2, r5, #23
 800a22a:	3a86      	subs	r2, #134	; 0x86
 800a22c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a230:	ee07 3a90 	vmov	s15, r3
 800a234:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a238:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a2e0 <__ieee754_rem_pio2f+0x270>
 800a23c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a244:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a248:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a24c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a254:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a258:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a25c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a260:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a268:	edcd 7a05 	vstr	s15, [sp, #20]
 800a26c:	d11e      	bne.n	800a2ac <__ieee754_rem_pio2f+0x23c>
 800a26e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a276:	bf14      	ite	ne
 800a278:	2302      	movne	r3, #2
 800a27a:	2301      	moveq	r3, #1
 800a27c:	4919      	ldr	r1, [pc, #100]	; (800a2e4 <__ieee754_rem_pio2f+0x274>)
 800a27e:	9101      	str	r1, [sp, #4]
 800a280:	2102      	movs	r1, #2
 800a282:	9100      	str	r1, [sp, #0]
 800a284:	a803      	add	r0, sp, #12
 800a286:	4621      	mov	r1, r4
 800a288:	f000 f88e 	bl	800a3a8 <__kernel_rem_pio2f>
 800a28c:	2e00      	cmp	r6, #0
 800a28e:	f6bf af1c 	bge.w	800a0ca <__ieee754_rem_pio2f+0x5a>
 800a292:	edd4 7a00 	vldr	s15, [r4]
 800a296:	eef1 7a67 	vneg.f32	s15, s15
 800a29a:	edc4 7a00 	vstr	s15, [r4]
 800a29e:	edd4 7a01 	vldr	s15, [r4, #4]
 800a2a2:	eef1 7a67 	vneg.f32	s15, s15
 800a2a6:	edc4 7a01 	vstr	s15, [r4, #4]
 800a2aa:	e779      	b.n	800a1a0 <__ieee754_rem_pio2f+0x130>
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e7e5      	b.n	800a27c <__ieee754_rem_pio2f+0x20c>
 800a2b0:	3f490fd8 	.word	0x3f490fd8
 800a2b4:	4016cbe3 	.word	0x4016cbe3
 800a2b8:	3fc90f80 	.word	0x3fc90f80
 800a2bc:	3fc90fd0 	.word	0x3fc90fd0
 800a2c0:	37354443 	.word	0x37354443
 800a2c4:	37354400 	.word	0x37354400
 800a2c8:	2e85a308 	.word	0x2e85a308
 800a2cc:	43490f80 	.word	0x43490f80
 800a2d0:	3f22f984 	.word	0x3f22f984
 800a2d4:	0800aef8 	.word	0x0800aef8
 800a2d8:	2e85a300 	.word	0x2e85a300
 800a2dc:	248d3132 	.word	0x248d3132
 800a2e0:	43800000 	.word	0x43800000
 800a2e4:	0800af78 	.word	0x0800af78

0800a2e8 <__kernel_cosf>:
 800a2e8:	ee10 3a10 	vmov	r3, s0
 800a2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a2f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a2f8:	da05      	bge.n	800a306 <__kernel_cosf+0x1e>
 800a2fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a2fe:	ee17 2a90 	vmov	r2, s15
 800a302:	2a00      	cmp	r2, #0
 800a304:	d03d      	beq.n	800a382 <__kernel_cosf+0x9a>
 800a306:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a30a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a388 <__kernel_cosf+0xa0>
 800a30e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a38c <__kernel_cosf+0xa4>
 800a312:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a390 <__kernel_cosf+0xa8>
 800a316:	4a1f      	ldr	r2, [pc, #124]	; (800a394 <__kernel_cosf+0xac>)
 800a318:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a31c:	4293      	cmp	r3, r2
 800a31e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a398 <__kernel_cosf+0xb0>
 800a322:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a326:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a39c <__kernel_cosf+0xb4>
 800a32a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a32e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a3a0 <__kernel_cosf+0xb8>
 800a332:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a336:	eeb0 7a66 	vmov.f32	s14, s13
 800a33a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a33e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a342:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a346:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a34a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a34e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a352:	dc04      	bgt.n	800a35e <__kernel_cosf+0x76>
 800a354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a358:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a35c:	4770      	bx	lr
 800a35e:	4a11      	ldr	r2, [pc, #68]	; (800a3a4 <__kernel_cosf+0xbc>)
 800a360:	4293      	cmp	r3, r2
 800a362:	bfda      	itte	le
 800a364:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a368:	ee06 3a90 	vmovle	s13, r3
 800a36c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a370:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a374:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a37c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a380:	4770      	bx	lr
 800a382:	eeb0 0a46 	vmov.f32	s0, s12
 800a386:	4770      	bx	lr
 800a388:	ad47d74e 	.word	0xad47d74e
 800a38c:	310f74f6 	.word	0x310f74f6
 800a390:	3d2aaaab 	.word	0x3d2aaaab
 800a394:	3e999999 	.word	0x3e999999
 800a398:	b493f27c 	.word	0xb493f27c
 800a39c:	37d00d01 	.word	0x37d00d01
 800a3a0:	bab60b61 	.word	0xbab60b61
 800a3a4:	3f480000 	.word	0x3f480000

0800a3a8 <__kernel_rem_pio2f>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b04 	vpush	{d8-d9}
 800a3b0:	b0d9      	sub	sp, #356	; 0x164
 800a3b2:	4688      	mov	r8, r1
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	49bb      	ldr	r1, [pc, #748]	; (800a6a4 <__kernel_rem_pio2f+0x2fc>)
 800a3b8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a3c0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a3c4:	1e59      	subs	r1, r3, #1
 800a3c6:	1d13      	adds	r3, r2, #4
 800a3c8:	db27      	blt.n	800a41a <__kernel_rem_pio2f+0x72>
 800a3ca:	f1b2 0b03 	subs.w	fp, r2, #3
 800a3ce:	bf48      	it	mi
 800a3d0:	f102 0b04 	addmi.w	fp, r2, #4
 800a3d4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a3d8:	1c45      	adds	r5, r0, #1
 800a3da:	00ec      	lsls	r4, r5, #3
 800a3dc:	1a47      	subs	r7, r0, r1
 800a3de:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a3e2:	9403      	str	r4, [sp, #12]
 800a3e4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a3e8:	eb0a 0c01 	add.w	ip, sl, r1
 800a3ec:	ae1c      	add	r6, sp, #112	; 0x70
 800a3ee:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a3f2:	2400      	movs	r4, #0
 800a3f4:	4564      	cmp	r4, ip
 800a3f6:	dd12      	ble.n	800a41e <__kernel_rem_pio2f+0x76>
 800a3f8:	9b01      	ldr	r3, [sp, #4]
 800a3fa:	ac1c      	add	r4, sp, #112	; 0x70
 800a3fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a400:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a404:	f04f 0c00 	mov.w	ip, #0
 800a408:	45d4      	cmp	ip, sl
 800a40a:	dc27      	bgt.n	800a45c <__kernel_rem_pio2f+0xb4>
 800a40c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a410:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a414:	4627      	mov	r7, r4
 800a416:	2600      	movs	r6, #0
 800a418:	e016      	b.n	800a448 <__kernel_rem_pio2f+0xa0>
 800a41a:	2000      	movs	r0, #0
 800a41c:	e7dc      	b.n	800a3d8 <__kernel_rem_pio2f+0x30>
 800a41e:	42e7      	cmn	r7, r4
 800a420:	bf5d      	ittte	pl
 800a422:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a426:	ee07 3a90 	vmovpl	s15, r3
 800a42a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a42e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a432:	ece6 7a01 	vstmia	r6!, {s15}
 800a436:	3401      	adds	r4, #1
 800a438:	e7dc      	b.n	800a3f4 <__kernel_rem_pio2f+0x4c>
 800a43a:	ecf9 6a01 	vldmia	r9!, {s13}
 800a43e:	ed97 7a00 	vldr	s14, [r7]
 800a442:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a446:	3601      	adds	r6, #1
 800a448:	428e      	cmp	r6, r1
 800a44a:	f1a7 0704 	sub.w	r7, r7, #4
 800a44e:	ddf4      	ble.n	800a43a <__kernel_rem_pio2f+0x92>
 800a450:	eceb 7a01 	vstmia	fp!, {s15}
 800a454:	f10c 0c01 	add.w	ip, ip, #1
 800a458:	3404      	adds	r4, #4
 800a45a:	e7d5      	b.n	800a408 <__kernel_rem_pio2f+0x60>
 800a45c:	ab08      	add	r3, sp, #32
 800a45e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a462:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a6b0 <__kernel_rem_pio2f+0x308>
 800a466:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a6ac <__kernel_rem_pio2f+0x304>
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a470:	4656      	mov	r6, sl
 800a472:	00b3      	lsls	r3, r6, #2
 800a474:	9305      	str	r3, [sp, #20]
 800a476:	ab58      	add	r3, sp, #352	; 0x160
 800a478:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a47c:	ac08      	add	r4, sp, #32
 800a47e:	ab44      	add	r3, sp, #272	; 0x110
 800a480:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a484:	46a4      	mov	ip, r4
 800a486:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a48a:	4637      	mov	r7, r6
 800a48c:	2f00      	cmp	r7, #0
 800a48e:	f1a0 0004 	sub.w	r0, r0, #4
 800a492:	dc4f      	bgt.n	800a534 <__kernel_rem_pio2f+0x18c>
 800a494:	4628      	mov	r0, r5
 800a496:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a49a:	f000 fc43 	bl	800ad24 <scalbnf>
 800a49e:	eeb0 8a40 	vmov.f32	s16, s0
 800a4a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a4a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a4aa:	f000 fbf9 	bl	800aca0 <floorf>
 800a4ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a4b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a4b6:	2d00      	cmp	r5, #0
 800a4b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a4bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a4c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a4c4:	ee17 9a90 	vmov	r9, s15
 800a4c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a4cc:	dd44      	ble.n	800a558 <__kernel_rem_pio2f+0x1b0>
 800a4ce:	f106 3cff 	add.w	ip, r6, #4294967295
 800a4d2:	ab08      	add	r3, sp, #32
 800a4d4:	f1c5 0e08 	rsb	lr, r5, #8
 800a4d8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a4dc:	fa47 f00e 	asr.w	r0, r7, lr
 800a4e0:	4481      	add	r9, r0
 800a4e2:	fa00 f00e 	lsl.w	r0, r0, lr
 800a4e6:	1a3f      	subs	r7, r7, r0
 800a4e8:	f1c5 0007 	rsb	r0, r5, #7
 800a4ec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a4f0:	4107      	asrs	r7, r0
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	dd3f      	ble.n	800a576 <__kernel_rem_pio2f+0x1ce>
 800a4f6:	f04f 0e00 	mov.w	lr, #0
 800a4fa:	f109 0901 	add.w	r9, r9, #1
 800a4fe:	4673      	mov	r3, lr
 800a500:	4576      	cmp	r6, lr
 800a502:	dc6b      	bgt.n	800a5dc <__kernel_rem_pio2f+0x234>
 800a504:	2d00      	cmp	r5, #0
 800a506:	dd04      	ble.n	800a512 <__kernel_rem_pio2f+0x16a>
 800a508:	2d01      	cmp	r5, #1
 800a50a:	d078      	beq.n	800a5fe <__kernel_rem_pio2f+0x256>
 800a50c:	2d02      	cmp	r5, #2
 800a50e:	f000 8081 	beq.w	800a614 <__kernel_rem_pio2f+0x26c>
 800a512:	2f02      	cmp	r7, #2
 800a514:	d12f      	bne.n	800a576 <__kernel_rem_pio2f+0x1ce>
 800a516:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a51a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a51e:	b353      	cbz	r3, 800a576 <__kernel_rem_pio2f+0x1ce>
 800a520:	4628      	mov	r0, r5
 800a522:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a526:	f000 fbfd 	bl	800ad24 <scalbnf>
 800a52a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a52e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a532:	e020      	b.n	800a576 <__kernel_rem_pio2f+0x1ce>
 800a534:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a538:	3f01      	subs	r7, #1
 800a53a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a53e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a542:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a546:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a54a:	ecac 0a01 	vstmia	ip!, {s0}
 800a54e:	ed90 0a00 	vldr	s0, [r0]
 800a552:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a556:	e799      	b.n	800a48c <__kernel_rem_pio2f+0xe4>
 800a558:	d105      	bne.n	800a566 <__kernel_rem_pio2f+0x1be>
 800a55a:	1e70      	subs	r0, r6, #1
 800a55c:	ab08      	add	r3, sp, #32
 800a55e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a562:	11ff      	asrs	r7, r7, #7
 800a564:	e7c5      	b.n	800a4f2 <__kernel_rem_pio2f+0x14a>
 800a566:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a56a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a572:	da31      	bge.n	800a5d8 <__kernel_rem_pio2f+0x230>
 800a574:	2700      	movs	r7, #0
 800a576:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57e:	f040 809b 	bne.w	800a6b8 <__kernel_rem_pio2f+0x310>
 800a582:	1e74      	subs	r4, r6, #1
 800a584:	46a4      	mov	ip, r4
 800a586:	2000      	movs	r0, #0
 800a588:	45d4      	cmp	ip, sl
 800a58a:	da4a      	bge.n	800a622 <__kernel_rem_pio2f+0x27a>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d07a      	beq.n	800a686 <__kernel_rem_pio2f+0x2de>
 800a590:	ab08      	add	r3, sp, #32
 800a592:	3d08      	subs	r5, #8
 800a594:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 8081 	beq.w	800a6a0 <__kernel_rem_pio2f+0x2f8>
 800a59e:	4628      	mov	r0, r5
 800a5a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a5a4:	00a5      	lsls	r5, r4, #2
 800a5a6:	f000 fbbd 	bl	800ad24 <scalbnf>
 800a5aa:	aa44      	add	r2, sp, #272	; 0x110
 800a5ac:	1d2b      	adds	r3, r5, #4
 800a5ae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a6b0 <__kernel_rem_pio2f+0x308>
 800a5b2:	18d1      	adds	r1, r2, r3
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	f280 80ae 	bge.w	800a718 <__kernel_rem_pio2f+0x370>
 800a5bc:	4622      	mov	r2, r4
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	f2c0 80cc 	blt.w	800a75c <__kernel_rem_pio2f+0x3b4>
 800a5c4:	a944      	add	r1, sp, #272	; 0x110
 800a5c6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a5ca:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a6a8 <__kernel_rem_pio2f+0x300>
 800a5ce:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	1aa1      	subs	r1, r4, r2
 800a5d6:	e0b6      	b.n	800a746 <__kernel_rem_pio2f+0x39e>
 800a5d8:	2702      	movs	r7, #2
 800a5da:	e78c      	b.n	800a4f6 <__kernel_rem_pio2f+0x14e>
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	b94b      	cbnz	r3, 800a5f4 <__kernel_rem_pio2f+0x24c>
 800a5e0:	b118      	cbz	r0, 800a5ea <__kernel_rem_pio2f+0x242>
 800a5e2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	f10e 0e01 	add.w	lr, lr, #1
 800a5ee:	3404      	adds	r4, #4
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	e785      	b.n	800a500 <__kernel_rem_pio2f+0x158>
 800a5f4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a5f8:	6020      	str	r0, [r4, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	e7f5      	b.n	800a5ea <__kernel_rem_pio2f+0x242>
 800a5fe:	1e74      	subs	r4, r6, #1
 800a600:	a808      	add	r0, sp, #32
 800a602:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a606:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a60a:	f10d 0c20 	add.w	ip, sp, #32
 800a60e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a612:	e77e      	b.n	800a512 <__kernel_rem_pio2f+0x16a>
 800a614:	1e74      	subs	r4, r6, #1
 800a616:	a808      	add	r0, sp, #32
 800a618:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a61c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a620:	e7f3      	b.n	800a60a <__kernel_rem_pio2f+0x262>
 800a622:	ab08      	add	r3, sp, #32
 800a624:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a628:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a62c:	4318      	orrs	r0, r3
 800a62e:	e7ab      	b.n	800a588 <__kernel_rem_pio2f+0x1e0>
 800a630:	f10c 0c01 	add.w	ip, ip, #1
 800a634:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a638:	2c00      	cmp	r4, #0
 800a63a:	d0f9      	beq.n	800a630 <__kernel_rem_pio2f+0x288>
 800a63c:	9b05      	ldr	r3, [sp, #20]
 800a63e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a642:	eb0d 0003 	add.w	r0, sp, r3
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	18f4      	adds	r4, r6, r3
 800a64a:	ab1c      	add	r3, sp, #112	; 0x70
 800a64c:	1c77      	adds	r7, r6, #1
 800a64e:	384c      	subs	r0, #76	; 0x4c
 800a650:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a654:	4466      	add	r6, ip
 800a656:	42be      	cmp	r6, r7
 800a658:	f6ff af0b 	blt.w	800a472 <__kernel_rem_pio2f+0xca>
 800a65c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a660:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a664:	ee07 3a90 	vmov	s15, r3
 800a668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a66c:	f04f 0c00 	mov.w	ip, #0
 800a670:	ece4 7a01 	vstmia	r4!, {s15}
 800a674:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a678:	46a1      	mov	r9, r4
 800a67a:	458c      	cmp	ip, r1
 800a67c:	dd07      	ble.n	800a68e <__kernel_rem_pio2f+0x2e6>
 800a67e:	ece0 7a01 	vstmia	r0!, {s15}
 800a682:	3701      	adds	r7, #1
 800a684:	e7e7      	b.n	800a656 <__kernel_rem_pio2f+0x2ae>
 800a686:	9804      	ldr	r0, [sp, #16]
 800a688:	f04f 0c01 	mov.w	ip, #1
 800a68c:	e7d2      	b.n	800a634 <__kernel_rem_pio2f+0x28c>
 800a68e:	ecfe 6a01 	vldmia	lr!, {s13}
 800a692:	ed39 7a01 	vldmdb	r9!, {s14}
 800a696:	f10c 0c01 	add.w	ip, ip, #1
 800a69a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a69e:	e7ec      	b.n	800a67a <__kernel_rem_pio2f+0x2d2>
 800a6a0:	3c01      	subs	r4, #1
 800a6a2:	e775      	b.n	800a590 <__kernel_rem_pio2f+0x1e8>
 800a6a4:	0800b2bc 	.word	0x0800b2bc
 800a6a8:	0800b290 	.word	0x0800b290
 800a6ac:	43800000 	.word	0x43800000
 800a6b0:	3b800000 	.word	0x3b800000
 800a6b4:	00000000 	.word	0x00000000
 800a6b8:	9b03      	ldr	r3, [sp, #12]
 800a6ba:	eeb0 0a48 	vmov.f32	s0, s16
 800a6be:	1a98      	subs	r0, r3, r2
 800a6c0:	f000 fb30 	bl	800ad24 <scalbnf>
 800a6c4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a6ac <__kernel_rem_pio2f+0x304>
 800a6c8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	db19      	blt.n	800a706 <__kernel_rem_pio2f+0x35e>
 800a6d2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a6b0 <__kernel_rem_pio2f+0x308>
 800a6d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a6da:	aa08      	add	r2, sp, #32
 800a6dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6e0:	1c74      	adds	r4, r6, #1
 800a6e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6e6:	3508      	adds	r5, #8
 800a6e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a6ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a6f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a6f4:	ee10 3a10 	vmov	r3, s0
 800a6f8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a6fc:	ee17 3a90 	vmov	r3, s15
 800a700:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a704:	e74b      	b.n	800a59e <__kernel_rem_pio2f+0x1f6>
 800a706:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a70a:	aa08      	add	r2, sp, #32
 800a70c:	ee10 3a10 	vmov	r3, s0
 800a710:	4634      	mov	r4, r6
 800a712:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a716:	e742      	b.n	800a59e <__kernel_rem_pio2f+0x1f6>
 800a718:	a808      	add	r0, sp, #32
 800a71a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a71e:	9001      	str	r0, [sp, #4]
 800a720:	ee07 0a90 	vmov	s15, r0
 800a724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a728:	3a01      	subs	r2, #1
 800a72a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a72e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a732:	ed61 7a01 	vstmdb	r1!, {s15}
 800a736:	e73e      	b.n	800a5b6 <__kernel_rem_pio2f+0x20e>
 800a738:	ecfc 6a01 	vldmia	ip!, {s13}
 800a73c:	ecb6 7a01 	vldmia	r6!, {s14}
 800a740:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a744:	3001      	adds	r0, #1
 800a746:	4550      	cmp	r0, sl
 800a748:	dc01      	bgt.n	800a74e <__kernel_rem_pio2f+0x3a6>
 800a74a:	4288      	cmp	r0, r1
 800a74c:	ddf4      	ble.n	800a738 <__kernel_rem_pio2f+0x390>
 800a74e:	a858      	add	r0, sp, #352	; 0x160
 800a750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a754:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a758:	3a01      	subs	r2, #1
 800a75a:	e730      	b.n	800a5be <__kernel_rem_pio2f+0x216>
 800a75c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800a75e:	2a02      	cmp	r2, #2
 800a760:	dc09      	bgt.n	800a776 <__kernel_rem_pio2f+0x3ce>
 800a762:	2a00      	cmp	r2, #0
 800a764:	dc2a      	bgt.n	800a7bc <__kernel_rem_pio2f+0x414>
 800a766:	d043      	beq.n	800a7f0 <__kernel_rem_pio2f+0x448>
 800a768:	f009 0007 	and.w	r0, r9, #7
 800a76c:	b059      	add	sp, #356	; 0x164
 800a76e:	ecbd 8b04 	vpop	{d8-d9}
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d1f5      	bne.n	800a768 <__kernel_rem_pio2f+0x3c0>
 800a77c:	ab30      	add	r3, sp, #192	; 0xc0
 800a77e:	442b      	add	r3, r5
 800a780:	461a      	mov	r2, r3
 800a782:	4619      	mov	r1, r3
 800a784:	4620      	mov	r0, r4
 800a786:	2800      	cmp	r0, #0
 800a788:	f1a1 0104 	sub.w	r1, r1, #4
 800a78c:	dc51      	bgt.n	800a832 <__kernel_rem_pio2f+0x48a>
 800a78e:	4621      	mov	r1, r4
 800a790:	2901      	cmp	r1, #1
 800a792:	f1a2 0204 	sub.w	r2, r2, #4
 800a796:	dc5c      	bgt.n	800a852 <__kernel_rem_pio2f+0x4aa>
 800a798:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a79c:	3304      	adds	r3, #4
 800a79e:	2c01      	cmp	r4, #1
 800a7a0:	dc67      	bgt.n	800a872 <__kernel_rem_pio2f+0x4ca>
 800a7a2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a7a6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a7aa:	2f00      	cmp	r7, #0
 800a7ac:	d167      	bne.n	800a87e <__kernel_rem_pio2f+0x4d6>
 800a7ae:	edc8 6a00 	vstr	s13, [r8]
 800a7b2:	ed88 7a01 	vstr	s14, [r8, #4]
 800a7b6:	edc8 7a02 	vstr	s15, [r8, #8]
 800a7ba:	e7d5      	b.n	800a768 <__kernel_rem_pio2f+0x3c0>
 800a7bc:	aa30      	add	r2, sp, #192	; 0xc0
 800a7be:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a7c2:	4413      	add	r3, r2
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	da24      	bge.n	800a814 <__kernel_rem_pio2f+0x46c>
 800a7ca:	b34f      	cbz	r7, 800a820 <__kernel_rem_pio2f+0x478>
 800a7cc:	eef1 7a47 	vneg.f32	s15, s14
 800a7d0:	edc8 7a00 	vstr	s15, [r8]
 800a7d4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a7d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7dc:	aa31      	add	r2, sp, #196	; 0xc4
 800a7de:	2301      	movs	r3, #1
 800a7e0:	429c      	cmp	r4, r3
 800a7e2:	da20      	bge.n	800a826 <__kernel_rem_pio2f+0x47e>
 800a7e4:	b10f      	cbz	r7, 800a7ea <__kernel_rem_pio2f+0x442>
 800a7e6:	eef1 7a67 	vneg.f32	s15, s15
 800a7ea:	edc8 7a01 	vstr	s15, [r8, #4]
 800a7ee:	e7bb      	b.n	800a768 <__kernel_rem_pio2f+0x3c0>
 800a7f0:	aa30      	add	r2, sp, #192	; 0xc0
 800a7f2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a6b4 <__kernel_rem_pio2f+0x30c>
 800a7f6:	4413      	add	r3, r2
 800a7f8:	2c00      	cmp	r4, #0
 800a7fa:	da05      	bge.n	800a808 <__kernel_rem_pio2f+0x460>
 800a7fc:	b10f      	cbz	r7, 800a802 <__kernel_rem_pio2f+0x45a>
 800a7fe:	eef1 7a67 	vneg.f32	s15, s15
 800a802:	edc8 7a00 	vstr	s15, [r8]
 800a806:	e7af      	b.n	800a768 <__kernel_rem_pio2f+0x3c0>
 800a808:	ed33 7a01 	vldmdb	r3!, {s14}
 800a80c:	3c01      	subs	r4, #1
 800a80e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a812:	e7f1      	b.n	800a7f8 <__kernel_rem_pio2f+0x450>
 800a814:	ed73 7a01 	vldmdb	r3!, {s15}
 800a818:	3a01      	subs	r2, #1
 800a81a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a81e:	e7d2      	b.n	800a7c6 <__kernel_rem_pio2f+0x41e>
 800a820:	eef0 7a47 	vmov.f32	s15, s14
 800a824:	e7d4      	b.n	800a7d0 <__kernel_rem_pio2f+0x428>
 800a826:	ecb2 7a01 	vldmia	r2!, {s14}
 800a82a:	3301      	adds	r3, #1
 800a82c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a830:	e7d6      	b.n	800a7e0 <__kernel_rem_pio2f+0x438>
 800a832:	edd1 7a00 	vldr	s15, [r1]
 800a836:	edd1 6a01 	vldr	s13, [r1, #4]
 800a83a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a83e:	3801      	subs	r0, #1
 800a840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a844:	ed81 7a00 	vstr	s14, [r1]
 800a848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a84c:	edc1 7a01 	vstr	s15, [r1, #4]
 800a850:	e799      	b.n	800a786 <__kernel_rem_pio2f+0x3de>
 800a852:	edd2 7a00 	vldr	s15, [r2]
 800a856:	edd2 6a01 	vldr	s13, [r2, #4]
 800a85a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a85e:	3901      	subs	r1, #1
 800a860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a864:	ed82 7a00 	vstr	s14, [r2]
 800a868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86c:	edc2 7a01 	vstr	s15, [r2, #4]
 800a870:	e78e      	b.n	800a790 <__kernel_rem_pio2f+0x3e8>
 800a872:	ed33 7a01 	vldmdb	r3!, {s14}
 800a876:	3c01      	subs	r4, #1
 800a878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a87c:	e78f      	b.n	800a79e <__kernel_rem_pio2f+0x3f6>
 800a87e:	eef1 6a66 	vneg.f32	s13, s13
 800a882:	eeb1 7a47 	vneg.f32	s14, s14
 800a886:	edc8 6a00 	vstr	s13, [r8]
 800a88a:	ed88 7a01 	vstr	s14, [r8, #4]
 800a88e:	eef1 7a67 	vneg.f32	s15, s15
 800a892:	e790      	b.n	800a7b6 <__kernel_rem_pio2f+0x40e>

0800a894 <__kernel_sinf>:
 800a894:	ee10 3a10 	vmov	r3, s0
 800a898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a89c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a8a0:	da04      	bge.n	800a8ac <__kernel_sinf+0x18>
 800a8a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a8a6:	ee17 3a90 	vmov	r3, s15
 800a8aa:	b35b      	cbz	r3, 800a904 <__kernel_sinf+0x70>
 800a8ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a8b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a908 <__kernel_sinf+0x74>
 800a8b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a90c <__kernel_sinf+0x78>
 800a8b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a8bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a910 <__kernel_sinf+0x7c>
 800a8c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a8c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a914 <__kernel_sinf+0x80>
 800a8c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a8cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a918 <__kernel_sinf+0x84>
 800a8d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a8d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a8d8:	b930      	cbnz	r0, 800a8e8 <__kernel_sinf+0x54>
 800a8da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a91c <__kernel_sinf+0x88>
 800a8de:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a8e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a8e6:	4770      	bx	lr
 800a8e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a8ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a8f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a8f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a8f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a920 <__kernel_sinf+0x8c>
 800a8fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a900:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	2f2ec9d3 	.word	0x2f2ec9d3
 800a90c:	b2d72f34 	.word	0xb2d72f34
 800a910:	3638ef1b 	.word	0x3638ef1b
 800a914:	b9500d01 	.word	0xb9500d01
 800a918:	3c088889 	.word	0x3c088889
 800a91c:	be2aaaab 	.word	0xbe2aaaab
 800a920:	3e2aaaab 	.word	0x3e2aaaab
 800a924:	00000000 	.word	0x00000000

0800a928 <atan>:
 800a928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	ec55 4b10 	vmov	r4, r5, d0
 800a930:	4bc3      	ldr	r3, [pc, #780]	; (800ac40 <atan+0x318>)
 800a932:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a936:	429e      	cmp	r6, r3
 800a938:	46ab      	mov	fp, r5
 800a93a:	dd18      	ble.n	800a96e <atan+0x46>
 800a93c:	4bc1      	ldr	r3, [pc, #772]	; (800ac44 <atan+0x31c>)
 800a93e:	429e      	cmp	r6, r3
 800a940:	dc01      	bgt.n	800a946 <atan+0x1e>
 800a942:	d109      	bne.n	800a958 <atan+0x30>
 800a944:	b144      	cbz	r4, 800a958 <atan+0x30>
 800a946:	4622      	mov	r2, r4
 800a948:	462b      	mov	r3, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	f7f5 fc61 	bl	8000214 <__adddf3>
 800a952:	4604      	mov	r4, r0
 800a954:	460d      	mov	r5, r1
 800a956:	e006      	b.n	800a966 <atan+0x3e>
 800a958:	f1bb 0f00 	cmp.w	fp, #0
 800a95c:	f300 8131 	bgt.w	800abc2 <atan+0x29a>
 800a960:	a59b      	add	r5, pc, #620	; (adr r5, 800abd0 <atan+0x2a8>)
 800a962:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a966:	ec45 4b10 	vmov	d0, r4, r5
 800a96a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96e:	4bb6      	ldr	r3, [pc, #728]	; (800ac48 <atan+0x320>)
 800a970:	429e      	cmp	r6, r3
 800a972:	dc14      	bgt.n	800a99e <atan+0x76>
 800a974:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a978:	429e      	cmp	r6, r3
 800a97a:	dc0d      	bgt.n	800a998 <atan+0x70>
 800a97c:	a396      	add	r3, pc, #600	; (adr r3, 800abd8 <atan+0x2b0>)
 800a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a982:	ee10 0a10 	vmov	r0, s0
 800a986:	4629      	mov	r1, r5
 800a988:	f7f5 fc44 	bl	8000214 <__adddf3>
 800a98c:	4baf      	ldr	r3, [pc, #700]	; (800ac4c <atan+0x324>)
 800a98e:	2200      	movs	r2, #0
 800a990:	f7f6 f886 	bl	8000aa0 <__aeabi_dcmpgt>
 800a994:	2800      	cmp	r0, #0
 800a996:	d1e6      	bne.n	800a966 <atan+0x3e>
 800a998:	f04f 3aff 	mov.w	sl, #4294967295
 800a99c:	e02b      	b.n	800a9f6 <atan+0xce>
 800a99e:	f000 f963 	bl	800ac68 <fabs>
 800a9a2:	4bab      	ldr	r3, [pc, #684]	; (800ac50 <atan+0x328>)
 800a9a4:	429e      	cmp	r6, r3
 800a9a6:	ec55 4b10 	vmov	r4, r5, d0
 800a9aa:	f300 80bf 	bgt.w	800ab2c <atan+0x204>
 800a9ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a9b2:	429e      	cmp	r6, r3
 800a9b4:	f300 80a0 	bgt.w	800aaf8 <atan+0x1d0>
 800a9b8:	ee10 2a10 	vmov	r2, s0
 800a9bc:	ee10 0a10 	vmov	r0, s0
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	f7f5 fc26 	bl	8000214 <__adddf3>
 800a9c8:	4ba0      	ldr	r3, [pc, #640]	; (800ac4c <atan+0x324>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f7f5 fc20 	bl	8000210 <__aeabi_dsub>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	f7f5 fc19 	bl	8000214 <__adddf3>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	f7f5 fef3 	bl	80007d4 <__aeabi_ddiv>
 800a9ee:	f04f 0a00 	mov.w	sl, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	462b      	mov	r3, r5
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	f7f5 fdbf 	bl	8000580 <__aeabi_dmul>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4680      	mov	r8, r0
 800aa08:	4689      	mov	r9, r1
 800aa0a:	f7f5 fdb9 	bl	8000580 <__aeabi_dmul>
 800aa0e:	a374      	add	r3, pc, #464	; (adr r3, 800abe0 <atan+0x2b8>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	f7f5 fdb2 	bl	8000580 <__aeabi_dmul>
 800aa1c:	a372      	add	r3, pc, #456	; (adr r3, 800abe8 <atan+0x2c0>)
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f7f5 fbf7 	bl	8000214 <__adddf3>
 800aa26:	4632      	mov	r2, r6
 800aa28:	463b      	mov	r3, r7
 800aa2a:	f7f5 fda9 	bl	8000580 <__aeabi_dmul>
 800aa2e:	a370      	add	r3, pc, #448	; (adr r3, 800abf0 <atan+0x2c8>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f7f5 fbee 	bl	8000214 <__adddf3>
 800aa38:	4632      	mov	r2, r6
 800aa3a:	463b      	mov	r3, r7
 800aa3c:	f7f5 fda0 	bl	8000580 <__aeabi_dmul>
 800aa40:	a36d      	add	r3, pc, #436	; (adr r3, 800abf8 <atan+0x2d0>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f7f5 fbe5 	bl	8000214 <__adddf3>
 800aa4a:	4632      	mov	r2, r6
 800aa4c:	463b      	mov	r3, r7
 800aa4e:	f7f5 fd97 	bl	8000580 <__aeabi_dmul>
 800aa52:	a36b      	add	r3, pc, #428	; (adr r3, 800ac00 <atan+0x2d8>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f7f5 fbdc 	bl	8000214 <__adddf3>
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	463b      	mov	r3, r7
 800aa60:	f7f5 fd8e 	bl	8000580 <__aeabi_dmul>
 800aa64:	a368      	add	r3, pc, #416	; (adr r3, 800ac08 <atan+0x2e0>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f7f5 fbd3 	bl	8000214 <__adddf3>
 800aa6e:	4642      	mov	r2, r8
 800aa70:	464b      	mov	r3, r9
 800aa72:	f7f5 fd85 	bl	8000580 <__aeabi_dmul>
 800aa76:	a366      	add	r3, pc, #408	; (adr r3, 800ac10 <atan+0x2e8>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	4680      	mov	r8, r0
 800aa7e:	4689      	mov	r9, r1
 800aa80:	4630      	mov	r0, r6
 800aa82:	4639      	mov	r1, r7
 800aa84:	f7f5 fd7c 	bl	8000580 <__aeabi_dmul>
 800aa88:	a363      	add	r3, pc, #396	; (adr r3, 800ac18 <atan+0x2f0>)
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f7f5 fbbf 	bl	8000210 <__aeabi_dsub>
 800aa92:	4632      	mov	r2, r6
 800aa94:	463b      	mov	r3, r7
 800aa96:	f7f5 fd73 	bl	8000580 <__aeabi_dmul>
 800aa9a:	a361      	add	r3, pc, #388	; (adr r3, 800ac20 <atan+0x2f8>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fbb6 	bl	8000210 <__aeabi_dsub>
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	f7f5 fd6a 	bl	8000580 <__aeabi_dmul>
 800aaac:	a35e      	add	r3, pc, #376	; (adr r3, 800ac28 <atan+0x300>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f7f5 fbad 	bl	8000210 <__aeabi_dsub>
 800aab6:	4632      	mov	r2, r6
 800aab8:	463b      	mov	r3, r7
 800aaba:	f7f5 fd61 	bl	8000580 <__aeabi_dmul>
 800aabe:	a35c      	add	r3, pc, #368	; (adr r3, 800ac30 <atan+0x308>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fba4 	bl	8000210 <__aeabi_dsub>
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	f7f5 fd58 	bl	8000580 <__aeabi_dmul>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	4640      	mov	r0, r8
 800aad6:	4649      	mov	r1, r9
 800aad8:	f7f5 fb9c 	bl	8000214 <__adddf3>
 800aadc:	4622      	mov	r2, r4
 800aade:	462b      	mov	r3, r5
 800aae0:	f7f5 fd4e 	bl	8000580 <__aeabi_dmul>
 800aae4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	d14b      	bne.n	800ab86 <atan+0x25e>
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 fb8d 	bl	8000210 <__aeabi_dsub>
 800aaf6:	e72c      	b.n	800a952 <atan+0x2a>
 800aaf8:	ee10 0a10 	vmov	r0, s0
 800aafc:	4b53      	ldr	r3, [pc, #332]	; (800ac4c <atan+0x324>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	4629      	mov	r1, r5
 800ab02:	f7f5 fb85 	bl	8000210 <__aeabi_dsub>
 800ab06:	4b51      	ldr	r3, [pc, #324]	; (800ac4c <atan+0x324>)
 800ab08:	4606      	mov	r6, r0
 800ab0a:	460f      	mov	r7, r1
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 fb7f 	bl	8000214 <__adddf3>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f7f5 fe59 	bl	80007d4 <__aeabi_ddiv>
 800ab22:	f04f 0a01 	mov.w	sl, #1
 800ab26:	4604      	mov	r4, r0
 800ab28:	460d      	mov	r5, r1
 800ab2a:	e764      	b.n	800a9f6 <atan+0xce>
 800ab2c:	4b49      	ldr	r3, [pc, #292]	; (800ac54 <atan+0x32c>)
 800ab2e:	429e      	cmp	r6, r3
 800ab30:	da1d      	bge.n	800ab6e <atan+0x246>
 800ab32:	ee10 0a10 	vmov	r0, s0
 800ab36:	4b48      	ldr	r3, [pc, #288]	; (800ac58 <atan+0x330>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f7f5 fb68 	bl	8000210 <__aeabi_dsub>
 800ab40:	4b45      	ldr	r3, [pc, #276]	; (800ac58 <atan+0x330>)
 800ab42:	4606      	mov	r6, r0
 800ab44:	460f      	mov	r7, r1
 800ab46:	2200      	movs	r2, #0
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fd18 	bl	8000580 <__aeabi_dmul>
 800ab50:	4b3e      	ldr	r3, [pc, #248]	; (800ac4c <atan+0x324>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	f7f5 fb5e 	bl	8000214 <__adddf3>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 fe38 	bl	80007d4 <__aeabi_ddiv>
 800ab64:	f04f 0a02 	mov.w	sl, #2
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	e743      	b.n	800a9f6 <atan+0xce>
 800ab6e:	462b      	mov	r3, r5
 800ab70:	ee10 2a10 	vmov	r2, s0
 800ab74:	4939      	ldr	r1, [pc, #228]	; (800ac5c <atan+0x334>)
 800ab76:	2000      	movs	r0, #0
 800ab78:	f7f5 fe2c 	bl	80007d4 <__aeabi_ddiv>
 800ab7c:	f04f 0a03 	mov.w	sl, #3
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	e737      	b.n	800a9f6 <atan+0xce>
 800ab86:	4b36      	ldr	r3, [pc, #216]	; (800ac60 <atan+0x338>)
 800ab88:	4e36      	ldr	r6, [pc, #216]	; (800ac64 <atan+0x33c>)
 800ab8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ab8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ab92:	e9da 2300 	ldrd	r2, r3, [sl]
 800ab96:	f7f5 fb3b 	bl	8000210 <__aeabi_dsub>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	f7f5 fb37 	bl	8000210 <__aeabi_dsub>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800abaa:	f7f5 fb31 	bl	8000210 <__aeabi_dsub>
 800abae:	f1bb 0f00 	cmp.w	fp, #0
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	f6bf aed6 	bge.w	800a966 <atan+0x3e>
 800abba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abbe:	461d      	mov	r5, r3
 800abc0:	e6d1      	b.n	800a966 <atan+0x3e>
 800abc2:	a51d      	add	r5, pc, #116	; (adr r5, 800ac38 <atan+0x310>)
 800abc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abc8:	e6cd      	b.n	800a966 <atan+0x3e>
 800abca:	bf00      	nop
 800abcc:	f3af 8000 	nop.w
 800abd0:	54442d18 	.word	0x54442d18
 800abd4:	bff921fb 	.word	0xbff921fb
 800abd8:	8800759c 	.word	0x8800759c
 800abdc:	7e37e43c 	.word	0x7e37e43c
 800abe0:	e322da11 	.word	0xe322da11
 800abe4:	3f90ad3a 	.word	0x3f90ad3a
 800abe8:	24760deb 	.word	0x24760deb
 800abec:	3fa97b4b 	.word	0x3fa97b4b
 800abf0:	a0d03d51 	.word	0xa0d03d51
 800abf4:	3fb10d66 	.word	0x3fb10d66
 800abf8:	c54c206e 	.word	0xc54c206e
 800abfc:	3fb745cd 	.word	0x3fb745cd
 800ac00:	920083ff 	.word	0x920083ff
 800ac04:	3fc24924 	.word	0x3fc24924
 800ac08:	5555550d 	.word	0x5555550d
 800ac0c:	3fd55555 	.word	0x3fd55555
 800ac10:	2c6a6c2f 	.word	0x2c6a6c2f
 800ac14:	bfa2b444 	.word	0xbfa2b444
 800ac18:	52defd9a 	.word	0x52defd9a
 800ac1c:	3fadde2d 	.word	0x3fadde2d
 800ac20:	af749a6d 	.word	0xaf749a6d
 800ac24:	3fb3b0f2 	.word	0x3fb3b0f2
 800ac28:	fe231671 	.word	0xfe231671
 800ac2c:	3fbc71c6 	.word	0x3fbc71c6
 800ac30:	9998ebc4 	.word	0x9998ebc4
 800ac34:	3fc99999 	.word	0x3fc99999
 800ac38:	54442d18 	.word	0x54442d18
 800ac3c:	3ff921fb 	.word	0x3ff921fb
 800ac40:	440fffff 	.word	0x440fffff
 800ac44:	7ff00000 	.word	0x7ff00000
 800ac48:	3fdbffff 	.word	0x3fdbffff
 800ac4c:	3ff00000 	.word	0x3ff00000
 800ac50:	3ff2ffff 	.word	0x3ff2ffff
 800ac54:	40038000 	.word	0x40038000
 800ac58:	3ff80000 	.word	0x3ff80000
 800ac5c:	bff00000 	.word	0xbff00000
 800ac60:	0800b2e8 	.word	0x0800b2e8
 800ac64:	0800b2c8 	.word	0x0800b2c8

0800ac68 <fabs>:
 800ac68:	ec51 0b10 	vmov	r0, r1, d0
 800ac6c:	ee10 2a10 	vmov	r2, s0
 800ac70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac74:	ec43 2b10 	vmov	d0, r2, r3
 800ac78:	4770      	bx	lr
 800ac7a:	0000      	movs	r0, r0
 800ac7c:	0000      	movs	r0, r0
	...

0800ac80 <nan>:
 800ac80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac88 <nan+0x8>
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	00000000 	.word	0x00000000
 800ac8c:	7ff80000 	.word	0x7ff80000

0800ac90 <fabsf>:
 800ac90:	ee10 3a10 	vmov	r3, s0
 800ac94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac98:	ee00 3a10 	vmov	s0, r3
 800ac9c:	4770      	bx	lr
	...

0800aca0 <floorf>:
 800aca0:	ee10 3a10 	vmov	r3, s0
 800aca4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aca8:	3a7f      	subs	r2, #127	; 0x7f
 800acaa:	2a16      	cmp	r2, #22
 800acac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800acb0:	dc2a      	bgt.n	800ad08 <floorf+0x68>
 800acb2:	2a00      	cmp	r2, #0
 800acb4:	da11      	bge.n	800acda <floorf+0x3a>
 800acb6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ad18 <floorf+0x78>
 800acba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800acbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800acc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc6:	dd05      	ble.n	800acd4 <floorf+0x34>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da23      	bge.n	800ad14 <floorf+0x74>
 800accc:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <floorf+0x7c>)
 800acce:	2900      	cmp	r1, #0
 800acd0:	bf18      	it	ne
 800acd2:	4613      	movne	r3, r2
 800acd4:	ee00 3a10 	vmov	s0, r3
 800acd8:	4770      	bx	lr
 800acda:	4911      	ldr	r1, [pc, #68]	; (800ad20 <floorf+0x80>)
 800acdc:	4111      	asrs	r1, r2
 800acde:	420b      	tst	r3, r1
 800ace0:	d0fa      	beq.n	800acd8 <floorf+0x38>
 800ace2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ad18 <floorf+0x78>
 800ace6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800acea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	ddef      	ble.n	800acd4 <floorf+0x34>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	bfbe      	ittt	lt
 800acf8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800acfc:	fa40 f202 	asrlt.w	r2, r0, r2
 800ad00:	189b      	addlt	r3, r3, r2
 800ad02:	ea23 0301 	bic.w	r3, r3, r1
 800ad06:	e7e5      	b.n	800acd4 <floorf+0x34>
 800ad08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ad0c:	d3e4      	bcc.n	800acd8 <floorf+0x38>
 800ad0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad12:	4770      	bx	lr
 800ad14:	2300      	movs	r3, #0
 800ad16:	e7dd      	b.n	800acd4 <floorf+0x34>
 800ad18:	7149f2ca 	.word	0x7149f2ca
 800ad1c:	bf800000 	.word	0xbf800000
 800ad20:	007fffff 	.word	0x007fffff

0800ad24 <scalbnf>:
 800ad24:	ee10 3a10 	vmov	r3, s0
 800ad28:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ad2c:	d025      	beq.n	800ad7a <scalbnf+0x56>
 800ad2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ad32:	d302      	bcc.n	800ad3a <scalbnf+0x16>
 800ad34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad38:	4770      	bx	lr
 800ad3a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ad3e:	d122      	bne.n	800ad86 <scalbnf+0x62>
 800ad40:	4b2a      	ldr	r3, [pc, #168]	; (800adec <scalbnf+0xc8>)
 800ad42:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800adf0 <scalbnf+0xcc>
 800ad46:	4298      	cmp	r0, r3
 800ad48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ad4c:	db16      	blt.n	800ad7c <scalbnf+0x58>
 800ad4e:	ee10 3a10 	vmov	r3, s0
 800ad52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ad56:	3a19      	subs	r2, #25
 800ad58:	4402      	add	r2, r0
 800ad5a:	2afe      	cmp	r2, #254	; 0xfe
 800ad5c:	dd15      	ble.n	800ad8a <scalbnf+0x66>
 800ad5e:	ee10 3a10 	vmov	r3, s0
 800ad62:	eddf 7a24 	vldr	s15, [pc, #144]	; 800adf4 <scalbnf+0xd0>
 800ad66:	eddf 6a24 	vldr	s13, [pc, #144]	; 800adf8 <scalbnf+0xd4>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	eeb0 7a67 	vmov.f32	s14, s15
 800ad70:	bfb8      	it	lt
 800ad72:	eef0 7a66 	vmovlt.f32	s15, s13
 800ad76:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ad7a:	4770      	bx	lr
 800ad7c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800adfc <scalbnf+0xd8>
 800ad80:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ad84:	4770      	bx	lr
 800ad86:	0dd2      	lsrs	r2, r2, #23
 800ad88:	e7e6      	b.n	800ad58 <scalbnf+0x34>
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	dd06      	ble.n	800ad9c <scalbnf+0x78>
 800ad8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad92:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ad96:	ee00 3a10 	vmov	s0, r3
 800ad9a:	4770      	bx	lr
 800ad9c:	f112 0f16 	cmn.w	r2, #22
 800ada0:	da1a      	bge.n	800add8 <scalbnf+0xb4>
 800ada2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ada6:	4298      	cmp	r0, r3
 800ada8:	ee10 3a10 	vmov	r3, s0
 800adac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adb0:	dd0a      	ble.n	800adc8 <scalbnf+0xa4>
 800adb2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800adf4 <scalbnf+0xd0>
 800adb6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800adf8 <scalbnf+0xd4>
 800adba:	eef0 7a40 	vmov.f32	s15, s0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bf18      	it	ne
 800adc2:	eeb0 0a47 	vmovne.f32	s0, s14
 800adc6:	e7db      	b.n	800ad80 <scalbnf+0x5c>
 800adc8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800adfc <scalbnf+0xd8>
 800adcc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ae00 <scalbnf+0xdc>
 800add0:	eef0 7a40 	vmov.f32	s15, s0
 800add4:	2b00      	cmp	r3, #0
 800add6:	e7f3      	b.n	800adc0 <scalbnf+0x9c>
 800add8:	3219      	adds	r2, #25
 800adda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adde:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ade2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ae04 <scalbnf+0xe0>
 800ade6:	ee07 3a10 	vmov	s14, r3
 800adea:	e7c4      	b.n	800ad76 <scalbnf+0x52>
 800adec:	ffff3cb0 	.word	0xffff3cb0
 800adf0:	4c000000 	.word	0x4c000000
 800adf4:	7149f2ca 	.word	0x7149f2ca
 800adf8:	f149f2ca 	.word	0xf149f2ca
 800adfc:	0da24260 	.word	0x0da24260
 800ae00:	8da24260 	.word	0x8da24260
 800ae04:	33000000 	.word	0x33000000

0800ae08 <__errno>:
 800ae08:	4b01      	ldr	r3, [pc, #4]	; (800ae10 <__errno+0x8>)
 800ae0a:	6818      	ldr	r0, [r3, #0]
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	20000018 	.word	0x20000018

0800ae14 <__libc_init_array>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	4d0d      	ldr	r5, [pc, #52]	; (800ae4c <__libc_init_array+0x38>)
 800ae18:	4c0d      	ldr	r4, [pc, #52]	; (800ae50 <__libc_init_array+0x3c>)
 800ae1a:	1b64      	subs	r4, r4, r5
 800ae1c:	10a4      	asrs	r4, r4, #2
 800ae1e:	2600      	movs	r6, #0
 800ae20:	42a6      	cmp	r6, r4
 800ae22:	d109      	bne.n	800ae38 <__libc_init_array+0x24>
 800ae24:	4d0b      	ldr	r5, [pc, #44]	; (800ae54 <__libc_init_array+0x40>)
 800ae26:	4c0c      	ldr	r4, [pc, #48]	; (800ae58 <__libc_init_array+0x44>)
 800ae28:	f000 f82e 	bl	800ae88 <_init>
 800ae2c:	1b64      	subs	r4, r4, r5
 800ae2e:	10a4      	asrs	r4, r4, #2
 800ae30:	2600      	movs	r6, #0
 800ae32:	42a6      	cmp	r6, r4
 800ae34:	d105      	bne.n	800ae42 <__libc_init_array+0x2e>
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3c:	4798      	blx	r3
 800ae3e:	3601      	adds	r6, #1
 800ae40:	e7ee      	b.n	800ae20 <__libc_init_array+0xc>
 800ae42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae46:	4798      	blx	r3
 800ae48:	3601      	adds	r6, #1
 800ae4a:	e7f2      	b.n	800ae32 <__libc_init_array+0x1e>
 800ae4c:	0800b310 	.word	0x0800b310
 800ae50:	0800b310 	.word	0x0800b310
 800ae54:	0800b310 	.word	0x0800b310
 800ae58:	0800b318 	.word	0x0800b318

0800ae5c <memcpy>:
 800ae5c:	440a      	add	r2, r1
 800ae5e:	4291      	cmp	r1, r2
 800ae60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae64:	d100      	bne.n	800ae68 <memcpy+0xc>
 800ae66:	4770      	bx	lr
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae72:	4291      	cmp	r1, r2
 800ae74:	d1f9      	bne.n	800ae6a <memcpy+0xe>
 800ae76:	bd10      	pop	{r4, pc}

0800ae78 <memset>:
 800ae78:	4402      	add	r2, r0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d100      	bne.n	800ae82 <memset+0xa>
 800ae80:	4770      	bx	lr
 800ae82:	f803 1b01 	strb.w	r1, [r3], #1
 800ae86:	e7f9      	b.n	800ae7c <memset+0x4>

0800ae88 <_init>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	bf00      	nop
 800ae8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8e:	bc08      	pop	{r3}
 800ae90:	469e      	mov	lr, r3
 800ae92:	4770      	bx	lr

0800ae94 <_fini>:
 800ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae96:	bf00      	nop
 800ae98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9a:	bc08      	pop	{r3}
 800ae9c:	469e      	mov	lr, r3
 800ae9e:	4770      	bx	lr
>>>>>>> parent of feb78f6 (本番パフォーマンス)
