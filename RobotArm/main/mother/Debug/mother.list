
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e78  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009040  08009040  00019040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a8  080094a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b0  080094b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080094bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001960  2000007c  08009538  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019dc  08009538  000219dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019945  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db4  00000000  00000000  000399f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025533  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167b8  00000000  00000000  00063d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5e3b  00000000  00000000  0007a4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015032e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca0  00000000  00000000  00150380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009028 	.word	0x08009028

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	08009028 	.word	0x08009028

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f008 f883 	bl	8008ffc <memcpy>
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f003 f920 	bl	8004160 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f002 f96c 	bl	8003200 <HAL_Delay>
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f003 f8ff 	bl	8004160 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
 8000f7a:	f003 f9ef 	bl	800435c <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800111c:	f006 fcb8 	bl	8007a90 <atan2>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
 8001188:	f006 fbf8 	bl	800797c <copysign>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011a2:	f006 fc41 	bl	8007a28 <asin>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001234:	f006 fc2c 	bl	8007a90 <atan2>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"
#include "math.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	80da      	strh	r2, [r3, #6]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  ID = id;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	711a      	strb	r2, [r3, #4]
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_ZN3STS8moveContEtss>:

void STS::moveCont(uint16_t abs_speed, int16_t goal_position, int16_t now_position)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	747b      	strb	r3, [r7, #17]
 80012f6:	2305      	movs	r3, #5
 80012f8:	74fb      	strb	r3, [r7, #19]
 80012fa:	2303      	movs	r3, #3
 80012fc:	753b      	strb	r3, [r7, #20]
 80012fe:	232e      	movs	r3, #46	; 0x2e
 8001300:	757b      	strb	r3, [r7, #21]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	74bb      	strb	r3, [r7, #18]
  uint8_t checksum = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t diff = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
  int16_t inst_speed = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	847b      	strh	r3, [r7, #34]	; 0x22

  diff = abs(goal_position - now_position);
 800131a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bfb8      	it	lt
 8001328:	425b      	neglt	r3, r3
 800132a:	837b      	strh	r3, [r7, #26]

  if(diff < 10){
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	2b09      	cmp	r3, #9
 8001330:	d802      	bhi.n	8001338 <_ZN3STS8moveContEtss+0x70>
	  inst_speed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001336:	e01f      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else if(diff < abs_speed * abs_speed / 6000){
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <_ZN3STS8moveContEtss+0x174>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	11c9      	asrs	r1, r1, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	429a      	cmp	r2, r3
 8001350:	da10      	bge.n	8001374 <_ZN3STS8moveContEtss+0xac>
	  inst_speed = sqrt(1500 * diff);
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f8f6 	bl	800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbb9 	bl	8000ae0 <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	e001      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else{
	  inst_speed = abs_speed;
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if(goal_position < now_position){
 8001378:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	da02      	bge.n	800138a <_ZN3STS8moveContEtss+0xc2>
	  speed = inst_speed;
 8001384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	e003      	b.n	8001392 <_ZN3STS8moveContEtss+0xca>
  }else{
	  speed = -inst_speed;
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	425b      	negs	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((goal_position - now_position < 0 && speed > 0) || (goal_position - now_position > 0 && speed < 0))
 8001392:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da03      	bge.n	80013a8 <_ZN3STS8moveContEtss+0xe0>
 80013a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc0a      	bgt.n	80013be <_ZN3STS8moveContEtss+0xf6>
 80013a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd18      	ble.n	80013e8 <_ZN3STS8moveContEtss+0x120>
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da14      	bge.n	80013e8 <_ZN3STS8moveContEtss+0x120>
  {
    if (speed < 0)
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da04      	bge.n	80013d0 <_ZN3STS8moveContEtss+0x108>
    {
      speed = 32768 - speed;
 80013c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <_ZN3STS8moveContEtss+0x178>)
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    send_Buf[6] = speed;
 80013d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75bb      	strb	r3, [r7, #22]
    send_Buf[7] = speed >> 8;
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 ff0c 	bl	8003200 <HAL_Delay>
  }

  for (int i = 2; i < 8; i++)
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dc0d      	bgt.n	800140e <_ZN3STS8moveContEtss+0x146>
  {
    checksum += send_Buf[i];
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	4413      	add	r3, r2
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e7ee      	b.n	80013ec <_ZN3STS8moveContEtss+0x124>
  }
  checksum = ~checksum;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	43db      	mvns	r3, r3
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	763b      	strb	r3, [r7, #24]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	2332      	movs	r3, #50	; 0x32
 8001428:	2209      	movs	r2, #9
 800142a:	f005 fcb6 	bl	8006d9a <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f001 fee6 	bl	8003200 <HAL_Delay>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	057619f1 	.word	0x057619f1
 8001440:	ffff8000 	.word	0xffff8000

08001444 <_ZN3STS4sendEv>:
	HAL_UART_Transmit(UART, send_Buf, 13, 50);
	HAL_Delay(1);
}

void STS::send()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	23ff      	movs	r3, #255	; 0xff
 8001458:	723b      	strb	r3, [r7, #8]
 800145a:	23ff      	movs	r3, #255	; 0xff
 800145c:	727b      	strb	r3, [r7, #9]
 800145e:	2304      	movs	r3, #4
 8001460:	72fb      	strb	r3, [r7, #11]
 8001462:	2302      	movs	r3, #2
 8001464:	733b      	strb	r3, [r7, #12]
 8001466:	2338      	movs	r3, #56	; 0x38
 8001468:	737b      	strb	r3, [r7, #13]
 800146a:	2302      	movs	r3, #2
 800146c:	73bb      	strb	r3, [r7, #14]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 8001478:	2302      	movs	r3, #2
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b06      	cmp	r3, #6
 8001480:	dc0b      	bgt.n	800149a <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	4413      	add	r3, r2
 8001490:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e7f0      	b.n	800147c <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	43db      	mvns	r3, r3
 800149e:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	2208      	movs	r2, #8
 80014b0:	f005 fc73 	bl	8006d9a <HAL_UART_Transmit>
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 80014c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d8:	4293      	cmp	r3, r2
 80014da:	dd08      	ble.n	80014ee <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001500:	4293      	cmp	r3, r2
 8001502:	dd08      	ble.n	8001516 <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b25a      	sxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800151c:	b29b      	uxth	r3, r3
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	b29a      	uxth	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4413      	add	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	811a      	strh	r2, [r3, #8]

  return -position;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800153a:	b29b      	uxth	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	b21b      	sxth	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7fe ffa8 	bl	80004ac <__aeabi_i2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f006 fa96 	bl	8007a94 <sqrt>
 8001568:	eeb0 7a40 	vmov.f32	s14, s0
 800156c:	eef0 7a60 	vmov.f32	s15, s1
 8001570:	eeb0 0a47 	vmov.f32	s0, s14
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	ed87 0a01 	vstr	s0, [r7, #4]
 8001588:	ed97 0a01 	vldr	s0, [r7, #4]
 800158c:	f006 fa08 	bl	80079a0 <cosf>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <_ZN4CALC14similarityRiseEhsttt>:
	}

	return output;
}

int16_t CALC::similarityRise(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	72fb      	strb	r3, [r7, #11]
 80015b2:	460b      	mov	r3, r1
 80015b4:	813b      	strh	r3, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da00      	bge.n	80015d2 <_ZN4CALC14similarityRiseEhsttt+0x32>
 80015d0:	330f      	adds	r3, #15
 80015d2:	111b      	asrs	r3, r3, #4
 80015d4:	425b      	negs	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80015dc:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t diff = angle - refference;
 80015de:	893b      	ldrh	r3, [r7, #8]
 80015e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (diff > 180) {
 80015e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015ec:	2bb4      	cmp	r3, #180	; 0xb4
 80015ee:	dd04      	ble.n	80015fa <_ZN4CALC14similarityRiseEhsttt+0x5a>
		diff = diff - 360;
 80015f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if (diff < -180) {
 80015fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015fe:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001602:	da04      	bge.n	800160e <_ZN4CALC14similarityRiseEhsttt+0x6e>
		diff = diff + 360;
 8001604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001606:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160a:	b29b      	uxth	r3, r3
 800160c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if (abs(diff) >= widthAngle / 2) {
 800160e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfb8      	it	lt
 8001616:	425b      	neglt	r3, r3
 8001618:	b29a      	uxth	r2, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	429a      	cmp	r2, r3
 8001622:	d301      	bcc.n	8001628 <_ZN4CALC14similarityRiseEhsttt+0x88>
		return 0;
 8001624:	2300      	movs	r3, #0
 8001626:	e0ba      	b.n	800179e <_ZN4CALC14similarityRiseEhsttt+0x1fe>
	}

	float angleRad = angle * M_PI / 180.0;
 8001628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff3e 	bl	80004ac <__aeabi_i2d>
 8001630:	a35d      	add	r3, pc, #372	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffa3 	bl	8000580 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 8001648:	f7ff f8c4 	bl	80007d4 <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa6c 	bl	8000b30 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
	float refferenceRad = refference * M_PI / 180.0;
 800165c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff23 	bl	80004ac <__aeabi_i2d>
 8001666:	a350      	add	r3, pc, #320	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff88 	bl	8000580 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 800167e:	f7ff f8a9 	bl	80007d4 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa51 	bl	8000b30 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff09 	bl	80004ac <__aeabi_i2d>
 800169a:	a343      	add	r3, pc, #268	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff6e 	bl	8000580 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 80016b2:	f7ff f88f 	bl	80007d4 <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa37 	bl	8000b30 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 80016c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	eeb0 0a67 	vmov.f32	s0, s15
 80016d6:	f7ff ff52 	bl	800157e <_ZSt3cosf>
 80016da:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 80016de:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ea:	eeb0 0a47 	vmov.f32	s0, s14
 80016ee:	f7ff ff46 	bl	800157e <_ZSt3cosf>
 80016f2:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 80016f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80016fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001706:	edd7 7a05 	vldr	s15, [r7, #20]
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	edc7 7a04 	vstr	s15, [r7, #16]

    int16_t output = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(diff > 0){
 800171a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800171e:	2b00      	cmp	r3, #0
 8001720:	dd19      	ble.n	8001756 <_ZN4CALC14similarityRiseEhsttt+0x1b6>
        output = center - (normalizedResult - 1) * widthHue;
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001734:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001738:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
 8001752:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001754:	e018      	b.n	8001788 <_ZN4CALC14similarityRiseEhsttt+0x1e8>
    } else {
        output = center + (normalizedResult - 1) * widthHue;
 8001756:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001760:	edd7 7a04 	vldr	s15, [r7, #16]
 8001764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001768:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800176c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

	if(output < 0){
 8001788:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	da04      	bge.n	800179a <_ZN4CALC14similarityRiseEhsttt+0x1fa>
		output += 256;
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001796:	b29b      	uxth	r3, r3
 8001798:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	return output;
 800179a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	54442d18 	.word	0x54442d18
 80017ac:	400921fb 	.word	0x400921fb
 80017b0:	40668000 	.word	0x40668000
 80017b4:	00000000 	.word	0x00000000

080017b8 <_ZN4CALC16similarityNormalEhst>:
	}

	return output;
}

int16_t CALC::similarityNormal(uint8_t ledNum, int16_t refference, uint16_t width){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	72fb      	strb	r3, [r7, #11]
 80017ca:	460b      	mov	r3, r1
 80017cc:	813b      	strh	r3, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da00      	bge.n	80017ea <_ZN4CALC16similarityNormalEhst+0x32>
 80017e8:	330f      	adds	r3, #15
 80017ea:	111b      	asrs	r3, r3, #4
 80017ec:	425b      	negs	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80017f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t diff = abs(angle - refference);
 80017f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80017f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bfb8      	it	lt
 8001802:	425b      	neglt	r3, r3
 8001804:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (diff > 180) {
 8001806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001808:	2bb4      	cmp	r3, #180	; 0xb4
 800180a:	d903      	bls.n	8001814 <_ZN4CALC16similarityNormalEhst+0x5c>
        diff = 360 - diff;
 800180c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800180e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001812:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if (diff >= width / 2) {
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800181c:	429a      	cmp	r2, r3
 800181e:	d301      	bcc.n	8001824 <_ZN4CALC16similarityNormalEhst+0x6c>
        return 0;
 8001820:	2300      	movs	r3, #0
 8001822:	e081      	b.n	8001928 <_ZN4CALC16similarityNormalEhst+0x170>
    }

    float angleRad = angle * M_PI / 180.0;
 8001824:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe40 	bl	80004ac <__aeabi_i2d>
 800182c:	a340      	add	r3, pc, #256	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fea5 	bl	8000580 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 8001844:	f7fe ffc6 	bl	80007d4 <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f96e 	bl	8000b30 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    float refferenceRad = refference * M_PI / 180.0;
 8001858:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe25 	bl	80004ac <__aeabi_i2d>
 8001862:	a333      	add	r3, pc, #204	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fe8a 	bl	8000580 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 800187a:	f7fe ffab 	bl	80007d4 <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f953 	bl	8000b30 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    float widthRad = width * M_PI / 180.0;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe0b 	bl	80004ac <__aeabi_i2d>
 8001896:	a326      	add	r3, pc, #152	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fe70 	bl	8000580 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 80018ae:	f7fe ff91 	bl	80007d4 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f939 	bl	8000b30 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	623b      	str	r3, [r7, #32]

    float result = cos(angleRad - refferenceRad);
 80018c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	f7ff fe54 	bl	800157e <_ZSt3cosf>
 80018d6:	ed87 0a07 	vstr	s0, [r7, #28]
    float zeroPoint = cos(widthRad / 2);
 80018da:	edd7 7a08 	vldr	s15, [r7, #32]
 80018de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	f7ff fe48 	bl	800157e <_ZSt3cosf>
 80018ee:	ed87 0a06 	vstr	s0, [r7, #24]
    float output = (result - zeroPoint) / (1 - zeroPoint);
 80018f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001902:	edd7 7a06 	vldr	s15, [r7, #24]
 8001906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800190a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]

    return output * 255;
 8001912:	edd7 7a05 	vldr	s15, [r7, #20]
 8001916:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800193c <_ZN4CALC16similarityNormalEhst+0x184>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	b21b      	sxth	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	54442d18 	.word	0x54442d18
 8001934:	400921fb 	.word	0x400921fb
 8001938:	40668000 	.word	0x40668000
 800193c:	437f0000 	.word	0x437f0000

08001940 <_ZN4CALC12calcRotationEss>:
    }else{
    	return 1;
    }
}

int16_t CALC::calcRotation(int16_t targetRotation, int16_t nowRotation){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	803b      	strh	r3, [r7, #0]
    int16_t diffRotation = targetRotation - nowRotation;
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	883b      	ldrh	r3, [r7, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	81fb      	strh	r3, [r7, #14]

    if(diffRotation > 180){
 800195a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195e:	2bb4      	cmp	r3, #180	; 0xb4
 8001960:	dd05      	ble.n	800196e <_ZN4CALC12calcRotationEss+0x2e>
        diffRotation -= 360;
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001968:	b29b      	uxth	r3, r3
 800196a:	81fb      	strh	r3, [r7, #14]
 800196c:	e009      	b.n	8001982 <_ZN4CALC12calcRotationEss+0x42>
    }else if(diffRotation < -180){
 800196e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001972:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001976:	da04      	bge.n	8001982 <_ZN4CALC12calcRotationEss+0x42>
        diffRotation += 360;
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800197e:	b29b      	uxth	r3, r3
 8001980:	81fb      	strh	r3, [r7, #14]
    }

    return diffRotation;
 8001982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		NeopixelTape.execute();
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80019a6:	f001 fad1 	bl	8002f4c <_ZN7WS2812C7executeEv>
	}
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200000ec 	.word	0x200000ec
 80019b8:	2000027c 	.word	0x2000027c
 80019bc:	00000000 	.word	0x00000000

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b0b0      	sub	sp, #192	; 0xc0
 80019c4:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f001 fba9 	bl	800311c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 fb4f 	bl	800206c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 fd0b 	bl	80023e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80019d2:	f000 fce1 	bl	8002398 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80019d6:	f000 fbbf 	bl	8002158 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80019da:	f000 fbf1 	bl	80021c0 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80019de:	f000 fc7d 	bl	80022dc <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80019e2:	f000 fcab 	bl	800233c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
 80019e6:	4878      	ldr	r0, [pc, #480]	; (8001bc8 <main+0x208>)
 80019e8:	f001 fb39 	bl	800305e <_ZN7WS2812C4initEv>

  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	4977      	ldr	r1, [pc, #476]	; (8001bcc <main+0x20c>)
 80019f0:	4877      	ldr	r0, [pc, #476]	; (8001bd0 <main+0x210>)
 80019f2:	f005 fa64 	bl	8006ebe <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2102      	movs	r1, #2
 80019fa:	4876      	ldr	r0, [pc, #472]	; (8001bd4 <main+0x214>)
 80019fc:	f002 fa52 	bl	8003ea4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a04:	f001 fbfc 	bl	8003200 <HAL_Delay>

  while (!ready) {
 8001a08:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <main+0x218>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d116      	bne.n	8001a3e <main+0x7e>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 8001a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a14:	220a      	movs	r2, #10
 8001a16:	2150      	movs	r1, #80	; 0x50
 8001a18:	4870      	ldr	r0, [pc, #448]	; (8001bdc <main+0x21c>)
 8001a1a:	f002 fec5 	bl	80047a8 <HAL_I2C_IsDeviceReady>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <main+0x76>
      ready = 1;
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <main+0x218>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e7e8      	b.n	8001a08 <main+0x48>
    } else {
      HAL_Delay(100);
 8001a36:	2064      	movs	r0, #100	; 0x64
 8001a38:	f001 fbe2 	bl	8003200 <HAL_Delay>
  while (!ready) {
 8001a3c:	e7e4      	b.n	8001a08 <main+0x48>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 8001a3e:	2328      	movs	r3, #40	; 0x28
 8001a40:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  BNO055 bno055(hi2c1,address);
 8001a44:	4c65      	ldr	r4, [pc, #404]	; (8001bdc <main+0x21c>)
 8001a46:	f107 0510 	add.w	r5, r7, #16
 8001a4a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001a4e:	9312      	str	r3, [sp, #72]	; 0x48
 8001a50:	4668      	mov	r0, sp
 8001a52:	f104 030c 	add.w	r3, r4, #12
 8001a56:	2248      	movs	r2, #72	; 0x48
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f007 facf 	bl	8008ffc <memcpy>
 8001a5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a62:	4628      	mov	r0, r5
 8001a64:	f7ff fa36 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    e = bno055.get_eular();
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff faff 	bl	8001070 <_ZN6BNO0559get_eularEv>
 8001a72:	eef0 6a40 	vmov.f32	s13, s0
 8001a76:	eeb0 7a60 	vmov.f32	s14, s1
 8001a7a:	eef0 7a41 	vmov.f32	s15, s2
 8001a7e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a82:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a86:	edc7 7a03 	vstr	s15, [r7, #12]
	    gyro = (e.z/M_PI)*180;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd1f 	bl	80004d0 <__aeabi_f2d>
 8001a92:	a34b      	add	r3, pc, #300	; (adr r3, 8001bc0 <main+0x200>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fe9c 	bl	80007d4 <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <main+0x220>)
 8001aaa:	f7fe fd69 	bl	8000580 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7ff f813 	bl	8000ae0 <__aeabi_d2iz>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <main+0x224>)
 8001ac0:	801a      	strh	r2, [r3, #0]

	    ledPos0 = (-gyro + ((servoPos0 % 4096 + 4096) % 4096) * 360 / 4096 + 360) % 360;
 8001ac2:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <main+0x228>)
 8001ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac8:	425a      	negs	r2, r3
 8001aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ace:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ad2:	bf58      	it	pl
 8001ad4:	4253      	negpl	r3, r2
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001adc:	425a      	negs	r2, r3
 8001ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ae6:	bf58      	it	pl
 8001ae8:	4253      	negpl	r3, r2
 8001aea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da01      	bge.n	8001afa <main+0x13a>
 8001af6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001afa:	131b      	asrs	r3, r3, #12
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <main+0x224>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0a:	4a38      	ldr	r2, [pc, #224]	; (8001bec <main+0x22c>)
 8001b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b10:	441a      	add	r2, r3
 8001b12:	1211      	asrs	r1, r2, #8
 8001b14:	17da      	asrs	r2, r3, #31
 8001b16:	1a8a      	subs	r2, r1, r2
 8001b18:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b1c:	fb01 f202 	mul.w	r2, r1, r2
 8001b20:	1a9a      	subs	r2, r3, r2
 8001b22:	b212      	sxth	r2, r2
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <main+0x230>)
 8001b26:	801a      	strh	r2, [r3, #0]
	    ledPos2 = (ledPos0 + ((servoPos2 % 4096 + 4096) % 4096) * 360 / 4096) % 360;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <main+0x230>)
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <main+0x234>)
 8001b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b36:	425a      	negs	r2, r3
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b40:	bf58      	it	pl
 8001b42:	4253      	negpl	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	425a      	negs	r2, r3
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b54:	bf58      	it	pl
 8001b56:	4253      	negpl	r3, r2
 8001b58:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da01      	bge.n	8001b68 <main+0x1a8>
 8001b64:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001b68:	131b      	asrs	r3, r3, #12
 8001b6a:	440b      	add	r3, r1
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <main+0x22c>)
 8001b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b72:	441a      	add	r2, r3
 8001b74:	1211      	asrs	r1, r2, #8
 8001b76:	17da      	asrs	r2, r3, #31
 8001b78:	1a8a      	subs	r2, r1, r2
 8001b7a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	1a9a      	subs	r2, r3, r2
 8001b84:	b212      	sxth	r2, r2
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <main+0x238>)
 8001b88:	801a      	strh	r2, [r3, #0]

	    get_position(0);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 fca6 	bl	80024dc <_Z12get_positionh>
	    get_position(2);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f000 fca3 	bl	80024dc <_Z12get_positionh>

	    if(HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 0){
 8001b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <main+0x23c>)
 8001b9c:	f002 f96a 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d12c      	bne.n	8001c00 <main+0x240>
 8001ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <main+0x23c>)
 8001bac:	f002 f962 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d124      	bne.n	8001c00 <main+0x240>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e023      	b.n	8001c02 <main+0x242>
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	54442d18 	.word	0x54442d18
 8001bc4:	400921fb 	.word	0x400921fb
 8001bc8:	2000027c 	.word	0x2000027c
 8001bcc:	20001940 	.word	0x20001940
 8001bd0:	20000194 	.word	0x20000194
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	200019c4 	.word	0x200019c4
 8001bdc:	20000098 	.word	0x20000098
 8001be0:	40668000 	.word	0x40668000
 8001be4:	200019c6 	.word	0x200019c6
 8001be8:	20001938 	.word	0x20001938
 8001bec:	b60b60b7 	.word	0xb60b60b7
 8001bf0:	200019c0 	.word	0x200019c0
 8001bf4:	2000193c 	.word	0x2000193c
 8001bf8:	200019c2 	.word	0x200019c2
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80ca 	beq.w	8001d9c <main+0x3dc>
		    servo0.moveCont(1500, 8191, servoPos0);
 8001c08:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <main+0x400>)
 8001c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c12:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c16:	486b      	ldr	r0, [pc, #428]	; (8001dc4 <main+0x404>)
 8001c18:	f7ff fb56 	bl	80012c8 <_ZN3STS8moveContEtss>
		    servo2.moveCont(1500, 8191, servoPos2);
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <main+0x408>)
 8001c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c22:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c26:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c2a:	4868      	ldr	r0, [pc, #416]	; (8001dcc <main+0x40c>)
 8001c2c:	f7ff fb4c 	bl	80012c8 <_ZN3STS8moveContEtss>

		    if(i != 0){
 8001c30:	4b67      	ldr	r3, [pc, #412]	; (8001dd0 <main+0x410>)
 8001c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d017      	beq.n	8001c6a <main+0x2aa>
		    	i += 8;
 8001c3a:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <main+0x410>)
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3308      	adds	r3, #8
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <main+0x410>)
 8001c4a:	801a      	strh	r2, [r3, #0]
		    	if(i >= 180){
 8001c4c:	4b60      	ldr	r3, [pc, #384]	; (8001dd0 <main+0x410>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	2bb3      	cmp	r3, #179	; 0xb3
 8001c54:	dd09      	ble.n	8001c6a <main+0x2aa>
		    		i -= 360;
 8001c56:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <main+0x410>)
 8001c58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <main+0x410>)
 8001c68:	801a      	strh	r2, [r3, #0]
		    	}
		    }

		    moveRotation = calc.calcRotation(i, gyro);
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <main+0x410>)
 8001c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <main+0x414>)
 8001c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4857      	ldr	r0, [pc, #348]	; (8001dd8 <main+0x418>)
 8001c7a:	f7ff fe61 	bl	8001940 <_ZN4CALC12calcRotationEss>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <main+0x41c>)
 8001c84:	801a      	strh	r2, [r3, #0]

		    if(moveRotation > 0){
 8001c86:	4b55      	ldr	r3, [pc, #340]	; (8001ddc <main+0x41c>)
 8001c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dd08      	ble.n	8001ca2 <main+0x2e2>
		    	moveRotation += 10;
 8001c90:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <main+0x41c>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	330a      	adds	r3, #10
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <main+0x41c>)
 8001ca0:	801a      	strh	r2, [r3, #0]
		    }
		    if(moveRotation < 0){
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <main+0x41c>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da08      	bge.n	8001cbe <main+0x2fe>
		    	moveRotation -= 10;
 8001cac:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <main+0x41c>)
 8001cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b0a      	subs	r3, #10
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <main+0x41c>)
 8001cbc:	801a      	strh	r2, [r3, #0]
		    }

			sendData(0, 0, moveRotation);
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <main+0x41c>)
 8001cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 fd4d 	bl	8002768 <_Z8sendDataths>

			for(uint8_t led = 0; led < 16; led++){
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cd8:	2b0f      	cmp	r3, #15
 8001cda:	d82b      	bhi.n	8001d34 <main+0x374>
				NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos0, 90, 128, 100), 255, calc.similarityNormal(led, ledPos0, 90));
 8001cdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ce0:	b29c      	uxth	r4, r3
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <main+0x420>)
 8001ce4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce8:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001cec:	2364      	movs	r3, #100	; 0x64
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	235a      	movs	r3, #90	; 0x5a
 8001cf6:	4838      	ldr	r0, [pc, #224]	; (8001dd8 <main+0x418>)
 8001cf8:	f7ff fc52 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461d      	mov	r5, r3
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <main+0x420>)
 8001d02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d06:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001d0a:	235a      	movs	r3, #90	; 0x5a
 8001d0c:	4832      	ldr	r0, [pc, #200]	; (8001dd8 <main+0x418>)
 8001d0e:	f7ff fd53 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001d12:	4603      	mov	r3, r0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	23ff      	movs	r3, #255	; 0xff
 8001d18:	462a      	mov	r2, r5
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	4831      	ldr	r0, [pc, #196]	; (8001de4 <main+0x424>)
 8001d1e:	f001 f83b 	bl	8002d98 <_ZN7WS2812C7set_hsvEtsss>
				NeopixelTape.show();
 8001d22:	4830      	ldr	r0, [pc, #192]	; (8001de4 <main+0x424>)
 8001d24:	f001 f902 	bl	8002f2c <_ZN7WS2812C4showEv>
			for(uint8_t led = 0; led < 16; led++){
 8001d28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d32:	e7cf      	b.n	8001cd4 <main+0x314>
			  }
			for(uint8_t led = 32; led < 48; led++){
 8001d34:	2320      	movs	r3, #32
 8001d36:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001d3a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8001d40:	f200 8177 	bhi.w	8002032 <main+0x672>
				NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, ledPos2, 90));
 8001d44:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001d48:	b29c      	uxth	r4, r3
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <main+0x428>)
 8001d4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d50:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8001d54:	2364      	movs	r3, #100	; 0x64
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	235a      	movs	r3, #90	; 0x5a
 8001d5e:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <main+0x418>)
 8001d60:	f7ff fc1e 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461d      	mov	r5, r3
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <main+0x428>)
 8001d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d6e:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8001d72:	235a      	movs	r3, #90	; 0x5a
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <main+0x418>)
 8001d76:	f7ff fd1f 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	23ff      	movs	r3, #255	; 0xff
 8001d80:	462a      	mov	r2, r5
 8001d82:	4621      	mov	r1, r4
 8001d84:	4817      	ldr	r0, [pc, #92]	; (8001de4 <main+0x424>)
 8001d86:	f001 f807 	bl	8002d98 <_ZN7WS2812C7set_hsvEtsss>
				NeopixelTape.show();
 8001d8a:	4816      	ldr	r0, [pc, #88]	; (8001de4 <main+0x424>)
 8001d8c:	f001 f8ce 	bl	8002f2c <_ZN7WS2812C4showEv>
			for(uint8_t led = 32; led < 48; led++){
 8001d90:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001d94:	3301      	adds	r3, #1
 8001d96:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001d9a:	e7ce      	b.n	8001d3a <main+0x37a>
			}
	    }else if(HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 1){
 8001d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da0:	4812      	ldr	r0, [pc, #72]	; (8001dec <main+0x42c>)
 8001da2:	f002 f867 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d121      	bne.n	8001df0 <main+0x430>
 8001dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db0:	480e      	ldr	r0, [pc, #56]	; (8001dec <main+0x42c>)
 8001db2:	f002 f85f 	bl	8003e74 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d119      	bne.n	8001df0 <main+0x430>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e018      	b.n	8001df2 <main+0x432>
 8001dc0:	20001938 	.word	0x20001938
 8001dc4:	20001908 	.word	0x20001908
 8001dc8:	2000193c 	.word	0x2000193c
 8001dcc:	20001920 	.word	0x20001920
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	200019c6 	.word	0x200019c6
 8001dd8:	20001904 	.word	0x20001904
 8001ddc:	200019cc 	.word	0x200019cc
 8001de0:	200019c0 	.word	0x200019c0
 8001de4:	2000027c 	.word	0x2000027c
 8001de8:	200019c2 	.word	0x200019c2
 8001dec:	40020400 	.word	0x40020400
 8001df0:	2300      	movs	r3, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80d2 	beq.w	8001f9c <main+0x5dc>
		    servo0.moveCont(1500, 0, servoPos0);
 8001df8:	4b91      	ldr	r3, [pc, #580]	; (8002040 <main+0x680>)
 8001dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e04:	488f      	ldr	r0, [pc, #572]	; (8002044 <main+0x684>)
 8001e06:	f7ff fa5f 	bl	80012c8 <_ZN3STS8moveContEtss>
		    servo2.moveCont(1500, 0, servoPos2);
 8001e0a:	4b8f      	ldr	r3, [pc, #572]	; (8002048 <main+0x688>)
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e16:	488d      	ldr	r0, [pc, #564]	; (800204c <main+0x68c>)
 8001e18:	f7ff fa56 	bl	80012c8 <_ZN3STS8moveContEtss>

		    if(i != 8){
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <main+0x690>)
 8001e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d018      	beq.n	8001e58 <main+0x498>
		    	i -= 8;
 8001e26:	4b8a      	ldr	r3, [pc, #552]	; (8002050 <main+0x690>)
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	4b86      	ldr	r3, [pc, #536]	; (8002050 <main+0x690>)
 8001e36:	801a      	strh	r2, [r3, #0]
		    	if(i < -180){
 8001e38:	4b85      	ldr	r3, [pc, #532]	; (8002050 <main+0x690>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001e42:	da09      	bge.n	8001e58 <main+0x498>
		    		i += 360;
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <main+0x690>)
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	4b7e      	ldr	r3, [pc, #504]	; (8002050 <main+0x690>)
 8001e56:	801a      	strh	r2, [r3, #0]
		    	}
		    }

		    moveRotation = calc.calcRotation(i, gyro);
 8001e58:	4b7d      	ldr	r3, [pc, #500]	; (8002050 <main+0x690>)
 8001e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5e:	4a7d      	ldr	r2, [pc, #500]	; (8002054 <main+0x694>)
 8001e60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e64:	4619      	mov	r1, r3
 8001e66:	487c      	ldr	r0, [pc, #496]	; (8002058 <main+0x698>)
 8001e68:	f7ff fd6a 	bl	8001940 <_ZN4CALC12calcRotationEss>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b7a      	ldr	r3, [pc, #488]	; (800205c <main+0x69c>)
 8001e72:	801a      	strh	r2, [r3, #0]

		    if(moveRotation > 0){
 8001e74:	4b79      	ldr	r3, [pc, #484]	; (800205c <main+0x69c>)
 8001e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	dd08      	ble.n	8001e90 <main+0x4d0>
		    	moveRotation += 10;
 8001e7e:	4b77      	ldr	r3, [pc, #476]	; (800205c <main+0x69c>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	330a      	adds	r3, #10
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <main+0x69c>)
 8001e8e:	801a      	strh	r2, [r3, #0]
		    }
		    if(moveRotation < 0){
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <main+0x69c>)
 8001e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da08      	bge.n	8001eac <main+0x4ec>
		    	moveRotation -= 10;
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <main+0x69c>)
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b0a      	subs	r3, #10
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	4b6c      	ldr	r3, [pc, #432]	; (800205c <main+0x69c>)
 8001eaa:	801a      	strh	r2, [r3, #0]
		    }

			sendData(0, 0, moveRotation);
 8001eac:	4b6b      	ldr	r3, [pc, #428]	; (800205c <main+0x69c>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 fc56 	bl	8002768 <_Z8sendDataths>

			for(uint8_t led = 0; led < 16; led++){
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001ec2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	d830      	bhi.n	8001f2c <main+0x56c>
				NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8001eca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001ece:	b29c      	uxth	r4, r3
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <main+0x6a0>)
 8001ed2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ed6:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	235a      	movs	r3, #90	; 0x5a
 8001ee4:	485c      	ldr	r0, [pc, #368]	; (8002058 <main+0x698>)
 8001ee6:	f7ff fb5b 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461d      	mov	r5, r3
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <main+0x6a0>)
 8001ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001f02:	235a      	movs	r3, #90	; 0x5a
 8001f04:	4854      	ldr	r0, [pc, #336]	; (8002058 <main+0x698>)
 8001f06:	f7ff fc57 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	23ff      	movs	r3, #255	; 0xff
 8001f10:	462a      	mov	r2, r5
 8001f12:	4621      	mov	r1, r4
 8001f14:	4853      	ldr	r0, [pc, #332]	; (8002064 <main+0x6a4>)
 8001f16:	f000 ff3f 	bl	8002d98 <_ZN7WS2812C7set_hsvEtsss>
				NeopixelTape.show();
 8001f1a:	4852      	ldr	r0, [pc, #328]	; (8002064 <main+0x6a4>)
 8001f1c:	f001 f806 	bl	8002f2c <_ZN7WS2812C4showEv>
			for(uint8_t led = 0; led < 16; led++){
 8001f20:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f24:	3301      	adds	r3, #1
 8001f26:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001f2a:	e7ca      	b.n	8001ec2 <main+0x502>
			  }
			for(uint8_t led = 32; led < 48; led++){
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001f32:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001f36:	2b2f      	cmp	r3, #47	; 0x2f
 8001f38:	d87b      	bhi.n	8002032 <main+0x672>
				NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8001f3a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001f3e:	b29c      	uxth	r4, r3
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <main+0x6a0>)
 8001f42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f46:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8001f4a:	2364      	movs	r3, #100	; 0x64
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	235a      	movs	r3, #90	; 0x5a
 8001f54:	4840      	ldr	r0, [pc, #256]	; (8002058 <main+0x698>)
 8001f56:	f7ff fb23 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	4b40      	ldr	r3, [pc, #256]	; (8002060 <main+0x6a0>)
 8001f60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8001f72:	235a      	movs	r3, #90	; 0x5a
 8001f74:	4838      	ldr	r0, [pc, #224]	; (8002058 <main+0x698>)
 8001f76:	f7ff fc1f 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	23ff      	movs	r3, #255	; 0xff
 8001f80:	462a      	mov	r2, r5
 8001f82:	4621      	mov	r1, r4
 8001f84:	4837      	ldr	r0, [pc, #220]	; (8002064 <main+0x6a4>)
 8001f86:	f000 ff07 	bl	8002d98 <_ZN7WS2812C7set_hsvEtsss>
				NeopixelTape.show();
 8001f8a:	4836      	ldr	r0, [pc, #216]	; (8002064 <main+0x6a4>)
 8001f8c:	f000 ffce 	bl	8002f2c <_ZN7WS2812C4showEv>
			for(uint8_t led = 32; led < 48; led++){
 8001f90:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001f94:	3301      	adds	r3, #1
 8001f96:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001f9a:	e7ca      	b.n	8001f32 <main+0x572>
			}
	    }else{
		    servo0.moveCont(1000, 0, servoPos0);
 8001f9c:	4b28      	ldr	r3, [pc, #160]	; (8002040 <main+0x680>)
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fa8:	4826      	ldr	r0, [pc, #152]	; (8002044 <main+0x684>)
 8001faa:	f7ff f98d 	bl	80012c8 <_ZN3STS8moveContEtss>
		    servo2.moveCont(1000, 0, servoPos2);
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <main+0x688>)
 8001fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fba:	4824      	ldr	r0, [pc, #144]	; (800204c <main+0x68c>)
 8001fbc:	f7ff f984 	bl	80012c8 <_ZN3STS8moveContEtss>
	    	sendData(0, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 fbcf 	bl	8002768 <_Z8sendDataths>
			for(uint8_t led = 0; led < 16; led++){
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001fd0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d812      	bhi.n	8001ffe <main+0x63e>
				NeopixelTape.set_hsv(led, 0, 0, 0);
 8001fd8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	481f      	ldr	r0, [pc, #124]	; (8002064 <main+0x6a4>)
 8001fe8:	f000 fed6 	bl	8002d98 <_ZN7WS2812C7set_hsvEtsss>
				NeopixelTape.show();
 8001fec:	481d      	ldr	r0, [pc, #116]	; (8002064 <main+0x6a4>)
 8001fee:	f000 ff9d 	bl	8002f2c <_ZN7WS2812C4showEv>
			for(uint8_t led = 0; led < 16; led++){
 8001ff2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001ffc:	e7e8      	b.n	8001fd0 <main+0x610>
			  }
			for(uint8_t led = 32; led < 48; led++){
 8001ffe:	2320      	movs	r3, #32
 8002000:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8002004:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002008:	2b2f      	cmp	r3, #47	; 0x2f
 800200a:	d812      	bhi.n	8002032 <main+0x672>
				NeopixelTape.set_hsv(led, 0, 0, 0);
 800200c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002010:	b299      	uxth	r1, r3
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	2200      	movs	r2, #0
 800201a:	4812      	ldr	r0, [pc, #72]	; (8002064 <main+0x6a4>)
 800201c:	f000 febc 	bl	8002d98 <_ZN7WS2812C7set_hsvEtsss>
				NeopixelTape.show();
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <main+0x6a4>)
 8002022:	f000 ff83 	bl	8002f2c <_ZN7WS2812C4showEv>
			for(uint8_t led = 32; led < 48; led++){
 8002026:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800202a:	3301      	adds	r3, #1
 800202c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8002030:	e7e8      	b.n	8002004 <main+0x644>
			}
	    }



		m++;
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <main+0x6a8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <main+0x6a8>)
 800203a:	6013      	str	r3, [r2, #0]





  }
 800203c:	e514      	b.n	8001a68 <main+0xa8>
 800203e:	bf00      	nop
 8002040:	20001938 	.word	0x20001938
 8002044:	20001908 	.word	0x20001908
 8002048:	2000193c 	.word	0x2000193c
 800204c:	20001920 	.word	0x20001920
 8002050:	20000008 	.word	0x20000008
 8002054:	200019c6 	.word	0x200019c6
 8002058:	20001904 	.word	0x20001904
 800205c:	200019cc 	.word	0x200019cc
 8002060:	200019c2 	.word	0x200019c2
 8002064:	2000027c 	.word	0x2000027c
 8002068:	200019c8 	.word	0x200019c8

0800206c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b094      	sub	sp, #80	; 0x50
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	2234      	movs	r2, #52	; 0x34
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f006 ffcc 	bl	8009018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	f107 0308 	add.w	r3, r7, #8
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <_Z18SystemClock_Configv+0xe4>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	4a2d      	ldr	r2, [pc, #180]	; (8002150 <_Z18SystemClock_Configv+0xe4>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	6413      	str	r3, [r2, #64]	; 0x40
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <_Z18SystemClock_Configv+0xe4>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020ac:	2300      	movs	r3, #0
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4b28      	ldr	r3, [pc, #160]	; (8002154 <_Z18SystemClock_Configv+0xe8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <_Z18SystemClock_Configv+0xe8>)
 80020ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b24      	ldr	r3, [pc, #144]	; (8002154 <_Z18SystemClock_Configv+0xe8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d6:	2302      	movs	r3, #2
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80020e0:	2310      	movs	r3, #16
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80020e8:	2306      	movs	r3, #6
 80020ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020ec:	2302      	movs	r3, #2
 80020ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 faf9 	bl	80056f0 <HAL_RCC_OscConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800210e:	f000 fb87 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002112:	230f      	movs	r3, #15
 8002114:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002116:	2302      	movs	r3, #2
 8002118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f002 ff97 	bl	8005060 <HAL_RCC_ClockConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8002142:	f000 fb6d 	bl	8002820 <Error_Handler>
  }
}
 8002146:	bf00      	nop
 8002148:	3750      	adds	r7, #80	; 0x50
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	40007000 	.word	0x40007000

08002158 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <_ZL12MX_I2C1_Initv+0x60>)
 8002160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <_ZL12MX_I2C1_Initv+0x64>)
 8002166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800217a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002196:	f001 fe9f 	bl	8003ed8 <HAL_I2C_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80021aa:	f000 fb39 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000098 	.word	0x20000098
 80021b8:	40005400 	.word	0x40005400
 80021bc:	000186a0 	.word	0x000186a0

080021c0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08e      	sub	sp, #56	; 0x38
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 80021f2:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <_ZL12MX_TIM3_Initv+0x118>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 8002202:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 8002204:	2227      	movs	r2, #39	; 0x27
 8002206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002214:	482f      	ldr	r0, [pc, #188]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 8002216:	f003 fd09 	bl	8005c2c <HAL_TIM_Base_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 800222a:	f000 faf9 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002234:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002238:	4619      	mov	r1, r3
 800223a:	4826      	ldr	r0, [pc, #152]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 800223c:	f004 f828 	bl	8006290 <HAL_TIM_ConfigClockSource>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8002250:	f000 fae6 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002254:	481f      	ldr	r0, [pc, #124]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 8002256:	f003 fd38 	bl	8005cca <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800226a:	f000 fad9 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	4619      	mov	r1, r3
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 800227e:	f004 fcc3 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 8002292:	f000 fac5 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002296:	2360      	movs	r3, #96	; 0x60
 8002298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4809      	ldr	r0, [pc, #36]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 80022ae:	f003 ff2d 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80022c2:	f000 faad 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <_ZL12MX_TIM3_Initv+0x114>)
 80022c8:	f000 fbc0 	bl	8002a4c <HAL_TIM_MspPostInit>

}
 80022cc:	bf00      	nop
 80022ce:	3738      	adds	r7, #56	; 0x38
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200000ec 	.word	0x200000ec
 80022d8:	40000400 	.word	0x40000400

080022dc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <_ZL19MX_USART2_UART_Initv+0x58>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 80022e8:	4a13      	ldr	r2, [pc, #76]	; (8002338 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80022ea:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002300:	220c      	movs	r2, #12
 8002302:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002310:	4807      	ldr	r0, [pc, #28]	; (8002330 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002312:	f004 fcf5 	bl	8006d00 <HAL_UART_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8002326:	f000 fa7b 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000194 	.word	0x20000194
 8002334:	40004400 	.word	0x40004400
 8002338:	000f4240 	.word	0x000f4240

0800233c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800234c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002372:	4807      	ldr	r0, [pc, #28]	; (8002390 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002374:	f004 fcc4 	bl	8006d00 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	bf14      	ite	ne
 800237e:	2301      	movne	r3, #1
 8002380:	2300      	moveq	r3, #0
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002388:	f000 fa4a 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200001d8 	.word	0x200001d8
 8002394:	40004800 	.word	0x40004800

08002398 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <_ZL11MX_DMA_Initv+0x4c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <_ZL11MX_DMA_Initv+0x4c>)
 80023a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <_ZL11MX_DMA_Initv+0x4c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	200f      	movs	r0, #15
 80023c0:	f001 f81d 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80023c4:	200f      	movs	r0, #15
 80023c6:	f001 f836 	bl	8003436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2010      	movs	r0, #16
 80023d0:	f001 f815 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023d4:	2010      	movs	r0, #16
 80023d6:	f001 f82e 	bl	8003436 <HAL_NVIC_EnableIRQ>

}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a2b      	ldr	r2, [pc, #172]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <_ZL12MX_GPIO_Initv+0xe8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	2102      	movs	r1, #2
 8002472:	4818      	ldr	r0, [pc, #96]	; (80024d4 <_ZL12MX_GPIO_Initv+0xec>)
 8002474:	f001 fd16 	bl	8003ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 8002478:	2301      	movs	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800247c:	2303      	movs	r3, #3
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4619      	mov	r1, r3
 800248a:	4812      	ldr	r0, [pc, #72]	; (80024d4 <_ZL12MX_GPIO_Initv+0xec>)
 800248c:	f001 fb5e 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 8002490:	2302      	movs	r3, #2
 8002492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	2301      	movs	r3, #1
 8002496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2300      	movs	r3, #0
 800249e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	480b      	ldr	r0, [pc, #44]	; (80024d4 <_ZL12MX_GPIO_Initv+0xec>)
 80024a8:	f001 fb50 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : slidesw1_Pin slidesw2_Pin */
  GPIO_InitStruct.Pin = slidesw1_Pin|slidesw2_Pin;
 80024ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80024b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <_ZL12MX_GPIO_Initv+0xf0>)
 80024c2:	f001 fb43 	bl	8003b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	; 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400

080024dc <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t ID)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08e      	sub	sp, #56	; 0x38
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	static int16_t inst_pos0 = 0;
	static int16_t inst_pos1 = 0;
	static int16_t inst_pos2 = 0;
	static int16_t inst_pos3 = 0;
	static uint8_t index = 0;
	uint8_t checksum = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t read[15] = {0};
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f107 0318 	add.w	r3, r7, #24
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t position[6] = {0};
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	2300      	movs	r3, #0
 8002504:	823b      	strh	r3, [r7, #16]

  switch (ID)
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d81b      	bhi.n	8002544 <_Z12get_positionh+0x68>
 800250c:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <_Z12get_positionh+0x38>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	0800252d 	.word	0x0800252d
 800251c:	08002535 	.word	0x08002535
 8002520:	0800253d 	.word	0x0800253d
  {
  case 0:
    servo0.send();
 8002524:	4881      	ldr	r0, [pc, #516]	; (800272c <_Z12get_positionh+0x250>)
 8002526:	f7fe ff8d 	bl	8001444 <_ZN3STS4sendEv>
    break;
 800252a:	e00c      	b.n	8002546 <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 800252c:	4880      	ldr	r0, [pc, #512]	; (8002730 <_Z12get_positionh+0x254>)
 800252e:	f7fe ff89 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8002532:	e008      	b.n	8002546 <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 8002534:	487f      	ldr	r0, [pc, #508]	; (8002734 <_Z12get_positionh+0x258>)
 8002536:	f7fe ff85 	bl	8001444 <_ZN3STS4sendEv>
    break;
 800253a:	e004      	b.n	8002546 <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 800253c:	487e      	ldr	r0, [pc, #504]	; (8002738 <_Z12get_positionh+0x25c>)
 800253e:	f7fe ff81 	bl	8001444 <_ZN3STS4sendEv>
    break;
 8002542:	e000      	b.n	8002546 <_Z12get_positionh+0x6a>
  default:
    break;
 8002544:	bf00      	nop
  }

  HAL_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 fe5a 	bl	8003200 <HAL_Delay>

  index = huart2.hdmarx->Instance->NDTR;
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <_Z12get_positionh+0x260>)
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <_Z12get_positionh+0x264>)
 8002558:	701a      	strb	r2, [r3, #0]
  index = sizeof(rxBuf) - index;
 800255a:	4b79      	ldr	r3, [pc, #484]	; (8002740 <_Z12get_positionh+0x264>)
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <_Z12get_positionh+0x264>)
 8002568:	701a      	strb	r2, [r3, #0]

  if (index >= 15)
 800256a:	4b75      	ldr	r3, [pc, #468]	; (8002740 <_Z12get_positionh+0x264>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b0e      	cmp	r3, #14
 8002570:	d919      	bls.n	80025a6 <_Z12get_positionh+0xca>
  {
    for (int i = 0; i < 15; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	633b      	str	r3, [r7, #48]	; 0x30
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2b0e      	cmp	r3, #14
 800257a:	dc14      	bgt.n	80025a6 <_Z12get_positionh+0xca>
    {
      read[i] = rxBuf[index - 14 + i];
 800257c:	4b70      	ldr	r3, [pc, #448]	; (8002740 <_Z12get_positionh+0x264>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f1a3 020e 	sub.w	r2, r3, #14
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	4413      	add	r3, r2
 8002588:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <_Z12get_positionh+0x268>)
 800258a:	5cd1      	ldrb	r1, [r2, r3]
 800258c:	f107 0214 	add.w	r2, r7, #20
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	4413      	add	r3, r2
 8002594:	460a      	mov	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8002598:	2001      	movs	r0, #1
 800259a:	f000 fe31 	bl	8003200 <HAL_Delay>
    for (int i = 0; i < 15; i++)
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	3301      	adds	r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	e7e7      	b.n	8002576 <_Z12get_positionh+0x9a>
    }
  }

  for (int i = 0; i < 8; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	2b07      	cmp	r3, #7
 80025ae:	dc29      	bgt.n	8002604 <_Z12get_positionh+0x128>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 80025b0:	f107 0214 	add.w	r2, r7, #20
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2bff      	cmp	r3, #255	; 0xff
 80025bc:	d11e      	bne.n	80025fc <_Z12get_positionh+0x120>
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	3301      	adds	r3, #1
 80025c2:	3338      	adds	r3, #56	; 0x38
 80025c4:	443b      	add	r3, r7
 80025c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025ca:	2bff      	cmp	r3, #255	; 0xff
 80025cc:	d116      	bne.n	80025fc <_Z12get_positionh+0x120>
    {
      for (int j = 0; j < 6; j++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	dc11      	bgt.n	80025fc <_Z12get_positionh+0x120>
      {
        position[j] = read[i + j + 2];
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	4413      	add	r3, r2
 80025de:	3302      	adds	r3, #2
 80025e0:	3338      	adds	r3, #56	; 0x38
 80025e2:	443b      	add	r3, r7
 80025e4:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 80025e8:	f107 020c 	add.w	r2, r7, #12
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	4413      	add	r3, r2
 80025f0:	460a      	mov	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	3301      	adds	r3, #1
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fa:	e7ea      	b.n	80025d2 <_Z12get_positionh+0xf6>
  for (int i = 0; i < 8; i++)
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	3301      	adds	r3, #1
 8002600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002602:	e7d2      	b.n	80025aa <_Z12get_positionh+0xce>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	2b04      	cmp	r3, #4
 800260c:	dc0d      	bgt.n	800262a <_Z12get_positionh+0x14e>
  {
    checksum += position[i];
 800260e:	f107 020c 	add.w	r2, r7, #12
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	4413      	add	r3, r2
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800261c:	4413      	add	r3, r2
 800261e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	3301      	adds	r3, #1
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	e7ee      	b.n	8002608 <_Z12get_positionh+0x12c>
  }
  checksum = ~checksum;
 800262a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800262e:	43db      	mvns	r3, r3
 8002630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 8002634:	7c7b      	ldrb	r3, [r7, #17]
 8002636:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800263a:	429a      	cmp	r2, r3
 800263c:	d118      	bne.n	8002670 <_Z12get_positionh+0x194>
 800263e:	7b3b      	ldrb	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d115      	bne.n	8002670 <_Z12get_positionh+0x194>
  {
    inst_pos0 = position[3] + position[4] * 256;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	b29a      	uxth	r2, r3
 8002648:	7c3b      	ldrb	r3, [r7, #16]
 800264a:	b29b      	uxth	r3, r3
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b29b      	uxth	r3, r3
 8002650:	4413      	add	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	b21a      	sxth	r2, r3
 8002656:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <_Z12get_positionh+0x26c>)
 8002658:	801a      	strh	r2, [r3, #0]
    servoPos0 = servo0.calculate_position(inst_pos0);
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <_Z12get_positionh+0x26c>)
 800265c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002660:	4619      	mov	r1, r3
 8002662:	4832      	ldr	r0, [pc, #200]	; (800272c <_Z12get_positionh+0x250>)
 8002664:	f7fe ff2a 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	4b37      	ldr	r3, [pc, #220]	; (800274c <_Z12get_positionh+0x270>)
 800266e:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 8002670:	7c7b      	ldrb	r3, [r7, #17]
 8002672:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002676:	429a      	cmp	r2, r3
 8002678:	d118      	bne.n	80026ac <_Z12get_positionh+0x1d0>
 800267a:	7b3b      	ldrb	r3, [r7, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d115      	bne.n	80026ac <_Z12get_positionh+0x1d0>
  {
	inst_pos1 = position[3] + position[4] * 256;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	b29a      	uxth	r2, r3
 8002684:	7c3b      	ldrb	r3, [r7, #16]
 8002686:	b29b      	uxth	r3, r3
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	b29b      	uxth	r3, r3
 800268c:	4413      	add	r3, r2
 800268e:	b29b      	uxth	r3, r3
 8002690:	b21a      	sxth	r2, r3
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <_Z12get_positionh+0x274>)
 8002694:	801a      	strh	r2, [r3, #0]
	servoPos1 = servo1.calculate_position(inst_pos1);
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <_Z12get_positionh+0x274>)
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	4619      	mov	r1, r3
 800269e:	4824      	ldr	r0, [pc, #144]	; (8002730 <_Z12get_positionh+0x254>)
 80026a0:	f7fe ff0c 	bl	80014bc <_ZN3STS18calculate_positionEs>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <_Z12get_positionh+0x278>)
 80026aa:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 80026ac:	7c7b      	ldrb	r3, [r7, #17]
 80026ae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d118      	bne.n	80026e8 <_Z12get_positionh+0x20c>
 80026b6:	7b3b      	ldrb	r3, [r7, #12]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d115      	bne.n	80026e8 <_Z12get_positionh+0x20c>
  {
	inst_pos2 = position[3] + position[4] * 256;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	7c3b      	ldrb	r3, [r7, #16]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <_Z12get_positionh+0x27c>)
 80026d0:	801a      	strh	r2, [r3, #0]
	servoPos2 = servo2.calculate_position(inst_pos2);
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <_Z12get_positionh+0x27c>)
 80026d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d8:	4619      	mov	r1, r3
 80026da:	4816      	ldr	r0, [pc, #88]	; (8002734 <_Z12get_positionh+0x258>)
 80026dc:	f7fe feee 	bl	80014bc <_ZN3STS18calculate_positionEs>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <_Z12get_positionh+0x280>)
 80026e6:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 80026e8:	7c7b      	ldrb	r3, [r7, #17]
 80026ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d118      	bne.n	8002724 <_Z12get_positionh+0x248>
 80026f2:	7b3b      	ldrb	r3, [r7, #12]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d115      	bne.n	8002724 <_Z12get_positionh+0x248>
  {
	inst_pos3 = position[3] + position[4] * 256;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	7c3b      	ldrb	r3, [r7, #16]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	b29b      	uxth	r3, r3
 8002704:	4413      	add	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	b21a      	sxth	r2, r3
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <_Z12get_positionh+0x284>)
 800270c:	801a      	strh	r2, [r3, #0]
	servoPos3 = servo3.calculate_position(inst_pos3);
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <_Z12get_positionh+0x284>)
 8002710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002714:	4619      	mov	r1, r3
 8002716:	4808      	ldr	r0, [pc, #32]	; (8002738 <_Z12get_positionh+0x25c>)
 8002718:	f7fe fed0 	bl	80014bc <_ZN3STS18calculate_positionEs>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <_Z12get_positionh+0x288>)
 8002722:	801a      	strh	r2, [r3, #0]
  }
}
 8002724:	bf00      	nop
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20001908 	.word	0x20001908
 8002730:	20001914 	.word	0x20001914
 8002734:	20001920 	.word	0x20001920
 8002738:	2000192c 	.word	0x2000192c
 800273c:	20000194 	.word	0x20000194
 8002740:	200019d6 	.word	0x200019d6
 8002744:	20001940 	.word	0x20001940
 8002748:	200019ce 	.word	0x200019ce
 800274c:	20001938 	.word	0x20001938
 8002750:	200019d0 	.word	0x200019d0
 8002754:	2000193a 	.word	0x2000193a
 8002758:	200019d2 	.word	0x200019d2
 800275c:	2000193c 	.word	0x2000193c
 8002760:	200019d4 	.word	0x200019d4
 8002764:	2000193e 	.word	0x2000193e

08002768 <_Z8sendDataths>:

void sendData(uint16_t angle, uint8_t speed, int16_t rotation){
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
 8002772:	460b      	mov	r3, r1
 8002774:	717b      	strb	r3, [r7, #5]
 8002776:	4613      	mov	r3, r2
 8002778:	807b      	strh	r3, [r7, #2]
	  uint8_t checksum = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]

	  rotation += 360;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002784:	b29b      	uxth	r3, r3
 8002786:	807b      	strh	r3, [r7, #2]

	  sendArray[2] = angle / 256;
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	b29b      	uxth	r3, r3
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <_Z8sendDataths+0xb0>)
 8002792:	709a      	strb	r2, [r3, #2]
	  sendArray[3] = angle % 256;
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <_Z8sendDataths+0xb0>)
 800279a:	70da      	strb	r2, [r3, #3]
	  sendArray[4] = speed;
 800279c:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <_Z8sendDataths+0xb0>)
 800279e:	797b      	ldrb	r3, [r7, #5]
 80027a0:	7113      	strb	r3, [r2, #4]
	  sendArray[5] = rotation / 256;
 80027a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	da00      	bge.n	80027ac <_Z8sendDataths+0x44>
 80027aa:	33ff      	adds	r3, #255	; 0xff
 80027ac:	121b      	asrs	r3, r3, #8
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <_Z8sendDataths+0xb0>)
 80027b4:	715a      	strb	r2, [r3, #5]
	  sendArray[6] = rotation % 256;
 80027b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027ba:	425a      	negs	r2, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	bf58      	it	pl
 80027c2:	4253      	negpl	r3, r2
 80027c4:	b21b      	sxth	r3, r3
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <_Z8sendDataths+0xb0>)
 80027ca:	719a      	strb	r2, [r3, #6]

	  for (uint8_t i = 2; i < 7; i++)
 80027cc:	2302      	movs	r3, #2
 80027ce:	73bb      	strb	r3, [r7, #14]
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d809      	bhi.n	80027ea <_Z8sendDataths+0x82>
	  {
	    checksum += sendArray[i];
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <_Z8sendDataths+0xb0>)
 80027da:	5cd2      	ldrb	r2, [r2, r3]
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	4413      	add	r3, r2
 80027e0:	73fb      	strb	r3, [r7, #15]
	  for (uint8_t i = 2; i < 7; i++)
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	3301      	adds	r3, #1
 80027e6:	73bb      	strb	r3, [r7, #14]
 80027e8:	e7f2      	b.n	80027d0 <_Z8sendDataths+0x68>
	  }
	  checksum = ~checksum;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	73fb      	strb	r3, [r7, #15]
	  checksum += 10;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	330a      	adds	r3, #10
 80027f4:	73fb      	strb	r3, [r7, #15]
	  sendArray[7] = checksum;
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <_Z8sendDataths+0xb0>)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	71d3      	strb	r3, [r2, #7]
	  HAL_UART_Transmit(&huart3, sendArray, 8, 100);
 80027fc:	2364      	movs	r3, #100	; 0x64
 80027fe:	2208      	movs	r2, #8
 8002800:	4905      	ldr	r1, [pc, #20]	; (8002818 <_Z8sendDataths+0xb0>)
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <_Z8sendDataths+0xb4>)
 8002804:	f004 fac9 	bl	8006d9a <HAL_UART_Transmit>
	  HAL_Delay(1);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 fcf9 	bl	8003200 <HAL_Delay>
}
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000
 800281c:	200001d8 	.word	0x200001d8

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002828:	e7fe      	b.n	8002828 <Error_Handler+0x8>
	...

0800282c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d11e      	bne.n	800287a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002842:	4293      	cmp	r3, r2
 8002844:	d119      	bne.n	800287a <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	490f      	ldr	r1, [pc, #60]	; (8002888 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800284c:	480f      	ldr	r0, [pc, #60]	; (800288c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800284e:	f000 fa59 	bl	8002d04 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	490e      	ldr	r1, [pc, #56]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002856:	480f      	ldr	r0, [pc, #60]	; (8002894 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002858:	f7fe fd18 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	490c      	ldr	r1, [pc, #48]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002862:	f7fe fd13 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 8002866:	2202      	movs	r2, #2
 8002868:	4909      	ldr	r1, [pc, #36]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800286a:	480c      	ldr	r0, [pc, #48]	; (800289c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800286c:	f7fe fd0e 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 8002870:	2203      	movs	r2, #3
 8002872:	4907      	ldr	r1, [pc, #28]	; (8002890 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002874:	480a      	ldr	r0, [pc, #40]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002876:	f7fe fd09 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000134 	.word	0x20000134
 8002888:	200000ec 	.word	0x200000ec
 800288c:	2000027c 	.word	0x2000027c
 8002890:	20000194 	.word	0x20000194
 8002894:	20001908 	.word	0x20001908
 8002898:	20001914 	.word	0x20001914
 800289c:	20001920 	.word	0x20001920
 80028a0:	2000192c 	.word	0x2000192c

080028a4 <_GLOBAL__sub_I_hi2c1>:
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff ffbd 	bl	800282c <_Z41__static_initialization_and_destruction_0ii>
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_MspInit+0x4c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_MspInit+0x4c>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <HAL_MspInit+0x4c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_MspInit+0x4c>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a08      	ldr	r2, [pc, #32]	; (8002900 <HAL_MspInit+0x4c>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MspInit+0x4c>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_I2C_MspInit+0x84>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d12c      	bne.n	8002980 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_I2C_MspInit+0x88>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002942:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002948:	2312      	movs	r3, #18
 800294a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002954:	2304      	movs	r3, #4
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	480c      	ldr	r0, [pc, #48]	; (8002990 <HAL_I2C_MspInit+0x8c>)
 8002960:	f001 f8f4 	bl	8003b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_I2C_MspInit+0x88>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_I2C_MspInit+0x88>)
 800296e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_I2C_MspInit+0x88>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002980:	bf00      	nop
 8002982:	3728      	adds	r7, #40	; 0x28
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40005400 	.word	0x40005400
 800298c:	40023800 	.word	0x40023800
 8002990:	40020400 	.word	0x40020400

08002994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <HAL_TIM_Base_MspInit+0xa8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d145      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_TIM_Base_MspInit+0xac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_TIM_Base_MspInit+0xac>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <HAL_TIM_Base_MspInit+0xac>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029c4:	4a20      	ldr	r2, [pc, #128]	; (8002a48 <HAL_TIM_Base_MspInit+0xb4>)
 80029c6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029ca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80029ce:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 80029fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a02:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002a0a:	480e      	ldr	r0, [pc, #56]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 8002a0c:	f000 fd2e 	bl	800346c <HAL_DMA_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8002a16:	f7ff ff03 	bl	8002820 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002a20:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a2c:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_TIM_Base_MspInit+0xb0>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40023800 	.word	0x40023800
 8002a44:	20000134 	.word	0x20000134
 8002a48:	40026070 	.word	0x40026070

08002a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <HAL_TIM_MspPostInit+0x68>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d11d      	bne.n	8002aaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_TIM_MspPostInit+0x6c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIM_MspPostInit+0x6c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_TIM_MspPostInit+0x6c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a8a:	2340      	movs	r3, #64	; 0x40
 8002a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <HAL_TIM_MspPostInit+0x70>)
 8002aa6:	f001 f851 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40000400 	.word	0x40000400
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000

08002ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	; 0x30
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a59      	ldr	r2, [pc, #356]	; (8002c44 <HAL_UART_MspInit+0x184>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d15c      	bne.n	8002b9c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b2a:	2307      	movs	r3, #7
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	4845      	ldr	r0, [pc, #276]	; (8002c4c <HAL_UART_MspInit+0x18c>)
 8002b36:	f001 f809 	bl	8003b4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b3a:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b3c:	4a45      	ldr	r2, [pc, #276]	; (8002c54 <HAL_UART_MspInit+0x194>)
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4e:	4b40      	ldr	r3, [pc, #256]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b54:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5c:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b76:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b7e:	4834      	ldr	r0, [pc, #208]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b80:	f000 fc74 	bl	800346c <HAL_DMA_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b8a:	f7ff fe49 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
 8002b94:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_UART_MspInit+0x190>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b9a:	e04f      	b.n	8002c3c <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <HAL_UART_MspInit+0x198>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d14a      	bne.n	8002c3c <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <HAL_UART_MspInit+0x188>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4811      	ldr	r0, [pc, #68]	; (8002c5c <HAL_UART_MspInit+0x19c>)
 8002c16:	f000 ff99 	bl	8003b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 031c 	add.w	r3, r7, #28
 8002c34:	4619      	mov	r1, r3
 8002c36:	480a      	ldr	r0, [pc, #40]	; (8002c60 <HAL_UART_MspInit+0x1a0>)
 8002c38:	f000 ff88 	bl	8003b4c <HAL_GPIO_Init>
}
 8002c3c:	bf00      	nop
 8002c3e:	3730      	adds	r7, #48	; 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	2000021c 	.word	0x2000021c
 8002c54:	40026088 	.word	0x40026088
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020400 	.word	0x40020400

08002c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <NMI_Handler+0x4>

08002c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <HardFault_Handler+0x4>

08002c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <MemManage_Handler+0x4>

08002c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <BusFault_Handler+0x4>

08002c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <UsageFault_Handler+0x4>

08002c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb0:	f000 fa86 	bl	80031c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <DMA1_Stream4_IRQHandler+0x10>)
 8002cbe:	f000 fcdb 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000134 	.word	0x20000134

08002ccc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <DMA1_Stream5_IRQHandler+0x10>)
 8002cd2:	f000 fcd1 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000021c 	.word	0x2000021c

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	609a      	str	r2, [r3, #8]
}
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	807b      	strh	r3, [r7, #2]
 8002d46:	460b      	mov	r3, r1
 8002d48:	707b      	strb	r3, [r7, #1]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	2b2f      	cmp	r3, #47	; 0x2f
 8002d52:	d81a      	bhi.n	8002d8a <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	330c      	adds	r3, #12
 8002d62:	783a      	ldrb	r2, [r7, #0]
 8002d64:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	330d      	adds	r3, #13
 8002d74:	787a      	ldrb	r2, [r7, #1]
 8002d76:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8002d78:	887a      	ldrh	r2, [r7, #2]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	330e      	adds	r3, #14
 8002d86:	7c3a      	ldrb	r2, [r7, #16]
 8002d88:	701a      	strb	r2, [r3, #0]
	}
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	; 0x30
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	817b      	strh	r3, [r7, #10]
 8002daa:	460b      	mov	r3, r1
 8002dac:	813b      	strh	r3, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 8002db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10b      	bne.n	8002dd2 <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 8002dba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002dbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002dd0:	e09c      	b.n	8002f0c <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 8002dd2:	893b      	ldrh	r3, [r7, #8]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	0052      	lsls	r2, r2, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 8002de0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da00      	bge.n	8002dea <_ZN7WS2812C7set_hsvEtsss+0x52>
 8002de8:	33ff      	adds	r3, #255	; 0xff
 8002dea:	121b      	asrs	r3, r3, #8
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 8002df0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002df4:	425a      	negs	r2, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	bf58      	it	pl
 8002dfc:	4253      	negpl	r3, r2
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 8002e02:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002e06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e0a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da00      	bge.n	8002e18 <_ZN7WS2812C7set_hsvEtsss+0x80>
 8002e16:	33ff      	adds	r3, #255	; 0xff
 8002e18:	121b      	asrs	r3, r3, #8
 8002e1a:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8002e1c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e24:	69f9      	ldr	r1, [r7, #28]
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	da00      	bge.n	8002e30 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8002e2e:	33ff      	adds	r3, #255	; 0xff
 8002e30:	121b      	asrs	r3, r3, #8
 8002e32:	425b      	negs	r3, r3
 8002e34:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da00      	bge.n	8002e42 <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8002e40:	33ff      	adds	r3, #255	; 0xff
 8002e42:	121b      	asrs	r3, r3, #8
 8002e44:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8002e46:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e4e:	69f9      	ldr	r1, [r7, #28]
 8002e50:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da00      	bge.n	8002e5e <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8002e5c:	33ff      	adds	r3, #255	; 0xff
 8002e5e:	121b      	asrs	r3, r3, #8
 8002e60:	425b      	negs	r3, r3
 8002e62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da00      	bge.n	8002e70 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8002e6e:	33ff      	adds	r3, #255	; 0xff
 8002e70:	121b      	asrs	r3, r3, #8
 8002e72:	613b      	str	r3, [r7, #16]

		switch (i) {
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d83e      	bhi.n	8002ef8 <_ZN7WS2812C7set_hsvEtsss+0x160>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002e95 	.word	0x08002e95
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002ed1 	.word	0x08002ed1
 8002e90:	08002ee5 	.word	0x08002ee5
			case 0: r = v; g = t; b = p; break;
 8002e94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ea6:	e031      	b.n	8002f0c <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002eba:	e027      	b.n	8002f0c <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ec2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ec4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ece:	e01d      	b.n	8002f0c <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002edc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ede:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ee2:	e013      	b.n	8002f0c <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ef0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ef2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002ef6:	e009      	b.n	8002f0c <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8002ef8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f0a:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8002f0c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002f10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ff08 	bl	8002d34 <_ZN7WS2812C7set_rgbEthhh>
}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f5a:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d179      	bne.n	8003056 <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2bf9      	cmp	r3, #249	; 0xf9
 8002f6a:	dc0a      	bgt.n	8002f82 <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3326      	adds	r3, #38	; 0x26
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	e7f1      	b.n	8002f66 <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b2f      	cmp	r3, #47	; 0x2f
 8002f8a:	dc52      	bgt.n	8003032 <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	dc49      	bgt.n	800302a <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 8002f96:	2307      	movs	r3, #7
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db40      	blt.n	8003022 <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	18ca      	adds	r2, r1, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	4413      	add	r3, r2
 8002fb0:	330c      	adds	r3, #12
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	fa42 f303 	asr.w	r3, r2, r3
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d114      	bne.n	8002ff2 <_ZN7WS2812C7executeEv+0xa6>
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	441a      	add	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f1c3 0307 	rsb	r3, r3, #7
 8002fe2:	4413      	add	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	3326      	adds	r3, #38	; 0x26
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	2214      	movs	r2, #20
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	e013      	b.n	800301a <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	441a      	add	r2, r3
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f1c3 0307 	rsb	r3, r3, #7
 800300c:	4413      	add	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	3326      	adds	r3, #38	; 0x26
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	220a      	movs	r2, #10
 8003018:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3b01      	subs	r3, #1
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	e7bb      	b.n	8002f9a <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e7b2      	b.n	8002f90 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3301      	adds	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e7a9      	b.n	8002f86 <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6858      	ldr	r0, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	4619      	mov	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8003042:	f240 537a 	movw	r3, #1402	; 0x57a
 8003046:	f002 fe99 	bl	8005d7c <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 8003056:	bf00      	nop
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2bf9      	cmp	r3, #249	; 0xf9
 800306e:	dc0a      	bgt.n	8003086 <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3326      	adds	r3, #38	; 0x26
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e7f1      	b.n	800306a <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8003086:	23fa      	movs	r3, #250	; 0xfa
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003090:	da0a      	bge.n	80030a8 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3326      	adds	r3, #38	; 0x26
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	220a      	movs	r2, #10
 800309e:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	e7f0      	b.n	800308a <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6858      	ldr	r0, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80030b8:	f240 537a 	movw	r3, #1402	; 0x57a
 80030bc:	f002 fe5e 	bl	8005d7c <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003100 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030cc:	480d      	ldr	r0, [pc, #52]	; (8003104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ce:	490e      	ldr	r1, [pc, #56]	; (8003108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030e4:	4c0b      	ldr	r4, [pc, #44]	; (8003114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030f2:	f7ff fdf5 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030f6:	f005 ff5d 	bl	8008fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030fa:	f7fe fc61 	bl	80019c0 <main>
  bx  lr    
 80030fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003108:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800310c:	080094bc 	.word	0x080094bc
  ldr r2, =_sbss
 8003110:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003114:	200019dc 	.word	0x200019dc

08003118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC_IRQHandler>
	...

0800311c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_Init+0x40>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	; (800315c <HAL_Init+0x40>)
 8003126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800312a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_Init+0x40>)
 8003132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <HAL_Init+0x40>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003144:	2003      	movs	r0, #3
 8003146:	f000 f94f 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314a:	200f      	movs	r0, #15
 800314c:	f000 f808 	bl	8003160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003150:	f7ff fbb0 	bl	80028b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00

08003160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_InitTick+0x54>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_InitTick+0x58>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003176:	fbb3 f3f1 	udiv	r3, r3, r1
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f967 	bl	8003452 <HAL_SYSTICK_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00e      	b.n	80031ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d80a      	bhi.n	80031aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003194:	2200      	movs	r2, #0
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f000 f92f 	bl	80033fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a0:	4a06      	ldr	r2, [pc, #24]	; (80031bc <HAL_InitTick+0x5c>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	2000000c 	.word	0x2000000c
 80031b8:	20000014 	.word	0x20000014
 80031bc:	20000010 	.word	0x20000010

080031c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_IncTick+0x20>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_IncTick+0x24>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000014 	.word	0x20000014
 80031e4:	200019d8 	.word	0x200019d8

080031e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_GetTick+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	200019d8 	.word	0x200019d8

08003200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff ffee 	bl	80031e8 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d005      	beq.n	8003226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_Delay+0x44>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003226:	bf00      	nop
 8003228:	f7ff ffde 	bl	80031e8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f7      	bhi.n	8003228 <HAL_Delay+0x28>
  {
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000014 	.word	0x20000014

08003248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327a:	4a04      	ldr	r2, [pc, #16]	; (800328c <__NVIC_SetPriorityGrouping+0x44>)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	60d3      	str	r3, [r2, #12]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0307 	and.w	r3, r3, #7
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	db0b      	blt.n	80032d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	4907      	ldr	r1, [pc, #28]	; (80032e4 <__NVIC_EnableIRQ+0x38>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2001      	movs	r0, #1
 80032ce:	fa00 f202 	lsl.w	r2, r0, r2
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db0a      	blt.n	8003312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	490c      	ldr	r1, [pc, #48]	; (8003334 <__NVIC_SetPriority+0x4c>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	440b      	add	r3, r1
 800330c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003310:	e00a      	b.n	8003328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4908      	ldr	r1, [pc, #32]	; (8003338 <__NVIC_SetPriority+0x50>)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3b04      	subs	r3, #4
 8003320:	0112      	lsls	r2, r2, #4
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	440b      	add	r3, r1
 8003326:	761a      	strb	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b04      	cmp	r3, #4
 8003358:	bf28      	it	cs
 800335a:	2304      	movcs	r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3304      	adds	r3, #4
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <NVIC_EncodePriority+0x30>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b03      	subs	r3, #3
 800336a:	e000      	b.n	800336e <NVIC_EncodePriority+0x32>
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43d9      	mvns	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	4313      	orrs	r3, r2
         );
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	210f      	movs	r1, #15
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	f7ff ff8e 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff29 	bl	8003248 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003410:	f7ff ff3e 	bl	8003290 <__NVIC_GetPriorityGrouping>
 8003414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f7ff ff8e 	bl	800333c <NVIC_EncodePriority>
 8003420:	4602      	mov	r2, r0
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5d 	bl	80032e8 <__NVIC_SetPriority>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff31 	bl	80032ac <__NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa2 	bl	80033a4 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff feb6 	bl	80031e8 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e099      	b.n	80035bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a8:	e00f      	b.n	80034ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034aa:	f7ff fe9d 	bl	80031e8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d908      	bls.n	80034ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2203      	movs	r2, #3
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e078      	b.n	80035bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e8      	bne.n	80034aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_DMA_Init+0x158>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4313      	orrs	r3, r2
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0307 	bic.w	r3, r3, #7
 800354a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b04      	cmp	r3, #4
 800355c:	d117      	bne.n	800358e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 fa6f 	bl	8003a54 <DMA_CheckFifoParam>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800358a:	2301      	movs	r3, #1
 800358c:	e016      	b.n	80035bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa26 	bl	80039e8 <DMA_CalcBaseAndBitshift>
 800359c:	4603      	mov	r3, r0
 800359e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	223f      	movs	r2, #63	; 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	f010803f 	.word	0xf010803f

080035c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_DMA_Start_IT+0x26>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e040      	b.n	8003670 <HAL_DMA_Start_IT+0xa8>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d12f      	bne.n	8003662 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f9b8 	bl	800398c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	223f      	movs	r2, #63	; 0x3f
 8003622:	409a      	lsls	r2, r3
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0216 	orr.w	r2, r2, #22
 8003636:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0208 	orr.w	r2, r2, #8
 800364e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e005      	b.n	800366e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800366a:	2302      	movs	r3, #2
 800366c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003684:	4b8e      	ldr	r3, [pc, #568]	; (80038c0 <HAL_DMA_IRQHandler+0x248>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a8e      	ldr	r2, [pc, #568]	; (80038c4 <HAL_DMA_IRQHandler+0x24c>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2208      	movs	r2, #8
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2210      	movs	r2, #16
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2210      	movs	r2, #16
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d024      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e01f      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0208 	bic.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2220      	movs	r2, #32
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 808f 	beq.w	8003918 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8087 	beq.w	8003918 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2220      	movs	r2, #32
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b05      	cmp	r3, #5
 8003820:	d136      	bne.n	8003890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0216 	bic.w	r2, r2, #22
 8003830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_DMA_IRQHandler+0x1da>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	223f      	movs	r2, #63	; 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07e      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
        }
        return;
 800388e:	e079      	b.n	8003984 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01d      	beq.n	80038da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e02c      	b.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c
 80038c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d023      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
 80038d8:	e01e      	b.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0210 	bic.w	r2, r2, #16
 80038f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	2b00      	cmp	r3, #0
 800391e:	d032      	beq.n	8003986 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2205      	movs	r2, #5
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3301      	adds	r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	429a      	cmp	r2, r3
 800394e:	d307      	bcc.n	8003960 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f2      	bne.n	8003944 <HAL_DMA_IRQHandler+0x2cc>
 800395e:	e000      	b.n	8003962 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003960:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	4798      	blx	r3
 8003982:	e000      	b.n	8003986 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003984:	bf00      	nop
    }
  }
}
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d108      	bne.n	80039cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ca:	e007      	b.n	80039dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3b10      	subs	r3, #16
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <DMA_CalcBaseAndBitshift+0x64>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <DMA_CalcBaseAndBitshift+0x68>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d909      	bls.n	8003a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58
 8003a28:	e007      	b.n	8003a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	aaaaaaab 	.word	0xaaaaaaab
 8003a50:	08009058 	.word	0x08009058

08003a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d856      	bhi.n	8003b22 <DMA_CheckFifoParam+0xce>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <DMA_CheckFifoParam+0x28>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a9f 	.word	0x08003a9f
 8003a84:	08003a8d 	.word	0x08003a8d
 8003a88:	08003b23 	.word	0x08003b23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d046      	beq.n	8003b26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e043      	b.n	8003b26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa6:	d140      	bne.n	8003b2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e03d      	b.n	8003b2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	d121      	bne.n	8003afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d837      	bhi.n	8003b2e <DMA_CheckFifoParam+0xda>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <DMA_CheckFifoParam+0x70>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003adb 	.word	0x08003adb
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003aed 	.word	0x08003aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e030      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d025      	beq.n	8003b32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aea:	e022      	b.n	8003b32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003afa:	e01c      	b.n	8003b36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d903      	bls.n	8003b0a <DMA_CheckFifoParam+0xb6>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d003      	beq.n	8003b10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b08:	e018      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0e:	e015      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e00b      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b22:	bf00      	nop
 8003b24:	e00a      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b26:	bf00      	nop
 8003b28:	e008      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e006      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e004      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e002      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e165      	b.n	8003e34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8154 	bne.w	8003e2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d005      	beq.n	8003b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d130      	bne.n	8003c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0201 	and.w	r2, r3, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d017      	beq.n	8003c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d123      	bne.n	8003c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0203 	and.w	r2, r3, #3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80ae 	beq.w	8003e2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b5d      	ldr	r3, [pc, #372]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	4a5c      	ldr	r2, [pc, #368]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	4b5a      	ldr	r3, [pc, #360]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cee:	4a58      	ldr	r2, [pc, #352]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4f      	ldr	r2, [pc, #316]	; (8003e54 <HAL_GPIO_Init+0x308>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d025      	beq.n	8003d66 <HAL_GPIO_Init+0x21a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4e      	ldr	r2, [pc, #312]	; (8003e58 <HAL_GPIO_Init+0x30c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <HAL_GPIO_Init+0x216>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4d      	ldr	r2, [pc, #308]	; (8003e5c <HAL_GPIO_Init+0x310>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x212>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a4c      	ldr	r2, [pc, #304]	; (8003e60 <HAL_GPIO_Init+0x314>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x20e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a4b      	ldr	r2, [pc, #300]	; (8003e64 <HAL_GPIO_Init+0x318>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x20a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4a      	ldr	r2, [pc, #296]	; (8003e68 <HAL_GPIO_Init+0x31c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x206>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a49      	ldr	r2, [pc, #292]	; (8003e6c <HAL_GPIO_Init+0x320>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x202>
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	e00c      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00a      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d52:	2305      	movs	r3, #5
 8003d54:	e008      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d56:	2304      	movs	r3, #4
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x21c>
 8003d66:	2300      	movs	r3, #0
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d78:	4935      	ldr	r1, [pc, #212]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d86:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003daa:	4a31      	ldr	r2, [pc, #196]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db0:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dda:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e28:	4a11      	ldr	r2, [pc, #68]	; (8003e70 <HAL_GPIO_Init+0x324>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	f67f ae96 	bls.w	8003b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	; 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40013800 	.word	0x40013800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40021400 	.word	0x40021400
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	887b      	ldrh	r3, [r7, #2]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e001      	b.n	8003e96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb4:	787b      	ldrb	r3, [r7, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ec0:	e003      	b.n	8003eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	619a      	str	r2, [r3, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e12b      	b.n	8004142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe fd00 	bl	8002904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f3c:	f001 f982 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4a81      	ldr	r2, [pc, #516]	; (800414c <HAL_I2C_Init+0x274>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d807      	bhi.n	8003f5c <HAL_I2C_Init+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a80      	ldr	r2, [pc, #512]	; (8004150 <HAL_I2C_Init+0x278>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e006      	b.n	8003f6a <HAL_I2C_Init+0x92>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a7d      	ldr	r2, [pc, #500]	; (8004154 <HAL_I2C_Init+0x27c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0e7      	b.n	8004142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a78      	ldr	r2, [pc, #480]	; (8004158 <HAL_I2C_Init+0x280>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0c9b      	lsrs	r3, r3, #18
 8003f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_I2C_Init+0x274>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d802      	bhi.n	8003fac <HAL_I2C_Init+0xd4>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	e009      	b.n	8003fc0 <HAL_I2C_Init+0xe8>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	4a69      	ldr	r2, [pc, #420]	; (800415c <HAL_I2C_Init+0x284>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	495c      	ldr	r1, [pc, #368]	; (800414c <HAL_I2C_Init+0x274>)
 8003fdc:	428b      	cmp	r3, r1
 8003fde:	d819      	bhi.n	8004014 <HAL_I2C_Init+0x13c>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e59      	subs	r1, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ff4:	400b      	ands	r3, r1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_I2C_Init+0x138>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1e59      	subs	r1, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fbb1 f3f3 	udiv	r3, r1, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	e051      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004010:	2304      	movs	r3, #4
 8004012:	e04f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d111      	bne.n	8004040 <HAL_I2C_Init+0x168>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e012      	b.n	8004066 <HAL_I2C_Init+0x18e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	0099      	lsls	r1, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	fbb0 f3f3 	udiv	r3, r0, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x196>
 800406a:	2301      	movs	r3, #1
 800406c:	e022      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10e      	bne.n	8004094 <HAL_I2C_Init+0x1bc>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1e58      	subs	r0, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	440b      	add	r3, r1
 8004084:	fbb0 f3f3 	udiv	r3, r0, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_Init+0x1dc>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e58      	subs	r0, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6859      	ldr	r1, [r3, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6809      	ldr	r1, [r1, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6911      	ldr	r1, [r2, #16]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68d2      	ldr	r2, [r2, #12]
 80040ee:	4311      	orrs	r1, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	000186a0 	.word	0x000186a0
 8004150:	001e847f 	.word	0x001e847f
 8004154:	003d08ff 	.word	0x003d08ff
 8004158:	431bde83 	.word	0x431bde83
 800415c:	10624dd3 	.word	0x10624dd3

08004160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	461a      	mov	r2, r3
 800416c:	460b      	mov	r3, r1
 800416e:	817b      	strh	r3, [r7, #10]
 8004170:	4613      	mov	r3, r2
 8004172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff f838 	bl	80031e8 <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	f040 80e0 	bne.w	8004348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2319      	movs	r3, #25
 800418e:	2201      	movs	r2, #1
 8004190:	4970      	ldr	r1, [pc, #448]	; (8004354 <HAL_I2C_Master_Transmit+0x1f4>)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 fd86 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	e0d3      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_I2C_Master_Transmit+0x50>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e0cc      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d007      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2221      	movs	r2, #33	; 0x21
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2210      	movs	r2, #16
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	893a      	ldrh	r2, [r7, #8]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a50      	ldr	r2, [pc, #320]	; (8004358 <HAL_I2C_Master_Transmit+0x1f8>)
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004218:	8979      	ldrh	r1, [r7, #10]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fbf0 	bl	8004a04 <I2C_MasterRequestWrite>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e08d      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004244:	e066      	b.n	8004314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fe00 	bl	8004e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b04      	cmp	r3, #4
 800425c:	d107      	bne.n	800426e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06b      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <HAL_I2C_Master_Transmit+0x188>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fdf0 	bl	8004ed2 <I2C_WaitOnBTFFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d107      	bne.n	8004310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e01a      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d194      	bne.n	8004246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	00100002 	.word	0x00100002
 8004358:	ffff0000 	.word	0xffff0000

0800435c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	461a      	mov	r2, r3
 8004368:	460b      	mov	r3, r1
 800436a:	817b      	strh	r3, [r7, #10]
 800436c:	4613      	mov	r3, r2
 800436e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004370:	f7fe ff3a 	bl	80031e8 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b20      	cmp	r3, #32
 8004380:	f040 820b 	bne.w	800479a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2319      	movs	r3, #25
 800438a:	2201      	movs	r2, #1
 800438c:	497c      	ldr	r1, [pc, #496]	; (8004580 <HAL_I2C_Master_Receive+0x224>)
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fc88 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
 800439c:	e1fe      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_I2C_Master_Receive+0x50>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e1f7      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d007      	beq.n	80043d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2222      	movs	r2, #34	; 0x22
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2210      	movs	r2, #16
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	893a      	ldrh	r2, [r7, #8]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_I2C_Master_Receive+0x228>)
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004414:	8979      	ldrh	r1, [r7, #10]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fb74 	bl	8004b08 <I2C_MasterRequestRead>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e1b8      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d113      	bne.n	800445a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	623b      	str	r3, [r7, #32]
 8004446:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e18c      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	2b01      	cmp	r3, #1
 8004460:	d11b      	bne.n	800449a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e16c      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d11b      	bne.n	80044da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	e14c      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004500:	e138      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b03      	cmp	r3, #3
 8004508:	f200 80f1 	bhi.w	80046ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	2b01      	cmp	r3, #1
 8004512:	d123      	bne.n	800455c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fd1b 	bl	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e139      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800455a:	e10b      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b02      	cmp	r3, #2
 8004562:	d14e      	bne.n	8004602 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2200      	movs	r2, #0
 800456c:	4906      	ldr	r1, [pc, #24]	; (8004588 <HAL_I2C_Master_Receive+0x22c>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fb98 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e10e      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
 800457e:	bf00      	nop
 8004580:	00100002 	.word	0x00100002
 8004584:	ffff0000 	.word	0xffff0000
 8004588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004600:	e0b8      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2200      	movs	r2, #0
 800460a:	4966      	ldr	r1, [pc, #408]	; (80047a4 <HAL_I2C_Master_Receive+0x448>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fb49 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0bf      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2200      	movs	r2, #0
 8004666:	494f      	ldr	r1, [pc, #316]	; (80047a4 <HAL_I2C_Master_Receive+0x448>)
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fb1b 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e091      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ec:	e042      	b.n	8004774 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fc2e 	bl	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e04c      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b04      	cmp	r3, #4
 8004740:	d118      	bne.n	8004774 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f aec2 	bne.w	8004502 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	00010004 	.word	0x00010004

080047a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	460b      	mov	r3, r1
 80047b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fe fd16 	bl	80031e8 <HAL_GetTick>
 80047bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	f040 8111 	bne.w	80049f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2319      	movs	r3, #25
 80047d6:	2201      	movs	r2, #1
 80047d8:	4988      	ldr	r1, [pc, #544]	; (80049fc <HAL_I2C_IsDeviceReady+0x254>)
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fa62 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	e104      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_I2C_IsDeviceReady+0x50>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e0fd      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b01      	cmp	r3, #1
 800480c:	d007      	beq.n	800481e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800482c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2224      	movs	r2, #36	; 0x24
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a70      	ldr	r2, [pc, #448]	; (8004a00 <HAL_I2C_IsDeviceReady+0x258>)
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004850:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa20 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00d      	beq.n	8004886 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004878:	d103      	bne.n	8004882 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0b6      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004894:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004896:	f7fe fca7 	bl	80031e8 <HAL_GetTick>
 800489a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048ca:	e025      	b.n	8004918 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048cc:	f7fe fc8c 	bl	80031e8 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <HAL_I2C_IsDeviceReady+0x13a>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	22a0      	movs	r2, #160	; 0xa0
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2ba0      	cmp	r3, #160	; 0xa0
 8004922:	d005      	beq.n	8004930 <HAL_I2C_IsDeviceReady+0x188>
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <HAL_I2C_IsDeviceReady+0x188>
 800492a:	7dbb      	ldrb	r3, [r7, #22]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0cd      	beq.n	80048cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b02      	cmp	r3, #2
 8004944:	d129      	bne.n	800499a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2319      	movs	r3, #25
 8004972:	2201      	movs	r2, #1
 8004974:	4921      	ldr	r1, [pc, #132]	; (80049fc <HAL_I2C_IsDeviceReady+0x254>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f994 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e036      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e02c      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2319      	movs	r3, #25
 80049ba:	2201      	movs	r2, #1
 80049bc:	490f      	ldr	r1, [pc, #60]	; (80049fc <HAL_I2C_IsDeviceReady+0x254>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f970 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e012      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	f4ff af32 	bcc.w	8004842 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	00100002 	.word	0x00100002
 8004a00:	ffff0000 	.word	0xffff0000

08004a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	460b      	mov	r3, r1
 8004a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d006      	beq.n	8004a2e <I2C_MasterRequestWrite+0x2a>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d003      	beq.n	8004a2e <I2C_MasterRequestWrite+0x2a>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a2c:	d108      	bne.n	8004a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e00b      	b.n	8004a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	2b12      	cmp	r3, #18
 8004a46:	d107      	bne.n	8004a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f91d 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7e:	d103      	bne.n	8004a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e035      	b.n	8004af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a94:	d108      	bne.n	8004aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa4:	611a      	str	r2, [r3, #16]
 8004aa6:	e01b      	b.n	8004ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aa8:	897b      	ldrh	r3, [r7, #10]
 8004aaa:	11db      	asrs	r3, r3, #7
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 0306 	and.w	r3, r3, #6
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f063 030f 	orn	r3, r3, #15
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	490e      	ldr	r1, [pc, #56]	; (8004b00 <I2C_MasterRequestWrite+0xfc>)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f943 	bl	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e010      	b.n	8004af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ad6:	897b      	ldrh	r3, [r7, #10]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4907      	ldr	r1, [pc, #28]	; (8004b04 <I2C_MasterRequestWrite+0x100>)
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f933 	bl	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	00010008 	.word	0x00010008
 8004b04:	00010002 	.word	0x00010002

08004b08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	607a      	str	r2, [r7, #4]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	460b      	mov	r3, r1
 8004b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d006      	beq.n	8004b42 <I2C_MasterRequestRead+0x3a>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d003      	beq.n	8004b42 <I2C_MasterRequestRead+0x3a>
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b40:	d108      	bne.n	8004b54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e00b      	b.n	8004b6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b58:	2b11      	cmp	r3, #17
 8004b5a:	d107      	bne.n	8004b6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f893 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b92:	d103      	bne.n	8004b9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e079      	b.n	8004c94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba8:	d108      	bne.n	8004bbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004baa:	897b      	ldrh	r3, [r7, #10]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	611a      	str	r2, [r3, #16]
 8004bba:	e05f      	b.n	8004c7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bbc:	897b      	ldrh	r3, [r7, #10]
 8004bbe:	11db      	asrs	r3, r3, #7
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 0306 	and.w	r3, r3, #6
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f063 030f 	orn	r3, r3, #15
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4930      	ldr	r1, [pc, #192]	; (8004c9c <I2C_MasterRequestRead+0x194>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f8b9 	bl	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e054      	b.n	8004c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bea:	897b      	ldrh	r3, [r7, #10]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4929      	ldr	r1, [pc, #164]	; (8004ca0 <I2C_MasterRequestRead+0x198>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f8a9 	bl	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e044      	b.n	8004c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f831 	bl	8004ca4 <I2C_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c56:	d103      	bne.n	8004c60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e017      	b.n	8004c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c64:	897b      	ldrh	r3, [r7, #10]
 8004c66:	11db      	asrs	r3, r3, #7
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f003 0306 	and.w	r3, r3, #6
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f063 030e 	orn	r3, r3, #14
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	4907      	ldr	r1, [pc, #28]	; (8004ca0 <I2C_MasterRequestRead+0x198>)
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 f865 	bl	8004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	00010008 	.word	0x00010008
 8004ca0:	00010002 	.word	0x00010002

08004ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb4:	e025      	b.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d021      	beq.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fe fa93 	bl	80031e8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d116      	bne.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e023      	b.n	8004d4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10d      	bne.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	43da      	mvns	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	e00c      	b.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d0b6      	beq.n	8004cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d60:	e051      	b.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d70:	d123      	bne.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f043 0204 	orr.w	r2, r3, #4
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e046      	b.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d021      	beq.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fe fa11 	bl	80031e8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d116      	bne.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0220 	orr.w	r2, r3, #32
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e020      	b.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d10c      	bne.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e00b      	b.n	8004e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	43da      	mvns	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d18d      	bne.n	8004d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e5c:	e02d      	b.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f8ce 	bl	8005000 <I2C_IsAcknowledgeFailed>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e02d      	b.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d021      	beq.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fe f9b7 	bl	80031e8 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e007      	b.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b80      	cmp	r3, #128	; 0x80
 8004ec6:	d1ca      	bne.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ede:	e02d      	b.n	8004f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f88d 	bl	8005000 <I2C_IsAcknowledgeFailed>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e02d      	b.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d021      	beq.n	8004f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef8:	f7fe f976 	bl	80031e8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d302      	bcc.n	8004f0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d116      	bne.n	8004f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e007      	b.n	8004f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d1ca      	bne.n	8004ee0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f60:	e042      	b.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d119      	bne.n	8004fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0210 	mvn.w	r2, #16
 8004f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e029      	b.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa4:	f7fe f920 	bl	80031e8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d1b5      	bne.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d11b      	bne.n	8005050 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005020:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e000      	b.n	8005052 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
	...

08005060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0cc      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005074:	4b68      	ldr	r3, [pc, #416]	; (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d90c      	bls.n	800509c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b65      	ldr	r3, [pc, #404]	; (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b63      	ldr	r3, [pc, #396]	; (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e0b8      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b4:	4b59      	ldr	r3, [pc, #356]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a58      	ldr	r2, [pc, #352]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050cc:	4b53      	ldr	r3, [pc, #332]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a52      	ldr	r2, [pc, #328]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b50      	ldr	r3, [pc, #320]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	494d      	ldr	r1, [pc, #308]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d044      	beq.n	8005180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050fe:	4b47      	ldr	r3, [pc, #284]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d119      	bne.n	800513e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e07f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d003      	beq.n	800511e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800511a:	2b03      	cmp	r3, #3
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511e:	4b3f      	ldr	r3, [pc, #252]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800512e:	4b3b      	ldr	r3, [pc, #236]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e067      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800513e:	4b37      	ldr	r3, [pc, #220]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 0203 	bic.w	r2, r3, #3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4934      	ldr	r1, [pc, #208]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	4313      	orrs	r3, r2
 800514e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005150:	f7fe f84a 	bl	80031e8 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7fe f846 	bl	80031e8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e04f      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	4b2b      	ldr	r3, [pc, #172]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 020c 	and.w	r2, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	429a      	cmp	r2, r3
 800517e:	d1eb      	bne.n	8005158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005180:	4b25      	ldr	r3, [pc, #148]	; (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d20c      	bcs.n	80051a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b22      	ldr	r3, [pc, #136]	; (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b20      	ldr	r3, [pc, #128]	; (8005218 <HAL_RCC_ClockConfig+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e032      	b.n	800520e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b4:	4b19      	ldr	r3, [pc, #100]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4916      	ldr	r1, [pc, #88]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	490e      	ldr	r1, [pc, #56]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051e6:	f000 f855 	bl	8005294 <HAL_RCC_GetSysClockFreq>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	490a      	ldr	r1, [pc, #40]	; (8005220 <HAL_RCC_ClockConfig+0x1c0>)
 80051f8:	5ccb      	ldrb	r3, [r1, r3]
 80051fa:	fa22 f303 	lsr.w	r3, r2, r3
 80051fe:	4a09      	ldr	r2, [pc, #36]	; (8005224 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd ffaa 	bl	8003160 <HAL_InitTick>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023c00 	.word	0x40023c00
 800521c:	40023800 	.word	0x40023800
 8005220:	08009040 	.word	0x08009040
 8005224:	2000000c 	.word	0x2000000c
 8005228:	20000010 	.word	0x20000010

0800522c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_RCC_GetHCLKFreq+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	2000000c 	.word	0x2000000c

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005248:	f7ff fff0 	bl	800522c <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0a9b      	lsrs	r3, r3, #10
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40023800 	.word	0x40023800
 8005268:	08009050 	.word	0x08009050

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005270:	f7ff ffdc 	bl	800522c <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0b5b      	lsrs	r3, r3, #13
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4903      	ldr	r1, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	08009050 	.word	0x08009050

08005294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005298:	b0ae      	sub	sp, #184	; 0xb8
 800529a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052ba:	4bcb      	ldr	r3, [pc, #812]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	f200 8204 	bhi.w	80056d0 <HAL_RCC_GetSysClockFreq+0x43c>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005305 	.word	0x08005305
 80052d4:	080056d1 	.word	0x080056d1
 80052d8:	080056d1 	.word	0x080056d1
 80052dc:	080056d1 	.word	0x080056d1
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	080056d1 	.word	0x080056d1
 80052e8:	080056d1 	.word	0x080056d1
 80052ec:	080056d1 	.word	0x080056d1
 80052f0:	08005315 	.word	0x08005315
 80052f4:	080056d1 	.word	0x080056d1
 80052f8:	080056d1 	.word	0x080056d1
 80052fc:	080056d1 	.word	0x080056d1
 8005300:	08005505 	.word	0x08005505
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005304:	4bb9      	ldr	r3, [pc, #740]	; (80055ec <HAL_RCC_GetSysClockFreq+0x358>)
 8005306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800530a:	e1e5      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800530c:	4bb7      	ldr	r3, [pc, #732]	; (80055ec <HAL_RCC_GetSysClockFreq+0x358>)
 800530e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005312:	e1e1      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005314:	4bb4      	ldr	r3, [pc, #720]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005320:	4bb1      	ldr	r3, [pc, #708]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d071      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532c:	4bae      	ldr	r3, [pc, #696]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	099b      	lsrs	r3, r3, #6
 8005332:	2200      	movs	r2, #0
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005338:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800533c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005348:	2300      	movs	r3, #0
 800534a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800534e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005352:	4622      	mov	r2, r4
 8005354:	462b      	mov	r3, r5
 8005356:	f04f 0000 	mov.w	r0, #0
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	0159      	lsls	r1, r3, #5
 8005360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005364:	0150      	lsls	r0, r2, #5
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4621      	mov	r1, r4
 800536c:	1a51      	subs	r1, r2, r1
 800536e:	6439      	str	r1, [r7, #64]	; 0x40
 8005370:	4629      	mov	r1, r5
 8005372:	eb63 0301 	sbc.w	r3, r3, r1
 8005376:	647b      	str	r3, [r7, #68]	; 0x44
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005384:	4649      	mov	r1, r9
 8005386:	018b      	lsls	r3, r1, #6
 8005388:	4641      	mov	r1, r8
 800538a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800538e:	4641      	mov	r1, r8
 8005390:	018a      	lsls	r2, r1, #6
 8005392:	4641      	mov	r1, r8
 8005394:	1a51      	subs	r1, r2, r1
 8005396:	63b9      	str	r1, [r7, #56]	; 0x38
 8005398:	4649      	mov	r1, r9
 800539a:	eb63 0301 	sbc.w	r3, r3, r1
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80053ac:	4649      	mov	r1, r9
 80053ae:	00cb      	lsls	r3, r1, #3
 80053b0:	4641      	mov	r1, r8
 80053b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b6:	4641      	mov	r1, r8
 80053b8:	00ca      	lsls	r2, r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	4622      	mov	r2, r4
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
 80053c6:	462b      	mov	r3, r5
 80053c8:	460a      	mov	r2, r1
 80053ca:	eb42 0303 	adc.w	r3, r2, r3
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053dc:	4629      	mov	r1, r5
 80053de:	028b      	lsls	r3, r1, #10
 80053e0:	4621      	mov	r1, r4
 80053e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053e6:	4621      	mov	r1, r4
 80053e8:	028a      	lsls	r2, r1, #10
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005400:	f7fb fbe6 	bl	8000bd0 <__aeabi_uldivmod>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4613      	mov	r3, r2
 800540a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800540e:	e067      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005410:	4b75      	ldr	r3, [pc, #468]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	099b      	lsrs	r3, r3, #6
 8005416:	2200      	movs	r2, #0
 8005418:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800541c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	67bb      	str	r3, [r7, #120]	; 0x78
 800542a:	2300      	movs	r3, #0
 800542c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800542e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005432:	4622      	mov	r2, r4
 8005434:	462b      	mov	r3, r5
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	0159      	lsls	r1, r3, #5
 8005440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005444:	0150      	lsls	r0, r2, #5
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4621      	mov	r1, r4
 800544c:	1a51      	subs	r1, r2, r1
 800544e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005450:	4629      	mov	r1, r5
 8005452:	eb63 0301 	sbc.w	r3, r3, r1
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005464:	4649      	mov	r1, r9
 8005466:	018b      	lsls	r3, r1, #6
 8005468:	4641      	mov	r1, r8
 800546a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800546e:	4641      	mov	r1, r8
 8005470:	018a      	lsls	r2, r1, #6
 8005472:	4641      	mov	r1, r8
 8005474:	ebb2 0a01 	subs.w	sl, r2, r1
 8005478:	4649      	mov	r1, r9
 800547a:	eb63 0b01 	sbc.w	fp, r3, r1
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800548a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800548e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005492:	4692      	mov	sl, r2
 8005494:	469b      	mov	fp, r3
 8005496:	4623      	mov	r3, r4
 8005498:	eb1a 0303 	adds.w	r3, sl, r3
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	462b      	mov	r3, r5
 80054a0:	eb4b 0303 	adc.w	r3, fp, r3
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80054b2:	4629      	mov	r1, r5
 80054b4:	028b      	lsls	r3, r1, #10
 80054b6:	4621      	mov	r1, r4
 80054b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054bc:	4621      	mov	r1, r4
 80054be:	028a      	lsls	r2, r1, #10
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054c8:	2200      	movs	r2, #0
 80054ca:	673b      	str	r3, [r7, #112]	; 0x70
 80054cc:	677a      	str	r2, [r7, #116]	; 0x74
 80054ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80054d2:	f7fb fb7d 	bl	8000bd0 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4613      	mov	r3, r2
 80054dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e0:	4b41      	ldr	r3, [pc, #260]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	3301      	adds	r3, #1
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80054f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80054fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005502:	e0e9      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005504:	4b38      	ldr	r3, [pc, #224]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800550c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d069      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551c:	4b32      	ldr	r3, [pc, #200]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	2200      	movs	r2, #0
 8005524:	66bb      	str	r3, [r7, #104]	; 0x68
 8005526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	663b      	str	r3, [r7, #96]	; 0x60
 8005530:	2300      	movs	r3, #0
 8005532:	667b      	str	r3, [r7, #100]	; 0x64
 8005534:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005538:	4622      	mov	r2, r4
 800553a:	462b      	mov	r3, r5
 800553c:	f04f 0000 	mov.w	r0, #0
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	0159      	lsls	r1, r3, #5
 8005546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800554a:	0150      	lsls	r0, r2, #5
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4621      	mov	r1, r4
 8005552:	1a51      	subs	r1, r2, r1
 8005554:	61b9      	str	r1, [r7, #24]
 8005556:	4629      	mov	r1, r5
 8005558:	eb63 0301 	sbc.w	r3, r3, r1
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800556a:	4659      	mov	r1, fp
 800556c:	018b      	lsls	r3, r1, #6
 800556e:	4651      	mov	r1, sl
 8005570:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005574:	4651      	mov	r1, sl
 8005576:	018a      	lsls	r2, r1, #6
 8005578:	4651      	mov	r1, sl
 800557a:	ebb2 0801 	subs.w	r8, r2, r1
 800557e:	4659      	mov	r1, fp
 8005580:	eb63 0901 	sbc.w	r9, r3, r1
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005590:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005594:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005598:	4690      	mov	r8, r2
 800559a:	4699      	mov	r9, r3
 800559c:	4623      	mov	r3, r4
 800559e:	eb18 0303 	adds.w	r3, r8, r3
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	462b      	mov	r3, r5
 80055a6:	eb49 0303 	adc.w	r3, r9, r3
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80055b8:	4629      	mov	r1, r5
 80055ba:	028b      	lsls	r3, r1, #10
 80055bc:	4621      	mov	r1, r4
 80055be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055c2:	4621      	mov	r1, r4
 80055c4:	028a      	lsls	r2, r1, #10
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055ce:	2200      	movs	r2, #0
 80055d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80055d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80055d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055d8:	f7fb fafa 	bl	8000bd0 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055e6:	e063      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x41c>
 80055e8:	40023800 	.word	0x40023800
 80055ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f0:	4b3d      	ldr	r3, [pc, #244]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x454>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	099b      	lsrs	r3, r3, #6
 80055f6:	2200      	movs	r2, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	4611      	mov	r1, r2
 80055fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005600:	653b      	str	r3, [r7, #80]	; 0x50
 8005602:	2300      	movs	r3, #0
 8005604:	657b      	str	r3, [r7, #84]	; 0x54
 8005606:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800560a:	4642      	mov	r2, r8
 800560c:	464b      	mov	r3, r9
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800561c:	0150      	lsls	r0, r2, #5
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4641      	mov	r1, r8
 8005624:	1a51      	subs	r1, r2, r1
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	4649      	mov	r1, r9
 800562a:	eb63 0301 	sbc.w	r3, r3, r1
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800563c:	4659      	mov	r1, fp
 800563e:	018b      	lsls	r3, r1, #6
 8005640:	4651      	mov	r1, sl
 8005642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005646:	4651      	mov	r1, sl
 8005648:	018a      	lsls	r2, r1, #6
 800564a:	4651      	mov	r1, sl
 800564c:	1a54      	subs	r4, r2, r1
 800564e:	4659      	mov	r1, fp
 8005650:	eb63 0501 	sbc.w	r5, r3, r1
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	00eb      	lsls	r3, r5, #3
 800565e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005662:	00e2      	lsls	r2, r4, #3
 8005664:	4614      	mov	r4, r2
 8005666:	461d      	mov	r5, r3
 8005668:	4643      	mov	r3, r8
 800566a:	18e3      	adds	r3, r4, r3
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	464b      	mov	r3, r9
 8005670:	eb45 0303 	adc.w	r3, r5, r3
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005682:	4629      	mov	r1, r5
 8005684:	028b      	lsls	r3, r1, #10
 8005686:	4621      	mov	r1, r4
 8005688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800568c:	4621      	mov	r1, r4
 800568e:	028a      	lsls	r2, r1, #10
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005698:	2200      	movs	r2, #0
 800569a:	64bb      	str	r3, [r7, #72]	; 0x48
 800569c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800569e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056a2:	f7fb fa95 	bl	8000bd0 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4613      	mov	r3, r2
 80056ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x454>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	0f1b      	lsrs	r3, r3, #28
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80056be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056ce:	e003      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_RCC_GetSysClockFreq+0x458>)
 80056d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80056d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	37b8      	adds	r7, #184	; 0xb8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00f42400 	.word	0x00f42400

080056f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e28d      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8083 	beq.w	8005816 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005710:	4b94      	ldr	r3, [pc, #592]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b04      	cmp	r3, #4
 800571a:	d019      	beq.n	8005750 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800571c:	4b91      	ldr	r3, [pc, #580]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005724:	2b08      	cmp	r3, #8
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005728:	4b8e      	ldr	r3, [pc, #568]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005734:	d00c      	beq.n	8005750 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005736:	4b8b      	ldr	r3, [pc, #556]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800573e:	2b0c      	cmp	r3, #12
 8005740:	d112      	bne.n	8005768 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005742:	4b88      	ldr	r3, [pc, #544]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574e:	d10b      	bne.n	8005768 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005750:	4b84      	ldr	r3, [pc, #528]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d05b      	beq.n	8005814 <HAL_RCC_OscConfig+0x124>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d157      	bne.n	8005814 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e25a      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d106      	bne.n	8005780 <HAL_RCC_OscConfig+0x90>
 8005772:	4b7c      	ldr	r3, [pc, #496]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a7b      	ldr	r2, [pc, #492]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e01d      	b.n	80057bc <HAL_RCC_OscConfig+0xcc>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCC_OscConfig+0xb4>
 800578a:	4b76      	ldr	r3, [pc, #472]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a75      	ldr	r2, [pc, #468]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b73      	ldr	r3, [pc, #460]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a72      	ldr	r2, [pc, #456]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e00b      	b.n	80057bc <HAL_RCC_OscConfig+0xcc>
 80057a4:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a6e      	ldr	r2, [pc, #440]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b6c      	ldr	r3, [pc, #432]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a6b      	ldr	r2, [pc, #428]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80057b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fd fd10 	bl	80031e8 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fd fd0c 	bl	80031e8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	; 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e21f      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b61      	ldr	r3, [pc, #388]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0xdc>
 80057ea:	e014      	b.n	8005816 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fd fcfc 	bl	80031e8 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fd fcf8 	bl	80031e8 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e20b      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	4b57      	ldr	r3, [pc, #348]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x104>
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d06f      	beq.n	8005902 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005822:	4b50      	ldr	r3, [pc, #320]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b00      	cmp	r3, #0
 800582c:	d017      	beq.n	800585e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800582e:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005836:	2b08      	cmp	r3, #8
 8005838:	d105      	bne.n	8005846 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800583a:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005846:	4b47      	ldr	r3, [pc, #284]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d11c      	bne.n	800588c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005852:	4b44      	ldr	r3, [pc, #272]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585e:	4b41      	ldr	r3, [pc, #260]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCC_OscConfig+0x186>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d001      	beq.n	8005876 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e1d3      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005876:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4937      	ldr	r1, [pc, #220]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588a:	e03a      	b.n	8005902 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005894:	4b34      	ldr	r3, [pc, #208]	; (8005968 <HAL_RCC_OscConfig+0x278>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fd fca5 	bl	80031e8 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fd fca1 	bl	80031e8 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e1b4      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b28      	ldr	r3, [pc, #160]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4925      	ldr	r1, [pc, #148]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]
 80058d4:	e015      	b.n	8005902 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <HAL_RCC_OscConfig+0x278>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fd fc84 	bl	80031e8 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e4:	f7fd fc80 	bl	80031e8 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e193      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d036      	beq.n	800597c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_RCC_OscConfig+0x27c>)
 8005918:	2201      	movs	r2, #1
 800591a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fd fc64 	bl	80031e8 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005924:	f7fd fc60 	bl	80031e8 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e173      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_RCC_OscConfig+0x274>)
 8005938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x234>
 8005942:	e01b      	b.n	800597c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_OscConfig+0x27c>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fd fc4d 	bl	80031e8 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005950:	e00e      	b.n	8005970 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005952:	f7fd fc49 	bl	80031e8 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d907      	bls.n	8005970 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e15c      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
 8005964:	40023800 	.word	0x40023800
 8005968:	42470000 	.word	0x42470000
 800596c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	4b8a      	ldr	r3, [pc, #552]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ea      	bne.n	8005952 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8097 	beq.w	8005ab8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598e:	4b83      	ldr	r3, [pc, #524]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	4b7f      	ldr	r3, [pc, #508]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	4a7e      	ldr	r2, [pc, #504]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6413      	str	r3, [r2, #64]	; 0x40
 80059aa:	4b7c      	ldr	r3, [pc, #496]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ba:	4b79      	ldr	r3, [pc, #484]	; (8005ba0 <HAL_RCC_OscConfig+0x4b0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d118      	bne.n	80059f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c6:	4b76      	ldr	r3, [pc, #472]	; (8005ba0 <HAL_RCC_OscConfig+0x4b0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a75      	ldr	r2, [pc, #468]	; (8005ba0 <HAL_RCC_OscConfig+0x4b0>)
 80059cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d2:	f7fd fc09 	bl	80031e8 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059da:	f7fd fc05 	bl	80031e8 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e118      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	4b6c      	ldr	r3, [pc, #432]	; (8005ba0 <HAL_RCC_OscConfig+0x4b0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <HAL_RCC_OscConfig+0x31e>
 8005a00:	4b66      	ldr	r3, [pc, #408]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4a65      	ldr	r2, [pc, #404]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0c:	e01c      	b.n	8005a48 <HAL_RCC_OscConfig+0x358>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x340>
 8005a16:	4b61      	ldr	r3, [pc, #388]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	4a60      	ldr	r2, [pc, #384]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a1c:	f043 0304 	orr.w	r3, r3, #4
 8005a20:	6713      	str	r3, [r2, #112]	; 0x70
 8005a22:	4b5e      	ldr	r3, [pc, #376]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	4a5d      	ldr	r2, [pc, #372]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0x358>
 8005a30:	4b5a      	ldr	r3, [pc, #360]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	4a59      	ldr	r2, [pc, #356]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3c:	4b57      	ldr	r3, [pc, #348]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	4a56      	ldr	r2, [pc, #344]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a42:	f023 0304 	bic.w	r3, r3, #4
 8005a46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a50:	f7fd fbca 	bl	80031e8 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7fd fbc6 	bl	80031e8 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0d7      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6e:	4b4b      	ldr	r3, [pc, #300]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ee      	beq.n	8005a58 <HAL_RCC_OscConfig+0x368>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fd fbb4 	bl	80031e8 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7fd fbb0 	bl	80031e8 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0c1      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9a:	4b40      	ldr	r3, [pc, #256]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1ee      	bne.n	8005a84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aac:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	4a3a      	ldr	r2, [pc, #232]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80ad 	beq.w	8005c1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac2:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d060      	beq.n	8005b90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d145      	bne.n	8005b62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad6:	4b33      	ldr	r3, [pc, #204]	; (8005ba4 <HAL_RCC_OscConfig+0x4b4>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fd fb84 	bl	80031e8 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7fd fb80 	bl	80031e8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e093      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	071b      	lsls	r3, r3, #28
 8005b2e:	491b      	ldr	r1, [pc, #108]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <HAL_RCC_OscConfig+0x4b4>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fd fb55 	bl	80031e8 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b42:	f7fd fb51 	bl	80031e8 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e064      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b54:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x452>
 8005b60:	e05c      	b.n	8005c1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_RCC_OscConfig+0x4b4>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fd fb3e 	bl	80031e8 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b70:	f7fd fb3a 	bl	80031e8 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e04d      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCC_OscConfig+0x4ac>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0x480>
 8005b8e:	e045      	b.n	8005c1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e040      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	40007000 	.word	0x40007000
 8005ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	; (8005c28 <HAL_RCC_OscConfig+0x538>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d030      	beq.n	8005c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d129      	bne.n	8005c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d122      	bne.n	8005c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d119      	bne.n	8005c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d10f      	bne.n	8005c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d107      	bne.n	8005c18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d001      	beq.n	8005c1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e000      	b.n	8005c1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800

08005c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e041      	b.n	8005cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc fe9e 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 fcbc 	bl	80065e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e041      	b.n	8005d60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f839 	bl	8005d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fc6d 	bl	80065e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e022      	b.n	8005dee <HAL_TIM_PWM_Start_DMA+0x72>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d109      	bne.n	8005dc2 <HAL_TIM_PWM_Start_DMA+0x46>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	bf0c      	ite	eq
 8005dba:	2301      	moveq	r3, #1
 8005dbc:	2300      	movne	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e015      	b.n	8005dee <HAL_TIM_PWM_Start_DMA+0x72>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d109      	bne.n	8005ddc <HAL_TIM_PWM_Start_DMA+0x60>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e008      	b.n	8005dee <HAL_TIM_PWM_Start_DMA+0x72>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
 8005df4:	e171      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start_DMA+0x94>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf0c      	ite	eq
 8005e08:	2301      	moveq	r3, #1
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e022      	b.n	8005e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d109      	bne.n	8005e2a <HAL_TIM_PWM_Start_DMA+0xae>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e015      	b.n	8005e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d109      	bne.n	8005e44 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	e008      	b.n	8005e56 <HAL_TIM_PWM_Start_DMA+0xda>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d024      	beq.n	8005ea4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d104      	bne.n	8005e6a <HAL_TIM_PWM_Start_DMA+0xee>
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e137      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e78:	e016      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e88:	e00e      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e98:	e006      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea2:	e001      	b.n	8005ea8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e118      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	f200 80ae 	bhi.w	800600c <HAL_TIM_PWM_Start_DMA+0x290>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	0800600d 	.word	0x0800600d
 8005ec0:	0800600d 	.word	0x0800600d
 8005ec4:	0800600d 	.word	0x0800600d
 8005ec8:	08005f35 	.word	0x08005f35
 8005ecc:	0800600d 	.word	0x0800600d
 8005ed0:	0800600d 	.word	0x0800600d
 8005ed4:	0800600d 	.word	0x0800600d
 8005ed8:	08005f7d 	.word	0x08005f7d
 8005edc:	0800600d 	.word	0x0800600d
 8005ee0:	0800600d 	.word	0x0800600d
 8005ee4:	0800600d 	.word	0x0800600d
 8005ee8:	08005fc5 	.word	0x08005fc5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	4a7c      	ldr	r2, [pc, #496]	; (80060e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005ef2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	4a7b      	ldr	r2, [pc, #492]	; (80060e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005efa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	4a7a      	ldr	r2, [pc, #488]	; (80060ec <HAL_TIM_PWM_Start_DMA+0x370>)
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3334      	adds	r3, #52	; 0x34
 8005f10:	461a      	mov	r2, r3
 8005f12:	887b      	ldrh	r3, [r7, #2]
 8005f14:	f7fd fb58 	bl	80035c8 <HAL_DMA_Start_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e0db      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f30:	60da      	str	r2, [r3, #12]
      break;
 8005f32:	e06e      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	4a6a      	ldr	r2, [pc, #424]	; (80060e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005f3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	4a69      	ldr	r2, [pc, #420]	; (80060e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	4a68      	ldr	r2, [pc, #416]	; (80060ec <HAL_TIM_PWM_Start_DMA+0x370>)
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3338      	adds	r3, #56	; 0x38
 8005f58:	461a      	mov	r2, r3
 8005f5a:	887b      	ldrh	r3, [r7, #2]
 8005f5c:	f7fd fb34 	bl	80035c8 <HAL_DMA_Start_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0b7      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f78:	60da      	str	r2, [r3, #12]
      break;
 8005f7a:	e04a      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005f82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_TIM_PWM_Start_DMA+0x370>)
 8005f92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	333c      	adds	r3, #60	; 0x3c
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	887b      	ldrh	r3, [r7, #2]
 8005fa4:	f7fd fb10 	bl	80035c8 <HAL_DMA_Start_IT>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e093      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fc0:	60da      	str	r2, [r3, #12]
      break;
 8005fc2:	e026      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	4a46      	ldr	r2, [pc, #280]	; (80060e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005fca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd0:	4a45      	ldr	r2, [pc, #276]	; (80060e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	4a44      	ldr	r2, [pc, #272]	; (80060ec <HAL_TIM_PWM_Start_DMA+0x370>)
 8005fda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3340      	adds	r3, #64	; 0x40
 8005fe8:	461a      	mov	r2, r3
 8005fea:	887b      	ldrh	r3, [r7, #2]
 8005fec:	f7fd faec 	bl	80035c8 <HAL_DMA_Start_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e06f      	b.n	80060da <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006008:	60da      	str	r2, [r3, #12]
      break;
 800600a:	e002      	b.n	8006012 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
      break;
 8006010:	bf00      	nop
  }

  if (status == HAL_OK)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d15f      	bne.n	80060d8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2201      	movs	r2, #1
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fdcb 	bl	8006bbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a31      	ldr	r2, [pc, #196]	; (80060f0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Start_DMA+0x2be>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2f      	ldr	r2, [pc, #188]	; (80060f4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d101      	bne.n	800603e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800603a:	2301      	movs	r3, #1
 800603c:	e000      	b.n	8006040 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800603e:	2300      	movs	r3, #0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d022      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006066:	d01d      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d018      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a21      	ldr	r2, [pc, #132]	; (80060fc <HAL_TIM_PWM_Start_DMA+0x380>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1a      	ldr	r2, [pc, #104]	; (80060f4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <HAL_TIM_PWM_Start_DMA+0x388>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x328>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d111      	bne.n	80060c8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	d010      	beq.n	80060d8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	e007      	b.n	80060d8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	080064d9 	.word	0x080064d9
 80060e8:	08006581 	.word	0x08006581
 80060ec:	08006447 	.word	0x08006447
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40014000 	.word	0x40014000
 8006108:	40001800 	.word	0x40001800

0800610c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006126:	2302      	movs	r3, #2
 8006128:	e0ae      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	f200 809f 	bhi.w	8006278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006175 	.word	0x08006175
 8006144:	08006279 	.word	0x08006279
 8006148:	08006279 	.word	0x08006279
 800614c:	08006279 	.word	0x08006279
 8006150:	080061b5 	.word	0x080061b5
 8006154:	08006279 	.word	0x08006279
 8006158:	08006279 	.word	0x08006279
 800615c:	08006279 	.word	0x08006279
 8006160:	080061f7 	.word	0x080061f7
 8006164:	08006279 	.word	0x08006279
 8006168:	08006279 	.word	0x08006279
 800616c:	08006279 	.word	0x08006279
 8006170:	08006237 	.word	0x08006237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fad4 	bl	8006728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0208 	orr.w	r2, r2, #8
 800618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	619a      	str	r2, [r3, #24]
      break;
 80061b2:	e064      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fb24 	bl	8006808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6999      	ldr	r1, [r3, #24]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	021a      	lsls	r2, r3, #8
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	619a      	str	r2, [r3, #24]
      break;
 80061f4:	e043      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fb79 	bl	80068f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0208 	orr.w	r2, r2, #8
 8006210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0204 	bic.w	r2, r2, #4
 8006220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	61da      	str	r2, [r3, #28]
      break;
 8006234:	e023      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fbcd 	bl	80069dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	021a      	lsls	r2, r3, #8
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	61da      	str	r2, [r3, #28]
      break;
 8006276:	e002      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
      break;
 800627c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x1c>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0b4      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x186>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d03e      	beq.n	8006364 <HAL_TIM_ConfigClockSource+0xd4>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	f200 8087 	bhi.w	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	f000 8086 	beq.w	8006402 <HAL_TIM_ConfigClockSource+0x172>
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d87f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d01a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xa6>
 8006300:	2b70      	cmp	r3, #112	; 0x70
 8006302:	d87b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d050      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x11a>
 8006308:	2b60      	cmp	r3, #96	; 0x60
 800630a:	d877      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d03c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0xfa>
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d873      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d058      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x13a>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d86f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d064      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d86b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d060      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d867      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	2b10      	cmp	r3, #16
 8006332:	d05a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006334:	e062      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f000 fc19 	bl	8006b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
      break;
 8006362:	e04f      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f000 fc02 	bl	8006b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006386:	609a      	str	r2, [r3, #8]
      break;
 8006388:	e03c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fb76 	bl	8006a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2150      	movs	r1, #80	; 0x50
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fbcf 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e02c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fb95 	bl	8006ae6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2160      	movs	r1, #96	; 0x60
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fbbf 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e01c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fb56 	bl	8006a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fbaf 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e00c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 fba6 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80063fa:	e003      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d107      	bne.n	800646e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800646c:	e02a      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d107      	bne.n	8006488 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2202      	movs	r2, #2
 800647c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006486:	e01d      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	429a      	cmp	r2, r3
 8006490:	d107      	bne.n	80064a2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2204      	movs	r2, #4
 8006496:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a0:	e010      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d107      	bne.n	80064bc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2208      	movs	r2, #8
 80064b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064ba:	e003      	b.n	80064c4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff ffb4 	bl	8006432 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d10b      	bne.n	8006508 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d136      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006506:	e031      	b.n	800656c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d10b      	bne.n	800652a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2202      	movs	r2, #2
 8006516:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d125      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006528:	e020      	b.n	800656c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d10b      	bne.n	800654c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2204      	movs	r2, #4
 8006538:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d114      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800654a:	e00f      	b.n	800656c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d10a      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2208      	movs	r2, #8
 800655a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7fb fa11 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d103      	bne.n	80065a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	771a      	strb	r2, [r3, #28]
 800659e:	e019      	b.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d103      	bne.n	80065b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
 80065b0:	e010      	b.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d103      	bne.n	80065c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2204      	movs	r2, #4
 80065c0:	771a      	strb	r2, [r3, #28]
 80065c2:	e007      	b.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d102      	bne.n	80065d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2208      	movs	r2, #8
 80065d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff ff22 	bl	800641e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a40      	ldr	r2, [pc, #256]	; (80066fc <TIM_Base_SetConfig+0x114>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006606:	d00f      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a3d      	ldr	r2, [pc, #244]	; (8006700 <TIM_Base_SetConfig+0x118>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <TIM_Base_SetConfig+0x11c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a3b      	ldr	r2, [pc, #236]	; (8006708 <TIM_Base_SetConfig+0x120>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_Base_SetConfig+0x40>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a3a      	ldr	r2, [pc, #232]	; (800670c <TIM_Base_SetConfig+0x124>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d108      	bne.n	800663a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <TIM_Base_SetConfig+0x114>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d02b      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006648:	d027      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a2c      	ldr	r2, [pc, #176]	; (8006700 <TIM_Base_SetConfig+0x118>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d023      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a2b      	ldr	r2, [pc, #172]	; (8006704 <TIM_Base_SetConfig+0x11c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01f      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <TIM_Base_SetConfig+0x120>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01b      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a29      	ldr	r2, [pc, #164]	; (800670c <TIM_Base_SetConfig+0x124>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d017      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a28      	ldr	r2, [pc, #160]	; (8006710 <TIM_Base_SetConfig+0x128>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a27      	ldr	r2, [pc, #156]	; (8006714 <TIM_Base_SetConfig+0x12c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00f      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a26      	ldr	r2, [pc, #152]	; (8006718 <TIM_Base_SetConfig+0x130>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a25      	ldr	r2, [pc, #148]	; (800671c <TIM_Base_SetConfig+0x134>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d007      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a24      	ldr	r2, [pc, #144]	; (8006720 <TIM_Base_SetConfig+0x138>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a23      	ldr	r2, [pc, #140]	; (8006724 <TIM_Base_SetConfig+0x13c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d108      	bne.n	80066ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <TIM_Base_SetConfig+0x114>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_Base_SetConfig+0xf8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a0c      	ldr	r2, [pc, #48]	; (800670c <TIM_Base_SetConfig+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d103      	bne.n	80066e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	615a      	str	r2, [r3, #20]
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40010000 	.word	0x40010000
 8006700:	40000400 	.word	0x40000400
 8006704:	40000800 	.word	0x40000800
 8006708:	40000c00 	.word	0x40000c00
 800670c:	40010400 	.word	0x40010400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800
 800671c:	40001800 	.word	0x40001800
 8006720:	40001c00 	.word	0x40001c00
 8006724:	40002000 	.word	0x40002000

08006728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0303 	bic.w	r3, r3, #3
 800675e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f023 0302 	bic.w	r3, r3, #2
 8006770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a20      	ldr	r2, [pc, #128]	; (8006800 <TIM_OC1_SetConfig+0xd8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC1_SetConfig+0x64>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a1f      	ldr	r2, [pc, #124]	; (8006804 <TIM_OC1_SetConfig+0xdc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d10c      	bne.n	80067a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0308 	bic.w	r3, r3, #8
 8006792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 0304 	bic.w	r3, r3, #4
 80067a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a15      	ldr	r2, [pc, #84]	; (8006800 <TIM_OC1_SetConfig+0xd8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_OC1_SetConfig+0x8e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a14      	ldr	r2, [pc, #80]	; (8006804 <TIM_OC1_SetConfig+0xdc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d111      	bne.n	80067da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40010000 	.word	0x40010000
 8006804:	40010400 	.word	0x40010400

08006808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0210 	bic.w	r2, r3, #16
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0320 	bic.w	r3, r3, #32
 8006852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <TIM_OC2_SetConfig+0xe4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d003      	beq.n	8006870 <TIM_OC2_SetConfig+0x68>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_OC2_SetConfig+0xe8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10d      	bne.n	800688c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a17      	ldr	r2, [pc, #92]	; (80068ec <TIM_OC2_SetConfig+0xe4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC2_SetConfig+0x94>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <TIM_OC2_SetConfig+0xe8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d113      	bne.n	80068c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40010400 	.word	0x40010400

080068f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a21      	ldr	r2, [pc, #132]	; (80069d4 <TIM_OC3_SetConfig+0xe0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC3_SetConfig+0x66>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a20      	ldr	r2, [pc, #128]	; (80069d8 <TIM_OC3_SetConfig+0xe4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10d      	bne.n	8006976 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a16      	ldr	r2, [pc, #88]	; (80069d4 <TIM_OC3_SetConfig+0xe0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC3_SetConfig+0x92>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a15      	ldr	r2, [pc, #84]	; (80069d8 <TIM_OC3_SetConfig+0xe4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d113      	bne.n	80069ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800698c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	021b      	lsls	r3, r3, #8
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <TIM_OC4_SetConfig+0xa4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC4_SetConfig+0x68>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <TIM_OC4_SetConfig+0xa8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	019b      	lsls	r3, r3, #6
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400

08006a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 030a 	bic.w	r3, r3, #10
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0210 	bic.w	r2, r3, #16
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	031b      	lsls	r3, r3, #12
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	021a      	lsls	r2, r3, #8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	609a      	str	r2, [r3, #8]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2201      	movs	r2, #1
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	43db      	mvns	r3, r3
 8006bde:	401a      	ands	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e05a      	b.n	8006cd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d022      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6c:	d01d      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1d      	ldr	r2, [pc, #116]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d018      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00e      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d009      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d004      	beq.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40001800 	.word	0x40001800

08006d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e03f      	b.n	8006d92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fb feca 	bl	8002ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2224      	movs	r2, #36	; 0x24
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fba5 	bl	8007494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b08a      	sub	sp, #40	; 0x28
 8006d9e:	af02      	add	r7, sp, #8
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d17c      	bne.n	8006eb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_Transmit+0x2c>
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e075      	b.n	8006eb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Transmit+0x3e>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e06e      	b.n	8006eb6 <HAL_UART_Transmit+0x11c>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2221      	movs	r2, #33	; 0x21
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dee:	f7fc f9fb 	bl	80031e8 <HAL_GetTick>
 8006df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	88fa      	ldrh	r2, [r7, #6]
 8006dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e08:	d108      	bne.n	8006e1c <HAL_UART_Transmit+0x82>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e003      	b.n	8006e24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e2c:	e02a      	b.n	8006e84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f992 	bl	8007162 <UART_WaitOnFlagUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e036      	b.n	8006eb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10b      	bne.n	8006e66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	3302      	adds	r3, #2
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	e007      	b.n	8006e76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	3301      	adds	r3, #1
 8006e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1cf      	bne.n	8006e2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2140      	movs	r1, #64	; 0x40
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f962 	bl	8007162 <UART_WaitOnFlagUntilTimeout>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e006      	b.n	8006eb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e000      	b.n	8006eb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
  }
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3720      	adds	r7, #32
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d11d      	bne.n	8006f14 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_UART_Receive_DMA+0x26>
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e016      	b.n	8006f16 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UART_Receive_DMA+0x38>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e00f      	b.n	8006f16 <HAL_UART_Receive_DMA+0x58>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	461a      	mov	r2, r3
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 f998 	bl	8007240 <UART_Start_Receive_DMA>
 8006f10:	4603      	mov	r3, r0
 8006f12:	e000      	b.n	8006f16 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b09c      	sub	sp, #112	; 0x70
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d172      	bne.n	8007074 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	2200      	movs	r2, #0
 8006f92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fb6:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	667b      	str	r3, [r7, #100]	; 0x64
 8006fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3314      	adds	r3, #20
 8006fe6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fe8:	647a      	str	r2, [r7, #68]	; 0x44
 8006fea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3314      	adds	r3, #20
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	623b      	str	r3, [r7, #32]
   return(result);
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007012:	663b      	str	r3, [r7, #96]	; 0x60
 8007014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3314      	adds	r3, #20
 800701a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800701c:	633a      	str	r2, [r7, #48]	; 0x30
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e5      	bne.n	8006ffc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	2b01      	cmp	r3, #1
 800703e:	d119      	bne.n	8007074 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330c      	adds	r3, #12
 8007046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	330c      	adds	r3, #12
 800705e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007060:	61fa      	str	r2, [r7, #28]
 8007062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	69b9      	ldr	r1, [r7, #24]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	617b      	str	r3, [r7, #20]
   return(result);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e5      	bne.n	8007040 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d106      	bne.n	800708a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800707c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007080:	4619      	mov	r1, r3
 8007082:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007084:	f7ff ff69 	bl	8006f5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007088:	e002      	b.n	8007090 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800708a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800708c:	f7ff ff47 	bl	8006f1e <HAL_UART_RxCpltCallback>
}
 8007090:	bf00      	nop
 8007092:	3770      	adds	r7, #112	; 0x70
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d108      	bne.n	80070c0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4619      	mov	r1, r3
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff ff4e 	bl	8006f5a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070be:	e002      	b.n	80070c6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff ff36 	bl	8006f32 <HAL_UART_RxHalfCpltCallback>
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b80      	cmp	r3, #128	; 0x80
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b21      	cmp	r3, #33	; 0x21
 8007100:	d108      	bne.n	8007114 <UART_DMAError+0x46>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800710e:	68b8      	ldr	r0, [r7, #8]
 8007110:	f000 f934 	bl	800737c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	bf0c      	ite	eq
 8007122:	2301      	moveq	r3, #1
 8007124:	2300      	movne	r3, #0
 8007126:	b2db      	uxtb	r3, r3
 8007128:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b22      	cmp	r3, #34	; 0x22
 8007134:	d108      	bne.n	8007148 <UART_DMAError+0x7a>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2200      	movs	r2, #0
 8007140:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007142:	68b8      	ldr	r0, [r7, #8]
 8007144:	f000 f942 	bl	80073cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	f043 0210 	orr.w	r2, r3, #16
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007154:	68b8      	ldr	r0, [r7, #8]
 8007156:	f7ff fef6 	bl	8006f46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800715a:	bf00      	nop
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b090      	sub	sp, #64	; 0x40
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007172:	e050      	b.n	8007216 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d04c      	beq.n	8007216 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800717c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <UART_WaitOnFlagUntilTimeout+0x30>
 8007182:	f7fc f831 	bl	80031e8 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718e:	429a      	cmp	r2, r3
 8007190:	d241      	bcs.n	8007216 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071b2:	637a      	str	r2, [r7, #52]	; 0x34
 80071b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f023 0301 	bic.w	r3, r3, #1
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3314      	adds	r3, #20
 80071e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e6:	623a      	str	r2, [r7, #32]
 80071e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	69f9      	ldr	r1, [r7, #28]
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e5      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e00f      	b.n	8007236 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4013      	ands	r3, r2
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	429a      	cmp	r2, r3
 8007224:	bf0c      	ite	eq
 8007226:	2301      	moveq	r3, #1
 8007228:	2300      	movne	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	429a      	cmp	r2, r3
 8007232:	d09f      	beq.n	8007174 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3740      	adds	r7, #64	; 0x40
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b098      	sub	sp, #96	; 0x60
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2222      	movs	r2, #34	; 0x22
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	4a40      	ldr	r2, [pc, #256]	; (8007370 <UART_Start_Receive_DMA+0x130>)
 800726e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	4a3f      	ldr	r2, [pc, #252]	; (8007374 <UART_Start_Receive_DMA+0x134>)
 8007276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	4a3e      	ldr	r2, [pc, #248]	; (8007378 <UART_Start_Receive_DMA+0x138>)
 800727e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	2200      	movs	r2, #0
 8007286:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	f7fc f992 	bl	80035c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80072a4:	2300      	movs	r3, #0
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d019      	beq.n	80072fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	330c      	adds	r3, #12
 80072e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80072ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80072f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e5      	bne.n	80072ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	657b      	str	r3, [r7, #84]	; 0x54
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3314      	adds	r3, #20
 800731c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800731e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e5      	bne.n	80072fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007348:	653b      	str	r3, [r7, #80]	; 0x50
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007352:	627a      	str	r2, [r7, #36]	; 0x24
 8007354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6a39      	ldr	r1, [r7, #32]
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3760      	adds	r7, #96	; 0x60
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	08006f73 	.word	0x08006f73
 8007374:	08007099 	.word	0x08007099
 8007378:	080070cf 	.word	0x080070cf

0800737c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b089      	sub	sp, #36	; 0x24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	330c      	adds	r3, #12
 800738a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	60bb      	str	r3, [r7, #8]
   return(result);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	61ba      	str	r2, [r7, #24]
 80073a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a8:	6979      	ldr	r1, [r7, #20]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	613b      	str	r3, [r7, #16]
   return(result);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e5      	bne.n	8007384 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80073c0:	bf00      	nop
 80073c2:	3724      	adds	r7, #36	; 0x24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b095      	sub	sp, #84	; 0x54
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073f4:	643a      	str	r2, [r7, #64]	; 0x40
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e5      	bne.n	80073d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3314      	adds	r3, #20
 800740e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	61fb      	str	r3, [r7, #28]
   return(result);
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f023 0301 	bic.w	r3, r3, #1
 800741e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3314      	adds	r3, #20
 8007426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800742e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e5      	bne.n	8007408 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	2b01      	cmp	r3, #1
 8007442:	d119      	bne.n	8007478 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	330c      	adds	r3, #12
 800744a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	60bb      	str	r3, [r7, #8]
   return(result);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 0310 	bic.w	r3, r3, #16
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	330c      	adds	r3, #12
 8007462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007464:	61ba      	str	r2, [r7, #24]
 8007466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6979      	ldr	r1, [r7, #20]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	613b      	str	r3, [r7, #16]
   return(result);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e5      	bne.n	8007444 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2220      	movs	r2, #32
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007486:	bf00      	nop
 8007488:	3754      	adds	r7, #84	; 0x54
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
	...

08007494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b0c0      	sub	sp, #256	; 0x100
 800749a:	af00      	add	r7, sp, #0
 800749c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	68d9      	ldr	r1, [r3, #12]
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	ea40 0301 	orr.w	r3, r0, r1
 80074bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074ec:	f021 010c 	bic.w	r1, r1, #12
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074fa:	430b      	orrs	r3, r1
 80074fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	6999      	ldr	r1, [r3, #24]
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	ea40 0301 	orr.w	r3, r0, r1
 800751a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b8f      	ldr	r3, [pc, #572]	; (8007760 <UART_SetConfig+0x2cc>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d005      	beq.n	8007534 <UART_SetConfig+0xa0>
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b8d      	ldr	r3, [pc, #564]	; (8007764 <UART_SetConfig+0x2d0>)
 8007530:	429a      	cmp	r2, r3
 8007532:	d104      	bne.n	800753e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007534:	f7fd fe9a 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8007538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800753c:	e003      	b.n	8007546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800753e:	f7fd fe81 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007550:	f040 810c 	bne.w	800776c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007558:	2200      	movs	r2, #0
 800755a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800755e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007566:	4622      	mov	r2, r4
 8007568:	462b      	mov	r3, r5
 800756a:	1891      	adds	r1, r2, r2
 800756c:	65b9      	str	r1, [r7, #88]	; 0x58
 800756e:	415b      	adcs	r3, r3
 8007570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007576:	4621      	mov	r1, r4
 8007578:	eb12 0801 	adds.w	r8, r2, r1
 800757c:	4629      	mov	r1, r5
 800757e:	eb43 0901 	adc.w	r9, r3, r1
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800758e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007596:	4690      	mov	r8, r2
 8007598:	4699      	mov	r9, r3
 800759a:	4623      	mov	r3, r4
 800759c:	eb18 0303 	adds.w	r3, r8, r3
 80075a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a4:	462b      	mov	r3, r5
 80075a6:	eb49 0303 	adc.w	r3, r9, r3
 80075aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075c2:	460b      	mov	r3, r1
 80075c4:	18db      	adds	r3, r3, r3
 80075c6:	653b      	str	r3, [r7, #80]	; 0x50
 80075c8:	4613      	mov	r3, r2
 80075ca:	eb42 0303 	adc.w	r3, r2, r3
 80075ce:	657b      	str	r3, [r7, #84]	; 0x54
 80075d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075d8:	f7f9 fafa 	bl	8000bd0 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4b61      	ldr	r3, [pc, #388]	; (8007768 <UART_SetConfig+0x2d4>)
 80075e2:	fba3 2302 	umull	r2, r3, r3, r2
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	011c      	lsls	r4, r3, #4
 80075ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075fc:	4642      	mov	r2, r8
 80075fe:	464b      	mov	r3, r9
 8007600:	1891      	adds	r1, r2, r2
 8007602:	64b9      	str	r1, [r7, #72]	; 0x48
 8007604:	415b      	adcs	r3, r3
 8007606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800760c:	4641      	mov	r1, r8
 800760e:	eb12 0a01 	adds.w	sl, r2, r1
 8007612:	4649      	mov	r1, r9
 8007614:	eb43 0b01 	adc.w	fp, r3, r1
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800762c:	4692      	mov	sl, r2
 800762e:	469b      	mov	fp, r3
 8007630:	4643      	mov	r3, r8
 8007632:	eb1a 0303 	adds.w	r3, sl, r3
 8007636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800763a:	464b      	mov	r3, r9
 800763c:	eb4b 0303 	adc.w	r3, fp, r3
 8007640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007658:	460b      	mov	r3, r1
 800765a:	18db      	adds	r3, r3, r3
 800765c:	643b      	str	r3, [r7, #64]	; 0x40
 800765e:	4613      	mov	r3, r2
 8007660:	eb42 0303 	adc.w	r3, r2, r3
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
 8007666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800766a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800766e:	f7f9 faaf 	bl	8000bd0 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4611      	mov	r1, r2
 8007678:	4b3b      	ldr	r3, [pc, #236]	; (8007768 <UART_SetConfig+0x2d4>)
 800767a:	fba3 2301 	umull	r2, r3, r3, r1
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2264      	movs	r2, #100	; 0x64
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	1acb      	subs	r3, r1, r3
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <UART_SetConfig+0x2d4>)
 8007690:	fba3 2302 	umull	r2, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800769c:	441c      	add	r4, r3
 800769e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	1891      	adds	r1, r2, r2
 80076b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80076b8:	415b      	adcs	r3, r3
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076c0:	4641      	mov	r1, r8
 80076c2:	1851      	adds	r1, r2, r1
 80076c4:	6339      	str	r1, [r7, #48]	; 0x30
 80076c6:	4649      	mov	r1, r9
 80076c8:	414b      	adcs	r3, r1
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076d8:	4659      	mov	r1, fp
 80076da:	00cb      	lsls	r3, r1, #3
 80076dc:	4651      	mov	r1, sl
 80076de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e2:	4651      	mov	r1, sl
 80076e4:	00ca      	lsls	r2, r1, #3
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	4642      	mov	r2, r8
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076f4:	464b      	mov	r3, r9
 80076f6:	460a      	mov	r2, r1
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800770c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007714:	460b      	mov	r3, r1
 8007716:	18db      	adds	r3, r3, r3
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
 800771a:	4613      	mov	r3, r2
 800771c:	eb42 0303 	adc.w	r3, r2, r3
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800772a:	f7f9 fa51 	bl	8000bd0 <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <UART_SetConfig+0x2d4>)
 8007734:	fba3 1302 	umull	r1, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	2164      	movs	r1, #100	; 0x64
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	3332      	adds	r3, #50	; 0x32
 8007746:	4a08      	ldr	r2, [pc, #32]	; (8007768 <UART_SetConfig+0x2d4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f003 0207 	and.w	r2, r3, #7
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4422      	add	r2, r4
 800775a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800775c:	e105      	b.n	800796a <UART_SetConfig+0x4d6>
 800775e:	bf00      	nop
 8007760:	40011000 	.word	0x40011000
 8007764:	40011400 	.word	0x40011400
 8007768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800776c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007770:	2200      	movs	r2, #0
 8007772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800777a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800777e:	4642      	mov	r2, r8
 8007780:	464b      	mov	r3, r9
 8007782:	1891      	adds	r1, r2, r2
 8007784:	6239      	str	r1, [r7, #32]
 8007786:	415b      	adcs	r3, r3
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
 800778a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800778e:	4641      	mov	r1, r8
 8007790:	1854      	adds	r4, r2, r1
 8007792:	4649      	mov	r1, r9
 8007794:	eb43 0501 	adc.w	r5, r3, r1
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	00eb      	lsls	r3, r5, #3
 80077a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077a6:	00e2      	lsls	r2, r4, #3
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	4643      	mov	r3, r8
 80077ae:	18e3      	adds	r3, r4, r3
 80077b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077b4:	464b      	mov	r3, r9
 80077b6:	eb45 0303 	adc.w	r3, r5, r3
 80077ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077da:	4629      	mov	r1, r5
 80077dc:	008b      	lsls	r3, r1, #2
 80077de:	4621      	mov	r1, r4
 80077e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e4:	4621      	mov	r1, r4
 80077e6:	008a      	lsls	r2, r1, #2
 80077e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077ec:	f7f9 f9f0 	bl	8000bd0 <__aeabi_uldivmod>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4b60      	ldr	r3, [pc, #384]	; (8007978 <UART_SetConfig+0x4e4>)
 80077f6:	fba3 2302 	umull	r2, r3, r3, r2
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	011c      	lsls	r4, r3, #4
 80077fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800780c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	1891      	adds	r1, r2, r2
 8007816:	61b9      	str	r1, [r7, #24]
 8007818:	415b      	adcs	r3, r3
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007820:	4641      	mov	r1, r8
 8007822:	1851      	adds	r1, r2, r1
 8007824:	6139      	str	r1, [r7, #16]
 8007826:	4649      	mov	r1, r9
 8007828:	414b      	adcs	r3, r1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007838:	4659      	mov	r1, fp
 800783a:	00cb      	lsls	r3, r1, #3
 800783c:	4651      	mov	r1, sl
 800783e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007842:	4651      	mov	r1, sl
 8007844:	00ca      	lsls	r2, r1, #3
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	4603      	mov	r3, r0
 800784c:	4642      	mov	r2, r8
 800784e:	189b      	adds	r3, r3, r2
 8007850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007854:	464b      	mov	r3, r9
 8007856:	460a      	mov	r2, r1
 8007858:	eb42 0303 	adc.w	r3, r2, r3
 800785c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	67bb      	str	r3, [r7, #120]	; 0x78
 800786a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007878:	4649      	mov	r1, r9
 800787a:	008b      	lsls	r3, r1, #2
 800787c:	4641      	mov	r1, r8
 800787e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007882:	4641      	mov	r1, r8
 8007884:	008a      	lsls	r2, r1, #2
 8007886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800788a:	f7f9 f9a1 	bl	8000bd0 <__aeabi_uldivmod>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4b39      	ldr	r3, [pc, #228]	; (8007978 <UART_SetConfig+0x4e4>)
 8007894:	fba3 1302 	umull	r1, r3, r3, r2
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	2164      	movs	r1, #100	; 0x64
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	3332      	adds	r3, #50	; 0x32
 80078a6:	4a34      	ldr	r2, [pc, #208]	; (8007978 <UART_SetConfig+0x4e4>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b2:	441c      	add	r4, r3
 80078b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078b8:	2200      	movs	r2, #0
 80078ba:	673b      	str	r3, [r7, #112]	; 0x70
 80078bc:	677a      	str	r2, [r7, #116]	; 0x74
 80078be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078c2:	4642      	mov	r2, r8
 80078c4:	464b      	mov	r3, r9
 80078c6:	1891      	adds	r1, r2, r2
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	415b      	adcs	r3, r3
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d2:	4641      	mov	r1, r8
 80078d4:	1851      	adds	r1, r2, r1
 80078d6:	6039      	str	r1, [r7, #0]
 80078d8:	4649      	mov	r1, r9
 80078da:	414b      	adcs	r3, r1
 80078dc:	607b      	str	r3, [r7, #4]
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ea:	4659      	mov	r1, fp
 80078ec:	00cb      	lsls	r3, r1, #3
 80078ee:	4651      	mov	r1, sl
 80078f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078f4:	4651      	mov	r1, sl
 80078f6:	00ca      	lsls	r2, r1, #3
 80078f8:	4610      	mov	r0, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	4642      	mov	r2, r8
 8007900:	189b      	adds	r3, r3, r2
 8007902:	66bb      	str	r3, [r7, #104]	; 0x68
 8007904:	464b      	mov	r3, r9
 8007906:	460a      	mov	r2, r1
 8007908:	eb42 0303 	adc.w	r3, r2, r3
 800790c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	663b      	str	r3, [r7, #96]	; 0x60
 8007918:	667a      	str	r2, [r7, #100]	; 0x64
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007926:	4649      	mov	r1, r9
 8007928:	008b      	lsls	r3, r1, #2
 800792a:	4641      	mov	r1, r8
 800792c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007930:	4641      	mov	r1, r8
 8007932:	008a      	lsls	r2, r1, #2
 8007934:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007938:	f7f9 f94a 	bl	8000bd0 <__aeabi_uldivmod>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <UART_SetConfig+0x4e4>)
 8007942:	fba3 1302 	umull	r1, r3, r3, r2
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2164      	movs	r1, #100	; 0x64
 800794a:	fb01 f303 	mul.w	r3, r1, r3
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	3332      	adds	r3, #50	; 0x32
 8007954:	4a08      	ldr	r2, [pc, #32]	; (8007978 <UART_SetConfig+0x4e4>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4422      	add	r2, r4
 8007968:	609a      	str	r2, [r3, #8]
}
 800796a:	bf00      	nop
 800796c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007970:	46bd      	mov	sp, r7
 8007972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007976:	bf00      	nop
 8007978:	51eb851f 	.word	0x51eb851f

0800797c <copysign>:
 800797c:	b082      	sub	sp, #8
 800797e:	ec51 0b10 	vmov	r0, r1, d0
 8007982:	ed8d 1b00 	vstr	d1, [sp]
 8007986:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800798a:	9901      	ldr	r1, [sp, #4]
 800798c:	ee10 2a10 	vmov	r2, s0
 8007990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007994:	ea40 0301 	orr.w	r3, r0, r1
 8007998:	ec43 2b10 	vmov	d0, r2, r3
 800799c:	b002      	add	sp, #8
 800799e:	4770      	bx	lr

080079a0 <cosf>:
 80079a0:	ee10 3a10 	vmov	r3, s0
 80079a4:	b507      	push	{r0, r1, r2, lr}
 80079a6:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <cosf+0x80>)
 80079a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	4293      	cmp	r3, r2
 80079ae:	dc06      	bgt.n	80079be <cosf+0x1e>
 80079b0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007a24 <cosf+0x84>
 80079b4:	b003      	add	sp, #12
 80079b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ba:	f000 bd65 	b.w	8008488 <__kernel_cosf>
 80079be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80079c2:	db04      	blt.n	80079ce <cosf+0x2e>
 80079c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80079c8:	b003      	add	sp, #12
 80079ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80079ce:	4668      	mov	r0, sp
 80079d0:	f000 fc1e 	bl	8008210 <__ieee754_rem_pio2f>
 80079d4:	f000 0003 	and.w	r0, r0, #3
 80079d8:	2801      	cmp	r0, #1
 80079da:	d009      	beq.n	80079f0 <cosf+0x50>
 80079dc:	2802      	cmp	r0, #2
 80079de:	d010      	beq.n	8007a02 <cosf+0x62>
 80079e0:	b9b0      	cbnz	r0, 8007a10 <cosf+0x70>
 80079e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80079e6:	ed9d 0a00 	vldr	s0, [sp]
 80079ea:	f000 fd4d 	bl	8008488 <__kernel_cosf>
 80079ee:	e7eb      	b.n	80079c8 <cosf+0x28>
 80079f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80079f4:	ed9d 0a00 	vldr	s0, [sp]
 80079f8:	f001 f81c 	bl	8008a34 <__kernel_sinf>
 80079fc:	eeb1 0a40 	vneg.f32	s0, s0
 8007a00:	e7e2      	b.n	80079c8 <cosf+0x28>
 8007a02:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a06:	ed9d 0a00 	vldr	s0, [sp]
 8007a0a:	f000 fd3d 	bl	8008488 <__kernel_cosf>
 8007a0e:	e7f5      	b.n	80079fc <cosf+0x5c>
 8007a10:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a14:	ed9d 0a00 	vldr	s0, [sp]
 8007a18:	2001      	movs	r0, #1
 8007a1a:	f001 f80b 	bl	8008a34 <__kernel_sinf>
 8007a1e:	e7d3      	b.n	80079c8 <cosf+0x28>
 8007a20:	3f490fd8 	.word	0x3f490fd8
 8007a24:	00000000 	.word	0x00000000

08007a28 <asin>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	ed2d 8b02 	vpush	{d8}
 8007a2e:	ec55 4b10 	vmov	r4, r5, d0
 8007a32:	f000 f85d 	bl	8007af0 <__ieee754_asin>
 8007a36:	4622      	mov	r2, r4
 8007a38:	462b      	mov	r3, r5
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	eeb0 8a40 	vmov.f32	s16, s0
 8007a42:	eef0 8a60 	vmov.f32	s17, s1
 8007a46:	f7f9 f835 	bl	8000ab4 <__aeabi_dcmpun>
 8007a4a:	b9a8      	cbnz	r0, 8007a78 <asin+0x50>
 8007a4c:	ec45 4b10 	vmov	d0, r4, r5
 8007a50:	f001 f9da 	bl	8008e08 <fabs>
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <asin+0x60>)
 8007a56:	ec51 0b10 	vmov	r0, r1, d0
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f7f9 f820 	bl	8000aa0 <__aeabi_dcmpgt>
 8007a60:	b150      	cbz	r0, 8007a78 <asin+0x50>
 8007a62:	f001 faa1 	bl	8008fa8 <__errno>
 8007a66:	ecbd 8b02 	vpop	{d8}
 8007a6a:	2321      	movs	r3, #33	; 0x21
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a72:	4806      	ldr	r0, [pc, #24]	; (8007a8c <asin+0x64>)
 8007a74:	f001 b9d4 	b.w	8008e20 <nan>
 8007a78:	eeb0 0a48 	vmov.f32	s0, s16
 8007a7c:	eef0 0a68 	vmov.f32	s1, s17
 8007a80:	ecbd 8b02 	vpop	{d8}
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	3ff00000 	.word	0x3ff00000
 8007a8c:	08009060 	.word	0x08009060

08007a90 <atan2>:
 8007a90:	f000 ba42 	b.w	8007f18 <__ieee754_atan2>

08007a94 <sqrt>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	ed2d 8b02 	vpush	{d8}
 8007a9a:	ec55 4b10 	vmov	r4, r5, d0
 8007a9e:	f000 fb05 	bl	80080ac <__ieee754_sqrt>
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8007aae:	eef0 8a60 	vmov.f32	s17, s1
 8007ab2:	f7f8 ffff 	bl	8000ab4 <__aeabi_dcmpun>
 8007ab6:	b990      	cbnz	r0, 8007ade <sqrt+0x4a>
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2300      	movs	r3, #0
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 ffd0 	bl	8000a64 <__aeabi_dcmplt>
 8007ac4:	b158      	cbz	r0, 8007ade <sqrt+0x4a>
 8007ac6:	f001 fa6f 	bl	8008fa8 <__errno>
 8007aca:	2321      	movs	r3, #33	; 0x21
 8007acc:	6003      	str	r3, [r0, #0]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f7f8 fe7d 	bl	80007d4 <__aeabi_ddiv>
 8007ada:	ec41 0b18 	vmov	d8, r0, r1
 8007ade:	eeb0 0a48 	vmov.f32	s0, s16
 8007ae2:	eef0 0a68 	vmov.f32	s1, s17
 8007ae6:	ecbd 8b02 	vpop	{d8}
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	0000      	movs	r0, r0
	...

08007af0 <__ieee754_asin>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	ed2d 8b04 	vpush	{d8-d9}
 8007af8:	ec55 4b10 	vmov	r4, r5, d0
 8007afc:	4bcc      	ldr	r3, [pc, #816]	; (8007e30 <__ieee754_asin+0x340>)
 8007afe:	b083      	sub	sp, #12
 8007b00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007b04:	4598      	cmp	r8, r3
 8007b06:	9501      	str	r5, [sp, #4]
 8007b08:	dd35      	ble.n	8007b76 <__ieee754_asin+0x86>
 8007b0a:	ee10 3a10 	vmov	r3, s0
 8007b0e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007b12:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007b16:	ea58 0303 	orrs.w	r3, r8, r3
 8007b1a:	d117      	bne.n	8007b4c <__ieee754_asin+0x5c>
 8007b1c:	a3aa      	add	r3, pc, #680	; (adr r3, 8007dc8 <__ieee754_asin+0x2d8>)
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	ee10 0a10 	vmov	r0, s0
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 fd2a 	bl	8000580 <__aeabi_dmul>
 8007b2c:	a3a8      	add	r3, pc, #672	; (adr r3, 8007dd0 <__ieee754_asin+0x2e0>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	4620      	mov	r0, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	f7f8 fd21 	bl	8000580 <__aeabi_dmul>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4630      	mov	r0, r6
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 fb65 	bl	8000214 <__adddf3>
 8007b4a:	e00b      	b.n	8007b64 <__ieee754_asin+0x74>
 8007b4c:	ee10 2a10 	vmov	r2, s0
 8007b50:	462b      	mov	r3, r5
 8007b52:	ee10 0a10 	vmov	r0, s0
 8007b56:	4629      	mov	r1, r5
 8007b58:	f7f8 fb5a 	bl	8000210 <__aeabi_dsub>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	f7f8 fe38 	bl	80007d4 <__aeabi_ddiv>
 8007b64:	4604      	mov	r4, r0
 8007b66:	460d      	mov	r5, r1
 8007b68:	ec45 4b10 	vmov	d0, r4, r5
 8007b6c:	b003      	add	sp, #12
 8007b6e:	ecbd 8b04 	vpop	{d8-d9}
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	4baf      	ldr	r3, [pc, #700]	; (8007e34 <__ieee754_asin+0x344>)
 8007b78:	4598      	cmp	r8, r3
 8007b7a:	dc11      	bgt.n	8007ba0 <__ieee754_asin+0xb0>
 8007b7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007b80:	f280 80ae 	bge.w	8007ce0 <__ieee754_asin+0x1f0>
 8007b84:	a394      	add	r3, pc, #592	; (adr r3, 8007dd8 <__ieee754_asin+0x2e8>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	ee10 0a10 	vmov	r0, s0
 8007b8e:	4629      	mov	r1, r5
 8007b90:	f7f8 fb40 	bl	8000214 <__adddf3>
 8007b94:	4ba8      	ldr	r3, [pc, #672]	; (8007e38 <__ieee754_asin+0x348>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	f7f8 ff82 	bl	8000aa0 <__aeabi_dcmpgt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1e3      	bne.n	8007b68 <__ieee754_asin+0x78>
 8007ba0:	ec45 4b10 	vmov	d0, r4, r5
 8007ba4:	f001 f930 	bl	8008e08 <fabs>
 8007ba8:	49a3      	ldr	r1, [pc, #652]	; (8007e38 <__ieee754_asin+0x348>)
 8007baa:	ec53 2b10 	vmov	r2, r3, d0
 8007bae:	2000      	movs	r0, #0
 8007bb0:	f7f8 fb2e 	bl	8000210 <__aeabi_dsub>
 8007bb4:	4ba1      	ldr	r3, [pc, #644]	; (8007e3c <__ieee754_asin+0x34c>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f7f8 fce2 	bl	8000580 <__aeabi_dmul>
 8007bbc:	a388      	add	r3, pc, #544	; (adr r3, 8007de0 <__ieee754_asin+0x2f0>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	460d      	mov	r5, r1
 8007bc6:	f7f8 fcdb 	bl	8000580 <__aeabi_dmul>
 8007bca:	a387      	add	r3, pc, #540	; (adr r3, 8007de8 <__ieee754_asin+0x2f8>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fb20 	bl	8000214 <__adddf3>
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	f7f8 fcd2 	bl	8000580 <__aeabi_dmul>
 8007bdc:	a384      	add	r3, pc, #528	; (adr r3, 8007df0 <__ieee754_asin+0x300>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fb15 	bl	8000210 <__aeabi_dsub>
 8007be6:	4622      	mov	r2, r4
 8007be8:	462b      	mov	r3, r5
 8007bea:	f7f8 fcc9 	bl	8000580 <__aeabi_dmul>
 8007bee:	a382      	add	r3, pc, #520	; (adr r3, 8007df8 <__ieee754_asin+0x308>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	f7f8 fb0e 	bl	8000214 <__adddf3>
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	462b      	mov	r3, r5
 8007bfc:	f7f8 fcc0 	bl	8000580 <__aeabi_dmul>
 8007c00:	a37f      	add	r3, pc, #508	; (adr r3, 8007e00 <__ieee754_asin+0x310>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fb03 	bl	8000210 <__aeabi_dsub>
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	f7f8 fcb7 	bl	8000580 <__aeabi_dmul>
 8007c12:	a37d      	add	r3, pc, #500	; (adr r3, 8007e08 <__ieee754_asin+0x318>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fafc 	bl	8000214 <__adddf3>
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	462b      	mov	r3, r5
 8007c20:	f7f8 fcae 	bl	8000580 <__aeabi_dmul>
 8007c24:	a37a      	add	r3, pc, #488	; (adr r3, 8007e10 <__ieee754_asin+0x320>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	ec41 0b18 	vmov	d8, r0, r1
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 fca5 	bl	8000580 <__aeabi_dmul>
 8007c36:	a378      	add	r3, pc, #480	; (adr r3, 8007e18 <__ieee754_asin+0x328>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fae8 	bl	8000210 <__aeabi_dsub>
 8007c40:	4622      	mov	r2, r4
 8007c42:	462b      	mov	r3, r5
 8007c44:	f7f8 fc9c 	bl	8000580 <__aeabi_dmul>
 8007c48:	a375      	add	r3, pc, #468	; (adr r3, 8007e20 <__ieee754_asin+0x330>)
 8007c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4e:	f7f8 fae1 	bl	8000214 <__adddf3>
 8007c52:	4622      	mov	r2, r4
 8007c54:	462b      	mov	r3, r5
 8007c56:	f7f8 fc93 	bl	8000580 <__aeabi_dmul>
 8007c5a:	a373      	add	r3, pc, #460	; (adr r3, 8007e28 <__ieee754_asin+0x338>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fad6 	bl	8000210 <__aeabi_dsub>
 8007c64:	4622      	mov	r2, r4
 8007c66:	462b      	mov	r3, r5
 8007c68:	f7f8 fc8a 	bl	8000580 <__aeabi_dmul>
 8007c6c:	4b72      	ldr	r3, [pc, #456]	; (8007e38 <__ieee754_asin+0x348>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f7f8 fad0 	bl	8000214 <__adddf3>
 8007c74:	ec45 4b10 	vmov	d0, r4, r5
 8007c78:	4606      	mov	r6, r0
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	f000 fa16 	bl	80080ac <__ieee754_sqrt>
 8007c80:	4b6f      	ldr	r3, [pc, #444]	; (8007e40 <__ieee754_asin+0x350>)
 8007c82:	4598      	cmp	r8, r3
 8007c84:	ec5b ab10 	vmov	sl, fp, d0
 8007c88:	f340 80dc 	ble.w	8007e44 <__ieee754_asin+0x354>
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	463b      	mov	r3, r7
 8007c90:	ec51 0b18 	vmov	r0, r1, d8
 8007c94:	f7f8 fd9e 	bl	80007d4 <__aeabi_ddiv>
 8007c98:	4652      	mov	r2, sl
 8007c9a:	465b      	mov	r3, fp
 8007c9c:	f7f8 fc70 	bl	8000580 <__aeabi_dmul>
 8007ca0:	4652      	mov	r2, sl
 8007ca2:	465b      	mov	r3, fp
 8007ca4:	f7f8 fab6 	bl	8000214 <__adddf3>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	f7f8 fab2 	bl	8000214 <__adddf3>
 8007cb0:	a347      	add	r3, pc, #284	; (adr r3, 8007dd0 <__ieee754_asin+0x2e0>)
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	f7f8 faab 	bl	8000210 <__aeabi_dsub>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	a142      	add	r1, pc, #264	; (adr r1, 8007dc8 <__ieee754_asin+0x2d8>)
 8007cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc4:	f7f8 faa4 	bl	8000210 <__aeabi_dsub>
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfdc      	itt	le
 8007cce:	4602      	movle	r2, r0
 8007cd0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	bfdc      	itt	le
 8007cda:	4614      	movle	r4, r2
 8007cdc:	461d      	movle	r5, r3
 8007cde:	e743      	b.n	8007b68 <__ieee754_asin+0x78>
 8007ce0:	ee10 2a10 	vmov	r2, s0
 8007ce4:	ee10 0a10 	vmov	r0, s0
 8007ce8:	462b      	mov	r3, r5
 8007cea:	4629      	mov	r1, r5
 8007cec:	f7f8 fc48 	bl	8000580 <__aeabi_dmul>
 8007cf0:	a33b      	add	r3, pc, #236	; (adr r3, 8007de0 <__ieee754_asin+0x2f0>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	f7f8 fc41 	bl	8000580 <__aeabi_dmul>
 8007cfe:	a33a      	add	r3, pc, #232	; (adr r3, 8007de8 <__ieee754_asin+0x2f8>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fa86 	bl	8000214 <__adddf3>
 8007d08:	4632      	mov	r2, r6
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	f7f8 fc38 	bl	8000580 <__aeabi_dmul>
 8007d10:	a337      	add	r3, pc, #220	; (adr r3, 8007df0 <__ieee754_asin+0x300>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fa7b 	bl	8000210 <__aeabi_dsub>
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	f7f8 fc2f 	bl	8000580 <__aeabi_dmul>
 8007d22:	a335      	add	r3, pc, #212	; (adr r3, 8007df8 <__ieee754_asin+0x308>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fa74 	bl	8000214 <__adddf3>
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	f7f8 fc26 	bl	8000580 <__aeabi_dmul>
 8007d34:	a332      	add	r3, pc, #200	; (adr r3, 8007e00 <__ieee754_asin+0x310>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	f7f8 fa69 	bl	8000210 <__aeabi_dsub>
 8007d3e:	4632      	mov	r2, r6
 8007d40:	463b      	mov	r3, r7
 8007d42:	f7f8 fc1d 	bl	8000580 <__aeabi_dmul>
 8007d46:	a330      	add	r3, pc, #192	; (adr r3, 8007e08 <__ieee754_asin+0x318>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fa62 	bl	8000214 <__adddf3>
 8007d50:	4632      	mov	r2, r6
 8007d52:	463b      	mov	r3, r7
 8007d54:	f7f8 fc14 	bl	8000580 <__aeabi_dmul>
 8007d58:	a32d      	add	r3, pc, #180	; (adr r3, 8007e10 <__ieee754_asin+0x320>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	4680      	mov	r8, r0
 8007d60:	4689      	mov	r9, r1
 8007d62:	4630      	mov	r0, r6
 8007d64:	4639      	mov	r1, r7
 8007d66:	f7f8 fc0b 	bl	8000580 <__aeabi_dmul>
 8007d6a:	a32b      	add	r3, pc, #172	; (adr r3, 8007e18 <__ieee754_asin+0x328>)
 8007d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d70:	f7f8 fa4e 	bl	8000210 <__aeabi_dsub>
 8007d74:	4632      	mov	r2, r6
 8007d76:	463b      	mov	r3, r7
 8007d78:	f7f8 fc02 	bl	8000580 <__aeabi_dmul>
 8007d7c:	a328      	add	r3, pc, #160	; (adr r3, 8007e20 <__ieee754_asin+0x330>)
 8007d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d82:	f7f8 fa47 	bl	8000214 <__adddf3>
 8007d86:	4632      	mov	r2, r6
 8007d88:	463b      	mov	r3, r7
 8007d8a:	f7f8 fbf9 	bl	8000580 <__aeabi_dmul>
 8007d8e:	a326      	add	r3, pc, #152	; (adr r3, 8007e28 <__ieee754_asin+0x338>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f7f8 fa3c 	bl	8000210 <__aeabi_dsub>
 8007d98:	4632      	mov	r2, r6
 8007d9a:	463b      	mov	r3, r7
 8007d9c:	f7f8 fbf0 	bl	8000580 <__aeabi_dmul>
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <__ieee754_asin+0x348>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	f7f8 fa36 	bl	8000214 <__adddf3>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	4640      	mov	r0, r8
 8007dae:	4649      	mov	r1, r9
 8007db0:	f7f8 fd10 	bl	80007d4 <__aeabi_ddiv>
 8007db4:	4622      	mov	r2, r4
 8007db6:	462b      	mov	r3, r5
 8007db8:	f7f8 fbe2 	bl	8000580 <__aeabi_dmul>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	e6bf      	b.n	8007b46 <__ieee754_asin+0x56>
 8007dc6:	bf00      	nop
 8007dc8:	54442d18 	.word	0x54442d18
 8007dcc:	3ff921fb 	.word	0x3ff921fb
 8007dd0:	33145c07 	.word	0x33145c07
 8007dd4:	3c91a626 	.word	0x3c91a626
 8007dd8:	8800759c 	.word	0x8800759c
 8007ddc:	7e37e43c 	.word	0x7e37e43c
 8007de0:	0dfdf709 	.word	0x0dfdf709
 8007de4:	3f023de1 	.word	0x3f023de1
 8007de8:	7501b288 	.word	0x7501b288
 8007dec:	3f49efe0 	.word	0x3f49efe0
 8007df0:	b5688f3b 	.word	0xb5688f3b
 8007df4:	3fa48228 	.word	0x3fa48228
 8007df8:	0e884455 	.word	0x0e884455
 8007dfc:	3fc9c155 	.word	0x3fc9c155
 8007e00:	03eb6f7d 	.word	0x03eb6f7d
 8007e04:	3fd4d612 	.word	0x3fd4d612
 8007e08:	55555555 	.word	0x55555555
 8007e0c:	3fc55555 	.word	0x3fc55555
 8007e10:	b12e9282 	.word	0xb12e9282
 8007e14:	3fb3b8c5 	.word	0x3fb3b8c5
 8007e18:	1b8d0159 	.word	0x1b8d0159
 8007e1c:	3fe6066c 	.word	0x3fe6066c
 8007e20:	9c598ac8 	.word	0x9c598ac8
 8007e24:	40002ae5 	.word	0x40002ae5
 8007e28:	1c8a2d4b 	.word	0x1c8a2d4b
 8007e2c:	40033a27 	.word	0x40033a27
 8007e30:	3fefffff 	.word	0x3fefffff
 8007e34:	3fdfffff 	.word	0x3fdfffff
 8007e38:	3ff00000 	.word	0x3ff00000
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	3fef3332 	.word	0x3fef3332
 8007e44:	ee10 2a10 	vmov	r2, s0
 8007e48:	ee10 0a10 	vmov	r0, s0
 8007e4c:	465b      	mov	r3, fp
 8007e4e:	4659      	mov	r1, fp
 8007e50:	f7f8 f9e0 	bl	8000214 <__adddf3>
 8007e54:	4632      	mov	r2, r6
 8007e56:	463b      	mov	r3, r7
 8007e58:	ec41 0b19 	vmov	d9, r0, r1
 8007e5c:	ec51 0b18 	vmov	r0, r1, d8
 8007e60:	f7f8 fcb8 	bl	80007d4 <__aeabi_ddiv>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	ec51 0b19 	vmov	r0, r1, d9
 8007e6c:	f7f8 fb88 	bl	8000580 <__aeabi_dmul>
 8007e70:	f04f 0800 	mov.w	r8, #0
 8007e74:	4606      	mov	r6, r0
 8007e76:	460f      	mov	r7, r1
 8007e78:	4642      	mov	r2, r8
 8007e7a:	465b      	mov	r3, fp
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4659      	mov	r1, fp
 8007e80:	f7f8 fb7e 	bl	8000580 <__aeabi_dmul>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4620      	mov	r0, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 f9c0 	bl	8000210 <__aeabi_dsub>
 8007e90:	4642      	mov	r2, r8
 8007e92:	4604      	mov	r4, r0
 8007e94:	460d      	mov	r5, r1
 8007e96:	465b      	mov	r3, fp
 8007e98:	4650      	mov	r0, sl
 8007e9a:	4659      	mov	r1, fp
 8007e9c:	f7f8 f9ba 	bl	8000214 <__adddf3>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 fc94 	bl	80007d4 <__aeabi_ddiv>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	f7f8 f9b0 	bl	8000214 <__adddf3>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	a113      	add	r1, pc, #76	; (adr r1, 8007f08 <__ieee754_asin+0x418>)
 8007eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ebe:	f7f8 f9a7 	bl	8000210 <__aeabi_dsub>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 f9a1 	bl	8000210 <__aeabi_dsub>
 8007ece:	4642      	mov	r2, r8
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	465b      	mov	r3, fp
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4659      	mov	r1, fp
 8007eda:	f7f8 f99b 	bl	8000214 <__adddf3>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	a10b      	add	r1, pc, #44	; (adr r1, 8007f10 <__ieee754_asin+0x420>)
 8007ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ee8:	f7f8 f992 	bl	8000210 <__aeabi_dsub>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	f7f8 f98c 	bl	8000210 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	a104      	add	r1, pc, #16	; (adr r1, 8007f10 <__ieee754_asin+0x420>)
 8007efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f02:	e6df      	b.n	8007cc4 <__ieee754_asin+0x1d4>
 8007f04:	f3af 8000 	nop.w
 8007f08:	33145c07 	.word	0x33145c07
 8007f0c:	3c91a626 	.word	0x3c91a626
 8007f10:	54442d18 	.word	0x54442d18
 8007f14:	3fe921fb 	.word	0x3fe921fb

08007f18 <__ieee754_atan2>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	ec57 6b11 	vmov	r6, r7, d1
 8007f20:	4273      	negs	r3, r6
 8007f22:	f8df e184 	ldr.w	lr, [pc, #388]	; 80080a8 <__ieee754_atan2+0x190>
 8007f26:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007f2a:	4333      	orrs	r3, r6
 8007f2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007f30:	4573      	cmp	r3, lr
 8007f32:	ec51 0b10 	vmov	r0, r1, d0
 8007f36:	ee11 8a10 	vmov	r8, s2
 8007f3a:	d80a      	bhi.n	8007f52 <__ieee754_atan2+0x3a>
 8007f3c:	4244      	negs	r4, r0
 8007f3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f42:	4304      	orrs	r4, r0
 8007f44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007f48:	4574      	cmp	r4, lr
 8007f4a:	ee10 9a10 	vmov	r9, s0
 8007f4e:	468c      	mov	ip, r1
 8007f50:	d907      	bls.n	8007f62 <__ieee754_atan2+0x4a>
 8007f52:	4632      	mov	r2, r6
 8007f54:	463b      	mov	r3, r7
 8007f56:	f7f8 f95d 	bl	8000214 <__adddf3>
 8007f5a:	ec41 0b10 	vmov	d0, r0, r1
 8007f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007f66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f6a:	4334      	orrs	r4, r6
 8007f6c:	d103      	bne.n	8007f76 <__ieee754_atan2+0x5e>
 8007f6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f72:	f000 bda9 	b.w	8008ac8 <atan>
 8007f76:	17bc      	asrs	r4, r7, #30
 8007f78:	f004 0402 	and.w	r4, r4, #2
 8007f7c:	ea53 0909 	orrs.w	r9, r3, r9
 8007f80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007f84:	d107      	bne.n	8007f96 <__ieee754_atan2+0x7e>
 8007f86:	2c02      	cmp	r4, #2
 8007f88:	d060      	beq.n	800804c <__ieee754_atan2+0x134>
 8007f8a:	2c03      	cmp	r4, #3
 8007f8c:	d1e5      	bne.n	8007f5a <__ieee754_atan2+0x42>
 8007f8e:	a142      	add	r1, pc, #264	; (adr r1, 8008098 <__ieee754_atan2+0x180>)
 8007f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f94:	e7e1      	b.n	8007f5a <__ieee754_atan2+0x42>
 8007f96:	ea52 0808 	orrs.w	r8, r2, r8
 8007f9a:	d106      	bne.n	8007faa <__ieee754_atan2+0x92>
 8007f9c:	f1bc 0f00 	cmp.w	ip, #0
 8007fa0:	da5f      	bge.n	8008062 <__ieee754_atan2+0x14a>
 8007fa2:	a13f      	add	r1, pc, #252	; (adr r1, 80080a0 <__ieee754_atan2+0x188>)
 8007fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa8:	e7d7      	b.n	8007f5a <__ieee754_atan2+0x42>
 8007faa:	4572      	cmp	r2, lr
 8007fac:	d10f      	bne.n	8007fce <__ieee754_atan2+0xb6>
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fb4:	d107      	bne.n	8007fc6 <__ieee754_atan2+0xae>
 8007fb6:	2c02      	cmp	r4, #2
 8007fb8:	d84c      	bhi.n	8008054 <__ieee754_atan2+0x13c>
 8007fba:	4b35      	ldr	r3, [pc, #212]	; (8008090 <__ieee754_atan2+0x178>)
 8007fbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007fc0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007fc4:	e7c9      	b.n	8007f5a <__ieee754_atan2+0x42>
 8007fc6:	2c02      	cmp	r4, #2
 8007fc8:	d848      	bhi.n	800805c <__ieee754_atan2+0x144>
 8007fca:	4b32      	ldr	r3, [pc, #200]	; (8008094 <__ieee754_atan2+0x17c>)
 8007fcc:	e7f6      	b.n	8007fbc <__ieee754_atan2+0xa4>
 8007fce:	4573      	cmp	r3, lr
 8007fd0:	d0e4      	beq.n	8007f9c <__ieee754_atan2+0x84>
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007fd8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007fdc:	da1e      	bge.n	800801c <__ieee754_atan2+0x104>
 8007fde:	2f00      	cmp	r7, #0
 8007fe0:	da01      	bge.n	8007fe6 <__ieee754_atan2+0xce>
 8007fe2:	323c      	adds	r2, #60	; 0x3c
 8007fe4:	db1e      	blt.n	8008024 <__ieee754_atan2+0x10c>
 8007fe6:	4632      	mov	r2, r6
 8007fe8:	463b      	mov	r3, r7
 8007fea:	f7f8 fbf3 	bl	80007d4 <__aeabi_ddiv>
 8007fee:	ec41 0b10 	vmov	d0, r0, r1
 8007ff2:	f000 ff09 	bl	8008e08 <fabs>
 8007ff6:	f000 fd67 	bl	8008ac8 <atan>
 8007ffa:	ec51 0b10 	vmov	r0, r1, d0
 8007ffe:	2c01      	cmp	r4, #1
 8008000:	d013      	beq.n	800802a <__ieee754_atan2+0x112>
 8008002:	2c02      	cmp	r4, #2
 8008004:	d015      	beq.n	8008032 <__ieee754_atan2+0x11a>
 8008006:	2c00      	cmp	r4, #0
 8008008:	d0a7      	beq.n	8007f5a <__ieee754_atan2+0x42>
 800800a:	a319      	add	r3, pc, #100	; (adr r3, 8008070 <__ieee754_atan2+0x158>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 f8fe 	bl	8000210 <__aeabi_dsub>
 8008014:	a318      	add	r3, pc, #96	; (adr r3, 8008078 <__ieee754_atan2+0x160>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	e014      	b.n	8008046 <__ieee754_atan2+0x12e>
 800801c:	a118      	add	r1, pc, #96	; (adr r1, 8008080 <__ieee754_atan2+0x168>)
 800801e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008022:	e7ec      	b.n	8007ffe <__ieee754_atan2+0xe6>
 8008024:	2000      	movs	r0, #0
 8008026:	2100      	movs	r1, #0
 8008028:	e7e9      	b.n	8007ffe <__ieee754_atan2+0xe6>
 800802a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800802e:	4619      	mov	r1, r3
 8008030:	e793      	b.n	8007f5a <__ieee754_atan2+0x42>
 8008032:	a30f      	add	r3, pc, #60	; (adr r3, 8008070 <__ieee754_atan2+0x158>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 f8ea 	bl	8000210 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	a10d      	add	r1, pc, #52	; (adr r1, 8008078 <__ieee754_atan2+0x160>)
 8008042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008046:	f7f8 f8e3 	bl	8000210 <__aeabi_dsub>
 800804a:	e786      	b.n	8007f5a <__ieee754_atan2+0x42>
 800804c:	a10a      	add	r1, pc, #40	; (adr r1, 8008078 <__ieee754_atan2+0x160>)
 800804e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008052:	e782      	b.n	8007f5a <__ieee754_atan2+0x42>
 8008054:	a10c      	add	r1, pc, #48	; (adr r1, 8008088 <__ieee754_atan2+0x170>)
 8008056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800805a:	e77e      	b.n	8007f5a <__ieee754_atan2+0x42>
 800805c:	2000      	movs	r0, #0
 800805e:	2100      	movs	r1, #0
 8008060:	e77b      	b.n	8007f5a <__ieee754_atan2+0x42>
 8008062:	a107      	add	r1, pc, #28	; (adr r1, 8008080 <__ieee754_atan2+0x168>)
 8008064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008068:	e777      	b.n	8007f5a <__ieee754_atan2+0x42>
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	33145c07 	.word	0x33145c07
 8008074:	3ca1a626 	.word	0x3ca1a626
 8008078:	54442d18 	.word	0x54442d18
 800807c:	400921fb 	.word	0x400921fb
 8008080:	54442d18 	.word	0x54442d18
 8008084:	3ff921fb 	.word	0x3ff921fb
 8008088:	54442d18 	.word	0x54442d18
 800808c:	3fe921fb 	.word	0x3fe921fb
 8008090:	08009068 	.word	0x08009068
 8008094:	08009080 	.word	0x08009080
 8008098:	54442d18 	.word	0x54442d18
 800809c:	c00921fb 	.word	0xc00921fb
 80080a0:	54442d18 	.word	0x54442d18
 80080a4:	bff921fb 	.word	0xbff921fb
 80080a8:	7ff00000 	.word	0x7ff00000

080080ac <__ieee754_sqrt>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	ec55 4b10 	vmov	r4, r5, d0
 80080b4:	4e55      	ldr	r6, [pc, #340]	; (800820c <__ieee754_sqrt+0x160>)
 80080b6:	43ae      	bics	r6, r5
 80080b8:	ee10 0a10 	vmov	r0, s0
 80080bc:	ee10 3a10 	vmov	r3, s0
 80080c0:	462a      	mov	r2, r5
 80080c2:	4629      	mov	r1, r5
 80080c4:	d110      	bne.n	80080e8 <__ieee754_sqrt+0x3c>
 80080c6:	ee10 2a10 	vmov	r2, s0
 80080ca:	462b      	mov	r3, r5
 80080cc:	f7f8 fa58 	bl	8000580 <__aeabi_dmul>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 f89c 	bl	8000214 <__adddf3>
 80080dc:	4604      	mov	r4, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	ec45 4b10 	vmov	d0, r4, r5
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	dc10      	bgt.n	800810e <__ieee754_sqrt+0x62>
 80080ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80080f0:	4330      	orrs	r0, r6
 80080f2:	d0f5      	beq.n	80080e0 <__ieee754_sqrt+0x34>
 80080f4:	b15d      	cbz	r5, 800810e <__ieee754_sqrt+0x62>
 80080f6:	ee10 2a10 	vmov	r2, s0
 80080fa:	462b      	mov	r3, r5
 80080fc:	ee10 0a10 	vmov	r0, s0
 8008100:	f7f8 f886 	bl	8000210 <__aeabi_dsub>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	f7f8 fb64 	bl	80007d4 <__aeabi_ddiv>
 800810c:	e7e6      	b.n	80080dc <__ieee754_sqrt+0x30>
 800810e:	1512      	asrs	r2, r2, #20
 8008110:	d074      	beq.n	80081fc <__ieee754_sqrt+0x150>
 8008112:	07d4      	lsls	r4, r2, #31
 8008114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008118:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800811c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008120:	bf5e      	ittt	pl
 8008122:	0fda      	lsrpl	r2, r3, #31
 8008124:	005b      	lslpl	r3, r3, #1
 8008126:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800812a:	2400      	movs	r4, #0
 800812c:	0fda      	lsrs	r2, r3, #31
 800812e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008132:	107f      	asrs	r7, r7, #1
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	2516      	movs	r5, #22
 8008138:	4620      	mov	r0, r4
 800813a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800813e:	1886      	adds	r6, r0, r2
 8008140:	428e      	cmp	r6, r1
 8008142:	bfde      	ittt	le
 8008144:	1b89      	suble	r1, r1, r6
 8008146:	18b0      	addle	r0, r6, r2
 8008148:	18a4      	addle	r4, r4, r2
 800814a:	0049      	lsls	r1, r1, #1
 800814c:	3d01      	subs	r5, #1
 800814e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008152:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800815a:	d1f0      	bne.n	800813e <__ieee754_sqrt+0x92>
 800815c:	462a      	mov	r2, r5
 800815e:	f04f 0e20 	mov.w	lr, #32
 8008162:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008166:	4281      	cmp	r1, r0
 8008168:	eb06 0c05 	add.w	ip, r6, r5
 800816c:	dc02      	bgt.n	8008174 <__ieee754_sqrt+0xc8>
 800816e:	d113      	bne.n	8008198 <__ieee754_sqrt+0xec>
 8008170:	459c      	cmp	ip, r3
 8008172:	d811      	bhi.n	8008198 <__ieee754_sqrt+0xec>
 8008174:	f1bc 0f00 	cmp.w	ip, #0
 8008178:	eb0c 0506 	add.w	r5, ip, r6
 800817c:	da43      	bge.n	8008206 <__ieee754_sqrt+0x15a>
 800817e:	2d00      	cmp	r5, #0
 8008180:	db41      	blt.n	8008206 <__ieee754_sqrt+0x15a>
 8008182:	f100 0801 	add.w	r8, r0, #1
 8008186:	1a09      	subs	r1, r1, r0
 8008188:	459c      	cmp	ip, r3
 800818a:	bf88      	it	hi
 800818c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008190:	eba3 030c 	sub.w	r3, r3, ip
 8008194:	4432      	add	r2, r6
 8008196:	4640      	mov	r0, r8
 8008198:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800819c:	f1be 0e01 	subs.w	lr, lr, #1
 80081a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80081a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80081ac:	d1db      	bne.n	8008166 <__ieee754_sqrt+0xba>
 80081ae:	430b      	orrs	r3, r1
 80081b0:	d006      	beq.n	80081c0 <__ieee754_sqrt+0x114>
 80081b2:	1c50      	adds	r0, r2, #1
 80081b4:	bf13      	iteet	ne
 80081b6:	3201      	addne	r2, #1
 80081b8:	3401      	addeq	r4, #1
 80081ba:	4672      	moveq	r2, lr
 80081bc:	f022 0201 	bicne.w	r2, r2, #1
 80081c0:	1063      	asrs	r3, r4, #1
 80081c2:	0852      	lsrs	r2, r2, #1
 80081c4:	07e1      	lsls	r1, r4, #31
 80081c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80081ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80081ce:	bf48      	it	mi
 80081d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80081d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80081d8:	4614      	mov	r4, r2
 80081da:	e781      	b.n	80080e0 <__ieee754_sqrt+0x34>
 80081dc:	0ad9      	lsrs	r1, r3, #11
 80081de:	3815      	subs	r0, #21
 80081e0:	055b      	lsls	r3, r3, #21
 80081e2:	2900      	cmp	r1, #0
 80081e4:	d0fa      	beq.n	80081dc <__ieee754_sqrt+0x130>
 80081e6:	02cd      	lsls	r5, r1, #11
 80081e8:	d50a      	bpl.n	8008200 <__ieee754_sqrt+0x154>
 80081ea:	f1c2 0420 	rsb	r4, r2, #32
 80081ee:	fa23 f404 	lsr.w	r4, r3, r4
 80081f2:	1e55      	subs	r5, r2, #1
 80081f4:	4093      	lsls	r3, r2
 80081f6:	4321      	orrs	r1, r4
 80081f8:	1b42      	subs	r2, r0, r5
 80081fa:	e78a      	b.n	8008112 <__ieee754_sqrt+0x66>
 80081fc:	4610      	mov	r0, r2
 80081fe:	e7f0      	b.n	80081e2 <__ieee754_sqrt+0x136>
 8008200:	0049      	lsls	r1, r1, #1
 8008202:	3201      	adds	r2, #1
 8008204:	e7ef      	b.n	80081e6 <__ieee754_sqrt+0x13a>
 8008206:	4680      	mov	r8, r0
 8008208:	e7bd      	b.n	8008186 <__ieee754_sqrt+0xda>
 800820a:	bf00      	nop
 800820c:	7ff00000 	.word	0x7ff00000

08008210 <__ieee754_rem_pio2f>:
 8008210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008212:	ee10 6a10 	vmov	r6, s0
 8008216:	4b8e      	ldr	r3, [pc, #568]	; (8008450 <__ieee754_rem_pio2f+0x240>)
 8008218:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800821c:	429d      	cmp	r5, r3
 800821e:	b087      	sub	sp, #28
 8008220:	eef0 7a40 	vmov.f32	s15, s0
 8008224:	4604      	mov	r4, r0
 8008226:	dc05      	bgt.n	8008234 <__ieee754_rem_pio2f+0x24>
 8008228:	2300      	movs	r3, #0
 800822a:	ed80 0a00 	vstr	s0, [r0]
 800822e:	6043      	str	r3, [r0, #4]
 8008230:	2000      	movs	r0, #0
 8008232:	e01a      	b.n	800826a <__ieee754_rem_pio2f+0x5a>
 8008234:	4b87      	ldr	r3, [pc, #540]	; (8008454 <__ieee754_rem_pio2f+0x244>)
 8008236:	429d      	cmp	r5, r3
 8008238:	dc46      	bgt.n	80082c8 <__ieee754_rem_pio2f+0xb8>
 800823a:	2e00      	cmp	r6, #0
 800823c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008458 <__ieee754_rem_pio2f+0x248>
 8008240:	4b86      	ldr	r3, [pc, #536]	; (800845c <__ieee754_rem_pio2f+0x24c>)
 8008242:	f025 050f 	bic.w	r5, r5, #15
 8008246:	dd1f      	ble.n	8008288 <__ieee754_rem_pio2f+0x78>
 8008248:	429d      	cmp	r5, r3
 800824a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800824e:	d00e      	beq.n	800826e <__ieee754_rem_pio2f+0x5e>
 8008250:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008460 <__ieee754_rem_pio2f+0x250>
 8008254:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008258:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800825c:	ed80 0a00 	vstr	s0, [r0]
 8008260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008264:	2001      	movs	r0, #1
 8008266:	edc4 7a01 	vstr	s15, [r4, #4]
 800826a:	b007      	add	sp, #28
 800826c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800826e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008464 <__ieee754_rem_pio2f+0x254>
 8008272:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008468 <__ieee754_rem_pio2f+0x258>
 8008276:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800827a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800827e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008282:	edc0 6a00 	vstr	s13, [r0]
 8008286:	e7eb      	b.n	8008260 <__ieee754_rem_pio2f+0x50>
 8008288:	429d      	cmp	r5, r3
 800828a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800828e:	d00e      	beq.n	80082ae <__ieee754_rem_pio2f+0x9e>
 8008290:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008460 <__ieee754_rem_pio2f+0x250>
 8008294:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008298:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800829c:	ed80 0a00 	vstr	s0, [r0]
 80082a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	edc4 7a01 	vstr	s15, [r4, #4]
 80082ac:	e7dd      	b.n	800826a <__ieee754_rem_pio2f+0x5a>
 80082ae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008464 <__ieee754_rem_pio2f+0x254>
 80082b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008468 <__ieee754_rem_pio2f+0x258>
 80082b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80082ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 80082be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082c2:	edc0 6a00 	vstr	s13, [r0]
 80082c6:	e7eb      	b.n	80082a0 <__ieee754_rem_pio2f+0x90>
 80082c8:	4b68      	ldr	r3, [pc, #416]	; (800846c <__ieee754_rem_pio2f+0x25c>)
 80082ca:	429d      	cmp	r5, r3
 80082cc:	dc72      	bgt.n	80083b4 <__ieee754_rem_pio2f+0x1a4>
 80082ce:	f000 fdaf 	bl	8008e30 <fabsf>
 80082d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008470 <__ieee754_rem_pio2f+0x260>
 80082d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80082de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082e6:	ee17 0a90 	vmov	r0, s15
 80082ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008458 <__ieee754_rem_pio2f+0x248>
 80082ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80082f2:	281f      	cmp	r0, #31
 80082f4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008460 <__ieee754_rem_pio2f+0x250>
 80082f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fc:	eeb1 6a47 	vneg.f32	s12, s14
 8008300:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008304:	ee16 2a90 	vmov	r2, s13
 8008308:	dc1c      	bgt.n	8008344 <__ieee754_rem_pio2f+0x134>
 800830a:	495a      	ldr	r1, [pc, #360]	; (8008474 <__ieee754_rem_pio2f+0x264>)
 800830c:	1e47      	subs	r7, r0, #1
 800830e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8008312:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008316:	428b      	cmp	r3, r1
 8008318:	d014      	beq.n	8008344 <__ieee754_rem_pio2f+0x134>
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	ed94 7a00 	vldr	s14, [r4]
 8008320:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008324:	2e00      	cmp	r6, #0
 8008326:	ee30 0a67 	vsub.f32	s0, s0, s15
 800832a:	ed84 0a01 	vstr	s0, [r4, #4]
 800832e:	da9c      	bge.n	800826a <__ieee754_rem_pio2f+0x5a>
 8008330:	eeb1 7a47 	vneg.f32	s14, s14
 8008334:	eeb1 0a40 	vneg.f32	s0, s0
 8008338:	ed84 7a00 	vstr	s14, [r4]
 800833c:	ed84 0a01 	vstr	s0, [r4, #4]
 8008340:	4240      	negs	r0, r0
 8008342:	e792      	b.n	800826a <__ieee754_rem_pio2f+0x5a>
 8008344:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008348:	15eb      	asrs	r3, r5, #23
 800834a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800834e:	2d08      	cmp	r5, #8
 8008350:	dde3      	ble.n	800831a <__ieee754_rem_pio2f+0x10a>
 8008352:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008464 <__ieee754_rem_pio2f+0x254>
 8008356:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008468 <__ieee754_rem_pio2f+0x258>
 800835a:	eef0 6a40 	vmov.f32	s13, s0
 800835e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008362:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008366:	eea6 0a27 	vfma.f32	s0, s12, s15
 800836a:	eef0 7a40 	vmov.f32	s15, s0
 800836e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008372:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008376:	ee15 2a90 	vmov	r2, s11
 800837a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800837e:	1a5b      	subs	r3, r3, r1
 8008380:	2b19      	cmp	r3, #25
 8008382:	dc04      	bgt.n	800838e <__ieee754_rem_pio2f+0x17e>
 8008384:	edc4 5a00 	vstr	s11, [r4]
 8008388:	eeb0 0a66 	vmov.f32	s0, s13
 800838c:	e7c6      	b.n	800831c <__ieee754_rem_pio2f+0x10c>
 800838e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008478 <__ieee754_rem_pio2f+0x268>
 8008392:	eeb0 0a66 	vmov.f32	s0, s13
 8008396:	eea6 0a25 	vfma.f32	s0, s12, s11
 800839a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800839e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800847c <__ieee754_rem_pio2f+0x26c>
 80083a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80083a6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80083aa:	ee30 7a67 	vsub.f32	s14, s0, s15
 80083ae:	ed84 7a00 	vstr	s14, [r4]
 80083b2:	e7b3      	b.n	800831c <__ieee754_rem_pio2f+0x10c>
 80083b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80083b8:	db06      	blt.n	80083c8 <__ieee754_rem_pio2f+0x1b8>
 80083ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 80083be:	edc0 7a01 	vstr	s15, [r0, #4]
 80083c2:	edc0 7a00 	vstr	s15, [r0]
 80083c6:	e733      	b.n	8008230 <__ieee754_rem_pio2f+0x20>
 80083c8:	15ea      	asrs	r2, r5, #23
 80083ca:	3a86      	subs	r2, #134	; 0x86
 80083cc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80083d0:	ee07 3a90 	vmov	s15, r3
 80083d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008480 <__ieee754_rem_pio2f+0x270>
 80083dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083e4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80083e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80083fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008400:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	edcd 7a05 	vstr	s15, [sp, #20]
 800840c:	d11e      	bne.n	800844c <__ieee754_rem_pio2f+0x23c>
 800840e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	bf14      	ite	ne
 8008418:	2302      	movne	r3, #2
 800841a:	2301      	moveq	r3, #1
 800841c:	4919      	ldr	r1, [pc, #100]	; (8008484 <__ieee754_rem_pio2f+0x274>)
 800841e:	9101      	str	r1, [sp, #4]
 8008420:	2102      	movs	r1, #2
 8008422:	9100      	str	r1, [sp, #0]
 8008424:	a803      	add	r0, sp, #12
 8008426:	4621      	mov	r1, r4
 8008428:	f000 f88e 	bl	8008548 <__kernel_rem_pio2f>
 800842c:	2e00      	cmp	r6, #0
 800842e:	f6bf af1c 	bge.w	800826a <__ieee754_rem_pio2f+0x5a>
 8008432:	edd4 7a00 	vldr	s15, [r4]
 8008436:	eef1 7a67 	vneg.f32	s15, s15
 800843a:	edc4 7a00 	vstr	s15, [r4]
 800843e:	edd4 7a01 	vldr	s15, [r4, #4]
 8008442:	eef1 7a67 	vneg.f32	s15, s15
 8008446:	edc4 7a01 	vstr	s15, [r4, #4]
 800844a:	e779      	b.n	8008340 <__ieee754_rem_pio2f+0x130>
 800844c:	2303      	movs	r3, #3
 800844e:	e7e5      	b.n	800841c <__ieee754_rem_pio2f+0x20c>
 8008450:	3f490fd8 	.word	0x3f490fd8
 8008454:	4016cbe3 	.word	0x4016cbe3
 8008458:	3fc90f80 	.word	0x3fc90f80
 800845c:	3fc90fd0 	.word	0x3fc90fd0
 8008460:	37354443 	.word	0x37354443
 8008464:	37354400 	.word	0x37354400
 8008468:	2e85a308 	.word	0x2e85a308
 800846c:	43490f80 	.word	0x43490f80
 8008470:	3f22f984 	.word	0x3f22f984
 8008474:	08009098 	.word	0x08009098
 8008478:	2e85a300 	.word	0x2e85a300
 800847c:	248d3132 	.word	0x248d3132
 8008480:	43800000 	.word	0x43800000
 8008484:	08009118 	.word	0x08009118

08008488 <__kernel_cosf>:
 8008488:	ee10 3a10 	vmov	r3, s0
 800848c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008490:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008494:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008498:	da05      	bge.n	80084a6 <__kernel_cosf+0x1e>
 800849a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800849e:	ee17 2a90 	vmov	r2, s15
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d03d      	beq.n	8008522 <__kernel_cosf+0x9a>
 80084a6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80084aa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008528 <__kernel_cosf+0xa0>
 80084ae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800852c <__kernel_cosf+0xa4>
 80084b2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008530 <__kernel_cosf+0xa8>
 80084b6:	4a1f      	ldr	r2, [pc, #124]	; (8008534 <__kernel_cosf+0xac>)
 80084b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80084bc:	4293      	cmp	r3, r2
 80084be:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008538 <__kernel_cosf+0xb0>
 80084c2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80084c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800853c <__kernel_cosf+0xb4>
 80084ca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80084ce:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008540 <__kernel_cosf+0xb8>
 80084d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80084d6:	eeb0 7a66 	vmov.f32	s14, s13
 80084da:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80084de:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80084e2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80084e6:	ee67 6a25 	vmul.f32	s13, s14, s11
 80084ea:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80084ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80084f2:	dc04      	bgt.n	80084fe <__kernel_cosf+0x76>
 80084f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80084f8:	ee36 0a47 	vsub.f32	s0, s12, s14
 80084fc:	4770      	bx	lr
 80084fe:	4a11      	ldr	r2, [pc, #68]	; (8008544 <__kernel_cosf+0xbc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	bfda      	itte	le
 8008504:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008508:	ee06 3a90 	vmovle	s13, r3
 800850c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008510:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008514:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800851c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008520:	4770      	bx	lr
 8008522:	eeb0 0a46 	vmov.f32	s0, s12
 8008526:	4770      	bx	lr
 8008528:	ad47d74e 	.word	0xad47d74e
 800852c:	310f74f6 	.word	0x310f74f6
 8008530:	3d2aaaab 	.word	0x3d2aaaab
 8008534:	3e999999 	.word	0x3e999999
 8008538:	b493f27c 	.word	0xb493f27c
 800853c:	37d00d01 	.word	0x37d00d01
 8008540:	bab60b61 	.word	0xbab60b61
 8008544:	3f480000 	.word	0x3f480000

08008548 <__kernel_rem_pio2f>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	ed2d 8b04 	vpush	{d8-d9}
 8008550:	b0d9      	sub	sp, #356	; 0x164
 8008552:	4688      	mov	r8, r1
 8008554:	9002      	str	r0, [sp, #8]
 8008556:	49bb      	ldr	r1, [pc, #748]	; (8008844 <__kernel_rem_pio2f+0x2fc>)
 8008558:	9866      	ldr	r0, [sp, #408]	; 0x198
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008560:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008564:	1e59      	subs	r1, r3, #1
 8008566:	1d13      	adds	r3, r2, #4
 8008568:	db27      	blt.n	80085ba <__kernel_rem_pio2f+0x72>
 800856a:	f1b2 0b03 	subs.w	fp, r2, #3
 800856e:	bf48      	it	mi
 8008570:	f102 0b04 	addmi.w	fp, r2, #4
 8008574:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008578:	1c45      	adds	r5, r0, #1
 800857a:	00ec      	lsls	r4, r5, #3
 800857c:	1a47      	subs	r7, r0, r1
 800857e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008854 <__kernel_rem_pio2f+0x30c>
 8008582:	9403      	str	r4, [sp, #12]
 8008584:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008588:	eb0a 0c01 	add.w	ip, sl, r1
 800858c:	ae1c      	add	r6, sp, #112	; 0x70
 800858e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008592:	2400      	movs	r4, #0
 8008594:	4564      	cmp	r4, ip
 8008596:	dd12      	ble.n	80085be <__kernel_rem_pio2f+0x76>
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	ac1c      	add	r4, sp, #112	; 0x70
 800859c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80085a0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80085a4:	f04f 0c00 	mov.w	ip, #0
 80085a8:	45d4      	cmp	ip, sl
 80085aa:	dc27      	bgt.n	80085fc <__kernel_rem_pio2f+0xb4>
 80085ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80085b0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008854 <__kernel_rem_pio2f+0x30c>
 80085b4:	4627      	mov	r7, r4
 80085b6:	2600      	movs	r6, #0
 80085b8:	e016      	b.n	80085e8 <__kernel_rem_pio2f+0xa0>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e7dc      	b.n	8008578 <__kernel_rem_pio2f+0x30>
 80085be:	42e7      	cmn	r7, r4
 80085c0:	bf5d      	ittte	pl
 80085c2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80085c6:	ee07 3a90 	vmovpl	s15, r3
 80085ca:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80085ce:	eef0 7a47 	vmovmi.f32	s15, s14
 80085d2:	ece6 7a01 	vstmia	r6!, {s15}
 80085d6:	3401      	adds	r4, #1
 80085d8:	e7dc      	b.n	8008594 <__kernel_rem_pio2f+0x4c>
 80085da:	ecf9 6a01 	vldmia	r9!, {s13}
 80085de:	ed97 7a00 	vldr	s14, [r7]
 80085e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085e6:	3601      	adds	r6, #1
 80085e8:	428e      	cmp	r6, r1
 80085ea:	f1a7 0704 	sub.w	r7, r7, #4
 80085ee:	ddf4      	ble.n	80085da <__kernel_rem_pio2f+0x92>
 80085f0:	eceb 7a01 	vstmia	fp!, {s15}
 80085f4:	f10c 0c01 	add.w	ip, ip, #1
 80085f8:	3404      	adds	r4, #4
 80085fa:	e7d5      	b.n	80085a8 <__kernel_rem_pio2f+0x60>
 80085fc:	ab08      	add	r3, sp, #32
 80085fe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008602:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008850 <__kernel_rem_pio2f+0x308>
 8008606:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800884c <__kernel_rem_pio2f+0x304>
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008610:	4656      	mov	r6, sl
 8008612:	00b3      	lsls	r3, r6, #2
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	ab58      	add	r3, sp, #352	; 0x160
 8008618:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800861c:	ac08      	add	r4, sp, #32
 800861e:	ab44      	add	r3, sp, #272	; 0x110
 8008620:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008624:	46a4      	mov	ip, r4
 8008626:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800862a:	4637      	mov	r7, r6
 800862c:	2f00      	cmp	r7, #0
 800862e:	f1a0 0004 	sub.w	r0, r0, #4
 8008632:	dc4f      	bgt.n	80086d4 <__kernel_rem_pio2f+0x18c>
 8008634:	4628      	mov	r0, r5
 8008636:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800863a:	f000 fc43 	bl	8008ec4 <scalbnf>
 800863e:	eeb0 8a40 	vmov.f32	s16, s0
 8008642:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008646:	ee28 0a00 	vmul.f32	s0, s16, s0
 800864a:	f000 fbf9 	bl	8008e40 <floorf>
 800864e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008652:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008656:	2d00      	cmp	r5, #0
 8008658:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800865c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008660:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008664:	ee17 9a90 	vmov	r9, s15
 8008668:	ee38 8a40 	vsub.f32	s16, s16, s0
 800866c:	dd44      	ble.n	80086f8 <__kernel_rem_pio2f+0x1b0>
 800866e:	f106 3cff 	add.w	ip, r6, #4294967295
 8008672:	ab08      	add	r3, sp, #32
 8008674:	f1c5 0e08 	rsb	lr, r5, #8
 8008678:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800867c:	fa47 f00e 	asr.w	r0, r7, lr
 8008680:	4481      	add	r9, r0
 8008682:	fa00 f00e 	lsl.w	r0, r0, lr
 8008686:	1a3f      	subs	r7, r7, r0
 8008688:	f1c5 0007 	rsb	r0, r5, #7
 800868c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008690:	4107      	asrs	r7, r0
 8008692:	2f00      	cmp	r7, #0
 8008694:	dd3f      	ble.n	8008716 <__kernel_rem_pio2f+0x1ce>
 8008696:	f04f 0e00 	mov.w	lr, #0
 800869a:	f109 0901 	add.w	r9, r9, #1
 800869e:	4673      	mov	r3, lr
 80086a0:	4576      	cmp	r6, lr
 80086a2:	dc6b      	bgt.n	800877c <__kernel_rem_pio2f+0x234>
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	dd04      	ble.n	80086b2 <__kernel_rem_pio2f+0x16a>
 80086a8:	2d01      	cmp	r5, #1
 80086aa:	d078      	beq.n	800879e <__kernel_rem_pio2f+0x256>
 80086ac:	2d02      	cmp	r5, #2
 80086ae:	f000 8081 	beq.w	80087b4 <__kernel_rem_pio2f+0x26c>
 80086b2:	2f02      	cmp	r7, #2
 80086b4:	d12f      	bne.n	8008716 <__kernel_rem_pio2f+0x1ce>
 80086b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80086ba:	ee30 8a48 	vsub.f32	s16, s0, s16
 80086be:	b353      	cbz	r3, 8008716 <__kernel_rem_pio2f+0x1ce>
 80086c0:	4628      	mov	r0, r5
 80086c2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80086c6:	f000 fbfd 	bl	8008ec4 <scalbnf>
 80086ca:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80086ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 80086d2:	e020      	b.n	8008716 <__kernel_rem_pio2f+0x1ce>
 80086d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80086d8:	3f01      	subs	r7, #1
 80086da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80086e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80086ea:	ecac 0a01 	vstmia	ip!, {s0}
 80086ee:	ed90 0a00 	vldr	s0, [r0]
 80086f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80086f6:	e799      	b.n	800862c <__kernel_rem_pio2f+0xe4>
 80086f8:	d105      	bne.n	8008706 <__kernel_rem_pio2f+0x1be>
 80086fa:	1e70      	subs	r0, r6, #1
 80086fc:	ab08      	add	r3, sp, #32
 80086fe:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008702:	11ff      	asrs	r7, r7, #7
 8008704:	e7c5      	b.n	8008692 <__kernel_rem_pio2f+0x14a>
 8008706:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800870a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800870e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008712:	da31      	bge.n	8008778 <__kernel_rem_pio2f+0x230>
 8008714:	2700      	movs	r7, #0
 8008716:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800871a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871e:	f040 809b 	bne.w	8008858 <__kernel_rem_pio2f+0x310>
 8008722:	1e74      	subs	r4, r6, #1
 8008724:	46a4      	mov	ip, r4
 8008726:	2000      	movs	r0, #0
 8008728:	45d4      	cmp	ip, sl
 800872a:	da4a      	bge.n	80087c2 <__kernel_rem_pio2f+0x27a>
 800872c:	2800      	cmp	r0, #0
 800872e:	d07a      	beq.n	8008826 <__kernel_rem_pio2f+0x2de>
 8008730:	ab08      	add	r3, sp, #32
 8008732:	3d08      	subs	r5, #8
 8008734:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8081 	beq.w	8008840 <__kernel_rem_pio2f+0x2f8>
 800873e:	4628      	mov	r0, r5
 8008740:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008744:	00a5      	lsls	r5, r4, #2
 8008746:	f000 fbbd 	bl	8008ec4 <scalbnf>
 800874a:	aa44      	add	r2, sp, #272	; 0x110
 800874c:	1d2b      	adds	r3, r5, #4
 800874e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008850 <__kernel_rem_pio2f+0x308>
 8008752:	18d1      	adds	r1, r2, r3
 8008754:	4622      	mov	r2, r4
 8008756:	2a00      	cmp	r2, #0
 8008758:	f280 80ae 	bge.w	80088b8 <__kernel_rem_pio2f+0x370>
 800875c:	4622      	mov	r2, r4
 800875e:	2a00      	cmp	r2, #0
 8008760:	f2c0 80cc 	blt.w	80088fc <__kernel_rem_pio2f+0x3b4>
 8008764:	a944      	add	r1, sp, #272	; 0x110
 8008766:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800876a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008848 <__kernel_rem_pio2f+0x300>
 800876e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008854 <__kernel_rem_pio2f+0x30c>
 8008772:	2000      	movs	r0, #0
 8008774:	1aa1      	subs	r1, r4, r2
 8008776:	e0b6      	b.n	80088e6 <__kernel_rem_pio2f+0x39e>
 8008778:	2702      	movs	r7, #2
 800877a:	e78c      	b.n	8008696 <__kernel_rem_pio2f+0x14e>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	b94b      	cbnz	r3, 8008794 <__kernel_rem_pio2f+0x24c>
 8008780:	b118      	cbz	r0, 800878a <__kernel_rem_pio2f+0x242>
 8008782:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008786:	6020      	str	r0, [r4, #0]
 8008788:	2001      	movs	r0, #1
 800878a:	f10e 0e01 	add.w	lr, lr, #1
 800878e:	3404      	adds	r4, #4
 8008790:	4603      	mov	r3, r0
 8008792:	e785      	b.n	80086a0 <__kernel_rem_pio2f+0x158>
 8008794:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008798:	6020      	str	r0, [r4, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	e7f5      	b.n	800878a <__kernel_rem_pio2f+0x242>
 800879e:	1e74      	subs	r4, r6, #1
 80087a0:	a808      	add	r0, sp, #32
 80087a2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80087a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80087aa:	f10d 0c20 	add.w	ip, sp, #32
 80087ae:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80087b2:	e77e      	b.n	80086b2 <__kernel_rem_pio2f+0x16a>
 80087b4:	1e74      	subs	r4, r6, #1
 80087b6:	a808      	add	r0, sp, #32
 80087b8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80087bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80087c0:	e7f3      	b.n	80087aa <__kernel_rem_pio2f+0x262>
 80087c2:	ab08      	add	r3, sp, #32
 80087c4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80087c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80087cc:	4318      	orrs	r0, r3
 80087ce:	e7ab      	b.n	8008728 <__kernel_rem_pio2f+0x1e0>
 80087d0:	f10c 0c01 	add.w	ip, ip, #1
 80087d4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80087d8:	2c00      	cmp	r4, #0
 80087da:	d0f9      	beq.n	80087d0 <__kernel_rem_pio2f+0x288>
 80087dc:	9b05      	ldr	r3, [sp, #20]
 80087de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80087e2:	eb0d 0003 	add.w	r0, sp, r3
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	18f4      	adds	r4, r6, r3
 80087ea:	ab1c      	add	r3, sp, #112	; 0x70
 80087ec:	1c77      	adds	r7, r6, #1
 80087ee:	384c      	subs	r0, #76	; 0x4c
 80087f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087f4:	4466      	add	r6, ip
 80087f6:	42be      	cmp	r6, r7
 80087f8:	f6ff af0b 	blt.w	8008612 <__kernel_rem_pio2f+0xca>
 80087fc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008800:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800880c:	f04f 0c00 	mov.w	ip, #0
 8008810:	ece4 7a01 	vstmia	r4!, {s15}
 8008814:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008854 <__kernel_rem_pio2f+0x30c>
 8008818:	46a1      	mov	r9, r4
 800881a:	458c      	cmp	ip, r1
 800881c:	dd07      	ble.n	800882e <__kernel_rem_pio2f+0x2e6>
 800881e:	ece0 7a01 	vstmia	r0!, {s15}
 8008822:	3701      	adds	r7, #1
 8008824:	e7e7      	b.n	80087f6 <__kernel_rem_pio2f+0x2ae>
 8008826:	9804      	ldr	r0, [sp, #16]
 8008828:	f04f 0c01 	mov.w	ip, #1
 800882c:	e7d2      	b.n	80087d4 <__kernel_rem_pio2f+0x28c>
 800882e:	ecfe 6a01 	vldmia	lr!, {s13}
 8008832:	ed39 7a01 	vldmdb	r9!, {s14}
 8008836:	f10c 0c01 	add.w	ip, ip, #1
 800883a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800883e:	e7ec      	b.n	800881a <__kernel_rem_pio2f+0x2d2>
 8008840:	3c01      	subs	r4, #1
 8008842:	e775      	b.n	8008730 <__kernel_rem_pio2f+0x1e8>
 8008844:	0800945c 	.word	0x0800945c
 8008848:	08009430 	.word	0x08009430
 800884c:	43800000 	.word	0x43800000
 8008850:	3b800000 	.word	0x3b800000
 8008854:	00000000 	.word	0x00000000
 8008858:	9b03      	ldr	r3, [sp, #12]
 800885a:	eeb0 0a48 	vmov.f32	s0, s16
 800885e:	1a98      	subs	r0, r3, r2
 8008860:	f000 fb30 	bl	8008ec4 <scalbnf>
 8008864:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800884c <__kernel_rem_pio2f+0x304>
 8008868:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800886c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008870:	db19      	blt.n	80088a6 <__kernel_rem_pio2f+0x35e>
 8008872:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008850 <__kernel_rem_pio2f+0x308>
 8008876:	ee60 7a27 	vmul.f32	s15, s0, s15
 800887a:	aa08      	add	r2, sp, #32
 800887c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008880:	1c74      	adds	r4, r6, #1
 8008882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008886:	3508      	adds	r5, #8
 8008888:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800888c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008890:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008894:	ee10 3a10 	vmov	r3, s0
 8008898:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800889c:	ee17 3a90 	vmov	r3, s15
 80088a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80088a4:	e74b      	b.n	800873e <__kernel_rem_pio2f+0x1f6>
 80088a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80088aa:	aa08      	add	r2, sp, #32
 80088ac:	ee10 3a10 	vmov	r3, s0
 80088b0:	4634      	mov	r4, r6
 80088b2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80088b6:	e742      	b.n	800873e <__kernel_rem_pio2f+0x1f6>
 80088b8:	a808      	add	r0, sp, #32
 80088ba:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80088be:	9001      	str	r0, [sp, #4]
 80088c0:	ee07 0a90 	vmov	s15, r0
 80088c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088c8:	3a01      	subs	r2, #1
 80088ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80088ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80088d2:	ed61 7a01 	vstmdb	r1!, {s15}
 80088d6:	e73e      	b.n	8008756 <__kernel_rem_pio2f+0x20e>
 80088d8:	ecfc 6a01 	vldmia	ip!, {s13}
 80088dc:	ecb6 7a01 	vldmia	r6!, {s14}
 80088e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088e4:	3001      	adds	r0, #1
 80088e6:	4550      	cmp	r0, sl
 80088e8:	dc01      	bgt.n	80088ee <__kernel_rem_pio2f+0x3a6>
 80088ea:	4288      	cmp	r0, r1
 80088ec:	ddf4      	ble.n	80088d8 <__kernel_rem_pio2f+0x390>
 80088ee:	a858      	add	r0, sp, #352	; 0x160
 80088f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088f4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80088f8:	3a01      	subs	r2, #1
 80088fa:	e730      	b.n	800875e <__kernel_rem_pio2f+0x216>
 80088fc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80088fe:	2a02      	cmp	r2, #2
 8008900:	dc09      	bgt.n	8008916 <__kernel_rem_pio2f+0x3ce>
 8008902:	2a00      	cmp	r2, #0
 8008904:	dc2a      	bgt.n	800895c <__kernel_rem_pio2f+0x414>
 8008906:	d043      	beq.n	8008990 <__kernel_rem_pio2f+0x448>
 8008908:	f009 0007 	and.w	r0, r9, #7
 800890c:	b059      	add	sp, #356	; 0x164
 800890e:	ecbd 8b04 	vpop	{d8-d9}
 8008912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008916:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008918:	2b03      	cmp	r3, #3
 800891a:	d1f5      	bne.n	8008908 <__kernel_rem_pio2f+0x3c0>
 800891c:	ab30      	add	r3, sp, #192	; 0xc0
 800891e:	442b      	add	r3, r5
 8008920:	461a      	mov	r2, r3
 8008922:	4619      	mov	r1, r3
 8008924:	4620      	mov	r0, r4
 8008926:	2800      	cmp	r0, #0
 8008928:	f1a1 0104 	sub.w	r1, r1, #4
 800892c:	dc51      	bgt.n	80089d2 <__kernel_rem_pio2f+0x48a>
 800892e:	4621      	mov	r1, r4
 8008930:	2901      	cmp	r1, #1
 8008932:	f1a2 0204 	sub.w	r2, r2, #4
 8008936:	dc5c      	bgt.n	80089f2 <__kernel_rem_pio2f+0x4aa>
 8008938:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008854 <__kernel_rem_pio2f+0x30c>
 800893c:	3304      	adds	r3, #4
 800893e:	2c01      	cmp	r4, #1
 8008940:	dc67      	bgt.n	8008a12 <__kernel_rem_pio2f+0x4ca>
 8008942:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008946:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800894a:	2f00      	cmp	r7, #0
 800894c:	d167      	bne.n	8008a1e <__kernel_rem_pio2f+0x4d6>
 800894e:	edc8 6a00 	vstr	s13, [r8]
 8008952:	ed88 7a01 	vstr	s14, [r8, #4]
 8008956:	edc8 7a02 	vstr	s15, [r8, #8]
 800895a:	e7d5      	b.n	8008908 <__kernel_rem_pio2f+0x3c0>
 800895c:	aa30      	add	r2, sp, #192	; 0xc0
 800895e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008854 <__kernel_rem_pio2f+0x30c>
 8008962:	4413      	add	r3, r2
 8008964:	4622      	mov	r2, r4
 8008966:	2a00      	cmp	r2, #0
 8008968:	da24      	bge.n	80089b4 <__kernel_rem_pio2f+0x46c>
 800896a:	b34f      	cbz	r7, 80089c0 <__kernel_rem_pio2f+0x478>
 800896c:	eef1 7a47 	vneg.f32	s15, s14
 8008970:	edc8 7a00 	vstr	s15, [r8]
 8008974:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800897c:	aa31      	add	r2, sp, #196	; 0xc4
 800897e:	2301      	movs	r3, #1
 8008980:	429c      	cmp	r4, r3
 8008982:	da20      	bge.n	80089c6 <__kernel_rem_pio2f+0x47e>
 8008984:	b10f      	cbz	r7, 800898a <__kernel_rem_pio2f+0x442>
 8008986:	eef1 7a67 	vneg.f32	s15, s15
 800898a:	edc8 7a01 	vstr	s15, [r8, #4]
 800898e:	e7bb      	b.n	8008908 <__kernel_rem_pio2f+0x3c0>
 8008990:	aa30      	add	r2, sp, #192	; 0xc0
 8008992:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008854 <__kernel_rem_pio2f+0x30c>
 8008996:	4413      	add	r3, r2
 8008998:	2c00      	cmp	r4, #0
 800899a:	da05      	bge.n	80089a8 <__kernel_rem_pio2f+0x460>
 800899c:	b10f      	cbz	r7, 80089a2 <__kernel_rem_pio2f+0x45a>
 800899e:	eef1 7a67 	vneg.f32	s15, s15
 80089a2:	edc8 7a00 	vstr	s15, [r8]
 80089a6:	e7af      	b.n	8008908 <__kernel_rem_pio2f+0x3c0>
 80089a8:	ed33 7a01 	vldmdb	r3!, {s14}
 80089ac:	3c01      	subs	r4, #1
 80089ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089b2:	e7f1      	b.n	8008998 <__kernel_rem_pio2f+0x450>
 80089b4:	ed73 7a01 	vldmdb	r3!, {s15}
 80089b8:	3a01      	subs	r2, #1
 80089ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089be:	e7d2      	b.n	8008966 <__kernel_rem_pio2f+0x41e>
 80089c0:	eef0 7a47 	vmov.f32	s15, s14
 80089c4:	e7d4      	b.n	8008970 <__kernel_rem_pio2f+0x428>
 80089c6:	ecb2 7a01 	vldmia	r2!, {s14}
 80089ca:	3301      	adds	r3, #1
 80089cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089d0:	e7d6      	b.n	8008980 <__kernel_rem_pio2f+0x438>
 80089d2:	edd1 7a00 	vldr	s15, [r1]
 80089d6:	edd1 6a01 	vldr	s13, [r1, #4]
 80089da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089de:	3801      	subs	r0, #1
 80089e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089e4:	ed81 7a00 	vstr	s14, [r1]
 80089e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ec:	edc1 7a01 	vstr	s15, [r1, #4]
 80089f0:	e799      	b.n	8008926 <__kernel_rem_pio2f+0x3de>
 80089f2:	edd2 7a00 	vldr	s15, [r2]
 80089f6:	edd2 6a01 	vldr	s13, [r2, #4]
 80089fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089fe:	3901      	subs	r1, #1
 8008a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a04:	ed82 7a00 	vstr	s14, [r2]
 8008a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0c:	edc2 7a01 	vstr	s15, [r2, #4]
 8008a10:	e78e      	b.n	8008930 <__kernel_rem_pio2f+0x3e8>
 8008a12:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a16:	3c01      	subs	r4, #1
 8008a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a1c:	e78f      	b.n	800893e <__kernel_rem_pio2f+0x3f6>
 8008a1e:	eef1 6a66 	vneg.f32	s13, s13
 8008a22:	eeb1 7a47 	vneg.f32	s14, s14
 8008a26:	edc8 6a00 	vstr	s13, [r8]
 8008a2a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008a2e:	eef1 7a67 	vneg.f32	s15, s15
 8008a32:	e790      	b.n	8008956 <__kernel_rem_pio2f+0x40e>

08008a34 <__kernel_sinf>:
 8008a34:	ee10 3a10 	vmov	r3, s0
 8008a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008a40:	da04      	bge.n	8008a4c <__kernel_sinf+0x18>
 8008a42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a46:	ee17 3a90 	vmov	r3, s15
 8008a4a:	b35b      	cbz	r3, 8008aa4 <__kernel_sinf+0x70>
 8008a4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008a50:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008aa8 <__kernel_sinf+0x74>
 8008a54:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008aac <__kernel_sinf+0x78>
 8008a58:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008ab0 <__kernel_sinf+0x7c>
 8008a60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a64:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008ab4 <__kernel_sinf+0x80>
 8008a68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008a6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008ab8 <__kernel_sinf+0x84>
 8008a70:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008a74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a78:	b930      	cbnz	r0, 8008a88 <__kernel_sinf+0x54>
 8008a7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008abc <__kernel_sinf+0x88>
 8008a7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a82:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008a86:	4770      	bx	lr
 8008a88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008a8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008a90:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008a94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008a98:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008ac0 <__kernel_sinf+0x8c>
 8008a9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008aa0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	2f2ec9d3 	.word	0x2f2ec9d3
 8008aac:	b2d72f34 	.word	0xb2d72f34
 8008ab0:	3638ef1b 	.word	0x3638ef1b
 8008ab4:	b9500d01 	.word	0xb9500d01
 8008ab8:	3c088889 	.word	0x3c088889
 8008abc:	be2aaaab 	.word	0xbe2aaaab
 8008ac0:	3e2aaaab 	.word	0x3e2aaaab
 8008ac4:	00000000 	.word	0x00000000

08008ac8 <atan>:
 8008ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	ec55 4b10 	vmov	r4, r5, d0
 8008ad0:	4bc3      	ldr	r3, [pc, #780]	; (8008de0 <atan+0x318>)
 8008ad2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ad6:	429e      	cmp	r6, r3
 8008ad8:	46ab      	mov	fp, r5
 8008ada:	dd18      	ble.n	8008b0e <atan+0x46>
 8008adc:	4bc1      	ldr	r3, [pc, #772]	; (8008de4 <atan+0x31c>)
 8008ade:	429e      	cmp	r6, r3
 8008ae0:	dc01      	bgt.n	8008ae6 <atan+0x1e>
 8008ae2:	d109      	bne.n	8008af8 <atan+0x30>
 8008ae4:	b144      	cbz	r4, 8008af8 <atan+0x30>
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	462b      	mov	r3, r5
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f7 fb91 	bl	8000214 <__adddf3>
 8008af2:	4604      	mov	r4, r0
 8008af4:	460d      	mov	r5, r1
 8008af6:	e006      	b.n	8008b06 <atan+0x3e>
 8008af8:	f1bb 0f00 	cmp.w	fp, #0
 8008afc:	f300 8131 	bgt.w	8008d62 <atan+0x29a>
 8008b00:	a59b      	add	r5, pc, #620	; (adr r5, 8008d70 <atan+0x2a8>)
 8008b02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b06:	ec45 4b10 	vmov	d0, r4, r5
 8008b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	4bb6      	ldr	r3, [pc, #728]	; (8008de8 <atan+0x320>)
 8008b10:	429e      	cmp	r6, r3
 8008b12:	dc14      	bgt.n	8008b3e <atan+0x76>
 8008b14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008b18:	429e      	cmp	r6, r3
 8008b1a:	dc0d      	bgt.n	8008b38 <atan+0x70>
 8008b1c:	a396      	add	r3, pc, #600	; (adr r3, 8008d78 <atan+0x2b0>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	ee10 0a10 	vmov	r0, s0
 8008b26:	4629      	mov	r1, r5
 8008b28:	f7f7 fb74 	bl	8000214 <__adddf3>
 8008b2c:	4baf      	ldr	r3, [pc, #700]	; (8008dec <atan+0x324>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f7f7 ffb6 	bl	8000aa0 <__aeabi_dcmpgt>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d1e6      	bne.n	8008b06 <atan+0x3e>
 8008b38:	f04f 3aff 	mov.w	sl, #4294967295
 8008b3c:	e02b      	b.n	8008b96 <atan+0xce>
 8008b3e:	f000 f963 	bl	8008e08 <fabs>
 8008b42:	4bab      	ldr	r3, [pc, #684]	; (8008df0 <atan+0x328>)
 8008b44:	429e      	cmp	r6, r3
 8008b46:	ec55 4b10 	vmov	r4, r5, d0
 8008b4a:	f300 80bf 	bgt.w	8008ccc <atan+0x204>
 8008b4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008b52:	429e      	cmp	r6, r3
 8008b54:	f300 80a0 	bgt.w	8008c98 <atan+0x1d0>
 8008b58:	ee10 2a10 	vmov	r2, s0
 8008b5c:	ee10 0a10 	vmov	r0, s0
 8008b60:	462b      	mov	r3, r5
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7f7 fb56 	bl	8000214 <__adddf3>
 8008b68:	4ba0      	ldr	r3, [pc, #640]	; (8008dec <atan+0x324>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f7f7 fb50 	bl	8000210 <__aeabi_dsub>
 8008b70:	2200      	movs	r2, #0
 8008b72:	4606      	mov	r6, r0
 8008b74:	460f      	mov	r7, r1
 8008b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7f7 fb49 	bl	8000214 <__adddf3>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 fe23 	bl	80007d4 <__aeabi_ddiv>
 8008b8e:	f04f 0a00 	mov.w	sl, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	4622      	mov	r2, r4
 8008b98:	462b      	mov	r3, r5
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f7 fcef 	bl	8000580 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4689      	mov	r9, r1
 8008baa:	f7f7 fce9 	bl	8000580 <__aeabi_dmul>
 8008bae:	a374      	add	r3, pc, #464	; (adr r3, 8008d80 <atan+0x2b8>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	f7f7 fce2 	bl	8000580 <__aeabi_dmul>
 8008bbc:	a372      	add	r3, pc, #456	; (adr r3, 8008d88 <atan+0x2c0>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb27 	bl	8000214 <__adddf3>
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f7f7 fcd9 	bl	8000580 <__aeabi_dmul>
 8008bce:	a370      	add	r3, pc, #448	; (adr r3, 8008d90 <atan+0x2c8>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fb1e 	bl	8000214 <__adddf3>
 8008bd8:	4632      	mov	r2, r6
 8008bda:	463b      	mov	r3, r7
 8008bdc:	f7f7 fcd0 	bl	8000580 <__aeabi_dmul>
 8008be0:	a36d      	add	r3, pc, #436	; (adr r3, 8008d98 <atan+0x2d0>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f7 fb15 	bl	8000214 <__adddf3>
 8008bea:	4632      	mov	r2, r6
 8008bec:	463b      	mov	r3, r7
 8008bee:	f7f7 fcc7 	bl	8000580 <__aeabi_dmul>
 8008bf2:	a36b      	add	r3, pc, #428	; (adr r3, 8008da0 <atan+0x2d8>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f7f7 fb0c 	bl	8000214 <__adddf3>
 8008bfc:	4632      	mov	r2, r6
 8008bfe:	463b      	mov	r3, r7
 8008c00:	f7f7 fcbe 	bl	8000580 <__aeabi_dmul>
 8008c04:	a368      	add	r3, pc, #416	; (adr r3, 8008da8 <atan+0x2e0>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f7f7 fb03 	bl	8000214 <__adddf3>
 8008c0e:	4642      	mov	r2, r8
 8008c10:	464b      	mov	r3, r9
 8008c12:	f7f7 fcb5 	bl	8000580 <__aeabi_dmul>
 8008c16:	a366      	add	r3, pc, #408	; (adr r3, 8008db0 <atan+0x2e8>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	4689      	mov	r9, r1
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 fcac 	bl	8000580 <__aeabi_dmul>
 8008c28:	a363      	add	r3, pc, #396	; (adr r3, 8008db8 <atan+0x2f0>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f7f7 faef 	bl	8000210 <__aeabi_dsub>
 8008c32:	4632      	mov	r2, r6
 8008c34:	463b      	mov	r3, r7
 8008c36:	f7f7 fca3 	bl	8000580 <__aeabi_dmul>
 8008c3a:	a361      	add	r3, pc, #388	; (adr r3, 8008dc0 <atan+0x2f8>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fae6 	bl	8000210 <__aeabi_dsub>
 8008c44:	4632      	mov	r2, r6
 8008c46:	463b      	mov	r3, r7
 8008c48:	f7f7 fc9a 	bl	8000580 <__aeabi_dmul>
 8008c4c:	a35e      	add	r3, pc, #376	; (adr r3, 8008dc8 <atan+0x300>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f7f7 fadd 	bl	8000210 <__aeabi_dsub>
 8008c56:	4632      	mov	r2, r6
 8008c58:	463b      	mov	r3, r7
 8008c5a:	f7f7 fc91 	bl	8000580 <__aeabi_dmul>
 8008c5e:	a35c      	add	r3, pc, #368	; (adr r3, 8008dd0 <atan+0x308>)
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f7f7 fad4 	bl	8000210 <__aeabi_dsub>
 8008c68:	4632      	mov	r2, r6
 8008c6a:	463b      	mov	r3, r7
 8008c6c:	f7f7 fc88 	bl	8000580 <__aeabi_dmul>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 facc 	bl	8000214 <__adddf3>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	462b      	mov	r3, r5
 8008c80:	f7f7 fc7e 	bl	8000580 <__aeabi_dmul>
 8008c84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	d14b      	bne.n	8008d26 <atan+0x25e>
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f7 fabd 	bl	8000210 <__aeabi_dsub>
 8008c96:	e72c      	b.n	8008af2 <atan+0x2a>
 8008c98:	ee10 0a10 	vmov	r0, s0
 8008c9c:	4b53      	ldr	r3, [pc, #332]	; (8008dec <atan+0x324>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 fab5 	bl	8000210 <__aeabi_dsub>
 8008ca6:	4b51      	ldr	r3, [pc, #324]	; (8008dec <atan+0x324>)
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	2200      	movs	r2, #0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 faaf 	bl	8000214 <__adddf3>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4630      	mov	r0, r6
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	f7f7 fd89 	bl	80007d4 <__aeabi_ddiv>
 8008cc2:	f04f 0a01 	mov.w	sl, #1
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	e764      	b.n	8008b96 <atan+0xce>
 8008ccc:	4b49      	ldr	r3, [pc, #292]	; (8008df4 <atan+0x32c>)
 8008cce:	429e      	cmp	r6, r3
 8008cd0:	da1d      	bge.n	8008d0e <atan+0x246>
 8008cd2:	ee10 0a10 	vmov	r0, s0
 8008cd6:	4b48      	ldr	r3, [pc, #288]	; (8008df8 <atan+0x330>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4629      	mov	r1, r5
 8008cdc:	f7f7 fa98 	bl	8000210 <__aeabi_dsub>
 8008ce0:	4b45      	ldr	r3, [pc, #276]	; (8008df8 <atan+0x330>)
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460f      	mov	r7, r1
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4629      	mov	r1, r5
 8008cec:	f7f7 fc48 	bl	8000580 <__aeabi_dmul>
 8008cf0:	4b3e      	ldr	r3, [pc, #248]	; (8008dec <atan+0x324>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 fa8e 	bl	8000214 <__adddf3>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	4639      	mov	r1, r7
 8008d00:	f7f7 fd68 	bl	80007d4 <__aeabi_ddiv>
 8008d04:	f04f 0a02 	mov.w	sl, #2
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	e743      	b.n	8008b96 <atan+0xce>
 8008d0e:	462b      	mov	r3, r5
 8008d10:	ee10 2a10 	vmov	r2, s0
 8008d14:	4939      	ldr	r1, [pc, #228]	; (8008dfc <atan+0x334>)
 8008d16:	2000      	movs	r0, #0
 8008d18:	f7f7 fd5c 	bl	80007d4 <__aeabi_ddiv>
 8008d1c:	f04f 0a03 	mov.w	sl, #3
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	e737      	b.n	8008b96 <atan+0xce>
 8008d26:	4b36      	ldr	r3, [pc, #216]	; (8008e00 <atan+0x338>)
 8008d28:	4e36      	ldr	r6, [pc, #216]	; (8008e04 <atan+0x33c>)
 8008d2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008d2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008d32:	e9da 2300 	ldrd	r2, r3, [sl]
 8008d36:	f7f7 fa6b 	bl	8000210 <__aeabi_dsub>
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	f7f7 fa67 	bl	8000210 <__aeabi_dsub>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008d4a:	f7f7 fa61 	bl	8000210 <__aeabi_dsub>
 8008d4e:	f1bb 0f00 	cmp.w	fp, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	460d      	mov	r5, r1
 8008d56:	f6bf aed6 	bge.w	8008b06 <atan+0x3e>
 8008d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d5e:	461d      	mov	r5, r3
 8008d60:	e6d1      	b.n	8008b06 <atan+0x3e>
 8008d62:	a51d      	add	r5, pc, #116	; (adr r5, 8008dd8 <atan+0x310>)
 8008d64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d68:	e6cd      	b.n	8008b06 <atan+0x3e>
 8008d6a:	bf00      	nop
 8008d6c:	f3af 8000 	nop.w
 8008d70:	54442d18 	.word	0x54442d18
 8008d74:	bff921fb 	.word	0xbff921fb
 8008d78:	8800759c 	.word	0x8800759c
 8008d7c:	7e37e43c 	.word	0x7e37e43c
 8008d80:	e322da11 	.word	0xe322da11
 8008d84:	3f90ad3a 	.word	0x3f90ad3a
 8008d88:	24760deb 	.word	0x24760deb
 8008d8c:	3fa97b4b 	.word	0x3fa97b4b
 8008d90:	a0d03d51 	.word	0xa0d03d51
 8008d94:	3fb10d66 	.word	0x3fb10d66
 8008d98:	c54c206e 	.word	0xc54c206e
 8008d9c:	3fb745cd 	.word	0x3fb745cd
 8008da0:	920083ff 	.word	0x920083ff
 8008da4:	3fc24924 	.word	0x3fc24924
 8008da8:	5555550d 	.word	0x5555550d
 8008dac:	3fd55555 	.word	0x3fd55555
 8008db0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008db4:	bfa2b444 	.word	0xbfa2b444
 8008db8:	52defd9a 	.word	0x52defd9a
 8008dbc:	3fadde2d 	.word	0x3fadde2d
 8008dc0:	af749a6d 	.word	0xaf749a6d
 8008dc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8008dc8:	fe231671 	.word	0xfe231671
 8008dcc:	3fbc71c6 	.word	0x3fbc71c6
 8008dd0:	9998ebc4 	.word	0x9998ebc4
 8008dd4:	3fc99999 	.word	0x3fc99999
 8008dd8:	54442d18 	.word	0x54442d18
 8008ddc:	3ff921fb 	.word	0x3ff921fb
 8008de0:	440fffff 	.word	0x440fffff
 8008de4:	7ff00000 	.word	0x7ff00000
 8008de8:	3fdbffff 	.word	0x3fdbffff
 8008dec:	3ff00000 	.word	0x3ff00000
 8008df0:	3ff2ffff 	.word	0x3ff2ffff
 8008df4:	40038000 	.word	0x40038000
 8008df8:	3ff80000 	.word	0x3ff80000
 8008dfc:	bff00000 	.word	0xbff00000
 8008e00:	08009488 	.word	0x08009488
 8008e04:	08009468 	.word	0x08009468

08008e08 <fabs>:
 8008e08:	ec51 0b10 	vmov	r0, r1, d0
 8008e0c:	ee10 2a10 	vmov	r2, s0
 8008e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e14:	ec43 2b10 	vmov	d0, r2, r3
 8008e18:	4770      	bx	lr
 8008e1a:	0000      	movs	r0, r0
 8008e1c:	0000      	movs	r0, r0
	...

08008e20 <nan>:
 8008e20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e28 <nan+0x8>
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	00000000 	.word	0x00000000
 8008e2c:	7ff80000 	.word	0x7ff80000

08008e30 <fabsf>:
 8008e30:	ee10 3a10 	vmov	r3, s0
 8008e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e38:	ee00 3a10 	vmov	s0, r3
 8008e3c:	4770      	bx	lr
	...

08008e40 <floorf>:
 8008e40:	ee10 3a10 	vmov	r3, s0
 8008e44:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008e48:	3a7f      	subs	r2, #127	; 0x7f
 8008e4a:	2a16      	cmp	r2, #22
 8008e4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008e50:	dc2a      	bgt.n	8008ea8 <floorf+0x68>
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	da11      	bge.n	8008e7a <floorf+0x3a>
 8008e56:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008eb8 <floorf+0x78>
 8008e5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e66:	dd05      	ble.n	8008e74 <floorf+0x34>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da23      	bge.n	8008eb4 <floorf+0x74>
 8008e6c:	4a13      	ldr	r2, [pc, #76]	; (8008ebc <floorf+0x7c>)
 8008e6e:	2900      	cmp	r1, #0
 8008e70:	bf18      	it	ne
 8008e72:	4613      	movne	r3, r2
 8008e74:	ee00 3a10 	vmov	s0, r3
 8008e78:	4770      	bx	lr
 8008e7a:	4911      	ldr	r1, [pc, #68]	; (8008ec0 <floorf+0x80>)
 8008e7c:	4111      	asrs	r1, r2
 8008e7e:	420b      	tst	r3, r1
 8008e80:	d0fa      	beq.n	8008e78 <floorf+0x38>
 8008e82:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008eb8 <floorf+0x78>
 8008e86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008e8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e92:	ddef      	ble.n	8008e74 <floorf+0x34>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bfbe      	ittt	lt
 8008e98:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008e9c:	fa40 f202 	asrlt.w	r2, r0, r2
 8008ea0:	189b      	addlt	r3, r3, r2
 8008ea2:	ea23 0301 	bic.w	r3, r3, r1
 8008ea6:	e7e5      	b.n	8008e74 <floorf+0x34>
 8008ea8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008eac:	d3e4      	bcc.n	8008e78 <floorf+0x38>
 8008eae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008eb2:	4770      	bx	lr
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e7dd      	b.n	8008e74 <floorf+0x34>
 8008eb8:	7149f2ca 	.word	0x7149f2ca
 8008ebc:	bf800000 	.word	0xbf800000
 8008ec0:	007fffff 	.word	0x007fffff

08008ec4 <scalbnf>:
 8008ec4:	ee10 3a10 	vmov	r3, s0
 8008ec8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008ecc:	d025      	beq.n	8008f1a <scalbnf+0x56>
 8008ece:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ed2:	d302      	bcc.n	8008eda <scalbnf+0x16>
 8008ed4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008ed8:	4770      	bx	lr
 8008eda:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008ede:	d122      	bne.n	8008f26 <scalbnf+0x62>
 8008ee0:	4b2a      	ldr	r3, [pc, #168]	; (8008f8c <scalbnf+0xc8>)
 8008ee2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008f90 <scalbnf+0xcc>
 8008ee6:	4298      	cmp	r0, r3
 8008ee8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008eec:	db16      	blt.n	8008f1c <scalbnf+0x58>
 8008eee:	ee10 3a10 	vmov	r3, s0
 8008ef2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008ef6:	3a19      	subs	r2, #25
 8008ef8:	4402      	add	r2, r0
 8008efa:	2afe      	cmp	r2, #254	; 0xfe
 8008efc:	dd15      	ble.n	8008f2a <scalbnf+0x66>
 8008efe:	ee10 3a10 	vmov	r3, s0
 8008f02:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008f94 <scalbnf+0xd0>
 8008f06:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008f98 <scalbnf+0xd4>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	eeb0 7a67 	vmov.f32	s14, s15
 8008f10:	bfb8      	it	lt
 8008f12:	eef0 7a66 	vmovlt.f32	s15, s13
 8008f16:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008f1a:	4770      	bx	lr
 8008f1c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008f9c <scalbnf+0xd8>
 8008f20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f24:	4770      	bx	lr
 8008f26:	0dd2      	lsrs	r2, r2, #23
 8008f28:	e7e6      	b.n	8008ef8 <scalbnf+0x34>
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	dd06      	ble.n	8008f3c <scalbnf+0x78>
 8008f2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f32:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f36:	ee00 3a10 	vmov	s0, r3
 8008f3a:	4770      	bx	lr
 8008f3c:	f112 0f16 	cmn.w	r2, #22
 8008f40:	da1a      	bge.n	8008f78 <scalbnf+0xb4>
 8008f42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f46:	4298      	cmp	r0, r3
 8008f48:	ee10 3a10 	vmov	r3, s0
 8008f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f50:	dd0a      	ble.n	8008f68 <scalbnf+0xa4>
 8008f52:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008f94 <scalbnf+0xd0>
 8008f56:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008f98 <scalbnf+0xd4>
 8008f5a:	eef0 7a40 	vmov.f32	s15, s0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	bf18      	it	ne
 8008f62:	eeb0 0a47 	vmovne.f32	s0, s14
 8008f66:	e7db      	b.n	8008f20 <scalbnf+0x5c>
 8008f68:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008f9c <scalbnf+0xd8>
 8008f6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008fa0 <scalbnf+0xdc>
 8008f70:	eef0 7a40 	vmov.f32	s15, s0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	e7f3      	b.n	8008f60 <scalbnf+0x9c>
 8008f78:	3219      	adds	r2, #25
 8008f7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f7e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008f82:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008fa4 <scalbnf+0xe0>
 8008f86:	ee07 3a10 	vmov	s14, r3
 8008f8a:	e7c4      	b.n	8008f16 <scalbnf+0x52>
 8008f8c:	ffff3cb0 	.word	0xffff3cb0
 8008f90:	4c000000 	.word	0x4c000000
 8008f94:	7149f2ca 	.word	0x7149f2ca
 8008f98:	f149f2ca 	.word	0xf149f2ca
 8008f9c:	0da24260 	.word	0x0da24260
 8008fa0:	8da24260 	.word	0x8da24260
 8008fa4:	33000000 	.word	0x33000000

08008fa8 <__errno>:
 8008fa8:	4b01      	ldr	r3, [pc, #4]	; (8008fb0 <__errno+0x8>)
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20000018 	.word	0x20000018

08008fb4 <__libc_init_array>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4d0d      	ldr	r5, [pc, #52]	; (8008fec <__libc_init_array+0x38>)
 8008fb8:	4c0d      	ldr	r4, [pc, #52]	; (8008ff0 <__libc_init_array+0x3c>)
 8008fba:	1b64      	subs	r4, r4, r5
 8008fbc:	10a4      	asrs	r4, r4, #2
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	42a6      	cmp	r6, r4
 8008fc2:	d109      	bne.n	8008fd8 <__libc_init_array+0x24>
 8008fc4:	4d0b      	ldr	r5, [pc, #44]	; (8008ff4 <__libc_init_array+0x40>)
 8008fc6:	4c0c      	ldr	r4, [pc, #48]	; (8008ff8 <__libc_init_array+0x44>)
 8008fc8:	f000 f82e 	bl	8009028 <_init>
 8008fcc:	1b64      	subs	r4, r4, r5
 8008fce:	10a4      	asrs	r4, r4, #2
 8008fd0:	2600      	movs	r6, #0
 8008fd2:	42a6      	cmp	r6, r4
 8008fd4:	d105      	bne.n	8008fe2 <__libc_init_array+0x2e>
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fdc:	4798      	blx	r3
 8008fde:	3601      	adds	r6, #1
 8008fe0:	e7ee      	b.n	8008fc0 <__libc_init_array+0xc>
 8008fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe6:	4798      	blx	r3
 8008fe8:	3601      	adds	r6, #1
 8008fea:	e7f2      	b.n	8008fd2 <__libc_init_array+0x1e>
 8008fec:	080094b0 	.word	0x080094b0
 8008ff0:	080094b0 	.word	0x080094b0
 8008ff4:	080094b0 	.word	0x080094b0
 8008ff8:	080094b8 	.word	0x080094b8

08008ffc <memcpy>:
 8008ffc:	440a      	add	r2, r1
 8008ffe:	4291      	cmp	r1, r2
 8009000:	f100 33ff 	add.w	r3, r0, #4294967295
 8009004:	d100      	bne.n	8009008 <memcpy+0xc>
 8009006:	4770      	bx	lr
 8009008:	b510      	push	{r4, lr}
 800900a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800900e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009012:	4291      	cmp	r1, r2
 8009014:	d1f9      	bne.n	800900a <memcpy+0xe>
 8009016:	bd10      	pop	{r4, pc}

08009018 <memset>:
 8009018:	4402      	add	r2, r0
 800901a:	4603      	mov	r3, r0
 800901c:	4293      	cmp	r3, r2
 800901e:	d100      	bne.n	8009022 <memset+0xa>
 8009020:	4770      	bx	lr
 8009022:	f803 1b01 	strb.w	r1, [r3], #1
 8009026:	e7f9      	b.n	800901c <memset+0x4>

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
