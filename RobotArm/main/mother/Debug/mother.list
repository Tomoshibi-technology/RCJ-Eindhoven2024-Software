
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b018  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800b1e0  0800b1e0  0001b1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b648  0800b648  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b648  0800b648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b650  0800b650  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae4  2000007c  0800b6d8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b60  0800b6d8  00021b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6cf  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  0003a77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0003d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  0003e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556f  00000000  00000000  0003f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017429  00000000  00000000  00064d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6150  00000000  00000000  0007c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001522a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005040  00000000  00000000  001522f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b1c8 	.word	0x0800b1c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	0800b1c8 	.word	0x0800b1c8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00a f953 	bl	800b19c <memcpy>
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f005 f844 	bl	8005fa8 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f004 f890 	bl	8005048 <HAL_Delay>
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f005 f823 	bl	8005fa8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
 8000f7a:	f005 f913 	bl	80061a4 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800111c:	f008 fd88 	bl	8009c30 <atan2>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
 8001188:	f008 fcc8 	bl	8009b1c <copysign>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011a2:	f008 fd11 	bl	8009bc8 <asin>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001234:	f008 fcfc 	bl	8009c30 <atan2>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"
#include "math.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	80da      	strh	r2, [r3, #6]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  ID = id;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	711a      	strb	r2, [r3, #4]
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_ZN3STS8moveContEtss>:

void STS::moveCont(uint16_t abs_speed, int16_t goal_position, int16_t now_position)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	747b      	strb	r3, [r7, #17]
 80012f6:	2305      	movs	r3, #5
 80012f8:	74fb      	strb	r3, [r7, #19]
 80012fa:	2303      	movs	r3, #3
 80012fc:	753b      	strb	r3, [r7, #20]
 80012fe:	232e      	movs	r3, #46	; 0x2e
 8001300:	757b      	strb	r3, [r7, #21]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	74bb      	strb	r3, [r7, #18]
  uint8_t checksum = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t diff = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
  int16_t inst_speed = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	847b      	strh	r3, [r7, #34]	; 0x22

  diff = abs(goal_position - now_position);
 800131a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bfb8      	it	lt
 8001328:	425b      	neglt	r3, r3
 800132a:	837b      	strh	r3, [r7, #26]

  if(diff < 10){
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	2b09      	cmp	r3, #9
 8001330:	d802      	bhi.n	8001338 <_ZN3STS8moveContEtss+0x70>
	  inst_speed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001336:	e01f      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else if(diff < abs_speed * abs_speed / 6000){
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <_ZN3STS8moveContEtss+0x174>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	11c9      	asrs	r1, r1, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	429a      	cmp	r2, r3
 8001350:	da10      	bge.n	8001374 <_ZN3STS8moveContEtss+0xac>
	  inst_speed = sqrt(1500 * diff);
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f9a6 	bl	80016ae <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbb9 	bl	8000ae0 <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	e001      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else{
	  inst_speed = abs_speed;
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if(goal_position < now_position){
 8001378:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	da02      	bge.n	800138a <_ZN3STS8moveContEtss+0xc2>
	  speed = inst_speed;
 8001384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	e003      	b.n	8001392 <_ZN3STS8moveContEtss+0xca>
  }else{
	  speed = -inst_speed;
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	425b      	negs	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((goal_position - now_position < 0 && speed > 0) || (goal_position - now_position > 0 && speed < 0))
 8001392:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da03      	bge.n	80013a8 <_ZN3STS8moveContEtss+0xe0>
 80013a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc0a      	bgt.n	80013be <_ZN3STS8moveContEtss+0xf6>
 80013a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd18      	ble.n	80013e8 <_ZN3STS8moveContEtss+0x120>
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da14      	bge.n	80013e8 <_ZN3STS8moveContEtss+0x120>
  {
    if (speed < 0)
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da04      	bge.n	80013d0 <_ZN3STS8moveContEtss+0x108>
    {
      speed = 32768 - speed;
 80013c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <_ZN3STS8moveContEtss+0x178>)
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    send_Buf[6] = speed;
 80013d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75bb      	strb	r3, [r7, #22]
    send_Buf[7] = speed >> 8;
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f003 fe30 	bl	8005048 <HAL_Delay>
  }

  for (int i = 2; i < 8; i++)
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dc0d      	bgt.n	800140e <_ZN3STS8moveContEtss+0x146>
  {
    checksum += send_Buf[i];
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	4413      	add	r3, r2
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e7ee      	b.n	80013ec <_ZN3STS8moveContEtss+0x124>
  }
  checksum = ~checksum;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	43db      	mvns	r3, r3
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	763b      	strb	r3, [r7, #24]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	2332      	movs	r3, #50	; 0x32
 8001428:	2209      	movs	r2, #9
 800142a:	f007 fd86 	bl	8008f3a <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f003 fe0a 	bl	8005048 <HAL_Delay>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	057619f1 	.word	0x057619f1
 8001440:	ffff8000 	.word	0xffff8000

08001444 <_ZN3STS9moveStop1Ess>:

void STS::moveStop1(int16_t speed, int16_t goal_position){
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	803b      	strh	r3, [r7, #0]
	uint8_t send_Buf[13] = {255, 255, ID, 9, 3, 42, 0, 0, 0, 0, 0, 0, 0};
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	731a      	strb	r2, [r3, #12]
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	723b      	strb	r3, [r7, #8]
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	727b      	strb	r3, [r7, #9]
 800146a:	2309      	movs	r3, #9
 800146c:	72fb      	strb	r3, [r7, #11]
 800146e:	2303      	movs	r3, #3
 8001470:	733b      	strb	r3, [r7, #12]
 8001472:	232a      	movs	r3, #42	; 0x2a
 8001474:	737b      	strb	r3, [r7, #13]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	72bb      	strb	r3, [r7, #10]
	uint8_t checksum = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]

	goal_position = 4095 - goal_position;
 8001480:	883b      	ldrh	r3, [r7, #0]
 8001482:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001486:	330f      	adds	r3, #15
 8001488:	b29b      	uxth	r3, r3
 800148a:	803b      	strh	r3, [r7, #0]

	send_Buf[6] = goal_position;
 800148c:	883b      	ldrh	r3, [r7, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	73bb      	strb	r3, [r7, #14]
	send_Buf[7] = goal_position >> 8;
 8001492:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001496:	121b      	asrs	r3, r3, #8
 8001498:	b21b      	sxth	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]

	send_Buf[10] = speed;
 800149e:	887b      	ldrh	r3, [r7, #2]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	74bb      	strb	r3, [r7, #18]
	send_Buf[11] = speed >> 8;
 80014a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014a8:	121b      	asrs	r3, r3, #8
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	74fb      	strb	r3, [r7, #19]

	for (int i = 2; i < 12; i++)
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0b      	cmp	r3, #11
 80014b8:	dc0b      	bgt.n	80014d2 <_ZN3STS9moveStop1Ess+0x8e>
	{
	checksum += send_Buf[i];
 80014ba:	f107 0208 	add.w	r2, r7, #8
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4413      	add	r3, r2
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	4413      	add	r3, r2
 80014c8:	77fb      	strb	r3, [r7, #31]
	for (int i = 2; i < 12; i++)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	e7f0      	b.n	80014b4 <_ZN3STS9moveStop1Ess+0x70>
	}
	checksum = ~checksum;
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	77fb      	strb	r3, [r7, #31]
	send_Buf[12] = checksum;
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(UART, send_Buf, 13, 50);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	f107 0108 	add.w	r1, r7, #8
 80014e4:	2332      	movs	r3, #50	; 0x32
 80014e6:	220d      	movs	r2, #13
 80014e8:	f007 fd27 	bl	8008f3a <HAL_UART_Transmit>
	HAL_Delay(1);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f003 fdab 	bl	8005048 <HAL_Delay>
}
 80014f2:	bf00      	nop
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_ZN3STS9moveStop3Ess>:

void STS::moveStop3(int16_t speed, int16_t goal_position){
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	803b      	strh	r3, [r7, #0]
	uint8_t send_Buf[13] = {255, 255, ID, 9, 3, 42, 0, 0, 0, 0, 0, 0, 0};
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	731a      	strb	r2, [r3, #12]
 8001518:	23ff      	movs	r3, #255	; 0xff
 800151a:	723b      	strb	r3, [r7, #8]
 800151c:	23ff      	movs	r3, #255	; 0xff
 800151e:	727b      	strb	r3, [r7, #9]
 8001520:	2309      	movs	r3, #9
 8001522:	72fb      	strb	r3, [r7, #11]
 8001524:	2303      	movs	r3, #3
 8001526:	733b      	strb	r3, [r7, #12]
 8001528:	232a      	movs	r3, #42	; 0x2a
 800152a:	737b      	strb	r3, [r7, #13]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	72bb      	strb	r3, [r7, #10]
	uint8_t checksum = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	77fb      	strb	r3, [r7, #31]

	send_Buf[6] = goal_position;
 8001536:	883b      	ldrh	r3, [r7, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	73bb      	strb	r3, [r7, #14]
	send_Buf[7] = goal_position >> 8;
 800153c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b21b      	sxth	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	73fb      	strb	r3, [r7, #15]

	send_Buf[10] = speed;
 8001548:	887b      	ldrh	r3, [r7, #2]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	74bb      	strb	r3, [r7, #18]
	send_Buf[11] = speed >> 8;
 800154e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001552:	121b      	asrs	r3, r3, #8
 8001554:	b21b      	sxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	74fb      	strb	r3, [r7, #19]

	for (int i = 2; i < 12; i++)
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b0b      	cmp	r3, #11
 8001562:	dc0b      	bgt.n	800157c <_ZN3STS9moveStop3Ess+0x82>
	{
	checksum += send_Buf[i];
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	4413      	add	r3, r2
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	7ffb      	ldrb	r3, [r7, #31]
 8001570:	4413      	add	r3, r2
 8001572:	77fb      	strb	r3, [r7, #31]
	for (int i = 2; i < 12; i++)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3301      	adds	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	e7f0      	b.n	800155e <_ZN3STS9moveStop3Ess+0x64>
	}
	checksum = ~checksum;
 800157c:	7ffb      	ldrb	r3, [r7, #31]
 800157e:	43db      	mvns	r3, r3
 8001580:	77fb      	strb	r3, [r7, #31]
	send_Buf[12] = checksum;
 8001582:	7ffb      	ldrb	r3, [r7, #31]
 8001584:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(UART, send_Buf, 13, 50);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	f107 0108 	add.w	r1, r7, #8
 800158e:	2332      	movs	r3, #50	; 0x32
 8001590:	220d      	movs	r2, #13
 8001592:	f007 fcd2 	bl	8008f3a <HAL_UART_Transmit>
	HAL_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f003 fd56 	bl	8005048 <HAL_Delay>
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN3STS4sendEv>:

void STS::send()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	23ff      	movs	r3, #255	; 0xff
 80015b8:	723b      	strb	r3, [r7, #8]
 80015ba:	23ff      	movs	r3, #255	; 0xff
 80015bc:	727b      	strb	r3, [r7, #9]
 80015be:	2304      	movs	r3, #4
 80015c0:	72fb      	strb	r3, [r7, #11]
 80015c2:	2302      	movs	r3, #2
 80015c4:	733b      	strb	r3, [r7, #12]
 80015c6:	2338      	movs	r3, #56	; 0x38
 80015c8:	737b      	strb	r3, [r7, #13]
 80015ca:	2302      	movs	r3, #2
 80015cc:	73bb      	strb	r3, [r7, #14]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	791b      	ldrb	r3, [r3, #4]
 80015d2:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	dc0b      	bgt.n	80015fa <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4413      	add	r3, r2
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	4413      	add	r3, r2
 80015f0:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	e7f0      	b.n	80015dc <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f107 0108 	add.w	r1, r7, #8
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	2208      	movs	r2, #8
 8001610:	f007 fc93 	bl	8008f3a <HAL_UART_Transmit>
}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 8001628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001638:	4293      	cmp	r3, r2
 800163a:	dd08      	ble.n	800164e <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	b25a      	sxtb	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001660:	4293      	cmp	r3, r2
 8001662:	dd08      	ble.n	8001676 <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	b25a      	sxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800167c:	b29b      	uxth	r3, r3
 800167e:	031b      	lsls	r3, r3, #12
 8001680:	b29a      	uxth	r2, r3
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	887a      	ldrh	r2, [r7, #2]
 8001692:	811a      	strh	r2, [r3, #8]

  return -position;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800169a:	b29b      	uxth	r3, r3
 800169c:	425b      	negs	r3, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21b      	sxth	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe fef8 	bl	80004ac <__aeabi_i2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	ec43 2b10 	vmov	d0, r2, r3
 80016c4:	f008 fab6 	bl	8009c34 <sqrt>
 80016c8:	eeb0 7a40 	vmov.f32	s14, s0
 80016cc:	eef0 7a60 	vmov.f32	s15, s1
 80016d0:	eeb0 0a47 	vmov.f32	s0, s14
 80016d4:	eef0 0a67 	vmov.f32	s1, s15
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80016e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80016ec:	f008 fa28 	bl	8009b40 <cosf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <_ZN4CALC14similarityPeakEhsttt>:
#include "calc.h"
#include "math.h"

int16_t CALC::similarityPeak(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	4608      	mov	r0, r1
 800170a:	4611      	mov	r1, r2
 800170c:	461a      	mov	r2, r3
 800170e:	4603      	mov	r3, r0
 8001710:	72fb      	strb	r3, [r7, #11]
 8001712:	460b      	mov	r3, r1
 8001714:	813b      	strh	r3, [r7, #8]
 8001716:	4613      	mov	r3, r2
 8001718:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 800171a:	7afb      	ldrb	r3, [r7, #11]
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 8001722:	7afb      	ldrb	r3, [r7, #11]
 8001724:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	da00      	bge.n	8001732 <_ZN4CALC14similarityPeakEhsttt+0x32>
 8001730:	330f      	adds	r3, #15
 8001732:	111b      	asrs	r3, r3, #4
 8001734:	425b      	negs	r3, r3
 8001736:	b29b      	uxth	r3, r3
 8001738:	f203 135d 	addw	r3, r3, #349	; 0x15d
 800173c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t diff = abs(angle - refference);
 800173e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001740:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	bfb8      	it	lt
 800174a:	425b      	neglt	r3, r3
 800174c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (diff > 180) {
 800174e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001750:	2bb4      	cmp	r3, #180	; 0xb4
 8001752:	d903      	bls.n	800175c <_ZN4CALC14similarityPeakEhsttt+0x5c>
		diff = 360 - diff;
 8001754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001756:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 800175a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if (diff >= widthAngle / 2) {
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	b29b      	uxth	r3, r3
 8001762:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001764:	429a      	cmp	r2, r3
 8001766:	d301      	bcc.n	800176c <_ZN4CALC14similarityPeakEhsttt+0x6c>
		return 0;
 8001768:	2300      	movs	r3, #0
 800176a:	e09a      	b.n	80018a2 <_ZN4CALC14similarityPeakEhsttt+0x1a2>
	}

	float angleRad = angle * M_PI / 180.0;
 800176c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe9c 	bl	80004ac <__aeabi_i2d>
 8001774:	a34e      	add	r3, pc, #312	; (adr r3, 80018b0 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff01 	bl	8000580 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <_ZN4CALC14similarityPeakEhsttt+0x1b8>)
 800178c:	f7ff f822 	bl	80007d4 <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f9ca 	bl	8000b30 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
	float refferenceRad = refference * M_PI / 180.0;
 80017a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe81 	bl	80004ac <__aeabi_i2d>
 80017aa:	a341      	add	r3, pc, #260	; (adr r3, 80018b0 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fee6 	bl	8000580 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <_ZN4CALC14similarityPeakEhsttt+0x1b8>)
 80017c2:	f7ff f807 	bl	80007d4 <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f9af 	bl	8000b30 <__aeabi_d2f>
 80017d2:	4603      	mov	r3, r0
 80017d4:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe67 	bl	80004ac <__aeabi_i2d>
 80017de:	a334      	add	r3, pc, #208	; (adr r3, 80018b0 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe fecc 	bl	8000580 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <_ZN4CALC14similarityPeakEhsttt+0x1b8>)
 80017f6:	f7fe ffed 	bl	80007d4 <__aeabi_ddiv>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f995 	bl	8000b30 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 800180a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800180e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f7ff ff60 	bl	80016de <_ZSt3cosf>
 800181e:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 8001822:	edd7 7a07 	vldr	s15, [r7, #28]
 8001826:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800182a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800182e:	eeb0 0a47 	vmov.f32	s0, s14
 8001832:	f7ff ff54 	bl	80016de <_ZSt3cosf>
 8001836:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 800183a:	ed97 7a06 	vldr	s14, [r7, #24]
 800183e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001842:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800184a:	edd7 7a05 	vldr	s15, [r7, #20]
 800184e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001856:	edc7 7a04 	vstr	s15, [r7, #16]

	int16_t output = center + (normalizedResult - 1) * widthHue;
 800185a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	edd7 7a04 	vldr	s15, [r7, #16]
 8001868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800186c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001870:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001886:	ee17 3a90 	vmov	r3, s15
 800188a:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if(output < 0){
 800188c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	da04      	bge.n	800189e <_ZN4CALC14similarityPeakEhsttt+0x19e>
		output += 256;
 8001894:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001896:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800189a:	b29b      	uxth	r3, r3
 800189c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	return output;
 800189e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3730      	adds	r7, #48	; 0x30
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	54442d18 	.word	0x54442d18
 80018b4:	400921fb 	.word	0x400921fb
 80018b8:	40668000 	.word	0x40668000
 80018bc:	00000000 	.word	0x00000000

080018c0 <_ZN4CALC14similarityRiseEhsttt>:

int16_t CALC::similarityRise(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	72fb      	strb	r3, [r7, #11]
 80018d2:	460b      	mov	r3, r1
 80018d4:	813b      	strh	r3, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da00      	bge.n	80018f2 <_ZN4CALC14similarityRiseEhsttt+0x32>
 80018f0:	330f      	adds	r3, #15
 80018f2:	111b      	asrs	r3, r3, #4
 80018f4:	425b      	negs	r3, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80018fc:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t diff = angle - refference;
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (diff > 180) {
 8001908:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800190c:	2bb4      	cmp	r3, #180	; 0xb4
 800190e:	dd04      	ble.n	800191a <_ZN4CALC14similarityRiseEhsttt+0x5a>
		diff = diff - 360;
 8001910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001912:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001916:	b29b      	uxth	r3, r3
 8001918:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if (diff < -180) {
 800191a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800191e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001922:	da04      	bge.n	800192e <_ZN4CALC14similarityRiseEhsttt+0x6e>
		diff = diff + 360;
 8001924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001926:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192a:	b29b      	uxth	r3, r3
 800192c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if (abs(diff) >= widthAngle / 2) {
 800192e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001932:	2b00      	cmp	r3, #0
 8001934:	bfb8      	it	lt
 8001936:	425b      	neglt	r3, r3
 8001938:	b29a      	uxth	r2, r3
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	429a      	cmp	r2, r3
 8001942:	d301      	bcc.n	8001948 <_ZN4CALC14similarityRiseEhsttt+0x88>
		return 0;
 8001944:	2300      	movs	r3, #0
 8001946:	e0ba      	b.n	8001abe <_ZN4CALC14similarityRiseEhsttt+0x1fe>
	}

	float angleRad = angle * M_PI / 180.0;
 8001948:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdae 	bl	80004ac <__aeabi_i2d>
 8001950:	a35d      	add	r3, pc, #372	; (adr r3, 8001ac8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fe13 	bl	8000580 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 8001968:	f7fe ff34 	bl	80007d4 <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f8dc 	bl	8000b30 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
	float refferenceRad = refference * M_PI / 180.0;
 800197c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd93 	bl	80004ac <__aeabi_i2d>
 8001986:	a350      	add	r3, pc, #320	; (adr r3, 8001ac8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe fdf8 	bl	8000580 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 800199e:	f7fe ff19 	bl	80007d4 <__aeabi_ddiv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f8c1 	bl	8000b30 <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd79 	bl	80004ac <__aeabi_i2d>
 80019ba:	a343      	add	r3, pc, #268	; (adr r3, 8001ac8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fdde 	bl	8000580 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 80019d2:	f7fe feff 	bl	80007d4 <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f8a7 	bl	8000b30 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 80019e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	eeb0 0a67 	vmov.f32	s0, s15
 80019f6:	f7ff fe72 	bl	80016de <_ZSt3cosf>
 80019fa:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 80019fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a06:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0e:	f7ff fe66 	bl	80016de <_ZSt3cosf>
 8001a12:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 8001a16:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a32:	edc7 7a04 	vstr	s15, [r7, #16]

    int16_t output = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(diff > 0){
 8001a3a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dd19      	ble.n	8001a76 <_ZN4CALC14similarityRiseEhsttt+0x1b6>
        output = center - (normalizedResult - 1) * widthHue;
 8001a42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a54:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001a58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6e:	ee17 3a90 	vmov	r3, s15
 8001a72:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001a74:	e018      	b.n	8001aa8 <_ZN4CALC14similarityRiseEhsttt+0x1e8>
    } else {
        output = center + (normalizedResult - 1) * widthHue;
 8001a76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a88:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa2:	ee17 3a90 	vmov	r3, s15
 8001aa6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

	if(output < 0){
 8001aa8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da04      	bge.n	8001aba <_ZN4CALC14similarityRiseEhsttt+0x1fa>
		output += 256;
 8001ab0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ab2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	return output;
 8001aba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	54442d18 	.word	0x54442d18
 8001acc:	400921fb 	.word	0x400921fb
 8001ad0:	40668000 	.word	0x40668000
 8001ad4:	00000000 	.word	0x00000000

08001ad8 <_ZN4CALC16similarityNormalEhst>:
	}

	return output;
}

int16_t CALC::similarityNormal(uint8_t ledNum, int16_t refference, uint16_t width){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	4608      	mov	r0, r1
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	72fb      	strb	r3, [r7, #11]
 8001aea:	460b      	mov	r3, r1
 8001aec:	813b      	strh	r3, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da00      	bge.n	8001b0a <_ZN4CALC16similarityNormalEhst+0x32>
 8001b08:	330f      	adds	r3, #15
 8001b0a:	111b      	asrs	r3, r3, #4
 8001b0c:	425b      	negs	r3, r3
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f203 135d 	addw	r3, r3, #349	; 0x15d
 8001b14:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t diff = abs(angle - refference);
 8001b16:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001b18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bfb8      	it	lt
 8001b22:	425b      	neglt	r3, r3
 8001b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (diff > 180) {
 8001b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b28:	2bb4      	cmp	r3, #180	; 0xb4
 8001b2a:	d903      	bls.n	8001b34 <_ZN4CALC16similarityNormalEhst+0x5c>
        diff = 360 - diff;
 8001b2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b2e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001b32:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if (diff >= width / 2) {
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d301      	bcc.n	8001b44 <_ZN4CALC16similarityNormalEhst+0x6c>
        return 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e081      	b.n	8001c48 <_ZN4CALC16similarityNormalEhst+0x170>
    }

    float angleRad = angle * M_PI / 180.0;
 8001b44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcb0 	bl	80004ac <__aeabi_i2d>
 8001b4c:	a340      	add	r3, pc, #256	; (adr r3, 8001c50 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fd15 	bl	8000580 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <_ZN4CALC16similarityNormalEhst+0x180>)
 8001b64:	f7fe fe36 	bl	80007d4 <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe ffde 	bl	8000b30 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
    float refferenceRad = refference * M_PI / 180.0;
 8001b78:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc95 	bl	80004ac <__aeabi_i2d>
 8001b82:	a333      	add	r3, pc, #204	; (adr r3, 8001c50 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fcfa 	bl	8000580 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <_ZN4CALC16similarityNormalEhst+0x180>)
 8001b9a:	f7fe fe1b 	bl	80007d4 <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ffc3 	bl	8000b30 <__aeabi_d2f>
 8001baa:	4603      	mov	r3, r0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
    float widthRad = width * M_PI / 180.0;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc7b 	bl	80004ac <__aeabi_i2d>
 8001bb6:	a326      	add	r3, pc, #152	; (adr r3, 8001c50 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fce0 	bl	8000580 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <_ZN4CALC16similarityNormalEhst+0x180>)
 8001bce:	f7fe fe01 	bl	80007d4 <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe ffa9 	bl	8000b30 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	623b      	str	r3, [r7, #32]

    float result = cos(angleRad - refferenceRad);
 8001be2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001be6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bee:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf2:	f7ff fd74 	bl	80016de <_ZSt3cosf>
 8001bf6:	ed87 0a07 	vstr	s0, [r7, #28]
    float zeroPoint = cos(widthRad / 2);
 8001bfa:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bfe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c06:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0a:	f7ff fd68 	bl	80016de <_ZSt3cosf>
 8001c0e:	ed87 0a06 	vstr	s0, [r7, #24]
    float output = (result - zeroPoint) / (1 - zeroPoint);
 8001c12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c22:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	edc7 7a05 	vstr	s15, [r7, #20]

    return output * 255;
 8001c32:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c36:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c5c <_ZN4CALC16similarityNormalEhst+0x184>
 8001c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c42:	ee17 3a90 	vmov	r3, s15
 8001c46:	b21b      	sxth	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3730      	adds	r7, #48	; 0x30
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	54442d18 	.word	0x54442d18
 8001c54:	400921fb 	.word	0x400921fb
 8001c58:	40668000 	.word	0x40668000
 8001c5c:	437f0000 	.word	0x437f0000

08001c60 <_ZN4CALC12calcRotationEss>:
    }else{
    	return 1;
    }
}

int16_t CALC::calcRotation(int16_t targetRotation, int16_t nowRotation){
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	803b      	strh	r3, [r7, #0]
    int16_t diffRotation = targetRotation - nowRotation;
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	883b      	ldrh	r3, [r7, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	81fb      	strh	r3, [r7, #14]

    if(diffRotation > 180){
 8001c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7e:	2bb4      	cmp	r3, #180	; 0xb4
 8001c80:	dd05      	ble.n	8001c8e <_ZN4CALC12calcRotationEss+0x2e>
        diffRotation -= 360;
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	81fb      	strh	r3, [r7, #14]
 8001c8c:	e009      	b.n	8001ca2 <_ZN4CALC12calcRotationEss+0x42>
    }else if(diffRotation < -180){
 8001c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c92:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001c96:	da04      	bge.n	8001ca2 <_ZN4CALC12calcRotationEss+0x42>
        diffRotation += 360;
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	81fb      	strh	r3, [r7, #14]
    }

    return diffRotation;
 8001ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <HAL_TIM_PWM_PulseFinishedCallback+0x16>
  {
    NeopixelTape.execute();
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001cc6:	f003 f865 	bl	8004d94 <_ZN7WS2812C7executeEv>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200000ec 	.word	0x200000ec
 8001cd8:	20000368 	.word	0x20000368

08001cdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d104      	bne.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    millis++;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001cf4:	6013      	str	r3, [r2, #0]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000134 	.word	0x20000134
 8001d08:	20001b3c 	.word	0x20001b3c
 8001d0c:	00000000 	.word	0x00000000

08001d10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b0ae      	sub	sp, #184	; 0xb8
 8001d14:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d16:	f003 f925 	bl	8004f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1a:	f000 fa2d 	bl	8002178 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1e:	f000 fc5f 	bl	80025e0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d22:	f000 fc2d 	bl	8002580 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001d26:	f000 fa9d 	bl	8002264 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 8001d2a:	f000 facf 	bl	80022cc <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8001d2e:	f000 fbc9 	bl	80024c4 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8001d32:	f000 fbf7 	bl	8002524 <_ZL19MX_USART3_UART_Initv>
  MX_UART5_Init();
 8001d36:	f000 fb97 	bl	8002468 <_ZL13MX_UART5_Initv>
  MX_TIM6_Init();
 8001d3a:	f000 fb55 	bl	80023e8 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
 8001d3e:	48b2      	ldr	r0, [pc, #712]	; (8002008 <main+0x2f8>)
 8001d40:	f003 f8b1 	bl	8004ea6 <_ZN7WS2812C4initEv>

  if (HAL_GPIO_ReadPin(dipsw1_GPIO_Port, dipsw1_Pin) == 1)
 8001d44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d48:	48b0      	ldr	r0, [pc, #704]	; (800200c <main+0x2fc>)
 8001d4a:	f003 ffb7 	bl	8005cbc <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <main+0x56>
  {
    ID = 1;
 8001d5e:	4bac      	ldr	r3, [pc, #688]	; (8002010 <main+0x300>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	e022      	b.n	8001dac <main+0x9c>
  }
  else if (HAL_GPIO_ReadPin(dipsw2_GPIO_Port, dipsw2_Pin) == 1)
 8001d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6a:	48a8      	ldr	r0, [pc, #672]	; (800200c <main+0x2fc>)
 8001d6c:	f003 ffa6 	bl	8005cbc <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	bf0c      	ite	eq
 8001d76:	2301      	moveq	r3, #1
 8001d78:	2300      	movne	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <main+0x78>
  {
    ID = 2;
 8001d80:	4ba3      	ldr	r3, [pc, #652]	; (8002010 <main+0x300>)
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	e011      	b.n	8001dac <main+0x9c>
  }
  else if (HAL_GPIO_ReadPin(dipsw3_GPIO_Port, dipsw3_Pin) == 1)
 8001d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8c:	489f      	ldr	r0, [pc, #636]	; (800200c <main+0x2fc>)
 8001d8e:	f003 ff95 	bl	8005cbc <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <main+0x9a>
  {
    ID = 3;
 8001da2:	4b9b      	ldr	r3, [pc, #620]	; (8002010 <main+0x300>)
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e000      	b.n	8001dac <main+0x9c>
  }
  else
  {
    while (1)
 8001daa:	e7fe      	b.n	8001daa <main+0x9a>
      ;
  }

  HAL_TIM_Base_Start_IT(&htim6);
 8001dac:	4899      	ldr	r0, [pc, #612]	; (8002014 <main+0x304>)
 8001dae:	f005 feb1 	bl	8007b14 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4998      	ldr	r1, [pc, #608]	; (8002018 <main+0x308>)
 8001db6:	4899      	ldr	r0, [pc, #612]	; (800201c <main+0x30c>)
 8001db8:	f007 f951 	bl	800905e <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart5, tweliteRxBuf, sizeof(tweliteRxBuf));
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	4998      	ldr	r1, [pc, #608]	; (8002020 <main+0x310>)
 8001dc0:	4898      	ldr	r0, [pc, #608]	; (8002024 <main+0x314>)
 8001dc2:	f007 f94c 	bl	800905e <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2102      	movs	r1, #2
 8001dca:	4890      	ldr	r0, [pc, #576]	; (800200c <main+0x2fc>)
 8001dcc:	f003 ff8e 	bl	8005cec <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd4:	f003 f938 	bl	8005048 <HAL_Delay>

  while (!ready)
 8001dd8:	4b93      	ldr	r3, [pc, #588]	; (8002028 <main+0x318>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d116      	bne.n	8001e0e <main+0xfe>
  {
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28 << 1, 10, 1000) == HAL_OK)
 8001de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de4:	220a      	movs	r2, #10
 8001de6:	2150      	movs	r1, #80	; 0x50
 8001de8:	4890      	ldr	r0, [pc, #576]	; (800202c <main+0x31c>)
 8001dea:	f004 fc01 	bl	80065f0 <HAL_I2C_IsDeviceReady>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <main+0xf6>
    {
      ready = 1;
 8001dfe:	4b8a      	ldr	r3, [pc, #552]	; (8002028 <main+0x318>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e7e8      	b.n	8001dd8 <main+0xc8>
    }
    else
    {
      HAL_Delay(100);
 8001e06:	2064      	movs	r0, #100	; 0x64
 8001e08:	f003 f91e 	bl	8005048 <HAL_Delay>
  while (!ready)
 8001e0c:	e7e4      	b.n	8001dd8 <main+0xc8>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 8001e0e:	2328      	movs	r3, #40	; 0x28
 8001e10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  BNO055 bno055(hi2c1, address);
 8001e14:	4c85      	ldr	r4, [pc, #532]	; (800202c <main+0x31c>)
 8001e16:	f107 050c 	add.w	r5, r7, #12
 8001e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e1e:	9312      	str	r3, [sp, #72]	; 0x48
 8001e20:	4668      	mov	r0, sp
 8001e22:	f104 030c 	add.w	r3, r4, #12
 8001e26:	2248      	movs	r2, #72	; 0x48
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f009 f9b7 	bl	800b19c <memcpy>
 8001e2e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001e32:	4628      	mov	r0, r5
 8001e34:	f7ff f84e 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    e = bno055.get_eular();
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f917 	bl	8001070 <_ZN6BNO0559get_eularEv>
 8001e42:	eef0 6a40 	vmov.f32	s13, s0
 8001e46:	eeb0 7a60 	vmov.f32	s14, s1
 8001e4a:	eef0 7a41 	vmov.f32	s15, s2
 8001e4e:	edc7 6a00 	vstr	s13, [r7]
 8001e52:	ed87 7a01 	vstr	s14, [r7, #4]
 8001e56:	edc7 7a02 	vstr	s15, [r7, #8]
    gyro = (e.z / M_PI) * 180;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb37 	bl	80004d0 <__aeabi_f2d>
 8001e62:	a367      	add	r3, pc, #412	; (adr r3, 8002000 <main+0x2f0>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fcb4 	bl	80007d4 <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <main+0x320>)
 8001e7a:	f7fe fb81 	bl	8000580 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe2b 	bl	8000ae0 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	4b69      	ldr	r3, [pc, #420]	; (8002034 <main+0x324>)
 8001e90:	801a      	strh	r2, [r3, #0]

    ledPos0 = (-gyro + ((servoPos0 % 4096 + 4096) % 4096) * 360 / 4096 + 360) % 360;
 8001e92:	4b69      	ldr	r3, [pc, #420]	; (8002038 <main+0x328>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	425a      	negs	r2, r3
 8001e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ea2:	bf58      	it	pl
 8001ea4:	4253      	negpl	r3, r2
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	425a      	negs	r2, r3
 8001eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001eb6:	bf58      	it	pl
 8001eb8:	4253      	negpl	r3, r2
 8001eba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da01      	bge.n	8001eca <main+0x1ba>
 8001ec6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001eca:	131b      	asrs	r3, r3, #12
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b59      	ldr	r3, [pc, #356]	; (8002034 <main+0x324>)
 8001ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eda:	4a58      	ldr	r2, [pc, #352]	; (800203c <main+0x32c>)
 8001edc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee0:	441a      	add	r2, r3
 8001ee2:	1211      	asrs	r1, r2, #8
 8001ee4:	17da      	asrs	r2, r3, #31
 8001ee6:	1a8a      	subs	r2, r1, r2
 8001ee8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001eec:	fb01 f202 	mul.w	r2, r1, r2
 8001ef0:	1a9a      	subs	r2, r3, r2
 8001ef2:	b212      	sxth	r2, r2
 8001ef4:	4b52      	ldr	r3, [pc, #328]	; (8002040 <main+0x330>)
 8001ef6:	801a      	strh	r2, [r3, #0]
    ledPos2 = (ledPos0 + ((servoPos2 % 4096 + 4096) % 4096) * 360 / 4096) % 360;
 8001ef8:	4b51      	ldr	r3, [pc, #324]	; (8002040 <main+0x330>)
 8001efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efe:	4619      	mov	r1, r3
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <main+0x334>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	425a      	negs	r2, r3
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f10:	bf58      	it	pl
 8001f12:	4253      	negpl	r3, r2
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	425a      	negs	r2, r3
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001f24:	bf58      	it	pl
 8001f26:	4253      	negpl	r3, r2
 8001f28:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da01      	bge.n	8001f38 <main+0x228>
 8001f34:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001f38:	131b      	asrs	r3, r3, #12
 8001f3a:	440b      	add	r3, r1
 8001f3c:	4a3f      	ldr	r2, [pc, #252]	; (800203c <main+0x32c>)
 8001f3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f42:	441a      	add	r2, r3
 8001f44:	1211      	asrs	r1, r2, #8
 8001f46:	17da      	asrs	r2, r3, #31
 8001f48:	1a8a      	subs	r2, r1, r2
 8001f4a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001f4e:	fb01 f202 	mul.w	r2, r1, r2
 8001f52:	1a9a      	subs	r2, r3, r2
 8001f54:	b212      	sxth	r2, r2
 8001f56:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <main+0x338>)
 8001f58:	801a      	strh	r2, [r3, #0]

    get_position(0);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 fbe4 	bl	8002728 <_Z12get_positionh>
    get_position(2);
 8001f60:	2002      	movs	r0, #2
 8001f62:	f000 fbe1 	bl	8002728 <_Z12get_positionh>

    twelite();
 8001f66:	f000 fd83 	bl	8002a70 <_Z7twelitev>
	setMode();
 8001f6a:	f000 fe51 	bl	8002c10 <_Z7setModev>

	if (mode == 0)
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <main+0x33c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <main+0x26c>
	{
	  mode0();
 8001f76:	f000 ff6f 	bl	8002e58 <_Z5mode0v>
 8001f7a:	e75d      	b.n	8001e38 <main+0x128>
	}
	else if (mode == 1 || millis < 7500)
 8001f7c:	4b33      	ldr	r3, [pc, #204]	; (800204c <main+0x33c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <main+0x280>
 8001f84:	4b32      	ldr	r3, [pc, #200]	; (8002050 <main+0x340>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d802      	bhi.n	8001f96 <main+0x286>
	{
	  mode1();
 8001f90:	f000 ffb6 	bl	8002f00 <_Z5mode1v>
 8001f94:	e0d8      	b.n	8002148 <main+0x438>
	}
	else if (mode == 2 || millis < 22500)
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <main+0x33c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d005      	beq.n	8001faa <main+0x29a>
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <main+0x340>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f245 72e3 	movw	r2, #22499	; 0x57e3
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d802      	bhi.n	8001fb0 <main+0x2a0>
	{
	  mode2();
 8001faa:	f000 fff5 	bl	8002f98 <_Z5mode2v>
 8001fae:	e0cb      	b.n	8002148 <main+0x438>
	}
	else if (mode == 3 || millis < 37000)
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <main+0x33c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d005      	beq.n	8001fc4 <main+0x2b4>
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <main+0x340>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f249 0287 	movw	r2, #36999	; 0x9087
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d802      	bhi.n	8001fca <main+0x2ba>
	{
	  mode3();
 8001fc4:	f001 f816 	bl	8002ff4 <_Z5mode3v>
 8001fc8:	e0be      	b.n	8002148 <main+0x438>
	}
	else if (mode == 4 || millis < 52000)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <main+0x33c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d005      	beq.n	8001fde <main+0x2ce>
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <main+0x340>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f64c 321f 	movw	r2, #51999	; 0xcb1f
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d802      	bhi.n	8001fe4 <main+0x2d4>
	{
	  mode4();
 8001fde:	f001 f985 	bl	80032ec <_Z5mode4v>
 8001fe2:	e0b1      	b.n	8002148 <main+0x438>
	}
	else if (mode == 5 || millis < 60000)
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <main+0x33c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d005      	beq.n	8001ff8 <main+0x2e8>
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <main+0x340>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d82d      	bhi.n	8002054 <main+0x344>
	{
	  mode5();
 8001ff8:	f001 fb98 	bl	800372c <_Z5mode5v>
 8001ffc:	e0a4      	b.n	8002148 <main+0x438>
 8001ffe:	bf00      	nop
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb
 8002008:	20000368 	.word	0x20000368
 800200c:	40020000 	.word	0x40020000
 8002010:	20001b34 	.word	0x20001b34
 8002014:	20000134 	.word	0x20000134
 8002018:	20001a2c 	.word	0x20001a2c
 800201c:	20000220 	.word	0x20000220
 8002020:	20001aac 	.word	0x20001aac
 8002024:	200001dc 	.word	0x200001dc
 8002028:	20001b30 	.word	0x20001b30
 800202c:	20000098 	.word	0x20000098
 8002030:	40668000 	.word	0x40668000
 8002034:	20001b32 	.word	0x20001b32
 8002038:	20001a24 	.word	0x20001a24
 800203c:	b60b60b7 	.word	0xb60b60b7
 8002040:	20001b2c 	.word	0x20001b2c
 8002044:	20001a28 	.word	0x20001a28
 8002048:	20001b2e 	.word	0x20001b2e
 800204c:	20001b35 	.word	0x20001b35
 8002050:	20001b3c 	.word	0x20001b3c
	}
	else if (mode == 6 || millis < 67000)
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <main+0x43c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b06      	cmp	r3, #6
 800205a:	d004      	beq.n	8002066 <main+0x356>
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <main+0x440>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3c      	ldr	r2, [pc, #240]	; (8002154 <main+0x444>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d802      	bhi.n	800206c <main+0x35c>
	{
	  mode6();
 8002066:	f001 fbb1 	bl	80037cc <_Z5mode6v>
 800206a:	e06d      	b.n	8002148 <main+0x438>
	}
	else if (mode == 7 || millis < 74500)
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <main+0x43c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b07      	cmp	r3, #7
 8002072:	d004      	beq.n	800207e <main+0x36e>
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <main+0x440>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <main+0x448>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d802      	bhi.n	8002084 <main+0x374>
	{
	  mode7();
 800207e:	f001 fca5 	bl	80039cc <_Z5mode7v>
 8002082:	e061      	b.n	8002148 <main+0x438>
	}
	else if (mode == 8 || millis < 100000)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <main+0x43c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b08      	cmp	r3, #8
 800208a:	d004      	beq.n	8002096 <main+0x386>
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <main+0x440>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <main+0x44c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d802      	bhi.n	800209c <main+0x38c>
	{
	  mode8();
 8002096:	f001 fd11 	bl	8003abc <_Z5mode8v>
 800209a:	e055      	b.n	8002148 <main+0x438>
	}
	else if (mode == 9 || millis < 200000)
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <main+0x43c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d004      	beq.n	80020ae <main+0x39e>
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <main+0x440>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <main+0x450>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <main+0x3a4>
	{
	  mode9();
 80020ae:	f001 fd27 	bl	8003b00 <_Z5mode9v>
 80020b2:	e049      	b.n	8002148 <main+0x438>
	}
	else if (mode == 10 || millis < 208500)
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <main+0x43c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b0a      	cmp	r3, #10
 80020ba:	d004      	beq.n	80020c6 <main+0x3b6>
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <main+0x440>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <main+0x454>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d802      	bhi.n	80020cc <main+0x3bc>
	{
	  mode10();
 80020c6:	f001 fd67 	bl	8003b98 <_Z6mode10v>
 80020ca:	e03d      	b.n	8002148 <main+0x438>
	}
	else if (mode == 11 || millis < 222500)
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <main+0x43c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b0b      	cmp	r3, #11
 80020d2:	d004      	beq.n	80020de <main+0x3ce>
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <main+0x440>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <main+0x458>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d802      	bhi.n	80020e4 <main+0x3d4>
	{
	  mode11();
 80020de:	f001 fda7 	bl	8003c30 <_Z6mode11v>
 80020e2:	e031      	b.n	8002148 <main+0x438>
	}
	else if (mode == 12 || millis < 234700)
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <main+0x43c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d004      	beq.n	80020f6 <main+0x3e6>
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <main+0x440>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <main+0x45c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <main+0x3ec>
	{
	  mode12();
 80020f6:	f001 fe73 	bl	8003de0 <_Z6mode12v>
 80020fa:	e025      	b.n	8002148 <main+0x438>
	}
	else if (mode == 13 || millis < 238000)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <main+0x43c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b0d      	cmp	r3, #13
 8002102:	d004      	beq.n	800210e <main+0x3fe>
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <main+0x440>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <main+0x460>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d802      	bhi.n	8002114 <main+0x404>
	{
	  mode13();
 800210e:	f002 f839 	bl	8004184 <_Z6mode13v>
 8002112:	e019      	b.n	8002148 <main+0x438>
	}
	else if (mode == 14 || millis < 244500)
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <main+0x43c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b0e      	cmp	r3, #14
 800211a:	d004      	beq.n	8002126 <main+0x416>
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <main+0x440>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <main+0x464>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d802      	bhi.n	800212c <main+0x41c>
	{
	  mode14();
 8002126:	f002 f8c3 	bl	80042b0 <_Z6mode14v>
 800212a:	e00d      	b.n	8002148 <main+0x438>
	}
	else if (mode == 15 || millis >= 244500)
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <main+0x43c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d004      	beq.n	800213e <main+0x42e>
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <main+0x440>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <main+0x464>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d902      	bls.n	8002144 <main+0x434>
	{
	  mode15();
 800213e:	f002 f919 	bl	8004374 <_Z6mode15v>
 8002142:	e001      	b.n	8002148 <main+0x438>
	}
	else
	{
	  modeError();
 8002144:	f002 f972 	bl	800442c <_Z9modeErrorv>
    e = bno055.get_eular();
 8002148:	e676      	b.n	8001e38 <main+0x128>
 800214a:	bf00      	nop
 800214c:	20001b35 	.word	0x20001b35
 8002150:	20001b3c 	.word	0x20001b3c
 8002154:	000105b7 	.word	0x000105b7
 8002158:	00012303 	.word	0x00012303
 800215c:	0001869f 	.word	0x0001869f
 8002160:	00030d3f 	.word	0x00030d3f
 8002164:	00032e73 	.word	0x00032e73
 8002168:	00036523 	.word	0x00036523
 800216c:	000394cb 	.word	0x000394cb
 8002170:	0003a1af 	.word	0x0003a1af
 8002174:	0003bb13 	.word	0x0003bb13

08002178 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	; 0x50
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	2234      	movs	r2, #52	; 0x34
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f009 f816 	bl	800b1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	4b2e      	ldr	r3, [pc, #184]	; (800225c <_Z18SystemClock_Configv+0xe4>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <_Z18SystemClock_Configv+0xe4>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <_Z18SystemClock_Configv+0xe4>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <_Z18SystemClock_Configv+0xe8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <_Z18SystemClock_Configv+0xe8>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <_Z18SystemClock_Configv+0xe8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e2:	2302      	movs	r3, #2
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80021ec:	2310      	movs	r3, #16
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80021f0:	23c0      	movs	r3, #192	; 0xc0
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80021f4:	2306      	movs	r3, #6
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021fc:	2302      	movs	r3, #2
 80021fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4618      	mov	r0, r3
 8002206:	f005 f997 	bl	8007538 <HAL_RCC_OscConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800221a:	f002 f957 	bl	80044cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800221e:	230f      	movs	r3, #15
 8002220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002222:	2302      	movs	r3, #2
 8002224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fe35 	bl	8006ea8 <HAL_RCC_ClockConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800224e:	f002 f93d 	bl	80044cc <Error_Handler>
  }
}
 8002252:	bf00      	nop
 8002254:	3750      	adds	r7, #80	; 0x50
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40007000 	.word	0x40007000

08002264 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <_ZL12MX_I2C1_Initv+0x60>)
 800226c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <_ZL12MX_I2C1_Initv+0x64>)
 8002272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800227c:	2200      	movs	r2, #0
 800227e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <_ZL12MX_I2C1_Initv+0x5c>)
 80022a2:	f003 fd3d 	bl	8005d20 <HAL_I2C_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf14      	ite	ne
 80022ac:	2301      	movne	r3, #1
 80022ae:	2300      	moveq	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80022b6:	f002 f909 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000098 	.word	0x20000098
 80022c4:	40005400 	.word	0x40005400
 80022c8:	000186a0 	.word	0x000186a0

080022cc <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	615a      	str	r2, [r3, #20]
 80022fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 80022fe:	4a39      	ldr	r2, [pc, #228]	; (80023e4 <_ZL12MX_TIM3_Initv+0x118>)
 8002300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1 - 1;
 8002302:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40 - 1;
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002310:	2227      	movs	r2, #39	; 0x27
 8002312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002320:	482f      	ldr	r0, [pc, #188]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002322:	f005 fba7 	bl	8007a74 <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8002336:	f002 f8c9 	bl	80044cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002344:	4619      	mov	r1, r3
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002348:	f006 f840 	bl	80083cc <HAL_TIM_ConfigClockSource>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 800235c:	f002 f8b6 	bl	80044cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002360:	481f      	ldr	r0, [pc, #124]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 8002362:	f005 fc47 	bl	8007bf4 <HAL_TIM_PWM_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8002376:	f002 f8a9 	bl	80044cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	4619      	mov	r1, r3
 8002388:	4815      	ldr	r0, [pc, #84]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 800238a:	f006 fcf9 	bl	8008d80 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800239e:	f002 f895 	bl	80044cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a2:	2360      	movs	r3, #96	; 0x60
 80023a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2200      	movs	r2, #0
 80023b6:	4619      	mov	r1, r3
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 80023ba:	f005 ff45 	bl	8008248 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 80023ce:	f002 f87d 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023d2:	4803      	ldr	r0, [pc, #12]	; (80023e0 <_ZL12MX_TIM3_Initv+0x114>)
 80023d4:	f002 f9b6 	bl	8004744 <HAL_TIM_MspPostInit>
}
 80023d8:	bf00      	nop
 80023da:	3738      	adds	r7, #56	; 0x38
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200000ec 	.word	0x200000ec
 80023e4:	40000400 	.word	0x40000400

080023e8 <_ZL12MX_TIM6_Initv>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <_ZL12MX_TIM6_Initv+0x7c>)
 80023fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32 - 1;
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 80023fe:	221f      	movs	r2, #31
 8002400:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 800240a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 8002418:	f005 fb2c 	bl	8007a74 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 800242c:	f002 f84e 	bl	80044cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4808      	ldr	r0, [pc, #32]	; (8002460 <_ZL12MX_TIM6_Initv+0x78>)
 800243e:	f006 fc9f 	bl	8008d80 <HAL_TIMEx_MasterConfigSynchronization>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8002452:	f002 f83b 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000134 	.word	0x20000134
 8002464:	40001000 	.word	0x40001000

08002468 <_ZL13MX_UART5_Initv>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <_ZL13MX_UART5_Initv+0x58>)
 8002470:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <_ZL13MX_UART5_Initv+0x54>)
 80024a0:	f006 fcfe 	bl	8008ea0 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80024b4:	f002 f80a 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200001dc 	.word	0x200001dc
 80024c0:	40005000 	.word	0x40005000

080024c4 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <_ZL19MX_USART2_UART_Initv+0x58>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80024d2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024e8:	220c      	movs	r2, #12
 80024ea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <_ZL19MX_USART2_UART_Initv+0x54>)
 80024fa:	f006 fcd1 	bl	8008ea0 <HAL_UART_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 800250e:	f001 ffdd 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000220 	.word	0x20000220
 800251c:	40004400 	.word	0x40004400
 8002520:	000f4240 	.word	0x000f4240

08002524 <_ZL19MX_USART3_UART_Initv>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 800252a:	4a14      	ldr	r2, [pc, #80]	; (800257c <_ZL19MX_USART3_UART_Initv+0x58>)
 800252c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800255a:	4807      	ldr	r0, [pc, #28]	; (8002578 <_ZL19MX_USART3_UART_Initv+0x54>)
 800255c:	f006 fca0 	bl	8008ea0 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002570:	f001 ffac 	bl	80044cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000264 	.word	0x20000264
 800257c:	40004800 	.word	0x40004800

08002580 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <_ZL11MX_DMA_Initv+0x5c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <_ZL11MX_DMA_Initv+0x5c>)
 8002590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_ZL11MX_DMA_Initv+0x5c>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	607b      	str	r3, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	200b      	movs	r0, #11
 80025a8:	f002 fe4d 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025ac:	200b      	movs	r0, #11
 80025ae:	f002 fe66 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	200f      	movs	r0, #15
 80025b8:	f002 fe45 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025bc:	200f      	movs	r0, #15
 80025be:	f002 fe5e 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2010      	movs	r0, #16
 80025c8:	f002 fe3d 	bl	8005246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025cc:	2010      	movs	r0, #16
 80025ce:	f002 fe56 	bl	800527e <HAL_NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800

080025e0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a46      	ldr	r2, [pc, #280]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b44      	ldr	r3, [pc, #272]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a38      	ldr	r2, [pc, #224]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b28      	ldr	r3, [pc, #160]	; (8002718 <_ZL12MX_GPIO_Initv+0x138>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 8002682:	2200      	movs	r2, #0
 8002684:	2102      	movs	r1, #2
 8002686:	4825      	ldr	r0, [pc, #148]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 8002688:	f003 fb30 	bl	8005cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 800268c:	2301      	movs	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002690:	2303      	movs	r3, #3
 8002692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4619      	mov	r1, r3
 800269e:	481f      	ldr	r0, [pc, #124]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 80026a0:	f003 f978 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 80026a4:	2302      	movs	r3, #2
 80026a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a8:	2301      	movs	r3, #1
 80026aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4818      	ldr	r0, [pc, #96]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 80026bc:	f003 f96a 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : slidesw1_Pin slidesw2_Pin */
  GPIO_InitStruct.Pin = slidesw1_Pin | slidesw2_Pin;
 80026c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	4812      	ldr	r0, [pc, #72]	; (8002720 <_ZL12MX_GPIO_Initv+0x140>)
 80026d6:	f003 f95d 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : dipsw3_Pin dipsw2_Pin dipsw1_Pin */
  GPIO_InitStruct.Pin = dipsw3_Pin | dipsw2_Pin | dipsw1_Pin;
 80026da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80026de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <_ZL12MX_GPIO_Initv+0x13c>)
 80026f0:	f003 f950 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : dipsw4_Pin dipsw5_Pin */
  GPIO_InitStruct.Pin = dipsw4_Pin | dipsw5_Pin;
 80026f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <_ZL12MX_GPIO_Initv+0x144>)
 800270a:	f003 f943 	bl	8005994 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020400 	.word	0x40020400
 8002724:	40020800 	.word	0x40020800

08002728 <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t servoID)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  static int16_t inst_pos0 = 0;
  static int16_t inst_pos1 = 0;
  static int16_t inst_pos2 = 0;
  static int16_t inst_pos3 = 0;
  static uint8_t readPos = 0;
  uint8_t checksum = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t read[15] = {0};
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	f107 0318 	add.w	r3, r7, #24
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	f8c3 2007 	str.w	r2, [r3, #7]
  uint8_t position[6] = {0};
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	2300      	movs	r3, #0
 8002750:	823b      	strh	r3, [r7, #16]

  switch (servoID)
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d81b      	bhi.n	8002790 <_Z12get_positionh+0x68>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <_Z12get_positionh+0x38>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	08002779 	.word	0x08002779
 8002768:	08002781 	.word	0x08002781
 800276c:	08002789 	.word	0x08002789
  {
  case 0:
    servo0.send();
 8002770:	4881      	ldr	r0, [pc, #516]	; (8002978 <_Z12get_positionh+0x250>)
 8002772:	f7fe ff17 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 8002776:	e00c      	b.n	8002792 <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 8002778:	4880      	ldr	r0, [pc, #512]	; (800297c <_Z12get_positionh+0x254>)
 800277a:	f7fe ff13 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 800277e:	e008      	b.n	8002792 <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 8002780:	487f      	ldr	r0, [pc, #508]	; (8002980 <_Z12get_positionh+0x258>)
 8002782:	f7fe ff0f 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 8002786:	e004      	b.n	8002792 <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 8002788:	487e      	ldr	r0, [pc, #504]	; (8002984 <_Z12get_positionh+0x25c>)
 800278a:	f7fe ff0b 	bl	80015a4 <_ZN3STS4sendEv>
    break;
 800278e:	e000      	b.n	8002792 <_Z12get_positionh+0x6a>
  default:
    break;
 8002790:	bf00      	nop
  }

  HAL_Delay(1);
 8002792:	2001      	movs	r0, #1
 8002794:	f002 fc58 	bl	8005048 <HAL_Delay>

  readPos = huart2.hdmarx->Instance->NDTR;
 8002798:	4b7b      	ldr	r3, [pc, #492]	; (8002988 <_Z12get_positionh+0x260>)
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b7a      	ldr	r3, [pc, #488]	; (800298c <_Z12get_positionh+0x264>)
 80027a4:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(rxBuf) - readPos;
 80027a6:	4b79      	ldr	r3, [pc, #484]	; (800298c <_Z12get_positionh+0x264>)
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <_Z12get_positionh+0x264>)
 80027b4:	701a      	strb	r2, [r3, #0]

  if (readPos >= 15)
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <_Z12get_positionh+0x264>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b0e      	cmp	r3, #14
 80027bc:	d919      	bls.n	80027f2 <_Z12get_positionh+0xca>
  {
    for (int i = 0; i < 15; i++)
 80027be:	2300      	movs	r3, #0
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	2b0e      	cmp	r3, #14
 80027c6:	dc14      	bgt.n	80027f2 <_Z12get_positionh+0xca>
    {
      read[i] = rxBuf[readPos - 14 + i];
 80027c8:	4b70      	ldr	r3, [pc, #448]	; (800298c <_Z12get_positionh+0x264>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f1a3 020e 	sub.w	r2, r3, #14
 80027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d2:	4413      	add	r3, r2
 80027d4:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <_Z12get_positionh+0x268>)
 80027d6:	5cd1      	ldrb	r1, [r2, r3]
 80027d8:	f107 0214 	add.w	r2, r7, #20
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	4413      	add	r3, r2
 80027e0:	460a      	mov	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f002 fc2f 	bl	8005048 <HAL_Delay>
    for (int i = 0; i < 15; i++)
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	3301      	adds	r3, #1
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
 80027f0:	e7e7      	b.n	80027c2 <_Z12get_positionh+0x9a>
    }
  }

  for (int i = 0; i < 8; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	dc29      	bgt.n	8002850 <_Z12get_positionh+0x128>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 80027fc:	f107 0214 	add.w	r2, r7, #20
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	4413      	add	r3, r2
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2bff      	cmp	r3, #255	; 0xff
 8002808:	d11e      	bne.n	8002848 <_Z12get_positionh+0x120>
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	3301      	adds	r3, #1
 800280e:	3338      	adds	r3, #56	; 0x38
 8002810:	443b      	add	r3, r7
 8002812:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d116      	bne.n	8002848 <_Z12get_positionh+0x120>
    {
      for (int j = 0; j < 6; j++)
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	2b05      	cmp	r3, #5
 8002822:	dc11      	bgt.n	8002848 <_Z12get_positionh+0x120>
      {
        position[j] = read[i + j + 2];
 8002824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	4413      	add	r3, r2
 800282a:	3302      	adds	r3, #2
 800282c:	3338      	adds	r3, #56	; 0x38
 800282e:	443b      	add	r3, r7
 8002830:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	4413      	add	r3, r2
 800283c:	460a      	mov	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	3301      	adds	r3, #1
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	e7ea      	b.n	800281e <_Z12get_positionh+0xf6>
  for (int i = 0; i < 8; i++)
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	3301      	adds	r3, #1
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	e7d2      	b.n	80027f6 <_Z12get_positionh+0xce>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b04      	cmp	r3, #4
 8002858:	dc0d      	bgt.n	8002876 <_Z12get_positionh+0x14e>
  {
    checksum += position[i];
 800285a:	f107 020c 	add.w	r2, r7, #12
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	4413      	add	r3, r2
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002868:	4413      	add	r3, r2
 800286a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	3301      	adds	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
 8002874:	e7ee      	b.n	8002854 <_Z12get_positionh+0x12c>
  }
  checksum = ~checksum;
 8002876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800287a:	43db      	mvns	r3, r3
 800287c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 8002880:	7c7b      	ldrb	r3, [r7, #17]
 8002882:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002886:	429a      	cmp	r2, r3
 8002888:	d118      	bne.n	80028bc <_Z12get_positionh+0x194>
 800288a:	7b3b      	ldrb	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d115      	bne.n	80028bc <_Z12get_positionh+0x194>
  {
    inst_pos0 = position[3] + position[4] * 256;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	b29a      	uxth	r2, r3
 8002894:	7c3b      	ldrb	r3, [r7, #16]
 8002896:	b29b      	uxth	r3, r3
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	b29b      	uxth	r3, r3
 800289c:	4413      	add	r3, r2
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <_Z12get_positionh+0x26c>)
 80028a4:	801a      	strh	r2, [r3, #0]
    servoPos0 = servo0.calculate_position(inst_pos0);
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <_Z12get_positionh+0x26c>)
 80028a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4832      	ldr	r0, [pc, #200]	; (8002978 <_Z12get_positionh+0x250>)
 80028b0:	f7fe feb4 	bl	800161c <_ZN3STS18calculate_positionEs>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b37      	ldr	r3, [pc, #220]	; (8002998 <_Z12get_positionh+0x270>)
 80028ba:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 80028bc:	7c7b      	ldrb	r3, [r7, #17]
 80028be:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d118      	bne.n	80028f8 <_Z12get_positionh+0x1d0>
 80028c6:	7b3b      	ldrb	r3, [r7, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d115      	bne.n	80028f8 <_Z12get_positionh+0x1d0>
  {
    inst_pos1 = position[3] + position[4] * 256;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	7c3b      	ldrb	r3, [r7, #16]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4413      	add	r3, r2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b21a      	sxth	r2, r3
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <_Z12get_positionh+0x274>)
 80028e0:	801a      	strh	r2, [r3, #0]
    servoPos1 = servo1.calculate_position(inst_pos1);
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <_Z12get_positionh+0x274>)
 80028e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4824      	ldr	r0, [pc, #144]	; (800297c <_Z12get_positionh+0x254>)
 80028ec:	f7fe fe96 	bl	800161c <_ZN3STS18calculate_positionEs>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <_Z12get_positionh+0x278>)
 80028f6:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80028fe:	429a      	cmp	r2, r3
 8002900:	d118      	bne.n	8002934 <_Z12get_positionh+0x20c>
 8002902:	7b3b      	ldrb	r3, [r7, #12]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d115      	bne.n	8002934 <_Z12get_positionh+0x20c>
  {
    inst_pos2 = position[3] + position[4] * 256;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	b29a      	uxth	r2, r3
 800290c:	7c3b      	ldrb	r3, [r7, #16]
 800290e:	b29b      	uxth	r3, r3
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	4413      	add	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	b21a      	sxth	r2, r3
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <_Z12get_positionh+0x27c>)
 800291c:	801a      	strh	r2, [r3, #0]
    servoPos2 = servo2.calculate_position(inst_pos2);
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <_Z12get_positionh+0x27c>)
 8002920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002924:	4619      	mov	r1, r3
 8002926:	4816      	ldr	r0, [pc, #88]	; (8002980 <_Z12get_positionh+0x258>)
 8002928:	f7fe fe78 	bl	800161c <_ZN3STS18calculate_positionEs>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <_Z12get_positionh+0x280>)
 8002932:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 8002934:	7c7b      	ldrb	r3, [r7, #17]
 8002936:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800293a:	429a      	cmp	r2, r3
 800293c:	d118      	bne.n	8002970 <_Z12get_positionh+0x248>
 800293e:	7b3b      	ldrb	r3, [r7, #12]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d115      	bne.n	8002970 <_Z12get_positionh+0x248>
  {
    inst_pos3 = position[3] + position[4] * 256;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	b29a      	uxth	r2, r3
 8002948:	7c3b      	ldrb	r3, [r7, #16]
 800294a:	b29b      	uxth	r3, r3
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	b29b      	uxth	r3, r3
 8002950:	4413      	add	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	b21a      	sxth	r2, r3
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <_Z12get_positionh+0x284>)
 8002958:	801a      	strh	r2, [r3, #0]
    servoPos3 = servo3.calculate_position(inst_pos3);
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <_Z12get_positionh+0x284>)
 800295c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002960:	4619      	mov	r1, r3
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <_Z12get_positionh+0x25c>)
 8002964:	f7fe fe5a 	bl	800161c <_ZN3STS18calculate_positionEs>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <_Z12get_positionh+0x288>)
 800296e:	801a      	strh	r2, [r3, #0]
  }
}
 8002970:	bf00      	nop
 8002972:	3738      	adds	r7, #56	; 0x38
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	200019f4 	.word	0x200019f4
 800297c:	20001a00 	.word	0x20001a00
 8002980:	20001a0c 	.word	0x20001a0c
 8002984:	20001a18 	.word	0x20001a18
 8002988:	20000220 	.word	0x20000220
 800298c:	20001b54 	.word	0x20001b54
 8002990:	20001a2c 	.word	0x20001a2c
 8002994:	20001b4c 	.word	0x20001b4c
 8002998:	20001a24 	.word	0x20001a24
 800299c:	20001b4e 	.word	0x20001b4e
 80029a0:	20001a26 	.word	0x20001a26
 80029a4:	20001b50 	.word	0x20001b50
 80029a8:	20001a28 	.word	0x20001a28
 80029ac:	20001b52 	.word	0x20001b52
 80029b0:	20001a2a 	.word	0x20001a2a

080029b4 <_Z8sendDataths>:

void sendData(uint16_t angle, uint8_t speed, int16_t rotation)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	80fb      	strh	r3, [r7, #6]
 80029be:	460b      	mov	r3, r1
 80029c0:	717b      	strb	r3, [r7, #5]
 80029c2:	4613      	mov	r3, r2
 80029c4:	807b      	strh	r3, [r7, #2]
  uint8_t checksum = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]

  rotation += 360;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	807b      	strh	r3, [r7, #2]

  sendArray[2] = angle / 256;
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <_Z8sendDataths+0xb0>)
 80029de:	709a      	strb	r2, [r3, #2]
  sendArray[3] = angle % 256;
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <_Z8sendDataths+0xb0>)
 80029e6:	70da      	strb	r2, [r3, #3]
  sendArray[4] = speed;
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <_Z8sendDataths+0xb0>)
 80029ea:	797b      	ldrb	r3, [r7, #5]
 80029ec:	7113      	strb	r3, [r2, #4]
  sendArray[5] = rotation / 256;
 80029ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da00      	bge.n	80029f8 <_Z8sendDataths+0x44>
 80029f6:	33ff      	adds	r3, #255	; 0xff
 80029f8:	121b      	asrs	r3, r3, #8
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <_Z8sendDataths+0xb0>)
 8002a00:	715a      	strb	r2, [r3, #5]
  sendArray[6] = rotation % 256;
 8002a02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a06:	425a      	negs	r2, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	bf58      	it	pl
 8002a0e:	4253      	negpl	r3, r2
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <_Z8sendDataths+0xb0>)
 8002a16:	719a      	strb	r2, [r3, #6]

  for (uint8_t i = 2; i < 7; i++)
 8002a18:	2302      	movs	r3, #2
 8002a1a:	73bb      	strb	r3, [r7, #14]
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d809      	bhi.n	8002a36 <_Z8sendDataths+0x82>
  {
    checksum += sendArray[i];
 8002a22:	7bbb      	ldrb	r3, [r7, #14]
 8002a24:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <_Z8sendDataths+0xb0>)
 8002a26:	5cd2      	ldrb	r2, [r2, r3]
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 2; i < 7; i++)
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73bb      	strb	r3, [r7, #14]
 8002a34:	e7f2      	b.n	8002a1c <_Z8sendDataths+0x68>
  }
  checksum = ~checksum;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	73fb      	strb	r3, [r7, #15]
  checksum += 10;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	330a      	adds	r3, #10
 8002a40:	73fb      	strb	r3, [r7, #15]
  sendArray[7] = checksum;
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <_Z8sendDataths+0xb0>)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	71d3      	strb	r3, [r2, #7]
  HAL_UART_Transmit(&huart3, sendArray, 8, 100);
 8002a48:	2364      	movs	r3, #100	; 0x64
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4905      	ldr	r1, [pc, #20]	; (8002a64 <_Z8sendDataths+0xb0>)
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <_Z8sendDataths+0xb4>)
 8002a50:	f006 fa73 	bl	8008f3a <HAL_UART_Transmit>
  HAL_Delay(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f002 faf7 	bl	8005048 <HAL_Delay>
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000264 	.word	0x20000264
 8002a6c:	00000000 	.word	0x00000000

08002a70 <_Z7twelitev>:

void twelite()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
  static uint8_t readPos = 0;
  uint8_t tweliteRead[9] = {0};
 8002a76:	2300      	movs	r3, #0
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	711a      	strb	r2, [r3, #4]

  HAL_Delay(1);
 8002a82:	2001      	movs	r0, #1
 8002a84:	f002 fae0 	bl	8005048 <HAL_Delay>

  readPos = huart5.hdmarx->Instance->NDTR;
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <_Z7twelitev+0x178>)
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <_Z7twelitev+0x17c>)
 8002a94:	701a      	strb	r2, [r3, #0]
  readPos = sizeof(tweliteRxBuf) - readPos;
 8002a96:	4b55      	ldr	r3, [pc, #340]	; (8002bec <_Z7twelitev+0x17c>)
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b52      	ldr	r3, [pc, #328]	; (8002bec <_Z7twelitev+0x17c>)
 8002aa4:	701a      	strb	r2, [r3, #0]

  if (readPos >= 9)
 8002aa6:	4b51      	ldr	r3, [pc, #324]	; (8002bec <_Z7twelitev+0x17c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d918      	bls.n	8002ae0 <_Z7twelitev+0x70>
  {
    for (int i = 0; i < 9; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	dc13      	bgt.n	8002ae0 <_Z7twelitev+0x70>
    {
      tweliteRead[i] = tweliteRxBuf[readPos - 8 + i];
 8002ab8:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <_Z7twelitev+0x17c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f1a3 0208 	sub.w	r2, r3, #8
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a4a      	ldr	r2, [pc, #296]	; (8002bf0 <_Z7twelitev+0x180>)
 8002ac6:	5cd1      	ldrb	r1, [r2, r3]
 8002ac8:	463a      	mov	r2, r7
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	4413      	add	r3, r2
 8002ace:	460a      	mov	r2, r1
 8002ad0:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f002 fab8 	bl	8005048 <HAL_Delay>
    for (int i = 0; i < 9; i++)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e7e8      	b.n	8002ab2 <_Z7twelitev+0x42>
    }
  }

  for (int i = 0; i < 5; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	dc2f      	bgt.n	8002b4a <_Z7twelitev+0xda>
  {
    if (tweliteRead[i] == 250 && tweliteRead[i + 1] <= 20 && tweliteRead[i + 1] >= 5)
 8002aea:	463a      	mov	r2, r7
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2bfa      	cmp	r3, #250	; 0xfa
 8002af4:	d125      	bne.n	8002b42 <_Z7twelitev+0xd2>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	3301      	adds	r3, #1
 8002afa:	3318      	adds	r3, #24
 8002afc:	443b      	add	r3, r7
 8002afe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b02:	2b14      	cmp	r3, #20
 8002b04:	d81d      	bhi.n	8002b42 <_Z7twelitev+0xd2>
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	3318      	adds	r3, #24
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d915      	bls.n	8002b42 <_Z7twelitev+0xd2>
    {
      for (int j = 0; j < 4; j++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	dc10      	bgt.n	8002b42 <_Z7twelitev+0xd2>
      {
        tweliteData[j] = tweliteRead[i + j + 1];
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	3301      	adds	r3, #1
 8002b28:	3318      	adds	r3, #24
 8002b2a:	443b      	add	r3, r7
 8002b2c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8002b30:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <_Z7twelitev+0x184>)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	460a      	mov	r2, r1
 8002b38:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 4; j++)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e7eb      	b.n	8002b1a <_Z7twelitev+0xaa>
  for (int i = 0; i < 5; i++)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	3301      	adds	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e7cc      	b.n	8002ae4 <_Z7twelitev+0x74>
      }
    }
  }

  mode = tweliteData[0] - 5;
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <_Z7twelitev+0x184>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	3b05      	subs	r3, #5
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <_Z7twelitev+0x188>)
 8002b54:	701a      	strb	r2, [r3, #0]
  count = (tweliteData[1] - 5) * 240 + tweliteData[2] - 5;
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <_Z7twelitev+0x184>)
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	3b05      	subs	r3, #5
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <_Z7twelitev+0x184>)
 8002b6a:	789b      	ldrb	r3, [r3, #2]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b05      	subs	r3, #5
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <_Z7twelitev+0x18c>)
 8002b78:	801a      	strh	r2, [r3, #0]
  beat = (int)(count / 20.32);
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <_Z7twelitev+0x18c>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc94 	bl	80004ac <__aeabi_i2d>
 8002b84:	a316      	add	r3, pc, #88	; (adr r3, 8002be0 <_Z7twelitev+0x170>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fe23 	bl	80007d4 <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7fd ffa3 	bl	8000ae0 <__aeabi_d2iz>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <_Z7twelitev+0x190>)
 8002ba0:	801a      	strh	r2, [r3, #0]
  if (mode < 10)
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <_Z7twelitev+0x188>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d807      	bhi.n	8002bba <_Z7twelitev+0x14a>
  {
    measureA = beat / 4;
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <_Z7twelitev+0x190>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <_Z7twelitev+0x194>)
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e009      	b.n	8002bce <_Z7twelitev+0x15e>
  }
  else
  {
    measureB = (beat - 18) / 4;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <_Z7twelitev+0x190>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	3b12      	subs	r3, #18
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da00      	bge.n	8002bc6 <_Z7twelitev+0x156>
 8002bc4:	3303      	adds	r3, #3
 8002bc6:	109b      	asrs	r3, r3, #2
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <_Z7twelitev+0x198>)
 8002bcc:	701a      	strb	r2, [r3, #0]
  }
  hue = tweliteData[3];
 8002bce:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <_Z7twelitev+0x184>)
 8002bd0:	78da      	ldrb	r2, [r3, #3]
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <_Z7twelitev+0x19c>)
 8002bd4:	701a      	strb	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	851eb852 	.word	0x851eb852
 8002be4:	403451eb 	.word	0x403451eb
 8002be8:	200001dc 	.word	0x200001dc
 8002bec:	20001b55 	.word	0x20001b55
 8002bf0:	20001aac 	.word	0x20001aac
 8002bf4:	20001b44 	.word	0x20001b44
 8002bf8:	20001b35 	.word	0x20001b35
 8002bfc:	20001b36 	.word	0x20001b36
 8002c00:	20001b48 	.word	0x20001b48
 8002c04:	20001b4a 	.word	0x20001b4a
 8002c08:	20001b4b 	.word	0x20001b4b
 8002c0c:	20001b38 	.word	0x20001b38

08002c10 <_Z7setModev>:

void setMode()
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  static uint8_t modeStatus = 0;
  if (mode == 1 && modeStatus == 0)
 8002c14:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <_Z7setModev+0x218>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10c      	bne.n	8002c36 <_Z7setModev+0x26>
 8002c1c:	4b83      	ldr	r3, [pc, #524]	; (8002e2c <_Z7setModev+0x21c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <_Z7setModev+0x26>
  {
    millis = 0;
 8002c24:	4b82      	ldr	r3, [pc, #520]	; (8002e30 <_Z7setModev+0x220>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c2a:	4b80      	ldr	r3, [pc, #512]	; (8002e2c <_Z7setModev+0x21c>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b7e      	ldr	r3, [pc, #504]	; (8002e2c <_Z7setModev+0x21c>)
 8002c34:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 2 && modeStatus == 1)
 8002c36:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <_Z7setModev+0x218>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d10d      	bne.n	8002c5a <_Z7setModev+0x4a>
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <_Z7setModev+0x21c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d109      	bne.n	8002c5a <_Z7setModev+0x4a>
  {
    millis = 7500;
 8002c46:	4b7a      	ldr	r3, [pc, #488]	; (8002e30 <_Z7setModev+0x220>)
 8002c48:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002c4c:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c4e:	4b77      	ldr	r3, [pc, #476]	; (8002e2c <_Z7setModev+0x21c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b75      	ldr	r3, [pc, #468]	; (8002e2c <_Z7setModev+0x21c>)
 8002c58:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 3 && modeStatus == 2)
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <_Z7setModev+0x218>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d10d      	bne.n	8002c7e <_Z7setModev+0x6e>
 8002c62:	4b72      	ldr	r3, [pc, #456]	; (8002e2c <_Z7setModev+0x21c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d109      	bne.n	8002c7e <_Z7setModev+0x6e>
  {
    millis = 22500;
 8002c6a:	4b71      	ldr	r3, [pc, #452]	; (8002e30 <_Z7setModev+0x220>)
 8002c6c:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8002c70:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <_Z7setModev+0x21c>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <_Z7setModev+0x21c>)
 8002c7c:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 4 && modeStatus == 3)
 8002c7e:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <_Z7setModev+0x218>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d10d      	bne.n	8002ca2 <_Z7setModev+0x92>
 8002c86:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <_Z7setModev+0x21c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d109      	bne.n	8002ca2 <_Z7setModev+0x92>
  {
    millis = 37000;
 8002c8e:	4b68      	ldr	r3, [pc, #416]	; (8002e30 <_Z7setModev+0x220>)
 8002c90:	f249 0288 	movw	r2, #37000	; 0x9088
 8002c94:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002c96:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <_Z7setModev+0x21c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <_Z7setModev+0x21c>)
 8002ca0:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 5 && modeStatus == 4)
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <_Z7setModev+0x218>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d10d      	bne.n	8002cc6 <_Z7setModev+0xb6>
 8002caa:	4b60      	ldr	r3, [pc, #384]	; (8002e2c <_Z7setModev+0x21c>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d109      	bne.n	8002cc6 <_Z7setModev+0xb6>
  {
    millis = 52000;
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	; (8002e30 <_Z7setModev+0x220>)
 8002cb4:	f64c 3220 	movw	r2, #52000	; 0xcb20
 8002cb8:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002cba:	4b5c      	ldr	r3, [pc, #368]	; (8002e2c <_Z7setModev+0x21c>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b5a      	ldr	r3, [pc, #360]	; (8002e2c <_Z7setModev+0x21c>)
 8002cc4:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 6 && modeStatus == 5)
 8002cc6:	4b58      	ldr	r3, [pc, #352]	; (8002e28 <_Z7setModev+0x218>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d10d      	bne.n	8002cea <_Z7setModev+0xda>
 8002cce:	4b57      	ldr	r3, [pc, #348]	; (8002e2c <_Z7setModev+0x21c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d109      	bne.n	8002cea <_Z7setModev+0xda>
  {
    millis = 60000;
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <_Z7setModev+0x220>)
 8002cd8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002cdc:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <_Z7setModev+0x21c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b51      	ldr	r3, [pc, #324]	; (8002e2c <_Z7setModev+0x21c>)
 8002ce8:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 7 && modeStatus == 6)
 8002cea:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <_Z7setModev+0x218>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b07      	cmp	r3, #7
 8002cf0:	d10c      	bne.n	8002d0c <_Z7setModev+0xfc>
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <_Z7setModev+0x21c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d108      	bne.n	8002d0c <_Z7setModev+0xfc>
  {
    millis = 67000;
 8002cfa:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <_Z7setModev+0x220>)
 8002cfc:	4a4d      	ldr	r2, [pc, #308]	; (8002e34 <_Z7setModev+0x224>)
 8002cfe:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d00:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <_Z7setModev+0x21c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <_Z7setModev+0x21c>)
 8002d0a:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 8 && modeStatus == 7)
 8002d0c:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <_Z7setModev+0x218>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d10c      	bne.n	8002d2e <_Z7setModev+0x11e>
 8002d14:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <_Z7setModev+0x21c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b07      	cmp	r3, #7
 8002d1a:	d108      	bne.n	8002d2e <_Z7setModev+0x11e>
  {
    millis = 745000;
 8002d1c:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <_Z7setModev+0x220>)
 8002d1e:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <_Z7setModev+0x228>)
 8002d20:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <_Z7setModev+0x21c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <_Z7setModev+0x21c>)
 8002d2c:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 9 && modeStatus == 8)
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <_Z7setModev+0x218>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d10c      	bne.n	8002d50 <_Z7setModev+0x140>
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <_Z7setModev+0x21c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d108      	bne.n	8002d50 <_Z7setModev+0x140>
  {
    millis = 1000000;
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <_Z7setModev+0x220>)
 8002d40:	4a3e      	ldr	r2, [pc, #248]	; (8002e3c <_Z7setModev+0x22c>)
 8002d42:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d44:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <_Z7setModev+0x21c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <_Z7setModev+0x21c>)
 8002d4e:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 10 && modeStatus == 11)
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <_Z7setModev+0x218>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b0a      	cmp	r3, #10
 8002d56:	d10c      	bne.n	8002d72 <_Z7setModev+0x162>
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <_Z7setModev+0x21c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b0b      	cmp	r3, #11
 8002d5e:	d108      	bne.n	8002d72 <_Z7setModev+0x162>
  {
    millis = 2000000;
 8002d60:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <_Z7setModev+0x220>)
 8002d62:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <_Z7setModev+0x230>)
 8002d64:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <_Z7setModev+0x21c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <_Z7setModev+0x21c>)
 8002d70:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 11 && modeStatus == 10)
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <_Z7setModev+0x218>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b0b      	cmp	r3, #11
 8002d78:	d10c      	bne.n	8002d94 <_Z7setModev+0x184>
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <_Z7setModev+0x21c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b0a      	cmp	r3, #10
 8002d80:	d108      	bne.n	8002d94 <_Z7setModev+0x184>
  {
    millis = 2008500;
 8002d82:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <_Z7setModev+0x220>)
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <_Z7setModev+0x234>)
 8002d86:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <_Z7setModev+0x21c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <_Z7setModev+0x21c>)
 8002d92:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 12 && modeStatus == 11)
 8002d94:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <_Z7setModev+0x218>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d10c      	bne.n	8002db6 <_Z7setModev+0x1a6>
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <_Z7setModev+0x21c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b0b      	cmp	r3, #11
 8002da2:	d108      	bne.n	8002db6 <_Z7setModev+0x1a6>
  {
    millis = 2022500;
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <_Z7setModev+0x220>)
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <_Z7setModev+0x238>)
 8002da8:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <_Z7setModev+0x21c>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <_Z7setModev+0x21c>)
 8002db4:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 13 && modeStatus == 12)
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <_Z7setModev+0x218>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b0d      	cmp	r3, #13
 8002dbc:	d10c      	bne.n	8002dd8 <_Z7setModev+0x1c8>
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <_Z7setModev+0x21c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d108      	bne.n	8002dd8 <_Z7setModev+0x1c8>
  {
    millis = 2034700;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <_Z7setModev+0x220>)
 8002dc8:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <_Z7setModev+0x23c>)
 8002dca:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <_Z7setModev+0x21c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <_Z7setModev+0x21c>)
 8002dd6:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 14 && modeStatus == 13)
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <_Z7setModev+0x218>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b0e      	cmp	r3, #14
 8002dde:	d10c      	bne.n	8002dfa <_Z7setModev+0x1ea>
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <_Z7setModev+0x21c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b0d      	cmp	r3, #13
 8002de6:	d108      	bne.n	8002dfa <_Z7setModev+0x1ea>
  {
    millis = 2038000;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <_Z7setModev+0x220>)
 8002dea:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <_Z7setModev+0x240>)
 8002dec:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <_Z7setModev+0x21c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	3301      	adds	r3, #1
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <_Z7setModev+0x21c>)
 8002df8:	701a      	strb	r2, [r3, #0]
  }
  if (mode == 15 && modeStatus == 14)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <_Z7setModev+0x218>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	d10c      	bne.n	8002e1c <_Z7setModev+0x20c>
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <_Z7setModev+0x21c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b0e      	cmp	r3, #14
 8002e08:	d108      	bne.n	8002e1c <_Z7setModev+0x20c>
  {
    millis = 2044500;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <_Z7setModev+0x220>)
 8002e0c:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <_Z7setModev+0x244>)
 8002e0e:	601a      	str	r2, [r3, #0]
    modeStatus++;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <_Z7setModev+0x21c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <_Z7setModev+0x21c>)
 8002e1a:	701a      	strb	r2, [r3, #0]
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20001b35 	.word	0x20001b35
 8002e2c:	20001b56 	.word	0x20001b56
 8002e30:	20001b3c 	.word	0x20001b3c
 8002e34:	000105b8 	.word	0x000105b8
 8002e38:	000b5e28 	.word	0x000b5e28
 8002e3c:	000f4240 	.word	0x000f4240
 8002e40:	001e8480 	.word	0x001e8480
 8002e44:	001ea5b4 	.word	0x001ea5b4
 8002e48:	001edc64 	.word	0x001edc64
 8002e4c:	001f0c0c 	.word	0x001f0c0c
 8002e50:	001f18f0 	.word	0x001f18f0
 8002e54:	001f3254 	.word	0x001f3254

08002e58 <_Z5mode0v>:

void mode0()
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af02      	add	r7, sp, #8
  servo0.moveCont(500, 2048, servoPos0);
 8002e5e:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <_Z5mode0v+0x88>)
 8002e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e6c:	481d      	ldr	r0, [pc, #116]	; (8002ee4 <_Z5mode0v+0x8c>)
 8002e6e:	f7fe fa2b 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(500, 2048);
 8002e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e76:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e7a:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <_Z5mode0v+0x90>)
 8002e7c:	f7fe fae2 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(500, 2048, servoPos2);
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <_Z5mode0v+0x94>)
 8002e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e8e:	4818      	ldr	r0, [pc, #96]	; (8002ef0 <_Z5mode0v+0x98>)
 8002e90:	f7fe fa1a 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(500, 1800);
 8002e94:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002e98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e9c:	4815      	ldr	r0, [pc, #84]	; (8002ef4 <_Z5mode0v+0x9c>)
 8002e9e:	f7fe fb2c 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	71fb      	strb	r3, [r7, #7]
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b2f      	cmp	r3, #47	; 0x2f
 8002eaa:	d80e      	bhi.n	8002eca <_Z5mode0v+0x72>
  {
    NeopixelTape.set_hsv(led, hue, 255, 100);
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	b299      	uxth	r1, r3
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <_Z5mode0v+0xa0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b21a      	sxth	r2, r3
 8002eb6:	2364      	movs	r3, #100	; 0x64
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	23ff      	movs	r3, #255	; 0xff
 8002ebc:	480f      	ldr	r0, [pc, #60]	; (8002efc <_Z5mode0v+0xa4>)
 8002ebe:	f001 fe8f 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	e7ed      	b.n	8002ea6 <_Z5mode0v+0x4e>
  }
  NeopixelTape.show();
 8002eca:	480c      	ldr	r0, [pc, #48]	; (8002efc <_Z5mode0v+0xa4>)
 8002ecc:	f001 ff52 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f002 f8b9 	bl	8005048 <HAL_Delay>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20001a24 	.word	0x20001a24
 8002ee4:	200019f4 	.word	0x200019f4
 8002ee8:	20001a00 	.word	0x20001a00
 8002eec:	20001a28 	.word	0x20001a28
 8002ef0:	20001a0c 	.word	0x20001a0c
 8002ef4:	20001a18 	.word	0x20001a18
 8002ef8:	20001b38 	.word	0x20001b38
 8002efc:	20000368 	.word	0x20000368

08002f00 <_Z5mode1v>:

void mode1()
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <_Z5mode1v+0x7c>)
 8002f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f10:	2100      	movs	r1, #0
 8002f12:	481b      	ldr	r0, [pc, #108]	; (8002f80 <_Z5mode1v+0x80>)
 8002f14:	f7fe f9d8 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8002f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4819      	ldr	r0, [pc, #100]	; (8002f84 <_Z5mode1v+0x84>)
 8002f20:	f7fe fa90 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <_Z5mode1v+0x88>)
 8002f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4816      	ldr	r0, [pc, #88]	; (8002f8c <_Z5mode1v+0x8c>)
 8002f32:	f7fe f9c9 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8002f36:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4814      	ldr	r0, [pc, #80]	; (8002f90 <_Z5mode1v+0x90>)
 8002f3e:	f7fe fadc 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	71fb      	strb	r3, [r7, #7]
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b2f      	cmp	r3, #47	; 0x2f
 8002f4a:	d812      	bhi.n	8002f72 <_Z5mode1v+0x72>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	2200      	movs	r2, #0
 8002f58:	480e      	ldr	r0, [pc, #56]	; (8002f94 <_Z5mode1v+0x94>)
 8002f5a:	f001 fe41 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    NeopixelTape.show();
 8002f5e:	480d      	ldr	r0, [pc, #52]	; (8002f94 <_Z5mode1v+0x94>)
 8002f60:	f001 ff08 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f002 f86f 	bl	8005048 <HAL_Delay>
  for (uint8_t led = 0; led < 48; led++)
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	e7e9      	b.n	8002f46 <_Z5mode1v+0x46>
  }
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20001a24 	.word	0x20001a24
 8002f80:	200019f4 	.word	0x200019f4
 8002f84:	20001a00 	.word	0x20001a00
 8002f88:	20001a28 	.word	0x20001a28
 8002f8c:	20001a0c 	.word	0x20001a0c
 8002f90:	20001a18 	.word	0x20001a18
 8002f94:	20000368 	.word	0x20000368

08002f98 <_Z5mode2v>:

void mode2()
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  servo0.moveCont(0, 2048, servoPos0);
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <_Z5mode2v+0x44>)
 8002f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <_Z5mode2v+0x48>)
 8002faa:	f7fe f98d 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8002fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <_Z5mode2v+0x4c>)
 8002fb6:	f7fe fa45 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <_Z5mode2v+0x50>)
 8002fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4809      	ldr	r0, [pc, #36]	; (8002fec <_Z5mode2v+0x54>)
 8002fc8:	f7fe f97e 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8002fcc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <_Z5mode2v+0x58>)
 8002fd4:	f7fe fa91 	bl	80014fa <_ZN3STS9moveStop3Ess>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20001a24 	.word	0x20001a24
 8002fe0:	200019f4 	.word	0x200019f4
 8002fe4:	20001a00 	.word	0x20001a00
 8002fe8:	20001a28 	.word	0x20001a28
 8002fec:	20001a0c 	.word	0x20001a0c
 8002ff0:	20001a18 	.word	0x20001a18

08002ff4 <_Z5mode3v>:

void mode3()
{
 8002ff4:	b5b0      	push	{r4, r5, r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af02      	add	r7, sp, #8
  countLocal = millis - 22500;
 8002ffa:	4bae      	ldr	r3, [pc, #696]	; (80032b4 <_Z5mode3v+0x2c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f5a3 43af 	sub.w	r3, r3, #22400	; 0x5780
 8003004:	3b64      	subs	r3, #100	; 0x64
 8003006:	b29a      	uxth	r2, r3
 8003008:	4bab      	ldr	r3, [pc, #684]	; (80032b8 <_Z5mode3v+0x2c4>)
 800300a:	801a      	strh	r2, [r3, #0]
  if (ID == 1)
 800300c:	4bab      	ldr	r3, [pc, #684]	; (80032bc <_Z5mode3v+0x2c8>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 8110 	bne.w	8003236 <_Z5mode3v+0x242>
  {
    for (uint8_t led = 0; led < 16; led++)
 8003016:	2300      	movs	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	f200 8103 	bhi.w	8003228 <_Z5mode3v+0x234>
    {
      if (countLocal < 10000)
 8003022:	4ba5      	ldr	r3, [pc, #660]	; (80032b8 <_Z5mode3v+0x2c4>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	f242 720f 	movw	r2, #9999	; 0x270f
 800302a:	4293      	cmp	r3, r2
 800302c:	d850      	bhi.n	80030d0 <_Z5mode3v+0xdc>
      {
        servo0.moveCont(0, 2048, servoPos0);
 800302e:	4ba4      	ldr	r3, [pc, #656]	; (80032c0 <_Z5mode3v+0x2cc>)
 8003030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003038:	2100      	movs	r1, #0
 800303a:	48a2      	ldr	r0, [pc, #648]	; (80032c4 <_Z5mode3v+0x2d0>)
 800303c:	f7fe f944 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(0, 2048);
 8003040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003044:	2100      	movs	r1, #0
 8003046:	48a0      	ldr	r0, [pc, #640]	; (80032c8 <_Z5mode3v+0x2d4>)
 8003048:	f7fe f9fc 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(0, 2048, servoPos2);
 800304c:	4b9f      	ldr	r3, [pc, #636]	; (80032cc <_Z5mode3v+0x2d8>)
 800304e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003056:	2100      	movs	r1, #0
 8003058:	489d      	ldr	r0, [pc, #628]	; (80032d0 <_Z5mode3v+0x2dc>)
 800305a:	f7fe f935 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(0, 1800);
 800305e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003062:	2100      	movs	r1, #0
 8003064:	489b      	ldr	r0, [pc, #620]	; (80032d4 <_Z5mode3v+0x2e0>)
 8003066:	f7fe fa48 	bl	80014fa <_ZN3STS9moveStop3Ess>
        NeopixelTape.set_hsv(led, hue, 255, 255);
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	b299      	uxth	r1, r3
 800306e:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <_Z5mode3v+0x2e4>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b21a      	sxth	r2, r3
 8003074:	23ff      	movs	r3, #255	; 0xff
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	23ff      	movs	r3, #255	; 0xff
 800307a:	4898      	ldr	r0, [pc, #608]	; (80032dc <_Z5mode3v+0x2e8>)
 800307c:	f001 fdb0 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 16, hue, 255, calc.similarityNormal(led, 180, countLocal / 30));
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	b29b      	uxth	r3, r3
 8003084:	3310      	adds	r3, #16
 8003086:	b29c      	uxth	r4, r3
 8003088:	4b93      	ldr	r3, [pc, #588]	; (80032d8 <_Z5mode3v+0x2e4>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b21d      	sxth	r5, r3
 800308e:	4b8a      	ldr	r3, [pc, #552]	; (80032b8 <_Z5mode3v+0x2c4>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	4a93      	ldr	r2, [pc, #588]	; (80032e0 <_Z5mode3v+0x2ec>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	b29b      	uxth	r3, r3
 800309c:	79f9      	ldrb	r1, [r7, #7]
 800309e:	22b4      	movs	r2, #180	; 0xb4
 80030a0:	4890      	ldr	r0, [pc, #576]	; (80032e4 <_Z5mode3v+0x2f0>)
 80030a2:	f7fe fd19 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 80030a6:	4603      	mov	r3, r0
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	23ff      	movs	r3, #255	; 0xff
 80030ac:	462a      	mov	r2, r5
 80030ae:	4621      	mov	r1, r4
 80030b0:	488a      	ldr	r0, [pc, #552]	; (80032dc <_Z5mode3v+0x2e8>)
 80030b2:	f001 fd95 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 32, hue, 255, 0);
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3320      	adds	r3, #32
 80030bc:	b299      	uxth	r1, r3
 80030be:	4b86      	ldr	r3, [pc, #536]	; (80032d8 <_Z5mode3v+0x2e4>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b21a      	sxth	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	23ff      	movs	r3, #255	; 0xff
 80030ca:	4884      	ldr	r0, [pc, #528]	; (80032dc <_Z5mode3v+0x2e8>)
 80030cc:	f001 fd88 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      }
      if (countLocal > 10000 && countLocal < 12550)
 80030d0:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <_Z5mode3v+0x2c4>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80030d8:	4293      	cmp	r3, r2
 80030da:	d954      	bls.n	8003186 <_Z5mode3v+0x192>
 80030dc:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <_Z5mode3v+0x2c4>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f243 1205 	movw	r2, #12549	; 0x3105
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d84e      	bhi.n	8003186 <_Z5mode3v+0x192>
      {
        servo0.moveCont(0, 2048, servoPos0);
 80030e8:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <_Z5mode3v+0x2cc>)
 80030ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030f2:	2100      	movs	r1, #0
 80030f4:	4873      	ldr	r0, [pc, #460]	; (80032c4 <_Z5mode3v+0x2d0>)
 80030f6:	f7fe f8e7 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(0, 2048);
 80030fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030fe:	2100      	movs	r1, #0
 8003100:	4871      	ldr	r0, [pc, #452]	; (80032c8 <_Z5mode3v+0x2d4>)
 8003102:	f7fe f99f 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(0, 2048, servoPos2);
 8003106:	4b71      	ldr	r3, [pc, #452]	; (80032cc <_Z5mode3v+0x2d8>)
 8003108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003110:	2100      	movs	r1, #0
 8003112:	486f      	ldr	r0, [pc, #444]	; (80032d0 <_Z5mode3v+0x2dc>)
 8003114:	f7fe f8d8 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(0, 1800);
 8003118:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800311c:	2100      	movs	r1, #0
 800311e:	486d      	ldr	r0, [pc, #436]	; (80032d4 <_Z5mode3v+0x2e0>)
 8003120:	f7fe f9eb 	bl	80014fa <_ZN3STS9moveStop3Ess>
        NeopixelTape.set_hsv(led, hue, 255, 255);
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	b299      	uxth	r1, r3
 8003128:	4b6b      	ldr	r3, [pc, #428]	; (80032d8 <_Z5mode3v+0x2e4>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b21a      	sxth	r2, r3
 800312e:	23ff      	movs	r3, #255	; 0xff
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	23ff      	movs	r3, #255	; 0xff
 8003134:	4869      	ldr	r0, [pc, #420]	; (80032dc <_Z5mode3v+0x2e8>)
 8003136:	f001 fd53 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 16, hue, 255, 255);
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	b29b      	uxth	r3, r3
 800313e:	3310      	adds	r3, #16
 8003140:	b299      	uxth	r1, r3
 8003142:	4b65      	ldr	r3, [pc, #404]	; (80032d8 <_Z5mode3v+0x2e4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b21a      	sxth	r2, r3
 8003148:	23ff      	movs	r3, #255	; 0xff
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	23ff      	movs	r3, #255	; 0xff
 800314e:	4863      	ldr	r0, [pc, #396]	; (80032dc <_Z5mode3v+0x2e8>)
 8003150:	f001 fd46 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 32, hue, 255, (countLocal - 10000) / 10);
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	b29b      	uxth	r3, r3
 8003158:	3320      	adds	r3, #32
 800315a:	b299      	uxth	r1, r3
 800315c:	4b5e      	ldr	r3, [pc, #376]	; (80032d8 <_Z5mode3v+0x2e4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b218      	sxth	r0, r3
 8003162:	4b55      	ldr	r3, [pc, #340]	; (80032b8 <_Z5mode3v+0x2c4>)
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800316a:	3b10      	subs	r3, #16
 800316c:	4a5e      	ldr	r2, [pc, #376]	; (80032e8 <_Z5mode3v+0x2f4>)
 800316e:	fb82 4203 	smull	r4, r2, r2, r3
 8003172:	1092      	asrs	r2, r2, #2
 8003174:	17db      	asrs	r3, r3, #31
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	b21b      	sxth	r3, r3
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	23ff      	movs	r3, #255	; 0xff
 800317e:	4602      	mov	r2, r0
 8003180:	4856      	ldr	r0, [pc, #344]	; (80032dc <_Z5mode3v+0x2e8>)
 8003182:	f001 fd2d 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      }
      if (countLocal > 12550)
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <_Z5mode3v+0x2c4>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f243 1206 	movw	r2, #12550	; 0x3106
 800318e:	4293      	cmp	r3, r2
 8003190:	d946      	bls.n	8003220 <_Z5mode3v+0x22c>
      {
        servo0.moveCont(500, 2048, servoPos0);
 8003192:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <_Z5mode3v+0x2cc>)
 8003194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800319c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80031a0:	4848      	ldr	r0, [pc, #288]	; (80032c4 <_Z5mode3v+0x2d0>)
 80031a2:	f7fe f891 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo1.moveStop1(2000, 1024);
 80031a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80031ae:	4846      	ldr	r0, [pc, #280]	; (80032c8 <_Z5mode3v+0x2d4>)
 80031b0:	f7fe f948 	bl	8001444 <_ZN3STS9moveStop1Ess>
        servo2.moveCont(500, 2048, servoPos2);
 80031b4:	4b45      	ldr	r3, [pc, #276]	; (80032cc <_Z5mode3v+0x2d8>)
 80031b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80031c2:	4843      	ldr	r0, [pc, #268]	; (80032d0 <_Z5mode3v+0x2dc>)
 80031c4:	f7fe f880 	bl	80012c8 <_ZN3STS8moveContEtss>
        servo3.moveStop3(2000, 2800);
 80031c8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80031cc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80031d0:	4840      	ldr	r0, [pc, #256]	; (80032d4 <_Z5mode3v+0x2e0>)
 80031d2:	f7fe f992 	bl	80014fa <_ZN3STS9moveStop3Ess>
        NeopixelTape.set_hsv(led, hue, 255, 0);
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	b299      	uxth	r1, r3
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <_Z5mode3v+0x2e4>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	b21a      	sxth	r2, r3
 80031e0:	2300      	movs	r3, #0
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	23ff      	movs	r3, #255	; 0xff
 80031e6:	483d      	ldr	r0, [pc, #244]	; (80032dc <_Z5mode3v+0x2e8>)
 80031e8:	f001 fcfa 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 16, hue, 255, 0);
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3310      	adds	r3, #16
 80031f2:	b299      	uxth	r1, r3
 80031f4:	4b38      	ldr	r3, [pc, #224]	; (80032d8 <_Z5mode3v+0x2e4>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b21a      	sxth	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	23ff      	movs	r3, #255	; 0xff
 8003200:	4836      	ldr	r0, [pc, #216]	; (80032dc <_Z5mode3v+0x2e8>)
 8003202:	f001 fced 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.set_hsv(led + 32, hue, 255, 0);
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	b29b      	uxth	r3, r3
 800320a:	3320      	adds	r3, #32
 800320c:	b299      	uxth	r1, r3
 800320e:	4b32      	ldr	r3, [pc, #200]	; (80032d8 <_Z5mode3v+0x2e4>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b21a      	sxth	r2, r3
 8003214:	2300      	movs	r3, #0
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	23ff      	movs	r3, #255	; 0xff
 800321a:	4830      	ldr	r0, [pc, #192]	; (80032dc <_Z5mode3v+0x2e8>)
 800321c:	f001 fce0 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	3301      	adds	r3, #1
 8003224:	71fb      	strb	r3, [r7, #7]
 8003226:	e6f8      	b.n	800301a <_Z5mode3v+0x26>
      }
    }
    NeopixelTape.show();
 8003228:	482c      	ldr	r0, [pc, #176]	; (80032dc <_Z5mode3v+0x2e8>)
 800322a:	f001 fda3 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 800322e:	2001      	movs	r0, #1
 8003230:	f001 ff0a 	bl	8005048 <HAL_Delay>
    servo0.moveCont(500, 2048, servoPos0);
    servo1.moveStop1(500, 2048);
    servo2.moveCont(500, 2048, servoPos2);
    servo3.moveStop3(500, 1800);
  }
}
 8003234:	e039      	b.n	80032aa <_Z5mode3v+0x2b6>
    for (uint8_t led = 0; led < 48; led++)
 8003236:	2300      	movs	r3, #0
 8003238:	71bb      	strb	r3, [r7, #6]
 800323a:	79bb      	ldrb	r3, [r7, #6]
 800323c:	2b2f      	cmp	r3, #47	; 0x2f
 800323e:	d80c      	bhi.n	800325a <_Z5mode3v+0x266>
      NeopixelTape.set_hsv(led, 0, 0, 0);
 8003240:	79bb      	ldrb	r3, [r7, #6]
 8003242:	b299      	uxth	r1, r3
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	2200      	movs	r2, #0
 800324c:	4823      	ldr	r0, [pc, #140]	; (80032dc <_Z5mode3v+0x2e8>)
 800324e:	f001 fcc7 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 8003252:	79bb      	ldrb	r3, [r7, #6]
 8003254:	3301      	adds	r3, #1
 8003256:	71bb      	strb	r3, [r7, #6]
 8003258:	e7ef      	b.n	800323a <_Z5mode3v+0x246>
    NeopixelTape.show();
 800325a:	4820      	ldr	r0, [pc, #128]	; (80032dc <_Z5mode3v+0x2e8>)
 800325c:	f001 fd8a 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8003260:	2001      	movs	r0, #1
 8003262:	f001 fef1 	bl	8005048 <HAL_Delay>
    servo0.moveCont(500, 2048, servoPos0);
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <_Z5mode3v+0x2cc>)
 8003268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800326c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003270:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003274:	4813      	ldr	r0, [pc, #76]	; (80032c4 <_Z5mode3v+0x2d0>)
 8003276:	f7fe f827 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 2048);
 800327a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800327e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003282:	4811      	ldr	r0, [pc, #68]	; (80032c8 <_Z5mode3v+0x2d4>)
 8003284:	f7fe f8de 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2048, servoPos2);
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <_Z5mode3v+0x2d8>)
 800328a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003292:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003296:	480e      	ldr	r0, [pc, #56]	; (80032d0 <_Z5mode3v+0x2dc>)
 8003298:	f7fe f816 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 800329c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80032a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80032a4:	480b      	ldr	r0, [pc, #44]	; (80032d4 <_Z5mode3v+0x2e0>)
 80032a6:	f7fe f928 	bl	80014fa <_ZN3STS9moveStop3Ess>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bdb0      	pop	{r4, r5, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20001b3c 	.word	0x20001b3c
 80032b8:	20001b40 	.word	0x20001b40
 80032bc:	20001b34 	.word	0x20001b34
 80032c0:	20001a24 	.word	0x20001a24
 80032c4:	200019f4 	.word	0x200019f4
 80032c8:	20001a00 	.word	0x20001a00
 80032cc:	20001a28 	.word	0x20001a28
 80032d0:	20001a0c 	.word	0x20001a0c
 80032d4:	20001a18 	.word	0x20001a18
 80032d8:	20001b38 	.word	0x20001b38
 80032dc:	20000368 	.word	0x20000368
 80032e0:	88888889 	.word	0x88888889
 80032e4:	200019f0 	.word	0x200019f0
 80032e8:	66666667 	.word	0x66666667

080032ec <_Z5mode4v>:

void mode4()
{
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af02      	add	r7, sp, #8
  countLocal = millis - 37000;
 80032f2:	4b65      	ldr	r3, [pc, #404]	; (8003488 <_Z5mode4v+0x19c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
 80032fc:	3378      	adds	r3, #120	; 0x78
 80032fe:	b29a      	uxth	r2, r3
 8003300:	4b62      	ldr	r3, [pc, #392]	; (800348c <_Z5mode4v+0x1a0>)
 8003302:	801a      	strh	r2, [r3, #0]
  if (ID == 1)
 8003304:	4b62      	ldr	r3, [pc, #392]	; (8003490 <_Z5mode4v+0x1a4>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d139      	bne.n	8003380 <_Z5mode4v+0x94>
  {
    for (uint8_t led = 0; led < 48; led++)
 800330c:	2300      	movs	r3, #0
 800330e:	71fb      	strb	r3, [r7, #7]
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	2b2f      	cmp	r3, #47	; 0x2f
 8003314:	d80c      	bhi.n	8003330 <_Z5mode4v+0x44>
    {
      NeopixelTape.set_hsv(led, 0, 0, 0);
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	b299      	uxth	r1, r3
 800331a:	2300      	movs	r3, #0
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	2200      	movs	r2, #0
 8003322:	485c      	ldr	r0, [pc, #368]	; (8003494 <_Z5mode4v+0x1a8>)
 8003324:	f001 fc5c 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	3301      	adds	r3, #1
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	e7ef      	b.n	8003310 <_Z5mode4v+0x24>
    }
    NeopixelTape.show();
 8003330:	4858      	ldr	r0, [pc, #352]	; (8003494 <_Z5mode4v+0x1a8>)
 8003332:	f001 fd1f 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8003336:	2001      	movs	r0, #1
 8003338:	f001 fe86 	bl	8005048 <HAL_Delay>
    servo0.moveCont(500, 2048, servoPos0);
 800333c:	4b56      	ldr	r3, [pc, #344]	; (8003498 <_Z5mode4v+0x1ac>)
 800333e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003346:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800334a:	4854      	ldr	r0, [pc, #336]	; (800349c <_Z5mode4v+0x1b0>)
 800334c:	f7fd ffbc 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 1000);
 8003350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003354:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003358:	4851      	ldr	r0, [pc, #324]	; (80034a0 <_Z5mode4v+0x1b4>)
 800335a:	f7fe f873 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2048, servoPos2);
 800335e:	4b51      	ldr	r3, [pc, #324]	; (80034a4 <_Z5mode4v+0x1b8>)
 8003360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003368:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800336c:	484e      	ldr	r0, [pc, #312]	; (80034a8 <_Z5mode4v+0x1bc>)
 800336e:	f7fd ffab 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 3000);
 8003372:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003376:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800337a:	484c      	ldr	r0, [pc, #304]	; (80034ac <_Z5mode4v+0x1c0>)
 800337c:	f7fe f8bd 	bl	80014fa <_ZN3STS9moveStop3Ess>
  }
  if (ID == 2 && countLocal < 7500)
 8003380:	4b43      	ldr	r3, [pc, #268]	; (8003490 <_Z5mode4v+0x1a4>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d13e      	bne.n	8003406 <_Z5mode4v+0x11a>
 8003388:	4b40      	ldr	r3, [pc, #256]	; (800348c <_Z5mode4v+0x1a0>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8003390:	4293      	cmp	r3, r2
 8003392:	d838      	bhi.n	8003406 <_Z5mode4v+0x11a>
  {
    servo0.moveCont(1000, 6144, servoPos0);
 8003394:	4b40      	ldr	r3, [pc, #256]	; (8003498 <_Z5mode4v+0x1ac>)
 8003396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800339e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033a2:	483e      	ldr	r0, [pc, #248]	; (800349c <_Z5mode4v+0x1b0>)
 80033a4:	f7fd ff90 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 2048);
 80033a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033b0:	483b      	ldr	r0, [pc, #236]	; (80034a0 <_Z5mode4v+0x1b4>)
 80033b2:	f7fe f847 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(1000, 6144, servoPos2);
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <_Z5mode4v+0x1b8>)
 80033b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033bc:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80033c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c4:	4838      	ldr	r0, [pc, #224]	; (80034a8 <_Z5mode4v+0x1bc>)
 80033c6:	f7fd ff7f 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 80033ca:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80033ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80033d2:	4836      	ldr	r0, [pc, #216]	; (80034ac <_Z5mode4v+0x1c0>)
 80033d4:	f7fe f891 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 80033d8:	2300      	movs	r3, #0
 80033da:	71bb      	strb	r3, [r7, #6]
 80033dc:	79bb      	ldrb	r3, [r7, #6]
 80033de:	2b2f      	cmp	r3, #47	; 0x2f
 80033e0:	d811      	bhi.n	8003406 <_Z5mode4v+0x11a>
    {
      NeopixelTape.set_hsv(led, hue, 255, 100);
 80033e2:	79bb      	ldrb	r3, [r7, #6]
 80033e4:	b299      	uxth	r1, r3
 80033e6:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <_Z5mode4v+0x1c4>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b21a      	sxth	r2, r3
 80033ec:	2364      	movs	r3, #100	; 0x64
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	23ff      	movs	r3, #255	; 0xff
 80033f2:	4828      	ldr	r0, [pc, #160]	; (8003494 <_Z5mode4v+0x1a8>)
 80033f4:	f001 fbf4 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 80033f8:	4826      	ldr	r0, [pc, #152]	; (8003494 <_Z5mode4v+0x1a8>)
 80033fa:	f001 fcbb 	bl	8004d74 <_ZN7WS2812C4showEv>
    for (uint8_t led = 0; led < 48; led++)
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	3301      	adds	r3, #1
 8003402:	71bb      	strb	r3, [r7, #6]
 8003404:	e7ea      	b.n	80033dc <_Z5mode4v+0xf0>
    }
  }
  if (ID == 2 && countLocal > 7500)
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <_Z5mode4v+0x1a4>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d158      	bne.n	80034c0 <_Z5mode4v+0x1d4>
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <_Z5mode4v+0x1a0>)
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8003416:	4293      	cmp	r3, r2
 8003418:	d952      	bls.n	80034c0 <_Z5mode4v+0x1d4>
  {
    servo0.moveCont(1000, 6144, servoPos0);
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <_Z5mode4v+0x1ac>)
 800341c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003420:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003428:	481c      	ldr	r0, [pc, #112]	; (800349c <_Z5mode4v+0x1b0>)
 800342a:	f7fd ff4d 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(2000, 1000);
 800342e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003432:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003436:	481a      	ldr	r0, [pc, #104]	; (80034a0 <_Z5mode4v+0x1b4>)
 8003438:	f7fe f804 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(1000, 6144, servoPos2);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <_Z5mode4v+0x1b8>)
 800343e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003442:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800344a:	4817      	ldr	r0, [pc, #92]	; (80034a8 <_Z5mode4v+0x1bc>)
 800344c:	f7fd ff3c 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(2000, 3000);
 8003450:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003454:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003458:	4814      	ldr	r0, [pc, #80]	; (80034ac <_Z5mode4v+0x1c0>)
 800345a:	f7fe f84e 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 48; led++)
 800345e:	2300      	movs	r3, #0
 8003460:	717b      	strb	r3, [r7, #5]
 8003462:	797b      	ldrb	r3, [r7, #5]
 8003464:	2b2f      	cmp	r3, #47	; 0x2f
 8003466:	d825      	bhi.n	80034b4 <_Z5mode4v+0x1c8>
    {
      NeopixelTape.set_hsv(led, hue, 255, 0);
 8003468:	797b      	ldrb	r3, [r7, #5]
 800346a:	b299      	uxth	r1, r3
 800346c:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <_Z5mode4v+0x1c4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b21a      	sxth	r2, r3
 8003472:	2300      	movs	r3, #0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	23ff      	movs	r3, #255	; 0xff
 8003478:	4806      	ldr	r0, [pc, #24]	; (8003494 <_Z5mode4v+0x1a8>)
 800347a:	f001 fbb1 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 48; led++)
 800347e:	797b      	ldrb	r3, [r7, #5]
 8003480:	3301      	adds	r3, #1
 8003482:	717b      	strb	r3, [r7, #5]
 8003484:	e7ed      	b.n	8003462 <_Z5mode4v+0x176>
 8003486:	bf00      	nop
 8003488:	20001b3c 	.word	0x20001b3c
 800348c:	20001b40 	.word	0x20001b40
 8003490:	20001b34 	.word	0x20001b34
 8003494:	20000368 	.word	0x20000368
 8003498:	20001a24 	.word	0x20001a24
 800349c:	200019f4 	.word	0x200019f4
 80034a0:	20001a00 	.word	0x20001a00
 80034a4:	20001a28 	.word	0x20001a28
 80034a8:	20001a0c 	.word	0x20001a0c
 80034ac:	20001a18 	.word	0x20001a18
 80034b0:	20001b38 	.word	0x20001b38
    }
    NeopixelTape.show();
 80034b4:	488d      	ldr	r0, [pc, #564]	; (80036ec <_Z5mode4v+0x400>)
 80034b6:	f001 fc5d 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f001 fdc4 	bl	8005048 <HAL_Delay>
  }
  if (ID == 3 && countLocal < 7500)
 80034c0:	4b8b      	ldr	r3, [pc, #556]	; (80036f0 <_Z5mode4v+0x404>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d127      	bne.n	8003518 <_Z5mode4v+0x22c>
 80034c8:	4b8a      	ldr	r3, [pc, #552]	; (80036f4 <_Z5mode4v+0x408>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	f641 524b 	movw	r2, #7499	; 0x1d4b
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d821      	bhi.n	8003518 <_Z5mode4v+0x22c>
  {
    servo0.moveCont(500, 2048, servoPos0);
 80034d4:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <_Z5mode4v+0x40c>)
 80034d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034e2:	4886      	ldr	r0, [pc, #536]	; (80036fc <_Z5mode4v+0x410>)
 80034e4:	f7fd fef0 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(500, 2048);
 80034e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80034f0:	4883      	ldr	r0, [pc, #524]	; (8003700 <_Z5mode4v+0x414>)
 80034f2:	f7fd ffa7 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(500, 2048, servoPos2);
 80034f6:	4b83      	ldr	r3, [pc, #524]	; (8003704 <_Z5mode4v+0x418>)
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003500:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003504:	4880      	ldr	r0, [pc, #512]	; (8003708 <_Z5mode4v+0x41c>)
 8003506:	f7fd fedf 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(500, 1800);
 800350a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800350e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003512:	487e      	ldr	r0, [pc, #504]	; (800370c <_Z5mode4v+0x420>)
 8003514:	f7fd fff1 	bl	80014fa <_ZN3STS9moveStop3Ess>
  }
  if (ID == 3 && countLocal > 7500 && countLocal < 11800)
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <_Z5mode4v+0x404>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b03      	cmp	r3, #3
 800351e:	f040 8098 	bne.w	8003652 <_Z5mode4v+0x366>
 8003522:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <_Z5mode4v+0x408>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800352a:	4293      	cmp	r3, r2
 800352c:	f240 8091 	bls.w	8003652 <_Z5mode4v+0x366>
 8003530:	4b70      	ldr	r3, [pc, #448]	; (80036f4 <_Z5mode4v+0x408>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	f642 6217 	movw	r2, #11799	; 0x2e17
 8003538:	4293      	cmp	r3, r2
 800353a:	f200 808a 	bhi.w	8003652 <_Z5mode4v+0x366>
  {
    servo0.moveCont(0, 2048, servoPos0);
 800353e:	4b6e      	ldr	r3, [pc, #440]	; (80036f8 <_Z5mode4v+0x40c>)
 8003540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003548:	2100      	movs	r1, #0
 800354a:	486c      	ldr	r0, [pc, #432]	; (80036fc <_Z5mode4v+0x410>)
 800354c:	f7fd febc 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(0, 2048);
 8003550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003554:	2100      	movs	r1, #0
 8003556:	486a      	ldr	r0, [pc, #424]	; (8003700 <_Z5mode4v+0x414>)
 8003558:	f7fd ff74 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(0, 2048, servoPos2);
 800355c:	4b69      	ldr	r3, [pc, #420]	; (8003704 <_Z5mode4v+0x418>)
 800355e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003566:	2100      	movs	r1, #0
 8003568:	4867      	ldr	r0, [pc, #412]	; (8003708 <_Z5mode4v+0x41c>)
 800356a:	f7fd fead 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(0, 1800);
 800356e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003572:	2100      	movs	r1, #0
 8003574:	4865      	ldr	r0, [pc, #404]	; (800370c <_Z5mode4v+0x420>)
 8003576:	f7fd ffc0 	bl	80014fa <_ZN3STS9moveStop3Ess>
    moveRotation = calc.calcRotation((countLocal - 7500) / 11, gyro);
 800357a:	4b5e      	ldr	r3, [pc, #376]	; (80036f4 <_Z5mode4v+0x408>)
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	f5a3 53ea 	sub.w	r3, r3, #7488	; 0x1d40
 8003582:	3b0c      	subs	r3, #12
 8003584:	4a62      	ldr	r2, [pc, #392]	; (8003710 <_Z5mode4v+0x424>)
 8003586:	fb82 1203 	smull	r1, r2, r2, r3
 800358a:	1052      	asrs	r2, r2, #1
 800358c:	17db      	asrs	r3, r3, #31
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	b21b      	sxth	r3, r3
 8003592:	4a60      	ldr	r2, [pc, #384]	; (8003714 <_Z5mode4v+0x428>)
 8003594:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003598:	4619      	mov	r1, r3
 800359a:	485f      	ldr	r0, [pc, #380]	; (8003718 <_Z5mode4v+0x42c>)
 800359c:	f7fe fb60 	bl	8001c60 <_ZN4CALC12calcRotationEss>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b5d      	ldr	r3, [pc, #372]	; (800371c <_Z5mode4v+0x430>)
 80035a6:	801a      	strh	r2, [r3, #0]
    sendData(0, 0, moveRotation);
 80035a8:	4b5c      	ldr	r3, [pc, #368]	; (800371c <_Z5mode4v+0x430>)
 80035aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ae:	461a      	mov	r2, r3
 80035b0:	2100      	movs	r1, #0
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7ff f9fe 	bl	80029b4 <_Z8sendDataths>
    for (uint8_t led = 0; led < 16; led++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	713b      	strb	r3, [r7, #4]
 80035bc:	793b      	ldrb	r3, [r7, #4]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d841      	bhi.n	8003646 <_Z5mode4v+0x35a>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, (ledPos0 + 180) % 360, 90, hue, 100), 255, calc.similarityNormal(led, (ledPos0 + 180) % 360, 90));
 80035c2:	793b      	ldrb	r3, [r7, #4]
 80035c4:	b29c      	uxth	r4, r3
 80035c6:	4b56      	ldr	r3, [pc, #344]	; (8003720 <_Z5mode4v+0x434>)
 80035c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035cc:	33b4      	adds	r3, #180	; 0xb4
 80035ce:	4a55      	ldr	r2, [pc, #340]	; (8003724 <_Z5mode4v+0x438>)
 80035d0:	fb82 1203 	smull	r1, r2, r2, r3
 80035d4:	441a      	add	r2, r3
 80035d6:	1211      	asrs	r1, r2, #8
 80035d8:	17da      	asrs	r2, r3, #31
 80035da:	1a8a      	subs	r2, r1, r2
 80035dc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80035e0:	fb01 f202 	mul.w	r2, r1, r2
 80035e4:	1a9a      	subs	r2, r3, r2
 80035e6:	b212      	sxth	r2, r2
 80035e8:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <_Z5mode4v+0x43c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	7939      	ldrb	r1, [r7, #4]
 80035f0:	2064      	movs	r0, #100	; 0x64
 80035f2:	9001      	str	r0, [sp, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	235a      	movs	r3, #90	; 0x5a
 80035f8:	4847      	ldr	r0, [pc, #284]	; (8003718 <_Z5mode4v+0x42c>)
 80035fa:	f7fe f961 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 80035fe:	4603      	mov	r3, r0
 8003600:	461d      	mov	r5, r3
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <_Z5mode4v+0x434>)
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	33b4      	adds	r3, #180	; 0xb4
 800360a:	4a46      	ldr	r2, [pc, #280]	; (8003724 <_Z5mode4v+0x438>)
 800360c:	fb82 1203 	smull	r1, r2, r2, r3
 8003610:	441a      	add	r2, r3
 8003612:	1211      	asrs	r1, r2, #8
 8003614:	17da      	asrs	r2, r3, #31
 8003616:	1a8a      	subs	r2, r1, r2
 8003618:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800361c:	fb01 f202 	mul.w	r2, r1, r2
 8003620:	1a9a      	subs	r2, r3, r2
 8003622:	b212      	sxth	r2, r2
 8003624:	7939      	ldrb	r1, [r7, #4]
 8003626:	235a      	movs	r3, #90	; 0x5a
 8003628:	483b      	ldr	r0, [pc, #236]	; (8003718 <_Z5mode4v+0x42c>)
 800362a:	f7fe fa55 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 800362e:	4603      	mov	r3, r0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	23ff      	movs	r3, #255	; 0xff
 8003634:	462a      	mov	r2, r5
 8003636:	4621      	mov	r1, r4
 8003638:	482c      	ldr	r0, [pc, #176]	; (80036ec <_Z5mode4v+0x400>)
 800363a:	f001 fad1 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 800363e:	793b      	ldrb	r3, [r7, #4]
 8003640:	3301      	adds	r3, #1
 8003642:	713b      	strb	r3, [r7, #4]
 8003644:	e7ba      	b.n	80035bc <_Z5mode4v+0x2d0>
    }
    NeopixelTape.show();
 8003646:	4829      	ldr	r0, [pc, #164]	; (80036ec <_Z5mode4v+0x400>)
 8003648:	f001 fb94 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 800364c:	2001      	movs	r0, #1
 800364e:	f001 fcfb 	bl	8005048 <HAL_Delay>
  }
  if (ID == 3 && countLocal > 11800)
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <_Z5mode4v+0x404>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d144      	bne.n	80036e4 <_Z5mode4v+0x3f8>
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <_Z5mode4v+0x408>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	f642 6218 	movw	r2, #11800	; 0x2e18
 8003662:	4293      	cmp	r3, r2
 8003664:	d93e      	bls.n	80036e4 <_Z5mode4v+0x3f8>
  {
    sendData(0, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff f9a2 	bl	80029b4 <_Z8sendDataths>
    servo0.moveCont(2000, 3072, servoPos0);
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <_Z5mode4v+0x40c>)
 8003672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003676:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800367a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800367e:	481f      	ldr	r0, [pc, #124]	; (80036fc <_Z5mode4v+0x410>)
 8003680:	f7fd fe22 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo1.moveStop1(2000, 1024);
 8003684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003688:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800368c:	481c      	ldr	r0, [pc, #112]	; (8003700 <_Z5mode4v+0x414>)
 800368e:	f7fd fed9 	bl	8001444 <_ZN3STS9moveStop1Ess>
    servo2.moveCont(1000, 2048, servoPos2);
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <_Z5mode4v+0x418>)
 8003694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800369c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036a0:	4819      	ldr	r0, [pc, #100]	; (8003708 <_Z5mode4v+0x41c>)
 80036a2:	f7fd fe11 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo3.moveStop3(2000, 2800);
 80036a6:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80036aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80036ae:	4817      	ldr	r0, [pc, #92]	; (800370c <_Z5mode4v+0x420>)
 80036b0:	f7fd ff23 	bl	80014fa <_ZN3STS9moveStop3Ess>
    for (uint8_t led = 0; led < 16; led++)
 80036b4:	2300      	movs	r3, #0
 80036b6:	70fb      	strb	r3, [r7, #3]
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	d80c      	bhi.n	80036d8 <_Z5mode4v+0x3ec>
    {
      NeopixelTape.set_hsv(led, 0, 0, 0);
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	b299      	uxth	r1, r3
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	2200      	movs	r2, #0
 80036ca:	4808      	ldr	r0, [pc, #32]	; (80036ec <_Z5mode4v+0x400>)
 80036cc:	f001 fa88 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	3301      	adds	r3, #1
 80036d4:	70fb      	strb	r3, [r7, #3]
 80036d6:	e7ef      	b.n	80036b8 <_Z5mode4v+0x3cc>
    }
    NeopixelTape.show();
 80036d8:	4804      	ldr	r0, [pc, #16]	; (80036ec <_Z5mode4v+0x400>)
 80036da:	f001 fb4b 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 80036de:	2001      	movs	r0, #1
 80036e0:	f001 fcb2 	bl	8005048 <HAL_Delay>
  }
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdb0      	pop	{r4, r5, r7, pc}
 80036ec:	20000368 	.word	0x20000368
 80036f0:	20001b34 	.word	0x20001b34
 80036f4:	20001b40 	.word	0x20001b40
 80036f8:	20001a24 	.word	0x20001a24
 80036fc:	200019f4 	.word	0x200019f4
 8003700:	20001a00 	.word	0x20001a00
 8003704:	20001a28 	.word	0x20001a28
 8003708:	20001a0c 	.word	0x20001a0c
 800370c:	20001a18 	.word	0x20001a18
 8003710:	2e8ba2e9 	.word	0x2e8ba2e9
 8003714:	20001b32 	.word	0x20001b32
 8003718:	200019f0 	.word	0x200019f0
 800371c:	20001b42 	.word	0x20001b42
 8003720:	20001b2c 	.word	0x20001b2c
 8003724:	b60b60b7 	.word	0xb60b60b7
 8003728:	20001b38 	.word	0x20001b38

0800372c <_Z5mode5v>:

void mode5()
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af02      	add	r7, sp, #8
  servo0.moveCont(2000, 2048, servoPos0);
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <_Z5mode5v+0x84>)
 8003734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800373c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003740:	481c      	ldr	r0, [pc, #112]	; (80037b4 <_Z5mode5v+0x88>)
 8003742:	f7fd fdc1 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(2000, 2048);
 8003746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800374e:	481a      	ldr	r0, [pc, #104]	; (80037b8 <_Z5mode5v+0x8c>)
 8003750:	f7fd fe78 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(2000, 2048, servoPos2);
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <_Z5mode5v+0x90>)
 8003756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800375a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800375e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003762:	4817      	ldr	r0, [pc, #92]	; (80037c0 <_Z5mode5v+0x94>)
 8003764:	f7fd fdb0 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(2000, 1800);
 8003768:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800376c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003770:	4814      	ldr	r0, [pc, #80]	; (80037c4 <_Z5mode5v+0x98>)
 8003772:	f7fd fec2 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b2f      	cmp	r3, #47	; 0x2f
 800377e:	d80c      	bhi.n	800379a <_Z5mode5v+0x6e>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	b299      	uxth	r1, r3
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	2200      	movs	r2, #0
 800378c:	480e      	ldr	r0, [pc, #56]	; (80037c8 <_Z5mode5v+0x9c>)
 800378e:	f001 fa27 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	3301      	adds	r3, #1
 8003796:	71fb      	strb	r3, [r7, #7]
 8003798:	e7ef      	b.n	800377a <_Z5mode5v+0x4e>
  }
  NeopixelTape.show();
 800379a:	480b      	ldr	r0, [pc, #44]	; (80037c8 <_Z5mode5v+0x9c>)
 800379c:	f001 faea 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 80037a0:	2001      	movs	r0, #1
 80037a2:	f001 fc51 	bl	8005048 <HAL_Delay>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20001a24 	.word	0x20001a24
 80037b4:	200019f4 	.word	0x200019f4
 80037b8:	20001a00 	.word	0x20001a00
 80037bc:	20001a28 	.word	0x20001a28
 80037c0:	20001a0c 	.word	0x20001a0c
 80037c4:	20001a18 	.word	0x20001a18
 80037c8:	20000368 	.word	0x20000368

080037cc <_Z5mode6v>:

void mode6()
{
 80037cc:	b5b0      	push	{r4, r5, r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af02      	add	r7, sp, #8
  countLocal = millis - 60000;
 80037d2:	4b71      	ldr	r3, [pc, #452]	; (8003998 <_Z5mode6v+0x1cc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
 80037dc:	b29a      	uxth	r2, r3
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <_Z5mode6v+0x1d0>)
 80037e0:	801a      	strh	r2, [r3, #0]
  servo0.moveCont(0, 2048, servoPos0);
 80037e2:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <_Z5mode6v+0x1d4>)
 80037e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ec:	2100      	movs	r1, #0
 80037ee:	486d      	ldr	r0, [pc, #436]	; (80039a4 <_Z5mode6v+0x1d8>)
 80037f0:	f7fd fd6a 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 80037f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f8:	2100      	movs	r1, #0
 80037fa:	486b      	ldr	r0, [pc, #428]	; (80039a8 <_Z5mode6v+0x1dc>)
 80037fc:	f7fd fe22 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <_Z5mode6v+0x1e0>)
 8003802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800380a:	2100      	movs	r1, #0
 800380c:	4868      	ldr	r0, [pc, #416]	; (80039b0 <_Z5mode6v+0x1e4>)
 800380e:	f7fd fd5b 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8003812:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003816:	2100      	movs	r1, #0
 8003818:	4866      	ldr	r0, [pc, #408]	; (80039b4 <_Z5mode6v+0x1e8>)
 800381a:	f7fd fe6e 	bl	80014fa <_ZN3STS9moveStop3Ess>
  if ((countLocal / 3) % 360 > 300)
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <_Z5mode6v+0x1d0>)
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	4a65      	ldr	r2, [pc, #404]	; (80039b8 <_Z5mode6v+0x1ec>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	08da      	lsrs	r2, r3, #3
 800382e:	4963      	ldr	r1, [pc, #396]	; (80039bc <_Z5mode6v+0x1f0>)
 8003830:	fba1 1202 	umull	r1, r2, r1, r2
 8003834:	0892      	lsrs	r2, r2, #2
 8003836:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800383a:	fb01 f202 	mul.w	r2, r1, r2
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	b29b      	uxth	r3, r3
 8003842:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003846:	d914      	bls.n	8003872 <_Z5mode6v+0xa6>
  {
    for (uint8_t led = 32; led < 48; led++)
 8003848:	2320      	movs	r3, #32
 800384a:	71fb      	strb	r3, [r7, #7]
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	2b2f      	cmp	r3, #47	; 0x2f
 8003850:	f200 8098 	bhi.w	8003984 <_Z5mode6v+0x1b8>
    {
      NeopixelTape.set_hsv(led, hue, 255, 255);
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	b299      	uxth	r1, r3
 8003858:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <_Z5mode6v+0x1f4>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	b21a      	sxth	r2, r3
 800385e:	23ff      	movs	r3, #255	; 0xff
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	23ff      	movs	r3, #255	; 0xff
 8003864:	4857      	ldr	r0, [pc, #348]	; (80039c4 <_Z5mode6v+0x1f8>)
 8003866:	f001 f9bb 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 32; led < 48; led++)
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	3301      	adds	r3, #1
 800386e:	71fb      	strb	r3, [r7, #7]
 8003870:	e7ec      	b.n	800384c <_Z5mode6v+0x80>
    }
  }
  else if ((countLocal / 3) % 360 > 30)
 8003872:	4b4a      	ldr	r3, [pc, #296]	; (800399c <_Z5mode6v+0x1d0>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	4a50      	ldr	r2, [pc, #320]	; (80039b8 <_Z5mode6v+0x1ec>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	494e      	ldr	r1, [pc, #312]	; (80039bc <_Z5mode6v+0x1f0>)
 8003884:	fba1 1202 	umull	r1, r2, r1, r2
 8003888:	0892      	lsrs	r2, r2, #2
 800388a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800388e:	fb01 f202 	mul.w	r2, r1, r2
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b1e      	cmp	r3, #30
 8003898:	d946      	bls.n	8003928 <_Z5mode6v+0x15c>
  {
    for (uint8_t led = 0; led < 16; led++)
 800389a:	2300      	movs	r3, #0
 800389c:	71bb      	strb	r3, [r7, #6]
 800389e:	79bb      	ldrb	r3, [r7, #6]
 80038a0:	2b0f      	cmp	r3, #15
 80038a2:	d86f      	bhi.n	8003984 <_Z5mode6v+0x1b8>
    {
      NeopixelTape.set_hsv(led, hue, 255, 255);
 80038a4:	79bb      	ldrb	r3, [r7, #6]
 80038a6:	b299      	uxth	r1, r3
 80038a8:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <_Z5mode6v+0x1f4>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b21a      	sxth	r2, r3
 80038ae:	23ff      	movs	r3, #255	; 0xff
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	23ff      	movs	r3, #255	; 0xff
 80038b4:	4843      	ldr	r0, [pc, #268]	; (80039c4 <_Z5mode6v+0x1f8>)
 80038b6:	f001 f993 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.set_hsv(led + 16, hue, 255, calc.similarityNormal(led, 180, (countLocal / 3) % 360));
 80038ba:	79bb      	ldrb	r3, [r7, #6]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3310      	adds	r3, #16
 80038c0:	b29c      	uxth	r4, r3
 80038c2:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <_Z5mode6v+0x1f4>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b21d      	sxth	r5, r3
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <_Z5mode6v+0x1d0>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	4a3a      	ldr	r2, [pc, #232]	; (80039b8 <_Z5mode6v+0x1ec>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	08da      	lsrs	r2, r3, #3
 80038d8:	4938      	ldr	r1, [pc, #224]	; (80039bc <_Z5mode6v+0x1f0>)
 80038da:	fba1 1202 	umull	r1, r2, r1, r2
 80038de:	0892      	lsrs	r2, r2, #2
 80038e0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80038e4:	fb01 f202 	mul.w	r2, r1, r2
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	79b9      	ldrb	r1, [r7, #6]
 80038ee:	22b4      	movs	r2, #180	; 0xb4
 80038f0:	4835      	ldr	r0, [pc, #212]	; (80039c8 <_Z5mode6v+0x1fc>)
 80038f2:	f7fe f8f1 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 80038f6:	4603      	mov	r3, r0
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	23ff      	movs	r3, #255	; 0xff
 80038fc:	462a      	mov	r2, r5
 80038fe:	4621      	mov	r1, r4
 8003900:	4830      	ldr	r0, [pc, #192]	; (80039c4 <_Z5mode6v+0x1f8>)
 8003902:	f001 f96d 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.set_hsv(led + 32, hue, 255, 0);
 8003906:	79bb      	ldrb	r3, [r7, #6]
 8003908:	b29b      	uxth	r3, r3
 800390a:	3320      	adds	r3, #32
 800390c:	b299      	uxth	r1, r3
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <_Z5mode6v+0x1f4>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b21a      	sxth	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	23ff      	movs	r3, #255	; 0xff
 800391a:	482a      	ldr	r0, [pc, #168]	; (80039c4 <_Z5mode6v+0x1f8>)
 800391c:	f001 f960 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 8003920:	79bb      	ldrb	r3, [r7, #6]
 8003922:	3301      	adds	r3, #1
 8003924:	71bb      	strb	r3, [r7, #6]
 8003926:	e7ba      	b.n	800389e <_Z5mode6v+0xd2>
    }
  }
  else
  {
    for (uint8_t led = 0; led < 16; led++)
 8003928:	2300      	movs	r3, #0
 800392a:	717b      	strb	r3, [r7, #5]
 800392c:	797b      	ldrb	r3, [r7, #5]
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d828      	bhi.n	8003984 <_Z5mode6v+0x1b8>
    {
      NeopixelTape.set_hsv(led, hue, 255, 0);
 8003932:	797b      	ldrb	r3, [r7, #5]
 8003934:	b299      	uxth	r1, r3
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <_Z5mode6v+0x1f4>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b21a      	sxth	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	23ff      	movs	r3, #255	; 0xff
 8003942:	4820      	ldr	r0, [pc, #128]	; (80039c4 <_Z5mode6v+0x1f8>)
 8003944:	f001 f94c 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.set_hsv(led + 16, hue, 255, 0);
 8003948:	797b      	ldrb	r3, [r7, #5]
 800394a:	b29b      	uxth	r3, r3
 800394c:	3310      	adds	r3, #16
 800394e:	b299      	uxth	r1, r3
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <_Z5mode6v+0x1f4>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b21a      	sxth	r2, r3
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	23ff      	movs	r3, #255	; 0xff
 800395c:	4819      	ldr	r0, [pc, #100]	; (80039c4 <_Z5mode6v+0x1f8>)
 800395e:	f001 f93f 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.set_hsv(led + 32, hue, 255, 0);
 8003962:	797b      	ldrb	r3, [r7, #5]
 8003964:	b29b      	uxth	r3, r3
 8003966:	3320      	adds	r3, #32
 8003968:	b299      	uxth	r1, r3
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <_Z5mode6v+0x1f4>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b21a      	sxth	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	23ff      	movs	r3, #255	; 0xff
 8003976:	4813      	ldr	r0, [pc, #76]	; (80039c4 <_Z5mode6v+0x1f8>)
 8003978:	f001 f932 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    for (uint8_t led = 0; led < 16; led++)
 800397c:	797b      	ldrb	r3, [r7, #5]
 800397e:	3301      	adds	r3, #1
 8003980:	717b      	strb	r3, [r7, #5]
 8003982:	e7d3      	b.n	800392c <_Z5mode6v+0x160>
    }
  }
  NeopixelTape.show();
 8003984:	480f      	ldr	r0, [pc, #60]	; (80039c4 <_Z5mode6v+0x1f8>)
 8003986:	f001 f9f5 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 800398a:	2001      	movs	r0, #1
 800398c:	f001 fb5c 	bl	8005048 <HAL_Delay>
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}
 8003998:	20001b3c 	.word	0x20001b3c
 800399c:	20001b40 	.word	0x20001b40
 80039a0:	20001a24 	.word	0x20001a24
 80039a4:	200019f4 	.word	0x200019f4
 80039a8:	20001a00 	.word	0x20001a00
 80039ac:	20001a28 	.word	0x20001a28
 80039b0:	20001a0c 	.word	0x20001a0c
 80039b4:	20001a18 	.word	0x20001a18
 80039b8:	aaaaaaab 	.word	0xaaaaaaab
 80039bc:	16c16c17 	.word	0x16c16c17
 80039c0:	20001b38 	.word	0x20001b38
 80039c4:	20000368 	.word	0x20000368
 80039c8:	200019f0 	.word	0x200019f0

080039cc <_Z5mode7v>:

void mode7()
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af02      	add	r7, sp, #8
  static uint16_t randomNum = 0;
  randomNum += 47;
 80039d2:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <_Z5mode7v+0xd0>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	332f      	adds	r3, #47	; 0x2f
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <_Z5mode7v+0xd0>)
 80039dc:	801a      	strh	r2, [r3, #0]
  servo0.moveCont(0, 2000 + randomNum % 128, servoPos0);
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <_Z5mode7v+0xd0>)
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	b21a      	sxth	r2, r3
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <_Z5mode7v+0xd4>)
 80039f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f6:	2100      	movs	r1, #0
 80039f8:	482a      	ldr	r0, [pc, #168]	; (8003aa4 <_Z5mode7v+0xd8>)
 80039fa:	f7fd fc65 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2000 + randomNum % 128);
 80039fe:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <_Z5mode7v+0xd0>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b21b      	sxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	4824      	ldr	r0, [pc, #144]	; (8003aa8 <_Z5mode7v+0xdc>)
 8003a16:	f7fd fd15 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2000 + randomNum % 128, servoPos2);
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <_Z5mode7v+0xd0>)
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	b21a      	sxth	r2, r3
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <_Z5mode7v+0xe0>)
 8003a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a32:	2100      	movs	r1, #0
 8003a34:	481e      	ldr	r0, [pc, #120]	; (8003ab0 <_Z5mode7v+0xe4>)
 8003a36:	f7fd fc47 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 2000 + randomNum % 128);
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <_Z5mode7v+0xd0>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4818      	ldr	r0, [pc, #96]	; (8003ab4 <_Z5mode7v+0xe8>)
 8003a52:	f7fd fd52 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	71fb      	strb	r3, [r7, #7]
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8003a5e:	d813      	bhi.n	8003a88 <_Z5mode7v+0xbc>
  {
    NeopixelTape.set_hsv(led, randomNum, randomNum, randomNum);
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	b299      	uxth	r1, r3
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <_Z5mode7v+0xd0>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b21a      	sxth	r2, r3
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <_Z5mode7v+0xd0>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b218      	sxth	r0, r3
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <_Z5mode7v+0xd0>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b21b      	sxth	r3, r3
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	4603      	mov	r3, r0
 8003a7a:	480f      	ldr	r0, [pc, #60]	; (8003ab8 <_Z5mode7v+0xec>)
 8003a7c:	f001 f8b0 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	3301      	adds	r3, #1
 8003a84:	71fb      	strb	r3, [r7, #7]
 8003a86:	e7e8      	b.n	8003a5a <_Z5mode7v+0x8e>
  }
  NeopixelTape.show();
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <_Z5mode7v+0xec>)
 8003a8a:	f001 f973 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f001 fada 	bl	8005048 <HAL_Delay>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20001b58 	.word	0x20001b58
 8003aa0:	20001a24 	.word	0x20001a24
 8003aa4:	200019f4 	.word	0x200019f4
 8003aa8:	20001a00 	.word	0x20001a00
 8003aac:	20001a28 	.word	0x20001a28
 8003ab0:	20001a0c 	.word	0x20001a0c
 8003ab4:	20001a18 	.word	0x20001a18
 8003ab8:	20000368 	.word	0x20000368

08003abc <_Z5mode8v>:

void mode8()
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af02      	add	r7, sp, #8
  for (uint8_t led = 0; led < 48; led++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	71fb      	strb	r3, [r7, #7]
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	2b2f      	cmp	r3, #47	; 0x2f
 8003aca:	d80c      	bhi.n	8003ae6 <_Z5mode8v+0x2a>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	b299      	uxth	r1, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <_Z5mode8v+0x40>)
 8003ada:	f001 f881 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	71fb      	strb	r3, [r7, #7]
 8003ae4:	e7ef      	b.n	8003ac6 <_Z5mode8v+0xa>
  }
  NeopixelTape.show();
 8003ae6:	4805      	ldr	r0, [pc, #20]	; (8003afc <_Z5mode8v+0x40>)
 8003ae8:	f001 f944 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003aec:	2001      	movs	r0, #1
 8003aee:	f001 faab 	bl	8005048 <HAL_Delay>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000368 	.word	0x20000368

08003b00 <_Z5mode9v>:

void mode9()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <_Z5mode9v+0x7c>)
 8003b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b10:	2100      	movs	r1, #0
 8003b12:	481b      	ldr	r0, [pc, #108]	; (8003b80 <_Z5mode9v+0x80>)
 8003b14:	f7fd fbd8 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8003b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4819      	ldr	r0, [pc, #100]	; (8003b84 <_Z5mode9v+0x84>)
 8003b20:	f7fd fc90 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8003b24:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <_Z5mode9v+0x88>)
 8003b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4816      	ldr	r0, [pc, #88]	; (8003b8c <_Z5mode9v+0x8c>)
 8003b32:	f7fd fbc9 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8003b36:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4814      	ldr	r0, [pc, #80]	; (8003b90 <_Z5mode9v+0x90>)
 8003b3e:	f7fd fcdc 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b2f      	cmp	r3, #47	; 0x2f
 8003b4a:	d80c      	bhi.n	8003b66 <_Z5mode9v+0x66>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	b299      	uxth	r1, r3
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	2200      	movs	r2, #0
 8003b58:	480e      	ldr	r0, [pc, #56]	; (8003b94 <_Z5mode9v+0x94>)
 8003b5a:	f001 f841 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	3301      	adds	r3, #1
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	e7ef      	b.n	8003b46 <_Z5mode9v+0x46>
  }
  NeopixelTape.show();
 8003b66:	480b      	ldr	r0, [pc, #44]	; (8003b94 <_Z5mode9v+0x94>)
 8003b68:	f001 f904 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f001 fa6b 	bl	8005048 <HAL_Delay>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20001a24 	.word	0x20001a24
 8003b80:	200019f4 	.word	0x200019f4
 8003b84:	20001a00 	.word	0x20001a00
 8003b88:	20001a28 	.word	0x20001a28
 8003b8c:	20001a0c 	.word	0x20001a0c
 8003b90:	20001a18 	.word	0x20001a18
 8003b94:	20000368 	.word	0x20000368

08003b98 <_Z6mode10v>:

void mode10()
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af02      	add	r7, sp, #8
  servo0.moveCont(0, 2048, servoPos0);
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <_Z6mode10v+0x7c>)
 8003ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ba8:	2100      	movs	r1, #0
 8003baa:	481b      	ldr	r0, [pc, #108]	; (8003c18 <_Z6mode10v+0x80>)
 8003bac:	f7fd fb8c 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 8003bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4819      	ldr	r0, [pc, #100]	; (8003c1c <_Z6mode10v+0x84>)
 8003bb8:	f7fd fc44 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 2048, servoPos2);
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <_Z6mode10v+0x88>)
 8003bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4816      	ldr	r0, [pc, #88]	; (8003c24 <_Z6mode10v+0x8c>)
 8003bca:	f7fd fb7d 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1800);
 8003bce:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4814      	ldr	r0, [pc, #80]	; (8003c28 <_Z6mode10v+0x90>)
 8003bd6:	f7fd fc90 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	71fb      	strb	r3, [r7, #7]
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2b2f      	cmp	r3, #47	; 0x2f
 8003be2:	d80c      	bhi.n	8003bfe <_Z6mode10v+0x66>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	b299      	uxth	r1, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	2200      	movs	r2, #0
 8003bf0:	480e      	ldr	r0, [pc, #56]	; (8003c2c <_Z6mode10v+0x94>)
 8003bf2:	f000 fff5 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	71fb      	strb	r3, [r7, #7]
 8003bfc:	e7ef      	b.n	8003bde <_Z6mode10v+0x46>
  }
  NeopixelTape.show();
 8003bfe:	480b      	ldr	r0, [pc, #44]	; (8003c2c <_Z6mode10v+0x94>)
 8003c00:	f001 f8b8 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8003c04:	2001      	movs	r0, #1
 8003c06:	f001 fa1f 	bl	8005048 <HAL_Delay>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20001a24 	.word	0x20001a24
 8003c18:	200019f4 	.word	0x200019f4
 8003c1c:	20001a00 	.word	0x20001a00
 8003c20:	20001a28 	.word	0x20001a28
 8003c24:	20001a0c 	.word	0x20001a0c
 8003c28:	20001a18 	.word	0x20001a18
 8003c2c:	20000368 	.word	0x20000368

08003c30 <_Z6mode11v>:

void mode11()
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af02      	add	r7, sp, #8
  countLocal = millis - 208500;
 8003c36:	4b5d      	ldr	r3, [pc, #372]	; (8003dac <_Z6mode11v+0x17c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f5a3 5339 	sub.w	r3, r3, #11840	; 0x2e40
 8003c40:	3b34      	subs	r3, #52	; 0x34
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <_Z6mode11v+0x180>)
 8003c46:	801a      	strh	r2, [r3, #0]
  static uint8_t status = 0;
  static uint16_t degree = 0;

  servo0.moveCont(1000, countLocal % 2000 * 2, servoPos0);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <_Z6mode11v+0x180>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	4a59      	ldr	r2, [pc, #356]	; (8003db4 <_Z6mode11v+0x184>)
 8003c4e:	fba2 1203 	umull	r1, r2, r2, r3
 8003c52:	09d2      	lsrs	r2, r2, #7
 8003c54:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c58:	fb01 f202 	mul.w	r2, r1, r2
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	b21a      	sxth	r2, r3
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <_Z6mode11v+0x188>)
 8003c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c70:	4852      	ldr	r0, [pc, #328]	; (8003dbc <_Z6mode11v+0x18c>)
 8003c72:	f7fd fb29 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(1000, countLocal % 2000 + 1100);
 8003c76:	4b4e      	ldr	r3, [pc, #312]	; (8003db0 <_Z6mode11v+0x180>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	4a4e      	ldr	r2, [pc, #312]	; (8003db4 <_Z6mode11v+0x184>)
 8003c7c:	fba2 1203 	umull	r1, r2, r2, r3
 8003c80:	09d2      	lsrs	r2, r2, #7
 8003c82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c86:	fb01 f202 	mul.w	r2, r1, r2
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c9c:	4848      	ldr	r0, [pc, #288]	; (8003dc0 <_Z6mode11v+0x190>)
 8003c9e:	f7fd fbd1 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(1000, countLocal % 2000 * 2, servoPos2);
 8003ca2:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <_Z6mode11v+0x180>)
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <_Z6mode11v+0x184>)
 8003ca8:	fba2 1203 	umull	r1, r2, r2, r3
 8003cac:	09d2      	lsrs	r2, r2, #7
 8003cae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003cb2:	fb01 f202 	mul.w	r2, r1, r2
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	b21a      	sxth	r2, r3
 8003cc0:	4b40      	ldr	r3, [pc, #256]	; (8003dc4 <_Z6mode11v+0x194>)
 8003cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cca:	483f      	ldr	r0, [pc, #252]	; (8003dc8 <_Z6mode11v+0x198>)
 8003ccc:	f7fd fafc 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(1000, countLocal % 2000 / 2 + 1900);
 8003cd0:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <_Z6mode11v+0x180>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	4a37      	ldr	r2, [pc, #220]	; (8003db4 <_Z6mode11v+0x184>)
 8003cd6:	fba2 1203 	umull	r1, r2, r2, r3
 8003cda:	09d2      	lsrs	r2, r2, #7
 8003cdc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003ce0:	fb01 f202 	mul.w	r2, r1, r2
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b21b      	sxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cfa:	4834      	ldr	r0, [pc, #208]	; (8003dcc <_Z6mode11v+0x19c>)
 8003cfc:	f7fd fbfd 	bl	80014fa <_ZN3STS9moveStop3Ess>

  for (uint8_t led = 0; led < 48; led++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	71fb      	strb	r3, [r7, #7]
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b2f      	cmp	r3, #47	; 0x2f
 8003d08:	d84c      	bhi.n	8003da4 <_Z6mode11v+0x174>
  {
    NeopixelTape.set_hsv(led, calc.similarityPeak(led, (countLocal / 3) % 360, 90, countLocal % 256, 50), 255, calc.similarityNormal(led, (countLocal / 3) % 360, 90));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	b29c      	uxth	r4, r3
 8003d0e:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <_Z6mode11v+0x180>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <_Z6mode11v+0x1a0>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	492d      	ldr	r1, [pc, #180]	; (8003dd4 <_Z6mode11v+0x1a4>)
 8003d20:	fba1 1202 	umull	r1, r2, r1, r2
 8003d24:	0892      	lsrs	r2, r2, #2
 8003d26:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003d2a:	fb01 f202 	mul.w	r2, r1, r2
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b21a      	sxth	r2, r3
 8003d34:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <_Z6mode11v+0x180>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	79f9      	ldrb	r1, [r7, #7]
 8003d3e:	2032      	movs	r0, #50	; 0x32
 8003d40:	9001      	str	r0, [sp, #4]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	235a      	movs	r3, #90	; 0x5a
 8003d46:	4824      	ldr	r0, [pc, #144]	; (8003dd8 <_Z6mode11v+0x1a8>)
 8003d48:	f7fd fcda 	bl	8001700 <_ZN4CALC14similarityPeakEhsttt>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <_Z6mode11v+0x180>)
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <_Z6mode11v+0x1a0>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	08da      	lsrs	r2, r3, #3
 8003d60:	491c      	ldr	r1, [pc, #112]	; (8003dd4 <_Z6mode11v+0x1a4>)
 8003d62:	fba1 1202 	umull	r1, r2, r1, r2
 8003d66:	0892      	lsrs	r2, r2, #2
 8003d68:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003d6c:	fb01 f202 	mul.w	r2, r1, r2
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	79f9      	ldrb	r1, [r7, #7]
 8003d78:	235a      	movs	r3, #90	; 0x5a
 8003d7a:	4817      	ldr	r0, [pc, #92]	; (8003dd8 <_Z6mode11v+0x1a8>)
 8003d7c:	f7fd feac 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003d80:	4603      	mov	r3, r0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	23ff      	movs	r3, #255	; 0xff
 8003d86:	462a      	mov	r2, r5
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4814      	ldr	r0, [pc, #80]	; (8003ddc <_Z6mode11v+0x1ac>)
 8003d8c:	f000 ff28 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
    NeopixelTape.show();
 8003d90:	4812      	ldr	r0, [pc, #72]	; (8003ddc <_Z6mode11v+0x1ac>)
 8003d92:	f000 ffef 	bl	8004d74 <_ZN7WS2812C4showEv>
    HAL_Delay(1);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f001 f956 	bl	8005048 <HAL_Delay>
  for (uint8_t led = 0; led < 48; led++)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	e7af      	b.n	8003d04 <_Z6mode11v+0xd4>
  }
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bdb0      	pop	{r4, r5, r7, pc}
 8003dac:	20001b3c 	.word	0x20001b3c
 8003db0:	20001b40 	.word	0x20001b40
 8003db4:	10624dd3 	.word	0x10624dd3
 8003db8:	20001a24 	.word	0x20001a24
 8003dbc:	200019f4 	.word	0x200019f4
 8003dc0:	20001a00 	.word	0x20001a00
 8003dc4:	20001a28 	.word	0x20001a28
 8003dc8:	20001a0c 	.word	0x20001a0c
 8003dcc:	20001a18 	.word	0x20001a18
 8003dd0:	aaaaaaab 	.word	0xaaaaaaab
 8003dd4:	16c16c17 	.word	0x16c16c17
 8003dd8:	200019f0 	.word	0x200019f0
 8003ddc:	20000368 	.word	0x20000368

08003de0 <_Z6mode12v>:

void mode12()
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af02      	add	r7, sp, #8
  countLocal = millis - 222500;
 8003de6:	4b6b      	ldr	r3, [pc, #428]	; (8003f94 <_Z6mode12v+0x1b4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	f5a3 43ca 	sub.w	r3, r3, #25856	; 0x6500
 8003df0:	3b24      	subs	r3, #36	; 0x24
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <_Z6mode12v+0x1b8>)
 8003df6:	801a      	strh	r2, [r3, #0]
  static int16_t i = 8;
  if (countLocal % 6000 < 3000)
 8003df8:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <_Z6mode12v+0x1b8>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <_Z6mode12v+0x1bc>)
 8003dfe:	fba2 1203 	umull	r1, r2, r2, r3
 8003e02:	09d2      	lsrs	r2, r2, #7
 8003e04:	f241 7170 	movw	r1, #6000	; 0x1770
 8003e08:	fb01 f202 	mul.w	r2, r1, r2
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003e14:	4293      	cmp	r3, r2
 8003e16:	f200 80d9 	bhi.w	8003fcc <_Z6mode12v+0x1ec>
  {
    servo0.moveCont(1500, 8191, servoPos0);
 8003e1a:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <_Z6mode12v+0x1c0>)
 8003e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e20:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003e24:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003e28:	485e      	ldr	r0, [pc, #376]	; (8003fa4 <_Z6mode12v+0x1c4>)
 8003e2a:	f7fd fa4d 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo2.moveCont(1500, 8191, servoPos2);
 8003e2e:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <_Z6mode12v+0x1c8>)
 8003e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e34:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8003e38:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003e3c:	485b      	ldr	r0, [pc, #364]	; (8003fac <_Z6mode12v+0x1cc>)
 8003e3e:	f7fd fa43 	bl	80012c8 <_ZN3STS8moveContEtss>

    if (i != 0)
 8003e42:	4b5b      	ldr	r3, [pc, #364]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d017      	beq.n	8003e7c <_Z6mode12v+0x9c>
    {
      i += 8;
 8003e4c:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3308      	adds	r3, #8
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	b21a      	sxth	r2, r3
 8003e5a:	4b55      	ldr	r3, [pc, #340]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e5c:	801a      	strh	r2, [r3, #0]
      if (i >= 180)
 8003e5e:	4b54      	ldr	r3, [pc, #336]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e64:	2bb3      	cmp	r3, #179	; 0xb3
 8003e66:	dd09      	ble.n	8003e7c <_Z6mode12v+0x9c>
      {
        i -= 360;
 8003e68:	4b51      	ldr	r3, [pc, #324]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e7a:	801a      	strh	r2, [r3, #0]
      }
    }

    moveRotation = calc.calcRotation(i, gyro);
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <_Z6mode12v+0x1d0>)
 8003e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e82:	4a4c      	ldr	r2, [pc, #304]	; (8003fb4 <_Z6mode12v+0x1d4>)
 8003e84:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	484b      	ldr	r0, [pc, #300]	; (8003fb8 <_Z6mode12v+0x1d8>)
 8003e8c:	f7fd fee8 	bl	8001c60 <_ZN4CALC12calcRotationEss>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003e96:	801a      	strh	r2, [r3, #0]

    if (moveRotation > 0)
 8003e98:	4b48      	ldr	r3, [pc, #288]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	dd08      	ble.n	8003eb4 <_Z6mode12v+0xd4>
    {
      moveRotation += 10;
 8003ea2:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	330a      	adds	r3, #10
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	b21a      	sxth	r2, r3
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003eb2:	801a      	strh	r2, [r3, #0]
    }
    if (moveRotation < 0)
 8003eb4:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da08      	bge.n	8003ed0 <_Z6mode12v+0xf0>
    {
      moveRotation -= 10;
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b0a      	subs	r3, #10
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b21a      	sxth	r2, r3
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003ece:	801a      	strh	r2, [r3, #0]
    }

    sendData(0, 0, moveRotation);
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <_Z6mode12v+0x1dc>)
 8003ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2000      	movs	r0, #0
 8003edc:	f7fe fd6a 	bl	80029b4 <_Z8sendDataths>

    for (uint8_t led = 0; led < 16; led++)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	71fb      	strb	r3, [r7, #7]
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	2b0f      	cmp	r3, #15
 8003ee8:	d826      	bhi.n	8003f38 <_Z6mode12v+0x158>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos0, 90, 128, 100), 255, calc.similarityNormal(led, ledPos0, 90));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	b29c      	uxth	r4, r3
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <_Z6mode12v+0x1e0>)
 8003ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ef4:	79f9      	ldrb	r1, [r7, #7]
 8003ef6:	2364      	movs	r3, #100	; 0x64
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	235a      	movs	r3, #90	; 0x5a
 8003f00:	482d      	ldr	r0, [pc, #180]	; (8003fb8 <_Z6mode12v+0x1d8>)
 8003f02:	f7fd fcdd 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461d      	mov	r5, r3
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <_Z6mode12v+0x1e0>)
 8003f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f10:	79f9      	ldrb	r1, [r7, #7]
 8003f12:	235a      	movs	r3, #90	; 0x5a
 8003f14:	4828      	ldr	r0, [pc, #160]	; (8003fb8 <_Z6mode12v+0x1d8>)
 8003f16:	f7fd fddf 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	23ff      	movs	r3, #255	; 0xff
 8003f20:	462a      	mov	r2, r5
 8003f22:	4621      	mov	r1, r4
 8003f24:	4827      	ldr	r0, [pc, #156]	; (8003fc4 <_Z6mode12v+0x1e4>)
 8003f26:	f000 fe5b 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8003f2a:	4826      	ldr	r0, [pc, #152]	; (8003fc4 <_Z6mode12v+0x1e4>)
 8003f2c:	f000 ff22 	bl	8004d74 <_ZN7WS2812C4showEv>
    for (uint8_t led = 0; led < 16; led++)
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	3301      	adds	r3, #1
 8003f34:	71fb      	strb	r3, [r7, #7]
 8003f36:	e7d5      	b.n	8003ee4 <_Z6mode12v+0x104>
    }
    for (uint8_t led = 32; led < 48; led++)
 8003f38:	2320      	movs	r3, #32
 8003f3a:	71bb      	strb	r3, [r7, #6]
 8003f3c:	79bb      	ldrb	r3, [r7, #6]
 8003f3e:	2b2f      	cmp	r3, #47	; 0x2f
 8003f40:	f200 8108 	bhi.w	8004154 <_Z6mode12v+0x374>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, ledPos2, 90));
 8003f44:	79bb      	ldrb	r3, [r7, #6]
 8003f46:	b29c      	uxth	r4, r3
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <_Z6mode12v+0x1e8>)
 8003f4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f4e:	79b9      	ldrb	r1, [r7, #6]
 8003f50:	2364      	movs	r3, #100	; 0x64
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	235a      	movs	r3, #90	; 0x5a
 8003f5a:	4817      	ldr	r0, [pc, #92]	; (8003fb8 <_Z6mode12v+0x1d8>)
 8003f5c:	f7fd fcb0 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461d      	mov	r5, r3
 8003f64:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <_Z6mode12v+0x1e8>)
 8003f66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003f6a:	79b9      	ldrb	r1, [r7, #6]
 8003f6c:	235a      	movs	r3, #90	; 0x5a
 8003f6e:	4812      	ldr	r0, [pc, #72]	; (8003fb8 <_Z6mode12v+0x1d8>)
 8003f70:	f7fd fdb2 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8003f74:	4603      	mov	r3, r0
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	23ff      	movs	r3, #255	; 0xff
 8003f7a:	462a      	mov	r2, r5
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4811      	ldr	r0, [pc, #68]	; (8003fc4 <_Z6mode12v+0x1e4>)
 8003f80:	f000 fe2e 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8003f84:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <_Z6mode12v+0x1e4>)
 8003f86:	f000 fef5 	bl	8004d74 <_ZN7WS2812C4showEv>
    for (uint8_t led = 32; led < 48; led++)
 8003f8a:	79bb      	ldrb	r3, [r7, #6]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	71bb      	strb	r3, [r7, #6]
 8003f90:	e7d4      	b.n	8003f3c <_Z6mode12v+0x15c>
 8003f92:	bf00      	nop
 8003f94:	20001b3c 	.word	0x20001b3c
 8003f98:	20001b40 	.word	0x20001b40
 8003f9c:	057619f1 	.word	0x057619f1
 8003fa0:	20001a24 	.word	0x20001a24
 8003fa4:	200019f4 	.word	0x200019f4
 8003fa8:	20001a28 	.word	0x20001a28
 8003fac:	20001a0c 	.word	0x20001a0c
 8003fb0:	20000008 	.word	0x20000008
 8003fb4:	20001b32 	.word	0x20001b32
 8003fb8:	200019f0 	.word	0x200019f0
 8003fbc:	20001b42 	.word	0x20001b42
 8003fc0:	20001b2c 	.word	0x20001b2c
 8003fc4:	20000368 	.word	0x20000368
 8003fc8:	20001b2e 	.word	0x20001b2e
    }
  }
  else
  {
    servo0.moveCont(1500, 0, servoPos0);
 8003fcc:	4b63      	ldr	r3, [pc, #396]	; (800415c <_Z6mode12v+0x37c>)
 8003fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003fd8:	4861      	ldr	r0, [pc, #388]	; (8004160 <_Z6mode12v+0x380>)
 8003fda:	f7fd f975 	bl	80012c8 <_ZN3STS8moveContEtss>
    servo2.moveCont(1500, 0, servoPos2);
 8003fde:	4b61      	ldr	r3, [pc, #388]	; (8004164 <_Z6mode12v+0x384>)
 8003fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003fea:	485f      	ldr	r0, [pc, #380]	; (8004168 <_Z6mode12v+0x388>)
 8003fec:	f7fd f96c 	bl	80012c8 <_ZN3STS8moveContEtss>

    if (i != 8)
 8003ff0:	4b5e      	ldr	r3, [pc, #376]	; (800416c <_Z6mode12v+0x38c>)
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d018      	beq.n	800402c <_Z6mode12v+0x24c>
    {
      i -= 8;
 8003ffa:	4b5c      	ldr	r3, [pc, #368]	; (800416c <_Z6mode12v+0x38c>)
 8003ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b08      	subs	r3, #8
 8004004:	b29b      	uxth	r3, r3
 8004006:	b21a      	sxth	r2, r3
 8004008:	4b58      	ldr	r3, [pc, #352]	; (800416c <_Z6mode12v+0x38c>)
 800400a:	801a      	strh	r2, [r3, #0]
      if (i < -180)
 800400c:	4b57      	ldr	r3, [pc, #348]	; (800416c <_Z6mode12v+0x38c>)
 800400e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004012:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8004016:	da09      	bge.n	800402c <_Z6mode12v+0x24c>
      {
        i += 360;
 8004018:	4b54      	ldr	r3, [pc, #336]	; (800416c <_Z6mode12v+0x38c>)
 800401a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800401e:	b29b      	uxth	r3, r3
 8004020:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004024:	b29b      	uxth	r3, r3
 8004026:	b21a      	sxth	r2, r3
 8004028:	4b50      	ldr	r3, [pc, #320]	; (800416c <_Z6mode12v+0x38c>)
 800402a:	801a      	strh	r2, [r3, #0]
      }
    }

    moveRotation = calc.calcRotation(i, gyro);
 800402c:	4b4f      	ldr	r3, [pc, #316]	; (800416c <_Z6mode12v+0x38c>)
 800402e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004032:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <_Z6mode12v+0x390>)
 8004034:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004038:	4619      	mov	r1, r3
 800403a:	484e      	ldr	r0, [pc, #312]	; (8004174 <_Z6mode12v+0x394>)
 800403c:	f7fd fe10 	bl	8001c60 <_ZN4CALC12calcRotationEss>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <_Z6mode12v+0x398>)
 8004046:	801a      	strh	r2, [r3, #0]

    if (moveRotation > 0)
 8004048:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <_Z6mode12v+0x398>)
 800404a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404e:	2b00      	cmp	r3, #0
 8004050:	dd08      	ble.n	8004064 <_Z6mode12v+0x284>
    {
      moveRotation += 10;
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <_Z6mode12v+0x398>)
 8004054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004058:	b29b      	uxth	r3, r3
 800405a:	330a      	adds	r3, #10
 800405c:	b29b      	uxth	r3, r3
 800405e:	b21a      	sxth	r2, r3
 8004060:	4b45      	ldr	r3, [pc, #276]	; (8004178 <_Z6mode12v+0x398>)
 8004062:	801a      	strh	r2, [r3, #0]
    }
    if (moveRotation < 0)
 8004064:	4b44      	ldr	r3, [pc, #272]	; (8004178 <_Z6mode12v+0x398>)
 8004066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da08      	bge.n	8004080 <_Z6mode12v+0x2a0>
    {
      moveRotation -= 10;
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <_Z6mode12v+0x398>)
 8004070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b0a      	subs	r3, #10
 8004078:	b29b      	uxth	r3, r3
 800407a:	b21a      	sxth	r2, r3
 800407c:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <_Z6mode12v+0x398>)
 800407e:	801a      	strh	r2, [r3, #0]
    }

    sendData(0, 0, moveRotation);
 8004080:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <_Z6mode12v+0x398>)
 8004082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004086:	461a      	mov	r2, r3
 8004088:	2100      	movs	r1, #0
 800408a:	2000      	movs	r0, #0
 800408c:	f7fe fc92 	bl	80029b4 <_Z8sendDataths>

    for (uint8_t led = 0; led < 16; led++)
 8004090:	2300      	movs	r3, #0
 8004092:	717b      	strb	r3, [r7, #5]
 8004094:	797b      	ldrb	r3, [r7, #5]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	d82b      	bhi.n	80040f2 <_Z6mode12v+0x312>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 800409a:	797b      	ldrb	r3, [r7, #5]
 800409c:	b29c      	uxth	r4, r3
 800409e:	4b37      	ldr	r3, [pc, #220]	; (800417c <_Z6mode12v+0x39c>)
 80040a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040a4:	7979      	ldrb	r1, [r7, #5]
 80040a6:	2364      	movs	r3, #100	; 0x64
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	235a      	movs	r3, #90	; 0x5a
 80040b0:	4830      	ldr	r0, [pc, #192]	; (8004174 <_Z6mode12v+0x394>)
 80040b2:	f7fd fc05 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461d      	mov	r5, r3
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <_Z6mode12v+0x39c>)
 80040bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	b21a      	sxth	r2, r3
 80040ca:	7979      	ldrb	r1, [r7, #5]
 80040cc:	235a      	movs	r3, #90	; 0x5a
 80040ce:	4829      	ldr	r0, [pc, #164]	; (8004174 <_Z6mode12v+0x394>)
 80040d0:	f7fd fd02 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 80040d4:	4603      	mov	r3, r0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	23ff      	movs	r3, #255	; 0xff
 80040da:	462a      	mov	r2, r5
 80040dc:	4621      	mov	r1, r4
 80040de:	4828      	ldr	r0, [pc, #160]	; (8004180 <_Z6mode12v+0x3a0>)
 80040e0:	f000 fd7e 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 80040e4:	4826      	ldr	r0, [pc, #152]	; (8004180 <_Z6mode12v+0x3a0>)
 80040e6:	f000 fe45 	bl	8004d74 <_ZN7WS2812C4showEv>
    for (uint8_t led = 0; led < 16; led++)
 80040ea:	797b      	ldrb	r3, [r7, #5]
 80040ec:	3301      	adds	r3, #1
 80040ee:	717b      	strb	r3, [r7, #5]
 80040f0:	e7d0      	b.n	8004094 <_Z6mode12v+0x2b4>
    }
    for (uint8_t led = 32; led < 48; led++)
 80040f2:	2320      	movs	r3, #32
 80040f4:	713b      	strb	r3, [r7, #4]
 80040f6:	793b      	ldrb	r3, [r7, #4]
 80040f8:	2b2f      	cmp	r3, #47	; 0x2f
 80040fa:	d82b      	bhi.n	8004154 <_Z6mode12v+0x374>
    {
      NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 80040fc:	793b      	ldrb	r3, [r7, #4]
 80040fe:	b29c      	uxth	r4, r3
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <_Z6mode12v+0x39c>)
 8004102:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004106:	7939      	ldrb	r1, [r7, #4]
 8004108:	2364      	movs	r3, #100	; 0x64
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	235a      	movs	r3, #90	; 0x5a
 8004112:	4818      	ldr	r0, [pc, #96]	; (8004174 <_Z6mode12v+0x394>)
 8004114:	f7fd fbd4 	bl	80018c0 <_ZN4CALC14similarityRiseEhsttt>
 8004118:	4603      	mov	r3, r0
 800411a:	461d      	mov	r5, r3
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <_Z6mode12v+0x39c>)
 800411e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8004128:	b29b      	uxth	r3, r3
 800412a:	b21a      	sxth	r2, r3
 800412c:	7939      	ldrb	r1, [r7, #4]
 800412e:	235a      	movs	r3, #90	; 0x5a
 8004130:	4810      	ldr	r0, [pc, #64]	; (8004174 <_Z6mode12v+0x394>)
 8004132:	f7fd fcd1 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 8004136:	4603      	mov	r3, r0
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	23ff      	movs	r3, #255	; 0xff
 800413c:	462a      	mov	r2, r5
 800413e:	4621      	mov	r1, r4
 8004140:	480f      	ldr	r0, [pc, #60]	; (8004180 <_Z6mode12v+0x3a0>)
 8004142:	f000 fd4d 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
      NeopixelTape.show();
 8004146:	480e      	ldr	r0, [pc, #56]	; (8004180 <_Z6mode12v+0x3a0>)
 8004148:	f000 fe14 	bl	8004d74 <_ZN7WS2812C4showEv>
    for (uint8_t led = 32; led < 48; led++)
 800414c:	793b      	ldrb	r3, [r7, #4]
 800414e:	3301      	adds	r3, #1
 8004150:	713b      	strb	r3, [r7, #4]
 8004152:	e7d0      	b.n	80040f6 <_Z6mode12v+0x316>
    }
  }
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bdb0      	pop	{r4, r5, r7, pc}
 800415c:	20001a24 	.word	0x20001a24
 8004160:	200019f4 	.word	0x200019f4
 8004164:	20001a28 	.word	0x20001a28
 8004168:	20001a0c 	.word	0x20001a0c
 800416c:	20000008 	.word	0x20000008
 8004170:	20001b32 	.word	0x20001b32
 8004174:	200019f0 	.word	0x200019f0
 8004178:	20001b42 	.word	0x20001b42
 800417c:	20001b2e 	.word	0x20001b2e
 8004180:	20000368 	.word	0x20000368

08004184 <_Z6mode13v>:

void mode13()
{
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af02      	add	r7, sp, #8
  countLocal = millis - 234700;
 800418a:	4b3f      	ldr	r3, [pc, #252]	; (8004288 <_Z6mode13v+0x104>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f503 43d6 	add.w	r3, r3, #27392	; 0x6b00
 8004194:	3334      	adds	r3, #52	; 0x34
 8004196:	b29a      	uxth	r2, r3
 8004198:	4b3c      	ldr	r3, [pc, #240]	; (800428c <_Z6mode13v+0x108>)
 800419a:	801a      	strh	r2, [r3, #0]
  sendData(0, 0, 60);
 800419c:	223c      	movs	r2, #60	; 0x3c
 800419e:	2100      	movs	r1, #0
 80041a0:	2000      	movs	r0, #0
 80041a2:	f7fe fc07 	bl	80029b4 <_Z8sendDataths>
  servo0.moveCont(1000, countLocal * 2, servoPos0);
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <_Z6mode13v+0x108>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b21a      	sxth	r2, r3
 80041b0:	4b37      	ldr	r3, [pc, #220]	; (8004290 <_Z6mode13v+0x10c>)
 80041b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041ba:	4836      	ldr	r0, [pc, #216]	; (8004294 <_Z6mode13v+0x110>)
 80041bc:	f7fd f884 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo2.moveCont(1000, countLocal * 2, servoPos2);
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <_Z6mode13v+0x108>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	b21a      	sxth	r2, r3
 80041ca:	4b33      	ldr	r3, [pc, #204]	; (8004298 <_Z6mode13v+0x114>)
 80041cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041d4:	4831      	ldr	r0, [pc, #196]	; (800429c <_Z6mode13v+0x118>)
 80041d6:	f7fd f877 	bl	80012c8 <_ZN3STS8moveContEtss>
  for (uint8_t led = 0; led < 48; led++)
 80041da:	2300      	movs	r3, #0
 80041dc:	71fb      	strb	r3, [r7, #7]
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b2f      	cmp	r3, #47	; 0x2f
 80041e2:	d846      	bhi.n	8004272 <_Z6mode13v+0xee>
  {
    NeopixelTape.set_hsv(led, calc.similarityPeak(led, (countLocal / 3) % 360, 90, countLocal % 256, 50), 255, calc.similarityNormal(led, (countLocal / 3) % 360, 90));
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	b29c      	uxth	r4, r3
 80041e8:	4b28      	ldr	r3, [pc, #160]	; (800428c <_Z6mode13v+0x108>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	; (80042a0 <_Z6mode13v+0x11c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	08da      	lsrs	r2, r3, #3
 80041f8:	492a      	ldr	r1, [pc, #168]	; (80042a4 <_Z6mode13v+0x120>)
 80041fa:	fba1 1202 	umull	r1, r2, r1, r2
 80041fe:	0892      	lsrs	r2, r2, #2
 8004200:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004204:	fb01 f202 	mul.w	r2, r1, r2
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	b29b      	uxth	r3, r3
 800420c:	b21a      	sxth	r2, r3
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <_Z6mode13v+0x108>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	b29b      	uxth	r3, r3
 8004216:	79f9      	ldrb	r1, [r7, #7]
 8004218:	2032      	movs	r0, #50	; 0x32
 800421a:	9001      	str	r0, [sp, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	235a      	movs	r3, #90	; 0x5a
 8004220:	4821      	ldr	r0, [pc, #132]	; (80042a8 <_Z6mode13v+0x124>)
 8004222:	f7fd fa6d 	bl	8001700 <_ZN4CALC14similarityPeakEhsttt>
 8004226:	4603      	mov	r3, r0
 8004228:	461d      	mov	r5, r3
 800422a:	4b18      	ldr	r3, [pc, #96]	; (800428c <_Z6mode13v+0x108>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <_Z6mode13v+0x11c>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	b29b      	uxth	r3, r3
 8004238:	08da      	lsrs	r2, r3, #3
 800423a:	491a      	ldr	r1, [pc, #104]	; (80042a4 <_Z6mode13v+0x120>)
 800423c:	fba1 1202 	umull	r1, r2, r1, r2
 8004240:	0892      	lsrs	r2, r2, #2
 8004242:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004246:	fb01 f202 	mul.w	r2, r1, r2
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	b29b      	uxth	r3, r3
 800424e:	b21a      	sxth	r2, r3
 8004250:	79f9      	ldrb	r1, [r7, #7]
 8004252:	235a      	movs	r3, #90	; 0x5a
 8004254:	4814      	ldr	r0, [pc, #80]	; (80042a8 <_Z6mode13v+0x124>)
 8004256:	f7fd fc3f 	bl	8001ad8 <_ZN4CALC16similarityNormalEhst>
 800425a:	4603      	mov	r3, r0
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	23ff      	movs	r3, #255	; 0xff
 8004260:	462a      	mov	r2, r5
 8004262:	4621      	mov	r1, r4
 8004264:	4811      	ldr	r0, [pc, #68]	; (80042ac <_Z6mode13v+0x128>)
 8004266:	f000 fcbb 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	3301      	adds	r3, #1
 800426e:	71fb      	strb	r3, [r7, #7]
 8004270:	e7b5      	b.n	80041de <_Z6mode13v+0x5a>
  }
  NeopixelTape.show();
 8004272:	480e      	ldr	r0, [pc, #56]	; (80042ac <_Z6mode13v+0x128>)
 8004274:	f000 fd7e 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8004278:	2001      	movs	r0, #1
 800427a:	f000 fee5 	bl	8005048 <HAL_Delay>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bdb0      	pop	{r4, r5, r7, pc}
 8004286:	bf00      	nop
 8004288:	20001b3c 	.word	0x20001b3c
 800428c:	20001b40 	.word	0x20001b40
 8004290:	20001a24 	.word	0x20001a24
 8004294:	200019f4 	.word	0x200019f4
 8004298:	20001a28 	.word	0x20001a28
 800429c:	20001a0c 	.word	0x20001a0c
 80042a0:	aaaaaaab 	.word	0xaaaaaaab
 80042a4:	16c16c17 	.word	0x16c16c17
 80042a8:	200019f0 	.word	0x200019f0
 80042ac:	20000368 	.word	0x20000368

080042b0 <_Z6mode14v>:

void mode14()
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af02      	add	r7, sp, #8
  static uint16_t i = 60;
  if (i > 1)
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <_Z6mode14v+0xa0>)
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d905      	bls.n	80042ca <_Z6mode14v+0x1a>
  {
    i--;
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <_Z6mode14v+0xa0>)
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <_Z6mode14v+0xa0>)
 80042c8:	801a      	strh	r2, [r3, #0]
  }
  sendData(0, 0, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2100      	movs	r1, #0
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fe fb70 	bl	80029b4 <_Z8sendDataths>
  servo0.moveCont(0, 6000, servoPos0);
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <_Z6mode14v+0xa4>)
 80042d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042da:	f241 7270 	movw	r2, #6000	; 0x1770
 80042de:	2100      	movs	r1, #0
 80042e0:	481d      	ldr	r0, [pc, #116]	; (8004358 <_Z6mode14v+0xa8>)
 80042e2:	f7fc fff1 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 80042e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ea:	2100      	movs	r1, #0
 80042ec:	481b      	ldr	r0, [pc, #108]	; (800435c <_Z6mode14v+0xac>)
 80042ee:	f7fd f8a9 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 6000, servoPos2);
 80042f2:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <_Z6mode14v+0xb0>)
 80042f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80042fc:	2100      	movs	r1, #0
 80042fe:	4819      	ldr	r0, [pc, #100]	; (8004364 <_Z6mode14v+0xb4>)
 8004300:	f7fc ffe2 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1900);
 8004304:	f240 726c 	movw	r2, #1900	; 0x76c
 8004308:	2100      	movs	r1, #0
 800430a:	4817      	ldr	r0, [pc, #92]	; (8004368 <_Z6mode14v+0xb8>)
 800430c:	f7fd f8f5 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8004310:	2300      	movs	r3, #0
 8004312:	71fb      	strb	r3, [r7, #7]
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	2b2f      	cmp	r3, #47	; 0x2f
 8004318:	d810      	bhi.n	800433c <_Z6mode14v+0x8c>
  {
    NeopixelTape.set_hsv(led, hue, 255, i);
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	b299      	uxth	r1, r3
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <_Z6mode14v+0xbc>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b21a      	sxth	r2, r3
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <_Z6mode14v+0xa0>)
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b21b      	sxth	r3, r3
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	23ff      	movs	r3, #255	; 0xff
 800432e:	4810      	ldr	r0, [pc, #64]	; (8004370 <_Z6mode14v+0xc0>)
 8004330:	f000 fc56 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	3301      	adds	r3, #1
 8004338:	71fb      	strb	r3, [r7, #7]
 800433a:	e7eb      	b.n	8004314 <_Z6mode14v+0x64>
  }
  NeopixelTape.show();
 800433c:	480c      	ldr	r0, [pc, #48]	; (8004370 <_Z6mode14v+0xc0>)
 800433e:	f000 fd19 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 8004342:	2001      	movs	r0, #1
 8004344:	f000 fe80 	bl	8005048 <HAL_Delay>
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	2000000a 	.word	0x2000000a
 8004354:	20001a24 	.word	0x20001a24
 8004358:	200019f4 	.word	0x200019f4
 800435c:	20001a00 	.word	0x20001a00
 8004360:	20001a28 	.word	0x20001a28
 8004364:	20001a0c 	.word	0x20001a0c
 8004368:	20001a18 	.word	0x20001a18
 800436c:	20001b38 	.word	0x20001b38
 8004370:	20000368 	.word	0x20000368

08004374 <_Z6mode15v>:

void mode15()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af02      	add	r7, sp, #8
  countLocal = millis - 244500;
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <_Z6mode15v+0x90>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 8004384:	336c      	adds	r3, #108	; 0x6c
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b1f      	ldr	r3, [pc, #124]	; (8004408 <_Z6mode15v+0x94>)
 800438a:	801a      	strh	r2, [r3, #0]
  servo0.moveCont(0, 6000, servoPos0);
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <_Z6mode15v+0x98>)
 800438e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004392:	f241 7270 	movw	r2, #6000	; 0x1770
 8004396:	2100      	movs	r1, #0
 8004398:	481d      	ldr	r0, [pc, #116]	; (8004410 <_Z6mode15v+0x9c>)
 800439a:	f7fc ff95 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(0, 2048);
 800439e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a2:	2100      	movs	r1, #0
 80043a4:	481b      	ldr	r0, [pc, #108]	; (8004414 <_Z6mode15v+0xa0>)
 80043a6:	f7fd f84d 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(0, 6000, servoPos2);
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <_Z6mode15v+0xa4>)
 80043ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b0:	f241 7270 	movw	r2, #6000	; 0x1770
 80043b4:	2100      	movs	r1, #0
 80043b6:	4819      	ldr	r0, [pc, #100]	; (800441c <_Z6mode15v+0xa8>)
 80043b8:	f7fc ff86 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(0, 1900);
 80043bc:	f240 726c 	movw	r2, #1900	; 0x76c
 80043c0:	2100      	movs	r1, #0
 80043c2:	4817      	ldr	r0, [pc, #92]	; (8004420 <_Z6mode15v+0xac>)
 80043c4:	f7fd f899 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	2b2f      	cmp	r3, #47	; 0x2f
 80043d0:	d80e      	bhi.n	80043f0 <_Z6mode15v+0x7c>
  {
    NeopixelTape.set_hsv(led, hue, 255, 0);
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	b299      	uxth	r1, r3
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <_Z6mode15v+0xb0>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	b21a      	sxth	r2, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	23ff      	movs	r3, #255	; 0xff
 80043e2:	4811      	ldr	r0, [pc, #68]	; (8004428 <_Z6mode15v+0xb4>)
 80043e4:	f000 fbfc 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	3301      	adds	r3, #1
 80043ec:	71fb      	strb	r3, [r7, #7]
 80043ee:	e7ed      	b.n	80043cc <_Z6mode15v+0x58>
  }
  NeopixelTape.show();
 80043f0:	480d      	ldr	r0, [pc, #52]	; (8004428 <_Z6mode15v+0xb4>)
 80043f2:	f000 fcbf 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 80043f6:	2001      	movs	r0, #1
 80043f8:	f000 fe26 	bl	8005048 <HAL_Delay>
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20001b3c 	.word	0x20001b3c
 8004408:	20001b40 	.word	0x20001b40
 800440c:	20001a24 	.word	0x20001a24
 8004410:	200019f4 	.word	0x200019f4
 8004414:	20001a00 	.word	0x20001a00
 8004418:	20001a28 	.word	0x20001a28
 800441c:	20001a0c 	.word	0x20001a0c
 8004420:	20001a18 	.word	0x20001a18
 8004424:	20001b38 	.word	0x20001b38
 8004428:	20000368 	.word	0x20000368

0800442c <_Z9modeErrorv>:

void modeError()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af02      	add	r7, sp, #8
  servo0.moveCont(500, 2048, servoPos0);
 8004432:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <_Z9modeErrorv+0x84>)
 8004434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004440:	481c      	ldr	r0, [pc, #112]	; (80044b4 <_Z9modeErrorv+0x88>)
 8004442:	f7fc ff41 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo1.moveStop1(500, 2048);
 8004446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800444e:	481a      	ldr	r0, [pc, #104]	; (80044b8 <_Z9modeErrorv+0x8c>)
 8004450:	f7fc fff8 	bl	8001444 <_ZN3STS9moveStop1Ess>
  servo2.moveCont(500, 2048, servoPos2);
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <_Z9modeErrorv+0x90>)
 8004456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800445e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004462:	4817      	ldr	r0, [pc, #92]	; (80044c0 <_Z9modeErrorv+0x94>)
 8004464:	f7fc ff30 	bl	80012c8 <_ZN3STS8moveContEtss>
  servo3.moveStop3(500, 1800);
 8004468:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800446c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004470:	4814      	ldr	r0, [pc, #80]	; (80044c4 <_Z9modeErrorv+0x98>)
 8004472:	f7fd f842 	bl	80014fa <_ZN3STS9moveStop3Ess>
  for (uint8_t led = 0; led < 48; led++)
 8004476:	2300      	movs	r3, #0
 8004478:	71fb      	strb	r3, [r7, #7]
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	2b2f      	cmp	r3, #47	; 0x2f
 800447e:	d80c      	bhi.n	800449a <_Z9modeErrorv+0x6e>
  {
    NeopixelTape.set_hsv(led, 0, 0, 0);
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	b299      	uxth	r1, r3
 8004484:	2300      	movs	r3, #0
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	2200      	movs	r2, #0
 800448c:	480e      	ldr	r0, [pc, #56]	; (80044c8 <_Z9modeErrorv+0x9c>)
 800448e:	f000 fba7 	bl	8004be0 <_ZN7WS2812C7set_hsvEtsss>
  for (uint8_t led = 0; led < 48; led++)
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	3301      	adds	r3, #1
 8004496:	71fb      	strb	r3, [r7, #7]
 8004498:	e7ef      	b.n	800447a <_Z9modeErrorv+0x4e>
  }
  NeopixelTape.show();
 800449a:	480b      	ldr	r0, [pc, #44]	; (80044c8 <_Z9modeErrorv+0x9c>)
 800449c:	f000 fc6a 	bl	8004d74 <_ZN7WS2812C4showEv>
  HAL_Delay(1);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f000 fdd1 	bl	8005048 <HAL_Delay>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20001a24 	.word	0x20001a24
 80044b4:	200019f4 	.word	0x200019f4
 80044b8:	20001a00 	.word	0x20001a00
 80044bc:	20001a28 	.word	0x20001a28
 80044c0:	20001a0c 	.word	0x20001a0c
 80044c4:	20001a18 	.word	0x20001a18
 80044c8:	20000368 	.word	0x20000368

080044cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044d0:	b672      	cpsid	i
}
 80044d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <Error_Handler+0x8>
	...

080044d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d11e      	bne.n	8004526 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d119      	bne.n	8004526 <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	490f      	ldr	r1, [pc, #60]	; (8004534 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80044f8:	480f      	ldr	r0, [pc, #60]	; (8004538 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80044fa:	f000 fb27 	bl	8004b4c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 80044fe:	2200      	movs	r2, #0
 8004500:	490e      	ldr	r1, [pc, #56]	; (800453c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004502:	480f      	ldr	r0, [pc, #60]	; (8004540 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004504:	f7fc fec2 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8004508:	2201      	movs	r2, #1
 800450a:	490c      	ldr	r1, [pc, #48]	; (800453c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800450c:	480d      	ldr	r0, [pc, #52]	; (8004544 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800450e:	f7fc febd 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 8004512:	2202      	movs	r2, #2
 8004514:	4909      	ldr	r1, [pc, #36]	; (800453c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004516:	480c      	ldr	r0, [pc, #48]	; (8004548 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004518:	f7fc feb8 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 800451c:	2203      	movs	r2, #3
 800451e:	4907      	ldr	r1, [pc, #28]	; (800453c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004520:	480a      	ldr	r0, [pc, #40]	; (800454c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004522:	f7fc feb3 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	2000017c 	.word	0x2000017c
 8004534:	200000ec 	.word	0x200000ec
 8004538:	20000368 	.word	0x20000368
 800453c:	20000220 	.word	0x20000220
 8004540:	200019f4 	.word	0x200019f4
 8004544:	20001a00 	.word	0x20001a00
 8004548:	20001a0c 	.word	0x20001a0c
 800454c:	20001a18 	.word	0x20001a18

08004550 <_GLOBAL__sub_I_hi2c1>:
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
 8004554:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004558:	2001      	movs	r0, #1
 800455a:	f7ff ffbd 	bl	80044d8 <_Z41__static_initialization_and_destruction_0ii>
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_MspInit+0x4c>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_MspInit+0x4c>)
 8004570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_MspInit+0x4c>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_MspInit+0x4c>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <HAL_MspInit+0x4c>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_MspInit+0x4c>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800

080045b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <HAL_I2C_MspInit+0x84>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d12c      	bne.n	800462c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_I2C_MspInit+0x88>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <HAL_I2C_MspInit+0x88>)
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_I2C_MspInit+0x88>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80045ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80045f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045f4:	2312      	movs	r3, #18
 80045f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004600:	2304      	movs	r3, #4
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	4619      	mov	r1, r3
 800460a:	480c      	ldr	r0, [pc, #48]	; (800463c <HAL_I2C_MspInit+0x8c>)
 800460c:	f001 f9c2 	bl	8005994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <HAL_I2C_MspInit+0x88>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	4a07      	ldr	r2, [pc, #28]	; (8004638 <HAL_I2C_MspInit+0x88>)
 800461a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461e:	6413      	str	r3, [r2, #64]	; 0x40
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_I2C_MspInit+0x88>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800462c:	bf00      	nop
 800462e:	3728      	adds	r7, #40	; 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40005400 	.word	0x40005400
 8004638:	40023800 	.word	0x40023800
 800463c:	40020400 	.word	0x40020400

08004640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a38      	ldr	r2, [pc, #224]	; (8004730 <HAL_TIM_Base_MspInit+0xf0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d14e      	bne.n	80046f0 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	4b37      	ldr	r3, [pc, #220]	; (8004734 <HAL_TIM_Base_MspInit+0xf4>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a36      	ldr	r2, [pc, #216]	; (8004734 <HAL_TIM_Base_MspInit+0xf4>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_TIM_Base_MspInit+0xf4>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 8004670:	4a32      	ldr	r2, [pc, #200]	; (800473c <HAL_TIM_Base_MspInit+0xfc>)
 8004672:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8004674:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 8004676:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800467a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800467c:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 8004684:	2200      	movs	r2, #0
 8004686:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8004688:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 800468a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800468e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004690:	4b29      	ldr	r3, [pc, #164]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 8004692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004696:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 800469a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800469e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80046a0:	4b25      	ldr	r3, [pc, #148]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046a6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80046a8:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80046ae:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80046b6:	4820      	ldr	r0, [pc, #128]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046b8:	f000 fdfc 	bl	80052b4 <HAL_DMA_Init>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80046c2:	f7ff ff03 	bl	80044cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
 80046d8:	4a17      	ldr	r2, [pc, #92]	; (8004738 <HAL_TIM_Base_MspInit+0xf8>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	201d      	movs	r0, #29
 80046e4:	f000 fdaf 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046e8:	201d      	movs	r0, #29
 80046ea:	f000 fdc8 	bl	800527e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80046ee:	e01a      	b.n	8004726 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM6)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_TIM_Base_MspInit+0x100>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d115      	bne.n	8004726 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_TIM_Base_MspInit+0xf4>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a0c      	ldr	r2, [pc, #48]	; (8004734 <HAL_TIM_Base_MspInit+0xf4>)
 8004704:	f043 0310 	orr.w	r3, r3, #16
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_TIM_Base_MspInit+0xf4>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2036      	movs	r0, #54	; 0x36
 800471c:	f000 fd93 	bl	8005246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004720:	2036      	movs	r0, #54	; 0x36
 8004722:	f000 fdac 	bl	800527e <HAL_NVIC_EnableIRQ>
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40000400 	.word	0x40000400
 8004734:	40023800 	.word	0x40023800
 8004738:	2000017c 	.word	0x2000017c
 800473c:	40026070 	.word	0x40026070
 8004740:	40001000 	.word	0x40001000

08004744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
 800475a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a12      	ldr	r2, [pc, #72]	; (80047ac <HAL_TIM_MspPostInit+0x68>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d11d      	bne.n	80047a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_TIM_MspPostInit+0x6c>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_TIM_MspPostInit+0x6c>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_TIM_MspPostInit+0x6c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004782:	2340      	movs	r3, #64	; 0x40
 8004784:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	2302      	movs	r3, #2
 8004788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004792:	2302      	movs	r3, #2
 8004794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	4619      	mov	r1, r3
 800479c:	4805      	ldr	r0, [pc, #20]	; (80047b4 <HAL_TIM_MspPostInit+0x70>)
 800479e:	f001 f8f9 	bl	8005994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047a2:	bf00      	nop
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40020000 	.word	0x40020000

080047b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b090      	sub	sp, #64	; 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a9a      	ldr	r2, [pc, #616]	; (8004a40 <HAL_UART_MspInit+0x288>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d17b      	bne.n	80048d2 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047de:	4b99      	ldr	r3, [pc, #612]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a98      	ldr	r2, [pc, #608]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80047e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b96      	ldr	r3, [pc, #600]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a91      	ldr	r2, [pc, #580]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 8004800:	f043 0304 	orr.w	r3, r3, #4
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b8f      	ldr	r3, [pc, #572]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	4b8b      	ldr	r3, [pc, #556]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	4a8a      	ldr	r2, [pc, #552]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	6313      	str	r3, [r2, #48]	; 0x30
 8004822:	4b88      	ldr	r3, [pc, #544]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800482e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004834:	2302      	movs	r3, #2
 8004836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483c:	2303      	movs	r3, #3
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004840:	2308      	movs	r3, #8
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004848:	4619      	mov	r1, r3
 800484a:	487f      	ldr	r0, [pc, #508]	; (8004a48 <HAL_UART_MspInit+0x290>)
 800484c:	f001 f8a2 	bl	8005994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004850:	2304      	movs	r3, #4
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004854:	2302      	movs	r3, #2
 8004856:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485c:	2303      	movs	r3, #3
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004860:	2308      	movs	r3, #8
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004868:	4619      	mov	r1, r3
 800486a:	4878      	ldr	r0, [pc, #480]	; (8004a4c <HAL_UART_MspInit+0x294>)
 800486c:	f001 f892 	bl	8005994 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004870:	4b77      	ldr	r3, [pc, #476]	; (8004a50 <HAL_UART_MspInit+0x298>)
 8004872:	4a78      	ldr	r2, [pc, #480]	; (8004a54 <HAL_UART_MspInit+0x29c>)
 8004874:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004876:	4b76      	ldr	r3, [pc, #472]	; (8004a50 <HAL_UART_MspInit+0x298>)
 8004878:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800487c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800487e:	4b74      	ldr	r3, [pc, #464]	; (8004a50 <HAL_UART_MspInit+0x298>)
 8004880:	2200      	movs	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004884:	4b72      	ldr	r3, [pc, #456]	; (8004a50 <HAL_UART_MspInit+0x298>)
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800488a:	4b71      	ldr	r3, [pc, #452]	; (8004a50 <HAL_UART_MspInit+0x298>)
 800488c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004890:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004892:	4b6f      	ldr	r3, [pc, #444]	; (8004a50 <HAL_UART_MspInit+0x298>)
 8004894:	2200      	movs	r2, #0
 8004896:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004898:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <HAL_UART_MspInit+0x298>)
 800489a:	2200      	movs	r2, #0
 800489c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800489e:	4b6c      	ldr	r3, [pc, #432]	; (8004a50 <HAL_UART_MspInit+0x298>)
 80048a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80048a6:	4b6a      	ldr	r3, [pc, #424]	; (8004a50 <HAL_UART_MspInit+0x298>)
 80048a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048ac:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048ae:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_UART_MspInit+0x298>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80048b4:	4866      	ldr	r0, [pc, #408]	; (8004a50 <HAL_UART_MspInit+0x298>)
 80048b6:	f000 fcfd 	bl	80052b4 <HAL_DMA_Init>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80048c0:	f7ff fe04 	bl	80044cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a62      	ldr	r2, [pc, #392]	; (8004a50 <HAL_UART_MspInit+0x298>)
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
 80048ca:	4a61      	ldr	r2, [pc, #388]	; (8004a50 <HAL_UART_MspInit+0x298>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048d0:	e0b1      	b.n	8004a36 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a60      	ldr	r2, [pc, #384]	; (8004a58 <HAL_UART_MspInit+0x2a0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d15c      	bne.n	8004996 <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ea:	6413      	str	r3, [r2, #64]	; 0x40
 80048ec:	4b55      	ldr	r3, [pc, #340]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	4b51      	ldr	r3, [pc, #324]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	4a50      	ldr	r2, [pc, #320]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6313      	str	r3, [r2, #48]	; 0x30
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004914:	230c      	movs	r3, #12
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	2302      	movs	r3, #2
 800491a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004920:	2303      	movs	r3, #3
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004924:	2307      	movs	r3, #7
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800492c:	4619      	mov	r1, r3
 800492e:	484b      	ldr	r0, [pc, #300]	; (8004a5c <HAL_UART_MspInit+0x2a4>)
 8004930:	f001 f830 	bl	8005994 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004934:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004936:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_UART_MspInit+0x2ac>)
 8004938:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800493a:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 800493c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004940:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004942:	4b47      	ldr	r3, [pc, #284]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004944:	2200      	movs	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004948:	4b45      	ldr	r3, [pc, #276]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 800494a:	2200      	movs	r2, #0
 800494c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800494e:	4b44      	ldr	r3, [pc, #272]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004954:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004956:	4b42      	ldr	r3, [pc, #264]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800495c:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004968:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 800496c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004970:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004974:	2200      	movs	r2, #0
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004978:	4839      	ldr	r0, [pc, #228]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 800497a:	f000 fc9b 	bl	80052b4 <HAL_DMA_Init>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8004984:	f7ff fda2 	bl	80044cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a35      	ldr	r2, [pc, #212]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
 800498e:	4a34      	ldr	r2, [pc, #208]	; (8004a60 <HAL_UART_MspInit+0x2a8>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004994:	e04f      	b.n	8004a36 <HAL_UART_MspInit+0x27e>
  else if(huart->Instance==USART3)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a33      	ldr	r2, [pc, #204]	; (8004a68 <HAL_UART_MspInit+0x2b0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d14a      	bne.n	8004a36 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	4b27      	ldr	r3, [pc, #156]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	4a26      	ldr	r2, [pc, #152]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ae:	6413      	str	r3, [r2, #64]	; 0x40
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	6313      	str	r3, [r2, #48]	; 0x30
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049e2:	f043 0302 	orr.w	r3, r3, #2
 80049e6:	6313      	str	r3, [r2, #48]	; 0x30
 80049e8:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <HAL_UART_MspInit+0x28c>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049f4:	2320      	movs	r3, #32
 80049f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a00:	2303      	movs	r3, #3
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a04:	2307      	movs	r3, #7
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	480e      	ldr	r0, [pc, #56]	; (8004a48 <HAL_UART_MspInit+0x290>)
 8004a10:	f000 ffc0 	bl	8005994 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a22:	2303      	movs	r3, #3
 8004a24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a26:	2307      	movs	r3, #7
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a2e:	4619      	mov	r1, r3
 8004a30:	480e      	ldr	r0, [pc, #56]	; (8004a6c <HAL_UART_MspInit+0x2b4>)
 8004a32:	f000 ffaf 	bl	8005994 <HAL_GPIO_Init>
}
 8004a36:	bf00      	nop
 8004a38:	3740      	adds	r7, #64	; 0x40
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40005000 	.word	0x40005000
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40020800 	.word	0x40020800
 8004a4c:	40020c00 	.word	0x40020c00
 8004a50:	200002a8 	.word	0x200002a8
 8004a54:	40026010 	.word	0x40026010
 8004a58:	40004400 	.word	0x40004400
 8004a5c:	40020000 	.word	0x40020000
 8004a60:	20000308 	.word	0x20000308
 8004a64:	40026088 	.word	0x40026088
 8004a68:	40004800 	.word	0x40004800
 8004a6c:	40020400 	.word	0x40020400

08004a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <NMI_Handler+0x4>

08004a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a7a:	e7fe      	b.n	8004a7a <HardFault_Handler+0x4>

08004a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a80:	e7fe      	b.n	8004a80 <MemManage_Handler+0x4>

08004a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a86:	e7fe      	b.n	8004a86 <BusFault_Handler+0x4>

08004a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a8c:	e7fe      	b.n	8004a8c <UsageFault_Handler+0x4>

08004a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004abc:	f000 faa4 	bl	8005008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <DMA1_Stream0_IRQHandler+0x10>)
 8004aca:	f000 fcf9 	bl	80054c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200002a8 	.word	0x200002a8

08004ad8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <DMA1_Stream4_IRQHandler+0x10>)
 8004ade:	f000 fcef 	bl	80054c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000017c 	.word	0x2000017c

08004aec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <DMA1_Stream5_IRQHandler+0x10>)
 8004af2:	f000 fce5 	bl	80054c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000308 	.word	0x20000308

08004b00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b04:	4802      	ldr	r0, [pc, #8]	; (8004b10 <TIM3_IRQHandler+0x10>)
 8004b06:	f003 fa97 	bl	8008038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200000ec 	.word	0x200000ec

08004b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b18:	4802      	ldr	r0, [pc, #8]	; (8004b24 <TIM6_DAC_IRQHandler+0x10>)
 8004b1a:	f003 fa8d 	bl	8008038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000134 	.word	0x20000134

08004b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <SystemInit+0x20>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <SystemInit+0x20>)
 8004b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	807b      	strh	r3, [r7, #2]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	707b      	strb	r3, [r7, #1]
 8004b92:	4613      	mov	r3, r2
 8004b94:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	2b2f      	cmp	r3, #47	; 0x2f
 8004b9a:	d81a      	bhi.n	8004bd2 <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 8004b9c:	887a      	ldrh	r2, [r7, #2]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	330c      	adds	r3, #12
 8004baa:	783a      	ldrb	r2, [r7, #0]
 8004bac:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	440b      	add	r3, r1
 8004bba:	330d      	adds	r3, #13
 8004bbc:	787a      	ldrb	r2, [r7, #1]
 8004bbe:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8004bc0:	887a      	ldrh	r2, [r7, #2]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	330e      	adds	r3, #14
 8004bce:	7c3a      	ldrb	r2, [r7, #16]
 8004bd0:	701a      	strb	r2, [r3, #0]
	}
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08c      	sub	sp, #48	; 0x30
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	4608      	mov	r0, r1
 8004bea:	4611      	mov	r1, r2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	817b      	strh	r3, [r7, #10]
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	813b      	strh	r3, [r7, #8]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 8004bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 8004c02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004c04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c18:	e09c      	b.n	8004d54 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 8004c1a:	893b      	ldrh	r3, [r7, #8]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	0052      	lsls	r2, r2, #1
 8004c20:	4413      	add	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 8004c28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da00      	bge.n	8004c32 <_ZN7WS2812C7set_hsvEtsss+0x52>
 8004c30:	33ff      	adds	r3, #255	; 0xff
 8004c32:	121b      	asrs	r3, r3, #8
 8004c34:	b21b      	sxth	r3, r3
 8004c36:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 8004c38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004c3c:	425a      	negs	r2, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	bf58      	it	pl
 8004c44:	4253      	negpl	r3, r2
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 8004c4a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004c4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c52:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da00      	bge.n	8004c60 <_ZN7WS2812C7set_hsvEtsss+0x80>
 8004c5e:	33ff      	adds	r3, #255	; 0xff
 8004c60:	121b      	asrs	r3, r3, #8
 8004c62:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8004c64:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c6c:	69f9      	ldr	r1, [r7, #28]
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da00      	bge.n	8004c78 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8004c76:	33ff      	adds	r3, #255	; 0xff
 8004c78:	121b      	asrs	r3, r3, #8
 8004c7a:	425b      	negs	r3, r3
 8004c7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	da00      	bge.n	8004c8a <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8004c88:	33ff      	adds	r3, #255	; 0xff
 8004c8a:	121b      	asrs	r3, r3, #8
 8004c8c:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8004c8e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8004c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da00      	bge.n	8004ca6 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8004ca4:	33ff      	adds	r3, #255	; 0xff
 8004ca6:	121b      	asrs	r3, r3, #8
 8004ca8:	425b      	negs	r3, r3
 8004caa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da00      	bge.n	8004cb8 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8004cb6:	33ff      	adds	r3, #255	; 0xff
 8004cb8:	121b      	asrs	r3, r3, #8
 8004cba:	613b      	str	r3, [r7, #16]

		switch (i) {
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d83e      	bhi.n	8004d40 <_ZN7WS2812C7set_hsvEtsss+0x160>
 8004cc2:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 8004cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc8:	08004cdd 	.word	0x08004cdd
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004d05 	.word	0x08004d05
 8004cd4:	08004d19 	.word	0x08004d19
 8004cd8:	08004d2d 	.word	0x08004d2d
			case 0: r = v; g = t; b = p; break;
 8004cdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004cee:	e031      	b.n	8004d54 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cf6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004d02:	e027      	b.n	8004d54 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004d16:	e01d      	b.n	8004d54 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d24:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004d2a:	e013      	b.n	8004d54 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004d3e:	e009      	b.n	8004d54 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8004d40:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004d52:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8004d54:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004d58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d5c:	8979      	ldrh	r1, [r7, #10]
 8004d5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4603      	mov	r3, r0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff ff08 	bl	8004b7c <_ZN7WS2812C7set_rgbEthhh>
}
 8004d6c:	bf00      	nop
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da2:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d179      	bne.n	8004e9e <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2bf9      	cmp	r3, #249	; 0xf9
 8004db2:	dc0a      	bgt.n	8004dca <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3326      	adds	r3, #38	; 0x26
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e7f1      	b.n	8004dae <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b2f      	cmp	r3, #47	; 0x2f
 8004dd2:	dc52      	bgt.n	8004e7a <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	dc49      	bgt.n	8004e72 <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 8004dde:	2307      	movs	r3, #7
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	db40      	blt.n	8004e6a <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	18ca      	adds	r2, r1, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	330c      	adds	r3, #12
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	fa42 f303 	asr.w	r3, r2, r3
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d114      	bne.n	8004e3a <_ZN7WS2812C7executeEv+0xa6>
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	441a      	add	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f1c3 0307 	rsb	r3, r3, #7
 8004e2a:	4413      	add	r3, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	3326      	adds	r3, #38	; 0x26
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	2214      	movs	r2, #20
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	e013      	b.n	8004e62 <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	441a      	add	r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f1c3 0307 	rsb	r3, r3, #7
 8004e54:	4413      	add	r3, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	3326      	adds	r3, #38	; 0x26
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	220a      	movs	r2, #10
 8004e60:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	e7bb      	b.n	8004de2 <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e7b2      	b.n	8004dd8 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	3301      	adds	r3, #1
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	e7a9      	b.n	8004dce <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6858      	ldr	r0, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8004e8a:	f240 537a 	movw	r3, #1402	; 0x57a
 8004e8e:	f002 ff0b 	bl	8007ca8 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 8004e9e:	bf00      	nop
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2bf9      	cmp	r3, #249	; 0xf9
 8004eb6:	dc0a      	bgt.n	8004ece <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3326      	adds	r3, #38	; 0x26
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	e7f1      	b.n	8004eb2 <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8004ece:	23fa      	movs	r3, #250	; 0xfa
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004ed8:	da0a      	bge.n	8004ef0 <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3326      	adds	r3, #38	; 0x26
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	220a      	movs	r2, #10
 8004ee6:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	e7f0      	b.n	8004ed2 <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6858      	ldr	r0, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8004f00:	f240 537a 	movw	r3, #1402	; 0x57a
 8004f04:	f002 fed0 	bl	8007ca8 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f14:	480d      	ldr	r0, [pc, #52]	; (8004f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f16:	490e      	ldr	r1, [pc, #56]	; (8004f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f18:	4a0e      	ldr	r2, [pc, #56]	; (8004f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f1c:	e002      	b.n	8004f24 <LoopCopyDataInit>

08004f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f22:	3304      	adds	r3, #4

08004f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f28:	d3f9      	bcc.n	8004f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f2c:	4c0b      	ldr	r4, [pc, #44]	; (8004f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f30:	e001      	b.n	8004f36 <LoopFillZerobss>

08004f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f34:	3204      	adds	r2, #4

08004f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f38:	d3fb      	bcc.n	8004f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f3a:	f7ff fdf5 	bl	8004b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f3e:	f006 f909 	bl	800b154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f42:	f7fc fee5 	bl	8001d10 <main>
  bx  lr    
 8004f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f50:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004f54:	0800b65c 	.word	0x0800b65c
  ldr r2, =_sbss
 8004f58:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004f5c:	20001b60 	.word	0x20001b60

08004f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f60:	e7fe      	b.n	8004f60 <ADC_IRQHandler>
	...

08004f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_Init+0x40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <HAL_Init+0x40>)
 8004f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_Init+0x40>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <HAL_Init+0x40>)
 8004f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_Init+0x40>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <HAL_Init+0x40>)
 8004f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f8c:	2003      	movs	r0, #3
 8004f8e:	f000 f94f 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f92:	200f      	movs	r0, #15
 8004f94:	f000 f808 	bl	8004fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f98:	f7ff fae2 	bl	8004560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_InitTick+0x54>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_InitTick+0x58>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f967 	bl	800529a <HAL_SYSTICK_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e00e      	b.n	8004ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d80a      	bhi.n	8004ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	f000 f92f 	bl	8005246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fe8:	4a06      	ldr	r2, [pc, #24]	; (8005004 <HAL_InitTick+0x5c>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	2000000c 	.word	0x2000000c
 8005000:	20000014 	.word	0x20000014
 8005004:	20000010 	.word	0x20000010

08005008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_IncTick+0x20>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_IncTick+0x24>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4413      	add	r3, r2
 8005018:	4a04      	ldr	r2, [pc, #16]	; (800502c <HAL_IncTick+0x24>)
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000014 	.word	0x20000014
 800502c:	20001b5c 	.word	0x20001b5c

08005030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return uwTick;
 8005034:	4b03      	ldr	r3, [pc, #12]	; (8005044 <HAL_GetTick+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20001b5c 	.word	0x20001b5c

08005048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005050:	f7ff ffee 	bl	8005030 <HAL_GetTick>
 8005054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d005      	beq.n	800506e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_Delay+0x44>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800506e:	bf00      	nop
 8005070:	f7ff ffde 	bl	8005030 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	429a      	cmp	r2, r3
 800507e:	d8f7      	bhi.n	8005070 <HAL_Delay+0x28>
  {
  }
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000014 	.word	0x20000014

08005090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	60d3      	str	r3, [r2, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <__NVIC_GetPriorityGrouping+0x18>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 0307 	and.w	r3, r3, #7
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	2b00      	cmp	r3, #0
 8005104:	db0b      	blt.n	800511e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	4907      	ldr	r1, [pc, #28]	; (800512c <__NVIC_EnableIRQ+0x38>)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2001      	movs	r0, #1
 8005116:	fa00 f202 	lsl.w	r2, r0, r2
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e100 	.word	0xe000e100

08005130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	; (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	; (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	bf28      	it	cs
 80051a2:	2304      	movcs	r3, #4
 80051a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d902      	bls.n	80051b4 <NVIC_EncodePriority+0x30>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3b03      	subs	r3, #3
 80051b2:	e000      	b.n	80051b6 <NVIC_EncodePriority+0x32>
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	401a      	ands	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	4313      	orrs	r3, r2
         );
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051fc:	d301      	bcc.n	8005202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <SysTick_Config+0x40>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520a:	210f      	movs	r1, #15
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	f7ff ff8e 	bl	8005130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <SysTick_Config+0x40>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <SysTick_Config+0x40>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010

08005230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ff29 	bl	8005090 <__NVIC_SetPriorityGrouping>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005258:	f7ff ff3e 	bl	80050d8 <__NVIC_GetPriorityGrouping>
 800525c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7ff ff8e 	bl	8005184 <NVIC_EncodePriority>
 8005268:	4602      	mov	r2, r0
 800526a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ff5d 	bl	8005130 <__NVIC_SetPriority>
}
 8005276:	bf00      	nop
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	4603      	mov	r3, r0
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff31 	bl	80050f4 <__NVIC_EnableIRQ>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ffa2 	bl	80051ec <SysTick_Config>
 80052a8:	4603      	mov	r3, r0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7ff feb6 	bl	8005030 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e099      	b.n	8005404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052f0:	e00f      	b.n	8005312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052f2:	f7ff fe9d 	bl	8005030 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d908      	bls.n	8005312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2203      	movs	r2, #3
 800530a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e078      	b.n	8005404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e8      	bne.n	80052f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <HAL_DMA_Init+0x158>)
 800532c:	4013      	ands	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800533e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800534a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b04      	cmp	r3, #4
 800536a:	d107      	bne.n	800537c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	4313      	orrs	r3, r2
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d117      	bne.n	80053d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00e      	beq.n	80053d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa6f 	bl	800589c <DMA_CheckFifoParam>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053d2:	2301      	movs	r3, #1
 80053d4:	e016      	b.n	8005404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa26 	bl	8005830 <DMA_CalcBaseAndBitshift>
 80053e4:	4603      	mov	r3, r0
 80053e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	223f      	movs	r2, #63	; 0x3f
 80053ee:	409a      	lsls	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	f010803f 	.word	0xf010803f

08005410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_DMA_Start_IT+0x26>
 8005432:	2302      	movs	r3, #2
 8005434:	e040      	b.n	80054b8 <HAL_DMA_Start_IT+0xa8>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d12f      	bne.n	80054aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f9b8 	bl	80057d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005468:	223f      	movs	r2, #63	; 0x3f
 800546a:	409a      	lsls	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0216 	orr.w	r2, r2, #22
 800547e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e005      	b.n	80054b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054b2:	2302      	movs	r3, #2
 80054b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054cc:	4b8e      	ldr	r3, [pc, #568]	; (8005708 <HAL_DMA_IRQHandler+0x248>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a8e      	ldr	r2, [pc, #568]	; (800570c <HAL_DMA_IRQHandler+0x24c>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	0a9b      	lsrs	r3, r3, #10
 80054d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	2208      	movs	r2, #8
 80054ec:	409a      	lsls	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01a      	beq.n	800552c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0204 	bic.w	r2, r2, #4
 8005512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	2208      	movs	r2, #8
 800551a:	409a      	lsls	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f043 0201 	orr.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d012      	beq.n	8005562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	2201      	movs	r2, #1
 8005550:	409a      	lsls	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	f043 0202 	orr.w	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	2204      	movs	r2, #4
 8005568:	409a      	lsls	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d012      	beq.n	8005598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	2204      	movs	r2, #4
 8005586:	409a      	lsls	r2, r3
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	f043 0204 	orr.w	r2, r3, #4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559c:	2210      	movs	r2, #16
 800559e:	409a      	lsls	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d043      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d03c      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	2210      	movs	r2, #16
 80055bc:	409a      	lsls	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d018      	beq.n	8005602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d108      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d024      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
 80055ee:	e01f      	b.n	8005630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e016      	b.n	8005630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0208 	bic.w	r2, r2, #8
 800561e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	2220      	movs	r2, #32
 8005636:	409a      	lsls	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 808f 	beq.w	8005760 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8087 	beq.w	8005760 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	2220      	movs	r2, #32
 8005658:	409a      	lsls	r2, r3
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b05      	cmp	r3, #5
 8005668:	d136      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0216 	bic.w	r2, r2, #22
 8005678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <HAL_DMA_IRQHandler+0x1da>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0208 	bic.w	r2, r2, #8
 80056a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	223f      	movs	r2, #63	; 0x3f
 80056b0:	409a      	lsls	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d07e      	beq.n	80057cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
        }
        return;
 80056d6:	e079      	b.n	80057cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01d      	beq.n	8005722 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10d      	bne.n	8005710 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d031      	beq.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	e02c      	b.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
 8005706:	bf00      	nop
 8005708:	2000000c 	.word	0x2000000c
 800570c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
 8005720:	e01e      	b.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10f      	bne.n	8005750 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0210 	bic.w	r2, r2, #16
 800573e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d032      	beq.n	80057ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d022      	beq.n	80057ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2205      	movs	r2, #5
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	3301      	adds	r3, #1
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d307      	bcc.n	80057a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f2      	bne.n	800578c <HAL_DMA_IRQHandler+0x2cc>
 80057a6:	e000      	b.n	80057aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
 80057ca:	e000      	b.n	80057ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80057cc:	bf00      	nop
    }
  }
}
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d108      	bne.n	8005814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005812:	e007      	b.n	8005824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	3b10      	subs	r3, #16
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <DMA_CalcBaseAndBitshift+0x64>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <DMA_CalcBaseAndBitshift+0x68>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d909      	bls.n	8005872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	1d1a      	adds	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	659a      	str	r2, [r3, #88]	; 0x58
 8005870:	e007      	b.n	8005882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	aaaaaaab 	.word	0xaaaaaaab
 8005898:	0800b1f8 	.word	0x0800b1f8

0800589c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d856      	bhi.n	800596a <DMA_CheckFifoParam+0xce>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <DMA_CheckFifoParam+0x28>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e7 	.word	0x080058e7
 80058cc:	080058d5 	.word	0x080058d5
 80058d0:	0800596b 	.word	0x0800596b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d046      	beq.n	800596e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e4:	e043      	b.n	800596e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ee:	d140      	bne.n	8005972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f4:	e03d      	b.n	8005972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	d121      	bne.n	8005944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d837      	bhi.n	8005976 <DMA_CheckFifoParam+0xda>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <DMA_CheckFifoParam+0x70>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005923 	.word	0x08005923
 8005914:	0800591d 	.word	0x0800591d
 8005918:	08005935 	.word	0x08005935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e030      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d025      	beq.n	800597a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005932:	e022      	b.n	800597a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800593c:	d11f      	bne.n	800597e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005942:	e01c      	b.n	800597e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d903      	bls.n	8005952 <DMA_CheckFifoParam+0xb6>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d003      	beq.n	8005958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005950:	e018      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	e015      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00e      	beq.n	8005982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e00b      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 800596a:	bf00      	nop
 800596c:	e00a      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 800596e:	bf00      	nop
 8005970:	e008      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005972:	bf00      	nop
 8005974:	e006      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;   
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005982:	bf00      	nop
    }
  } 
  
  return status; 
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop

08005994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	e165      	b.n	8005c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059b0:	2201      	movs	r2, #1
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4013      	ands	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f040 8154 	bne.w	8005c76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d005      	beq.n	80059e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d130      	bne.n	8005a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	2203      	movs	r2, #3
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 0201 	and.w	r2, r3, #1
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d017      	beq.n	8005a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	2203      	movs	r2, #3
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43db      	mvns	r3, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d123      	bne.n	8005ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	08da      	lsrs	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3208      	adds	r2, #8
 8005a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	220f      	movs	r2, #15
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	08da      	lsrs	r2, r3, #3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3208      	adds	r2, #8
 8005ad2:	69b9      	ldr	r1, [r7, #24]
 8005ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 0203 	and.w	r2, r3, #3
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80ae 	beq.w	8005c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <HAL_GPIO_Init+0x300>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	4a5c      	ldr	r2, [pc, #368]	; (8005c94 <HAL_GPIO_Init+0x300>)
 8005b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b28:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2a:	4b5a      	ldr	r3, [pc, #360]	; (8005c94 <HAL_GPIO_Init+0x300>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b36:	4a58      	ldr	r2, [pc, #352]	; (8005c98 <HAL_GPIO_Init+0x304>)
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	089b      	lsrs	r3, r3, #2
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a4f      	ldr	r2, [pc, #316]	; (8005c9c <HAL_GPIO_Init+0x308>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d025      	beq.n	8005bae <HAL_GPIO_Init+0x21a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a4e      	ldr	r2, [pc, #312]	; (8005ca0 <HAL_GPIO_Init+0x30c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01f      	beq.n	8005baa <HAL_GPIO_Init+0x216>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4d      	ldr	r2, [pc, #308]	; (8005ca4 <HAL_GPIO_Init+0x310>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d019      	beq.n	8005ba6 <HAL_GPIO_Init+0x212>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a4c      	ldr	r2, [pc, #304]	; (8005ca8 <HAL_GPIO_Init+0x314>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_GPIO_Init+0x20e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a4b      	ldr	r2, [pc, #300]	; (8005cac <HAL_GPIO_Init+0x318>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00d      	beq.n	8005b9e <HAL_GPIO_Init+0x20a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4a      	ldr	r2, [pc, #296]	; (8005cb0 <HAL_GPIO_Init+0x31c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d007      	beq.n	8005b9a <HAL_GPIO_Init+0x206>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a49      	ldr	r2, [pc, #292]	; (8005cb4 <HAL_GPIO_Init+0x320>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d101      	bne.n	8005b96 <HAL_GPIO_Init+0x202>
 8005b92:	2306      	movs	r3, #6
 8005b94:	e00c      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005b96:	2307      	movs	r3, #7
 8005b98:	e00a      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005b9a:	2305      	movs	r3, #5
 8005b9c:	e008      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	e006      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e004      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e002      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_GPIO_Init+0x21c>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	f002 0203 	and.w	r2, r2, #3
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	4093      	lsls	r3, r2
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc0:	4935      	ldr	r1, [pc, #212]	; (8005c98 <HAL_GPIO_Init+0x304>)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bce:	4b3a      	ldr	r3, [pc, #232]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bf2:	4a31      	ldr	r2, [pc, #196]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bf8:	4b2f      	ldr	r3, [pc, #188]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c1c:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c22:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c46:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c70:	4a11      	ldr	r2, [pc, #68]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	f67f ae96 	bls.w	80059b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	3724      	adds	r7, #36	; 0x24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	40020000 	.word	0x40020000
 8005ca0:	40020400 	.word	0x40020400
 8005ca4:	40020800 	.word	0x40020800
 8005ca8:	40020c00 	.word	0x40020c00
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40021400 	.word	0x40021400
 8005cb4:	40021800 	.word	0x40021800
 8005cb8:	40013c00 	.word	0x40013c00

08005cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	887b      	ldrh	r3, [r7, #2]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
 8005cd8:	e001      	b.n	8005cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	807b      	strh	r3, [r7, #2]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cfc:	787b      	ldrb	r3, [r7, #1]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d02:	887a      	ldrh	r2, [r7, #2]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d08:	e003      	b.n	8005d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d0a:	887b      	ldrh	r3, [r7, #2]
 8005d0c:	041a      	lsls	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	619a      	str	r2, [r3, #24]
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e12b      	b.n	8005f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fe fc32 	bl	80045b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2224      	movs	r2, #36	; 0x24
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d84:	f001 f982 	bl	800708c <HAL_RCC_GetPCLK1Freq>
 8005d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	4a81      	ldr	r2, [pc, #516]	; (8005f94 <HAL_I2C_Init+0x274>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d807      	bhi.n	8005da4 <HAL_I2C_Init+0x84>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a80      	ldr	r2, [pc, #512]	; (8005f98 <HAL_I2C_Init+0x278>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bf94      	ite	ls
 8005d9c:	2301      	movls	r3, #1
 8005d9e:	2300      	movhi	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e006      	b.n	8005db2 <HAL_I2C_Init+0x92>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a7d      	ldr	r2, [pc, #500]	; (8005f9c <HAL_I2C_Init+0x27c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	bf94      	ite	ls
 8005dac:	2301      	movls	r3, #1
 8005dae:	2300      	movhi	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0e7      	b.n	8005f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4a78      	ldr	r2, [pc, #480]	; (8005fa0 <HAL_I2C_Init+0x280>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	0c9b      	lsrs	r3, r3, #18
 8005dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a6a      	ldr	r2, [pc, #424]	; (8005f94 <HAL_I2C_Init+0x274>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d802      	bhi.n	8005df4 <HAL_I2C_Init+0xd4>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	3301      	adds	r3, #1
 8005df2:	e009      	b.n	8005e08 <HAL_I2C_Init+0xe8>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	4a69      	ldr	r2, [pc, #420]	; (8005fa4 <HAL_I2C_Init+0x284>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	099b      	lsrs	r3, r3, #6
 8005e06:	3301      	adds	r3, #1
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	495c      	ldr	r1, [pc, #368]	; (8005f94 <HAL_I2C_Init+0x274>)
 8005e24:	428b      	cmp	r3, r1
 8005e26:	d819      	bhi.n	8005e5c <HAL_I2C_Init+0x13c>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1e59      	subs	r1, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e3c:	400b      	ands	r3, r1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_I2C_Init+0x138>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1e59      	subs	r1, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e50:	3301      	adds	r3, #1
 8005e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e56:	e051      	b.n	8005efc <HAL_I2C_Init+0x1dc>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	e04f      	b.n	8005efc <HAL_I2C_Init+0x1dc>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d111      	bne.n	8005e88 <HAL_I2C_Init+0x168>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	1e58      	subs	r0, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6859      	ldr	r1, [r3, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	440b      	add	r3, r1
 8005e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e76:	3301      	adds	r3, #1
 8005e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e012      	b.n	8005eae <HAL_I2C_Init+0x18e>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1e58      	subs	r0, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6859      	ldr	r1, [r3, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	0099      	lsls	r1, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_I2C_Init+0x196>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e022      	b.n	8005efc <HAL_I2C_Init+0x1dc>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10e      	bne.n	8005edc <HAL_I2C_Init+0x1bc>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	1e58      	subs	r0, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	440b      	add	r3, r1
 8005ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eda:	e00f      	b.n	8005efc <HAL_I2C_Init+0x1dc>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1e58      	subs	r0, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	0099      	lsls	r1, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	6809      	ldr	r1, [r1, #0]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6911      	ldr	r1, [r2, #16]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	68d2      	ldr	r2, [r2, #12]
 8005f36:	4311      	orrs	r1, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	000186a0 	.word	0x000186a0
 8005f98:	001e847f 	.word	0x001e847f
 8005f9c:	003d08ff 	.word	0x003d08ff
 8005fa0:	431bde83 	.word	0x431bde83
 8005fa4:	10624dd3 	.word	0x10624dd3

08005fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	607a      	str	r2, [r7, #4]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	817b      	strh	r3, [r7, #10]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fbc:	f7ff f838 	bl	8005030 <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	f040 80e0 	bne.w	8006190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2319      	movs	r3, #25
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4970      	ldr	r1, [pc, #448]	; (800619c <HAL_I2C_Master_Transmit+0x1f4>)
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fd86 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e0d3      	b.n	8006192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_I2C_Master_Transmit+0x50>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e0cc      	b.n	8006192 <HAL_I2C_Master_Transmit+0x1ea>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d007      	beq.n	800601e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2221      	movs	r2, #33	; 0x21
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2210      	movs	r2, #16
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	893a      	ldrh	r2, [r7, #8]
 800604e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a50      	ldr	r2, [pc, #320]	; (80061a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006060:	8979      	ldrh	r1, [r7, #10]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fbf0 	bl	800684c <I2C_MasterRequestWrite>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e08d      	b.n	8006192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006076:	2300      	movs	r3, #0
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800608c:	e066      	b.n	800615c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	6a39      	ldr	r1, [r7, #32]
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fe00 	bl	8006c98 <I2C_WaitOnTXEFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d107      	bne.n	80060b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e06b      	b.n	8006192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d11b      	bne.n	8006130 <HAL_I2C_Master_Transmit+0x188>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d017      	beq.n	8006130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	6a39      	ldr	r1, [r7, #32]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fdf0 	bl	8006d1a <I2C_WaitOnBTFFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2b04      	cmp	r3, #4
 8006146:	d107      	bne.n	8006158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e01a      	b.n	8006192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	d194      	bne.n	800608e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	00100002 	.word	0x00100002
 80061a0:	ffff0000 	.word	0xffff0000

080061a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	; 0x30
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	461a      	mov	r2, r3
 80061b0:	460b      	mov	r3, r1
 80061b2:	817b      	strh	r3, [r7, #10]
 80061b4:	4613      	mov	r3, r2
 80061b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061b8:	f7fe ff3a 	bl	8005030 <HAL_GetTick>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	f040 820b 	bne.w	80065e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2319      	movs	r3, #25
 80061d2:	2201      	movs	r2, #1
 80061d4:	497c      	ldr	r1, [pc, #496]	; (80063c8 <HAL_I2C_Master_Receive+0x224>)
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fc88 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
 80061e4:	e1fe      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_I2C_Master_Receive+0x50>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e1f7      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b01      	cmp	r3, #1
 8006208:	d007      	beq.n	800621a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2222      	movs	r2, #34	; 0x22
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2210      	movs	r2, #16
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	893a      	ldrh	r2, [r7, #8]
 800624a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a5c      	ldr	r2, [pc, #368]	; (80063cc <HAL_I2C_Master_Receive+0x228>)
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800625c:	8979      	ldrh	r1, [r7, #10]
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 fb74 	bl	8006950 <I2C_MasterRequestRead>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e1b8      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d113      	bne.n	80062a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	623b      	str	r3, [r7, #32]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	623b      	str	r3, [r7, #32]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e18c      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d11b      	bne.n	80062e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e16c      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d11b      	bne.n	8006322 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630a:	2300      	movs	r3, #0
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	e14c      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006348:	e138      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634e:	2b03      	cmp	r3, #3
 8006350:	f200 80f1 	bhi.w	8006536 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	2b01      	cmp	r3, #1
 800635a:	d123      	bne.n	80063a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800635c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fd1b 	bl	8006d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e139      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063a2:	e10b      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d14e      	bne.n	800644a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2200      	movs	r2, #0
 80063b4:	4906      	ldr	r1, [pc, #24]	; (80063d0 <HAL_I2C_Master_Receive+0x22c>)
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 fb98 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e10e      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
 80063c6:	bf00      	nop
 80063c8:	00100002 	.word	0x00100002
 80063cc:	ffff0000 	.word	0xffff0000
 80063d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006448:	e0b8      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2200      	movs	r2, #0
 8006452:	4966      	ldr	r1, [pc, #408]	; (80065ec <HAL_I2C_Master_Receive+0x448>)
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fb49 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0bf      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	494f      	ldr	r1, [pc, #316]	; (80065ec <HAL_I2C_Master_Receive+0x448>)
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fb1b 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e091      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691a      	ldr	r2, [r3, #16]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652a:	b29b      	uxth	r3, r3
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006534:	e042      	b.n	80065bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fc2e 	bl	8006d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e04c      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b04      	cmp	r3, #4
 8006588:	d118      	bne.n	80065bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f47f aec2 	bne.w	800634a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e000      	b.n	80065e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
  }
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3728      	adds	r7, #40	; 0x28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	00010004 	.word	0x00010004

080065f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	; 0x28
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	460b      	mov	r3, r1
 80065fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006600:	f7fe fd16 	bl	8005030 <HAL_GetTick>
 8006604:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b20      	cmp	r3, #32
 8006614:	f040 8111 	bne.w	800683a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2319      	movs	r3, #25
 800661e:	2201      	movs	r2, #1
 8006620:	4988      	ldr	r1, [pc, #544]	; (8006844 <HAL_I2C_IsDeviceReady+0x254>)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fa62 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
 8006630:	e104      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2C_IsDeviceReady+0x50>
 800663c:	2302      	movs	r3, #2
 800663e:	e0fd      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d007      	beq.n	8006666 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2224      	movs	r2, #36	; 0x24
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a70      	ldr	r2, [pc, #448]	; (8006848 <HAL_I2C_IsDeviceReady+0x258>)
 8006688:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006698:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fa20 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c0:	d103      	bne.n	80066ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0b6      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ce:	897b      	ldrh	r3, [r7, #10]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80066de:	f7fe fca7 	bl	8005030 <HAL_GetTick>
 80066e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006712:	e025      	b.n	8006760 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006714:	f7fe fc8c 	bl	8005030 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d302      	bcc.n	800672a <HAL_I2C_IsDeviceReady+0x13a>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	22a0      	movs	r2, #160	; 0xa0
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b02      	cmp	r3, #2
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006756:	bf0c      	ite	eq
 8006758:	2301      	moveq	r3, #1
 800675a:	2300      	movne	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2ba0      	cmp	r3, #160	; 0xa0
 800676a:	d005      	beq.n	8006778 <HAL_I2C_IsDeviceReady+0x188>
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <HAL_I2C_IsDeviceReady+0x188>
 8006772:	7dbb      	ldrb	r3, [r7, #22]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0cd      	beq.n	8006714 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d129      	bne.n	80067e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800679c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	2319      	movs	r3, #25
 80067ba:	2201      	movs	r2, #1
 80067bc:	4921      	ldr	r1, [pc, #132]	; (8006844 <HAL_I2C_IsDeviceReady+0x254>)
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 f994 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e036      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	e02c      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2319      	movs	r3, #25
 8006802:	2201      	movs	r2, #1
 8006804:	490f      	ldr	r1, [pc, #60]	; (8006844 <HAL_I2C_IsDeviceReady+0x254>)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f970 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e012      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	3301      	adds	r3, #1
 800681a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	f4ff af32 	bcc.w	800668a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800683a:	2302      	movs	r3, #2
  }
}
 800683c:	4618      	mov	r0, r3
 800683e:	3720      	adds	r7, #32
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	00100002 	.word	0x00100002
 8006848:	ffff0000 	.word	0xffff0000

0800684c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	460b      	mov	r3, r1
 800685a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d006      	beq.n	8006876 <I2C_MasterRequestWrite+0x2a>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d003      	beq.n	8006876 <I2C_MasterRequestWrite+0x2a>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006874:	d108      	bne.n	8006888 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e00b      	b.n	80068a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	2b12      	cmp	r3, #18
 800688e:	d107      	bne.n	80068a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f91d 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d103      	bne.n	80068d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e035      	b.n	8006940 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068dc:	d108      	bne.n	80068f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068ec:	611a      	str	r2, [r3, #16]
 80068ee:	e01b      	b.n	8006928 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068f0:	897b      	ldrh	r3, [r7, #10]
 80068f2:	11db      	asrs	r3, r3, #7
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0306 	and.w	r3, r3, #6
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	f063 030f 	orn	r3, r3, #15
 8006900:	b2da      	uxtb	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	490e      	ldr	r1, [pc, #56]	; (8006948 <I2C_MasterRequestWrite+0xfc>)
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f943 	bl	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e010      	b.n	8006940 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800691e:	897b      	ldrh	r3, [r7, #10]
 8006920:	b2da      	uxtb	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4907      	ldr	r1, [pc, #28]	; (800694c <I2C_MasterRequestWrite+0x100>)
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f933 	bl	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	00010008 	.word	0x00010008
 800694c:	00010002 	.word	0x00010002

08006950 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	460b      	mov	r3, r1
 800695e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006974:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d006      	beq.n	800698a <I2C_MasterRequestRead+0x3a>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d003      	beq.n	800698a <I2C_MasterRequestRead+0x3a>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006988:	d108      	bne.n	800699c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e00b      	b.n	80069b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	2b11      	cmp	r3, #17
 80069a2:	d107      	bne.n	80069b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f893 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00d      	beq.n	80069e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d103      	bne.n	80069e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e079      	b.n	8006adc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f0:	d108      	bne.n	8006a04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069f2:	897b      	ldrh	r3, [r7, #10]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	611a      	str	r2, [r3, #16]
 8006a02:	e05f      	b.n	8006ac4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a04:	897b      	ldrh	r3, [r7, #10]
 8006a06:	11db      	asrs	r3, r3, #7
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0306 	and.w	r3, r3, #6
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	f063 030f 	orn	r3, r3, #15
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4930      	ldr	r1, [pc, #192]	; (8006ae4 <I2C_MasterRequestRead+0x194>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f8b9 	bl	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e054      	b.n	8006adc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a32:	897b      	ldrh	r3, [r7, #10]
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4929      	ldr	r1, [pc, #164]	; (8006ae8 <I2C_MasterRequestRead+0x198>)
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f8a9 	bl	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e044      	b.n	8006adc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f831 	bl	8006aec <I2C_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d103      	bne.n	8006aa8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e017      	b.n	8006adc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006aac:	897b      	ldrh	r3, [r7, #10]
 8006aae:	11db      	asrs	r3, r3, #7
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f003 0306 	and.w	r3, r3, #6
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f063 030e 	orn	r3, r3, #14
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4907      	ldr	r1, [pc, #28]	; (8006ae8 <I2C_MasterRequestRead+0x198>)
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f865 	bl	8006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	00010008 	.word	0x00010008
 8006ae8:	00010002 	.word	0x00010002

08006aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006afc:	e025      	b.n	8006b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d021      	beq.n	8006b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b06:	f7fe fa93 	bl	8005030 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d302      	bcc.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d116      	bne.n	8006b4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e023      	b.n	8006b92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d10d      	bne.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	43da      	mvns	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bf0c      	ite	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	2300      	movne	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	e00c      	b.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	43da      	mvns	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bf0c      	ite	eq
 8006b82:	2301      	moveq	r3, #1
 8006b84:	2300      	movne	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d0b6      	beq.n	8006afe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ba8:	e051      	b.n	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb8:	d123      	bne.n	8006c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f043 0204 	orr.w	r2, r3, #4
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e046      	b.n	8006c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d021      	beq.n	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0a:	f7fe fa11 	bl	8005030 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d116      	bne.n	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f043 0220 	orr.w	r2, r3, #32
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e020      	b.n	8006c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0c1b      	lsrs	r3, r3, #16
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10c      	bne.n	8006c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	43da      	mvns	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4013      	ands	r3, r2
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bf14      	ite	ne
 8006c6a:	2301      	movne	r3, #1
 8006c6c:	2300      	moveq	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	e00b      	b.n	8006c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	43da      	mvns	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d18d      	bne.n	8006baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ca4:	e02d      	b.n	8006d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f8ce 	bl	8006e48 <I2C_IsAcknowledgeFailed>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e02d      	b.n	8006d12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d021      	beq.n	8006d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cbe:	f7fe f9b7 	bl	8005030 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d116      	bne.n	8006d02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e007      	b.n	8006d12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0c:	2b80      	cmp	r3, #128	; 0x80
 8006d0e:	d1ca      	bne.n	8006ca6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d26:	e02d      	b.n	8006d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f88d 	bl	8006e48 <I2C_IsAcknowledgeFailed>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e02d      	b.n	8006d94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3e:	d021      	beq.n	8006d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d40:	f7fe f976 	bl	8005030 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d302      	bcc.n	8006d56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d116      	bne.n	8006d84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e007      	b.n	8006d94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d1ca      	bne.n	8006d28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006da8:	e042      	b.n	8006e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d119      	bne.n	8006dec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0210 	mvn.w	r2, #16
 8006dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e029      	b.n	8006e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dec:	f7fe f920 	bl	8005030 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d302      	bcc.n	8006e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d116      	bne.n	8006e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e007      	b.n	8006e40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d1b5      	bne.n	8006daa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5e:	d11b      	bne.n	8006e98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f043 0204 	orr.w	r2, r3, #4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e0cc      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ebc:	4b68      	ldr	r3, [pc, #416]	; (8007060 <HAL_RCC_ClockConfig+0x1b8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d90c      	bls.n	8006ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eca:	4b65      	ldr	r3, [pc, #404]	; (8007060 <HAL_RCC_ClockConfig+0x1b8>)
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed2:	4b63      	ldr	r3, [pc, #396]	; (8007060 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0b8      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d020      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0304 	and.w	r3, r3, #4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006efc:	4b59      	ldr	r3, [pc, #356]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4a58      	ldr	r2, [pc, #352]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f14:	4b53      	ldr	r3, [pc, #332]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4a52      	ldr	r2, [pc, #328]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f20:	4b50      	ldr	r3, [pc, #320]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	494d      	ldr	r1, [pc, #308]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d044      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d107      	bne.n	8006f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	4b47      	ldr	r3, [pc, #284]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d119      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e07f      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d003      	beq.n	8006f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f66:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e06f      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f76:	4b3b      	ldr	r3, [pc, #236]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e067      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f86:	4b37      	ldr	r3, [pc, #220]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f023 0203 	bic.w	r2, r3, #3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4934      	ldr	r1, [pc, #208]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f98:	f7fe f84a 	bl	8005030 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9e:	e00a      	b.n	8006fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa0:	f7fe f846 	bl	8005030 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e04f      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb6:	4b2b      	ldr	r3, [pc, #172]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f003 020c 	and.w	r2, r3, #12
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d1eb      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <HAL_RCC_ClockConfig+0x1b8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d20c      	bcs.n	8006ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b22      	ldr	r3, [pc, #136]	; (8007060 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fde:	4b20      	ldr	r3, [pc, #128]	; (8007060 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d001      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e032      	b.n	8007056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	4916      	ldr	r1, [pc, #88]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	4313      	orrs	r3, r2
 800700c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800701a:	4b12      	ldr	r3, [pc, #72]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	490e      	ldr	r1, [pc, #56]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	4313      	orrs	r3, r2
 800702c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800702e:	f000 f855 	bl	80070dc <HAL_RCC_GetSysClockFreq>
 8007032:	4602      	mov	r2, r0
 8007034:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	490a      	ldr	r1, [pc, #40]	; (8007068 <HAL_RCC_ClockConfig+0x1c0>)
 8007040:	5ccb      	ldrb	r3, [r1, r3]
 8007042:	fa22 f303 	lsr.w	r3, r2, r3
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <HAL_RCC_ClockConfig+0x1c4>)
 8007048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <HAL_RCC_ClockConfig+0x1c8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fd ffaa 	bl	8004fa8 <HAL_InitTick>

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40023c00 	.word	0x40023c00
 8007064:	40023800 	.word	0x40023800
 8007068:	0800b1e0 	.word	0x0800b1e0
 800706c:	2000000c 	.word	0x2000000c
 8007070:	20000010 	.word	0x20000010

08007074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007078:	4b03      	ldr	r3, [pc, #12]	; (8007088 <HAL_RCC_GetHCLKFreq+0x14>)
 800707a:	681b      	ldr	r3, [r3, #0]
}
 800707c:	4618      	mov	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	2000000c 	.word	0x2000000c

0800708c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007090:	f7ff fff0 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 8007094:	4602      	mov	r2, r0
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	0a9b      	lsrs	r3, r3, #10
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	4903      	ldr	r1, [pc, #12]	; (80070b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070a2:	5ccb      	ldrb	r3, [r1, r3]
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40023800 	.word	0x40023800
 80070b0:	0800b1f0 	.word	0x0800b1f0

080070b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070b8:	f7ff ffdc 	bl	8007074 <HAL_RCC_GetHCLKFreq>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0b5b      	lsrs	r3, r3, #13
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	4903      	ldr	r1, [pc, #12]	; (80070d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ca:	5ccb      	ldrb	r3, [r1, r3]
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40023800 	.word	0x40023800
 80070d8:	0800b1f0 	.word	0x0800b1f0

080070dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e0:	b0ae      	sub	sp, #184	; 0xb8
 80070e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007102:	4bcb      	ldr	r3, [pc, #812]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
 800710a:	2b0c      	cmp	r3, #12
 800710c:	f200 8204 	bhi.w	8007518 <HAL_RCC_GetSysClockFreq+0x43c>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800714d 	.word	0x0800714d
 800711c:	08007519 	.word	0x08007519
 8007120:	08007519 	.word	0x08007519
 8007124:	08007519 	.word	0x08007519
 8007128:	08007155 	.word	0x08007155
 800712c:	08007519 	.word	0x08007519
 8007130:	08007519 	.word	0x08007519
 8007134:	08007519 	.word	0x08007519
 8007138:	0800715d 	.word	0x0800715d
 800713c:	08007519 	.word	0x08007519
 8007140:	08007519 	.word	0x08007519
 8007144:	08007519 	.word	0x08007519
 8007148:	0800734d 	.word	0x0800734d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800714c:	4bb9      	ldr	r3, [pc, #740]	; (8007434 <HAL_RCC_GetSysClockFreq+0x358>)
 800714e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007152:	e1e5      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007154:	4bb7      	ldr	r3, [pc, #732]	; (8007434 <HAL_RCC_GetSysClockFreq+0x358>)
 8007156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800715a:	e1e1      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800715c:	4bb4      	ldr	r3, [pc, #720]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007168:	4bb1      	ldr	r3, [pc, #708]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d071      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007174:	4bae      	ldr	r3, [pc, #696]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	099b      	lsrs	r3, r3, #6
 800717a:	2200      	movs	r2, #0
 800717c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007180:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800719a:	4622      	mov	r2, r4
 800719c:	462b      	mov	r3, r5
 800719e:	f04f 0000 	mov.w	r0, #0
 80071a2:	f04f 0100 	mov.w	r1, #0
 80071a6:	0159      	lsls	r1, r3, #5
 80071a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071ac:	0150      	lsls	r0, r2, #5
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4621      	mov	r1, r4
 80071b4:	1a51      	subs	r1, r2, r1
 80071b6:	6439      	str	r1, [r7, #64]	; 0x40
 80071b8:	4629      	mov	r1, r5
 80071ba:	eb63 0301 	sbc.w	r3, r3, r1
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80071cc:	4649      	mov	r1, r9
 80071ce:	018b      	lsls	r3, r1, #6
 80071d0:	4641      	mov	r1, r8
 80071d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071d6:	4641      	mov	r1, r8
 80071d8:	018a      	lsls	r2, r1, #6
 80071da:	4641      	mov	r1, r8
 80071dc:	1a51      	subs	r1, r2, r1
 80071de:	63b9      	str	r1, [r7, #56]	; 0x38
 80071e0:	4649      	mov	r1, r9
 80071e2:	eb63 0301 	sbc.w	r3, r3, r1
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80071f4:	4649      	mov	r1, r9
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4641      	mov	r1, r8
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4641      	mov	r1, r8
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4622      	mov	r2, r4
 800720a:	189b      	adds	r3, r3, r2
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
 800720e:	462b      	mov	r3, r5
 8007210:	460a      	mov	r2, r1
 8007212:	eb42 0303 	adc.w	r3, r2, r3
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007224:	4629      	mov	r1, r5
 8007226:	028b      	lsls	r3, r1, #10
 8007228:	4621      	mov	r1, r4
 800722a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800722e:	4621      	mov	r1, r4
 8007230:	028a      	lsls	r2, r1, #10
 8007232:	4610      	mov	r0, r2
 8007234:	4619      	mov	r1, r3
 8007236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800723a:	2200      	movs	r2, #0
 800723c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007244:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007248:	f7f9 fcc2 	bl	8000bd0 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4613      	mov	r3, r2
 8007252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007256:	e067      	b.n	8007328 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007258:	4b75      	ldr	r3, [pc, #468]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007264:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007270:	67bb      	str	r3, [r7, #120]	; 0x78
 8007272:	2300      	movs	r3, #0
 8007274:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007276:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800727a:	4622      	mov	r2, r4
 800727c:	462b      	mov	r3, r5
 800727e:	f04f 0000 	mov.w	r0, #0
 8007282:	f04f 0100 	mov.w	r1, #0
 8007286:	0159      	lsls	r1, r3, #5
 8007288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800728c:	0150      	lsls	r0, r2, #5
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4621      	mov	r1, r4
 8007294:	1a51      	subs	r1, r2, r1
 8007296:	62b9      	str	r1, [r7, #40]	; 0x28
 8007298:	4629      	mov	r1, r5
 800729a:	eb63 0301 	sbc.w	r3, r3, r1
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80072ac:	4649      	mov	r1, r9
 80072ae:	018b      	lsls	r3, r1, #6
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b6:	4641      	mov	r1, r8
 80072b8:	018a      	lsls	r2, r1, #6
 80072ba:	4641      	mov	r1, r8
 80072bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80072c0:	4649      	mov	r1, r9
 80072c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072da:	4692      	mov	sl, r2
 80072dc:	469b      	mov	fp, r3
 80072de:	4623      	mov	r3, r4
 80072e0:	eb1a 0303 	adds.w	r3, sl, r3
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	462b      	mov	r3, r5
 80072e8:	eb4b 0303 	adc.w	r3, fp, r3
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80072fa:	4629      	mov	r1, r5
 80072fc:	028b      	lsls	r3, r1, #10
 80072fe:	4621      	mov	r1, r4
 8007300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007304:	4621      	mov	r1, r4
 8007306:	028a      	lsls	r2, r1, #10
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007310:	2200      	movs	r2, #0
 8007312:	673b      	str	r3, [r7, #112]	; 0x70
 8007314:	677a      	str	r2, [r7, #116]	; 0x74
 8007316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800731a:	f7f9 fc59 	bl	8000bd0 <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4613      	mov	r3, r2
 8007324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007328:	4b41      	ldr	r3, [pc, #260]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	3301      	adds	r3, #1
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800733a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800733e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007342:	fbb2 f3f3 	udiv	r3, r2, r3
 8007346:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800734a:	e0e9      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800734c:	4b38      	ldr	r3, [pc, #224]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d069      	beq.n	8007438 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007364:	4b32      	ldr	r3, [pc, #200]	; (8007430 <HAL_RCC_GetSysClockFreq+0x354>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	099b      	lsrs	r3, r3, #6
 800736a:	2200      	movs	r2, #0
 800736c:	66bb      	str	r3, [r7, #104]	; 0x68
 800736e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007376:	663b      	str	r3, [r7, #96]	; 0x60
 8007378:	2300      	movs	r3, #0
 800737a:	667b      	str	r3, [r7, #100]	; 0x64
 800737c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007380:	4622      	mov	r2, r4
 8007382:	462b      	mov	r3, r5
 8007384:	f04f 0000 	mov.w	r0, #0
 8007388:	f04f 0100 	mov.w	r1, #0
 800738c:	0159      	lsls	r1, r3, #5
 800738e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007392:	0150      	lsls	r0, r2, #5
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4621      	mov	r1, r4
 800739a:	1a51      	subs	r1, r2, r1
 800739c:	61b9      	str	r1, [r7, #24]
 800739e:	4629      	mov	r1, r5
 80073a0:	eb63 0301 	sbc.w	r3, r3, r1
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80073b2:	4659      	mov	r1, fp
 80073b4:	018b      	lsls	r3, r1, #6
 80073b6:	4651      	mov	r1, sl
 80073b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073bc:	4651      	mov	r1, sl
 80073be:	018a      	lsls	r2, r1, #6
 80073c0:	4651      	mov	r1, sl
 80073c2:	ebb2 0801 	subs.w	r8, r2, r1
 80073c6:	4659      	mov	r1, fp
 80073c8:	eb63 0901 	sbc.w	r9, r3, r1
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073e0:	4690      	mov	r8, r2
 80073e2:	4699      	mov	r9, r3
 80073e4:	4623      	mov	r3, r4
 80073e6:	eb18 0303 	adds.w	r3, r8, r3
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	462b      	mov	r3, r5
 80073ee:	eb49 0303 	adc.w	r3, r9, r3
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007400:	4629      	mov	r1, r5
 8007402:	028b      	lsls	r3, r1, #10
 8007404:	4621      	mov	r1, r4
 8007406:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800740a:	4621      	mov	r1, r4
 800740c:	028a      	lsls	r2, r1, #10
 800740e:	4610      	mov	r0, r2
 8007410:	4619      	mov	r1, r3
 8007412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007416:	2200      	movs	r2, #0
 8007418:	65bb      	str	r3, [r7, #88]	; 0x58
 800741a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800741c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007420:	f7f9 fbd6 	bl	8000bd0 <__aeabi_uldivmod>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4613      	mov	r3, r2
 800742a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742e:	e063      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x41c>
 8007430:	40023800 	.word	0x40023800
 8007434:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007438:	4b3d      	ldr	r3, [pc, #244]	; (8007530 <HAL_RCC_GetSysClockFreq+0x454>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	099b      	lsrs	r3, r3, #6
 800743e:	2200      	movs	r2, #0
 8007440:	4618      	mov	r0, r3
 8007442:	4611      	mov	r1, r2
 8007444:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007448:	653b      	str	r3, [r7, #80]	; 0x50
 800744a:	2300      	movs	r3, #0
 800744c:	657b      	str	r3, [r7, #84]	; 0x54
 800744e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007452:	4642      	mov	r2, r8
 8007454:	464b      	mov	r3, r9
 8007456:	f04f 0000 	mov.w	r0, #0
 800745a:	f04f 0100 	mov.w	r1, #0
 800745e:	0159      	lsls	r1, r3, #5
 8007460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007464:	0150      	lsls	r0, r2, #5
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4641      	mov	r1, r8
 800746c:	1a51      	subs	r1, r2, r1
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	4649      	mov	r1, r9
 8007472:	eb63 0301 	sbc.w	r3, r3, r1
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007484:	4659      	mov	r1, fp
 8007486:	018b      	lsls	r3, r1, #6
 8007488:	4651      	mov	r1, sl
 800748a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800748e:	4651      	mov	r1, sl
 8007490:	018a      	lsls	r2, r1, #6
 8007492:	4651      	mov	r1, sl
 8007494:	1a54      	subs	r4, r2, r1
 8007496:	4659      	mov	r1, fp
 8007498:	eb63 0501 	sbc.w	r5, r3, r1
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	00eb      	lsls	r3, r5, #3
 80074a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074aa:	00e2      	lsls	r2, r4, #3
 80074ac:	4614      	mov	r4, r2
 80074ae:	461d      	mov	r5, r3
 80074b0:	4643      	mov	r3, r8
 80074b2:	18e3      	adds	r3, r4, r3
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	464b      	mov	r3, r9
 80074b8:	eb45 0303 	adc.w	r3, r5, r3
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074ca:	4629      	mov	r1, r5
 80074cc:	028b      	lsls	r3, r1, #10
 80074ce:	4621      	mov	r1, r4
 80074d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074d4:	4621      	mov	r1, r4
 80074d6:	028a      	lsls	r2, r1, #10
 80074d8:	4610      	mov	r0, r2
 80074da:	4619      	mov	r1, r3
 80074dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074e0:	2200      	movs	r2, #0
 80074e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074ea:	f7f9 fb71 	bl	8000bd0 <__aeabi_uldivmod>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4613      	mov	r3, r2
 80074f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80074f8:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <HAL_RCC_GetSysClockFreq+0x454>)
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	0f1b      	lsrs	r3, r3, #28
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800750a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007516:	e003      	b.n	8007520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <HAL_RCC_GetSysClockFreq+0x458>)
 800751a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800751e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007524:	4618      	mov	r0, r3
 8007526:	37b8      	adds	r7, #184	; 0xb8
 8007528:	46bd      	mov	sp, r7
 800752a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800752e:	bf00      	nop
 8007530:	40023800 	.word	0x40023800
 8007534:	00f42400 	.word	0x00f42400

08007538 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e28d      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 8083 	beq.w	800765e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007558:	4b94      	ldr	r3, [pc, #592]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 030c 	and.w	r3, r3, #12
 8007560:	2b04      	cmp	r3, #4
 8007562:	d019      	beq.n	8007598 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007564:	4b91      	ldr	r3, [pc, #580]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800756c:	2b08      	cmp	r3, #8
 800756e:	d106      	bne.n	800757e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007570:	4b8e      	ldr	r3, [pc, #568]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800757c:	d00c      	beq.n	8007598 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800757e:	4b8b      	ldr	r3, [pc, #556]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007586:	2b0c      	cmp	r3, #12
 8007588:	d112      	bne.n	80075b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800758a:	4b88      	ldr	r3, [pc, #544]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007596:	d10b      	bne.n	80075b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007598:	4b84      	ldr	r3, [pc, #528]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d05b      	beq.n	800765c <HAL_RCC_OscConfig+0x124>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d157      	bne.n	800765c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e25a      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b8:	d106      	bne.n	80075c8 <HAL_RCC_OscConfig+0x90>
 80075ba:	4b7c      	ldr	r3, [pc, #496]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a7b      	ldr	r2, [pc, #492]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e01d      	b.n	8007604 <HAL_RCC_OscConfig+0xcc>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d0:	d10c      	bne.n	80075ec <HAL_RCC_OscConfig+0xb4>
 80075d2:	4b76      	ldr	r3, [pc, #472]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a75      	ldr	r2, [pc, #468]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b73      	ldr	r3, [pc, #460]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a72      	ldr	r2, [pc, #456]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e00b      	b.n	8007604 <HAL_RCC_OscConfig+0xcc>
 80075ec:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6e      	ldr	r2, [pc, #440]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	4b6c      	ldr	r3, [pc, #432]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a6b      	ldr	r2, [pc, #428]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80075fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fd fd10 	bl	8005030 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007614:	f7fd fd0c 	bl	8005030 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	; 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e21f      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b61      	ldr	r3, [pc, #388]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0xdc>
 8007632:	e014      	b.n	800765e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fd fcfc 	bl	8005030 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800763c:	f7fd fcf8 	bl	8005030 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e20b      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764e:	4b57      	ldr	r3, [pc, #348]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x104>
 800765a:	e000      	b.n	800765e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800765c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d06f      	beq.n	800774a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800766a:	4b50      	ldr	r3, [pc, #320]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b00      	cmp	r3, #0
 8007674:	d017      	beq.n	80076a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007676:	4b4d      	ldr	r3, [pc, #308]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800767e:	2b08      	cmp	r3, #8
 8007680:	d105      	bne.n	800768e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007682:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800768e:	4b47      	ldr	r3, [pc, #284]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007696:	2b0c      	cmp	r3, #12
 8007698:	d11c      	bne.n	80076d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769a:	4b44      	ldr	r3, [pc, #272]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d116      	bne.n	80076d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a6:	4b41      	ldr	r3, [pc, #260]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_RCC_OscConfig+0x186>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d001      	beq.n	80076be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e1d3      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076be:	4b3b      	ldr	r3, [pc, #236]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4937      	ldr	r1, [pc, #220]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d2:	e03a      	b.n	800774a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d020      	beq.n	800771e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076dc:	4b34      	ldr	r3, [pc, #208]	; (80077b0 <HAL_RCC_OscConfig+0x278>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e2:	f7fd fca5 	bl	8005030 <HAL_GetTick>
 80076e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ea:	f7fd fca1 	bl	8005030 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e1b4      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076fc:	4b2b      	ldr	r3, [pc, #172]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007708:	4b28      	ldr	r3, [pc, #160]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	00db      	lsls	r3, r3, #3
 8007716:	4925      	ldr	r1, [pc, #148]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]
 800771c:	e015      	b.n	800774a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800771e:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <HAL_RCC_OscConfig+0x278>)
 8007720:	2200      	movs	r2, #0
 8007722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fd fc84 	bl	8005030 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800772c:	f7fd fc80 	bl	8005030 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e193      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773e:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d036      	beq.n	80077c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d016      	beq.n	800778c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800775e:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <HAL_RCC_OscConfig+0x27c>)
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007764:	f7fd fc64 	bl	8005030 <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800776c:	f7fd fc60 	bl	8005030 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e173      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_RCC_OscConfig+0x274>)
 8007780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCC_OscConfig+0x234>
 800778a:	e01b      	b.n	80077c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_RCC_OscConfig+0x27c>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7fd fc4d 	bl	8005030 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007798:	e00e      	b.n	80077b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779a:	f7fd fc49 	bl	8005030 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d907      	bls.n	80077b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e15c      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
 80077ac:	40023800 	.word	0x40023800
 80077b0:	42470000 	.word	0x42470000
 80077b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b8:	4b8a      	ldr	r3, [pc, #552]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1ea      	bne.n	800779a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8097 	beq.w	8007900 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077d6:	4b83      	ldr	r3, [pc, #524]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10f      	bne.n	8007802 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e2:	2300      	movs	r3, #0
 80077e4:	60bb      	str	r3, [r7, #8]
 80077e6:	4b7f      	ldr	r3, [pc, #508]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	4a7e      	ldr	r2, [pc, #504]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6413      	str	r3, [r2, #64]	; 0x40
 80077f2:	4b7c      	ldr	r3, [pc, #496]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007802:	4b79      	ldr	r3, [pc, #484]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d118      	bne.n	8007840 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800780e:	4b76      	ldr	r3, [pc, #472]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a75      	ldr	r2, [pc, #468]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800781a:	f7fd fc09 	bl	8005030 <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007820:	e008      	b.n	8007834 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007822:	f7fd fc05 	bl	8005030 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e118      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007834:	4b6c      	ldr	r3, [pc, #432]	; (80079e8 <HAL_RCC_OscConfig+0x4b0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0f0      	beq.n	8007822 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d106      	bne.n	8007856 <HAL_RCC_OscConfig+0x31e>
 8007848:	4b66      	ldr	r3, [pc, #408]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800784a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784c:	4a65      	ldr	r2, [pc, #404]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	6713      	str	r3, [r2, #112]	; 0x70
 8007854:	e01c      	b.n	8007890 <HAL_RCC_OscConfig+0x358>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b05      	cmp	r3, #5
 800785c:	d10c      	bne.n	8007878 <HAL_RCC_OscConfig+0x340>
 800785e:	4b61      	ldr	r3, [pc, #388]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	4a60      	ldr	r2, [pc, #384]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007864:	f043 0304 	orr.w	r3, r3, #4
 8007868:	6713      	str	r3, [r2, #112]	; 0x70
 800786a:	4b5e      	ldr	r3, [pc, #376]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	4a5d      	ldr	r2, [pc, #372]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	6713      	str	r3, [r2, #112]	; 0x70
 8007876:	e00b      	b.n	8007890 <HAL_RCC_OscConfig+0x358>
 8007878:	4b5a      	ldr	r3, [pc, #360]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	4a59      	ldr	r2, [pc, #356]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	6713      	str	r3, [r2, #112]	; 0x70
 8007884:	4b57      	ldr	r3, [pc, #348]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	4a56      	ldr	r2, [pc, #344]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800788a:	f023 0304 	bic.w	r3, r3, #4
 800788e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007898:	f7fd fbca 	bl	8005030 <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078a0:	f7fd fbc6 	bl	8005030 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e0d7      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b6:	4b4b      	ldr	r3, [pc, #300]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0ee      	beq.n	80078a0 <HAL_RCC_OscConfig+0x368>
 80078c2:	e014      	b.n	80078ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c4:	f7fd fbb4 	bl	8005030 <HAL_GetTick>
 80078c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078cc:	f7fd fbb0 	bl	8005030 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e0c1      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e2:	4b40      	ldr	r3, [pc, #256]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1ee      	bne.n	80078cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d105      	bne.n	8007900 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f4:	4b3b      	ldr	r3, [pc, #236]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	4a3a      	ldr	r2, [pc, #232]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80078fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 80ad 	beq.w	8007a64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800790a:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 030c 	and.w	r3, r3, #12
 8007912:	2b08      	cmp	r3, #8
 8007914:	d060      	beq.n	80079d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b02      	cmp	r3, #2
 800791c:	d145      	bne.n	80079aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791e:	4b33      	ldr	r3, [pc, #204]	; (80079ec <HAL_RCC_OscConfig+0x4b4>)
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007924:	f7fd fb84 	bl	8005030 <HAL_GetTick>
 8007928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792a:	e008      	b.n	800793e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800792c:	f7fd fb80 	bl	8005030 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d901      	bls.n	800793e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e093      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793e:	4b29      	ldr	r3, [pc, #164]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1f0      	bne.n	800792c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69da      	ldr	r2, [r3, #28]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	019b      	lsls	r3, r3, #6
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	3b01      	subs	r3, #1
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	061b      	lsls	r3, r3, #24
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	491b      	ldr	r1, [pc, #108]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 8007978:	4313      	orrs	r3, r2
 800797a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800797c:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <HAL_RCC_OscConfig+0x4b4>)
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007982:	f7fd fb55 	bl	8005030 <HAL_GetTick>
 8007986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007988:	e008      	b.n	800799c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798a:	f7fd fb51 	bl	8005030 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	2b02      	cmp	r3, #2
 8007996:	d901      	bls.n	800799c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e064      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800799c:	4b11      	ldr	r3, [pc, #68]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0f0      	beq.n	800798a <HAL_RCC_OscConfig+0x452>
 80079a8:	e05c      	b.n	8007a64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079aa:	4b10      	ldr	r3, [pc, #64]	; (80079ec <HAL_RCC_OscConfig+0x4b4>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fd fb3e 	bl	8005030 <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b8:	f7fd fb3a 	bl	8005030 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e04d      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_RCC_OscConfig+0x4ac>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f0      	bne.n	80079b8 <HAL_RCC_OscConfig+0x480>
 80079d6:	e045      	b.n	8007a64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e040      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40007000 	.word	0x40007000
 80079ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079f0:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <HAL_RCC_OscConfig+0x538>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d030      	beq.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d129      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d122      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a20:	4013      	ands	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d119      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	085b      	lsrs	r3, r3, #1
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d10f      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800

08007a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e041      	b.n	8007b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fc fdd0 	bl	8004640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f000 fe54 	bl	8008760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d001      	beq.n	8007b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e04e      	b.n	8007bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a23      	ldr	r2, [pc, #140]	; (8007bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d022      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b56:	d01d      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	; (8007bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d018      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d013      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00e      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d009      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a19      	ldr	r2, [pc, #100]	; (8007bec <HAL_TIM_Base_Start_IT+0xd8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_TIM_Base_Start_IT+0x80>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d111      	bne.n	8007bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d010      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb6:	e007      	b.n	8007bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0201 	orr.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40010400 	.word	0x40010400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40001800 	.word	0x40001800

08007bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e041      	b.n	8007c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f839 	bl	8007c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f000 fd94 	bl	8008760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	e022      	b.n	8007d1a <HAL_TIM_PWM_Start_DMA+0x72>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d109      	bne.n	8007cee <HAL_TIM_PWM_Start_DMA+0x46>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	bf0c      	ite	eq
 8007ce6:	2301      	moveq	r3, #1
 8007ce8:	2300      	movne	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e015      	b.n	8007d1a <HAL_TIM_PWM_Start_DMA+0x72>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d109      	bne.n	8007d08 <HAL_TIM_PWM_Start_DMA+0x60>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	e008      	b.n	8007d1a <HAL_TIM_PWM_Start_DMA+0x72>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e171      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d109      	bne.n	8007d3c <HAL_TIM_PWM_Start_DMA+0x94>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	bf0c      	ite	eq
 8007d34:	2301      	moveq	r3, #1
 8007d36:	2300      	movne	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	e022      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0xda>
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d109      	bne.n	8007d56 <HAL_TIM_PWM_Start_DMA+0xae>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	bf0c      	ite	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	2300      	movne	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	e015      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0xda>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d109      	bne.n	8007d70 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	e008      	b.n	8007d82 <HAL_TIM_PWM_Start_DMA+0xda>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	bf0c      	ite	eq
 8007d7c:	2301      	moveq	r3, #1
 8007d7e:	2300      	movne	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d024      	beq.n	8007dd0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Start_DMA+0xee>
 8007d8c:	887b      	ldrh	r3, [r7, #2]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e137      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da4:	e016      	b.n	8007dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d104      	bne.n	8007db6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007db4:	e00e      	b.n	8007dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d104      	bne.n	8007dc6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc4:	e006      	b.n	8007dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dce:	e001      	b.n	8007dd4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e118      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b0c      	cmp	r3, #12
 8007dd8:	f200 80ae 	bhi.w	8007f38 <HAL_TIM_PWM_Start_DMA+0x290>
 8007ddc:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007e19 	.word	0x08007e19
 8007de8:	08007f39 	.word	0x08007f39
 8007dec:	08007f39 	.word	0x08007f39
 8007df0:	08007f39 	.word	0x08007f39
 8007df4:	08007e61 	.word	0x08007e61
 8007df8:	08007f39 	.word	0x08007f39
 8007dfc:	08007f39 	.word	0x08007f39
 8007e00:	08007f39 	.word	0x08007f39
 8007e04:	08007ea9 	.word	0x08007ea9
 8007e08:	08007f39 	.word	0x08007f39
 8007e0c:	08007f39 	.word	0x08007f39
 8007e10:	08007f39 	.word	0x08007f39
 8007e14:	08007ef1 	.word	0x08007ef1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1c:	4a7c      	ldr	r2, [pc, #496]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007e1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	4a7b      	ldr	r2, [pc, #492]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	4a7a      	ldr	r2, [pc, #488]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007e2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3334      	adds	r3, #52	; 0x34
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	887b      	ldrh	r3, [r7, #2]
 8007e40:	f7fd fae6 	bl	8005410 <HAL_DMA_Start_IT>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e0db      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e5c:	60da      	str	r2, [r3, #12]
      break;
 8007e5e:	e06e      	b.n	8007f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e64:	4a6a      	ldr	r2, [pc, #424]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007e66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	4a69      	ldr	r2, [pc, #420]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	4a68      	ldr	r2, [pc, #416]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007e76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3338      	adds	r3, #56	; 0x38
 8007e84:	461a      	mov	r2, r3
 8007e86:	887b      	ldrh	r3, [r7, #2]
 8007e88:	f7fd fac2 	bl	8005410 <HAL_DMA_Start_IT>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e0b7      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ea4:	60da      	str	r2, [r3, #12]
      break;
 8007ea6:	e04a      	b.n	8007f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	4a58      	ldr	r2, [pc, #352]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007eae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb4:	4a57      	ldr	r2, [pc, #348]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	4a56      	ldr	r2, [pc, #344]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007ebe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	333c      	adds	r3, #60	; 0x3c
 8007ecc:	461a      	mov	r2, r3
 8007ece:	887b      	ldrh	r3, [r7, #2]
 8007ed0:	f7fd fa9e 	bl	8005410 <HAL_DMA_Start_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e093      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eec:	60da      	str	r2, [r3, #12]
      break;
 8007eee:	e026      	b.n	8007f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	4a46      	ldr	r2, [pc, #280]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007ef6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	4a45      	ldr	r2, [pc, #276]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	4a44      	ldr	r2, [pc, #272]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007f06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3340      	adds	r3, #64	; 0x40
 8007f14:	461a      	mov	r2, r3
 8007f16:	887b      	ldrh	r3, [r7, #2]
 8007f18:	f7fd fa7a 	bl	8005410 <HAL_DMA_Start_IT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e06f      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f34:	60da      	str	r2, [r3, #12]
      break;
 8007f36:	e002      	b.n	8007f3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d15f      	bne.n	8008004 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fef1 	bl	8008d34 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a31      	ldr	r2, [pc, #196]	; (800801c <HAL_TIM_PWM_Start_DMA+0x374>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d004      	beq.n	8007f66 <HAL_TIM_PWM_Start_DMA+0x2be>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d101      	bne.n	8007f6a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a25      	ldr	r2, [pc, #148]	; (800801c <HAL_TIM_PWM_Start_DMA+0x374>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d01d      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a22      	ldr	r2, [pc, #136]	; (8008024 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a21      	ldr	r2, [pc, #132]	; (8008028 <HAL_TIM_PWM_Start_DMA+0x380>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1f      	ldr	r2, [pc, #124]	; (800802c <HAL_TIM_PWM_Start_DMA+0x384>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1a      	ldr	r2, [pc, #104]	; (8008020 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <HAL_TIM_PWM_Start_DMA+0x388>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_PWM_Start_DMA+0x328>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d111      	bne.n	8007ff4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d010      	beq.n	8008004 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	e007      	b.n	8008004 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	08008651 	.word	0x08008651
 8008014:	080086f9 	.word	0x080086f9
 8008018:	080085bf 	.word	0x080085bf
 800801c:	40010000 	.word	0x40010000
 8008020:	40010400 	.word	0x40010400
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800
 800802c:	40000c00 	.word	0x40000c00
 8008030:	40014000 	.word	0x40014000
 8008034:	40001800 	.word	0x40001800

08008038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b02      	cmp	r3, #2
 800804c:	d122      	bne.n	8008094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b02      	cmp	r3, #2
 800805a:	d11b      	bne.n	8008094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0202 	mvn.w	r2, #2
 8008064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fa77 	bl	800856e <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa69 	bl	800855a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7f9 fe13 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d122      	bne.n	80080e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d11b      	bne.n	80080e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0204 	mvn.w	r2, #4
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa4d 	bl	800856e <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa3f 	bl	800855a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7f9 fde9 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b08      	cmp	r3, #8
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0208 	mvn.w	r2, #8
 800810c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2204      	movs	r2, #4
 8008112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa23 	bl	800856e <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa15 	bl	800855a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7f9 fdbf 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0310 	and.w	r3, r3, #16
 8008146:	2b10      	cmp	r3, #16
 8008148:	d122      	bne.n	8008190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0310 	and.w	r3, r3, #16
 8008154:	2b10      	cmp	r3, #16
 8008156:	d11b      	bne.n	8008190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0210 	mvn.w	r2, #16
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2208      	movs	r2, #8
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9f9 	bl	800856e <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9eb 	bl	800855a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7f9 fd95 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	d10e      	bne.n	80081bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d107      	bne.n	80081bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0201 	mvn.w	r2, #1
 80081b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7f9 fd90 	bl	8001cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d10e      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d4:	2b80      	cmp	r3, #128	; 0x80
 80081d6:	d107      	bne.n	80081e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fe52 	bl	8008e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d10e      	bne.n	8008214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d107      	bne.n	8008214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800820c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f9c1 	bl	8008596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b20      	cmp	r3, #32
 8008220:	d10e      	bne.n	8008240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b20      	cmp	r3, #32
 800822e:	d107      	bne.n	8008240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0220 	mvn.w	r2, #32
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fe1c 	bl	8008e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008262:	2302      	movs	r3, #2
 8008264:	e0ae      	b.n	80083c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b0c      	cmp	r3, #12
 8008272:	f200 809f 	bhi.w	80083b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008276:	a201      	add	r2, pc, #4	; (adr r2, 800827c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082b1 	.word	0x080082b1
 8008280:	080083b5 	.word	0x080083b5
 8008284:	080083b5 	.word	0x080083b5
 8008288:	080083b5 	.word	0x080083b5
 800828c:	080082f1 	.word	0x080082f1
 8008290:	080083b5 	.word	0x080083b5
 8008294:	080083b5 	.word	0x080083b5
 8008298:	080083b5 	.word	0x080083b5
 800829c:	08008333 	.word	0x08008333
 80082a0:	080083b5 	.word	0x080083b5
 80082a4:	080083b5 	.word	0x080083b5
 80082a8:	080083b5 	.word	0x080083b5
 80082ac:	08008373 	.word	0x08008373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 faf2 	bl	80088a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0208 	orr.w	r2, r2, #8
 80082ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0204 	bic.w	r2, r2, #4
 80082da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6999      	ldr	r1, [r3, #24]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	619a      	str	r2, [r3, #24]
      break;
 80082ee:	e064      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fb42 	bl	8008980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800830a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800831a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6999      	ldr	r1, [r3, #24]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	021a      	lsls	r2, r3, #8
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	619a      	str	r2, [r3, #24]
      break;
 8008330:	e043      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fb97 	bl	8008a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69da      	ldr	r2, [r3, #28]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 0208 	orr.w	r2, r2, #8
 800834c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 0204 	bic.w	r2, r2, #4
 800835c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69d9      	ldr	r1, [r3, #28]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	61da      	str	r2, [r3, #28]
      break;
 8008370:	e023      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68b9      	ldr	r1, [r7, #8]
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fbeb 	bl	8008b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800838c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69da      	ldr	r2, [r3, #28]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800839c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69d9      	ldr	r1, [r3, #28]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	021a      	lsls	r2, r3, #8
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	61da      	str	r2, [r3, #28]
      break;
 80083b2:	e002      	b.n	80083ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	75fb      	strb	r3, [r7, #23]
      break;
 80083b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_TIM_ConfigClockSource+0x1c>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e0b4      	b.n	8008552 <HAL_TIM_ConfigClockSource+0x186>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800840e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008420:	d03e      	beq.n	80084a0 <HAL_TIM_ConfigClockSource+0xd4>
 8008422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008426:	f200 8087 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 800842a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800842e:	f000 8086 	beq.w	800853e <HAL_TIM_ConfigClockSource+0x172>
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008436:	d87f      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008438:	2b70      	cmp	r3, #112	; 0x70
 800843a:	d01a      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0xa6>
 800843c:	2b70      	cmp	r3, #112	; 0x70
 800843e:	d87b      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008440:	2b60      	cmp	r3, #96	; 0x60
 8008442:	d050      	beq.n	80084e6 <HAL_TIM_ConfigClockSource+0x11a>
 8008444:	2b60      	cmp	r3, #96	; 0x60
 8008446:	d877      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b50      	cmp	r3, #80	; 0x50
 800844a:	d03c      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0xfa>
 800844c:	2b50      	cmp	r3, #80	; 0x50
 800844e:	d873      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	d058      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x13a>
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d86f      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008458:	2b30      	cmp	r3, #48	; 0x30
 800845a:	d064      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x15a>
 800845c:	2b30      	cmp	r3, #48	; 0x30
 800845e:	d86b      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b20      	cmp	r3, #32
 8008462:	d060      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x15a>
 8008464:	2b20      	cmp	r3, #32
 8008466:	d867      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d05c      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x15a>
 800846c:	2b10      	cmp	r3, #16
 800846e:	d05a      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x15a>
 8008470:	e062      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6899      	ldr	r1, [r3, #8]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f000 fc37 	bl	8008cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	609a      	str	r2, [r3, #8]
      break;
 800849e:	e04f      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	6899      	ldr	r1, [r3, #8]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f000 fc20 	bl	8008cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c2:	609a      	str	r2, [r3, #8]
      break;
 80084c4:	e03c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	6859      	ldr	r1, [r3, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	461a      	mov	r2, r3
 80084d4:	f000 fb94 	bl	8008c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2150      	movs	r1, #80	; 0x50
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fbed 	bl	8008cbe <TIM_ITRx_SetConfig>
      break;
 80084e4:	e02c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	6859      	ldr	r1, [r3, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f000 fbb3 	bl	8008c5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2160      	movs	r1, #96	; 0x60
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fbdd 	bl	8008cbe <TIM_ITRx_SetConfig>
      break;
 8008504:	e01c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6859      	ldr	r1, [r3, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	461a      	mov	r2, r3
 8008514:	f000 fb74 	bl	8008c00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2140      	movs	r1, #64	; 0x40
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fbcd 	bl	8008cbe <TIM_ITRx_SetConfig>
      break;
 8008524:	e00c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4619      	mov	r1, r3
 8008530:	4610      	mov	r0, r2
 8008532:	f000 fbc4 	bl	8008cbe <TIM_ITRx_SetConfig>
      break;
 8008536:	e003      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
      break;
 800853c:	e000      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800853e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008562:	bf00      	nop
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800859e:	bf00      	nop
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d107      	bne.n	80085e6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085e4:	e02a      	b.n	800863c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d107      	bne.n	8008600 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2202      	movs	r2, #2
 80085f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085fe:	e01d      	b.n	800863c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d107      	bne.n	800861a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2204      	movs	r2, #4
 800860e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008618:	e010      	b.n	800863c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d107      	bne.n	8008634 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2208      	movs	r2, #8
 8008628:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008632:	e003      	b.n	800863c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7ff ffb4 	bl	80085aa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	771a      	strb	r2, [r3, #28]
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d10b      	bne.n	8008680 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d136      	bne.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800867e:	e031      	b.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	429a      	cmp	r2, r3
 8008688:	d10b      	bne.n	80086a2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2202      	movs	r2, #2
 800868e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d125      	bne.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086a0:	e020      	b.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d10b      	bne.n	80086c4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2204      	movs	r2, #4
 80086b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d114      	bne.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c2:	e00f      	b.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d10a      	bne.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2208      	movs	r2, #8
 80086d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d103      	bne.n	80086e4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f7f9 fae5 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
}
 80086f0:	bf00      	nop
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	d103      	bne.n	8008718 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	771a      	strb	r2, [r3, #28]
 8008716:	e019      	b.n	800874c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	429a      	cmp	r2, r3
 8008720:	d103      	bne.n	800872a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2202      	movs	r2, #2
 8008726:	771a      	strb	r2, [r3, #28]
 8008728:	e010      	b.n	800874c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d103      	bne.n	800873c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2204      	movs	r2, #4
 8008738:	771a      	strb	r2, [r3, #28]
 800873a:	e007      	b.n	800874c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d102      	bne.n	800874c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2208      	movs	r2, #8
 800874a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff ff18 	bl	8008582 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a40      	ldr	r2, [pc, #256]	; (8008874 <TIM_Base_SetConfig+0x114>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d013      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877e:	d00f      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a3d      	ldr	r2, [pc, #244]	; (8008878 <TIM_Base_SetConfig+0x118>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00b      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a3c      	ldr	r2, [pc, #240]	; (800887c <TIM_Base_SetConfig+0x11c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d007      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a3b      	ldr	r2, [pc, #236]	; (8008880 <TIM_Base_SetConfig+0x120>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a3a      	ldr	r2, [pc, #232]	; (8008884 <TIM_Base_SetConfig+0x124>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d108      	bne.n	80087b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2f      	ldr	r2, [pc, #188]	; (8008874 <TIM_Base_SetConfig+0x114>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d02b      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c0:	d027      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2c      	ldr	r2, [pc, #176]	; (8008878 <TIM_Base_SetConfig+0x118>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d023      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a2b      	ldr	r2, [pc, #172]	; (800887c <TIM_Base_SetConfig+0x11c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d01f      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <TIM_Base_SetConfig+0x120>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d01b      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a29      	ldr	r2, [pc, #164]	; (8008884 <TIM_Base_SetConfig+0x124>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d017      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a28      	ldr	r2, [pc, #160]	; (8008888 <TIM_Base_SetConfig+0x128>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a27      	ldr	r2, [pc, #156]	; (800888c <TIM_Base_SetConfig+0x12c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d00f      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a26      	ldr	r2, [pc, #152]	; (8008890 <TIM_Base_SetConfig+0x130>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00b      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a25      	ldr	r2, [pc, #148]	; (8008894 <TIM_Base_SetConfig+0x134>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d007      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a24      	ldr	r2, [pc, #144]	; (8008898 <TIM_Base_SetConfig+0x138>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d003      	beq.n	8008812 <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a23      	ldr	r2, [pc, #140]	; (800889c <TIM_Base_SetConfig+0x13c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d108      	bne.n	8008824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a0a      	ldr	r2, [pc, #40]	; (8008874 <TIM_Base_SetConfig+0x114>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_Base_SetConfig+0xf8>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <TIM_Base_SetConfig+0x124>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d103      	bne.n	8008860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	615a      	str	r2, [r3, #20]
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	40010000 	.word	0x40010000
 8008878:	40000400 	.word	0x40000400
 800887c:	40000800 	.word	0x40000800
 8008880:	40000c00 	.word	0x40000c00
 8008884:	40010400 	.word	0x40010400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800
 8008894:	40001800 	.word	0x40001800
 8008898:	40001c00 	.word	0x40001c00
 800889c:	40002000 	.word	0x40002000

080088a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f023 0201 	bic.w	r2, r3, #1
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0303 	bic.w	r3, r3, #3
 80088d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f023 0302 	bic.w	r3, r3, #2
 80088e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a20      	ldr	r2, [pc, #128]	; (8008978 <TIM_OC1_SetConfig+0xd8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TIM_OC1_SetConfig+0x64>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a1f      	ldr	r2, [pc, #124]	; (800897c <TIM_OC1_SetConfig+0xdc>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10c      	bne.n	800891e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	f023 0308 	bic.w	r3, r3, #8
 800890a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f023 0304 	bic.w	r3, r3, #4
 800891c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a15      	ldr	r2, [pc, #84]	; (8008978 <TIM_OC1_SetConfig+0xd8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_OC1_SetConfig+0x8e>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a14      	ldr	r2, [pc, #80]	; (800897c <TIM_OC1_SetConfig+0xdc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d111      	bne.n	8008952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800893c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	621a      	str	r2, [r3, #32]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	40010000 	.word	0x40010000
 800897c:	40010400 	.word	0x40010400

08008980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	f023 0210 	bic.w	r2, r3, #16
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f023 0320 	bic.w	r3, r3, #32
 80089ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a22      	ldr	r2, [pc, #136]	; (8008a64 <TIM_OC2_SetConfig+0xe4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d003      	beq.n	80089e8 <TIM_OC2_SetConfig+0x68>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a21      	ldr	r2, [pc, #132]	; (8008a68 <TIM_OC2_SetConfig+0xe8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10d      	bne.n	8008a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a17      	ldr	r2, [pc, #92]	; (8008a64 <TIM_OC2_SetConfig+0xe4>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC2_SetConfig+0x94>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a16      	ldr	r2, [pc, #88]	; (8008a68 <TIM_OC2_SetConfig+0xe8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d113      	bne.n	8008a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	621a      	str	r2, [r3, #32]
}
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40010000 	.word	0x40010000
 8008a68:	40010400 	.word	0x40010400

08008a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0303 	bic.w	r3, r3, #3
 8008aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a21      	ldr	r2, [pc, #132]	; (8008b4c <TIM_OC3_SetConfig+0xe0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <TIM_OC3_SetConfig+0x66>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a20      	ldr	r2, [pc, #128]	; (8008b50 <TIM_OC3_SetConfig+0xe4>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d10d      	bne.n	8008aee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a16      	ldr	r2, [pc, #88]	; (8008b4c <TIM_OC3_SetConfig+0xe0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d003      	beq.n	8008afe <TIM_OC3_SetConfig+0x92>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a15      	ldr	r2, [pc, #84]	; (8008b50 <TIM_OC3_SetConfig+0xe4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d113      	bne.n	8008b26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	621a      	str	r2, [r3, #32]
}
 8008b40:	bf00      	nop
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40010400 	.word	0x40010400

08008b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	031b      	lsls	r3, r3, #12
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a12      	ldr	r2, [pc, #72]	; (8008bf8 <TIM_OC4_SetConfig+0xa4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC4_SetConfig+0x68>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a11      	ldr	r2, [pc, #68]	; (8008bfc <TIM_OC4_SetConfig+0xa8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d109      	bne.n	8008bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	019b      	lsls	r3, r3, #6
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40010400 	.word	0x40010400

08008c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	f023 0201 	bic.w	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	011b      	lsls	r3, r3, #4
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f023 030a 	bic.w	r3, r3, #10
 8008c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b087      	sub	sp, #28
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0210 	bic.w	r2, r3, #16
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	031b      	lsls	r3, r3, #12
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f043 0307 	orr.w	r3, r3, #7
 8008ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	609a      	str	r2, [r3, #8]
}
 8008ce8:	bf00      	nop
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	021a      	lsls	r2, r3, #8
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	609a      	str	r2, [r3, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	371c      	adds	r7, #28
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f003 031f 	and.w	r3, r3, #31
 8008d46:	2201      	movs	r2, #1
 8008d48:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a1a      	ldr	r2, [r3, #32]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	43db      	mvns	r3, r3
 8008d56:	401a      	ands	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1a      	ldr	r2, [r3, #32]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	f003 031f 	and.w	r3, r3, #31
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	621a      	str	r2, [r3, #32]
}
 8008d72:	bf00      	nop
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
	...

08008d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e05a      	b.n	8008e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a21      	ldr	r2, [pc, #132]	; (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d022      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de4:	d01d      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a1d      	ldr	r2, [pc, #116]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d018      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a1b      	ldr	r2, [pc, #108]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a1a      	ldr	r2, [pc, #104]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00e      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a18      	ldr	r2, [pc, #96]	; (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a17      	ldr	r2, [pc, #92]	; (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a15      	ldr	r2, [pc, #84]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d10c      	bne.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	40010000 	.word	0x40010000
 8008e60:	40000400 	.word	0x40000400
 8008e64:	40000800 	.word	0x40000800
 8008e68:	40000c00 	.word	0x40000c00
 8008e6c:	40010400 	.word	0x40010400
 8008e70:	40014000 	.word	0x40014000
 8008e74:	40001800 	.word	0x40001800

08008e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e03f      	b.n	8008f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7fb fc76 	bl	80047b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2224      	movs	r2, #36	; 0x24
 8008ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fba5 	bl	8009634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	691a      	ldr	r2, [r3, #16]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	695a      	ldr	r2, [r3, #20]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b08a      	sub	sp, #40	; 0x28
 8008f3e:	af02      	add	r7, sp, #8
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b20      	cmp	r3, #32
 8008f58:	d17c      	bne.n	8009054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_UART_Transmit+0x2c>
 8008f60:	88fb      	ldrh	r3, [r7, #6]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e075      	b.n	8009056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d101      	bne.n	8008f78 <HAL_UART_Transmit+0x3e>
 8008f74:	2302      	movs	r3, #2
 8008f76:	e06e      	b.n	8009056 <HAL_UART_Transmit+0x11c>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2221      	movs	r2, #33	; 0x21
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f8e:	f7fc f84f 	bl	8005030 <HAL_GetTick>
 8008f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	88fa      	ldrh	r2, [r7, #6]
 8008f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	88fa      	ldrh	r2, [r7, #6]
 8008f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	d108      	bne.n	8008fbc <HAL_UART_Transmit+0x82>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	61bb      	str	r3, [r7, #24]
 8008fba:	e003      	b.n	8008fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008fcc:	e02a      	b.n	8009024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2180      	movs	r1, #128	; 0x80
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f992 	bl	8009302 <UART_WaitOnFlagUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e036      	b.n	8009056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	3302      	adds	r3, #2
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	e007      	b.n	8009016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	781a      	ldrb	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	3301      	adds	r3, #1
 8009014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1cf      	bne.n	8008fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2200      	movs	r2, #0
 8009036:	2140      	movs	r1, #64	; 0x40
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 f962 	bl	8009302 <UART_WaitOnFlagUntilTimeout>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e006      	b.n	8009056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	e000      	b.n	8009056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009054:	2302      	movs	r3, #2
  }
}
 8009056:	4618      	mov	r0, r3
 8009058:	3720      	adds	r7, #32
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	4613      	mov	r3, r2
 800906a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b20      	cmp	r3, #32
 8009076:	d11d      	bne.n	80090b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <HAL_UART_Receive_DMA+0x26>
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d101      	bne.n	8009088 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e016      	b.n	80090b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_UART_Receive_DMA+0x38>
 8009092:	2302      	movs	r3, #2
 8009094:	e00f      	b.n	80090b6 <HAL_UART_Receive_DMA+0x58>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	461a      	mov	r2, r3
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 f998 	bl	80093e0 <UART_Start_Receive_DMA>
 80090b0:	4603      	mov	r3, r0
 80090b2:	e000      	b.n	80090b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80090b4:	2302      	movs	r3, #2
  }
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b083      	sub	sp, #12
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b09c      	sub	sp, #112	; 0x70
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912a:	2b00      	cmp	r3, #0
 800912c:	d172      	bne.n	8009214 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800912e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009130:	2200      	movs	r2, #0
 8009132:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800914a:	66bb      	str	r3, [r7, #104]	; 0x68
 800914c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009154:	65ba      	str	r2, [r7, #88]	; 0x58
 8009156:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800915a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e5      	bne.n	8009134 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3314      	adds	r3, #20
 800916e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	667b      	str	r3, [r7, #100]	; 0x64
 8009180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3314      	adds	r3, #20
 8009186:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009188:	647a      	str	r2, [r7, #68]	; 0x44
 800918a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800918e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e5      	bne.n	8009168 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3314      	adds	r3, #20
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	623b      	str	r3, [r7, #32]
   return(result);
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b2:	663b      	str	r3, [r7, #96]	; 0x60
 80091b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3314      	adds	r3, #20
 80091ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091bc:	633a      	str	r2, [r7, #48]	; 0x30
 80091be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e5      	bne.n	800919c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d2:	2220      	movs	r2, #32
 80091d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d119      	bne.n	8009214 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0310 	bic.w	r3, r3, #16
 80091f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	330c      	adds	r3, #12
 80091fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009200:	61fa      	str	r2, [r7, #28]
 8009202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	69b9      	ldr	r1, [r7, #24]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	617b      	str	r3, [r7, #20]
   return(result);
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e5      	bne.n	80091e0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	2b01      	cmp	r3, #1
 800921a:	d106      	bne.n	800922a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800921c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800921e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009220:	4619      	mov	r1, r3
 8009222:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009224:	f7ff ff69 	bl	80090fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009228:	e002      	b.n	8009230 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800922a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800922c:	f7ff ff47 	bl	80090be <HAL_UART_RxCpltCallback>
}
 8009230:	bf00      	nop
 8009232:	3770      	adds	r7, #112	; 0x70
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	2b01      	cmp	r3, #1
 800924c:	d108      	bne.n	8009260 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	b29b      	uxth	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f7ff ff4e 	bl	80090fa <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800925e:	e002      	b.n	8009266 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7ff ff36 	bl	80090d2 <HAL_UART_RxHalfCpltCallback>
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928a:	2b80      	cmp	r3, #128	; 0x80
 800928c:	bf0c      	ite	eq
 800928e:	2301      	moveq	r3, #1
 8009290:	2300      	movne	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b21      	cmp	r3, #33	; 0x21
 80092a0:	d108      	bne.n	80092b4 <UART_DMAError+0x46>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d005      	beq.n	80092b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80092ae:	68b8      	ldr	r0, [r7, #8]
 80092b0:	f000 f934 	bl	800951c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b40      	cmp	r3, #64	; 0x40
 80092c0:	bf0c      	ite	eq
 80092c2:	2301      	moveq	r3, #1
 80092c4:	2300      	movne	r3, #0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b22      	cmp	r3, #34	; 0x22
 80092d4:	d108      	bne.n	80092e8 <UART_DMAError+0x7a>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2200      	movs	r2, #0
 80092e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80092e2:	68b8      	ldr	r0, [r7, #8]
 80092e4:	f000 f942 	bl	800956c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ec:	f043 0210 	orr.w	r2, r3, #16
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092f4:	68b8      	ldr	r0, [r7, #8]
 80092f6:	f7ff fef6 	bl	80090e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092fa:	bf00      	nop
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b090      	sub	sp, #64	; 0x40
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	4613      	mov	r3, r2
 8009310:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009312:	e050      	b.n	80093b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931a:	d04c      	beq.n	80093b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800931c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <UART_WaitOnFlagUntilTimeout+0x30>
 8009322:	f7fb fe85 	bl	8005030 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932e:	429a      	cmp	r2, r3
 8009330:	d241      	bcs.n	80093b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	330c      	adds	r3, #12
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	330c      	adds	r3, #12
 8009350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009352:	637a      	str	r2, [r7, #52]	; 0x34
 8009354:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	613b      	str	r3, [r7, #16]
   return(result);
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	63bb      	str	r3, [r7, #56]	; 0x38
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3314      	adds	r3, #20
 8009384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009386:	623a      	str	r2, [r7, #32]
 8009388:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	69f9      	ldr	r1, [r7, #28]
 800938c:	6a3a      	ldr	r2, [r7, #32]
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	61bb      	str	r3, [r7, #24]
   return(result);
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e00f      	b.n	80093d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4013      	ands	r3, r2
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	bf0c      	ite	eq
 80093c6:	2301      	moveq	r3, #1
 80093c8:	2300      	movne	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d09f      	beq.n	8009314 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3740      	adds	r7, #64	; 0x40
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b098      	sub	sp, #96	; 0x60
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	88fa      	ldrh	r2, [r7, #6]
 80093f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2222      	movs	r2, #34	; 0x22
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940c:	4a40      	ldr	r2, [pc, #256]	; (8009510 <UART_Start_Receive_DMA+0x130>)
 800940e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	4a3f      	ldr	r2, [pc, #252]	; (8009514 <UART_Start_Receive_DMA+0x134>)
 8009416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	4a3e      	ldr	r2, [pc, #248]	; (8009518 <UART_Start_Receive_DMA+0x138>)
 800941e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	2200      	movs	r2, #0
 8009426:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009428:	f107 0308 	add.w	r3, r7, #8
 800942c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3304      	adds	r3, #4
 8009438:	4619      	mov	r1, r3
 800943a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	f7fb ffe6 	bl	8005410 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	613b      	str	r3, [r7, #16]
 8009458:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d019      	beq.n	800949e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	330c      	adds	r3, #12
 8009470:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009480:	65bb      	str	r3, [r7, #88]	; 0x58
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	330c      	adds	r3, #12
 8009488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800948a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800948c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e5      	bne.n	800946a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3314      	adds	r3, #20
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b0:	f043 0301 	orr.w	r3, r3, #1
 80094b4:	657b      	str	r3, [r7, #84]	; 0x54
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094be:	63ba      	str	r2, [r7, #56]	; 0x38
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e5      	bne.n	800949e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3314      	adds	r3, #20
 80094d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	617b      	str	r3, [r7, #20]
   return(result);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e8:	653b      	str	r3, [r7, #80]	; 0x50
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3314      	adds	r3, #20
 80094f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094f2:	627a      	str	r2, [r7, #36]	; 0x24
 80094f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6a39      	ldr	r1, [r7, #32]
 80094f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e5      	bne.n	80094d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3760      	adds	r7, #96	; 0x60
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	08009113 	.word	0x08009113
 8009514:	08009239 	.word	0x08009239
 8009518:	0800926f 	.word	0x0800926f

0800951c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b089      	sub	sp, #36	; 0x24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	330c      	adds	r3, #12
 800952a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	e853 3f00 	ldrex	r3, [r3]
 8009532:	60bb      	str	r3, [r7, #8]
   return(result);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	330c      	adds	r3, #12
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	61ba      	str	r2, [r7, #24]
 8009546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009548:	6979      	ldr	r1, [r7, #20]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	e841 2300 	strex	r3, r2, [r1]
 8009550:	613b      	str	r3, [r7, #16]
   return(result);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e5      	bne.n	8009524 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2220      	movs	r2, #32
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009560:	bf00      	nop
 8009562:	3724      	adds	r7, #36	; 0x24
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800956c:	b480      	push	{r7}
 800956e:	b095      	sub	sp, #84	; 0x54
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	330c      	adds	r3, #12
 800957a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800958a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	330c      	adds	r3, #12
 8009592:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009594:	643a      	str	r2, [r7, #64]	; 0x40
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800959a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e5      	bne.n	8009574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3314      	adds	r3, #20
 80095ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	e853 3f00 	ldrex	r3, [r3]
 80095b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	f023 0301 	bic.w	r3, r3, #1
 80095be:	64bb      	str	r3, [r7, #72]	; 0x48
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3314      	adds	r3, #20
 80095c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d0:	e841 2300 	strex	r3, r2, [r1]
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e5      	bne.n	80095a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d119      	bne.n	8009618 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	330c      	adds	r3, #12
 80095ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f023 0310 	bic.w	r3, r3, #16
 80095fa:	647b      	str	r3, [r7, #68]	; 0x44
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	330c      	adds	r3, #12
 8009602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009604:	61ba      	str	r2, [r7, #24]
 8009606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	6979      	ldr	r1, [r7, #20]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	613b      	str	r3, [r7, #16]
   return(result);
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e5      	bne.n	80095e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009626:	bf00      	nop
 8009628:	3754      	adds	r7, #84	; 0x54
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
	...

08009634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009638:	b0c0      	sub	sp, #256	; 0x100
 800963a:	af00      	add	r7, sp, #0
 800963c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800964c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009650:	68d9      	ldr	r1, [r3, #12]
 8009652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	ea40 0301 	orr.w	r3, r0, r1
 800965c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800965e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009662:	689a      	ldr	r2, [r3, #8]
 8009664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	431a      	orrs	r2, r3
 800966c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	431a      	orrs	r2, r3
 8009674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800968c:	f021 010c 	bic.w	r1, r1, #12
 8009690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800969a:	430b      	orrs	r3, r1
 800969c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800969e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ae:	6999      	ldr	r1, [r3, #24]
 80096b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	ea40 0301 	orr.w	r3, r0, r1
 80096ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b8f      	ldr	r3, [pc, #572]	; (8009900 <UART_SetConfig+0x2cc>)
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d005      	beq.n	80096d4 <UART_SetConfig+0xa0>
 80096c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4b8d      	ldr	r3, [pc, #564]	; (8009904 <UART_SetConfig+0x2d0>)
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d104      	bne.n	80096de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096d4:	f7fd fcee 	bl	80070b4 <HAL_RCC_GetPCLK2Freq>
 80096d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096dc:	e003      	b.n	80096e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096de:	f7fd fcd5 	bl	800708c <HAL_RCC_GetPCLK1Freq>
 80096e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096f0:	f040 810c 	bne.w	800990c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009706:	4622      	mov	r2, r4
 8009708:	462b      	mov	r3, r5
 800970a:	1891      	adds	r1, r2, r2
 800970c:	65b9      	str	r1, [r7, #88]	; 0x58
 800970e:	415b      	adcs	r3, r3
 8009710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009716:	4621      	mov	r1, r4
 8009718:	eb12 0801 	adds.w	r8, r2, r1
 800971c:	4629      	mov	r1, r5
 800971e:	eb43 0901 	adc.w	r9, r3, r1
 8009722:	f04f 0200 	mov.w	r2, #0
 8009726:	f04f 0300 	mov.w	r3, #0
 800972a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800972e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009736:	4690      	mov	r8, r2
 8009738:	4699      	mov	r9, r3
 800973a:	4623      	mov	r3, r4
 800973c:	eb18 0303 	adds.w	r3, r8, r3
 8009740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009744:	462b      	mov	r3, r5
 8009746:	eb49 0303 	adc.w	r3, r9, r3
 800974a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800974e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800975a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800975e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009762:	460b      	mov	r3, r1
 8009764:	18db      	adds	r3, r3, r3
 8009766:	653b      	str	r3, [r7, #80]	; 0x50
 8009768:	4613      	mov	r3, r2
 800976a:	eb42 0303 	adc.w	r3, r2, r3
 800976e:	657b      	str	r3, [r7, #84]	; 0x54
 8009770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009778:	f7f7 fa2a 	bl	8000bd0 <__aeabi_uldivmod>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4b61      	ldr	r3, [pc, #388]	; (8009908 <UART_SetConfig+0x2d4>)
 8009782:	fba3 2302 	umull	r2, r3, r3, r2
 8009786:	095b      	lsrs	r3, r3, #5
 8009788:	011c      	lsls	r4, r3, #4
 800978a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978e:	2200      	movs	r2, #0
 8009790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009794:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800979c:	4642      	mov	r2, r8
 800979e:	464b      	mov	r3, r9
 80097a0:	1891      	adds	r1, r2, r2
 80097a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80097a4:	415b      	adcs	r3, r3
 80097a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097ac:	4641      	mov	r1, r8
 80097ae:	eb12 0a01 	adds.w	sl, r2, r1
 80097b2:	4649      	mov	r1, r9
 80097b4:	eb43 0b01 	adc.w	fp, r3, r1
 80097b8:	f04f 0200 	mov.w	r2, #0
 80097bc:	f04f 0300 	mov.w	r3, #0
 80097c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097cc:	4692      	mov	sl, r2
 80097ce:	469b      	mov	fp, r3
 80097d0:	4643      	mov	r3, r8
 80097d2:	eb1a 0303 	adds.w	r3, sl, r3
 80097d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097da:	464b      	mov	r3, r9
 80097dc:	eb4b 0303 	adc.w	r3, fp, r3
 80097e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80097f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097f8:	460b      	mov	r3, r1
 80097fa:	18db      	adds	r3, r3, r3
 80097fc:	643b      	str	r3, [r7, #64]	; 0x40
 80097fe:	4613      	mov	r3, r2
 8009800:	eb42 0303 	adc.w	r3, r2, r3
 8009804:	647b      	str	r3, [r7, #68]	; 0x44
 8009806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800980a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800980e:	f7f7 f9df 	bl	8000bd0 <__aeabi_uldivmod>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4611      	mov	r1, r2
 8009818:	4b3b      	ldr	r3, [pc, #236]	; (8009908 <UART_SetConfig+0x2d4>)
 800981a:	fba3 2301 	umull	r2, r3, r3, r1
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	2264      	movs	r2, #100	; 0x64
 8009822:	fb02 f303 	mul.w	r3, r2, r3
 8009826:	1acb      	subs	r3, r1, r3
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800982e:	4b36      	ldr	r3, [pc, #216]	; (8009908 <UART_SetConfig+0x2d4>)
 8009830:	fba3 2302 	umull	r2, r3, r3, r2
 8009834:	095b      	lsrs	r3, r3, #5
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800983c:	441c      	add	r4, r3
 800983e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009842:	2200      	movs	r2, #0
 8009844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009848:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800984c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009850:	4642      	mov	r2, r8
 8009852:	464b      	mov	r3, r9
 8009854:	1891      	adds	r1, r2, r2
 8009856:	63b9      	str	r1, [r7, #56]	; 0x38
 8009858:	415b      	adcs	r3, r3
 800985a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800985c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009860:	4641      	mov	r1, r8
 8009862:	1851      	adds	r1, r2, r1
 8009864:	6339      	str	r1, [r7, #48]	; 0x30
 8009866:	4649      	mov	r1, r9
 8009868:	414b      	adcs	r3, r1
 800986a:	637b      	str	r3, [r7, #52]	; 0x34
 800986c:	f04f 0200 	mov.w	r2, #0
 8009870:	f04f 0300 	mov.w	r3, #0
 8009874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009878:	4659      	mov	r1, fp
 800987a:	00cb      	lsls	r3, r1, #3
 800987c:	4651      	mov	r1, sl
 800987e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009882:	4651      	mov	r1, sl
 8009884:	00ca      	lsls	r2, r1, #3
 8009886:	4610      	mov	r0, r2
 8009888:	4619      	mov	r1, r3
 800988a:	4603      	mov	r3, r0
 800988c:	4642      	mov	r2, r8
 800988e:	189b      	adds	r3, r3, r2
 8009890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009894:	464b      	mov	r3, r9
 8009896:	460a      	mov	r2, r1
 8009898:	eb42 0303 	adc.w	r3, r2, r3
 800989c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098b4:	460b      	mov	r3, r1
 80098b6:	18db      	adds	r3, r3, r3
 80098b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ba:	4613      	mov	r3, r2
 80098bc:	eb42 0303 	adc.w	r3, r2, r3
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098ca:	f7f7 f981 	bl	8000bd0 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <UART_SetConfig+0x2d4>)
 80098d4:	fba3 1302 	umull	r1, r3, r3, r2
 80098d8:	095b      	lsrs	r3, r3, #5
 80098da:	2164      	movs	r1, #100	; 0x64
 80098dc:	fb01 f303 	mul.w	r3, r1, r3
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	3332      	adds	r3, #50	; 0x32
 80098e6:	4a08      	ldr	r2, [pc, #32]	; (8009908 <UART_SetConfig+0x2d4>)
 80098e8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	f003 0207 	and.w	r2, r3, #7
 80098f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4422      	add	r2, r4
 80098fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098fc:	e105      	b.n	8009b0a <UART_SetConfig+0x4d6>
 80098fe:	bf00      	nop
 8009900:	40011000 	.word	0x40011000
 8009904:	40011400 	.word	0x40011400
 8009908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800990c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009910:	2200      	movs	r2, #0
 8009912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009916:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800991a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800991e:	4642      	mov	r2, r8
 8009920:	464b      	mov	r3, r9
 8009922:	1891      	adds	r1, r2, r2
 8009924:	6239      	str	r1, [r7, #32]
 8009926:	415b      	adcs	r3, r3
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
 800992a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800992e:	4641      	mov	r1, r8
 8009930:	1854      	adds	r4, r2, r1
 8009932:	4649      	mov	r1, r9
 8009934:	eb43 0501 	adc.w	r5, r3, r1
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	00eb      	lsls	r3, r5, #3
 8009942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009946:	00e2      	lsls	r2, r4, #3
 8009948:	4614      	mov	r4, r2
 800994a:	461d      	mov	r5, r3
 800994c:	4643      	mov	r3, r8
 800994e:	18e3      	adds	r3, r4, r3
 8009950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009954:	464b      	mov	r3, r9
 8009956:	eb45 0303 	adc.w	r3, r5, r3
 800995a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800995e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800996a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800996e:	f04f 0200 	mov.w	r2, #0
 8009972:	f04f 0300 	mov.w	r3, #0
 8009976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800997a:	4629      	mov	r1, r5
 800997c:	008b      	lsls	r3, r1, #2
 800997e:	4621      	mov	r1, r4
 8009980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009984:	4621      	mov	r1, r4
 8009986:	008a      	lsls	r2, r1, #2
 8009988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800998c:	f7f7 f920 	bl	8000bd0 <__aeabi_uldivmod>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4b60      	ldr	r3, [pc, #384]	; (8009b18 <UART_SetConfig+0x4e4>)
 8009996:	fba3 2302 	umull	r2, r3, r3, r2
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	011c      	lsls	r4, r3, #4
 800999e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099b0:	4642      	mov	r2, r8
 80099b2:	464b      	mov	r3, r9
 80099b4:	1891      	adds	r1, r2, r2
 80099b6:	61b9      	str	r1, [r7, #24]
 80099b8:	415b      	adcs	r3, r3
 80099ba:	61fb      	str	r3, [r7, #28]
 80099bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099c0:	4641      	mov	r1, r8
 80099c2:	1851      	adds	r1, r2, r1
 80099c4:	6139      	str	r1, [r7, #16]
 80099c6:	4649      	mov	r1, r9
 80099c8:	414b      	adcs	r3, r1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099d8:	4659      	mov	r1, fp
 80099da:	00cb      	lsls	r3, r1, #3
 80099dc:	4651      	mov	r1, sl
 80099de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099e2:	4651      	mov	r1, sl
 80099e4:	00ca      	lsls	r2, r1, #3
 80099e6:	4610      	mov	r0, r2
 80099e8:	4619      	mov	r1, r3
 80099ea:	4603      	mov	r3, r0
 80099ec:	4642      	mov	r2, r8
 80099ee:	189b      	adds	r3, r3, r2
 80099f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099f4:	464b      	mov	r3, r9
 80099f6:	460a      	mov	r2, r1
 80099f8:	eb42 0303 	adc.w	r3, r2, r3
 80099fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	f04f 0300 	mov.w	r3, #0
 8009a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a18:	4649      	mov	r1, r9
 8009a1a:	008b      	lsls	r3, r1, #2
 8009a1c:	4641      	mov	r1, r8
 8009a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a22:	4641      	mov	r1, r8
 8009a24:	008a      	lsls	r2, r1, #2
 8009a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a2a:	f7f7 f8d1 	bl	8000bd0 <__aeabi_uldivmod>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4b39      	ldr	r3, [pc, #228]	; (8009b18 <UART_SetConfig+0x4e4>)
 8009a34:	fba3 1302 	umull	r1, r3, r3, r2
 8009a38:	095b      	lsrs	r3, r3, #5
 8009a3a:	2164      	movs	r1, #100	; 0x64
 8009a3c:	fb01 f303 	mul.w	r3, r1, r3
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	011b      	lsls	r3, r3, #4
 8009a44:	3332      	adds	r3, #50	; 0x32
 8009a46:	4a34      	ldr	r2, [pc, #208]	; (8009b18 <UART_SetConfig+0x4e4>)
 8009a48:	fba2 2303 	umull	r2, r3, r2, r3
 8009a4c:	095b      	lsrs	r3, r3, #5
 8009a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a52:	441c      	add	r4, r3
 8009a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a58:	2200      	movs	r2, #0
 8009a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8009a5c:	677a      	str	r2, [r7, #116]	; 0x74
 8009a5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a62:	4642      	mov	r2, r8
 8009a64:	464b      	mov	r3, r9
 8009a66:	1891      	adds	r1, r2, r2
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	415b      	adcs	r3, r3
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a72:	4641      	mov	r1, r8
 8009a74:	1851      	adds	r1, r2, r1
 8009a76:	6039      	str	r1, [r7, #0]
 8009a78:	4649      	mov	r1, r9
 8009a7a:	414b      	adcs	r3, r1
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a8a:	4659      	mov	r1, fp
 8009a8c:	00cb      	lsls	r3, r1, #3
 8009a8e:	4651      	mov	r1, sl
 8009a90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a94:	4651      	mov	r1, sl
 8009a96:	00ca      	lsls	r2, r1, #3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4642      	mov	r2, r8
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aa4:	464b      	mov	r3, r9
 8009aa6:	460a      	mov	r2, r1
 8009aa8:	eb42 0303 	adc.w	r3, r2, r3
 8009aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ab8:	667a      	str	r2, [r7, #100]	; 0x64
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	008b      	lsls	r3, r1, #2
 8009aca:	4641      	mov	r1, r8
 8009acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ad0:	4641      	mov	r1, r8
 8009ad2:	008a      	lsls	r2, r1, #2
 8009ad4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ad8:	f7f7 f87a 	bl	8000bd0 <__aeabi_uldivmod>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <UART_SetConfig+0x4e4>)
 8009ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ae6:	095b      	lsrs	r3, r3, #5
 8009ae8:	2164      	movs	r1, #100	; 0x64
 8009aea:	fb01 f303 	mul.w	r3, r1, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	011b      	lsls	r3, r3, #4
 8009af2:	3332      	adds	r3, #50	; 0x32
 8009af4:	4a08      	ldr	r2, [pc, #32]	; (8009b18 <UART_SetConfig+0x4e4>)
 8009af6:	fba2 2303 	umull	r2, r3, r2, r3
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	f003 020f 	and.w	r2, r3, #15
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4422      	add	r2, r4
 8009b08:	609a      	str	r2, [r3, #8]
}
 8009b0a:	bf00      	nop
 8009b0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b10:	46bd      	mov	sp, r7
 8009b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b16:	bf00      	nop
 8009b18:	51eb851f 	.word	0x51eb851f

08009b1c <copysign>:
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	ec51 0b10 	vmov	r0, r1, d0
 8009b22:	ed8d 1b00 	vstr	d1, [sp]
 8009b26:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8009b2a:	9901      	ldr	r1, [sp, #4]
 8009b2c:	ee10 2a10 	vmov	r2, s0
 8009b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009b34:	ea40 0301 	orr.w	r3, r0, r1
 8009b38:	ec43 2b10 	vmov	d0, r2, r3
 8009b3c:	b002      	add	sp, #8
 8009b3e:	4770      	bx	lr

08009b40 <cosf>:
 8009b40:	ee10 3a10 	vmov	r3, s0
 8009b44:	b507      	push	{r0, r1, r2, lr}
 8009b46:	4a1e      	ldr	r2, [pc, #120]	; (8009bc0 <cosf+0x80>)
 8009b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	dc06      	bgt.n	8009b5e <cosf+0x1e>
 8009b50:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009bc4 <cosf+0x84>
 8009b54:	b003      	add	sp, #12
 8009b56:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b5a:	f000 bd65 	b.w	800a628 <__kernel_cosf>
 8009b5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b62:	db04      	blt.n	8009b6e <cosf+0x2e>
 8009b64:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009b68:	b003      	add	sp, #12
 8009b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b6e:	4668      	mov	r0, sp
 8009b70:	f000 fc1e 	bl	800a3b0 <__ieee754_rem_pio2f>
 8009b74:	f000 0003 	and.w	r0, r0, #3
 8009b78:	2801      	cmp	r0, #1
 8009b7a:	d009      	beq.n	8009b90 <cosf+0x50>
 8009b7c:	2802      	cmp	r0, #2
 8009b7e:	d010      	beq.n	8009ba2 <cosf+0x62>
 8009b80:	b9b0      	cbnz	r0, 8009bb0 <cosf+0x70>
 8009b82:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b86:	ed9d 0a00 	vldr	s0, [sp]
 8009b8a:	f000 fd4d 	bl	800a628 <__kernel_cosf>
 8009b8e:	e7eb      	b.n	8009b68 <cosf+0x28>
 8009b90:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b94:	ed9d 0a00 	vldr	s0, [sp]
 8009b98:	f001 f81c 	bl	800abd4 <__kernel_sinf>
 8009b9c:	eeb1 0a40 	vneg.f32	s0, s0
 8009ba0:	e7e2      	b.n	8009b68 <cosf+0x28>
 8009ba2:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ba6:	ed9d 0a00 	vldr	s0, [sp]
 8009baa:	f000 fd3d 	bl	800a628 <__kernel_cosf>
 8009bae:	e7f5      	b.n	8009b9c <cosf+0x5c>
 8009bb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8009bb4:	ed9d 0a00 	vldr	s0, [sp]
 8009bb8:	2001      	movs	r0, #1
 8009bba:	f001 f80b 	bl	800abd4 <__kernel_sinf>
 8009bbe:	e7d3      	b.n	8009b68 <cosf+0x28>
 8009bc0:	3f490fd8 	.word	0x3f490fd8
 8009bc4:	00000000 	.word	0x00000000

08009bc8 <asin>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	ed2d 8b02 	vpush	{d8}
 8009bce:	ec55 4b10 	vmov	r4, r5, d0
 8009bd2:	f000 f85d 	bl	8009c90 <__ieee754_asin>
 8009bd6:	4622      	mov	r2, r4
 8009bd8:	462b      	mov	r3, r5
 8009bda:	4620      	mov	r0, r4
 8009bdc:	4629      	mov	r1, r5
 8009bde:	eeb0 8a40 	vmov.f32	s16, s0
 8009be2:	eef0 8a60 	vmov.f32	s17, s1
 8009be6:	f7f6 ff65 	bl	8000ab4 <__aeabi_dcmpun>
 8009bea:	b9a8      	cbnz	r0, 8009c18 <asin+0x50>
 8009bec:	ec45 4b10 	vmov	d0, r4, r5
 8009bf0:	f001 f9da 	bl	800afa8 <fabs>
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <asin+0x60>)
 8009bf6:	ec51 0b10 	vmov	r0, r1, d0
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f7f6 ff50 	bl	8000aa0 <__aeabi_dcmpgt>
 8009c00:	b150      	cbz	r0, 8009c18 <asin+0x50>
 8009c02:	f001 faa1 	bl	800b148 <__errno>
 8009c06:	ecbd 8b02 	vpop	{d8}
 8009c0a:	2321      	movs	r3, #33	; 0x21
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c12:	4806      	ldr	r0, [pc, #24]	; (8009c2c <asin+0x64>)
 8009c14:	f001 b9d4 	b.w	800afc0 <nan>
 8009c18:	eeb0 0a48 	vmov.f32	s0, s16
 8009c1c:	eef0 0a68 	vmov.f32	s1, s17
 8009c20:	ecbd 8b02 	vpop	{d8}
 8009c24:	bd38      	pop	{r3, r4, r5, pc}
 8009c26:	bf00      	nop
 8009c28:	3ff00000 	.word	0x3ff00000
 8009c2c:	0800b200 	.word	0x0800b200

08009c30 <atan2>:
 8009c30:	f000 ba42 	b.w	800a0b8 <__ieee754_atan2>

08009c34 <sqrt>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	ed2d 8b02 	vpush	{d8}
 8009c3a:	ec55 4b10 	vmov	r4, r5, d0
 8009c3e:	f000 fb05 	bl	800a24c <__ieee754_sqrt>
 8009c42:	4622      	mov	r2, r4
 8009c44:	462b      	mov	r3, r5
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	eeb0 8a40 	vmov.f32	s16, s0
 8009c4e:	eef0 8a60 	vmov.f32	s17, s1
 8009c52:	f7f6 ff2f 	bl	8000ab4 <__aeabi_dcmpun>
 8009c56:	b990      	cbnz	r0, 8009c7e <sqrt+0x4a>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f7f6 ff00 	bl	8000a64 <__aeabi_dcmplt>
 8009c64:	b158      	cbz	r0, 8009c7e <sqrt+0x4a>
 8009c66:	f001 fa6f 	bl	800b148 <__errno>
 8009c6a:	2321      	movs	r3, #33	; 0x21
 8009c6c:	6003      	str	r3, [r0, #0]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2300      	movs	r3, #0
 8009c72:	4610      	mov	r0, r2
 8009c74:	4619      	mov	r1, r3
 8009c76:	f7f6 fdad 	bl	80007d4 <__aeabi_ddiv>
 8009c7a:	ec41 0b18 	vmov	d8, r0, r1
 8009c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8009c82:	eef0 0a68 	vmov.f32	s1, s17
 8009c86:	ecbd 8b02 	vpop	{d8}
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	0000      	movs	r0, r0
	...

08009c90 <__ieee754_asin>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	ed2d 8b04 	vpush	{d8-d9}
 8009c98:	ec55 4b10 	vmov	r4, r5, d0
 8009c9c:	4bcc      	ldr	r3, [pc, #816]	; (8009fd0 <__ieee754_asin+0x340>)
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009ca4:	4598      	cmp	r8, r3
 8009ca6:	9501      	str	r5, [sp, #4]
 8009ca8:	dd35      	ble.n	8009d16 <__ieee754_asin+0x86>
 8009caa:	ee10 3a10 	vmov	r3, s0
 8009cae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009cb2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009cb6:	ea58 0303 	orrs.w	r3, r8, r3
 8009cba:	d117      	bne.n	8009cec <__ieee754_asin+0x5c>
 8009cbc:	a3aa      	add	r3, pc, #680	; (adr r3, 8009f68 <__ieee754_asin+0x2d8>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	ee10 0a10 	vmov	r0, s0
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	f7f6 fc5a 	bl	8000580 <__aeabi_dmul>
 8009ccc:	a3a8      	add	r3, pc, #672	; (adr r3, 8009f70 <__ieee754_asin+0x2e0>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	4629      	mov	r1, r5
 8009cda:	f7f6 fc51 	bl	8000580 <__aeabi_dmul>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fa95 	bl	8000214 <__adddf3>
 8009cea:	e00b      	b.n	8009d04 <__ieee754_asin+0x74>
 8009cec:	ee10 2a10 	vmov	r2, s0
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	ee10 0a10 	vmov	r0, s0
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	f7f6 fa8a 	bl	8000210 <__aeabi_dsub>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	f7f6 fd68 	bl	80007d4 <__aeabi_ddiv>
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	ec45 4b10 	vmov	d0, r4, r5
 8009d0c:	b003      	add	sp, #12
 8009d0e:	ecbd 8b04 	vpop	{d8-d9}
 8009d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d16:	4baf      	ldr	r3, [pc, #700]	; (8009fd4 <__ieee754_asin+0x344>)
 8009d18:	4598      	cmp	r8, r3
 8009d1a:	dc11      	bgt.n	8009d40 <__ieee754_asin+0xb0>
 8009d1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009d20:	f280 80ae 	bge.w	8009e80 <__ieee754_asin+0x1f0>
 8009d24:	a394      	add	r3, pc, #592	; (adr r3, 8009f78 <__ieee754_asin+0x2e8>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	ee10 0a10 	vmov	r0, s0
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f7f6 fa70 	bl	8000214 <__adddf3>
 8009d34:	4ba8      	ldr	r3, [pc, #672]	; (8009fd8 <__ieee754_asin+0x348>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	f7f6 feb2 	bl	8000aa0 <__aeabi_dcmpgt>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d1e3      	bne.n	8009d08 <__ieee754_asin+0x78>
 8009d40:	ec45 4b10 	vmov	d0, r4, r5
 8009d44:	f001 f930 	bl	800afa8 <fabs>
 8009d48:	49a3      	ldr	r1, [pc, #652]	; (8009fd8 <__ieee754_asin+0x348>)
 8009d4a:	ec53 2b10 	vmov	r2, r3, d0
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f7f6 fa5e 	bl	8000210 <__aeabi_dsub>
 8009d54:	4ba1      	ldr	r3, [pc, #644]	; (8009fdc <__ieee754_asin+0x34c>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	f7f6 fc12 	bl	8000580 <__aeabi_dmul>
 8009d5c:	a388      	add	r3, pc, #544	; (adr r3, 8009f80 <__ieee754_asin+0x2f0>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	4604      	mov	r4, r0
 8009d64:	460d      	mov	r5, r1
 8009d66:	f7f6 fc0b 	bl	8000580 <__aeabi_dmul>
 8009d6a:	a387      	add	r3, pc, #540	; (adr r3, 8009f88 <__ieee754_asin+0x2f8>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fa50 	bl	8000214 <__adddf3>
 8009d74:	4622      	mov	r2, r4
 8009d76:	462b      	mov	r3, r5
 8009d78:	f7f6 fc02 	bl	8000580 <__aeabi_dmul>
 8009d7c:	a384      	add	r3, pc, #528	; (adr r3, 8009f90 <__ieee754_asin+0x300>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f7f6 fa45 	bl	8000210 <__aeabi_dsub>
 8009d86:	4622      	mov	r2, r4
 8009d88:	462b      	mov	r3, r5
 8009d8a:	f7f6 fbf9 	bl	8000580 <__aeabi_dmul>
 8009d8e:	a382      	add	r3, pc, #520	; (adr r3, 8009f98 <__ieee754_asin+0x308>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f7f6 fa3e 	bl	8000214 <__adddf3>
 8009d98:	4622      	mov	r2, r4
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	f7f6 fbf0 	bl	8000580 <__aeabi_dmul>
 8009da0:	a37f      	add	r3, pc, #508	; (adr r3, 8009fa0 <__ieee754_asin+0x310>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f7f6 fa33 	bl	8000210 <__aeabi_dsub>
 8009daa:	4622      	mov	r2, r4
 8009dac:	462b      	mov	r3, r5
 8009dae:	f7f6 fbe7 	bl	8000580 <__aeabi_dmul>
 8009db2:	a37d      	add	r3, pc, #500	; (adr r3, 8009fa8 <__ieee754_asin+0x318>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f7f6 fa2c 	bl	8000214 <__adddf3>
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	462b      	mov	r3, r5
 8009dc0:	f7f6 fbde 	bl	8000580 <__aeabi_dmul>
 8009dc4:	a37a      	add	r3, pc, #488	; (adr r3, 8009fb0 <__ieee754_asin+0x320>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	ec41 0b18 	vmov	d8, r0, r1
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fbd5 	bl	8000580 <__aeabi_dmul>
 8009dd6:	a378      	add	r3, pc, #480	; (adr r3, 8009fb8 <__ieee754_asin+0x328>)
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	f7f6 fa18 	bl	8000210 <__aeabi_dsub>
 8009de0:	4622      	mov	r2, r4
 8009de2:	462b      	mov	r3, r5
 8009de4:	f7f6 fbcc 	bl	8000580 <__aeabi_dmul>
 8009de8:	a375      	add	r3, pc, #468	; (adr r3, 8009fc0 <__ieee754_asin+0x330>)
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f7f6 fa11 	bl	8000214 <__adddf3>
 8009df2:	4622      	mov	r2, r4
 8009df4:	462b      	mov	r3, r5
 8009df6:	f7f6 fbc3 	bl	8000580 <__aeabi_dmul>
 8009dfa:	a373      	add	r3, pc, #460	; (adr r3, 8009fc8 <__ieee754_asin+0x338>)
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f7f6 fa06 	bl	8000210 <__aeabi_dsub>
 8009e04:	4622      	mov	r2, r4
 8009e06:	462b      	mov	r3, r5
 8009e08:	f7f6 fbba 	bl	8000580 <__aeabi_dmul>
 8009e0c:	4b72      	ldr	r3, [pc, #456]	; (8009fd8 <__ieee754_asin+0x348>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f7f6 fa00 	bl	8000214 <__adddf3>
 8009e14:	ec45 4b10 	vmov	d0, r4, r5
 8009e18:	4606      	mov	r6, r0
 8009e1a:	460f      	mov	r7, r1
 8009e1c:	f000 fa16 	bl	800a24c <__ieee754_sqrt>
 8009e20:	4b6f      	ldr	r3, [pc, #444]	; (8009fe0 <__ieee754_asin+0x350>)
 8009e22:	4598      	cmp	r8, r3
 8009e24:	ec5b ab10 	vmov	sl, fp, d0
 8009e28:	f340 80dc 	ble.w	8009fe4 <__ieee754_asin+0x354>
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	ec51 0b18 	vmov	r0, r1, d8
 8009e34:	f7f6 fcce 	bl	80007d4 <__aeabi_ddiv>
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	f7f6 fba0 	bl	8000580 <__aeabi_dmul>
 8009e40:	4652      	mov	r2, sl
 8009e42:	465b      	mov	r3, fp
 8009e44:	f7f6 f9e6 	bl	8000214 <__adddf3>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	f7f6 f9e2 	bl	8000214 <__adddf3>
 8009e50:	a347      	add	r3, pc, #284	; (adr r3, 8009f70 <__ieee754_asin+0x2e0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 f9db 	bl	8000210 <__aeabi_dsub>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	a142      	add	r1, pc, #264	; (adr r1, 8009f68 <__ieee754_asin+0x2d8>)
 8009e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e64:	f7f6 f9d4 	bl	8000210 <__aeabi_dsub>
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfdc      	itt	le
 8009e6e:	4602      	movle	r2, r0
 8009e70:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	bfdc      	itt	le
 8009e7a:	4614      	movle	r4, r2
 8009e7c:	461d      	movle	r5, r3
 8009e7e:	e743      	b.n	8009d08 <__ieee754_asin+0x78>
 8009e80:	ee10 2a10 	vmov	r2, s0
 8009e84:	ee10 0a10 	vmov	r0, s0
 8009e88:	462b      	mov	r3, r5
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7f6 fb78 	bl	8000580 <__aeabi_dmul>
 8009e90:	a33b      	add	r3, pc, #236	; (adr r3, 8009f80 <__ieee754_asin+0x2f0>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	4606      	mov	r6, r0
 8009e98:	460f      	mov	r7, r1
 8009e9a:	f7f6 fb71 	bl	8000580 <__aeabi_dmul>
 8009e9e:	a33a      	add	r3, pc, #232	; (adr r3, 8009f88 <__ieee754_asin+0x2f8>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 f9b6 	bl	8000214 <__adddf3>
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	463b      	mov	r3, r7
 8009eac:	f7f6 fb68 	bl	8000580 <__aeabi_dmul>
 8009eb0:	a337      	add	r3, pc, #220	; (adr r3, 8009f90 <__ieee754_asin+0x300>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 f9ab 	bl	8000210 <__aeabi_dsub>
 8009eba:	4632      	mov	r2, r6
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	f7f6 fb5f 	bl	8000580 <__aeabi_dmul>
 8009ec2:	a335      	add	r3, pc, #212	; (adr r3, 8009f98 <__ieee754_asin+0x308>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 f9a4 	bl	8000214 <__adddf3>
 8009ecc:	4632      	mov	r2, r6
 8009ece:	463b      	mov	r3, r7
 8009ed0:	f7f6 fb56 	bl	8000580 <__aeabi_dmul>
 8009ed4:	a332      	add	r3, pc, #200	; (adr r3, 8009fa0 <__ieee754_asin+0x310>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f7f6 f999 	bl	8000210 <__aeabi_dsub>
 8009ede:	4632      	mov	r2, r6
 8009ee0:	463b      	mov	r3, r7
 8009ee2:	f7f6 fb4d 	bl	8000580 <__aeabi_dmul>
 8009ee6:	a330      	add	r3, pc, #192	; (adr r3, 8009fa8 <__ieee754_asin+0x318>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f7f6 f992 	bl	8000214 <__adddf3>
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	f7f6 fb44 	bl	8000580 <__aeabi_dmul>
 8009ef8:	a32d      	add	r3, pc, #180	; (adr r3, 8009fb0 <__ieee754_asin+0x320>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	4680      	mov	r8, r0
 8009f00:	4689      	mov	r9, r1
 8009f02:	4630      	mov	r0, r6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f7f6 fb3b 	bl	8000580 <__aeabi_dmul>
 8009f0a:	a32b      	add	r3, pc, #172	; (adr r3, 8009fb8 <__ieee754_asin+0x328>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 f97e 	bl	8000210 <__aeabi_dsub>
 8009f14:	4632      	mov	r2, r6
 8009f16:	463b      	mov	r3, r7
 8009f18:	f7f6 fb32 	bl	8000580 <__aeabi_dmul>
 8009f1c:	a328      	add	r3, pc, #160	; (adr r3, 8009fc0 <__ieee754_asin+0x330>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 f977 	bl	8000214 <__adddf3>
 8009f26:	4632      	mov	r2, r6
 8009f28:	463b      	mov	r3, r7
 8009f2a:	f7f6 fb29 	bl	8000580 <__aeabi_dmul>
 8009f2e:	a326      	add	r3, pc, #152	; (adr r3, 8009fc8 <__ieee754_asin+0x338>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f7f6 f96c 	bl	8000210 <__aeabi_dsub>
 8009f38:	4632      	mov	r2, r6
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	f7f6 fb20 	bl	8000580 <__aeabi_dmul>
 8009f40:	4b25      	ldr	r3, [pc, #148]	; (8009fd8 <__ieee754_asin+0x348>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	f7f6 f966 	bl	8000214 <__adddf3>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	4649      	mov	r1, r9
 8009f50:	f7f6 fc40 	bl	80007d4 <__aeabi_ddiv>
 8009f54:	4622      	mov	r2, r4
 8009f56:	462b      	mov	r3, r5
 8009f58:	f7f6 fb12 	bl	8000580 <__aeabi_dmul>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4620      	mov	r0, r4
 8009f62:	4629      	mov	r1, r5
 8009f64:	e6bf      	b.n	8009ce6 <__ieee754_asin+0x56>
 8009f66:	bf00      	nop
 8009f68:	54442d18 	.word	0x54442d18
 8009f6c:	3ff921fb 	.word	0x3ff921fb
 8009f70:	33145c07 	.word	0x33145c07
 8009f74:	3c91a626 	.word	0x3c91a626
 8009f78:	8800759c 	.word	0x8800759c
 8009f7c:	7e37e43c 	.word	0x7e37e43c
 8009f80:	0dfdf709 	.word	0x0dfdf709
 8009f84:	3f023de1 	.word	0x3f023de1
 8009f88:	7501b288 	.word	0x7501b288
 8009f8c:	3f49efe0 	.word	0x3f49efe0
 8009f90:	b5688f3b 	.word	0xb5688f3b
 8009f94:	3fa48228 	.word	0x3fa48228
 8009f98:	0e884455 	.word	0x0e884455
 8009f9c:	3fc9c155 	.word	0x3fc9c155
 8009fa0:	03eb6f7d 	.word	0x03eb6f7d
 8009fa4:	3fd4d612 	.word	0x3fd4d612
 8009fa8:	55555555 	.word	0x55555555
 8009fac:	3fc55555 	.word	0x3fc55555
 8009fb0:	b12e9282 	.word	0xb12e9282
 8009fb4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009fb8:	1b8d0159 	.word	0x1b8d0159
 8009fbc:	3fe6066c 	.word	0x3fe6066c
 8009fc0:	9c598ac8 	.word	0x9c598ac8
 8009fc4:	40002ae5 	.word	0x40002ae5
 8009fc8:	1c8a2d4b 	.word	0x1c8a2d4b
 8009fcc:	40033a27 	.word	0x40033a27
 8009fd0:	3fefffff 	.word	0x3fefffff
 8009fd4:	3fdfffff 	.word	0x3fdfffff
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	3fef3332 	.word	0x3fef3332
 8009fe4:	ee10 2a10 	vmov	r2, s0
 8009fe8:	ee10 0a10 	vmov	r0, s0
 8009fec:	465b      	mov	r3, fp
 8009fee:	4659      	mov	r1, fp
 8009ff0:	f7f6 f910 	bl	8000214 <__adddf3>
 8009ff4:	4632      	mov	r2, r6
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	ec41 0b19 	vmov	d9, r0, r1
 8009ffc:	ec51 0b18 	vmov	r0, r1, d8
 800a000:	f7f6 fbe8 	bl	80007d4 <__aeabi_ddiv>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	ec51 0b19 	vmov	r0, r1, d9
 800a00c:	f7f6 fab8 	bl	8000580 <__aeabi_dmul>
 800a010:	f04f 0800 	mov.w	r8, #0
 800a014:	4606      	mov	r6, r0
 800a016:	460f      	mov	r7, r1
 800a018:	4642      	mov	r2, r8
 800a01a:	465b      	mov	r3, fp
 800a01c:	4640      	mov	r0, r8
 800a01e:	4659      	mov	r1, fp
 800a020:	f7f6 faae 	bl	8000580 <__aeabi_dmul>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	f7f6 f8f0 	bl	8000210 <__aeabi_dsub>
 800a030:	4642      	mov	r2, r8
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	465b      	mov	r3, fp
 800a038:	4650      	mov	r0, sl
 800a03a:	4659      	mov	r1, fp
 800a03c:	f7f6 f8ea 	bl	8000214 <__adddf3>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4620      	mov	r0, r4
 800a046:	4629      	mov	r1, r5
 800a048:	f7f6 fbc4 	bl	80007d4 <__aeabi_ddiv>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	f7f6 f8e0 	bl	8000214 <__adddf3>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	a113      	add	r1, pc, #76	; (adr r1, 800a0a8 <__ieee754_asin+0x418>)
 800a05a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a05e:	f7f6 f8d7 	bl	8000210 <__aeabi_dsub>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 f8d1 	bl	8000210 <__aeabi_dsub>
 800a06e:	4642      	mov	r2, r8
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	465b      	mov	r3, fp
 800a076:	4640      	mov	r0, r8
 800a078:	4659      	mov	r1, fp
 800a07a:	f7f6 f8cb 	bl	8000214 <__adddf3>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	a10b      	add	r1, pc, #44	; (adr r1, 800a0b0 <__ieee754_asin+0x420>)
 800a084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a088:	f7f6 f8c2 	bl	8000210 <__aeabi_dsub>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 f8bc 	bl	8000210 <__aeabi_dsub>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	a104      	add	r1, pc, #16	; (adr r1, 800a0b0 <__ieee754_asin+0x420>)
 800a09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a2:	e6df      	b.n	8009e64 <__ieee754_asin+0x1d4>
 800a0a4:	f3af 8000 	nop.w
 800a0a8:	33145c07 	.word	0x33145c07
 800a0ac:	3c91a626 	.word	0x3c91a626
 800a0b0:	54442d18 	.word	0x54442d18
 800a0b4:	3fe921fb 	.word	0x3fe921fb

0800a0b8 <__ieee754_atan2>:
 800a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	ec57 6b11 	vmov	r6, r7, d1
 800a0c0:	4273      	negs	r3, r6
 800a0c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a248 <__ieee754_atan2+0x190>
 800a0c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a0ca:	4333      	orrs	r3, r6
 800a0cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a0d0:	4573      	cmp	r3, lr
 800a0d2:	ec51 0b10 	vmov	r0, r1, d0
 800a0d6:	ee11 8a10 	vmov	r8, s2
 800a0da:	d80a      	bhi.n	800a0f2 <__ieee754_atan2+0x3a>
 800a0dc:	4244      	negs	r4, r0
 800a0de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0e2:	4304      	orrs	r4, r0
 800a0e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a0e8:	4574      	cmp	r4, lr
 800a0ea:	ee10 9a10 	vmov	r9, s0
 800a0ee:	468c      	mov	ip, r1
 800a0f0:	d907      	bls.n	800a102 <__ieee754_atan2+0x4a>
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	f7f6 f88d 	bl	8000214 <__adddf3>
 800a0fa:	ec41 0b10 	vmov	d0, r0, r1
 800a0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a102:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a106:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a10a:	4334      	orrs	r4, r6
 800a10c:	d103      	bne.n	800a116 <__ieee754_atan2+0x5e>
 800a10e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a112:	f000 bda9 	b.w	800ac68 <atan>
 800a116:	17bc      	asrs	r4, r7, #30
 800a118:	f004 0402 	and.w	r4, r4, #2
 800a11c:	ea53 0909 	orrs.w	r9, r3, r9
 800a120:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a124:	d107      	bne.n	800a136 <__ieee754_atan2+0x7e>
 800a126:	2c02      	cmp	r4, #2
 800a128:	d060      	beq.n	800a1ec <__ieee754_atan2+0x134>
 800a12a:	2c03      	cmp	r4, #3
 800a12c:	d1e5      	bne.n	800a0fa <__ieee754_atan2+0x42>
 800a12e:	a142      	add	r1, pc, #264	; (adr r1, 800a238 <__ieee754_atan2+0x180>)
 800a130:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a134:	e7e1      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a136:	ea52 0808 	orrs.w	r8, r2, r8
 800a13a:	d106      	bne.n	800a14a <__ieee754_atan2+0x92>
 800a13c:	f1bc 0f00 	cmp.w	ip, #0
 800a140:	da5f      	bge.n	800a202 <__ieee754_atan2+0x14a>
 800a142:	a13f      	add	r1, pc, #252	; (adr r1, 800a240 <__ieee754_atan2+0x188>)
 800a144:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a148:	e7d7      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a14a:	4572      	cmp	r2, lr
 800a14c:	d10f      	bne.n	800a16e <__ieee754_atan2+0xb6>
 800a14e:	4293      	cmp	r3, r2
 800a150:	f104 34ff 	add.w	r4, r4, #4294967295
 800a154:	d107      	bne.n	800a166 <__ieee754_atan2+0xae>
 800a156:	2c02      	cmp	r4, #2
 800a158:	d84c      	bhi.n	800a1f4 <__ieee754_atan2+0x13c>
 800a15a:	4b35      	ldr	r3, [pc, #212]	; (800a230 <__ieee754_atan2+0x178>)
 800a15c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a160:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a164:	e7c9      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a166:	2c02      	cmp	r4, #2
 800a168:	d848      	bhi.n	800a1fc <__ieee754_atan2+0x144>
 800a16a:	4b32      	ldr	r3, [pc, #200]	; (800a234 <__ieee754_atan2+0x17c>)
 800a16c:	e7f6      	b.n	800a15c <__ieee754_atan2+0xa4>
 800a16e:	4573      	cmp	r3, lr
 800a170:	d0e4      	beq.n	800a13c <__ieee754_atan2+0x84>
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a178:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a17c:	da1e      	bge.n	800a1bc <__ieee754_atan2+0x104>
 800a17e:	2f00      	cmp	r7, #0
 800a180:	da01      	bge.n	800a186 <__ieee754_atan2+0xce>
 800a182:	323c      	adds	r2, #60	; 0x3c
 800a184:	db1e      	blt.n	800a1c4 <__ieee754_atan2+0x10c>
 800a186:	4632      	mov	r2, r6
 800a188:	463b      	mov	r3, r7
 800a18a:	f7f6 fb23 	bl	80007d4 <__aeabi_ddiv>
 800a18e:	ec41 0b10 	vmov	d0, r0, r1
 800a192:	f000 ff09 	bl	800afa8 <fabs>
 800a196:	f000 fd67 	bl	800ac68 <atan>
 800a19a:	ec51 0b10 	vmov	r0, r1, d0
 800a19e:	2c01      	cmp	r4, #1
 800a1a0:	d013      	beq.n	800a1ca <__ieee754_atan2+0x112>
 800a1a2:	2c02      	cmp	r4, #2
 800a1a4:	d015      	beq.n	800a1d2 <__ieee754_atan2+0x11a>
 800a1a6:	2c00      	cmp	r4, #0
 800a1a8:	d0a7      	beq.n	800a0fa <__ieee754_atan2+0x42>
 800a1aa:	a319      	add	r3, pc, #100	; (adr r3, 800a210 <__ieee754_atan2+0x158>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f82e 	bl	8000210 <__aeabi_dsub>
 800a1b4:	a318      	add	r3, pc, #96	; (adr r3, 800a218 <__ieee754_atan2+0x160>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	e014      	b.n	800a1e6 <__ieee754_atan2+0x12e>
 800a1bc:	a118      	add	r1, pc, #96	; (adr r1, 800a220 <__ieee754_atan2+0x168>)
 800a1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c2:	e7ec      	b.n	800a19e <__ieee754_atan2+0xe6>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	e7e9      	b.n	800a19e <__ieee754_atan2+0xe6>
 800a1ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	e793      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a1d2:	a30f      	add	r3, pc, #60	; (adr r3, 800a210 <__ieee754_atan2+0x158>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 f81a 	bl	8000210 <__aeabi_dsub>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	a10d      	add	r1, pc, #52	; (adr r1, 800a218 <__ieee754_atan2+0x160>)
 800a1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e6:	f7f6 f813 	bl	8000210 <__aeabi_dsub>
 800a1ea:	e786      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a1ec:	a10a      	add	r1, pc, #40	; (adr r1, 800a218 <__ieee754_atan2+0x160>)
 800a1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f2:	e782      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a1f4:	a10c      	add	r1, pc, #48	; (adr r1, 800a228 <__ieee754_atan2+0x170>)
 800a1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1fa:	e77e      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	2100      	movs	r1, #0
 800a200:	e77b      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a202:	a107      	add	r1, pc, #28	; (adr r1, 800a220 <__ieee754_atan2+0x168>)
 800a204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a208:	e777      	b.n	800a0fa <__ieee754_atan2+0x42>
 800a20a:	bf00      	nop
 800a20c:	f3af 8000 	nop.w
 800a210:	33145c07 	.word	0x33145c07
 800a214:	3ca1a626 	.word	0x3ca1a626
 800a218:	54442d18 	.word	0x54442d18
 800a21c:	400921fb 	.word	0x400921fb
 800a220:	54442d18 	.word	0x54442d18
 800a224:	3ff921fb 	.word	0x3ff921fb
 800a228:	54442d18 	.word	0x54442d18
 800a22c:	3fe921fb 	.word	0x3fe921fb
 800a230:	0800b208 	.word	0x0800b208
 800a234:	0800b220 	.word	0x0800b220
 800a238:	54442d18 	.word	0x54442d18
 800a23c:	c00921fb 	.word	0xc00921fb
 800a240:	54442d18 	.word	0x54442d18
 800a244:	bff921fb 	.word	0xbff921fb
 800a248:	7ff00000 	.word	0x7ff00000

0800a24c <__ieee754_sqrt>:
 800a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a250:	ec55 4b10 	vmov	r4, r5, d0
 800a254:	4e55      	ldr	r6, [pc, #340]	; (800a3ac <__ieee754_sqrt+0x160>)
 800a256:	43ae      	bics	r6, r5
 800a258:	ee10 0a10 	vmov	r0, s0
 800a25c:	ee10 3a10 	vmov	r3, s0
 800a260:	462a      	mov	r2, r5
 800a262:	4629      	mov	r1, r5
 800a264:	d110      	bne.n	800a288 <__ieee754_sqrt+0x3c>
 800a266:	ee10 2a10 	vmov	r2, s0
 800a26a:	462b      	mov	r3, r5
 800a26c:	f7f6 f988 	bl	8000580 <__aeabi_dmul>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4620      	mov	r0, r4
 800a276:	4629      	mov	r1, r5
 800a278:	f7f5 ffcc 	bl	8000214 <__adddf3>
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	ec45 4b10 	vmov	d0, r4, r5
 800a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a288:	2d00      	cmp	r5, #0
 800a28a:	dc10      	bgt.n	800a2ae <__ieee754_sqrt+0x62>
 800a28c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a290:	4330      	orrs	r0, r6
 800a292:	d0f5      	beq.n	800a280 <__ieee754_sqrt+0x34>
 800a294:	b15d      	cbz	r5, 800a2ae <__ieee754_sqrt+0x62>
 800a296:	ee10 2a10 	vmov	r2, s0
 800a29a:	462b      	mov	r3, r5
 800a29c:	ee10 0a10 	vmov	r0, s0
 800a2a0:	f7f5 ffb6 	bl	8000210 <__aeabi_dsub>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	f7f6 fa94 	bl	80007d4 <__aeabi_ddiv>
 800a2ac:	e7e6      	b.n	800a27c <__ieee754_sqrt+0x30>
 800a2ae:	1512      	asrs	r2, r2, #20
 800a2b0:	d074      	beq.n	800a39c <__ieee754_sqrt+0x150>
 800a2b2:	07d4      	lsls	r4, r2, #31
 800a2b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a2b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a2bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a2c0:	bf5e      	ittt	pl
 800a2c2:	0fda      	lsrpl	r2, r3, #31
 800a2c4:	005b      	lslpl	r3, r3, #1
 800a2c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a2ca:	2400      	movs	r4, #0
 800a2cc:	0fda      	lsrs	r2, r3, #31
 800a2ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a2d2:	107f      	asrs	r7, r7, #1
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	2516      	movs	r5, #22
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a2de:	1886      	adds	r6, r0, r2
 800a2e0:	428e      	cmp	r6, r1
 800a2e2:	bfde      	ittt	le
 800a2e4:	1b89      	suble	r1, r1, r6
 800a2e6:	18b0      	addle	r0, r6, r2
 800a2e8:	18a4      	addle	r4, r4, r2
 800a2ea:	0049      	lsls	r1, r1, #1
 800a2ec:	3d01      	subs	r5, #1
 800a2ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a2f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a2f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2fa:	d1f0      	bne.n	800a2de <__ieee754_sqrt+0x92>
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	f04f 0e20 	mov.w	lr, #32
 800a302:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a306:	4281      	cmp	r1, r0
 800a308:	eb06 0c05 	add.w	ip, r6, r5
 800a30c:	dc02      	bgt.n	800a314 <__ieee754_sqrt+0xc8>
 800a30e:	d113      	bne.n	800a338 <__ieee754_sqrt+0xec>
 800a310:	459c      	cmp	ip, r3
 800a312:	d811      	bhi.n	800a338 <__ieee754_sqrt+0xec>
 800a314:	f1bc 0f00 	cmp.w	ip, #0
 800a318:	eb0c 0506 	add.w	r5, ip, r6
 800a31c:	da43      	bge.n	800a3a6 <__ieee754_sqrt+0x15a>
 800a31e:	2d00      	cmp	r5, #0
 800a320:	db41      	blt.n	800a3a6 <__ieee754_sqrt+0x15a>
 800a322:	f100 0801 	add.w	r8, r0, #1
 800a326:	1a09      	subs	r1, r1, r0
 800a328:	459c      	cmp	ip, r3
 800a32a:	bf88      	it	hi
 800a32c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a330:	eba3 030c 	sub.w	r3, r3, ip
 800a334:	4432      	add	r2, r6
 800a336:	4640      	mov	r0, r8
 800a338:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a33c:	f1be 0e01 	subs.w	lr, lr, #1
 800a340:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a344:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a348:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a34c:	d1db      	bne.n	800a306 <__ieee754_sqrt+0xba>
 800a34e:	430b      	orrs	r3, r1
 800a350:	d006      	beq.n	800a360 <__ieee754_sqrt+0x114>
 800a352:	1c50      	adds	r0, r2, #1
 800a354:	bf13      	iteet	ne
 800a356:	3201      	addne	r2, #1
 800a358:	3401      	addeq	r4, #1
 800a35a:	4672      	moveq	r2, lr
 800a35c:	f022 0201 	bicne.w	r2, r2, #1
 800a360:	1063      	asrs	r3, r4, #1
 800a362:	0852      	lsrs	r2, r2, #1
 800a364:	07e1      	lsls	r1, r4, #31
 800a366:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a36a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a36e:	bf48      	it	mi
 800a370:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a374:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a378:	4614      	mov	r4, r2
 800a37a:	e781      	b.n	800a280 <__ieee754_sqrt+0x34>
 800a37c:	0ad9      	lsrs	r1, r3, #11
 800a37e:	3815      	subs	r0, #21
 800a380:	055b      	lsls	r3, r3, #21
 800a382:	2900      	cmp	r1, #0
 800a384:	d0fa      	beq.n	800a37c <__ieee754_sqrt+0x130>
 800a386:	02cd      	lsls	r5, r1, #11
 800a388:	d50a      	bpl.n	800a3a0 <__ieee754_sqrt+0x154>
 800a38a:	f1c2 0420 	rsb	r4, r2, #32
 800a38e:	fa23 f404 	lsr.w	r4, r3, r4
 800a392:	1e55      	subs	r5, r2, #1
 800a394:	4093      	lsls	r3, r2
 800a396:	4321      	orrs	r1, r4
 800a398:	1b42      	subs	r2, r0, r5
 800a39a:	e78a      	b.n	800a2b2 <__ieee754_sqrt+0x66>
 800a39c:	4610      	mov	r0, r2
 800a39e:	e7f0      	b.n	800a382 <__ieee754_sqrt+0x136>
 800a3a0:	0049      	lsls	r1, r1, #1
 800a3a2:	3201      	adds	r2, #1
 800a3a4:	e7ef      	b.n	800a386 <__ieee754_sqrt+0x13a>
 800a3a6:	4680      	mov	r8, r0
 800a3a8:	e7bd      	b.n	800a326 <__ieee754_sqrt+0xda>
 800a3aa:	bf00      	nop
 800a3ac:	7ff00000 	.word	0x7ff00000

0800a3b0 <__ieee754_rem_pio2f>:
 800a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b2:	ee10 6a10 	vmov	r6, s0
 800a3b6:	4b8e      	ldr	r3, [pc, #568]	; (800a5f0 <__ieee754_rem_pio2f+0x240>)
 800a3b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a3bc:	429d      	cmp	r5, r3
 800a3be:	b087      	sub	sp, #28
 800a3c0:	eef0 7a40 	vmov.f32	s15, s0
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	dc05      	bgt.n	800a3d4 <__ieee754_rem_pio2f+0x24>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	ed80 0a00 	vstr	s0, [r0]
 800a3ce:	6043      	str	r3, [r0, #4]
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	e01a      	b.n	800a40a <__ieee754_rem_pio2f+0x5a>
 800a3d4:	4b87      	ldr	r3, [pc, #540]	; (800a5f4 <__ieee754_rem_pio2f+0x244>)
 800a3d6:	429d      	cmp	r5, r3
 800a3d8:	dc46      	bgt.n	800a468 <__ieee754_rem_pio2f+0xb8>
 800a3da:	2e00      	cmp	r6, #0
 800a3dc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a5f8 <__ieee754_rem_pio2f+0x248>
 800a3e0:	4b86      	ldr	r3, [pc, #536]	; (800a5fc <__ieee754_rem_pio2f+0x24c>)
 800a3e2:	f025 050f 	bic.w	r5, r5, #15
 800a3e6:	dd1f      	ble.n	800a428 <__ieee754_rem_pio2f+0x78>
 800a3e8:	429d      	cmp	r5, r3
 800a3ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3ee:	d00e      	beq.n	800a40e <__ieee754_rem_pio2f+0x5e>
 800a3f0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a600 <__ieee754_rem_pio2f+0x250>
 800a3f4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a3f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3fc:	ed80 0a00 	vstr	s0, [r0]
 800a400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a404:	2001      	movs	r0, #1
 800a406:	edc4 7a01 	vstr	s15, [r4, #4]
 800a40a:	b007      	add	sp, #28
 800a40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a604 <__ieee754_rem_pio2f+0x254>
 800a412:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a608 <__ieee754_rem_pio2f+0x258>
 800a416:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a41a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a41e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a422:	edc0 6a00 	vstr	s13, [r0]
 800a426:	e7eb      	b.n	800a400 <__ieee754_rem_pio2f+0x50>
 800a428:	429d      	cmp	r5, r3
 800a42a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a42e:	d00e      	beq.n	800a44e <__ieee754_rem_pio2f+0x9e>
 800a430:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a600 <__ieee754_rem_pio2f+0x250>
 800a434:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a438:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a43c:	ed80 0a00 	vstr	s0, [r0]
 800a440:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	edc4 7a01 	vstr	s15, [r4, #4]
 800a44c:	e7dd      	b.n	800a40a <__ieee754_rem_pio2f+0x5a>
 800a44e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a604 <__ieee754_rem_pio2f+0x254>
 800a452:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a608 <__ieee754_rem_pio2f+0x258>
 800a456:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a45a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a45e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a462:	edc0 6a00 	vstr	s13, [r0]
 800a466:	e7eb      	b.n	800a440 <__ieee754_rem_pio2f+0x90>
 800a468:	4b68      	ldr	r3, [pc, #416]	; (800a60c <__ieee754_rem_pio2f+0x25c>)
 800a46a:	429d      	cmp	r5, r3
 800a46c:	dc72      	bgt.n	800a554 <__ieee754_rem_pio2f+0x1a4>
 800a46e:	f000 fdaf 	bl	800afd0 <fabsf>
 800a472:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a610 <__ieee754_rem_pio2f+0x260>
 800a476:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a47a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a47e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a486:	ee17 0a90 	vmov	r0, s15
 800a48a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a5f8 <__ieee754_rem_pio2f+0x248>
 800a48e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a492:	281f      	cmp	r0, #31
 800a494:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a600 <__ieee754_rem_pio2f+0x250>
 800a498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49c:	eeb1 6a47 	vneg.f32	s12, s14
 800a4a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a4a4:	ee16 2a90 	vmov	r2, s13
 800a4a8:	dc1c      	bgt.n	800a4e4 <__ieee754_rem_pio2f+0x134>
 800a4aa:	495a      	ldr	r1, [pc, #360]	; (800a614 <__ieee754_rem_pio2f+0x264>)
 800a4ac:	1e47      	subs	r7, r0, #1
 800a4ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a4b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a4b6:	428b      	cmp	r3, r1
 800a4b8:	d014      	beq.n	800a4e4 <__ieee754_rem_pio2f+0x134>
 800a4ba:	6022      	str	r2, [r4, #0]
 800a4bc:	ed94 7a00 	vldr	s14, [r4]
 800a4c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a4c4:	2e00      	cmp	r6, #0
 800a4c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a4ca:	ed84 0a01 	vstr	s0, [r4, #4]
 800a4ce:	da9c      	bge.n	800a40a <__ieee754_rem_pio2f+0x5a>
 800a4d0:	eeb1 7a47 	vneg.f32	s14, s14
 800a4d4:	eeb1 0a40 	vneg.f32	s0, s0
 800a4d8:	ed84 7a00 	vstr	s14, [r4]
 800a4dc:	ed84 0a01 	vstr	s0, [r4, #4]
 800a4e0:	4240      	negs	r0, r0
 800a4e2:	e792      	b.n	800a40a <__ieee754_rem_pio2f+0x5a>
 800a4e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a4e8:	15eb      	asrs	r3, r5, #23
 800a4ea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a4ee:	2d08      	cmp	r5, #8
 800a4f0:	dde3      	ble.n	800a4ba <__ieee754_rem_pio2f+0x10a>
 800a4f2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a604 <__ieee754_rem_pio2f+0x254>
 800a4f6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a608 <__ieee754_rem_pio2f+0x258>
 800a4fa:	eef0 6a40 	vmov.f32	s13, s0
 800a4fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a502:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a506:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a50a:	eef0 7a40 	vmov.f32	s15, s0
 800a50e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a512:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a516:	ee15 2a90 	vmov	r2, s11
 800a51a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a51e:	1a5b      	subs	r3, r3, r1
 800a520:	2b19      	cmp	r3, #25
 800a522:	dc04      	bgt.n	800a52e <__ieee754_rem_pio2f+0x17e>
 800a524:	edc4 5a00 	vstr	s11, [r4]
 800a528:	eeb0 0a66 	vmov.f32	s0, s13
 800a52c:	e7c6      	b.n	800a4bc <__ieee754_rem_pio2f+0x10c>
 800a52e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a618 <__ieee754_rem_pio2f+0x268>
 800a532:	eeb0 0a66 	vmov.f32	s0, s13
 800a536:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a53a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a53e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a61c <__ieee754_rem_pio2f+0x26c>
 800a542:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a546:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a54a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a54e:	ed84 7a00 	vstr	s14, [r4]
 800a552:	e7b3      	b.n	800a4bc <__ieee754_rem_pio2f+0x10c>
 800a554:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a558:	db06      	blt.n	800a568 <__ieee754_rem_pio2f+0x1b8>
 800a55a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a55e:	edc0 7a01 	vstr	s15, [r0, #4]
 800a562:	edc0 7a00 	vstr	s15, [r0]
 800a566:	e733      	b.n	800a3d0 <__ieee754_rem_pio2f+0x20>
 800a568:	15ea      	asrs	r2, r5, #23
 800a56a:	3a86      	subs	r2, #134	; 0x86
 800a56c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a570:	ee07 3a90 	vmov	s15, r3
 800a574:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a578:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a620 <__ieee754_rem_pio2f+0x270>
 800a57c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a584:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a588:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a58c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a594:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a598:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a59c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a8:	edcd 7a05 	vstr	s15, [sp, #20]
 800a5ac:	d11e      	bne.n	800a5ec <__ieee754_rem_pio2f+0x23c>
 800a5ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b6:	bf14      	ite	ne
 800a5b8:	2302      	movne	r3, #2
 800a5ba:	2301      	moveq	r3, #1
 800a5bc:	4919      	ldr	r1, [pc, #100]	; (800a624 <__ieee754_rem_pio2f+0x274>)
 800a5be:	9101      	str	r1, [sp, #4]
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	9100      	str	r1, [sp, #0]
 800a5c4:	a803      	add	r0, sp, #12
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	f000 f88e 	bl	800a6e8 <__kernel_rem_pio2f>
 800a5cc:	2e00      	cmp	r6, #0
 800a5ce:	f6bf af1c 	bge.w	800a40a <__ieee754_rem_pio2f+0x5a>
 800a5d2:	edd4 7a00 	vldr	s15, [r4]
 800a5d6:	eef1 7a67 	vneg.f32	s15, s15
 800a5da:	edc4 7a00 	vstr	s15, [r4]
 800a5de:	edd4 7a01 	vldr	s15, [r4, #4]
 800a5e2:	eef1 7a67 	vneg.f32	s15, s15
 800a5e6:	edc4 7a01 	vstr	s15, [r4, #4]
 800a5ea:	e779      	b.n	800a4e0 <__ieee754_rem_pio2f+0x130>
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e7e5      	b.n	800a5bc <__ieee754_rem_pio2f+0x20c>
 800a5f0:	3f490fd8 	.word	0x3f490fd8
 800a5f4:	4016cbe3 	.word	0x4016cbe3
 800a5f8:	3fc90f80 	.word	0x3fc90f80
 800a5fc:	3fc90fd0 	.word	0x3fc90fd0
 800a600:	37354443 	.word	0x37354443
 800a604:	37354400 	.word	0x37354400
 800a608:	2e85a308 	.word	0x2e85a308
 800a60c:	43490f80 	.word	0x43490f80
 800a610:	3f22f984 	.word	0x3f22f984
 800a614:	0800b238 	.word	0x0800b238
 800a618:	2e85a300 	.word	0x2e85a300
 800a61c:	248d3132 	.word	0x248d3132
 800a620:	43800000 	.word	0x43800000
 800a624:	0800b2b8 	.word	0x0800b2b8

0800a628 <__kernel_cosf>:
 800a628:	ee10 3a10 	vmov	r3, s0
 800a62c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a630:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a634:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a638:	da05      	bge.n	800a646 <__kernel_cosf+0x1e>
 800a63a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a63e:	ee17 2a90 	vmov	r2, s15
 800a642:	2a00      	cmp	r2, #0
 800a644:	d03d      	beq.n	800a6c2 <__kernel_cosf+0x9a>
 800a646:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a64a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a6c8 <__kernel_cosf+0xa0>
 800a64e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a6cc <__kernel_cosf+0xa4>
 800a652:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a6d0 <__kernel_cosf+0xa8>
 800a656:	4a1f      	ldr	r2, [pc, #124]	; (800a6d4 <__kernel_cosf+0xac>)
 800a658:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a65c:	4293      	cmp	r3, r2
 800a65e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a6d8 <__kernel_cosf+0xb0>
 800a662:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a666:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a6dc <__kernel_cosf+0xb4>
 800a66a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a66e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a6e0 <__kernel_cosf+0xb8>
 800a672:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a676:	eeb0 7a66 	vmov.f32	s14, s13
 800a67a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a67e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a682:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a686:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a68a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a68e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a692:	dc04      	bgt.n	800a69e <__kernel_cosf+0x76>
 800a694:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a698:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a69c:	4770      	bx	lr
 800a69e:	4a11      	ldr	r2, [pc, #68]	; (800a6e4 <__kernel_cosf+0xbc>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bfda      	itte	le
 800a6a4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a6a8:	ee06 3a90 	vmovle	s13, r3
 800a6ac:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a6b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a6b4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a6b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a6c0:	4770      	bx	lr
 800a6c2:	eeb0 0a46 	vmov.f32	s0, s12
 800a6c6:	4770      	bx	lr
 800a6c8:	ad47d74e 	.word	0xad47d74e
 800a6cc:	310f74f6 	.word	0x310f74f6
 800a6d0:	3d2aaaab 	.word	0x3d2aaaab
 800a6d4:	3e999999 	.word	0x3e999999
 800a6d8:	b493f27c 	.word	0xb493f27c
 800a6dc:	37d00d01 	.word	0x37d00d01
 800a6e0:	bab60b61 	.word	0xbab60b61
 800a6e4:	3f480000 	.word	0x3f480000

0800a6e8 <__kernel_rem_pio2f>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	ed2d 8b04 	vpush	{d8-d9}
 800a6f0:	b0d9      	sub	sp, #356	; 0x164
 800a6f2:	4688      	mov	r8, r1
 800a6f4:	9002      	str	r0, [sp, #8]
 800a6f6:	49bb      	ldr	r1, [pc, #748]	; (800a9e4 <__kernel_rem_pio2f+0x2fc>)
 800a6f8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a700:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a704:	1e59      	subs	r1, r3, #1
 800a706:	1d13      	adds	r3, r2, #4
 800a708:	db27      	blt.n	800a75a <__kernel_rem_pio2f+0x72>
 800a70a:	f1b2 0b03 	subs.w	fp, r2, #3
 800a70e:	bf48      	it	mi
 800a710:	f102 0b04 	addmi.w	fp, r2, #4
 800a714:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a718:	1c45      	adds	r5, r0, #1
 800a71a:	00ec      	lsls	r4, r5, #3
 800a71c:	1a47      	subs	r7, r0, r1
 800a71e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800a722:	9403      	str	r4, [sp, #12]
 800a724:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a728:	eb0a 0c01 	add.w	ip, sl, r1
 800a72c:	ae1c      	add	r6, sp, #112	; 0x70
 800a72e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a732:	2400      	movs	r4, #0
 800a734:	4564      	cmp	r4, ip
 800a736:	dd12      	ble.n	800a75e <__kernel_rem_pio2f+0x76>
 800a738:	9b01      	ldr	r3, [sp, #4]
 800a73a:	ac1c      	add	r4, sp, #112	; 0x70
 800a73c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a740:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a744:	f04f 0c00 	mov.w	ip, #0
 800a748:	45d4      	cmp	ip, sl
 800a74a:	dc27      	bgt.n	800a79c <__kernel_rem_pio2f+0xb4>
 800a74c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a750:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800a754:	4627      	mov	r7, r4
 800a756:	2600      	movs	r6, #0
 800a758:	e016      	b.n	800a788 <__kernel_rem_pio2f+0xa0>
 800a75a:	2000      	movs	r0, #0
 800a75c:	e7dc      	b.n	800a718 <__kernel_rem_pio2f+0x30>
 800a75e:	42e7      	cmn	r7, r4
 800a760:	bf5d      	ittte	pl
 800a762:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a766:	ee07 3a90 	vmovpl	s15, r3
 800a76a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a76e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a772:	ece6 7a01 	vstmia	r6!, {s15}
 800a776:	3401      	adds	r4, #1
 800a778:	e7dc      	b.n	800a734 <__kernel_rem_pio2f+0x4c>
 800a77a:	ecf9 6a01 	vldmia	r9!, {s13}
 800a77e:	ed97 7a00 	vldr	s14, [r7]
 800a782:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a786:	3601      	adds	r6, #1
 800a788:	428e      	cmp	r6, r1
 800a78a:	f1a7 0704 	sub.w	r7, r7, #4
 800a78e:	ddf4      	ble.n	800a77a <__kernel_rem_pio2f+0x92>
 800a790:	eceb 7a01 	vstmia	fp!, {s15}
 800a794:	f10c 0c01 	add.w	ip, ip, #1
 800a798:	3404      	adds	r4, #4
 800a79a:	e7d5      	b.n	800a748 <__kernel_rem_pio2f+0x60>
 800a79c:	ab08      	add	r3, sp, #32
 800a79e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a7a2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a9f0 <__kernel_rem_pio2f+0x308>
 800a7a6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a9ec <__kernel_rem_pio2f+0x304>
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a7b0:	4656      	mov	r6, sl
 800a7b2:	00b3      	lsls	r3, r6, #2
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	ab58      	add	r3, sp, #352	; 0x160
 800a7b8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a7bc:	ac08      	add	r4, sp, #32
 800a7be:	ab44      	add	r3, sp, #272	; 0x110
 800a7c0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a7c4:	46a4      	mov	ip, r4
 800a7c6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a7ca:	4637      	mov	r7, r6
 800a7cc:	2f00      	cmp	r7, #0
 800a7ce:	f1a0 0004 	sub.w	r0, r0, #4
 800a7d2:	dc4f      	bgt.n	800a874 <__kernel_rem_pio2f+0x18c>
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a7da:	f000 fc43 	bl	800b064 <scalbnf>
 800a7de:	eeb0 8a40 	vmov.f32	s16, s0
 800a7e2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a7e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a7ea:	f000 fbf9 	bl	800afe0 <floorf>
 800a7ee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a7f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a7f6:	2d00      	cmp	r5, #0
 800a7f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a7fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a800:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a804:	ee17 9a90 	vmov	r9, s15
 800a808:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a80c:	dd44      	ble.n	800a898 <__kernel_rem_pio2f+0x1b0>
 800a80e:	f106 3cff 	add.w	ip, r6, #4294967295
 800a812:	ab08      	add	r3, sp, #32
 800a814:	f1c5 0e08 	rsb	lr, r5, #8
 800a818:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a81c:	fa47 f00e 	asr.w	r0, r7, lr
 800a820:	4481      	add	r9, r0
 800a822:	fa00 f00e 	lsl.w	r0, r0, lr
 800a826:	1a3f      	subs	r7, r7, r0
 800a828:	f1c5 0007 	rsb	r0, r5, #7
 800a82c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a830:	4107      	asrs	r7, r0
 800a832:	2f00      	cmp	r7, #0
 800a834:	dd3f      	ble.n	800a8b6 <__kernel_rem_pio2f+0x1ce>
 800a836:	f04f 0e00 	mov.w	lr, #0
 800a83a:	f109 0901 	add.w	r9, r9, #1
 800a83e:	4673      	mov	r3, lr
 800a840:	4576      	cmp	r6, lr
 800a842:	dc6b      	bgt.n	800a91c <__kernel_rem_pio2f+0x234>
 800a844:	2d00      	cmp	r5, #0
 800a846:	dd04      	ble.n	800a852 <__kernel_rem_pio2f+0x16a>
 800a848:	2d01      	cmp	r5, #1
 800a84a:	d078      	beq.n	800a93e <__kernel_rem_pio2f+0x256>
 800a84c:	2d02      	cmp	r5, #2
 800a84e:	f000 8081 	beq.w	800a954 <__kernel_rem_pio2f+0x26c>
 800a852:	2f02      	cmp	r7, #2
 800a854:	d12f      	bne.n	800a8b6 <__kernel_rem_pio2f+0x1ce>
 800a856:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a85a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a85e:	b353      	cbz	r3, 800a8b6 <__kernel_rem_pio2f+0x1ce>
 800a860:	4628      	mov	r0, r5
 800a862:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a866:	f000 fbfd 	bl	800b064 <scalbnf>
 800a86a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a86e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a872:	e020      	b.n	800a8b6 <__kernel_rem_pio2f+0x1ce>
 800a874:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a878:	3f01      	subs	r7, #1
 800a87a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a87e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a882:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a886:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a88a:	ecac 0a01 	vstmia	ip!, {s0}
 800a88e:	ed90 0a00 	vldr	s0, [r0]
 800a892:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a896:	e799      	b.n	800a7cc <__kernel_rem_pio2f+0xe4>
 800a898:	d105      	bne.n	800a8a6 <__kernel_rem_pio2f+0x1be>
 800a89a:	1e70      	subs	r0, r6, #1
 800a89c:	ab08      	add	r3, sp, #32
 800a89e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a8a2:	11ff      	asrs	r7, r7, #7
 800a8a4:	e7c5      	b.n	800a832 <__kernel_rem_pio2f+0x14a>
 800a8a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a8aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b2:	da31      	bge.n	800a918 <__kernel_rem_pio2f+0x230>
 800a8b4:	2700      	movs	r7, #0
 800a8b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	f040 809b 	bne.w	800a9f8 <__kernel_rem_pio2f+0x310>
 800a8c2:	1e74      	subs	r4, r6, #1
 800a8c4:	46a4      	mov	ip, r4
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	45d4      	cmp	ip, sl
 800a8ca:	da4a      	bge.n	800a962 <__kernel_rem_pio2f+0x27a>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d07a      	beq.n	800a9c6 <__kernel_rem_pio2f+0x2de>
 800a8d0:	ab08      	add	r3, sp, #32
 800a8d2:	3d08      	subs	r5, #8
 800a8d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 8081 	beq.w	800a9e0 <__kernel_rem_pio2f+0x2f8>
 800a8de:	4628      	mov	r0, r5
 800a8e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a8e4:	00a5      	lsls	r5, r4, #2
 800a8e6:	f000 fbbd 	bl	800b064 <scalbnf>
 800a8ea:	aa44      	add	r2, sp, #272	; 0x110
 800a8ec:	1d2b      	adds	r3, r5, #4
 800a8ee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a9f0 <__kernel_rem_pio2f+0x308>
 800a8f2:	18d1      	adds	r1, r2, r3
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	f280 80ae 	bge.w	800aa58 <__kernel_rem_pio2f+0x370>
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	2a00      	cmp	r2, #0
 800a900:	f2c0 80cc 	blt.w	800aa9c <__kernel_rem_pio2f+0x3b4>
 800a904:	a944      	add	r1, sp, #272	; 0x110
 800a906:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a90a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a9e8 <__kernel_rem_pio2f+0x300>
 800a90e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800a912:	2000      	movs	r0, #0
 800a914:	1aa1      	subs	r1, r4, r2
 800a916:	e0b6      	b.n	800aa86 <__kernel_rem_pio2f+0x39e>
 800a918:	2702      	movs	r7, #2
 800a91a:	e78c      	b.n	800a836 <__kernel_rem_pio2f+0x14e>
 800a91c:	6820      	ldr	r0, [r4, #0]
 800a91e:	b94b      	cbnz	r3, 800a934 <__kernel_rem_pio2f+0x24c>
 800a920:	b118      	cbz	r0, 800a92a <__kernel_rem_pio2f+0x242>
 800a922:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a926:	6020      	str	r0, [r4, #0]
 800a928:	2001      	movs	r0, #1
 800a92a:	f10e 0e01 	add.w	lr, lr, #1
 800a92e:	3404      	adds	r4, #4
 800a930:	4603      	mov	r3, r0
 800a932:	e785      	b.n	800a840 <__kernel_rem_pio2f+0x158>
 800a934:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a938:	6020      	str	r0, [r4, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	e7f5      	b.n	800a92a <__kernel_rem_pio2f+0x242>
 800a93e:	1e74      	subs	r4, r6, #1
 800a940:	a808      	add	r0, sp, #32
 800a942:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a946:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a94a:	f10d 0c20 	add.w	ip, sp, #32
 800a94e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a952:	e77e      	b.n	800a852 <__kernel_rem_pio2f+0x16a>
 800a954:	1e74      	subs	r4, r6, #1
 800a956:	a808      	add	r0, sp, #32
 800a958:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a95c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a960:	e7f3      	b.n	800a94a <__kernel_rem_pio2f+0x262>
 800a962:	ab08      	add	r3, sp, #32
 800a964:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a968:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a96c:	4318      	orrs	r0, r3
 800a96e:	e7ab      	b.n	800a8c8 <__kernel_rem_pio2f+0x1e0>
 800a970:	f10c 0c01 	add.w	ip, ip, #1
 800a974:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a978:	2c00      	cmp	r4, #0
 800a97a:	d0f9      	beq.n	800a970 <__kernel_rem_pio2f+0x288>
 800a97c:	9b05      	ldr	r3, [sp, #20]
 800a97e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a982:	eb0d 0003 	add.w	r0, sp, r3
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	18f4      	adds	r4, r6, r3
 800a98a:	ab1c      	add	r3, sp, #112	; 0x70
 800a98c:	1c77      	adds	r7, r6, #1
 800a98e:	384c      	subs	r0, #76	; 0x4c
 800a990:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a994:	4466      	add	r6, ip
 800a996:	42be      	cmp	r6, r7
 800a998:	f6ff af0b 	blt.w	800a7b2 <__kernel_rem_pio2f+0xca>
 800a99c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a9a0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a9a4:	ee07 3a90 	vmov	s15, r3
 800a9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9ac:	f04f 0c00 	mov.w	ip, #0
 800a9b0:	ece4 7a01 	vstmia	r4!, {s15}
 800a9b4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800a9b8:	46a1      	mov	r9, r4
 800a9ba:	458c      	cmp	ip, r1
 800a9bc:	dd07      	ble.n	800a9ce <__kernel_rem_pio2f+0x2e6>
 800a9be:	ece0 7a01 	vstmia	r0!, {s15}
 800a9c2:	3701      	adds	r7, #1
 800a9c4:	e7e7      	b.n	800a996 <__kernel_rem_pio2f+0x2ae>
 800a9c6:	9804      	ldr	r0, [sp, #16]
 800a9c8:	f04f 0c01 	mov.w	ip, #1
 800a9cc:	e7d2      	b.n	800a974 <__kernel_rem_pio2f+0x28c>
 800a9ce:	ecfe 6a01 	vldmia	lr!, {s13}
 800a9d2:	ed39 7a01 	vldmdb	r9!, {s14}
 800a9d6:	f10c 0c01 	add.w	ip, ip, #1
 800a9da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a9de:	e7ec      	b.n	800a9ba <__kernel_rem_pio2f+0x2d2>
 800a9e0:	3c01      	subs	r4, #1
 800a9e2:	e775      	b.n	800a8d0 <__kernel_rem_pio2f+0x1e8>
 800a9e4:	0800b5fc 	.word	0x0800b5fc
 800a9e8:	0800b5d0 	.word	0x0800b5d0
 800a9ec:	43800000 	.word	0x43800000
 800a9f0:	3b800000 	.word	0x3b800000
 800a9f4:	00000000 	.word	0x00000000
 800a9f8:	9b03      	ldr	r3, [sp, #12]
 800a9fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a9fe:	1a98      	subs	r0, r3, r2
 800aa00:	f000 fb30 	bl	800b064 <scalbnf>
 800aa04:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a9ec <__kernel_rem_pio2f+0x304>
 800aa08:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800aa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa10:	db19      	blt.n	800aa46 <__kernel_rem_pio2f+0x35e>
 800aa12:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a9f0 <__kernel_rem_pio2f+0x308>
 800aa16:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aa1a:	aa08      	add	r2, sp, #32
 800aa1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa20:	1c74      	adds	r4, r6, #1
 800aa22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa26:	3508      	adds	r5, #8
 800aa28:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800aa2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aa34:	ee10 3a10 	vmov	r3, s0
 800aa38:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aa3c:	ee17 3a90 	vmov	r3, s15
 800aa40:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aa44:	e74b      	b.n	800a8de <__kernel_rem_pio2f+0x1f6>
 800aa46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aa4a:	aa08      	add	r2, sp, #32
 800aa4c:	ee10 3a10 	vmov	r3, s0
 800aa50:	4634      	mov	r4, r6
 800aa52:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aa56:	e742      	b.n	800a8de <__kernel_rem_pio2f+0x1f6>
 800aa58:	a808      	add	r0, sp, #32
 800aa5a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	ee07 0a90 	vmov	s15, r0
 800aa64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa68:	3a01      	subs	r2, #1
 800aa6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aa6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aa72:	ed61 7a01 	vstmdb	r1!, {s15}
 800aa76:	e73e      	b.n	800a8f6 <__kernel_rem_pio2f+0x20e>
 800aa78:	ecfc 6a01 	vldmia	ip!, {s13}
 800aa7c:	ecb6 7a01 	vldmia	r6!, {s14}
 800aa80:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aa84:	3001      	adds	r0, #1
 800aa86:	4550      	cmp	r0, sl
 800aa88:	dc01      	bgt.n	800aa8e <__kernel_rem_pio2f+0x3a6>
 800aa8a:	4288      	cmp	r0, r1
 800aa8c:	ddf4      	ble.n	800aa78 <__kernel_rem_pio2f+0x390>
 800aa8e:	a858      	add	r0, sp, #352	; 0x160
 800aa90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa94:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800aa98:	3a01      	subs	r2, #1
 800aa9a:	e730      	b.n	800a8fe <__kernel_rem_pio2f+0x216>
 800aa9c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800aa9e:	2a02      	cmp	r2, #2
 800aaa0:	dc09      	bgt.n	800aab6 <__kernel_rem_pio2f+0x3ce>
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	dc2a      	bgt.n	800aafc <__kernel_rem_pio2f+0x414>
 800aaa6:	d043      	beq.n	800ab30 <__kernel_rem_pio2f+0x448>
 800aaa8:	f009 0007 	and.w	r0, r9, #7
 800aaac:	b059      	add	sp, #356	; 0x164
 800aaae:	ecbd 8b04 	vpop	{d8-d9}
 800aab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d1f5      	bne.n	800aaa8 <__kernel_rem_pio2f+0x3c0>
 800aabc:	ab30      	add	r3, sp, #192	; 0xc0
 800aabe:	442b      	add	r3, r5
 800aac0:	461a      	mov	r2, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	4620      	mov	r0, r4
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f1a1 0104 	sub.w	r1, r1, #4
 800aacc:	dc51      	bgt.n	800ab72 <__kernel_rem_pio2f+0x48a>
 800aace:	4621      	mov	r1, r4
 800aad0:	2901      	cmp	r1, #1
 800aad2:	f1a2 0204 	sub.w	r2, r2, #4
 800aad6:	dc5c      	bgt.n	800ab92 <__kernel_rem_pio2f+0x4aa>
 800aad8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800aadc:	3304      	adds	r3, #4
 800aade:	2c01      	cmp	r4, #1
 800aae0:	dc67      	bgt.n	800abb2 <__kernel_rem_pio2f+0x4ca>
 800aae2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800aae6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800aaea:	2f00      	cmp	r7, #0
 800aaec:	d167      	bne.n	800abbe <__kernel_rem_pio2f+0x4d6>
 800aaee:	edc8 6a00 	vstr	s13, [r8]
 800aaf2:	ed88 7a01 	vstr	s14, [r8, #4]
 800aaf6:	edc8 7a02 	vstr	s15, [r8, #8]
 800aafa:	e7d5      	b.n	800aaa8 <__kernel_rem_pio2f+0x3c0>
 800aafc:	aa30      	add	r2, sp, #192	; 0xc0
 800aafe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800ab02:	4413      	add	r3, r2
 800ab04:	4622      	mov	r2, r4
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	da24      	bge.n	800ab54 <__kernel_rem_pio2f+0x46c>
 800ab0a:	b34f      	cbz	r7, 800ab60 <__kernel_rem_pio2f+0x478>
 800ab0c:	eef1 7a47 	vneg.f32	s15, s14
 800ab10:	edc8 7a00 	vstr	s15, [r8]
 800ab14:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ab18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab1c:	aa31      	add	r2, sp, #196	; 0xc4
 800ab1e:	2301      	movs	r3, #1
 800ab20:	429c      	cmp	r4, r3
 800ab22:	da20      	bge.n	800ab66 <__kernel_rem_pio2f+0x47e>
 800ab24:	b10f      	cbz	r7, 800ab2a <__kernel_rem_pio2f+0x442>
 800ab26:	eef1 7a67 	vneg.f32	s15, s15
 800ab2a:	edc8 7a01 	vstr	s15, [r8, #4]
 800ab2e:	e7bb      	b.n	800aaa8 <__kernel_rem_pio2f+0x3c0>
 800ab30:	aa30      	add	r2, sp, #192	; 0xc0
 800ab32:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a9f4 <__kernel_rem_pio2f+0x30c>
 800ab36:	4413      	add	r3, r2
 800ab38:	2c00      	cmp	r4, #0
 800ab3a:	da05      	bge.n	800ab48 <__kernel_rem_pio2f+0x460>
 800ab3c:	b10f      	cbz	r7, 800ab42 <__kernel_rem_pio2f+0x45a>
 800ab3e:	eef1 7a67 	vneg.f32	s15, s15
 800ab42:	edc8 7a00 	vstr	s15, [r8]
 800ab46:	e7af      	b.n	800aaa8 <__kernel_rem_pio2f+0x3c0>
 800ab48:	ed33 7a01 	vldmdb	r3!, {s14}
 800ab4c:	3c01      	subs	r4, #1
 800ab4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab52:	e7f1      	b.n	800ab38 <__kernel_rem_pio2f+0x450>
 800ab54:	ed73 7a01 	vldmdb	r3!, {s15}
 800ab58:	3a01      	subs	r2, #1
 800ab5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab5e:	e7d2      	b.n	800ab06 <__kernel_rem_pio2f+0x41e>
 800ab60:	eef0 7a47 	vmov.f32	s15, s14
 800ab64:	e7d4      	b.n	800ab10 <__kernel_rem_pio2f+0x428>
 800ab66:	ecb2 7a01 	vldmia	r2!, {s14}
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab70:	e7d6      	b.n	800ab20 <__kernel_rem_pio2f+0x438>
 800ab72:	edd1 7a00 	vldr	s15, [r1]
 800ab76:	edd1 6a01 	vldr	s13, [r1, #4]
 800ab7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ab7e:	3801      	subs	r0, #1
 800ab80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab84:	ed81 7a00 	vstr	s14, [r1]
 800ab88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8c:	edc1 7a01 	vstr	s15, [r1, #4]
 800ab90:	e799      	b.n	800aac6 <__kernel_rem_pio2f+0x3de>
 800ab92:	edd2 7a00 	vldr	s15, [r2]
 800ab96:	edd2 6a01 	vldr	s13, [r2, #4]
 800ab9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ab9e:	3901      	subs	r1, #1
 800aba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aba4:	ed82 7a00 	vstr	s14, [r2]
 800aba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abac:	edc2 7a01 	vstr	s15, [r2, #4]
 800abb0:	e78e      	b.n	800aad0 <__kernel_rem_pio2f+0x3e8>
 800abb2:	ed33 7a01 	vldmdb	r3!, {s14}
 800abb6:	3c01      	subs	r4, #1
 800abb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abbc:	e78f      	b.n	800aade <__kernel_rem_pio2f+0x3f6>
 800abbe:	eef1 6a66 	vneg.f32	s13, s13
 800abc2:	eeb1 7a47 	vneg.f32	s14, s14
 800abc6:	edc8 6a00 	vstr	s13, [r8]
 800abca:	ed88 7a01 	vstr	s14, [r8, #4]
 800abce:	eef1 7a67 	vneg.f32	s15, s15
 800abd2:	e790      	b.n	800aaf6 <__kernel_rem_pio2f+0x40e>

0800abd4 <__kernel_sinf>:
 800abd4:	ee10 3a10 	vmov	r3, s0
 800abd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abdc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800abe0:	da04      	bge.n	800abec <__kernel_sinf+0x18>
 800abe2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800abe6:	ee17 3a90 	vmov	r3, s15
 800abea:	b35b      	cbz	r3, 800ac44 <__kernel_sinf+0x70>
 800abec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800abf0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ac48 <__kernel_sinf+0x74>
 800abf4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800ac4c <__kernel_sinf+0x78>
 800abf8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800abfc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ac50 <__kernel_sinf+0x7c>
 800ac00:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac04:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ac54 <__kernel_sinf+0x80>
 800ac08:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ac0c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800ac58 <__kernel_sinf+0x84>
 800ac10:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ac14:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac18:	b930      	cbnz	r0, 800ac28 <__kernel_sinf+0x54>
 800ac1a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800ac5c <__kernel_sinf+0x88>
 800ac1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac22:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ac26:	4770      	bx	lr
 800ac28:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ac2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ac30:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ac34:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ac38:	eddf 7a09 	vldr	s15, [pc, #36]	; 800ac60 <__kernel_sinf+0x8c>
 800ac3c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ac40:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	2f2ec9d3 	.word	0x2f2ec9d3
 800ac4c:	b2d72f34 	.word	0xb2d72f34
 800ac50:	3638ef1b 	.word	0x3638ef1b
 800ac54:	b9500d01 	.word	0xb9500d01
 800ac58:	3c088889 	.word	0x3c088889
 800ac5c:	be2aaaab 	.word	0xbe2aaaab
 800ac60:	3e2aaaab 	.word	0x3e2aaaab
 800ac64:	00000000 	.word	0x00000000

0800ac68 <atan>:
 800ac68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	ec55 4b10 	vmov	r4, r5, d0
 800ac70:	4bc3      	ldr	r3, [pc, #780]	; (800af80 <atan+0x318>)
 800ac72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac76:	429e      	cmp	r6, r3
 800ac78:	46ab      	mov	fp, r5
 800ac7a:	dd18      	ble.n	800acae <atan+0x46>
 800ac7c:	4bc1      	ldr	r3, [pc, #772]	; (800af84 <atan+0x31c>)
 800ac7e:	429e      	cmp	r6, r3
 800ac80:	dc01      	bgt.n	800ac86 <atan+0x1e>
 800ac82:	d109      	bne.n	800ac98 <atan+0x30>
 800ac84:	b144      	cbz	r4, 800ac98 <atan+0x30>
 800ac86:	4622      	mov	r2, r4
 800ac88:	462b      	mov	r3, r5
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7f5 fac1 	bl	8000214 <__adddf3>
 800ac92:	4604      	mov	r4, r0
 800ac94:	460d      	mov	r5, r1
 800ac96:	e006      	b.n	800aca6 <atan+0x3e>
 800ac98:	f1bb 0f00 	cmp.w	fp, #0
 800ac9c:	f300 8131 	bgt.w	800af02 <atan+0x29a>
 800aca0:	a59b      	add	r5, pc, #620	; (adr r5, 800af10 <atan+0x2a8>)
 800aca2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aca6:	ec45 4b10 	vmov	d0, r4, r5
 800acaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acae:	4bb6      	ldr	r3, [pc, #728]	; (800af88 <atan+0x320>)
 800acb0:	429e      	cmp	r6, r3
 800acb2:	dc14      	bgt.n	800acde <atan+0x76>
 800acb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800acb8:	429e      	cmp	r6, r3
 800acba:	dc0d      	bgt.n	800acd8 <atan+0x70>
 800acbc:	a396      	add	r3, pc, #600	; (adr r3, 800af18 <atan+0x2b0>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	ee10 0a10 	vmov	r0, s0
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7f5 faa4 	bl	8000214 <__adddf3>
 800accc:	4baf      	ldr	r3, [pc, #700]	; (800af8c <atan+0x324>)
 800acce:	2200      	movs	r2, #0
 800acd0:	f7f5 fee6 	bl	8000aa0 <__aeabi_dcmpgt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d1e6      	bne.n	800aca6 <atan+0x3e>
 800acd8:	f04f 3aff 	mov.w	sl, #4294967295
 800acdc:	e02b      	b.n	800ad36 <atan+0xce>
 800acde:	f000 f963 	bl	800afa8 <fabs>
 800ace2:	4bab      	ldr	r3, [pc, #684]	; (800af90 <atan+0x328>)
 800ace4:	429e      	cmp	r6, r3
 800ace6:	ec55 4b10 	vmov	r4, r5, d0
 800acea:	f300 80bf 	bgt.w	800ae6c <atan+0x204>
 800acee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800acf2:	429e      	cmp	r6, r3
 800acf4:	f300 80a0 	bgt.w	800ae38 <atan+0x1d0>
 800acf8:	ee10 2a10 	vmov	r2, s0
 800acfc:	ee10 0a10 	vmov	r0, s0
 800ad00:	462b      	mov	r3, r5
 800ad02:	4629      	mov	r1, r5
 800ad04:	f7f5 fa86 	bl	8000214 <__adddf3>
 800ad08:	4ba0      	ldr	r3, [pc, #640]	; (800af8c <atan+0x324>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f7f5 fa80 	bl	8000210 <__aeabi_dsub>
 800ad10:	2200      	movs	r2, #0
 800ad12:	4606      	mov	r6, r0
 800ad14:	460f      	mov	r7, r1
 800ad16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	f7f5 fa79 	bl	8000214 <__adddf3>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 fd53 	bl	80007d4 <__aeabi_ddiv>
 800ad2e:	f04f 0a00 	mov.w	sl, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	460d      	mov	r5, r1
 800ad36:	4622      	mov	r2, r4
 800ad38:	462b      	mov	r3, r5
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7f5 fc1f 	bl	8000580 <__aeabi_dmul>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4680      	mov	r8, r0
 800ad48:	4689      	mov	r9, r1
 800ad4a:	f7f5 fc19 	bl	8000580 <__aeabi_dmul>
 800ad4e:	a374      	add	r3, pc, #464	; (adr r3, 800af20 <atan+0x2b8>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	4606      	mov	r6, r0
 800ad56:	460f      	mov	r7, r1
 800ad58:	f7f5 fc12 	bl	8000580 <__aeabi_dmul>
 800ad5c:	a372      	add	r3, pc, #456	; (adr r3, 800af28 <atan+0x2c0>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fa57 	bl	8000214 <__adddf3>
 800ad66:	4632      	mov	r2, r6
 800ad68:	463b      	mov	r3, r7
 800ad6a:	f7f5 fc09 	bl	8000580 <__aeabi_dmul>
 800ad6e:	a370      	add	r3, pc, #448	; (adr r3, 800af30 <atan+0x2c8>)
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	f7f5 fa4e 	bl	8000214 <__adddf3>
 800ad78:	4632      	mov	r2, r6
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	f7f5 fc00 	bl	8000580 <__aeabi_dmul>
 800ad80:	a36d      	add	r3, pc, #436	; (adr r3, 800af38 <atan+0x2d0>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	f7f5 fa45 	bl	8000214 <__adddf3>
 800ad8a:	4632      	mov	r2, r6
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	f7f5 fbf7 	bl	8000580 <__aeabi_dmul>
 800ad92:	a36b      	add	r3, pc, #428	; (adr r3, 800af40 <atan+0x2d8>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fa3c 	bl	8000214 <__adddf3>
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	463b      	mov	r3, r7
 800ada0:	f7f5 fbee 	bl	8000580 <__aeabi_dmul>
 800ada4:	a368      	add	r3, pc, #416	; (adr r3, 800af48 <atan+0x2e0>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa33 	bl	8000214 <__adddf3>
 800adae:	4642      	mov	r2, r8
 800adb0:	464b      	mov	r3, r9
 800adb2:	f7f5 fbe5 	bl	8000580 <__aeabi_dmul>
 800adb6:	a366      	add	r3, pc, #408	; (adr r3, 800af50 <atan+0x2e8>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	4680      	mov	r8, r0
 800adbe:	4689      	mov	r9, r1
 800adc0:	4630      	mov	r0, r6
 800adc2:	4639      	mov	r1, r7
 800adc4:	f7f5 fbdc 	bl	8000580 <__aeabi_dmul>
 800adc8:	a363      	add	r3, pc, #396	; (adr r3, 800af58 <atan+0x2f0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fa1f 	bl	8000210 <__aeabi_dsub>
 800add2:	4632      	mov	r2, r6
 800add4:	463b      	mov	r3, r7
 800add6:	f7f5 fbd3 	bl	8000580 <__aeabi_dmul>
 800adda:	a361      	add	r3, pc, #388	; (adr r3, 800af60 <atan+0x2f8>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f7f5 fa16 	bl	8000210 <__aeabi_dsub>
 800ade4:	4632      	mov	r2, r6
 800ade6:	463b      	mov	r3, r7
 800ade8:	f7f5 fbca 	bl	8000580 <__aeabi_dmul>
 800adec:	a35e      	add	r3, pc, #376	; (adr r3, 800af68 <atan+0x300>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f7f5 fa0d 	bl	8000210 <__aeabi_dsub>
 800adf6:	4632      	mov	r2, r6
 800adf8:	463b      	mov	r3, r7
 800adfa:	f7f5 fbc1 	bl	8000580 <__aeabi_dmul>
 800adfe:	a35c      	add	r3, pc, #368	; (adr r3, 800af70 <atan+0x308>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	f7f5 fa04 	bl	8000210 <__aeabi_dsub>
 800ae08:	4632      	mov	r2, r6
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	f7f5 fbb8 	bl	8000580 <__aeabi_dmul>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4640      	mov	r0, r8
 800ae16:	4649      	mov	r1, r9
 800ae18:	f7f5 f9fc 	bl	8000214 <__adddf3>
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f7f5 fbae 	bl	8000580 <__aeabi_dmul>
 800ae24:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	d14b      	bne.n	800aec6 <atan+0x25e>
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 f9ed 	bl	8000210 <__aeabi_dsub>
 800ae36:	e72c      	b.n	800ac92 <atan+0x2a>
 800ae38:	ee10 0a10 	vmov	r0, s0
 800ae3c:	4b53      	ldr	r3, [pc, #332]	; (800af8c <atan+0x324>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7f5 f9e5 	bl	8000210 <__aeabi_dsub>
 800ae46:	4b51      	ldr	r3, [pc, #324]	; (800af8c <atan+0x324>)
 800ae48:	4606      	mov	r6, r0
 800ae4a:	460f      	mov	r7, r1
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 f9df 	bl	8000214 <__adddf3>
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	f7f5 fcb9 	bl	80007d4 <__aeabi_ddiv>
 800ae62:	f04f 0a01 	mov.w	sl, #1
 800ae66:	4604      	mov	r4, r0
 800ae68:	460d      	mov	r5, r1
 800ae6a:	e764      	b.n	800ad36 <atan+0xce>
 800ae6c:	4b49      	ldr	r3, [pc, #292]	; (800af94 <atan+0x32c>)
 800ae6e:	429e      	cmp	r6, r3
 800ae70:	da1d      	bge.n	800aeae <atan+0x246>
 800ae72:	ee10 0a10 	vmov	r0, s0
 800ae76:	4b48      	ldr	r3, [pc, #288]	; (800af98 <atan+0x330>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	f7f5 f9c8 	bl	8000210 <__aeabi_dsub>
 800ae80:	4b45      	ldr	r3, [pc, #276]	; (800af98 <atan+0x330>)
 800ae82:	4606      	mov	r6, r0
 800ae84:	460f      	mov	r7, r1
 800ae86:	2200      	movs	r2, #0
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	f7f5 fb78 	bl	8000580 <__aeabi_dmul>
 800ae90:	4b3e      	ldr	r3, [pc, #248]	; (800af8c <atan+0x324>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	f7f5 f9be 	bl	8000214 <__adddf3>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 fc98 	bl	80007d4 <__aeabi_ddiv>
 800aea4:	f04f 0a02 	mov.w	sl, #2
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	e743      	b.n	800ad36 <atan+0xce>
 800aeae:	462b      	mov	r3, r5
 800aeb0:	ee10 2a10 	vmov	r2, s0
 800aeb4:	4939      	ldr	r1, [pc, #228]	; (800af9c <atan+0x334>)
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	f7f5 fc8c 	bl	80007d4 <__aeabi_ddiv>
 800aebc:	f04f 0a03 	mov.w	sl, #3
 800aec0:	4604      	mov	r4, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	e737      	b.n	800ad36 <atan+0xce>
 800aec6:	4b36      	ldr	r3, [pc, #216]	; (800afa0 <atan+0x338>)
 800aec8:	4e36      	ldr	r6, [pc, #216]	; (800afa4 <atan+0x33c>)
 800aeca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800aece:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800aed2:	e9da 2300 	ldrd	r2, r3, [sl]
 800aed6:	f7f5 f99b 	bl	8000210 <__aeabi_dsub>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	f7f5 f997 	bl	8000210 <__aeabi_dsub>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800aeea:	f7f5 f991 	bl	8000210 <__aeabi_dsub>
 800aeee:	f1bb 0f00 	cmp.w	fp, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	460d      	mov	r5, r1
 800aef6:	f6bf aed6 	bge.w	800aca6 <atan+0x3e>
 800aefa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aefe:	461d      	mov	r5, r3
 800af00:	e6d1      	b.n	800aca6 <atan+0x3e>
 800af02:	a51d      	add	r5, pc, #116	; (adr r5, 800af78 <atan+0x310>)
 800af04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af08:	e6cd      	b.n	800aca6 <atan+0x3e>
 800af0a:	bf00      	nop
 800af0c:	f3af 8000 	nop.w
 800af10:	54442d18 	.word	0x54442d18
 800af14:	bff921fb 	.word	0xbff921fb
 800af18:	8800759c 	.word	0x8800759c
 800af1c:	7e37e43c 	.word	0x7e37e43c
 800af20:	e322da11 	.word	0xe322da11
 800af24:	3f90ad3a 	.word	0x3f90ad3a
 800af28:	24760deb 	.word	0x24760deb
 800af2c:	3fa97b4b 	.word	0x3fa97b4b
 800af30:	a0d03d51 	.word	0xa0d03d51
 800af34:	3fb10d66 	.word	0x3fb10d66
 800af38:	c54c206e 	.word	0xc54c206e
 800af3c:	3fb745cd 	.word	0x3fb745cd
 800af40:	920083ff 	.word	0x920083ff
 800af44:	3fc24924 	.word	0x3fc24924
 800af48:	5555550d 	.word	0x5555550d
 800af4c:	3fd55555 	.word	0x3fd55555
 800af50:	2c6a6c2f 	.word	0x2c6a6c2f
 800af54:	bfa2b444 	.word	0xbfa2b444
 800af58:	52defd9a 	.word	0x52defd9a
 800af5c:	3fadde2d 	.word	0x3fadde2d
 800af60:	af749a6d 	.word	0xaf749a6d
 800af64:	3fb3b0f2 	.word	0x3fb3b0f2
 800af68:	fe231671 	.word	0xfe231671
 800af6c:	3fbc71c6 	.word	0x3fbc71c6
 800af70:	9998ebc4 	.word	0x9998ebc4
 800af74:	3fc99999 	.word	0x3fc99999
 800af78:	54442d18 	.word	0x54442d18
 800af7c:	3ff921fb 	.word	0x3ff921fb
 800af80:	440fffff 	.word	0x440fffff
 800af84:	7ff00000 	.word	0x7ff00000
 800af88:	3fdbffff 	.word	0x3fdbffff
 800af8c:	3ff00000 	.word	0x3ff00000
 800af90:	3ff2ffff 	.word	0x3ff2ffff
 800af94:	40038000 	.word	0x40038000
 800af98:	3ff80000 	.word	0x3ff80000
 800af9c:	bff00000 	.word	0xbff00000
 800afa0:	0800b628 	.word	0x0800b628
 800afa4:	0800b608 	.word	0x0800b608

0800afa8 <fabs>:
 800afa8:	ec51 0b10 	vmov	r0, r1, d0
 800afac:	ee10 2a10 	vmov	r2, s0
 800afb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800afb4:	ec43 2b10 	vmov	d0, r2, r3
 800afb8:	4770      	bx	lr
 800afba:	0000      	movs	r0, r0
 800afbc:	0000      	movs	r0, r0
	...

0800afc0 <nan>:
 800afc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800afc8 <nan+0x8>
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	00000000 	.word	0x00000000
 800afcc:	7ff80000 	.word	0x7ff80000

0800afd0 <fabsf>:
 800afd0:	ee10 3a10 	vmov	r3, s0
 800afd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afd8:	ee00 3a10 	vmov	s0, r3
 800afdc:	4770      	bx	lr
	...

0800afe0 <floorf>:
 800afe0:	ee10 3a10 	vmov	r3, s0
 800afe4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800afe8:	3a7f      	subs	r2, #127	; 0x7f
 800afea:	2a16      	cmp	r2, #22
 800afec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aff0:	dc2a      	bgt.n	800b048 <floorf+0x68>
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	da11      	bge.n	800b01a <floorf+0x3a>
 800aff6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b058 <floorf+0x78>
 800affa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800affe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b006:	dd05      	ble.n	800b014 <floorf+0x34>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	da23      	bge.n	800b054 <floorf+0x74>
 800b00c:	4a13      	ldr	r2, [pc, #76]	; (800b05c <floorf+0x7c>)
 800b00e:	2900      	cmp	r1, #0
 800b010:	bf18      	it	ne
 800b012:	4613      	movne	r3, r2
 800b014:	ee00 3a10 	vmov	s0, r3
 800b018:	4770      	bx	lr
 800b01a:	4911      	ldr	r1, [pc, #68]	; (800b060 <floorf+0x80>)
 800b01c:	4111      	asrs	r1, r2
 800b01e:	420b      	tst	r3, r1
 800b020:	d0fa      	beq.n	800b018 <floorf+0x38>
 800b022:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b058 <floorf+0x78>
 800b026:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b02a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b032:	ddef      	ble.n	800b014 <floorf+0x34>
 800b034:	2b00      	cmp	r3, #0
 800b036:	bfbe      	ittt	lt
 800b038:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b03c:	fa40 f202 	asrlt.w	r2, r0, r2
 800b040:	189b      	addlt	r3, r3, r2
 800b042:	ea23 0301 	bic.w	r3, r3, r1
 800b046:	e7e5      	b.n	800b014 <floorf+0x34>
 800b048:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b04c:	d3e4      	bcc.n	800b018 <floorf+0x38>
 800b04e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b052:	4770      	bx	lr
 800b054:	2300      	movs	r3, #0
 800b056:	e7dd      	b.n	800b014 <floorf+0x34>
 800b058:	7149f2ca 	.word	0x7149f2ca
 800b05c:	bf800000 	.word	0xbf800000
 800b060:	007fffff 	.word	0x007fffff

0800b064 <scalbnf>:
 800b064:	ee10 3a10 	vmov	r3, s0
 800b068:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b06c:	d025      	beq.n	800b0ba <scalbnf+0x56>
 800b06e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b072:	d302      	bcc.n	800b07a <scalbnf+0x16>
 800b074:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b078:	4770      	bx	lr
 800b07a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b07e:	d122      	bne.n	800b0c6 <scalbnf+0x62>
 800b080:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <scalbnf+0xc8>)
 800b082:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b130 <scalbnf+0xcc>
 800b086:	4298      	cmp	r0, r3
 800b088:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b08c:	db16      	blt.n	800b0bc <scalbnf+0x58>
 800b08e:	ee10 3a10 	vmov	r3, s0
 800b092:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b096:	3a19      	subs	r2, #25
 800b098:	4402      	add	r2, r0
 800b09a:	2afe      	cmp	r2, #254	; 0xfe
 800b09c:	dd15      	ble.n	800b0ca <scalbnf+0x66>
 800b09e:	ee10 3a10 	vmov	r3, s0
 800b0a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b134 <scalbnf+0xd0>
 800b0a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b138 <scalbnf+0xd4>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	eeb0 7a67 	vmov.f32	s14, s15
 800b0b0:	bfb8      	it	lt
 800b0b2:	eef0 7a66 	vmovlt.f32	s15, s13
 800b0b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b0ba:	4770      	bx	lr
 800b0bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b13c <scalbnf+0xd8>
 800b0c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b0c4:	4770      	bx	lr
 800b0c6:	0dd2      	lsrs	r2, r2, #23
 800b0c8:	e7e6      	b.n	800b098 <scalbnf+0x34>
 800b0ca:	2a00      	cmp	r2, #0
 800b0cc:	dd06      	ble.n	800b0dc <scalbnf+0x78>
 800b0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b0d6:	ee00 3a10 	vmov	s0, r3
 800b0da:	4770      	bx	lr
 800b0dc:	f112 0f16 	cmn.w	r2, #22
 800b0e0:	da1a      	bge.n	800b118 <scalbnf+0xb4>
 800b0e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0e6:	4298      	cmp	r0, r3
 800b0e8:	ee10 3a10 	vmov	r3, s0
 800b0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0f0:	dd0a      	ble.n	800b108 <scalbnf+0xa4>
 800b0f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b134 <scalbnf+0xd0>
 800b0f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b138 <scalbnf+0xd4>
 800b0fa:	eef0 7a40 	vmov.f32	s15, s0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bf18      	it	ne
 800b102:	eeb0 0a47 	vmovne.f32	s0, s14
 800b106:	e7db      	b.n	800b0c0 <scalbnf+0x5c>
 800b108:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b13c <scalbnf+0xd8>
 800b10c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b140 <scalbnf+0xdc>
 800b110:	eef0 7a40 	vmov.f32	s15, s0
 800b114:	2b00      	cmp	r3, #0
 800b116:	e7f3      	b.n	800b100 <scalbnf+0x9c>
 800b118:	3219      	adds	r2, #25
 800b11a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b11e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b122:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b144 <scalbnf+0xe0>
 800b126:	ee07 3a10 	vmov	s14, r3
 800b12a:	e7c4      	b.n	800b0b6 <scalbnf+0x52>
 800b12c:	ffff3cb0 	.word	0xffff3cb0
 800b130:	4c000000 	.word	0x4c000000
 800b134:	7149f2ca 	.word	0x7149f2ca
 800b138:	f149f2ca 	.word	0xf149f2ca
 800b13c:	0da24260 	.word	0x0da24260
 800b140:	8da24260 	.word	0x8da24260
 800b144:	33000000 	.word	0x33000000

0800b148 <__errno>:
 800b148:	4b01      	ldr	r3, [pc, #4]	; (800b150 <__errno+0x8>)
 800b14a:	6818      	ldr	r0, [r3, #0]
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	20000018 	.word	0x20000018

0800b154 <__libc_init_array>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	4d0d      	ldr	r5, [pc, #52]	; (800b18c <__libc_init_array+0x38>)
 800b158:	4c0d      	ldr	r4, [pc, #52]	; (800b190 <__libc_init_array+0x3c>)
 800b15a:	1b64      	subs	r4, r4, r5
 800b15c:	10a4      	asrs	r4, r4, #2
 800b15e:	2600      	movs	r6, #0
 800b160:	42a6      	cmp	r6, r4
 800b162:	d109      	bne.n	800b178 <__libc_init_array+0x24>
 800b164:	4d0b      	ldr	r5, [pc, #44]	; (800b194 <__libc_init_array+0x40>)
 800b166:	4c0c      	ldr	r4, [pc, #48]	; (800b198 <__libc_init_array+0x44>)
 800b168:	f000 f82e 	bl	800b1c8 <_init>
 800b16c:	1b64      	subs	r4, r4, r5
 800b16e:	10a4      	asrs	r4, r4, #2
 800b170:	2600      	movs	r6, #0
 800b172:	42a6      	cmp	r6, r4
 800b174:	d105      	bne.n	800b182 <__libc_init_array+0x2e>
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	f855 3b04 	ldr.w	r3, [r5], #4
 800b17c:	4798      	blx	r3
 800b17e:	3601      	adds	r6, #1
 800b180:	e7ee      	b.n	800b160 <__libc_init_array+0xc>
 800b182:	f855 3b04 	ldr.w	r3, [r5], #4
 800b186:	4798      	blx	r3
 800b188:	3601      	adds	r6, #1
 800b18a:	e7f2      	b.n	800b172 <__libc_init_array+0x1e>
 800b18c:	0800b650 	.word	0x0800b650
 800b190:	0800b650 	.word	0x0800b650
 800b194:	0800b650 	.word	0x0800b650
 800b198:	0800b658 	.word	0x0800b658

0800b19c <memcpy>:
 800b19c:	440a      	add	r2, r1
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a4:	d100      	bne.n	800b1a8 <memcpy+0xc>
 800b1a6:	4770      	bx	lr
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b2:	4291      	cmp	r1, r2
 800b1b4:	d1f9      	bne.n	800b1aa <memcpy+0xe>
 800b1b6:	bd10      	pop	{r4, pc}

0800b1b8 <memset>:
 800b1b8:	4402      	add	r2, r0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d100      	bne.n	800b1c2 <memset+0xa>
 800b1c0:	4770      	bx	lr
 800b1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c6:	e7f9      	b.n	800b1bc <memset+0x4>

0800b1c8 <_init>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr

0800b1d4 <_fini>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	bf00      	nop
 800b1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1da:	bc08      	pop	{r3}
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4770      	bx	lr
