
mother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f18  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080090e0  080090e0  000190e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009548  08009548  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009550  08009550  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800955c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001964  2000007c  080095d8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e0  080095d8  000219e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019957  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da3  00000000  00000000  00039a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0003c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556f  00000000  00000000  0003e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167f9  00000000  00000000  00063d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5f28  00000000  00000000  0007a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150498  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca0  00000000  00000000  001504e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080090c8 	.word	0x080090c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	080090c8 	.word	0x080090c8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f107 001c 	add.w	r0, r7, #28
 8000ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f107 011c 	add.w	r1, r7, #28
 8000eee:	2254      	movs	r2, #84	; 0x54
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f008 f8d3 	bl	800909c <memcpy>
	device_address_ = device_address;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8000efc:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000efe:	f640 033d 	movw	r3, #2109	; 0x83d
 8000f02:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000f04:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f107 001c 	add.w	r0, r7, #28
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f003 f972 	bl	8004204 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f20:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f24:	f002 f9be 	bl	80032a4 <HAL_Delay>
}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b099      	sub	sp, #100	; 0x64
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f40:	2320      	movs	r3, #32
 8000f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	1d18      	adds	r0, r3, #4
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f003 f951 	bl	8004204 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1d18      	adds	r0, r3, #4
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b299      	uxth	r1, r3
 8000f70:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2308      	movs	r3, #8
 8000f7a:	f003 fa41 	bl	8004400 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000fa6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	863b      	strh	r3, [r7, #48]	; 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	867b      	strh	r3, [r7, #50]	; 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fe6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
 8000ffe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001016:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a12 	vldr	s13, [pc, #72]	; 800106c <_ZN6BNO05514get_quaternionEv+0x134>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	return q;
 800102e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800103c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800103e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	ee06 0a10 	vmov	s12, r0
 8001048:	ee06 1a90 	vmov	s13, r1
 800104c:	ee07 2a10 	vmov	s14, r2
 8001050:	ee07 3a90 	vmov	s15, r3
}
 8001054:	eeb0 0a46 	vmov.f32	s0, s12
 8001058:	eef0 0a66 	vmov.f32	s1, s13
 800105c:	eeb0 1a47 	vmov.f32	s2, s14
 8001060:	eef0 1a67 	vmov.f32	s3, s15
 8001064:	375c      	adds	r7, #92	; 0x5c
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	46800000 	.word	0x46800000

08001070 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09a      	sub	sp, #104	; 0x68
 8001074:	af00      	add	r7, sp, #0
 8001076:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ff5d 	bl	8000f38 <_ZN6BNO05514get_quaternionEv>
 800107e:	eeb0 6a40 	vmov.f32	s12, s0
 8001082:	eef0 6a60 	vmov.f32	s13, s1
 8001086:	eeb0 7a41 	vmov.f32	s14, s2
 800108a:	eef0 7a61 	vmov.f32	s15, s3
 800108e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001092:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8001096:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800109a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 800109e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80010a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa07 	bl	80004d0 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	f7ff f8a5 	bl	8000214 <__adddf3>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80010e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9ed 	bl	80004d0 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	f7ff f88b 	bl	8000214 <__adddf3>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001108:	f7ff f882 	bl	8000210 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 8001114:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001118:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800111c:	f006 fd0a 	bl	8007b34 <atan2>
 8001120:	ec53 2b10 	vmov	r2, r3, d0
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd02 	bl	8000b30 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001130:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001140:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	f7ff f85c 	bl	8000214 <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	if (fabs(sinp) >= 1)
 8001164:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b45      	ldr	r3, [pc, #276]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00e      	beq.n	800119e <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001180:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001184:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8001280 <_ZN6BNO0559get_eularEv+0x210>
 8001188:	f006 fc4a 	bl	8007a20 <copysign>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fccc 	bl	8000b30 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	e00b      	b.n	80011b6 <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 800119e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 80011a2:	f006 fc93 	bl	8007acc <asin>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcbf 	bl	8000b30 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 80011b6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80011ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f97b 	bl	80004d0 <__aeabi_f2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	f7ff f819 	bl	8000214 <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80011ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80011fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001206:	ee17 0a90 	vmov	r0, s15
 800120a:	f7ff f961 	bl	80004d0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f7fe ffff 	bl	8000214 <__adddf3>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	491a      	ldr	r1, [pc, #104]	; (8001288 <_ZN6BNO0559get_eularEv+0x218>)
 8001220:	f7fe fff6 	bl	8000210 <__aeabi_dsub>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 800122c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8001230:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001234:	f006 fc7e 	bl	8007b34 <atan2>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc76 	bl	8000b30 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	623b      	str	r3, [r7, #32]

	return e;
 8001248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800124c:	f107 0218 	add.w	r2, r7, #24
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125c:	ee06 1a90 	vmov	s13, r1
 8001260:	ee07 2a10 	vmov	s14, r2
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a66 	vmov.f32	s0, s13
 800126c:	eef0 0a47 	vmov.f32	s1, s14
 8001270:	eeb0 1a67 	vmov.f32	s2, s15
 8001274:	3768      	adds	r7, #104	; 0x68
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w
 8001280:	54411744 	.word	0x54411744
 8001284:	3ff921fb 	.word	0x3ff921fb
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"
#include "math.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4613      	mov	r3, r2
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	715a      	strb	r2, [r3, #5]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	80da      	strh	r2, [r3, #6]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	601a      	str	r2, [r3, #0]
  ID = id;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	711a      	strb	r2, [r3, #4]
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_ZN3STS8moveContEtss>:

void STS::moveCont(uint16_t abs_speed, int16_t goal_position, int16_t now_position)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	817b      	strh	r3, [r7, #10]
 80012da:	460b      	mov	r3, r1
 80012dc:	813b      	strh	r3, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	721a      	strb	r2, [r3, #8]
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	743b      	strb	r3, [r7, #16]
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	747b      	strb	r3, [r7, #17]
 80012f6:	2305      	movs	r3, #5
 80012f8:	74fb      	strb	r3, [r7, #19]
 80012fa:	2303      	movs	r3, #3
 80012fc:	753b      	strb	r3, [r7, #20]
 80012fe:	232e      	movs	r3, #46	; 0x2e
 8001300:	757b      	strb	r3, [r7, #21]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	791b      	ldrb	r3, [r3, #4]
 8001306:	74bb      	strb	r3, [r7, #18]
  uint8_t checksum = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t diff = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	837b      	strh	r3, [r7, #26]
  int16_t inst_speed = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t speed = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	847b      	strh	r3, [r7, #34]	; 0x22

  diff = abs(goal_position - now_position);
 800131a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bfb8      	it	lt
 8001328:	425b      	neglt	r3, r3
 800132a:	837b      	strh	r3, [r7, #26]

  if(diff < 10){
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	2b09      	cmp	r3, #9
 8001330:	d802      	bhi.n	8001338 <_ZN3STS8moveContEtss+0x70>
	  inst_speed = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001336:	e01f      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else if(diff < abs_speed * abs_speed / 6000){
 8001338:	8b7a      	ldrh	r2, [r7, #26]
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <_ZN3STS8moveContEtss+0x174>)
 8001344:	fb81 0103 	smull	r0, r1, r1, r3
 8001348:	11c9      	asrs	r1, r1, #7
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	429a      	cmp	r2, r3
 8001350:	da10      	bge.n	8001374 <_ZN3STS8moveContEtss+0xac>
	  inst_speed = sqrt(1500 * diff);
 8001352:	8b7b      	ldrh	r3, [r7, #26]
 8001354:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f8f6 	bl	800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001362:	ec53 2b10 	vmov	r2, r3, d0
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbb9 	bl	8000ae0 <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001372:	e001      	b.n	8001378 <_ZN3STS8moveContEtss+0xb0>
  }else{
	  inst_speed = abs_speed;
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if(goal_position < now_position){
 8001378:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	da02      	bge.n	800138a <_ZN3STS8moveContEtss+0xc2>
	  speed = inst_speed;
 8001384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001386:	847b      	strh	r3, [r7, #34]	; 0x22
 8001388:	e003      	b.n	8001392 <_ZN3STS8moveContEtss+0xca>
  }else{
	  speed = -inst_speed;
 800138a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800138c:	425b      	negs	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((goal_position - now_position < 0 && speed > 0) || (goal_position - now_position > 0 && speed < 0))
 8001392:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da03      	bge.n	80013a8 <_ZN3STS8moveContEtss+0xe0>
 80013a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc0a      	bgt.n	80013be <_ZN3STS8moveContEtss+0xf6>
 80013a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd18      	ble.n	80013e8 <_ZN3STS8moveContEtss+0x120>
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da14      	bge.n	80013e8 <_ZN3STS8moveContEtss+0x120>
  {
    if (speed < 0)
 80013be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da04      	bge.n	80013d0 <_ZN3STS8moveContEtss+0x108>
    {
      speed = 32768 - speed;
 80013c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <_ZN3STS8moveContEtss+0x178>)
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    send_Buf[6] = speed;
 80013d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	75bb      	strb	r3, [r7, #22]
    send_Buf[7] = speed >> 8;
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	75fb      	strb	r3, [r7, #23]

    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 ff5e 	bl	80032a4 <HAL_Delay>
  }

  for (int i = 2; i < 8; i++)
 80013e8:	2302      	movs	r3, #2
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	dc0d      	bgt.n	800140e <_ZN3STS8moveContEtss+0x146>
  {
    checksum += send_Buf[i];
 80013f2:	f107 0210 	add.w	r2, r7, #16
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001400:	4413      	add	r3, r2
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e7ee      	b.n	80013ec <_ZN3STS8moveContEtss+0x124>
  }
  checksum = ~checksum;
 800140e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001412:	43db      	mvns	r3, r3
 8001414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8001418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141c:	763b      	strb	r3, [r7, #24]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f107 0110 	add.w	r1, r7, #16
 8001426:	2332      	movs	r3, #50	; 0x32
 8001428:	2209      	movs	r2, #9
 800142a:	f005 fd08 	bl	8006e3e <HAL_UART_Transmit>
  HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f001 ff38 	bl	80032a4 <HAL_Delay>
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	057619f1 	.word	0x057619f1
 8001440:	ffff8000 	.word	0xffff8000

08001444 <_ZN3STS4sendEv>:
	HAL_UART_Transmit(UART, send_Buf, 13, 50);
	HAL_Delay(1);
}

void STS::send()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	23ff      	movs	r3, #255	; 0xff
 8001458:	723b      	strb	r3, [r7, #8]
 800145a:	23ff      	movs	r3, #255	; 0xff
 800145c:	727b      	strb	r3, [r7, #9]
 800145e:	2304      	movs	r3, #4
 8001460:	72fb      	strb	r3, [r7, #11]
 8001462:	2302      	movs	r3, #2
 8001464:	733b      	strb	r3, [r7, #12]
 8001466:	2338      	movs	r3, #56	; 0x38
 8001468:	737b      	strb	r3, [r7, #13]
 800146a:	2302      	movs	r3, #2
 800146c:	73bb      	strb	r3, [r7, #14]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 8001478:	2302      	movs	r3, #2
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b06      	cmp	r3, #6
 8001480:	dc0b      	bgt.n	800149a <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	4413      	add	r3, r2
 8001490:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	3301      	adds	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	e7f0      	b.n	800147c <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	43db      	mvns	r3, r3
 800149e:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	2208      	movs	r2, #8
 80014b0:	f005 fcc5 	bl	8006e3e <HAL_UART_Transmit>
}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 80014c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80014d8:	4293      	cmp	r3, r2
 80014da:	dd08      	ble.n	80014ee <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001500:	4293      	cmp	r3, r2
 8001502:	dd08      	ble.n	8001516 <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	3301      	adds	r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	b25a      	sxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800151c:	b29b      	uxth	r3, r3
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	b29a      	uxth	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	4413      	add	r3, r2
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	811a      	strh	r2, [r3, #8]

  return -position;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800153a:	b29b      	uxth	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	b21b      	sxth	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7fe ffa8 	bl	80004ac <__aeabi_i2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f006 fae8 	bl	8007b38 <sqrt>
 8001568:	eeb0 7a40 	vmov.f32	s14, s0
 800156c:	eef0 7a60 	vmov.f32	s15, s1
 8001570:	eeb0 0a47 	vmov.f32	s0, s14
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	ed87 0a01 	vstr	s0, [r7, #4]
 8001588:	ed97 0a01 	vldr	s0, [r7, #4]
 800158c:	f006 fa5a 	bl	8007a44 <cosf>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <_ZN4CALC14similarityRiseEhsttt>:
	}

	return output;
}

int16_t CALC::similarityRise(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	72fb      	strb	r3, [r7, #11]
 80015b2:	460b      	mov	r3, r1
 80015b4:	813b      	strh	r3, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da00      	bge.n	80015d2 <_ZN4CALC14similarityRiseEhsttt+0x32>
 80015d0:	330f      	adds	r3, #15
 80015d2:	111b      	asrs	r3, r3, #4
 80015d4:	425b      	negs	r3, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80015dc:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t diff = angle - refference;
 80015de:	893b      	ldrh	r3, [r7, #8]
 80015e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (diff > 180) {
 80015e8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015ec:	2bb4      	cmp	r3, #180	; 0xb4
 80015ee:	dd04      	ble.n	80015fa <_ZN4CALC14similarityRiseEhsttt+0x5a>
		diff = diff - 360;
 80015f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if (diff < -180) {
 80015fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015fe:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001602:	da04      	bge.n	800160e <_ZN4CALC14similarityRiseEhsttt+0x6e>
		diff = diff + 360;
 8001604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001606:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800160a:	b29b      	uxth	r3, r3
 800160c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if (abs(diff) >= widthAngle / 2) {
 800160e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfb8      	it	lt
 8001616:	425b      	neglt	r3, r3
 8001618:	b29a      	uxth	r2, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	429a      	cmp	r2, r3
 8001622:	d301      	bcc.n	8001628 <_ZN4CALC14similarityRiseEhsttt+0x88>
		return 0;
 8001624:	2300      	movs	r3, #0
 8001626:	e0ba      	b.n	800179e <_ZN4CALC14similarityRiseEhsttt+0x1fe>
	}

	float angleRad = angle * M_PI / 180.0;
 8001628:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff3e 	bl	80004ac <__aeabi_i2d>
 8001630:	a35d      	add	r3, pc, #372	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ffa3 	bl	8000580 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 8001648:	f7ff f8c4 	bl	80007d4 <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fa6c 	bl	8000b30 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
	float refferenceRad = refference * M_PI / 180.0;
 800165c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff23 	bl	80004ac <__aeabi_i2d>
 8001666:	a350      	add	r3, pc, #320	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	f7fe ff88 	bl	8000580 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 800167e:	f7ff f8a9 	bl	80007d4 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa51 	bl	8000b30 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff09 	bl	80004ac <__aeabi_i2d>
 800169a:	a343      	add	r3, pc, #268	; (adr r3, 80017a8 <_ZN4CALC14similarityRiseEhsttt+0x208>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff6e 	bl	8000580 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <_ZN4CALC14similarityRiseEhsttt+0x210>)
 80016b2:	f7ff f88f 	bl	80007d4 <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa37 	bl	8000b30 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 80016c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80016ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d2:	eeb0 0a67 	vmov.f32	s0, s15
 80016d6:	f7ff ff52 	bl	800157e <_ZSt3cosf>
 80016da:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 80016de:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ea:	eeb0 0a47 	vmov.f32	s0, s14
 80016ee:	f7ff ff46 	bl	800157e <_ZSt3cosf>
 80016f2:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 80016f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80016fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001706:	edd7 7a05 	vldr	s15, [r7, #20]
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	edc7 7a04 	vstr	s15, [r7, #16]

    int16_t output = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(diff > 0){
 800171a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800171e:	2b00      	cmp	r3, #0
 8001720:	dd19      	ble.n	8001756 <_ZN4CALC14similarityRiseEhsttt+0x1b6>
        output = center - (normalizedResult - 1) * widthHue;
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001734:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001738:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
 8001752:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001754:	e018      	b.n	8001788 <_ZN4CALC14similarityRiseEhsttt+0x1e8>
    } else {
        output = center + (normalizedResult - 1) * widthHue;
 8001756:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001760:	edd7 7a04 	vldr	s15, [r7, #16]
 8001764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001768:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800176c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001782:	ee17 3a90 	vmov	r3, s15
 8001786:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

	if(output < 0){
 8001788:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	da04      	bge.n	800179a <_ZN4CALC14similarityRiseEhsttt+0x1fa>
		output += 256;
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001796:	b29b      	uxth	r3, r3
 8001798:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	return output;
 800179a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	54442d18 	.word	0x54442d18
 80017ac:	400921fb 	.word	0x400921fb
 80017b0:	40668000 	.word	0x40668000
 80017b4:	00000000 	.word	0x00000000

080017b8 <_ZN4CALC16similarityNormalEhst>:
	}

	return output;
}

int16_t CALC::similarityNormal(uint8_t ledNum, int16_t refference, uint16_t width){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	4608      	mov	r0, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	72fb      	strb	r3, [r7, #11]
 80017ca:	460b      	mov	r3, r1
 80017cc:	813b      	strh	r3, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = 360 - (ledNum * 360 / 16 + 360 / 32);
 80017da:	7afb      	ldrb	r3, [r7, #11]
 80017dc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da00      	bge.n	80017ea <_ZN4CALC16similarityNormalEhst+0x32>
 80017e8:	330f      	adds	r3, #15
 80017ea:	111b      	asrs	r3, r3, #4
 80017ec:	425b      	negs	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	f203 135d 	addw	r3, r3, #349	; 0x15d
 80017f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t diff = abs(angle - refference);
 80017f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80017f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	bfb8      	it	lt
 8001802:	425b      	neglt	r3, r3
 8001804:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (diff > 180) {
 8001806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001808:	2bb4      	cmp	r3, #180	; 0xb4
 800180a:	d903      	bls.n	8001814 <_ZN4CALC16similarityNormalEhst+0x5c>
        diff = 360 - diff;
 800180c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800180e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001812:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if (diff >= width / 2) {
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800181c:	429a      	cmp	r2, r3
 800181e:	d301      	bcc.n	8001824 <_ZN4CALC16similarityNormalEhst+0x6c>
        return 0;
 8001820:	2300      	movs	r3, #0
 8001822:	e081      	b.n	8001928 <_ZN4CALC16similarityNormalEhst+0x170>
    }

    float angleRad = angle * M_PI / 180.0;
 8001824:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe40 	bl	80004ac <__aeabi_i2d>
 800182c:	a340      	add	r3, pc, #256	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fea5 	bl	8000580 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 8001844:	f7fe ffc6 	bl	80007d4 <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f96e 	bl	8000b30 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    float refferenceRad = refference * M_PI / 180.0;
 8001858:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe25 	bl	80004ac <__aeabi_i2d>
 8001862:	a333      	add	r3, pc, #204	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fe8a 	bl	8000580 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 800187a:	f7fe ffab 	bl	80007d4 <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff f953 	bl	8000b30 <__aeabi_d2f>
 800188a:	4603      	mov	r3, r0
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    float widthRad = width * M_PI / 180.0;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe0b 	bl	80004ac <__aeabi_i2d>
 8001896:	a326      	add	r3, pc, #152	; (adr r3, 8001930 <_ZN4CALC16similarityNormalEhst+0x178>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fe70 	bl	8000580 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <_ZN4CALC16similarityNormalEhst+0x180>)
 80018ae:	f7fe ff91 	bl	80007d4 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f939 	bl	8000b30 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	623b      	str	r3, [r7, #32]

    float result = cos(angleRad - refferenceRad);
 80018c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80018c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	f7ff fe54 	bl	800157e <_ZSt3cosf>
 80018d6:	ed87 0a07 	vstr	s0, [r7, #28]
    float zeroPoint = cos(widthRad / 2);
 80018da:	edd7 7a08 	vldr	s15, [r7, #32]
 80018de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	f7ff fe48 	bl	800157e <_ZSt3cosf>
 80018ee:	ed87 0a06 	vstr	s0, [r7, #24]
    float output = (result - zeroPoint) / (1 - zeroPoint);
 80018f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80018fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001902:	edd7 7a06 	vldr	s15, [r7, #24]
 8001906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800190a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]

    return output * 255;
 8001912:	edd7 7a05 	vldr	s15, [r7, #20]
 8001916:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800193c <_ZN4CALC16similarityNormalEhst+0x184>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	b21b      	sxth	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	; 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	54442d18 	.word	0x54442d18
 8001934:	400921fb 	.word	0x400921fb
 8001938:	40668000 	.word	0x40668000
 800193c:	437f0000 	.word	0x437f0000

08001940 <_ZN4CALC12calcRotationEss>:
    }else{
    	return 1;
    }
}

int16_t CALC::calcRotation(int16_t targetRotation, int16_t nowRotation){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	803b      	strh	r3, [r7, #0]
    int16_t diffRotation = targetRotation - nowRotation;
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	883b      	ldrh	r3, [r7, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	81fb      	strh	r3, [r7, #14]

    if(diffRotation > 180){
 800195a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800195e:	2bb4      	cmp	r3, #180	; 0xb4
 8001960:	dd05      	ble.n	800196e <_ZN4CALC12calcRotationEss+0x2e>
        diffRotation -= 360;
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001968:	b29b      	uxth	r3, r3
 800196a:	81fb      	strh	r3, [r7, #14]
 800196c:	e009      	b.n	8001982 <_ZN4CALC12calcRotationEss+0x42>
    }else if(diffRotation < -180){
 800196e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001972:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001976:	da04      	bge.n	8001982 <_ZN4CALC12calcRotationEss+0x42>
        diffRotation += 360;
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800197e:	b29b      	uxth	r3, r3
 8001980:	81fb      	strh	r3, [r7, #14]
    }

    return diffRotation;
 8001982:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <HAL_TIM_PWM_PulseFinishedCallback+0x16>
  {
    NeopixelTape.execute();
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80019a6:	f001 fb23 	bl	8002ff0 <_ZN7WS2812C7executeEv>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200000ec 	.word	0x200000ec
 80019b8:	2000027c 	.word	0x2000027c
 80019bc:	00000000 	.word	0x00000000

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b0b0      	sub	sp, #192	; 0xc0
 80019c4:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f001 fbfb 	bl	80031c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 fb85 	bl	80020d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 fd41 	bl	8002454 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80019d2:	f000 fd17 	bl	8002404 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80019d6:	f000 fbf5 	bl	80021c4 <_ZL12MX_I2C1_Initv>
  MX_TIM3_Init();
 80019da:	f000 fc27 	bl	800222c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80019de:	f000 fcb3 	bl	8002348 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 80019e2:	f000 fce1 	bl	80023a8 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelTape.init();
 80019e6:	4892      	ldr	r0, [pc, #584]	; (8001c30 <main+0x270>)
 80019e8:	f001 fb8b 	bl	8003102 <_ZN7WS2812C4initEv>

  if(HAL_GPIO_ReadPin(dipsw1_GPIO_Port, dipsw1_Pin) == 1){
 80019ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f0:	4890      	ldr	r0, [pc, #576]	; (8001c34 <main+0x274>)
 80019f2:	f002 fa91 	bl	8003f18 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <main+0x4e>
	  ID = 1;
 8001a06:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <main+0x278>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e022      	b.n	8001a54 <main+0x94>
  }else if(HAL_GPIO_ReadPin(dipsw2_GPIO_Port, dipsw2_Pin) == 1){
 8001a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a12:	4888      	ldr	r0, [pc, #544]	; (8001c34 <main+0x274>)
 8001a14:	f002 fa80 	bl	8003f18 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <main+0x70>
	  ID = 2;
 8001a28:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <main+0x278>)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e011      	b.n	8001a54 <main+0x94>
  }else if(HAL_GPIO_ReadPin(dipsw3_GPIO_Port, dipsw3_Pin) == 1){
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	487f      	ldr	r0, [pc, #508]	; (8001c34 <main+0x274>)
 8001a36:	f002 fa6f 	bl	8003f18 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <main+0x92>
	  ID = 3;
 8001a4a:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <main+0x278>)
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e000      	b.n	8001a54 <main+0x94>
  }else {
	  while(1);
 8001a52:	e7fe      	b.n	8001a52 <main+0x92>
  }

  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	4979      	ldr	r1, [pc, #484]	; (8001c3c <main+0x27c>)
 8001a58:	4879      	ldr	r0, [pc, #484]	; (8001c40 <main+0x280>)
 8001a5a:	f005 fa82 	bl	8006f62 <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2102      	movs	r1, #2
 8001a62:	4874      	ldr	r0, [pc, #464]	; (8001c34 <main+0x274>)
 8001a64:	f002 fa70 	bl	8003f48 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a6c:	f001 fc1a 	bl	80032a4 <HAL_Delay>

  while (!ready)
 8001a70:	4b74      	ldr	r3, [pc, #464]	; (8001c44 <main+0x284>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d116      	bne.n	8001aa6 <main+0xe6>
  {
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28 << 1, 10, 1000) == HAL_OK)
 8001a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7c:	220a      	movs	r2, #10
 8001a7e:	2150      	movs	r1, #80	; 0x50
 8001a80:	4871      	ldr	r0, [pc, #452]	; (8001c48 <main+0x288>)
 8001a82:	f002 fee3 	bl	800484c <HAL_I2C_IsDeviceReady>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <main+0xde>
    {
      ready = 1;
 8001a96:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <main+0x284>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e7e8      	b.n	8001a70 <main+0xb0>
    }
    else
    {
      HAL_Delay(100);
 8001a9e:	2064      	movs	r0, #100	; 0x64
 8001aa0:	f001 fc00 	bl	80032a4 <HAL_Delay>
  while (!ready)
 8001aa4:	e7e4      	b.n	8001a70 <main+0xb0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  unsigned char address = 0x28;
 8001aa6:	2328      	movs	r3, #40	; 0x28
 8001aa8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  BNO055 bno055(hi2c1, address);
 8001aac:	4c66      	ldr	r4, [pc, #408]	; (8001c48 <main+0x288>)
 8001aae:	f107 0510 	add.w	r5, r7, #16
 8001ab2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001ab6:	9312      	str	r3, [sp, #72]	; 0x48
 8001ab8:	4668      	mov	r0, sp
 8001aba:	f104 030c 	add.w	r3, r4, #12
 8001abe:	2248      	movs	r2, #72	; 0x48
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f007 faeb 	bl	800909c <memcpy>
 8001ac6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001aca:	4628      	mov	r0, r5
 8001acc:	f7ff fa02 	bl	8000ed4 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    e = bno055.get_eular();
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff facb 	bl	8001070 <_ZN6BNO0559get_eularEv>
 8001ada:	eef0 6a40 	vmov.f32	s13, s0
 8001ade:	eeb0 7a60 	vmov.f32	s14, s1
 8001ae2:	eef0 7a41 	vmov.f32	s15, s2
 8001ae6:	edc7 6a01 	vstr	s13, [r7, #4]
 8001aea:	ed87 7a02 	vstr	s14, [r7, #8]
 8001aee:	edc7 7a03 	vstr	s15, [r7, #12]
    gyro = (e.z / M_PI) * 180;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fceb 	bl	80004d0 <__aeabi_f2d>
 8001afa:	a34b      	add	r3, pc, #300	; (adr r3, 8001c28 <main+0x268>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fe68 	bl	80007d4 <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <main+0x28c>)
 8001b12:	f7fe fd35 	bl	8000580 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f7fe ffdf 	bl	8000ae0 <__aeabi_d2iz>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <main+0x290>)
 8001b28:	801a      	strh	r2, [r3, #0]

    ledPos0 = (-gyro + ((servoPos0 % 4096 + 4096) % 4096) * 360 / 4096 + 360) % 360;
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <main+0x294>)
 8001b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b30:	425a      	negs	r2, r3
 8001b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b36:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b3a:	bf58      	it	pl
 8001b3c:	4253      	negpl	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	425a      	negs	r2, r3
 8001b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b4e:	bf58      	it	pl
 8001b50:	4253      	negpl	r3, r2
 8001b52:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da01      	bge.n	8001b62 <main+0x1a2>
 8001b5e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001b62:	131b      	asrs	r3, r3, #12
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <main+0x290>)
 8001b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	4a39      	ldr	r2, [pc, #228]	; (8001c58 <main+0x298>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	441a      	add	r2, r3
 8001b7a:	1211      	asrs	r1, r2, #8
 8001b7c:	17da      	asrs	r2, r3, #31
 8001b7e:	1a8a      	subs	r2, r1, r2
 8001b80:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b84:	fb01 f202 	mul.w	r2, r1, r2
 8001b88:	1a9a      	subs	r2, r3, r2
 8001b8a:	b212      	sxth	r2, r2
 8001b8c:	4b33      	ldr	r3, [pc, #204]	; (8001c5c <main+0x29c>)
 8001b8e:	801a      	strh	r2, [r3, #0]
    ledPos2 = (ledPos0 + ((servoPos2 % 4096 + 4096) % 4096) * 360 / 4096) % 360;
 8001b90:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <main+0x29c>)
 8001b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <main+0x2a0>)
 8001b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9e:	425a      	negs	r2, r3
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001ba8:	bf58      	it	pl
 8001baa:	4253      	negpl	r3, r2
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb2:	425a      	negs	r2, r3
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bbc:	bf58      	it	pl
 8001bbe:	4253      	negpl	r3, r2
 8001bc0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da01      	bge.n	8001bd0 <main+0x210>
 8001bcc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001bd0:	131b      	asrs	r3, r3, #12
 8001bd2:	440b      	add	r3, r1
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <main+0x298>)
 8001bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bda:	441a      	add	r2, r3
 8001bdc:	1211      	asrs	r1, r2, #8
 8001bde:	17da      	asrs	r2, r3, #31
 8001be0:	1a8a      	subs	r2, r1, r2
 8001be2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001be6:	fb01 f202 	mul.w	r2, r1, r2
 8001bea:	1a9a      	subs	r2, r3, r2
 8001bec:	b212      	sxth	r2, r2
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <main+0x2a4>)
 8001bf0:	801a      	strh	r2, [r3, #0]

    get_position(0);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 fcc4 	bl	8002580 <_Z12get_positionh>
    get_position(2);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f000 fcc1 	bl	8002580 <_Z12get_positionh>

    if (HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 0)
 8001bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c02:	4819      	ldr	r0, [pc, #100]	; (8001c68 <main+0x2a8>)
 8001c04:	f002 f988 	bl	8003f18 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d12e      	bne.n	8001c6c <main+0x2ac>
 8001c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c12:	4815      	ldr	r0, [pc, #84]	; (8001c68 <main+0x2a8>)
 8001c14:	f002 f980 	bl	8003f18 <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d126      	bne.n	8001c6c <main+0x2ac>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e025      	b.n	8001c6e <main+0x2ae>
 8001c22:	bf00      	nop
 8001c24:	f3af 8000 	nop.w
 8001c28:	54442d18 	.word	0x54442d18
 8001c2c:	400921fb 	.word	0x400921fb
 8001c30:	2000027c 	.word	0x2000027c
 8001c34:	40020000 	.word	0x40020000
 8001c38:	200019c8 	.word	0x200019c8
 8001c3c:	20001940 	.word	0x20001940
 8001c40:	20000194 	.word	0x20000194
 8001c44:	200019c4 	.word	0x200019c4
 8001c48:	20000098 	.word	0x20000098
 8001c4c:	40668000 	.word	0x40668000
 8001c50:	200019c6 	.word	0x200019c6
 8001c54:	20001938 	.word	0x20001938
 8001c58:	b60b60b7 	.word	0xb60b60b7
 8001c5c:	200019c0 	.word	0x200019c0
 8001c60:	2000193c 	.word	0x2000193c
 8001c64:	200019c2 	.word	0x200019c2
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80ca 	beq.w	8001e08 <main+0x448>
    {
      servo0.moveCont(1500, 8191, servoPos0);
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <main+0x46c>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c7e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c82:	486b      	ldr	r0, [pc, #428]	; (8001e30 <main+0x470>)
 8001c84:	f7ff fb20 	bl	80012c8 <_ZN3STS8moveContEtss>
      servo2.moveCont(1500, 8191, servoPos2);
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <main+0x474>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c92:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c96:	4868      	ldr	r0, [pc, #416]	; (8001e38 <main+0x478>)
 8001c98:	f7ff fb16 	bl	80012c8 <_ZN3STS8moveContEtss>

      if (i != 0)
 8001c9c:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <main+0x47c>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d017      	beq.n	8001cd6 <main+0x316>
      {
        i += 8;
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <main+0x47c>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3308      	adds	r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <main+0x47c>)
 8001cb6:	801a      	strh	r2, [r3, #0]
        if (i >= 180)
 8001cb8:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <main+0x47c>)
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	2bb3      	cmp	r3, #179	; 0xb3
 8001cc0:	dd09      	ble.n	8001cd6 <main+0x316>
        {
          i -= 360;
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	; (8001e3c <main+0x47c>)
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <main+0x47c>)
 8001cd4:	801a      	strh	r2, [r3, #0]
        }
      }

      moveRotation = calc.calcRotation(i, gyro);
 8001cd6:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <main+0x47c>)
 8001cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <main+0x480>)
 8001cde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4857      	ldr	r0, [pc, #348]	; (8001e44 <main+0x484>)
 8001ce6:	f7ff fe2b 	bl	8001940 <_ZN4CALC12calcRotationEss>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <main+0x488>)
 8001cf0:	801a      	strh	r2, [r3, #0]

      if (moveRotation > 0)
 8001cf2:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <main+0x488>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dd08      	ble.n	8001d0e <main+0x34e>
      {
        moveRotation += 10;
 8001cfc:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <main+0x488>)
 8001cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	330a      	adds	r3, #10
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <main+0x488>)
 8001d0c:	801a      	strh	r2, [r3, #0]
      }
      if (moveRotation < 0)
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <main+0x488>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da08      	bge.n	8001d2a <main+0x36a>
      {
        moveRotation -= 10;
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <main+0x488>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b0a      	subs	r3, #10
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <main+0x488>)
 8001d28:	801a      	strh	r2, [r3, #0]
      }

      sendData(0, 0, moveRotation);
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <main+0x488>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	461a      	mov	r2, r3
 8001d32:	2100      	movs	r1, #0
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 fd69 	bl	800280c <_Z8sendDataths>

      for (uint8_t led = 0; led < 16; led++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d82b      	bhi.n	8001da0 <main+0x3e0>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos0, 90, 128, 100), 255, calc.similarityNormal(led, ledPos0, 90));
 8001d48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d4c:	b29c      	uxth	r4, r3
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <main+0x48c>)
 8001d50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d54:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001d58:	2364      	movs	r3, #100	; 0x64
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	235a      	movs	r3, #90	; 0x5a
 8001d62:	4838      	ldr	r0, [pc, #224]	; (8001e44 <main+0x484>)
 8001d64:	f7ff fc1c 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <main+0x48c>)
 8001d6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d72:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 8001d76:	235a      	movs	r3, #90	; 0x5a
 8001d78:	4832      	ldr	r0, [pc, #200]	; (8001e44 <main+0x484>)
 8001d7a:	f7ff fd1d 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	23ff      	movs	r3, #255	; 0xff
 8001d84:	462a      	mov	r2, r5
 8001d86:	4621      	mov	r1, r4
 8001d88:	4831      	ldr	r0, [pc, #196]	; (8001e50 <main+0x490>)
 8001d8a:	f001 f857 	bl	8002e3c <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001d8e:	4830      	ldr	r0, [pc, #192]	; (8001e50 <main+0x490>)
 8001d90:	f001 f91e 	bl	8002fd0 <_ZN7WS2812C4showEv>
      for (uint8_t led = 0; led < 16; led++)
 8001d94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d9e:	e7cf      	b.n	8001d40 <main+0x380>
      }
      for (uint8_t led = 32; led < 48; led++)
 8001da0:	2320      	movs	r3, #32
 8001da2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001da6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001daa:	2b2f      	cmp	r3, #47	; 0x2f
 8001dac:	f200 8177 	bhi.w	800209e <main+0x6de>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, ledPos2, 90));
 8001db0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <main+0x494>)
 8001db8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dbc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8001dc0:	2364      	movs	r3, #100	; 0x64
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	235a      	movs	r3, #90	; 0x5a
 8001dca:	481e      	ldr	r0, [pc, #120]	; (8001e44 <main+0x484>)
 8001dcc:	f7ff fbe8 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <main+0x494>)
 8001dd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dda:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8001dde:	235a      	movs	r3, #90	; 0x5a
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <main+0x484>)
 8001de2:	f7ff fce9 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001de6:	4603      	mov	r3, r0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	23ff      	movs	r3, #255	; 0xff
 8001dec:	462a      	mov	r2, r5
 8001dee:	4621      	mov	r1, r4
 8001df0:	4817      	ldr	r0, [pc, #92]	; (8001e50 <main+0x490>)
 8001df2:	f001 f823 	bl	8002e3c <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001df6:	4816      	ldr	r0, [pc, #88]	; (8001e50 <main+0x490>)
 8001df8:	f001 f8ea 	bl	8002fd0 <_ZN7WS2812C4showEv>
      for (uint8_t led = 32; led < 48; led++)
 8001dfc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001e00:	3301      	adds	r3, #1
 8001e02:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001e06:	e7ce      	b.n	8001da6 <main+0x3e6>
      }
    }
    else if (HAL_GPIO_ReadPin(slidesw1_GPIO_Port, slidesw1_Pin) == 1 && HAL_GPIO_ReadPin(slidesw2_GPIO_Port, slidesw2_Pin) == 1)
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <main+0x498>)
 8001e0e:	f002 f883 	bl	8003f18 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d121      	bne.n	8001e5c <main+0x49c>
 8001e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1c:	480e      	ldr	r0, [pc, #56]	; (8001e58 <main+0x498>)
 8001e1e:	f002 f87b 	bl	8003f18 <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d119      	bne.n	8001e5c <main+0x49c>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e018      	b.n	8001e5e <main+0x49e>
 8001e2c:	20001938 	.word	0x20001938
 8001e30:	20001908 	.word	0x20001908
 8001e34:	2000193c 	.word	0x2000193c
 8001e38:	20001920 	.word	0x20001920
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	200019c6 	.word	0x200019c6
 8001e44:	20001904 	.word	0x20001904
 8001e48:	200019d0 	.word	0x200019d0
 8001e4c:	200019c0 	.word	0x200019c0
 8001e50:	2000027c 	.word	0x2000027c
 8001e54:	200019c2 	.word	0x200019c2
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80d2 	beq.w	8002008 <main+0x648>
    {
      servo0.moveCont(1500, 0, servoPos0);
 8001e64:	4b91      	ldr	r3, [pc, #580]	; (80020ac <main+0x6ec>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e70:	488f      	ldr	r0, [pc, #572]	; (80020b0 <main+0x6f0>)
 8001e72:	f7ff fa29 	bl	80012c8 <_ZN3STS8moveContEtss>
      servo2.moveCont(1500, 0, servoPos2);
 8001e76:	4b8f      	ldr	r3, [pc, #572]	; (80020b4 <main+0x6f4>)
 8001e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e82:	488d      	ldr	r0, [pc, #564]	; (80020b8 <main+0x6f8>)
 8001e84:	f7ff fa20 	bl	80012c8 <_ZN3STS8moveContEtss>

      if (i != 8)
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <main+0x6fc>)
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d018      	beq.n	8001ec4 <main+0x504>
      {
        i -= 8;
 8001e92:	4b8a      	ldr	r3, [pc, #552]	; (80020bc <main+0x6fc>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b08      	subs	r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	4b86      	ldr	r3, [pc, #536]	; (80020bc <main+0x6fc>)
 8001ea2:	801a      	strh	r2, [r3, #0]
        if (i < -180)
 8001ea4:	4b85      	ldr	r3, [pc, #532]	; (80020bc <main+0x6fc>)
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001eae:	da09      	bge.n	8001ec4 <main+0x504>
        {
          i += 360;
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <main+0x6fc>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <main+0x6fc>)
 8001ec2:	801a      	strh	r2, [r3, #0]
        }
      }

      moveRotation = calc.calcRotation(i, gyro);
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <main+0x6fc>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	4a7d      	ldr	r2, [pc, #500]	; (80020c0 <main+0x700>)
 8001ecc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	487c      	ldr	r0, [pc, #496]	; (80020c4 <main+0x704>)
 8001ed4:	f7ff fd34 	bl	8001940 <_ZN4CALC12calcRotationEss>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <main+0x708>)
 8001ede:	801a      	strh	r2, [r3, #0]

      if (moveRotation > 0)
 8001ee0:	4b79      	ldr	r3, [pc, #484]	; (80020c8 <main+0x708>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dd08      	ble.n	8001efc <main+0x53c>
      {
        moveRotation += 10;
 8001eea:	4b77      	ldr	r3, [pc, #476]	; (80020c8 <main+0x708>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	330a      	adds	r3, #10
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b21a      	sxth	r2, r3
 8001ef8:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <main+0x708>)
 8001efa:	801a      	strh	r2, [r3, #0]
      }
      if (moveRotation < 0)
 8001efc:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <main+0x708>)
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da08      	bge.n	8001f18 <main+0x558>
      {
        moveRotation -= 10;
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <main+0x708>)
 8001f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b0a      	subs	r3, #10
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	4b6c      	ldr	r3, [pc, #432]	; (80020c8 <main+0x708>)
 8001f16:	801a      	strh	r2, [r3, #0]
      }

      sendData(0, 0, moveRotation);
 8001f18:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <main+0x708>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 fc72 	bl	800280c <_Z8sendDataths>

      for (uint8_t led = 0; led < 16; led++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001f2e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d830      	bhi.n	8001f98 <main+0x5d8>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8001f36:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f3a:	b29c      	uxth	r4, r3
 8001f3c:	4b63      	ldr	r3, [pc, #396]	; (80020cc <main+0x70c>)
 8001f3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f42:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	235a      	movs	r3, #90	; 0x5a
 8001f50:	485c      	ldr	r0, [pc, #368]	; (80020c4 <main+0x704>)
 8001f52:	f7ff fb25 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461d      	mov	r5, r3
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <main+0x70c>)
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8001f6e:	235a      	movs	r3, #90	; 0x5a
 8001f70:	4854      	ldr	r0, [pc, #336]	; (80020c4 <main+0x704>)
 8001f72:	f7ff fc21 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001f76:	4603      	mov	r3, r0
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	23ff      	movs	r3, #255	; 0xff
 8001f7c:	462a      	mov	r2, r5
 8001f7e:	4621      	mov	r1, r4
 8001f80:	4853      	ldr	r0, [pc, #332]	; (80020d0 <main+0x710>)
 8001f82:	f000 ff5b 	bl	8002e3c <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001f86:	4852      	ldr	r0, [pc, #328]	; (80020d0 <main+0x710>)
 8001f88:	f001 f822 	bl	8002fd0 <_ZN7WS2812C4showEv>
      for (uint8_t led = 0; led < 16; led++)
 8001f8c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001f90:	3301      	adds	r3, #1
 8001f92:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001f96:	e7ca      	b.n	8001f2e <main+0x56e>
      }
      for (uint8_t led = 32; led < 48; led++)
 8001f98:	2320      	movs	r3, #32
 8001f9a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001f9e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fa4:	d87b      	bhi.n	800209e <main+0x6de>
      {
        NeopixelTape.set_hsv(led, calc.similarityRise(led, ledPos2, 90, 128, 100), 255, calc.similarityNormal(led, 360 - ledPos2, 90));
 8001fa6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001faa:	b29c      	uxth	r4, r3
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <main+0x70c>)
 8001fae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fb2:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8001fb6:	2364      	movs	r3, #100	; 0x64
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	235a      	movs	r3, #90	; 0x5a
 8001fc0:	4840      	ldr	r0, [pc, #256]	; (80020c4 <main+0x704>)
 8001fc2:	f7ff faed 	bl	80015a0 <_ZN4CALC14similarityRiseEhsttt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <main+0x70c>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8001fde:	235a      	movs	r3, #90	; 0x5a
 8001fe0:	4838      	ldr	r0, [pc, #224]	; (80020c4 <main+0x704>)
 8001fe2:	f7ff fbe9 	bl	80017b8 <_ZN4CALC16similarityNormalEhst>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	23ff      	movs	r3, #255	; 0xff
 8001fec:	462a      	mov	r2, r5
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4837      	ldr	r0, [pc, #220]	; (80020d0 <main+0x710>)
 8001ff2:	f000 ff23 	bl	8002e3c <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8001ff6:	4836      	ldr	r0, [pc, #216]	; (80020d0 <main+0x710>)
 8001ff8:	f000 ffea 	bl	8002fd0 <_ZN7WS2812C4showEv>
      for (uint8_t led = 32; led < 48; led++)
 8001ffc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8002000:	3301      	adds	r3, #1
 8002002:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8002006:	e7ca      	b.n	8001f9e <main+0x5de>
      }
    }
    else
    {
      servo0.moveCont(1000, 0, servoPos0);
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <main+0x6ec>)
 800200a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002014:	4826      	ldr	r0, [pc, #152]	; (80020b0 <main+0x6f0>)
 8002016:	f7ff f957 	bl	80012c8 <_ZN3STS8moveContEtss>
      servo2.moveCont(1000, 0, servoPos2);
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <main+0x6f4>)
 800201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002026:	4824      	ldr	r0, [pc, #144]	; (80020b8 <main+0x6f8>)
 8002028:	f7ff f94e 	bl	80012c8 <_ZN3STS8moveContEtss>
      sendData(0, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2000      	movs	r0, #0
 8002032:	f000 fbeb 	bl	800280c <_Z8sendDataths>
      for (uint8_t led = 0; led < 16; led++)
 8002036:	2300      	movs	r3, #0
 8002038:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800203c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d812      	bhi.n	800206a <main+0x6aa>
      {
        NeopixelTape.set_hsv(led, 0, 0, 0);
 8002044:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002048:	b299      	uxth	r1, r3
 800204a:	2300      	movs	r3, #0
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2200      	movs	r2, #0
 8002052:	481f      	ldr	r0, [pc, #124]	; (80020d0 <main+0x710>)
 8002054:	f000 fef2 	bl	8002e3c <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 8002058:	481d      	ldr	r0, [pc, #116]	; (80020d0 <main+0x710>)
 800205a:	f000 ffb9 	bl	8002fd0 <_ZN7WS2812C4showEv>
      for (uint8_t led = 0; led < 16; led++)
 800205e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002062:	3301      	adds	r3, #1
 8002064:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002068:	e7e8      	b.n	800203c <main+0x67c>
      }
      for (uint8_t led = 32; led < 48; led++)
 800206a:	2320      	movs	r3, #32
 800206c:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8002070:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002074:	2b2f      	cmp	r3, #47	; 0x2f
 8002076:	d812      	bhi.n	800209e <main+0x6de>
      {
        NeopixelTape.set_hsv(led, 0, 0, 0);
 8002078:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800207c:	b299      	uxth	r1, r3
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	2200      	movs	r2, #0
 8002086:	4812      	ldr	r0, [pc, #72]	; (80020d0 <main+0x710>)
 8002088:	f000 fed8 	bl	8002e3c <_ZN7WS2812C7set_hsvEtsss>
        NeopixelTape.show();
 800208c:	4810      	ldr	r0, [pc, #64]	; (80020d0 <main+0x710>)
 800208e:	f000 ff9f 	bl	8002fd0 <_ZN7WS2812C4showEv>
      for (uint8_t led = 32; led < 48; led++)
 8002092:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002096:	3301      	adds	r3, #1
 8002098:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800209c:	e7e8      	b.n	8002070 <main+0x6b0>
      }
    }

    m++;
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <main+0x714>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <main+0x714>)
 80020a6:	6013      	str	r3, [r2, #0]





  }
 80020a8:	e512      	b.n	8001ad0 <main+0x110>
 80020aa:	bf00      	nop
 80020ac:	20001938 	.word	0x20001938
 80020b0:	20001908 	.word	0x20001908
 80020b4:	2000193c 	.word	0x2000193c
 80020b8:	20001920 	.word	0x20001920
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200019c6 	.word	0x200019c6
 80020c4:	20001904 	.word	0x20001904
 80020c8:	200019d0 	.word	0x200019d0
 80020cc:	200019c2 	.word	0x200019c2
 80020d0:	2000027c 	.word	0x2000027c
 80020d4:	200019cc 	.word	0x200019cc

080020d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b094      	sub	sp, #80	; 0x50
 80020dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	2234      	movs	r2, #52	; 0x34
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f006 ffe6 	bl	80090b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <_Z18SystemClock_Configv+0xe4>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <_Z18SystemClock_Configv+0xe4>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <_Z18SystemClock_Configv+0xe4>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002118:	2300      	movs	r3, #0
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <_Z18SystemClock_Configv+0xe8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002124:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <_Z18SystemClock_Configv+0xe8>)
 8002126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <_Z18SystemClock_Configv+0xe8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800213c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002140:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002142:	2302      	movs	r3, #2
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002146:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800214c:	2310      	movs	r3, #16
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8002154:	2306      	movs	r3, #6
 8002156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002158:	2302      	movs	r3, #2
 800215a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800215c:	2302      	movs	r3, #2
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fb15 	bl	8005794 <HAL_RCC_OscConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800217a:	f000 fba3 	bl	80028c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800217e:	230f      	movs	r3, #15
 8002180:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002182:	2302      	movs	r3, #2
 8002184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f002 ffb3 	bl	8005104 <HAL_RCC_ClockConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80021ae:	f000 fb89 	bl	80028c4 <Error_Handler>
  }
}
 80021b2:	bf00      	nop
 80021b4:	3750      	adds	r7, #80	; 0x50
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000

080021c4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <_ZL12MX_I2C1_Initv+0x60>)
 80021cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <_ZL12MX_I2C1_Initv+0x64>)
 80021d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002200:	4807      	ldr	r0, [pc, #28]	; (8002220 <_ZL12MX_I2C1_Initv+0x5c>)
 8002202:	f001 febb 	bl	8003f7c <HAL_I2C_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002216:	f000 fb55 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000098 	.word	0x20000098
 8002224:	40005400 	.word	0x40005400
 8002228:	000186a0 	.word	0x000186a0

0800222c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	f107 0320 	add.w	r3, r7, #32
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
 8002258:	615a      	str	r2, [r3, #20]
 800225a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 800225e:	4a39      	ldr	r2, [pc, #228]	; (8002344 <_ZL12MX_TIM3_Initv+0x118>)
 8002260:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 8002264:	2200      	movs	r2, #0
 8002266:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 8002270:	2227      	movs	r2, #39	; 0x27
 8002272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002280:	482f      	ldr	r0, [pc, #188]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 8002282:	f003 fd25 	bl	8005cd0 <HAL_TIM_Base_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8002296:	f000 fb15 	bl	80028c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4826      	ldr	r0, [pc, #152]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 80022a8:	f004 f844 	bl	8006334 <HAL_TIM_ConfigClockSource>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 80022bc:	f000 fb02 	bl	80028c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022c0:	481f      	ldr	r0, [pc, #124]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 80022c2:	f003 fd54 	bl	8005d6e <HAL_TIM_PWM_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80022d6:	f000 faf5 	bl	80028c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	4619      	mov	r1, r3
 80022e8:	4815      	ldr	r0, [pc, #84]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 80022ea:	f004 fcdf 	bl	8006cac <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 80022fe:	f000 fae1 	bl	80028c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002302:	2360      	movs	r3, #96	; 0x60
 8002304:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2200      	movs	r2, #0
 8002316:	4619      	mov	r1, r3
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 800231a:	f003 ff49 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800232e:	f000 fac9 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <_ZL12MX_TIM3_Initv+0x114>)
 8002334:	f000 fbdc 	bl	8002af0 <HAL_TIM_MspPostInit>

}
 8002338:	bf00      	nop
 800233a:	3738      	adds	r7, #56	; 0x38
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	200000ec 	.word	0x200000ec
 8002344:	40000400 	.word	0x40000400

08002348 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002356:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 800236c:	220c      	movs	r2, #12
 800236e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800237c:	4807      	ldr	r0, [pc, #28]	; (800239c <_ZL19MX_USART2_UART_Initv+0x54>)
 800237e:	f004 fd11 	bl	8006da4 <HAL_UART_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 8002392:	f000 fa97 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000194 	.word	0x20000194
 80023a0:	40004400 	.word	0x40004400
 80023a4:	000f4240 	.word	0x000f4240

080023a8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_ZL19MX_USART3_UART_Initv+0x58>)
 80023b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023ce:	220c      	movs	r2, #12
 80023d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023de:	4807      	ldr	r0, [pc, #28]	; (80023fc <_ZL19MX_USART3_UART_Initv+0x54>)
 80023e0:	f004 fce0 	bl	8006da4 <HAL_UART_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80023f4:	f000 fa66 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200001d8 	.word	0x200001d8
 8002400:	40004800 	.word	0x40004800

08002404 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_ZL11MX_DMA_Initv+0x4c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <_ZL11MX_DMA_Initv+0x4c>)
 8002414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <_ZL11MX_DMA_Initv+0x4c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	200f      	movs	r0, #15
 800242c:	f001 f839 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002430:	200f      	movs	r0, #15
 8002432:	f001 f852 	bl	80034da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2010      	movs	r0, #16
 800243c:	f001 f831 	bl	80034a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002440:	2010      	movs	r0, #16
 8002442:	f001 f84a 	bl	80034da <HAL_NVIC_EnableIRQ>

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b40      	ldr	r3, [pc, #256]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a3f      	ldr	r2, [pc, #252]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 8002474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a38      	ldr	r2, [pc, #224]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a31      	ldr	r2, [pc, #196]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <_ZL12MX_GPIO_Initv+0x11c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servosw_GPIO_Port, servosw_Pin, GPIO_PIN_RESET);
 80024da:	2200      	movs	r2, #0
 80024dc:	2102      	movs	r1, #2
 80024de:	4825      	ldr	r0, [pc, #148]	; (8002574 <_ZL12MX_GPIO_Initv+0x120>)
 80024e0:	f001 fd32 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : measure_Pin */
  GPIO_InitStruct.Pin = measure_Pin;
 80024e4:	2301      	movs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e8:	2303      	movs	r3, #3
 80024ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(measure_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	481f      	ldr	r0, [pc, #124]	; (8002574 <_ZL12MX_GPIO_Initv+0x120>)
 80024f8:	f001 fb7a 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : servosw_Pin */
  GPIO_InitStruct.Pin = servosw_Pin;
 80024fc:	2302      	movs	r3, #2
 80024fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(servosw_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	4818      	ldr	r0, [pc, #96]	; (8002574 <_ZL12MX_GPIO_Initv+0x120>)
 8002514:	f001 fb6c 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : slidesw1_Pin slidesw2_Pin */
  GPIO_InitStruct.Pin = slidesw1_Pin|slidesw2_Pin;
 8002518:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800251c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	4619      	mov	r1, r3
 800252c:	4812      	ldr	r0, [pc, #72]	; (8002578 <_ZL12MX_GPIO_Initv+0x124>)
 800252e:	f001 fb5f 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : dipsw3_Pin dipsw2_Pin dipsw1_Pin */
  GPIO_InitStruct.Pin = dipsw3_Pin|dipsw2_Pin|dipsw1_Pin;
 8002532:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	4619      	mov	r1, r3
 8002546:	480b      	ldr	r0, [pc, #44]	; (8002574 <_ZL12MX_GPIO_Initv+0x120>)
 8002548:	f001 fb52 	bl	8003bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : dipsw4_Pin dipsw5_Pin */
  GPIO_InitStruct.Pin = dipsw4_Pin|dipsw5_Pin;
 800254c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	4806      	ldr	r0, [pc, #24]	; (800257c <_ZL12MX_GPIO_Initv+0x128>)
 8002562:	f001 fb45 	bl	8003bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002566:	bf00      	nop
 8002568:	3728      	adds	r7, #40	; 0x28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800

08002580 <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t servoID)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  static int16_t inst_pos0 = 0;
  static int16_t inst_pos1 = 0;
  static int16_t inst_pos2 = 0;
  static int16_t inst_pos3 = 0;
  static uint8_t index = 0;
  uint8_t checksum = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t read[15] = {0};
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	f107 0318 	add.w	r3, r7, #24
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	f8c3 2007 	str.w	r2, [r3, #7]
  uint8_t position[6] = {0};
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	823b      	strh	r3, [r7, #16]

  switch (servoID)
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d81b      	bhi.n	80025e8 <_Z12get_positionh+0x68>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <_Z12get_positionh+0x38>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025d1 	.word	0x080025d1
 80025c0:	080025d9 	.word	0x080025d9
 80025c4:	080025e1 	.word	0x080025e1
  {
  case 0:
    servo0.send();
 80025c8:	4881      	ldr	r0, [pc, #516]	; (80027d0 <_Z12get_positionh+0x250>)
 80025ca:	f7fe ff3b 	bl	8001444 <_ZN3STS4sendEv>
    break;
 80025ce:	e00c      	b.n	80025ea <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 80025d0:	4880      	ldr	r0, [pc, #512]	; (80027d4 <_Z12get_positionh+0x254>)
 80025d2:	f7fe ff37 	bl	8001444 <_ZN3STS4sendEv>
    break;
 80025d6:	e008      	b.n	80025ea <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 80025d8:	487f      	ldr	r0, [pc, #508]	; (80027d8 <_Z12get_positionh+0x258>)
 80025da:	f7fe ff33 	bl	8001444 <_ZN3STS4sendEv>
    break;
 80025de:	e004      	b.n	80025ea <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 80025e0:	487e      	ldr	r0, [pc, #504]	; (80027dc <_Z12get_positionh+0x25c>)
 80025e2:	f7fe ff2f 	bl	8001444 <_ZN3STS4sendEv>
    break;
 80025e6:	e000      	b.n	80025ea <_Z12get_positionh+0x6a>
  default:
    break;
 80025e8:	bf00      	nop
  }

  HAL_Delay(1);
 80025ea:	2001      	movs	r0, #1
 80025ec:	f000 fe5a 	bl	80032a4 <HAL_Delay>

  index = huart2.hdmarx->Instance->NDTR;
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <_Z12get_positionh+0x260>)
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b7a      	ldr	r3, [pc, #488]	; (80027e4 <_Z12get_positionh+0x264>)
 80025fc:	701a      	strb	r2, [r3, #0]
  index = sizeof(rxBuf) - index;
 80025fe:	4b79      	ldr	r3, [pc, #484]	; (80027e4 <_Z12get_positionh+0x264>)
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b76      	ldr	r3, [pc, #472]	; (80027e4 <_Z12get_positionh+0x264>)
 800260c:	701a      	strb	r2, [r3, #0]

  if (index >= 15)
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <_Z12get_positionh+0x264>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b0e      	cmp	r3, #14
 8002614:	d919      	bls.n	800264a <_Z12get_positionh+0xca>
  {
    for (int i = 0; i < 15; i++)
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	2b0e      	cmp	r3, #14
 800261e:	dc14      	bgt.n	800264a <_Z12get_positionh+0xca>
    {
      read[i] = rxBuf[index - 14 + i];
 8002620:	4b70      	ldr	r3, [pc, #448]	; (80027e4 <_Z12get_positionh+0x264>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f1a3 020e 	sub.w	r2, r3, #14
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	4413      	add	r3, r2
 800262c:	4a6e      	ldr	r2, [pc, #440]	; (80027e8 <_Z12get_positionh+0x268>)
 800262e:	5cd1      	ldrb	r1, [r2, r3]
 8002630:	f107 0214 	add.w	r2, r7, #20
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002636:	4413      	add	r3, r2
 8002638:	460a      	mov	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 800263c:	2001      	movs	r0, #1
 800263e:	f000 fe31 	bl	80032a4 <HAL_Delay>
    for (int i = 0; i < 15; i++)
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	3301      	adds	r3, #1
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
 8002648:	e7e7      	b.n	800261a <_Z12get_positionh+0x9a>
    }
  }

  for (int i = 0; i < 8; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2b07      	cmp	r3, #7
 8002652:	dc29      	bgt.n	80026a8 <_Z12get_positionh+0x128>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 8002654:	f107 0214 	add.w	r2, r7, #20
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d11e      	bne.n	80026a0 <_Z12get_positionh+0x120>
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	3301      	adds	r3, #1
 8002666:	3338      	adds	r3, #56	; 0x38
 8002668:	443b      	add	r3, r7
 800266a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d116      	bne.n	80026a0 <_Z12get_positionh+0x120>
    {
      for (int j = 0; j < 6; j++)
 8002672:	2300      	movs	r3, #0
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	2b05      	cmp	r3, #5
 800267a:	dc11      	bgt.n	80026a0 <_Z12get_positionh+0x120>
      {
        position[j] = read[i + j + 2];
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	4413      	add	r3, r2
 8002682:	3302      	adds	r3, #2
 8002684:	3338      	adds	r3, #56	; 0x38
 8002686:	443b      	add	r3, r7
 8002688:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800268c:	f107 020c 	add.w	r2, r7, #12
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	4413      	add	r3, r2
 8002694:	460a      	mov	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	3301      	adds	r3, #1
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
 800269e:	e7ea      	b.n	8002676 <_Z12get_positionh+0xf6>
  for (int i = 0; i < 8; i++)
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	3301      	adds	r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a6:	e7d2      	b.n	800264e <_Z12get_positionh+0xce>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	dc0d      	bgt.n	80026ce <_Z12get_positionh+0x14e>
  {
    checksum += position[i];
 80026b2:	f107 020c 	add.w	r2, r7, #12
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	4413      	add	r3, r2
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026c0:	4413      	add	r3, r2
 80026c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3301      	adds	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	e7ee      	b.n	80026ac <_Z12get_positionh+0x12c>
  }
  checksum = ~checksum;
 80026ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d2:	43db      	mvns	r3, r3
 80026d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 80026d8:	7c7b      	ldrb	r3, [r7, #17]
 80026da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80026de:	429a      	cmp	r2, r3
 80026e0:	d118      	bne.n	8002714 <_Z12get_positionh+0x194>
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d115      	bne.n	8002714 <_Z12get_positionh+0x194>
  {
    inst_pos0 = position[3] + position[4] * 256;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	7c3b      	ldrb	r3, [r7, #16]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <_Z12get_positionh+0x26c>)
 80026fc:	801a      	strh	r2, [r3, #0]
    servoPos0 = servo0.calculate_position(inst_pos0);
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <_Z12get_positionh+0x26c>)
 8002700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002704:	4619      	mov	r1, r3
 8002706:	4832      	ldr	r0, [pc, #200]	; (80027d0 <_Z12get_positionh+0x250>)
 8002708:	f7fe fed8 	bl	80014bc <_ZN3STS18calculate_positionEs>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <_Z12get_positionh+0x270>)
 8002712:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 8002714:	7c7b      	ldrb	r3, [r7, #17]
 8002716:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800271a:	429a      	cmp	r2, r3
 800271c:	d118      	bne.n	8002750 <_Z12get_positionh+0x1d0>
 800271e:	7b3b      	ldrb	r3, [r7, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d115      	bne.n	8002750 <_Z12get_positionh+0x1d0>
  {
    inst_pos1 = position[3] + position[4] * 256;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b29a      	uxth	r2, r3
 8002728:	7c3b      	ldrb	r3, [r7, #16]
 800272a:	b29b      	uxth	r3, r3
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	4413      	add	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	b21a      	sxth	r2, r3
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <_Z12get_positionh+0x274>)
 8002738:	801a      	strh	r2, [r3, #0]
    servoPos1 = servo1.calculate_position(inst_pos1);
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <_Z12get_positionh+0x274>)
 800273c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002740:	4619      	mov	r1, r3
 8002742:	4824      	ldr	r0, [pc, #144]	; (80027d4 <_Z12get_positionh+0x254>)
 8002744:	f7fe feba 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <_Z12get_positionh+0x278>)
 800274e:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 8002750:	7c7b      	ldrb	r3, [r7, #17]
 8002752:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002756:	429a      	cmp	r2, r3
 8002758:	d118      	bne.n	800278c <_Z12get_positionh+0x20c>
 800275a:	7b3b      	ldrb	r3, [r7, #12]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d115      	bne.n	800278c <_Z12get_positionh+0x20c>
  {
    inst_pos2 = position[3] + position[4] * 256;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	b29a      	uxth	r2, r3
 8002764:	7c3b      	ldrb	r3, [r7, #16]
 8002766:	b29b      	uxth	r3, r3
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	b29b      	uxth	r3, r3
 800276c:	4413      	add	r3, r2
 800276e:	b29b      	uxth	r3, r3
 8002770:	b21a      	sxth	r2, r3
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <_Z12get_positionh+0x27c>)
 8002774:	801a      	strh	r2, [r3, #0]
    servoPos2 = servo2.calculate_position(inst_pos2);
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <_Z12get_positionh+0x27c>)
 8002778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277c:	4619      	mov	r1, r3
 800277e:	4816      	ldr	r0, [pc, #88]	; (80027d8 <_Z12get_positionh+0x258>)
 8002780:	f7fe fe9c 	bl	80014bc <_ZN3STS18calculate_positionEs>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <_Z12get_positionh+0x280>)
 800278a:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 800278c:	7c7b      	ldrb	r3, [r7, #17]
 800278e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002792:	429a      	cmp	r2, r3
 8002794:	d118      	bne.n	80027c8 <_Z12get_positionh+0x248>
 8002796:	7b3b      	ldrb	r3, [r7, #12]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d115      	bne.n	80027c8 <_Z12get_positionh+0x248>
  {
    inst_pos3 = position[3] + position[4] * 256;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	7c3b      	ldrb	r3, [r7, #16]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_Z12get_positionh+0x284>)
 80027b0:	801a      	strh	r2, [r3, #0]
    servoPos3 = servo3.calculate_position(inst_pos3);
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <_Z12get_positionh+0x284>)
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4808      	ldr	r0, [pc, #32]	; (80027dc <_Z12get_positionh+0x25c>)
 80027bc:	f7fe fe7e 	bl	80014bc <_ZN3STS18calculate_positionEs>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <_Z12get_positionh+0x288>)
 80027c6:	801a      	strh	r2, [r3, #0]
  }
}
 80027c8:	bf00      	nop
 80027ca:	3738      	adds	r7, #56	; 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20001908 	.word	0x20001908
 80027d4:	20001914 	.word	0x20001914
 80027d8:	20001920 	.word	0x20001920
 80027dc:	2000192c 	.word	0x2000192c
 80027e0:	20000194 	.word	0x20000194
 80027e4:	200019da 	.word	0x200019da
 80027e8:	20001940 	.word	0x20001940
 80027ec:	200019d2 	.word	0x200019d2
 80027f0:	20001938 	.word	0x20001938
 80027f4:	200019d4 	.word	0x200019d4
 80027f8:	2000193a 	.word	0x2000193a
 80027fc:	200019d6 	.word	0x200019d6
 8002800:	2000193c 	.word	0x2000193c
 8002804:	200019d8 	.word	0x200019d8
 8002808:	2000193e 	.word	0x2000193e

0800280c <_Z8sendDataths>:

void sendData(uint16_t angle, uint8_t speed, int16_t rotation)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
 8002816:	460b      	mov	r3, r1
 8002818:	717b      	strb	r3, [r7, #5]
 800281a:	4613      	mov	r3, r2
 800281c:	807b      	strh	r3, [r7, #2]
  uint8_t checksum = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]

  rotation += 360;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002828:	b29b      	uxth	r3, r3
 800282a:	807b      	strh	r3, [r7, #2]

  sendArray[2] = angle / 256;
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29b      	uxth	r3, r3
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <_Z8sendDataths+0xb0>)
 8002836:	709a      	strb	r2, [r3, #2]
  sendArray[3] = angle % 256;
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <_Z8sendDataths+0xb0>)
 800283e:	70da      	strb	r2, [r3, #3]
  sendArray[4] = speed;
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <_Z8sendDataths+0xb0>)
 8002842:	797b      	ldrb	r3, [r7, #5]
 8002844:	7113      	strb	r3, [r2, #4]
  sendArray[5] = rotation / 256;
 8002846:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800284a:	2b00      	cmp	r3, #0
 800284c:	da00      	bge.n	8002850 <_Z8sendDataths+0x44>
 800284e:	33ff      	adds	r3, #255	; 0xff
 8002850:	121b      	asrs	r3, r3, #8
 8002852:	b21b      	sxth	r3, r3
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <_Z8sendDataths+0xb0>)
 8002858:	715a      	strb	r2, [r3, #5]
  sendArray[6] = rotation % 256;
 800285a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800285e:	425a      	negs	r2, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	bf58      	it	pl
 8002866:	4253      	negpl	r3, r2
 8002868:	b21b      	sxth	r3, r3
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <_Z8sendDataths+0xb0>)
 800286e:	719a      	strb	r2, [r3, #6]

  for (uint8_t i = 2; i < 7; i++)
 8002870:	2302      	movs	r3, #2
 8002872:	73bb      	strb	r3, [r7, #14]
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d809      	bhi.n	800288e <_Z8sendDataths+0x82>
  {
    checksum += sendArray[i];
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <_Z8sendDataths+0xb0>)
 800287e:	5cd2      	ldrb	r2, [r2, r3]
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	4413      	add	r3, r2
 8002884:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 2; i < 7; i++)
 8002886:	7bbb      	ldrb	r3, [r7, #14]
 8002888:	3301      	adds	r3, #1
 800288a:	73bb      	strb	r3, [r7, #14]
 800288c:	e7f2      	b.n	8002874 <_Z8sendDataths+0x68>
  }
  checksum = ~checksum;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	43db      	mvns	r3, r3
 8002892:	73fb      	strb	r3, [r7, #15]
  checksum += 10;
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	330a      	adds	r3, #10
 8002898:	73fb      	strb	r3, [r7, #15]
  sendArray[7] = checksum;
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <_Z8sendDataths+0xb0>)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	71d3      	strb	r3, [r2, #7]
  HAL_UART_Transmit(&huart3, sendArray, 8, 100);
 80028a0:	2364      	movs	r3, #100	; 0x64
 80028a2:	2208      	movs	r2, #8
 80028a4:	4905      	ldr	r1, [pc, #20]	; (80028bc <_Z8sendDataths+0xb0>)
 80028a6:	4806      	ldr	r0, [pc, #24]	; (80028c0 <_Z8sendDataths+0xb4>)
 80028a8:	f004 fac9 	bl	8006e3e <HAL_UART_Transmit>
  HAL_Delay(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f000 fcf9 	bl	80032a4 <HAL_Delay>
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000000 	.word	0x20000000
 80028c0:	200001d8 	.word	0x200001d8

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028cc:	e7fe      	b.n	80028cc <Error_Handler+0x8>
	...

080028d0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d11e      	bne.n	800291e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d119      	bne.n	800291e <_Z41__static_initialization_and_destruction_0ii+0x4e>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	490f      	ldr	r1, [pc, #60]	; (800292c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80028f0:	480f      	ldr	r0, [pc, #60]	; (8002930 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80028f2:	f000 fa59 	bl	8002da8 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
STS servo0(&huart2, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80028fa:	480f      	ldr	r0, [pc, #60]	; (8002938 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80028fc:	f7fe fcc6 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8002900:	2201      	movs	r2, #1
 8002902:	490c      	ldr	r1, [pc, #48]	; (8002934 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002906:	f7fe fcc1 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 800290a:	2202      	movs	r2, #2
 800290c:	4909      	ldr	r1, [pc, #36]	; (8002934 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800290e:	480c      	ldr	r0, [pc, #48]	; (8002940 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002910:	f7fe fcbc 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 8002914:	2203      	movs	r2, #3
 8002916:	4907      	ldr	r1, [pc, #28]	; (8002934 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002918:	480a      	ldr	r0, [pc, #40]	; (8002944 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800291a:	f7fe fcb7 	bl	800128c <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000134 	.word	0x20000134
 800292c:	200000ec 	.word	0x200000ec
 8002930:	2000027c 	.word	0x2000027c
 8002934:	20000194 	.word	0x20000194
 8002938:	20001908 	.word	0x20001908
 800293c:	20001914 	.word	0x20001914
 8002940:	20001920 	.word	0x20001920
 8002944:	2000192c 	.word	0x2000192c

08002948 <_GLOBAL__sub_I_hi2c1>:
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
 800294c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002950:	2001      	movs	r0, #1
 8002952:	f7ff ffbd 	bl	80028d0 <_Z41__static_initialization_and_destruction_0ii>
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_MspInit+0x4c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_MspInit+0x4c>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_MspInit+0x4c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_MspInit+0x4c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_MspInit+0x4c>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800

080029a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_I2C_MspInit+0x84>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12c      	bne.n	8002a24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80029e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ec:	2312      	movs	r3, #18
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029f8:	2304      	movs	r3, #4
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	480c      	ldr	r0, [pc, #48]	; (8002a34 <HAL_I2C_MspInit+0x8c>)
 8002a04:	f001 f8f4 	bl	8003bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 8002a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_I2C_MspInit+0x88>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	; 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40005400 	.word	0x40005400
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020400 	.word	0x40020400

08002a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <HAL_TIM_Base_MspInit+0xa8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d145      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_TIM_Base_MspInit+0xac>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_TIM_Base_MspInit+0xac>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_TIM_Base_MspInit+0xac>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_TIM_Base_MspInit+0xb4>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a6e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a72:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a76:	2240      	movs	r2, #64	; 0x40
 8002a78:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a86:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a9e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002aa2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002aae:	480e      	ldr	r0, [pc, #56]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ab0:	f000 fd2e 	bl	8003510 <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8002aba:	f7ff ff03 	bl	80028c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac4:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb0>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	20000134 	.word	0x20000134
 8002aec:	40026070 	.word	0x40026070

08002af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <HAL_TIM_MspPostInit+0x68>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d11d      	bne.n	8002b4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_TIM_MspPostInit+0x6c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_TIM_MspPostInit+0x6c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_TIM_MspPostInit+0x6c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b2e:	2340      	movs	r3, #64	; 0x40
 8002b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	; (8002b60 <HAL_TIM_MspPostInit+0x70>)
 8002b4a:	f001 f851 	bl	8003bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a59      	ldr	r2, [pc, #356]	; (8002ce8 <HAL_UART_MspInit+0x184>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d15c      	bne.n	8002c40 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	4b58      	ldr	r3, [pc, #352]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a57      	ldr	r2, [pc, #348]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b55      	ldr	r3, [pc, #340]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b4e      	ldr	r3, [pc, #312]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bbe:	230c      	movs	r3, #12
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bce:	2307      	movs	r3, #7
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd2:	f107 031c 	add.w	r3, r7, #28
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4845      	ldr	r0, [pc, #276]	; (8002cf0 <HAL_UART_MspInit+0x18c>)
 8002bda:	f001 f809 	bl	8003bf0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002bde:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002be0:	4a45      	ldr	r2, [pc, #276]	; (8002cf8 <HAL_UART_MspInit+0x194>)
 8002be2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bec:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf2:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c14:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c1a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c22:	4834      	ldr	r0, [pc, #208]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c24:	f000 fc74 	bl	8003510 <HAL_DMA_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c2e:	f7ff fe49 	bl	80028c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
 8002c38:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <HAL_UART_MspInit+0x190>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c3e:	e04f      	b.n	8002ce0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_UART_MspInit+0x198>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d14a      	bne.n	8002ce0 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a26      	ldr	r2, [pc, #152]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_UART_MspInit+0x188>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cae:	2307      	movs	r3, #7
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4811      	ldr	r0, [pc, #68]	; (8002d00 <HAL_UART_MspInit+0x19c>)
 8002cba:	f000 ff99 	bl	8003bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd4:	f107 031c 	add.w	r3, r7, #28
 8002cd8:	4619      	mov	r1, r3
 8002cda:	480a      	ldr	r0, [pc, #40]	; (8002d04 <HAL_UART_MspInit+0x1a0>)
 8002cdc:	f000 ff88 	bl	8003bf0 <HAL_GPIO_Init>
}
 8002ce0:	bf00      	nop
 8002ce2:	3730      	adds	r7, #48	; 0x30
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40004400 	.word	0x40004400
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	2000021c 	.word	0x2000021c
 8002cf8:	40026088 	.word	0x40026088
 8002cfc:	40004800 	.word	0x40004800
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020400 	.word	0x40020400

08002d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <NMI_Handler+0x4>

08002d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d12:	e7fe      	b.n	8002d12 <HardFault_Handler+0x4>

08002d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <MemManage_Handler+0x4>

08002d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <BusFault_Handler+0x4>

08002d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <UsageFault_Handler+0x4>

08002d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d54:	f000 fa86 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <DMA1_Stream4_IRQHandler+0x10>)
 8002d62:	f000 fcdb 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000134 	.word	0x20000134

08002d70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <DMA1_Stream5_IRQHandler+0x10>)
 8002d76:	f000 fcd1 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000021c 	.word	0x2000021c

08002d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <SystemInit+0x20>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	4a05      	ldr	r2, [pc, #20]	; (8002da4 <SystemInit+0x20>)
 8002d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	609a      	str	r2, [r3, #8]
}
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	807b      	strh	r3, [r7, #2]
 8002dea:	460b      	mov	r3, r1
 8002dec:	707b      	strb	r3, [r7, #1]
 8002dee:	4613      	mov	r3, r2
 8002df0:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	2b2f      	cmp	r3, #47	; 0x2f
 8002df6:	d81a      	bhi.n	8002e2e <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 8002df8:	887a      	ldrh	r2, [r7, #2]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	440b      	add	r3, r1
 8002e04:	330c      	adds	r3, #12
 8002e06:	783a      	ldrb	r2, [r7, #0]
 8002e08:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	330d      	adds	r3, #13
 8002e18:	787a      	ldrb	r2, [r7, #1]
 8002e1a:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 8002e1c:	887a      	ldrh	r2, [r7, #2]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	330e      	adds	r3, #14
 8002e2a:	7c3a      	ldrb	r2, [r7, #16]
 8002e2c:	701a      	strb	r2, [r3, #0]
	}
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 8002e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 8002e5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002e64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002e68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e74:	e09c      	b.n	8002fb0 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 8002e76:	893b      	ldrh	r3, [r7, #8]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	0052      	lsls	r2, r2, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 8002e84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	da00      	bge.n	8002e8e <_ZN7WS2812C7set_hsvEtsss+0x52>
 8002e8c:	33ff      	adds	r3, #255	; 0xff
 8002e8e:	121b      	asrs	r3, r3, #8
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 8002e94:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e98:	425a      	negs	r2, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	bf58      	it	pl
 8002ea0:	4253      	negpl	r3, r2
 8002ea2:	b21b      	sxth	r3, r3
 8002ea4:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 8002ea6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002eaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002eae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	da00      	bge.n	8002ebc <_ZN7WS2812C7set_hsvEtsss+0x80>
 8002eba:	33ff      	adds	r3, #255	; 0xff
 8002ebc:	121b      	asrs	r3, r3, #8
 8002ebe:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 8002ec0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da00      	bge.n	8002ed4 <_ZN7WS2812C7set_hsvEtsss+0x98>
 8002ed2:	33ff      	adds	r3, #255	; 0xff
 8002ed4:	121b      	asrs	r3, r3, #8
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da00      	bge.n	8002ee6 <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8002ee4:	33ff      	adds	r3, #255	; 0xff
 8002ee6:	121b      	asrs	r3, r3, #8
 8002ee8:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 8002eea:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef2:	69f9      	ldr	r1, [r7, #28]
 8002ef4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da00      	bge.n	8002f02 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8002f00:	33ff      	adds	r3, #255	; 0xff
 8002f02:	121b      	asrs	r3, r3, #8
 8002f04:	425b      	negs	r3, r3
 8002f06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da00      	bge.n	8002f14 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8002f12:	33ff      	adds	r3, #255	; 0xff
 8002f14:	121b      	asrs	r3, r3, #8
 8002f16:	613b      	str	r3, [r7, #16]

		switch (i) {
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d83e      	bhi.n	8002f9c <_ZN7WS2812C7set_hsvEtsss+0x160>
 8002f1e:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f39 	.word	0x08002f39
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08002f75 	.word	0x08002f75
 8002f34:	08002f89 	.word	0x08002f89
			case 0: r = v; g = t; b = p; break;
 8002f38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f4a:	e031      	b.n	8002fb0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f5e:	e027      	b.n	8002fb0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f72:	e01d      	b.n	8002fb0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f86:	e013      	b.n	8002fb0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f94:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f9a:	e009      	b.n	8002fb0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 8002f9c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002fae:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 8002fb0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002fb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff ff08 	bl	8002dd8 <_ZN7WS2812C7set_rgbEthhh>
}
 8002fc8:	bf00      	nop
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffe:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8003002:	2b01      	cmp	r3, #1
 8003004:	d179      	bne.n	80030fa <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2bf9      	cmp	r3, #249	; 0xf9
 800300e:	dc0a      	bgt.n	8003026 <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3326      	adds	r3, #38	; 0x26
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3301      	adds	r3, #1
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	e7f1      	b.n	800300a <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b2f      	cmp	r3, #47	; 0x2f
 800302e:	dc52      	bgt.n	80030d6 <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b02      	cmp	r3, #2
 8003038:	dc49      	bgt.n	80030ce <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 800303a:	2307      	movs	r3, #7
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db40      	blt.n	80030c6 <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	18ca      	adds	r2, r1, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4413      	add	r3, r2
 8003054:	330c      	adds	r3, #12
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	fa42 f303 	asr.w	r3, r2, r3
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d114      	bne.n	8003096 <_ZN7WS2812C7executeEv+0xa6>
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	441a      	add	r2, r3
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	4413      	add	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	3326      	adds	r3, #38	; 0x26
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	2214      	movs	r2, #20
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	e013      	b.n	80030be <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	441a      	add	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f1c3 0307 	rsb	r3, r3, #7
 80030b0:	4413      	add	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	3326      	adds	r3, #38	; 0x26
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	220a      	movs	r2, #10
 80030bc:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e7bb      	b.n	800303e <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e7b2      	b.n	8003034 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	3301      	adds	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e7a9      	b.n	800302a <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6858      	ldr	r0, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80030e6:	f240 537a 	movw	r3, #1402	; 0x57a
 80030ea:	f002 fe99 	bl	8005e20 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2bf9      	cmp	r3, #249	; 0xf9
 8003112:	dc0a      	bgt.n	800312a <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3326      	adds	r3, #38	; 0x26
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3301      	adds	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e7f1      	b.n	800310e <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 800312a:	23fa      	movs	r3, #250	; 0xfa
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003134:	da0a      	bge.n	800314c <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3326      	adds	r3, #38	; 0x26
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	220a      	movs	r2, #10
 8003142:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	e7f0      	b.n	800312e <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6858      	ldr	r0, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800315c:	f240 537a 	movw	r3, #1402	; 0x57a
 8003160:	f002 fe5e 	bl	8005e20 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800316c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003172:	490e      	ldr	r1, [pc, #56]	; (80031ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003178:	e002      	b.n	8003180 <LoopCopyDataInit>

0800317a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800317c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317e:	3304      	adds	r3, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003184:	d3f9      	bcc.n	800317a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003188:	4c0b      	ldr	r4, [pc, #44]	; (80031b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800318c:	e001      	b.n	8003192 <LoopFillZerobss>

0800318e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003190:	3204      	adds	r2, #4

08003192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003194:	d3fb      	bcc.n	800318e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003196:	f7ff fdf5 	bl	8002d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319a:	f005 ff5b 	bl	8009054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800319e:	f7fe fc0f 	bl	80019c0 <main>
  bx  lr    
 80031a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80031b0:	0800955c 	.word	0x0800955c
  ldr r2, =_sbss
 80031b4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80031b8:	200019e0 	.word	0x200019e0

080031bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_Init+0x40>)
 80031ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_Init+0x40>)
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_Init+0x40>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f000 f94f 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ee:	200f      	movs	r0, #15
 80031f0:	f000 f808 	bl	8003204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f4:	f7ff fbb0 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00

08003204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x54>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x58>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321a:	fbb3 f3f1 	udiv	r3, r3, r1
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f967 	bl	80034f6 <HAL_SYSTICK_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00e      	b.n	8003250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d80a      	bhi.n	800324e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003238:	2200      	movs	r2, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f000 f92f 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_InitTick+0x5c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000000c 	.word	0x2000000c
 800325c:	20000014 	.word	0x20000014
 8003260:	20000010 	.word	0x20000010

08003264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x20>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x24>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_IncTick+0x24>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000014 	.word	0x20000014
 8003288:	200019dc 	.word	0x200019dc

0800328c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return uwTick;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_GetTick+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	200019dc 	.word	0x200019dc

080032a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff ffee 	bl	800328c <HAL_GetTick>
 80032b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d005      	beq.n	80032ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_Delay+0x44>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ca:	bf00      	nop
 80032cc:	f7ff ffde 	bl	800328c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d8f7      	bhi.n	80032cc <HAL_Delay+0x28>
  {
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000014 	.word	0x20000014

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800351c:	f7ff feb6 	bl	800328c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e099      	b.n	8003660 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	e00f      	b.n	800356e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354e:	f7ff fe9d 	bl	800328c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b05      	cmp	r3, #5
 800355a:	d908      	bls.n	800356e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2220      	movs	r2, #32
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2203      	movs	r2, #3
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e078      	b.n	8003660 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e8      	bne.n	800354e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4b38      	ldr	r3, [pc, #224]	; (8003668 <HAL_DMA_Init+0x158>)
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800359a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4313      	orrs	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d117      	bne.n	8003632 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa6f 	bl	8003af8 <DMA_CheckFifoParam>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2240      	movs	r2, #64	; 0x40
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800362e:	2301      	movs	r3, #1
 8003630:	e016      	b.n	8003660 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa26 	bl	8003a8c <DMA_CalcBaseAndBitshift>
 8003640:	4603      	mov	r3, r0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	223f      	movs	r2, #63	; 0x3f
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	f010803f 	.word	0xf010803f

0800366c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_DMA_Start_IT+0x26>
 800368e:	2302      	movs	r3, #2
 8003690:	e040      	b.n	8003714 <HAL_DMA_Start_IT+0xa8>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d12f      	bne.n	8003706 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f9b8 	bl	8003a30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	409a      	lsls	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0216 	orr.w	r2, r2, #22
 80036da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0208 	orr.w	r2, r2, #8
 80036f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e005      	b.n	8003712 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003728:	4b8e      	ldr	r3, [pc, #568]	; (8003964 <HAL_DMA_IRQHandler+0x248>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a8e      	ldr	r2, [pc, #568]	; (8003968 <HAL_DMA_IRQHandler+0x24c>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	2208      	movs	r2, #8
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01a      	beq.n	8003788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2208      	movs	r2, #8
 8003776:	409a      	lsls	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	2201      	movs	r2, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2201      	movs	r2, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2204      	movs	r2, #4
 80037c4:	409a      	lsls	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2204      	movs	r2, #4
 80037e2:	409a      	lsls	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2210      	movs	r2, #16
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d043      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03c      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	2210      	movs	r2, #16
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d024      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e01f      	b.n	800388c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e016      	b.n	800388c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0208 	bic.w	r2, r2, #8
 800387a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	2220      	movs	r2, #32
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 808f 	beq.w	80039bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8087 	beq.w	80039bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2220      	movs	r2, #32
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d136      	bne.n	8003934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0216 	bic.w	r2, r2, #22
 80038d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x1da>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0208 	bic.w	r2, r2, #8
 8003904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	223f      	movs	r2, #63	; 0x3f
 800390c:	409a      	lsls	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d07e      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
        }
        return;
 8003932:	e079      	b.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01d      	beq.n	800397e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	2b00      	cmp	r3, #0
 8003956:	d031      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e02c      	b.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
 8003968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d023      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
 800397c:	e01e      	b.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0210 	bic.w	r2, r2, #16
 800399a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d032      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d022      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2205      	movs	r2, #5
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d307      	bcc.n	8003a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f2      	bne.n	80039e8 <HAL_DMA_IRQHandler+0x2cc>
 8003a02:	e000      	b.n	8003a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
 8003a26:	e000      	b.n	8003a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a28:	bf00      	nop
    }
  }
}
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b40      	cmp	r3, #64	; 0x40
 8003a5c:	d108      	bne.n	8003a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a6e:	e007      	b.n	8003a80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	3b10      	subs	r3, #16
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d909      	bls.n	8003ace <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	1d1a      	adds	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	659a      	str	r2, [r3, #88]	; 0x58
 8003acc:	e007      	b.n	8003ade <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	aaaaaaab 	.word	0xaaaaaaab
 8003af4:	080090f8 	.word	0x080090f8

08003af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11f      	bne.n	8003b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d856      	bhi.n	8003bc6 <DMA_CheckFifoParam+0xce>
 8003b18:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <DMA_CheckFifoParam+0x28>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b43 	.word	0x08003b43
 8003b28:	08003b31 	.word	0x08003b31
 8003b2c:	08003bc7 	.word	0x08003bc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d046      	beq.n	8003bca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e043      	b.n	8003bca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b4a:	d140      	bne.n	8003bce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b50:	e03d      	b.n	8003bce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	d121      	bne.n	8003ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d837      	bhi.n	8003bd2 <DMA_CheckFifoParam+0xda>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <DMA_CheckFifoParam+0x70>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b7f 	.word	0x08003b7f
 8003b70:	08003b79 	.word	0x08003b79
 8003b74:	08003b91 	.word	0x08003b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	e030      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d025      	beq.n	8003bd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8e:	e022      	b.n	8003bd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b98:	d11f      	bne.n	8003bda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b9e:	e01c      	b.n	8003bda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d903      	bls.n	8003bae <DMA_CheckFifoParam+0xb6>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d003      	beq.n	8003bb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bac:	e018      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb2:	e015      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e00b      	b.n	8003bde <DMA_CheckFifoParam+0xe6>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e00a      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e008      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e006      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e004      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
    }
  } 
  
  return status; 
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	; 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	e165      	b.n	8003ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	f040 8154 	bne.w	8003ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d005      	beq.n	8003c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d130      	bne.n	8003ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c78:	2201      	movs	r2, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 0201 	and.w	r2, r3, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d017      	beq.n	8003ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d123      	bne.n	8003d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	08da      	lsrs	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3208      	adds	r2, #8
 8003cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	220f      	movs	r2, #15
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	08da      	lsrs	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3208      	adds	r2, #8
 8003d2e:	69b9      	ldr	r1, [r7, #24]
 8003d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0203 	and.w	r2, r3, #3
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80ae 	beq.w	8003ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	4a5c      	ldr	r2, [pc, #368]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d84:	6453      	str	r3, [r2, #68]	; 0x44
 8003d86:	4b5a      	ldr	r3, [pc, #360]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d92:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_GPIO_Init+0x304>)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	3302      	adds	r3, #2
 8003d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	220f      	movs	r2, #15
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_GPIO_Init+0x308>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d025      	beq.n	8003e0a <HAL_GPIO_Init+0x21a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4e      	ldr	r2, [pc, #312]	; (8003efc <HAL_GPIO_Init+0x30c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <HAL_GPIO_Init+0x216>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <HAL_GPIO_Init+0x310>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d019      	beq.n	8003e02 <HAL_GPIO_Init+0x212>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4c      	ldr	r2, [pc, #304]	; (8003f04 <HAL_GPIO_Init+0x314>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <HAL_GPIO_Init+0x20e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <HAL_GPIO_Init+0x318>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00d      	beq.n	8003dfa <HAL_GPIO_Init+0x20a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4a      	ldr	r2, [pc, #296]	; (8003f0c <HAL_GPIO_Init+0x31c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <HAL_GPIO_Init+0x206>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a49      	ldr	r2, [pc, #292]	; (8003f10 <HAL_GPIO_Init+0x320>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_GPIO_Init+0x202>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e00c      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003df2:	2307      	movs	r3, #7
 8003df4:	e00a      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1c:	4935      	ldr	r1, [pc, #212]	; (8003ef4 <HAL_GPIO_Init+0x304>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e4e:	4a31      	ldr	r2, [pc, #196]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e54:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e78:	4a26      	ldr	r2, [pc, #152]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e7e:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ecc:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <HAL_GPIO_Init+0x324>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f ae96 	bls.w	8003c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40021800 	.word	0x40021800
 8003f14:	40013c00 	.word	0x40013c00

08003f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e001      	b.n	8003f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
 8003f54:	4613      	mov	r3, r2
 8003f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f58:	787b      	ldrb	r3, [r7, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f64:	e003      	b.n	8003f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	041a      	lsls	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	619a      	str	r2, [r3, #24]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e12b      	b.n	80041e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe fd00 	bl	80029a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f001 f982 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a81      	ldr	r2, [pc, #516]	; (80041f0 <HAL_I2C_Init+0x274>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d807      	bhi.n	8004000 <HAL_I2C_Init+0x84>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a80      	ldr	r2, [pc, #512]	; (80041f4 <HAL_I2C_Init+0x278>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bf94      	ite	ls
 8003ff8:	2301      	movls	r3, #1
 8003ffa:	2300      	movhi	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	e006      	b.n	800400e <HAL_I2C_Init+0x92>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a7d      	ldr	r2, [pc, #500]	; (80041f8 <HAL_I2C_Init+0x27c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0e7      	b.n	80041e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a78      	ldr	r2, [pc, #480]	; (80041fc <HAL_I2C_Init+0x280>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0c9b      	lsrs	r3, r3, #18
 8004020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a6a      	ldr	r2, [pc, #424]	; (80041f0 <HAL_I2C_Init+0x274>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d802      	bhi.n	8004050 <HAL_I2C_Init+0xd4>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3301      	adds	r3, #1
 800404e:	e009      	b.n	8004064 <HAL_I2C_Init+0xe8>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	4a69      	ldr	r2, [pc, #420]	; (8004200 <HAL_I2C_Init+0x284>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	3301      	adds	r3, #1
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	430b      	orrs	r3, r1
 800406a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	495c      	ldr	r1, [pc, #368]	; (80041f0 <HAL_I2C_Init+0x274>)
 8004080:	428b      	cmp	r3, r1
 8004082:	d819      	bhi.n	80040b8 <HAL_I2C_Init+0x13c>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e59      	subs	r1, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004098:	400b      	ands	r3, r1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_I2C_Init+0x138>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1e59      	subs	r1, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	e051      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e04f      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d111      	bne.n	80040e4 <HAL_I2C_Init+0x168>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	440b      	add	r3, r1
 80040ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e012      	b.n	800410a <HAL_I2C_Init+0x18e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1e58      	subs	r0, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	0099      	lsls	r1, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Init+0x196>
 800410e:	2301      	movs	r3, #1
 8004110:	e022      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10e      	bne.n	8004138 <HAL_I2C_Init+0x1bc>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e58      	subs	r0, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	440b      	add	r3, r1
 8004128:	fbb0 f3f3 	udiv	r3, r0, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	e00f      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	0099      	lsls	r1, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	6809      	ldr	r1, [r1, #0]
 800415c:	4313      	orrs	r3, r2
 800415e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6911      	ldr	r1, [r2, #16]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68d2      	ldr	r2, [r2, #12]
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	430b      	orrs	r3, r1
 800419a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	000186a0 	.word	0x000186a0
 80041f4:	001e847f 	.word	0x001e847f
 80041f8:	003d08ff 	.word	0x003d08ff
 80041fc:	431bde83 	.word	0x431bde83
 8004200:	10624dd3 	.word	0x10624dd3

08004204 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	461a      	mov	r2, r3
 8004210:	460b      	mov	r3, r1
 8004212:	817b      	strh	r3, [r7, #10]
 8004214:	4613      	mov	r3, r2
 8004216:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff f838 	bl	800328c <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	f040 80e0 	bne.w	80043ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2319      	movs	r3, #25
 8004232:	2201      	movs	r2, #1
 8004234:	4970      	ldr	r1, [pc, #448]	; (80043f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fd86 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	e0d3      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_I2C_Master_Transmit+0x50>
 8004250:	2302      	movs	r3, #2
 8004252:	e0cc      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d007      	beq.n	800427a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004288:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2221      	movs	r2, #33	; 0x21
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2210      	movs	r2, #16
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	893a      	ldrh	r2, [r7, #8]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a50      	ldr	r2, [pc, #320]	; (80043fc <HAL_I2C_Master_Transmit+0x1f8>)
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042bc:	8979      	ldrh	r1, [r7, #10]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fbf0 	bl	8004aa8 <I2C_MasterRequestWrite>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e08d      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042e8:	e066      	b.n	80043b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	6a39      	ldr	r1, [r7, #32]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fe00 	bl	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d107      	bne.n	8004312 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e06b      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d11b      	bne.n	800438c <HAL_I2C_Master_Transmit+0x188>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	6a39      	ldr	r1, [r7, #32]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fdf0 	bl	8004f76 <I2C_WaitOnBTFFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d107      	bne.n	80043b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e01a      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d194      	bne.n	80042ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	00100002 	.word	0x00100002
 80043fc:	ffff0000 	.word	0xffff0000

08004400 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	461a      	mov	r2, r3
 800440c:	460b      	mov	r3, r1
 800440e:	817b      	strh	r3, [r7, #10]
 8004410:	4613      	mov	r3, r2
 8004412:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004414:	f7fe ff3a 	bl	800328c <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b20      	cmp	r3, #32
 8004424:	f040 820b 	bne.w	800483e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	2319      	movs	r3, #25
 800442e:	2201      	movs	r2, #1
 8004430:	497c      	ldr	r1, [pc, #496]	; (8004624 <HAL_I2C_Master_Receive+0x224>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fc88 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
 8004440:	e1fe      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_I2C_Master_Receive+0x50>
 800444c:	2302      	movs	r3, #2
 800444e:	e1f7      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b01      	cmp	r3, #1
 8004464:	d007      	beq.n	8004476 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2222      	movs	r2, #34	; 0x22
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2210      	movs	r2, #16
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	893a      	ldrh	r2, [r7, #8]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a5c      	ldr	r2, [pc, #368]	; (8004628 <HAL_I2C_Master_Receive+0x228>)
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044b8:	8979      	ldrh	r1, [r7, #10]
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fb74 	bl	8004bac <I2C_MasterRequestRead>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1b8      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d113      	bne.n	80044fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e18c      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11b      	bne.n	800453e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e16c      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b02      	cmp	r3, #2
 8004544:	d11b      	bne.n	800457e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	e14c      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045a4:	e138      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	f200 80f1 	bhi.w	8004792 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d123      	bne.n	8004600 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fd1b 	bl	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e139      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045fe:	e10b      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b02      	cmp	r3, #2
 8004606:	d14e      	bne.n	80046a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	4906      	ldr	r1, [pc, #24]	; (800462c <HAL_I2C_Master_Receive+0x22c>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fb98 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e10e      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
 8004622:	bf00      	nop
 8004624:	00100002 	.word	0x00100002
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a4:	e0b8      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2200      	movs	r2, #0
 80046ae:	4966      	ldr	r1, [pc, #408]	; (8004848 <HAL_I2C_Master_Receive+0x448>)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb49 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0bf      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2200      	movs	r2, #0
 800470a:	494f      	ldr	r1, [pc, #316]	; (8004848 <HAL_I2C_Master_Receive+0x448>)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fb1b 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e091      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004790:	e042      	b.n	8004818 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fc2e 	bl	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e04c      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d118      	bne.n	8004818 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	f47f aec2 	bne.w	80045a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3728      	adds	r7, #40	; 0x28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	00010004 	.word	0x00010004

0800484c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	460b      	mov	r3, r1
 800485a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800485c:	f7fe fd16 	bl	800328c <HAL_GetTick>
 8004860:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	f040 8111 	bne.w	8004a96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2319      	movs	r3, #25
 800487a:	2201      	movs	r2, #1
 800487c:	4988      	ldr	r1, [pc, #544]	; (8004aa0 <HAL_I2C_IsDeviceReady+0x254>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa62 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
 800488c:	e104      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_I2C_IsDeviceReady+0x50>
 8004898:	2302      	movs	r3, #2
 800489a:	e0fd      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d007      	beq.n	80048c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2224      	movs	r2, #36	; 0x24
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a70      	ldr	r2, [pc, #448]	; (8004aa4 <HAL_I2C_IsDeviceReady+0x258>)
 80048e4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fa20 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491c:	d103      	bne.n	8004926 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0b6      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800492a:	897b      	ldrh	r3, [r7, #10]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004938:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800493a:	f7fe fca7 	bl	800328c <HAL_GetTick>
 800493e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b02      	cmp	r3, #2
 800494c:	bf0c      	ite	eq
 800494e:	2301      	moveq	r3, #1
 8004950:	2300      	movne	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800496e:	e025      	b.n	80049bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004970:	f7fe fc8c 	bl	800328c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <HAL_I2C_IsDeviceReady+0x13a>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	22a0      	movs	r2, #160	; 0xa0
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2ba0      	cmp	r3, #160	; 0xa0
 80049c6:	d005      	beq.n	80049d4 <HAL_I2C_IsDeviceReady+0x188>
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <HAL_I2C_IsDeviceReady+0x188>
 80049ce:	7dbb      	ldrb	r3, [r7, #22]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0cd      	beq.n	8004970 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d129      	bne.n	8004a3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2319      	movs	r3, #25
 8004a16:	2201      	movs	r2, #1
 8004a18:	4921      	ldr	r1, [pc, #132]	; (8004aa0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f994 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e036      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e02c      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2319      	movs	r3, #25
 8004a5e:	2201      	movs	r2, #1
 8004a60:	490f      	ldr	r1, [pc, #60]	; (8004aa0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f970 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e012      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	3301      	adds	r3, #1
 8004a76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	f4ff af32 	bcc.w	80048e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	00100002 	.word	0x00100002
 8004aa4:	ffff0000 	.word	0xffff0000

08004aa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d006      	beq.n	8004ad2 <I2C_MasterRequestWrite+0x2a>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d003      	beq.n	8004ad2 <I2C_MasterRequestWrite+0x2a>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad0:	d108      	bne.n	8004ae4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e00b      	b.n	8004afc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	2b12      	cmp	r3, #18
 8004aea:	d107      	bne.n	8004afc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f91d 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d103      	bne.n	8004b2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e035      	b.n	8004b9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b38:	d108      	bne.n	8004b4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b3a:	897b      	ldrh	r3, [r7, #10]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b48:	611a      	str	r2, [r3, #16]
 8004b4a:	e01b      	b.n	8004b84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b4c:	897b      	ldrh	r3, [r7, #10]
 8004b4e:	11db      	asrs	r3, r3, #7
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0306 	and.w	r3, r3, #6
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f063 030f 	orn	r3, r3, #15
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	490e      	ldr	r1, [pc, #56]	; (8004ba4 <I2C_MasterRequestWrite+0xfc>)
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f943 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e010      	b.n	8004b9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b7a:	897b      	ldrh	r3, [r7, #10]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	4907      	ldr	r1, [pc, #28]	; (8004ba8 <I2C_MasterRequestWrite+0x100>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f933 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	00010008 	.word	0x00010008
 8004ba8:	00010002 	.word	0x00010002

08004bac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d006      	beq.n	8004be6 <I2C_MasterRequestRead+0x3a>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d003      	beq.n	8004be6 <I2C_MasterRequestRead+0x3a>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004be4:	d108      	bne.n	8004bf8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e00b      	b.n	8004c10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	2b11      	cmp	r3, #17
 8004bfe:	d107      	bne.n	8004c10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f893 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	d103      	bne.n	8004c40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e079      	b.n	8004d38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c4c:	d108      	bne.n	8004c60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c4e:	897b      	ldrh	r3, [r7, #10]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]
 8004c5e:	e05f      	b.n	8004d20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	11db      	asrs	r3, r3, #7
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f063 030f 	orn	r3, r3, #15
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4930      	ldr	r1, [pc, #192]	; (8004d40 <I2C_MasterRequestRead+0x194>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8b9 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e054      	b.n	8004d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4929      	ldr	r1, [pc, #164]	; (8004d44 <I2C_MasterRequestRead+0x198>)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8a9 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e044      	b.n	8004d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f831 	bl	8004d48 <I2C_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfa:	d103      	bne.n	8004d04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e017      	b.n	8004d38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	11db      	asrs	r3, r3, #7
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f003 0306 	and.w	r3, r3, #6
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f063 030e 	orn	r3, r3, #14
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4907      	ldr	r1, [pc, #28]	; (8004d44 <I2C_MasterRequestRead+0x198>)
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f865 	bl	8004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	00010008 	.word	0x00010008
 8004d44:	00010002 	.word	0x00010002

08004d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d58:	e025      	b.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d021      	beq.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d62:	f7fe fa93 	bl	800328c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d116      	bne.n	8004da6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e023      	b.n	8004dee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d10d      	bne.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	43da      	mvns	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	e00c      	b.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d0b6      	beq.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e04:	e051      	b.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e14:	d123      	bne.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f043 0204 	orr.w	r2, r3, #4
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e046      	b.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d021      	beq.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fe fa11 	bl	800328c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d116      	bne.n	8004eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e020      	b.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d10c      	bne.n	8004ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e00b      	b.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	43da      	mvns	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d18d      	bne.n	8004e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f00:	e02d      	b.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 f8ce 	bl	80050a4 <I2C_IsAcknowledgeFailed>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e02d      	b.n	8004f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d021      	beq.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1a:	f7fe f9b7 	bl	800328c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d302      	bcc.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e007      	b.n	8004f6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d1ca      	bne.n	8004f02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f82:	e02d      	b.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f88d 	bl	80050a4 <I2C_IsAcknowledgeFailed>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e02d      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d021      	beq.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fe f976 	bl	800328c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d116      	bne.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e007      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d1ca      	bne.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005004:	e042      	b.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b10      	cmp	r3, #16
 8005012:	d119      	bne.n	8005048 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0210 	mvn.w	r2, #16
 800501c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e029      	b.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005048:	f7fe f920 	bl	800328c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d116      	bne.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e007      	b.n	800509c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d1b5      	bne.n	8005006 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ba:	d11b      	bne.n	80050f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	f043 0204 	orr.w	r2, r3, #4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e000      	b.n	80050f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0cc      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005118:	4b68      	ldr	r3, [pc, #416]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d90c      	bls.n	8005140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b65      	ldr	r3, [pc, #404]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b63      	ldr	r3, [pc, #396]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0b8      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d020      	beq.n	800518e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005158:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a58      	ldr	r2, [pc, #352]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005170:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4a52      	ldr	r2, [pc, #328]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800517a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517c:	4b50      	ldr	r3, [pc, #320]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	494d      	ldr	r1, [pc, #308]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d044      	beq.n	8005224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a2:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d119      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e07f      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d003      	beq.n	80051c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d107      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c2:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e06f      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d2:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e067      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 0203 	bic.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4934      	ldr	r1, [pc, #208]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051f4:	f7fe f84a 	bl	800328c <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7fe f846 	bl	800328c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	; 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e04f      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 020c 	and.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	429a      	cmp	r2, r3
 8005222:	d1eb      	bne.n	80051fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005224:	4b25      	ldr	r3, [pc, #148]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d20c      	bcs.n	800524c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b22      	ldr	r3, [pc, #136]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b20      	ldr	r3, [pc, #128]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e032      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	4916      	ldr	r1, [pc, #88]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	4313      	orrs	r3, r2
 8005268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005276:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	490e      	ldr	r1, [pc, #56]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800528a:	f000 f855 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 800528e:	4602      	mov	r2, r0
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	490a      	ldr	r1, [pc, #40]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 800529c:	5ccb      	ldrb	r3, [r1, r3]
 800529e:	fa22 f303 	lsr.w	r3, r2, r3
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80052a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052a6:	4b09      	ldr	r3, [pc, #36]	; (80052cc <HAL_RCC_ClockConfig+0x1c8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd ffaa 	bl	8003204 <HAL_InitTick>

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023c00 	.word	0x40023c00
 80052c0:	40023800 	.word	0x40023800
 80052c4:	080090e0 	.word	0x080090e0
 80052c8:	2000000c 	.word	0x2000000c
 80052cc:	20000010 	.word	0x20000010

080052d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052ec:	f7ff fff0 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0a9b      	lsrs	r3, r3, #10
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4903      	ldr	r1, [pc, #12]	; (800530c <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	080090f0 	.word	0x080090f0

08005310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005314:	f7ff ffdc 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0b5b      	lsrs	r3, r3, #13
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4903      	ldr	r1, [pc, #12]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40023800 	.word	0x40023800
 8005334:	080090f0 	.word	0x080090f0

08005338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800533c:	b0ae      	sub	sp, #184	; 0xb8
 800533e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800535e:	4bcb      	ldr	r3, [pc, #812]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b0c      	cmp	r3, #12
 8005368:	f200 8204 	bhi.w	8005774 <HAL_RCC_GetSysClockFreq+0x43c>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <HAL_RCC_GetSysClockFreq+0x3c>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	080053a9 	.word	0x080053a9
 8005378:	08005775 	.word	0x08005775
 800537c:	08005775 	.word	0x08005775
 8005380:	08005775 	.word	0x08005775
 8005384:	080053b1 	.word	0x080053b1
 8005388:	08005775 	.word	0x08005775
 800538c:	08005775 	.word	0x08005775
 8005390:	08005775 	.word	0x08005775
 8005394:	080053b9 	.word	0x080053b9
 8005398:	08005775 	.word	0x08005775
 800539c:	08005775 	.word	0x08005775
 80053a0:	08005775 	.word	0x08005775
 80053a4:	080055a9 	.word	0x080055a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4bb9      	ldr	r3, [pc, #740]	; (8005690 <HAL_RCC_GetSysClockFreq+0x358>)
 80053aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80053ae:	e1e5      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053b0:	4bb7      	ldr	r3, [pc, #732]	; (8005690 <HAL_RCC_GetSysClockFreq+0x358>)
 80053b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80053b6:	e1e1      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b8:	4bb4      	ldr	r3, [pc, #720]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053c4:	4bb1      	ldr	r3, [pc, #708]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d071      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d0:	4bae      	ldr	r3, [pc, #696]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	099b      	lsrs	r3, r3, #6
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80053e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053ec:	2300      	movs	r3, #0
 80053ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	f04f 0000 	mov.w	r0, #0
 80053fe:	f04f 0100 	mov.w	r1, #0
 8005402:	0159      	lsls	r1, r3, #5
 8005404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005408:	0150      	lsls	r0, r2, #5
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4621      	mov	r1, r4
 8005410:	1a51      	subs	r1, r2, r1
 8005412:	6439      	str	r1, [r7, #64]	; 0x40
 8005414:	4629      	mov	r1, r5
 8005416:	eb63 0301 	sbc.w	r3, r3, r1
 800541a:	647b      	str	r3, [r7, #68]	; 0x44
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005428:	4649      	mov	r1, r9
 800542a:	018b      	lsls	r3, r1, #6
 800542c:	4641      	mov	r1, r8
 800542e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005432:	4641      	mov	r1, r8
 8005434:	018a      	lsls	r2, r1, #6
 8005436:	4641      	mov	r1, r8
 8005438:	1a51      	subs	r1, r2, r1
 800543a:	63b9      	str	r1, [r7, #56]	; 0x38
 800543c:	4649      	mov	r1, r9
 800543e:	eb63 0301 	sbc.w	r3, r3, r1
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005450:	4649      	mov	r1, r9
 8005452:	00cb      	lsls	r3, r1, #3
 8005454:	4641      	mov	r1, r8
 8005456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545a:	4641      	mov	r1, r8
 800545c:	00ca      	lsls	r2, r1, #3
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	4603      	mov	r3, r0
 8005464:	4622      	mov	r2, r4
 8005466:	189b      	adds	r3, r3, r2
 8005468:	633b      	str	r3, [r7, #48]	; 0x30
 800546a:	462b      	mov	r3, r5
 800546c:	460a      	mov	r2, r1
 800546e:	eb42 0303 	adc.w	r3, r2, r3
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005480:	4629      	mov	r1, r5
 8005482:	028b      	lsls	r3, r1, #10
 8005484:	4621      	mov	r1, r4
 8005486:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800548a:	4621      	mov	r1, r4
 800548c:	028a      	lsls	r2, r1, #10
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800549c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80054a4:	f7fb fb94 	bl	8000bd0 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4613      	mov	r3, r2
 80054ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054b2:	e067      	b.n	8005584 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b4:	4b75      	ldr	r3, [pc, #468]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	099b      	lsrs	r3, r3, #6
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80054c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ce:	2300      	movs	r3, #0
 80054d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	f04f 0000 	mov.w	r0, #0
 80054de:	f04f 0100 	mov.w	r1, #0
 80054e2:	0159      	lsls	r1, r3, #5
 80054e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054e8:	0150      	lsls	r0, r2, #5
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4621      	mov	r1, r4
 80054f0:	1a51      	subs	r1, r2, r1
 80054f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80054f4:	4629      	mov	r1, r5
 80054f6:	eb63 0301 	sbc.w	r3, r3, r1
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005508:	4649      	mov	r1, r9
 800550a:	018b      	lsls	r3, r1, #6
 800550c:	4641      	mov	r1, r8
 800550e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005512:	4641      	mov	r1, r8
 8005514:	018a      	lsls	r2, r1, #6
 8005516:	4641      	mov	r1, r8
 8005518:	ebb2 0a01 	subs.w	sl, r2, r1
 800551c:	4649      	mov	r1, r9
 800551e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	f04f 0300 	mov.w	r3, #0
 800552a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800552e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005532:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005536:	4692      	mov	sl, r2
 8005538:	469b      	mov	fp, r3
 800553a:	4623      	mov	r3, r4
 800553c:	eb1a 0303 	adds.w	r3, sl, r3
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	462b      	mov	r3, r5
 8005544:	eb4b 0303 	adc.w	r3, fp, r3
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005556:	4629      	mov	r1, r5
 8005558:	028b      	lsls	r3, r1, #10
 800555a:	4621      	mov	r1, r4
 800555c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005560:	4621      	mov	r1, r4
 8005562:	028a      	lsls	r2, r1, #10
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800556c:	2200      	movs	r2, #0
 800556e:	673b      	str	r3, [r7, #112]	; 0x70
 8005570:	677a      	str	r2, [r7, #116]	; 0x74
 8005572:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005576:	f7fb fb2b 	bl	8000bd0 <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4613      	mov	r3, r2
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005584:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	3301      	adds	r3, #1
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800559a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80055a6:	e0e9      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055b4:	4b35      	ldr	r3, [pc, #212]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d069      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c0:	4b32      	ldr	r3, [pc, #200]	; (800568c <HAL_RCC_GetSysClockFreq+0x354>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	099b      	lsrs	r3, r3, #6
 80055c6:	2200      	movs	r2, #0
 80055c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	663b      	str	r3, [r7, #96]	; 0x60
 80055d4:	2300      	movs	r3, #0
 80055d6:	667b      	str	r3, [r7, #100]	; 0x64
 80055d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80055dc:	4622      	mov	r2, r4
 80055de:	462b      	mov	r3, r5
 80055e0:	f04f 0000 	mov.w	r0, #0
 80055e4:	f04f 0100 	mov.w	r1, #0
 80055e8:	0159      	lsls	r1, r3, #5
 80055ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ee:	0150      	lsls	r0, r2, #5
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4621      	mov	r1, r4
 80055f6:	1a51      	subs	r1, r2, r1
 80055f8:	61b9      	str	r1, [r7, #24]
 80055fa:	4629      	mov	r1, r5
 80055fc:	eb63 0301 	sbc.w	r3, r3, r1
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800560e:	4659      	mov	r1, fp
 8005610:	018b      	lsls	r3, r1, #6
 8005612:	4651      	mov	r1, sl
 8005614:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005618:	4651      	mov	r1, sl
 800561a:	018a      	lsls	r2, r1, #6
 800561c:	4651      	mov	r1, sl
 800561e:	ebb2 0801 	subs.w	r8, r2, r1
 8005622:	4659      	mov	r1, fp
 8005624:	eb63 0901 	sbc.w	r9, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005634:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005638:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800563c:	4690      	mov	r8, r2
 800563e:	4699      	mov	r9, r3
 8005640:	4623      	mov	r3, r4
 8005642:	eb18 0303 	adds.w	r3, r8, r3
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	462b      	mov	r3, r5
 800564a:	eb49 0303 	adc.w	r3, r9, r3
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800565c:	4629      	mov	r1, r5
 800565e:	028b      	lsls	r3, r1, #10
 8005660:	4621      	mov	r1, r4
 8005662:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005666:	4621      	mov	r1, r4
 8005668:	028a      	lsls	r2, r1, #10
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005672:	2200      	movs	r2, #0
 8005674:	65bb      	str	r3, [r7, #88]	; 0x58
 8005676:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005678:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800567c:	f7fb faa8 	bl	8000bd0 <__aeabi_uldivmod>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4613      	mov	r3, r2
 8005686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800568a:	e063      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x41c>
 800568c:	40023800 	.word	0x40023800
 8005690:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005694:	4b3d      	ldr	r3, [pc, #244]	; (800578c <HAL_RCC_GetSysClockFreq+0x454>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	2200      	movs	r2, #0
 800569c:	4618      	mov	r0, r3
 800569e:	4611      	mov	r1, r2
 80056a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056a4:	653b      	str	r3, [r7, #80]	; 0x50
 80056a6:	2300      	movs	r3, #0
 80056a8:	657b      	str	r3, [r7, #84]	; 0x54
 80056aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80056ae:	4642      	mov	r2, r8
 80056b0:	464b      	mov	r3, r9
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f04f 0100 	mov.w	r1, #0
 80056ba:	0159      	lsls	r1, r3, #5
 80056bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c0:	0150      	lsls	r0, r2, #5
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4641      	mov	r1, r8
 80056c8:	1a51      	subs	r1, r2, r1
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4649      	mov	r1, r9
 80056ce:	eb63 0301 	sbc.w	r3, r3, r1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80056e0:	4659      	mov	r1, fp
 80056e2:	018b      	lsls	r3, r1, #6
 80056e4:	4651      	mov	r1, sl
 80056e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ea:	4651      	mov	r1, sl
 80056ec:	018a      	lsls	r2, r1, #6
 80056ee:	4651      	mov	r1, sl
 80056f0:	1a54      	subs	r4, r2, r1
 80056f2:	4659      	mov	r1, fp
 80056f4:	eb63 0501 	sbc.w	r5, r3, r1
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	00eb      	lsls	r3, r5, #3
 8005702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005706:	00e2      	lsls	r2, r4, #3
 8005708:	4614      	mov	r4, r2
 800570a:	461d      	mov	r5, r3
 800570c:	4643      	mov	r3, r8
 800570e:	18e3      	adds	r3, r4, r3
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	464b      	mov	r3, r9
 8005714:	eb45 0303 	adc.w	r3, r5, r3
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005726:	4629      	mov	r1, r5
 8005728:	028b      	lsls	r3, r1, #10
 800572a:	4621      	mov	r1, r4
 800572c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005730:	4621      	mov	r1, r4
 8005732:	028a      	lsls	r2, r1, #10
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800573c:	2200      	movs	r2, #0
 800573e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005740:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005742:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005746:	f7fb fa43 	bl	8000bd0 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4613      	mov	r3, r2
 8005750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <HAL_RCC_GetSysClockFreq+0x454>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	0f1b      	lsrs	r3, r3, #28
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005762:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005772:	e003      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_RCC_GetSysClockFreq+0x458>)
 8005776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800577a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800577c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005780:	4618      	mov	r0, r3
 8005782:	37b8      	adds	r7, #184	; 0xb8
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	40023800 	.word	0x40023800
 8005790:	00f42400 	.word	0x00f42400

08005794 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e28d      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8083 	beq.w	80058ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057b4:	4b94      	ldr	r3, [pc, #592]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d019      	beq.n	80057f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057c0:	4b91      	ldr	r3, [pc, #580]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d106      	bne.n	80057da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057cc:	4b8e      	ldr	r3, [pc, #568]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d8:	d00c      	beq.n	80057f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057da:	4b8b      	ldr	r3, [pc, #556]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d112      	bne.n	800580c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b88      	ldr	r3, [pc, #544]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057f2:	d10b      	bne.n	800580c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	4b84      	ldr	r3, [pc, #528]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d05b      	beq.n	80058b8 <HAL_RCC_OscConfig+0x124>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d157      	bne.n	80058b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e25a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005814:	d106      	bne.n	8005824 <HAL_RCC_OscConfig+0x90>
 8005816:	4b7c      	ldr	r3, [pc, #496]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7b      	ldr	r2, [pc, #492]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e01d      	b.n	8005860 <HAL_RCC_OscConfig+0xcc>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800582c:	d10c      	bne.n	8005848 <HAL_RCC_OscConfig+0xb4>
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a75      	ldr	r2, [pc, #468]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b73      	ldr	r3, [pc, #460]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a72      	ldr	r2, [pc, #456]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	e00b      	b.n	8005860 <HAL_RCC_OscConfig+0xcc>
 8005848:	4b6f      	ldr	r3, [pc, #444]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a6e      	ldr	r2, [pc, #440]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6b      	ldr	r2, [pc, #428]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800585a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d013      	beq.n	8005890 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fd fd10 	bl	800328c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005870:	f7fd fd0c 	bl	800328c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e21f      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0xdc>
 800588e:	e014      	b.n	80058ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fd fcfc 	bl	800328c <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005898:	f7fd fcf8 	bl	800328c <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b64      	cmp	r3, #100	; 0x64
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e20b      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	4b57      	ldr	r3, [pc, #348]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x104>
 80058b6:	e000      	b.n	80058ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d06f      	beq.n	80059a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058c6:	4b50      	ldr	r3, [pc, #320]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058d2:	4b4d      	ldr	r3, [pc, #308]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d105      	bne.n	80058ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058de:	4b4a      	ldr	r3, [pc, #296]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ea:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d11c      	bne.n	8005930 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f6:	4b44      	ldr	r3, [pc, #272]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d116      	bne.n	8005930 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005902:	4b41      	ldr	r3, [pc, #260]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_RCC_OscConfig+0x186>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e1d3      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591a:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4937      	ldr	r1, [pc, #220]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800592a:	4313      	orrs	r3, r2
 800592c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800592e:	e03a      	b.n	80059a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005938:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <HAL_RCC_OscConfig+0x278>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593e:	f7fd fca5 	bl	800328c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005946:	f7fd fca1 	bl	800328c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e1b4      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005958:	4b2b      	ldr	r3, [pc, #172]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005964:	4b28      	ldr	r3, [pc, #160]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4925      	ldr	r1, [pc, #148]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]
 8005978:	e015      	b.n	80059a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <HAL_RCC_OscConfig+0x278>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fd fc84 	bl	800328c <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005988:	f7fd fc80 	bl	800328c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e193      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d036      	beq.n	8005a20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ba:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <HAL_RCC_OscConfig+0x27c>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c0:	f7fd fc64 	bl	800328c <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059c8:	f7fd fc60 	bl	800328c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e173      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCC_OscConfig+0x274>)
 80059dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x234>
 80059e6:	e01b      	b.n	8005a20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_OscConfig+0x27c>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fd fc4d 	bl	800328c <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f4:	e00e      	b.n	8005a14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059f6:	f7fd fc49 	bl	800328c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d907      	bls.n	8005a14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e15c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	42470000 	.word	0x42470000
 8005a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a14:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ea      	bne.n	80059f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8097 	beq.w	8005b5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a32:	4b83      	ldr	r3, [pc, #524]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10f      	bne.n	8005a5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	4b7f      	ldr	r3, [pc, #508]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	4a7e      	ldr	r2, [pc, #504]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a4e:	4b7c      	ldr	r3, [pc, #496]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5e:	4b79      	ldr	r3, [pc, #484]	; (8005c44 <HAL_RCC_OscConfig+0x4b0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d118      	bne.n	8005a9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6a:	4b76      	ldr	r3, [pc, #472]	; (8005c44 <HAL_RCC_OscConfig+0x4b0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a75      	ldr	r2, [pc, #468]	; (8005c44 <HAL_RCC_OscConfig+0x4b0>)
 8005a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a76:	f7fd fc09 	bl	800328c <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7e:	f7fd fc05 	bl	800328c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e118      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	4b6c      	ldr	r3, [pc, #432]	; (8005c44 <HAL_RCC_OscConfig+0x4b0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x31e>
 8005aa4:	4b66      	ldr	r3, [pc, #408]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	4a65      	ldr	r2, [pc, #404]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
 8005aae:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab0:	e01c      	b.n	8005aec <HAL_RCC_OscConfig+0x358>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x340>
 8005aba:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abe:	4a60      	ldr	r2, [pc, #384]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac6:	4b5e      	ldr	r3, [pc, #376]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0x358>
 8005ad4:	4b5a      	ldr	r3, [pc, #360]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	4a59      	ldr	r2, [pc, #356]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005ada:	f023 0301 	bic.w	r3, r3, #1
 8005ade:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae0:	4b57      	ldr	r3, [pc, #348]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	4a56      	ldr	r2, [pc, #344]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005ae6:	f023 0304 	bic.w	r3, r3, #4
 8005aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7fd fbca 	bl	800328c <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afc:	f7fd fbc6 	bl	800328c <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0d7      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b12:	4b4b      	ldr	r3, [pc, #300]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ee      	beq.n	8005afc <HAL_RCC_OscConfig+0x368>
 8005b1e:	e014      	b.n	8005b4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b20:	f7fd fbb4 	bl	800328c <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b28:	f7fd fbb0 	bl	800328c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e0c1      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3e:	4b40      	ldr	r3, [pc, #256]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1ee      	bne.n	8005b28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d105      	bne.n	8005b5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b50:	4b3b      	ldr	r3, [pc, #236]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	4a3a      	ldr	r2, [pc, #232]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80ad 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d060      	beq.n	8005c34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d145      	bne.n	8005c06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7a:	4b33      	ldr	r3, [pc, #204]	; (8005c48 <HAL_RCC_OscConfig+0x4b4>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fd fb84 	bl	800328c <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fd fb80 	bl	800328c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e093      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	071b      	lsls	r3, r3, #28
 8005bd2:	491b      	ldr	r1, [pc, #108]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <HAL_RCC_OscConfig+0x4b4>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bde:	f7fd fb55 	bl	800328c <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be6:	f7fd fb51 	bl	800328c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e064      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf8:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x452>
 8005c04:	e05c      	b.n	8005cc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_RCC_OscConfig+0x4b4>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fd fb3e 	bl	800328c <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c14:	f7fd fb3a 	bl	800328c <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e04d      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x480>
 8005c32:	e045      	b.n	8005cc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e040      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40007000 	.word	0x40007000
 8005c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <HAL_RCC_OscConfig+0x538>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d030      	beq.n	8005cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d129      	bne.n	8005cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d122      	bne.n	8005cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d119      	bne.n	8005cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	3b01      	subs	r3, #1
 8005c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d10f      	bne.n	8005cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d001      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40023800 	.word	0x40023800

08005cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e041      	b.n	8005d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fc fe9e 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 fcbc 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e041      	b.n	8005e04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f839 	bl	8005e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f000 fc6d 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	bf0c      	ite	eq
 8005e44:	2301      	moveq	r3, #1
 8005e46:	2300      	movne	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e022      	b.n	8005e92 <HAL_TIM_PWM_Start_DMA+0x72>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d109      	bne.n	8005e66 <HAL_TIM_PWM_Start_DMA+0x46>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	bf0c      	ite	eq
 8005e5e:	2301      	moveq	r3, #1
 8005e60:	2300      	movne	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e015      	b.n	8005e92 <HAL_TIM_PWM_Start_DMA+0x72>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d109      	bne.n	8005e80 <HAL_TIM_PWM_Start_DMA+0x60>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e008      	b.n	8005e92 <HAL_TIM_PWM_Start_DMA+0x72>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
 8005e98:	e171      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_TIM_PWM_Start_DMA+0x94>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	e022      	b.n	8005efa <HAL_TIM_PWM_Start_DMA+0xda>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d109      	bne.n	8005ece <HAL_TIM_PWM_Start_DMA+0xae>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	e015      	b.n	8005efa <HAL_TIM_PWM_Start_DMA+0xda>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d109      	bne.n	8005ee8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e008      	b.n	8005efa <HAL_TIM_PWM_Start_DMA+0xda>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d024      	beq.n	8005f48 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start_DMA+0xee>
 8005f04:	887b      	ldrh	r3, [r7, #2]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e137      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1c:	e016      	b.n	8005f4c <HAL_TIM_PWM_Start_DMA+0x12c>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2c:	e00e      	b.n	8005f4c <HAL_TIM_PWM_Start_DMA+0x12c>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start_DMA+0x11e>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f3c:	e006      	b.n	8005f4c <HAL_TIM_PWM_Start_DMA+0x12c>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f46:	e001      	b.n	8005f4c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e118      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b0c      	cmp	r3, #12
 8005f50:	f200 80ae 	bhi.w	80060b0 <HAL_TIM_PWM_Start_DMA+0x290>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f91 	.word	0x08005f91
 8005f60:	080060b1 	.word	0x080060b1
 8005f64:	080060b1 	.word	0x080060b1
 8005f68:	080060b1 	.word	0x080060b1
 8005f6c:	08005fd9 	.word	0x08005fd9
 8005f70:	080060b1 	.word	0x080060b1
 8005f74:	080060b1 	.word	0x080060b1
 8005f78:	080060b1 	.word	0x080060b1
 8005f7c:	08006021 	.word	0x08006021
 8005f80:	080060b1 	.word	0x080060b1
 8005f84:	080060b1 	.word	0x080060b1
 8005f88:	080060b1 	.word	0x080060b1
 8005f8c:	08006069 	.word	0x08006069
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4a7c      	ldr	r2, [pc, #496]	; (8006188 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005f96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	4a7b      	ldr	r2, [pc, #492]	; (800618c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	4a7a      	ldr	r2, [pc, #488]	; (8006190 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005fa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3334      	adds	r3, #52	; 0x34
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	887b      	ldrh	r3, [r7, #2]
 8005fb8:	f7fd fb58 	bl	800366c <HAL_DMA_Start_IT>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e0db      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd4:	60da      	str	r2, [r3, #12]
      break;
 8005fd6:	e06e      	b.n	80060b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	4a6a      	ldr	r2, [pc, #424]	; (8006188 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005fde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	4a69      	ldr	r2, [pc, #420]	; (800618c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	4a68      	ldr	r2, [pc, #416]	; (8006190 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005fee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3338      	adds	r3, #56	; 0x38
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	887b      	ldrh	r3, [r7, #2]
 8006000:	f7fd fb34 	bl	800366c <HAL_DMA_Start_IT>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e0b7      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800601c:	60da      	str	r2, [r3, #12]
      break;
 800601e:	e04a      	b.n	80060b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	4a58      	ldr	r2, [pc, #352]	; (8006188 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a57      	ldr	r2, [pc, #348]	; (800618c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4a56      	ldr	r2, [pc, #344]	; (8006190 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006036:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	333c      	adds	r3, #60	; 0x3c
 8006044:	461a      	mov	r2, r3
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	f7fd fb10 	bl	800366c <HAL_DMA_Start_IT>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e093      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006064:	60da      	str	r2, [r3, #12]
      break;
 8006066:	e026      	b.n	80060b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	4a46      	ldr	r2, [pc, #280]	; (8006188 <HAL_TIM_PWM_Start_DMA+0x368>)
 800606e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	4a45      	ldr	r2, [pc, #276]	; (800618c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	4a44      	ldr	r2, [pc, #272]	; (8006190 <HAL_TIM_PWM_Start_DMA+0x370>)
 800607e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3340      	adds	r3, #64	; 0x40
 800608c:	461a      	mov	r2, r3
 800608e:	887b      	ldrh	r3, [r7, #2]
 8006090:	f7fd faec 	bl	800366c <HAL_DMA_Start_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e06f      	b.n	800617e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ac:	60da      	str	r2, [r3, #12]
      break;
 80060ae:	e002      	b.n	80060b6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      break;
 80060b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d15f      	bne.n	800617c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2201      	movs	r2, #1
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fdcb 	bl	8006c60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a31      	ldr	r2, [pc, #196]	; (8006194 <HAL_TIM_PWM_Start_DMA+0x374>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIM_PWM_Start_DMA+0x2be>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2f      	ldr	r2, [pc, #188]	; (8006198 <HAL_TIM_PWM_Start_DMA+0x378>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a25      	ldr	r2, [pc, #148]	; (8006194 <HAL_TIM_PWM_Start_DMA+0x374>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d01d      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a21      	ldr	r2, [pc, #132]	; (80061a0 <HAL_TIM_PWM_Start_DMA+0x380>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <HAL_TIM_PWM_Start_DMA+0x388>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x328>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <HAL_TIM_PWM_Start_DMA+0x38c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d111      	bne.n	800616c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b06      	cmp	r3, #6
 8006158:	d010      	beq.n	800617c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	e007      	b.n	800617c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800617c:	7dfb      	ldrb	r3, [r7, #23]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	0800657d 	.word	0x0800657d
 800618c:	08006625 	.word	0x08006625
 8006190:	080064eb 	.word	0x080064eb
 8006194:	40010000 	.word	0x40010000
 8006198:	40010400 	.word	0x40010400
 800619c:	40000400 	.word	0x40000400
 80061a0:	40000800 	.word	0x40000800
 80061a4:	40000c00 	.word	0x40000c00
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40001800 	.word	0x40001800

080061b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e0ae      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	f200 809f 	bhi.w	800631c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006219 	.word	0x08006219
 80061e8:	0800631d 	.word	0x0800631d
 80061ec:	0800631d 	.word	0x0800631d
 80061f0:	0800631d 	.word	0x0800631d
 80061f4:	08006259 	.word	0x08006259
 80061f8:	0800631d 	.word	0x0800631d
 80061fc:	0800631d 	.word	0x0800631d
 8006200:	0800631d 	.word	0x0800631d
 8006204:	0800629b 	.word	0x0800629b
 8006208:	0800631d 	.word	0x0800631d
 800620c:	0800631d 	.word	0x0800631d
 8006210:	0800631d 	.word	0x0800631d
 8006214:	080062db 	.word	0x080062db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fad4 	bl	80067cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	619a      	str	r2, [r3, #24]
      break;
 8006256:	e064      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb24 	bl	80068ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e043      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fb79 	bl	8006998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e023      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fbcd 	bl	8006a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
      break;
 800631a:	e002      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
      break;
 8006320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_ConfigClockSource+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e0b4      	b.n	80064ba <HAL_TIM_ConfigClockSource+0x186>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d03e      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0xd4>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	f200 8087 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006396:	f000 8086 	beq.w	80064a6 <HAL_TIM_ConfigClockSource+0x172>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639e:	d87f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b70      	cmp	r3, #112	; 0x70
 80063a2:	d01a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xa6>
 80063a4:	2b70      	cmp	r3, #112	; 0x70
 80063a6:	d87b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b60      	cmp	r3, #96	; 0x60
 80063aa:	d050      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x11a>
 80063ac:	2b60      	cmp	r3, #96	; 0x60
 80063ae:	d877      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b50      	cmp	r3, #80	; 0x50
 80063b2:	d03c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xfa>
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d873      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d058      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x13a>
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d86f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b30      	cmp	r3, #48	; 0x30
 80063c2:	d064      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b30      	cmp	r3, #48	; 0x30
 80063c6:	d86b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d060      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d867      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d05a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063d8:	e062      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f000 fc19 	bl	8006c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	609a      	str	r2, [r3, #8]
      break;
 8006406:	e04f      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f000 fc02 	bl	8006c20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e03c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fb76 	bl	8006b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2150      	movs	r1, #80	; 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fbcf 	bl	8006bea <TIM_ITRx_SetConfig>
      break;
 800644c:	e02c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fb95 	bl	8006b8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2160      	movs	r1, #96	; 0x60
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fbbf 	bl	8006bea <TIM_ITRx_SetConfig>
      break;
 800646c:	e01c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fb56 	bl	8006b2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2140      	movs	r1, #64	; 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fbaf 	bl	8006bea <TIM_ITRx_SetConfig>
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fba6 	bl	8006bea <TIM_ITRx_SetConfig>
      break;
 800649e:	e003      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d107      	bne.n	8006512 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006510:	e02a      	b.n	8006568 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d107      	bne.n	800652c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2202      	movs	r2, #2
 8006520:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652a:	e01d      	b.n	8006568 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d107      	bne.n	8006546 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2204      	movs	r2, #4
 800653a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006544:	e010      	b.n	8006568 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	429a      	cmp	r2, r3
 800654e:	d107      	bne.n	8006560 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2208      	movs	r2, #8
 8006554:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800655e:	e003      	b.n	8006568 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f7ff ffb4 	bl	80064d6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d10b      	bne.n	80065ac <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d136      	bne.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065aa:	e031      	b.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d10b      	bne.n	80065ce <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2202      	movs	r2, #2
 80065ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d125      	bne.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065cc:	e020      	b.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d10b      	bne.n	80065f0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2204      	movs	r2, #4
 80065dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d114      	bne.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ee:	e00f      	b.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d10a      	bne.n	8006610 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2208      	movs	r2, #8
 80065fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7fb f9bf 	bl	8001994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	771a      	strb	r2, [r3, #28]
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d103      	bne.n	8006644 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	771a      	strb	r2, [r3, #28]
 8006642:	e019      	b.n	8006678 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d103      	bne.n	8006656 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2202      	movs	r2, #2
 8006652:	771a      	strb	r2, [r3, #28]
 8006654:	e010      	b.n	8006678 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d103      	bne.n	8006668 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2204      	movs	r2, #4
 8006664:	771a      	strb	r2, [r3, #28]
 8006666:	e007      	b.n	8006678 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	429a      	cmp	r2, r3
 8006670:	d102      	bne.n	8006678 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2208      	movs	r2, #8
 8006676:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff ff22 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a40      	ldr	r2, [pc, #256]	; (80067a0 <TIM_Base_SetConfig+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066aa:	d00f      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a3d      	ldr	r2, [pc, #244]	; (80067a4 <TIM_Base_SetConfig+0x118>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00b      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3c      	ldr	r2, [pc, #240]	; (80067a8 <TIM_Base_SetConfig+0x11c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d007      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3b      	ldr	r2, [pc, #236]	; (80067ac <TIM_Base_SetConfig+0x120>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3a      	ldr	r2, [pc, #232]	; (80067b0 <TIM_Base_SetConfig+0x124>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a2f      	ldr	r2, [pc, #188]	; (80067a0 <TIM_Base_SetConfig+0x114>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d02b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ec:	d027      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2c      	ldr	r2, [pc, #176]	; (80067a4 <TIM_Base_SetConfig+0x118>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d023      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2b      	ldr	r2, [pc, #172]	; (80067a8 <TIM_Base_SetConfig+0x11c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2a      	ldr	r2, [pc, #168]	; (80067ac <TIM_Base_SetConfig+0x120>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a29      	ldr	r2, [pc, #164]	; (80067b0 <TIM_Base_SetConfig+0x124>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d017      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a28      	ldr	r2, [pc, #160]	; (80067b4 <TIM_Base_SetConfig+0x128>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a27      	ldr	r2, [pc, #156]	; (80067b8 <TIM_Base_SetConfig+0x12c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a26      	ldr	r2, [pc, #152]	; (80067bc <TIM_Base_SetConfig+0x130>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a25      	ldr	r2, [pc, #148]	; (80067c0 <TIM_Base_SetConfig+0x134>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a24      	ldr	r2, [pc, #144]	; (80067c4 <TIM_Base_SetConfig+0x138>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a23      	ldr	r2, [pc, #140]	; (80067c8 <TIM_Base_SetConfig+0x13c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d108      	bne.n	8006750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <TIM_Base_SetConfig+0x114>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_Base_SetConfig+0xf8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <TIM_Base_SetConfig+0x124>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d103      	bne.n	800678c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	615a      	str	r2, [r3, #20]
}
 8006792:	bf00      	nop
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40000400 	.word	0x40000400
 80067a8:	40000800 	.word	0x40000800
 80067ac:	40000c00 	.word	0x40000c00
 80067b0:	40010400 	.word	0x40010400
 80067b4:	40014000 	.word	0x40014000
 80067b8:	40014400 	.word	0x40014400
 80067bc:	40014800 	.word	0x40014800
 80067c0:	40001800 	.word	0x40001800
 80067c4:	40001c00 	.word	0x40001c00
 80067c8:	40002000 	.word	0x40002000

080067cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f023 0201 	bic.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 0302 	bic.w	r3, r3, #2
 8006814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a20      	ldr	r2, [pc, #128]	; (80068a4 <TIM_OC1_SetConfig+0xd8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d003      	beq.n	8006830 <TIM_OC1_SetConfig+0x64>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a1f      	ldr	r2, [pc, #124]	; (80068a8 <TIM_OC1_SetConfig+0xdc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10c      	bne.n	800684a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0308 	bic.w	r3, r3, #8
 8006836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 0304 	bic.w	r3, r3, #4
 8006848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <TIM_OC1_SetConfig+0xd8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d003      	beq.n	800685a <TIM_OC1_SetConfig+0x8e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <TIM_OC1_SetConfig+0xdc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d111      	bne.n	800687e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40010400 	.word	0x40010400

080068ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0210 	bic.w	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f023 0320 	bic.w	r3, r3, #32
 80068f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a22      	ldr	r2, [pc, #136]	; (8006990 <TIM_OC2_SetConfig+0xe4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC2_SetConfig+0x68>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a21      	ldr	r2, [pc, #132]	; (8006994 <TIM_OC2_SetConfig+0xe8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d10d      	bne.n	8006930 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800691a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800692e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a17      	ldr	r2, [pc, #92]	; (8006990 <TIM_OC2_SetConfig+0xe4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC2_SetConfig+0x94>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a16      	ldr	r2, [pc, #88]	; (8006994 <TIM_OC2_SetConfig+0xe8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d113      	bne.n	8006968 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800694e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a21      	ldr	r2, [pc, #132]	; (8006a78 <TIM_OC3_SetConfig+0xe0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_OC3_SetConfig+0x66>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <TIM_OC3_SetConfig+0xe4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d10d      	bne.n	8006a1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <TIM_OC3_SetConfig+0xe0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d003      	beq.n	8006a2a <TIM_OC3_SetConfig+0x92>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <TIM_OC3_SetConfig+0xe4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d113      	bne.n	8006a52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	621a      	str	r2, [r3, #32]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010400 	.word	0x40010400

08006a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	031b      	lsls	r3, r3, #12
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <TIM_OC4_SetConfig+0xa4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC4_SetConfig+0x68>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a11      	ldr	r2, [pc, #68]	; (8006b28 <TIM_OC4_SetConfig+0xa8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d109      	bne.n	8006afc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	019b      	lsls	r3, r3, #6
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40010000 	.word	0x40010000
 8006b28:	40010400 	.word	0x40010400

08006b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 030a 	bic.w	r3, r3, #10
 8006b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	621a      	str	r2, [r3, #32]
}
 8006b7e:	bf00      	nop
 8006b80:	371c      	adds	r7, #28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b087      	sub	sp, #28
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0210 	bic.w	r2, r3, #16
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	031b      	lsls	r3, r3, #12
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f043 0307 	orr.w	r3, r3, #7
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	609a      	str	r2, [r3, #8]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	021a      	lsls	r2, r3, #8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	431a      	orrs	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	609a      	str	r2, [r3, #8]
}
 8006c54:	bf00      	nop
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	2201      	movs	r2, #1
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1a      	ldr	r2, [r3, #32]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	43db      	mvns	r3, r3
 8006c82:	401a      	ands	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1a      	ldr	r2, [r3, #32]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f003 031f 	and.w	r3, r3, #31
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e05a      	b.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1a      	ldr	r2, [pc, #104]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10c      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800
 8006d94:	40000c00 	.word	0x40000c00
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40001800 	.word	0x40001800

08006da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e03f      	b.n	8006e36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fb feca 	bl	8002b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2224      	movs	r2, #36	; 0x24
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fba5 	bl	8007538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695a      	ldr	r2, [r3, #20]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b08a      	sub	sp, #40	; 0x28
 8006e42:	af02      	add	r7, sp, #8
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d17c      	bne.n	8006f58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_UART_Transmit+0x2c>
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e075      	b.n	8006f5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_UART_Transmit+0x3e>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e06e      	b.n	8006f5a <HAL_UART_Transmit+0x11c>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e92:	f7fc f9fb 	bl	800328c <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	88fa      	ldrh	r2, [r7, #6]
 8006e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eac:	d108      	bne.n	8006ec0 <HAL_UART_Transmit+0x82>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e003      	b.n	8006ec8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ed0:	e02a      	b.n	8006f28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2180      	movs	r1, #128	; 0x80
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f992 	bl	8007206 <UART_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e036      	b.n	8006f5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	3302      	adds	r3, #2
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	e007      	b.n	8006f1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1cf      	bne.n	8006ed2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2140      	movs	r1, #64	; 0x40
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f962 	bl	8007206 <UART_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e006      	b.n	8006f5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d11d      	bne.n	8006fb8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_UART_Receive_DMA+0x26>
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e016      	b.n	8006fba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_UART_Receive_DMA+0x38>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e00f      	b.n	8006fba <HAL_UART_Receive_DMA+0x58>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	461a      	mov	r2, r3
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f998 	bl	80072e4 <UART_Start_Receive_DMA>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	e000      	b.n	8006fba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006fde:	bf00      	nop
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b083      	sub	sp, #12
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b09c      	sub	sp, #112	; 0x70
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d172      	bne.n	8007118 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007034:	2200      	movs	r2, #0
 8007036:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	330c      	adds	r3, #12
 800703e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800704a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800704e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	330c      	adds	r3, #12
 8007056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007058:	65ba      	str	r2, [r7, #88]	; 0x58
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800705e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3314      	adds	r3, #20
 8007072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	667b      	str	r3, [r7, #100]	; 0x64
 8007084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3314      	adds	r3, #20
 800708a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800708c:	647a      	str	r2, [r7, #68]	; 0x44
 800708e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	623b      	str	r3, [r7, #32]
   return(result);
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b6:	663b      	str	r3, [r7, #96]	; 0x60
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3314      	adds	r3, #20
 80070be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070c0:	633a      	str	r2, [r7, #48]	; 0x30
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d119      	bne.n	8007118 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0310 	bic.w	r3, r3, #16
 80070fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007104:	61fa      	str	r2, [r7, #28]
 8007106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	617b      	str	r3, [r7, #20]
   return(result);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	2b01      	cmp	r3, #1
 800711e:	d106      	bne.n	800712e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007122:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007124:	4619      	mov	r1, r3
 8007126:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007128:	f7ff ff69 	bl	8006ffe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800712c:	e002      	b.n	8007134 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800712e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007130:	f7ff ff47 	bl	8006fc2 <HAL_UART_RxCpltCallback>
}
 8007134:	bf00      	nop
 8007136:	3770      	adds	r7, #112	; 0x70
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	2b01      	cmp	r3, #1
 8007150:	d108      	bne.n	8007164 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff ff4e 	bl	8006ffe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007162:	e002      	b.n	800716a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7ff ff36 	bl	8006fd6 <HAL_UART_RxHalfCpltCallback>
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b80      	cmp	r3, #128	; 0x80
 8007190:	bf0c      	ite	eq
 8007192:	2301      	moveq	r3, #1
 8007194:	2300      	movne	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b21      	cmp	r3, #33	; 0x21
 80071a4:	d108      	bne.n	80071b8 <UART_DMAError+0x46>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80071b2:	68b8      	ldr	r0, [r7, #8]
 80071b4:	f000 f934 	bl	8007420 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	bf0c      	ite	eq
 80071c6:	2301      	moveq	r3, #1
 80071c8:	2300      	movne	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b22      	cmp	r3, #34	; 0x22
 80071d8:	d108      	bne.n	80071ec <UART_DMAError+0x7a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2200      	movs	r2, #0
 80071e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80071e6:	68b8      	ldr	r0, [r7, #8]
 80071e8:	f000 f942 	bl	8007470 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	f043 0210 	orr.w	r2, r3, #16
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f8:	68b8      	ldr	r0, [r7, #8]
 80071fa:	f7ff fef6 	bl	8006fea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b090      	sub	sp, #64	; 0x40
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007216:	e050      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d04c      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <UART_WaitOnFlagUntilTimeout+0x30>
 8007226:	f7fc f831 	bl	800328c <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007232:	429a      	cmp	r2, r3
 8007234:	d241      	bcs.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	330c      	adds	r3, #12
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007256:	637a      	str	r2, [r7, #52]	; 0x34
 8007258:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800725c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e5      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	63bb      	str	r3, [r7, #56]	; 0x38
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3314      	adds	r3, #20
 8007288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728a:	623a      	str	r2, [r7, #32]
 800728c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	6a3a      	ldr	r2, [r7, #32]
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	61bb      	str	r3, [r7, #24]
   return(result);
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e00f      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d09f      	beq.n	8007218 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3740      	adds	r7, #64	; 0x40
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b098      	sub	sp, #96	; 0x60
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2222      	movs	r2, #34	; 0x22
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007310:	4a40      	ldr	r2, [pc, #256]	; (8007414 <UART_Start_Receive_DMA+0x130>)
 8007312:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	4a3f      	ldr	r2, [pc, #252]	; (8007418 <UART_Start_Receive_DMA+0x134>)
 800731a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	4a3e      	ldr	r2, [pc, #248]	; (800741c <UART_Start_Receive_DMA+0x138>)
 8007322:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	2200      	movs	r2, #0
 800732a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	f7fc f992 	bl	800366c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d019      	beq.n	80073a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007384:	65bb      	str	r3, [r7, #88]	; 0x58
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800738e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800739c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	657b      	str	r3, [r7, #84]	; 0x54
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	617b      	str	r3, [r7, #20]
   return(result);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ec:	653b      	str	r3, [r7, #80]	; 0x50
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3314      	adds	r3, #20
 80073f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073f6:	627a      	str	r2, [r7, #36]	; 0x24
 80073f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6a39      	ldr	r1, [r7, #32]
 80073fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	61fb      	str	r3, [r7, #28]
   return(result);
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e5      	bne.n	80073d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3760      	adds	r7, #96	; 0x60
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	08007017 	.word	0x08007017
 8007418:	0800713d 	.word	0x0800713d
 800741c:	08007173 	.word	0x08007173

08007420 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b089      	sub	sp, #36	; 0x24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	60bb      	str	r3, [r7, #8]
   return(result);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	69fa      	ldr	r2, [r7, #28]
 8007448:	61ba      	str	r2, [r7, #24]
 800744a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6979      	ldr	r1, [r7, #20]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	613b      	str	r3, [r7, #16]
   return(result);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007464:	bf00      	nop
 8007466:	3724      	adds	r7, #36	; 0x24
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b095      	sub	sp, #84	; 0x54
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	330c      	adds	r3, #12
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800748e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007498:	643a      	str	r2, [r7, #64]	; 0x40
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800749e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e5      	bne.n	8007478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3314      	adds	r3, #20
 80074b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e5      	bne.n	80074ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d119      	bne.n	800751c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f023 0310 	bic.w	r3, r3, #16
 80074fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007508:	61ba      	str	r2, [r7, #24]
 800750a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	613b      	str	r3, [r7, #16]
   return(result);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
}
 800752a:	bf00      	nop
 800752c:	3754      	adds	r7, #84	; 0x54
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800753c:	b0c0      	sub	sp, #256	; 0x100
 800753e:	af00      	add	r7, sp, #0
 8007540:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007554:	68d9      	ldr	r1, [r3, #12]
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	ea40 0301 	orr.w	r3, r0, r1
 8007560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	431a      	orrs	r2, r3
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	431a      	orrs	r2, r3
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007590:	f021 010c 	bic.w	r1, r1, #12
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800759e:	430b      	orrs	r3, r1
 80075a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	6999      	ldr	r1, [r3, #24]
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	ea40 0301 	orr.w	r3, r0, r1
 80075be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b8f      	ldr	r3, [pc, #572]	; (8007804 <UART_SetConfig+0x2cc>)
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d005      	beq.n	80075d8 <UART_SetConfig+0xa0>
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	4b8d      	ldr	r3, [pc, #564]	; (8007808 <UART_SetConfig+0x2d0>)
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d104      	bne.n	80075e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075d8:	f7fd fe9a 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 80075dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075e0:	e003      	b.n	80075ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075e2:	f7fd fe81 	bl	80052e8 <HAL_RCC_GetPCLK1Freq>
 80075e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f4:	f040 810c 	bne.w	8007810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007602:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	1891      	adds	r1, r2, r2
 8007610:	65b9      	str	r1, [r7, #88]	; 0x58
 8007612:	415b      	adcs	r3, r3
 8007614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800761a:	4621      	mov	r1, r4
 800761c:	eb12 0801 	adds.w	r8, r2, r1
 8007620:	4629      	mov	r1, r5
 8007622:	eb43 0901 	adc.w	r9, r3, r1
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800763a:	4690      	mov	r8, r2
 800763c:	4699      	mov	r9, r3
 800763e:	4623      	mov	r3, r4
 8007640:	eb18 0303 	adds.w	r3, r8, r3
 8007644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007648:	462b      	mov	r3, r5
 800764a:	eb49 0303 	adc.w	r3, r9, r3
 800764e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800765e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007666:	460b      	mov	r3, r1
 8007668:	18db      	adds	r3, r3, r3
 800766a:	653b      	str	r3, [r7, #80]	; 0x50
 800766c:	4613      	mov	r3, r2
 800766e:	eb42 0303 	adc.w	r3, r2, r3
 8007672:	657b      	str	r3, [r7, #84]	; 0x54
 8007674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800767c:	f7f9 faa8 	bl	8000bd0 <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4b61      	ldr	r3, [pc, #388]	; (800780c <UART_SetConfig+0x2d4>)
 8007686:	fba3 2302 	umull	r2, r3, r3, r2
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	011c      	lsls	r4, r3, #4
 800768e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007692:	2200      	movs	r2, #0
 8007694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007698:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800769c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076a0:	4642      	mov	r2, r8
 80076a2:	464b      	mov	r3, r9
 80076a4:	1891      	adds	r1, r2, r2
 80076a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80076a8:	415b      	adcs	r3, r3
 80076aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80076b0:	4641      	mov	r1, r8
 80076b2:	eb12 0a01 	adds.w	sl, r2, r1
 80076b6:	4649      	mov	r1, r9
 80076b8:	eb43 0b01 	adc.w	fp, r3, r1
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076d0:	4692      	mov	sl, r2
 80076d2:	469b      	mov	fp, r3
 80076d4:	4643      	mov	r3, r8
 80076d6:	eb1a 0303 	adds.w	r3, sl, r3
 80076da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076de:	464b      	mov	r3, r9
 80076e0:	eb4b 0303 	adc.w	r3, fp, r3
 80076e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076fc:	460b      	mov	r3, r1
 80076fe:	18db      	adds	r3, r3, r3
 8007700:	643b      	str	r3, [r7, #64]	; 0x40
 8007702:	4613      	mov	r3, r2
 8007704:	eb42 0303 	adc.w	r3, r2, r3
 8007708:	647b      	str	r3, [r7, #68]	; 0x44
 800770a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800770e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007712:	f7f9 fa5d 	bl	8000bd0 <__aeabi_uldivmod>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4611      	mov	r1, r2
 800771c:	4b3b      	ldr	r3, [pc, #236]	; (800780c <UART_SetConfig+0x2d4>)
 800771e:	fba3 2301 	umull	r2, r3, r3, r1
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2264      	movs	r2, #100	; 0x64
 8007726:	fb02 f303 	mul.w	r3, r2, r3
 800772a:	1acb      	subs	r3, r1, r3
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007732:	4b36      	ldr	r3, [pc, #216]	; (800780c <UART_SetConfig+0x2d4>)
 8007734:	fba3 2302 	umull	r2, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007740:	441c      	add	r4, r3
 8007742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007746:	2200      	movs	r2, #0
 8007748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800774c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	1891      	adds	r1, r2, r2
 800775a:	63b9      	str	r1, [r7, #56]	; 0x38
 800775c:	415b      	adcs	r3, r3
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007764:	4641      	mov	r1, r8
 8007766:	1851      	adds	r1, r2, r1
 8007768:	6339      	str	r1, [r7, #48]	; 0x30
 800776a:	4649      	mov	r1, r9
 800776c:	414b      	adcs	r3, r1
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800777c:	4659      	mov	r1, fp
 800777e:	00cb      	lsls	r3, r1, #3
 8007780:	4651      	mov	r1, sl
 8007782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007786:	4651      	mov	r1, sl
 8007788:	00ca      	lsls	r2, r1, #3
 800778a:	4610      	mov	r0, r2
 800778c:	4619      	mov	r1, r3
 800778e:	4603      	mov	r3, r0
 8007790:	4642      	mov	r2, r8
 8007792:	189b      	adds	r3, r3, r2
 8007794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007798:	464b      	mov	r3, r9
 800779a:	460a      	mov	r2, r1
 800779c:	eb42 0303 	adc.w	r3, r2, r3
 80077a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80077b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077b8:	460b      	mov	r3, r1
 80077ba:	18db      	adds	r3, r3, r3
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80077be:	4613      	mov	r3, r2
 80077c0:	eb42 0303 	adc.w	r3, r2, r3
 80077c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077ce:	f7f9 f9ff 	bl	8000bd0 <__aeabi_uldivmod>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <UART_SetConfig+0x2d4>)
 80077d8:	fba3 1302 	umull	r1, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	2164      	movs	r1, #100	; 0x64
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	3332      	adds	r3, #50	; 0x32
 80077ea:	4a08      	ldr	r2, [pc, #32]	; (800780c <UART_SetConfig+0x2d4>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f003 0207 	and.w	r2, r3, #7
 80077f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4422      	add	r2, r4
 80077fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007800:	e105      	b.n	8007a0e <UART_SetConfig+0x4d6>
 8007802:	bf00      	nop
 8007804:	40011000 	.word	0x40011000
 8007808:	40011400 	.word	0x40011400
 800780c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007814:	2200      	movs	r2, #0
 8007816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800781a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800781e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007822:	4642      	mov	r2, r8
 8007824:	464b      	mov	r3, r9
 8007826:	1891      	adds	r1, r2, r2
 8007828:	6239      	str	r1, [r7, #32]
 800782a:	415b      	adcs	r3, r3
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
 800782e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007832:	4641      	mov	r1, r8
 8007834:	1854      	adds	r4, r2, r1
 8007836:	4649      	mov	r1, r9
 8007838:	eb43 0501 	adc.w	r5, r3, r1
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	00eb      	lsls	r3, r5, #3
 8007846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800784a:	00e2      	lsls	r2, r4, #3
 800784c:	4614      	mov	r4, r2
 800784e:	461d      	mov	r5, r3
 8007850:	4643      	mov	r3, r8
 8007852:	18e3      	adds	r3, r4, r3
 8007854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007858:	464b      	mov	r3, r9
 800785a:	eb45 0303 	adc.w	r3, r5, r3
 800785e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800786e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800787e:	4629      	mov	r1, r5
 8007880:	008b      	lsls	r3, r1, #2
 8007882:	4621      	mov	r1, r4
 8007884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007888:	4621      	mov	r1, r4
 800788a:	008a      	lsls	r2, r1, #2
 800788c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007890:	f7f9 f99e 	bl	8000bd0 <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4b60      	ldr	r3, [pc, #384]	; (8007a1c <UART_SetConfig+0x4e4>)
 800789a:	fba3 2302 	umull	r2, r3, r3, r2
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	011c      	lsls	r4, r3, #4
 80078a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	1891      	adds	r1, r2, r2
 80078ba:	61b9      	str	r1, [r7, #24]
 80078bc:	415b      	adcs	r3, r3
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078c4:	4641      	mov	r1, r8
 80078c6:	1851      	adds	r1, r2, r1
 80078c8:	6139      	str	r1, [r7, #16]
 80078ca:	4649      	mov	r1, r9
 80078cc:	414b      	adcs	r3, r1
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078dc:	4659      	mov	r1, fp
 80078de:	00cb      	lsls	r3, r1, #3
 80078e0:	4651      	mov	r1, sl
 80078e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078e6:	4651      	mov	r1, sl
 80078e8:	00ca      	lsls	r2, r1, #3
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	4642      	mov	r2, r8
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078f8:	464b      	mov	r3, r9
 80078fa:	460a      	mov	r2, r1
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	67bb      	str	r3, [r7, #120]	; 0x78
 800790e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800791c:	4649      	mov	r1, r9
 800791e:	008b      	lsls	r3, r1, #2
 8007920:	4641      	mov	r1, r8
 8007922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007926:	4641      	mov	r1, r8
 8007928:	008a      	lsls	r2, r1, #2
 800792a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800792e:	f7f9 f94f 	bl	8000bd0 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <UART_SetConfig+0x4e4>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	; 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	3332      	adds	r3, #50	; 0x32
 800794a:	4a34      	ldr	r2, [pc, #208]	; (8007a1c <UART_SetConfig+0x4e4>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007956:	441c      	add	r4, r3
 8007958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800795c:	2200      	movs	r2, #0
 800795e:	673b      	str	r3, [r7, #112]	; 0x70
 8007960:	677a      	str	r2, [r7, #116]	; 0x74
 8007962:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007966:	4642      	mov	r2, r8
 8007968:	464b      	mov	r3, r9
 800796a:	1891      	adds	r1, r2, r2
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	415b      	adcs	r3, r3
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007976:	4641      	mov	r1, r8
 8007978:	1851      	adds	r1, r2, r1
 800797a:	6039      	str	r1, [r7, #0]
 800797c:	4649      	mov	r1, r9
 800797e:	414b      	adcs	r3, r1
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800798e:	4659      	mov	r1, fp
 8007990:	00cb      	lsls	r3, r1, #3
 8007992:	4651      	mov	r1, sl
 8007994:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007998:	4651      	mov	r1, sl
 800799a:	00ca      	lsls	r2, r1, #3
 800799c:	4610      	mov	r0, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	4642      	mov	r2, r8
 80079a4:	189b      	adds	r3, r3, r2
 80079a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079a8:	464b      	mov	r3, r9
 80079aa:	460a      	mov	r2, r1
 80079ac:	eb42 0303 	adc.w	r3, r2, r3
 80079b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	663b      	str	r3, [r7, #96]	; 0x60
 80079bc:	667a      	str	r2, [r7, #100]	; 0x64
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079ca:	4649      	mov	r1, r9
 80079cc:	008b      	lsls	r3, r1, #2
 80079ce:	4641      	mov	r1, r8
 80079d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079d4:	4641      	mov	r1, r8
 80079d6:	008a      	lsls	r2, r1, #2
 80079d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079dc:	f7f9 f8f8 	bl	8000bd0 <__aeabi_uldivmod>
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <UART_SetConfig+0x4e4>)
 80079e6:	fba3 1302 	umull	r1, r3, r3, r2
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2164      	movs	r1, #100	; 0x64
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	3332      	adds	r3, #50	; 0x32
 80079f8:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <UART_SetConfig+0x4e4>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4422      	add	r2, r4
 8007a0c:	609a      	str	r2, [r3, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a14:	46bd      	mov	sp, r7
 8007a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1a:	bf00      	nop
 8007a1c:	51eb851f 	.word	0x51eb851f

08007a20 <copysign>:
 8007a20:	b082      	sub	sp, #8
 8007a22:	ec51 0b10 	vmov	r0, r1, d0
 8007a26:	ed8d 1b00 	vstr	d1, [sp]
 8007a2a:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8007a2e:	9901      	ldr	r1, [sp, #4]
 8007a30:	ee10 2a10 	vmov	r2, s0
 8007a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007a38:	ea40 0301 	orr.w	r3, r0, r1
 8007a3c:	ec43 2b10 	vmov	d0, r2, r3
 8007a40:	b002      	add	sp, #8
 8007a42:	4770      	bx	lr

08007a44 <cosf>:
 8007a44:	ee10 3a10 	vmov	r3, s0
 8007a48:	b507      	push	{r0, r1, r2, lr}
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <cosf+0x80>)
 8007a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a50:	4293      	cmp	r3, r2
 8007a52:	dc06      	bgt.n	8007a62 <cosf+0x1e>
 8007a54:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8007ac8 <cosf+0x84>
 8007a58:	b003      	add	sp, #12
 8007a5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a5e:	f000 bd63 	b.w	8008528 <__kernel_cosf>
 8007a62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a66:	db04      	blt.n	8007a72 <cosf+0x2e>
 8007a68:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007a6c:	b003      	add	sp, #12
 8007a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a72:	4668      	mov	r0, sp
 8007a74:	f000 fc1c 	bl	80082b0 <__ieee754_rem_pio2f>
 8007a78:	f000 0003 	and.w	r0, r0, #3
 8007a7c:	2801      	cmp	r0, #1
 8007a7e:	d009      	beq.n	8007a94 <cosf+0x50>
 8007a80:	2802      	cmp	r0, #2
 8007a82:	d010      	beq.n	8007aa6 <cosf+0x62>
 8007a84:	b9b0      	cbnz	r0, 8007ab4 <cosf+0x70>
 8007a86:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a8a:	ed9d 0a00 	vldr	s0, [sp]
 8007a8e:	f000 fd4b 	bl	8008528 <__kernel_cosf>
 8007a92:	e7eb      	b.n	8007a6c <cosf+0x28>
 8007a94:	eddd 0a01 	vldr	s1, [sp, #4]
 8007a98:	ed9d 0a00 	vldr	s0, [sp]
 8007a9c:	f001 f81a 	bl	8008ad4 <__kernel_sinf>
 8007aa0:	eeb1 0a40 	vneg.f32	s0, s0
 8007aa4:	e7e2      	b.n	8007a6c <cosf+0x28>
 8007aa6:	eddd 0a01 	vldr	s1, [sp, #4]
 8007aaa:	ed9d 0a00 	vldr	s0, [sp]
 8007aae:	f000 fd3b 	bl	8008528 <__kernel_cosf>
 8007ab2:	e7f5      	b.n	8007aa0 <cosf+0x5c>
 8007ab4:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ab8:	ed9d 0a00 	vldr	s0, [sp]
 8007abc:	2001      	movs	r0, #1
 8007abe:	f001 f809 	bl	8008ad4 <__kernel_sinf>
 8007ac2:	e7d3      	b.n	8007a6c <cosf+0x28>
 8007ac4:	3f490fd8 	.word	0x3f490fd8
 8007ac8:	00000000 	.word	0x00000000

08007acc <asin>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	ed2d 8b02 	vpush	{d8}
 8007ad2:	ec55 4b10 	vmov	r4, r5, d0
 8007ad6:	f000 f85b 	bl	8007b90 <__ieee754_asin>
 8007ada:	4622      	mov	r2, r4
 8007adc:	462b      	mov	r3, r5
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	eeb0 8a40 	vmov.f32	s16, s0
 8007ae6:	eef0 8a60 	vmov.f32	s17, s1
 8007aea:	f7f8 ffe3 	bl	8000ab4 <__aeabi_dcmpun>
 8007aee:	b9a8      	cbnz	r0, 8007b1c <asin+0x50>
 8007af0:	ec45 4b10 	vmov	d0, r4, r5
 8007af4:	f001 f9d8 	bl	8008ea8 <fabs>
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <asin+0x60>)
 8007afa:	ec51 0b10 	vmov	r0, r1, d0
 8007afe:	2200      	movs	r2, #0
 8007b00:	f7f8 ffce 	bl	8000aa0 <__aeabi_dcmpgt>
 8007b04:	b150      	cbz	r0, 8007b1c <asin+0x50>
 8007b06:	f001 fa9f 	bl	8009048 <__errno>
 8007b0a:	ecbd 8b02 	vpop	{d8}
 8007b0e:	2321      	movs	r3, #33	; 0x21
 8007b10:	6003      	str	r3, [r0, #0]
 8007b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b16:	4806      	ldr	r0, [pc, #24]	; (8007b30 <asin+0x64>)
 8007b18:	f001 b9d2 	b.w	8008ec0 <nan>
 8007b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b20:	eef0 0a68 	vmov.f32	s1, s17
 8007b24:	ecbd 8b02 	vpop	{d8}
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	bf00      	nop
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	08009100 	.word	0x08009100

08007b34 <atan2>:
 8007b34:	f000 ba40 	b.w	8007fb8 <__ieee754_atan2>

08007b38 <sqrt>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	ed2d 8b02 	vpush	{d8}
 8007b3e:	ec55 4b10 	vmov	r4, r5, d0
 8007b42:	f000 fb03 	bl	800814c <__ieee754_sqrt>
 8007b46:	4622      	mov	r2, r4
 8007b48:	462b      	mov	r3, r5
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007b52:	eef0 8a60 	vmov.f32	s17, s1
 8007b56:	f7f8 ffad 	bl	8000ab4 <__aeabi_dcmpun>
 8007b5a:	b990      	cbnz	r0, 8007b82 <sqrt+0x4a>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4620      	mov	r0, r4
 8007b62:	4629      	mov	r1, r5
 8007b64:	f7f8 ff7e 	bl	8000a64 <__aeabi_dcmplt>
 8007b68:	b158      	cbz	r0, 8007b82 <sqrt+0x4a>
 8007b6a:	f001 fa6d 	bl	8009048 <__errno>
 8007b6e:	2321      	movs	r3, #33	; 0x21
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	2300      	movs	r3, #0
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f7f8 fe2b 	bl	80007d4 <__aeabi_ddiv>
 8007b7e:	ec41 0b18 	vmov	d8, r0, r1
 8007b82:	eeb0 0a48 	vmov.f32	s0, s16
 8007b86:	eef0 0a68 	vmov.f32	s1, s17
 8007b8a:	ecbd 8b02 	vpop	{d8}
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}

08007b90 <__ieee754_asin>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	ed2d 8b04 	vpush	{d8-d9}
 8007b98:	ec55 4b10 	vmov	r4, r5, d0
 8007b9c:	4bcc      	ldr	r3, [pc, #816]	; (8007ed0 <__ieee754_asin+0x340>)
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007ba4:	4598      	cmp	r8, r3
 8007ba6:	9501      	str	r5, [sp, #4]
 8007ba8:	dd35      	ble.n	8007c16 <__ieee754_asin+0x86>
 8007baa:	ee10 3a10 	vmov	r3, s0
 8007bae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007bb2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007bb6:	ea58 0303 	orrs.w	r3, r8, r3
 8007bba:	d117      	bne.n	8007bec <__ieee754_asin+0x5c>
 8007bbc:	a3aa      	add	r3, pc, #680	; (adr r3, 8007e68 <__ieee754_asin+0x2d8>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	ee10 0a10 	vmov	r0, s0
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fcda 	bl	8000580 <__aeabi_dmul>
 8007bcc:	a3a8      	add	r3, pc, #672	; (adr r3, 8007e70 <__ieee754_asin+0x2e0>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 fcd1 	bl	8000580 <__aeabi_dmul>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4630      	mov	r0, r6
 8007be4:	4639      	mov	r1, r7
 8007be6:	f7f8 fb15 	bl	8000214 <__adddf3>
 8007bea:	e00b      	b.n	8007c04 <__ieee754_asin+0x74>
 8007bec:	ee10 2a10 	vmov	r2, s0
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	ee10 0a10 	vmov	r0, s0
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	f7f8 fb0a 	bl	8000210 <__aeabi_dsub>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	f7f8 fde8 	bl	80007d4 <__aeabi_ddiv>
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	ec45 4b10 	vmov	d0, r4, r5
 8007c0c:	b003      	add	sp, #12
 8007c0e:	ecbd 8b04 	vpop	{d8-d9}
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	4baf      	ldr	r3, [pc, #700]	; (8007ed4 <__ieee754_asin+0x344>)
 8007c18:	4598      	cmp	r8, r3
 8007c1a:	dc11      	bgt.n	8007c40 <__ieee754_asin+0xb0>
 8007c1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007c20:	f280 80ae 	bge.w	8007d80 <__ieee754_asin+0x1f0>
 8007c24:	a394      	add	r3, pc, #592	; (adr r3, 8007e78 <__ieee754_asin+0x2e8>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	ee10 0a10 	vmov	r0, s0
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f7f8 faf0 	bl	8000214 <__adddf3>
 8007c34:	4ba8      	ldr	r3, [pc, #672]	; (8007ed8 <__ieee754_asin+0x348>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	f7f8 ff32 	bl	8000aa0 <__aeabi_dcmpgt>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d1e3      	bne.n	8007c08 <__ieee754_asin+0x78>
 8007c40:	ec45 4b10 	vmov	d0, r4, r5
 8007c44:	f001 f930 	bl	8008ea8 <fabs>
 8007c48:	49a3      	ldr	r1, [pc, #652]	; (8007ed8 <__ieee754_asin+0x348>)
 8007c4a:	ec53 2b10 	vmov	r2, r3, d0
 8007c4e:	2000      	movs	r0, #0
 8007c50:	f7f8 fade 	bl	8000210 <__aeabi_dsub>
 8007c54:	4ba1      	ldr	r3, [pc, #644]	; (8007edc <__ieee754_asin+0x34c>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	f7f8 fc92 	bl	8000580 <__aeabi_dmul>
 8007c5c:	a388      	add	r3, pc, #544	; (adr r3, 8007e80 <__ieee754_asin+0x2f0>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	4604      	mov	r4, r0
 8007c64:	460d      	mov	r5, r1
 8007c66:	f7f8 fc8b 	bl	8000580 <__aeabi_dmul>
 8007c6a:	a387      	add	r3, pc, #540	; (adr r3, 8007e88 <__ieee754_asin+0x2f8>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 fad0 	bl	8000214 <__adddf3>
 8007c74:	4622      	mov	r2, r4
 8007c76:	462b      	mov	r3, r5
 8007c78:	f7f8 fc82 	bl	8000580 <__aeabi_dmul>
 8007c7c:	a384      	add	r3, pc, #528	; (adr r3, 8007e90 <__ieee754_asin+0x300>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fac5 	bl	8000210 <__aeabi_dsub>
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	f7f8 fc79 	bl	8000580 <__aeabi_dmul>
 8007c8e:	a382      	add	r3, pc, #520	; (adr r3, 8007e98 <__ieee754_asin+0x308>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fabe 	bl	8000214 <__adddf3>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	462b      	mov	r3, r5
 8007c9c:	f7f8 fc70 	bl	8000580 <__aeabi_dmul>
 8007ca0:	a37f      	add	r3, pc, #508	; (adr r3, 8007ea0 <__ieee754_asin+0x310>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fab3 	bl	8000210 <__aeabi_dsub>
 8007caa:	4622      	mov	r2, r4
 8007cac:	462b      	mov	r3, r5
 8007cae:	f7f8 fc67 	bl	8000580 <__aeabi_dmul>
 8007cb2:	a37d      	add	r3, pc, #500	; (adr r3, 8007ea8 <__ieee754_asin+0x318>)
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f7f8 faac 	bl	8000214 <__adddf3>
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	f7f8 fc5e 	bl	8000580 <__aeabi_dmul>
 8007cc4:	a37a      	add	r3, pc, #488	; (adr r3, 8007eb0 <__ieee754_asin+0x320>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	ec41 0b18 	vmov	d8, r0, r1
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fc55 	bl	8000580 <__aeabi_dmul>
 8007cd6:	a378      	add	r3, pc, #480	; (adr r3, 8007eb8 <__ieee754_asin+0x328>)
 8007cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cdc:	f7f8 fa98 	bl	8000210 <__aeabi_dsub>
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	f7f8 fc4c 	bl	8000580 <__aeabi_dmul>
 8007ce8:	a375      	add	r3, pc, #468	; (adr r3, 8007ec0 <__ieee754_asin+0x330>)
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f7f8 fa91 	bl	8000214 <__adddf3>
 8007cf2:	4622      	mov	r2, r4
 8007cf4:	462b      	mov	r3, r5
 8007cf6:	f7f8 fc43 	bl	8000580 <__aeabi_dmul>
 8007cfa:	a373      	add	r3, pc, #460	; (adr r3, 8007ec8 <__ieee754_asin+0x338>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fa86 	bl	8000210 <__aeabi_dsub>
 8007d04:	4622      	mov	r2, r4
 8007d06:	462b      	mov	r3, r5
 8007d08:	f7f8 fc3a 	bl	8000580 <__aeabi_dmul>
 8007d0c:	4b72      	ldr	r3, [pc, #456]	; (8007ed8 <__ieee754_asin+0x348>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f7f8 fa80 	bl	8000214 <__adddf3>
 8007d14:	ec45 4b10 	vmov	d0, r4, r5
 8007d18:	4606      	mov	r6, r0
 8007d1a:	460f      	mov	r7, r1
 8007d1c:	f000 fa16 	bl	800814c <__ieee754_sqrt>
 8007d20:	4b6f      	ldr	r3, [pc, #444]	; (8007ee0 <__ieee754_asin+0x350>)
 8007d22:	4598      	cmp	r8, r3
 8007d24:	ec5b ab10 	vmov	sl, fp, d0
 8007d28:	f340 80dc 	ble.w	8007ee4 <__ieee754_asin+0x354>
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	ec51 0b18 	vmov	r0, r1, d8
 8007d34:	f7f8 fd4e 	bl	80007d4 <__aeabi_ddiv>
 8007d38:	4652      	mov	r2, sl
 8007d3a:	465b      	mov	r3, fp
 8007d3c:	f7f8 fc20 	bl	8000580 <__aeabi_dmul>
 8007d40:	4652      	mov	r2, sl
 8007d42:	465b      	mov	r3, fp
 8007d44:	f7f8 fa66 	bl	8000214 <__adddf3>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	f7f8 fa62 	bl	8000214 <__adddf3>
 8007d50:	a347      	add	r3, pc, #284	; (adr r3, 8007e70 <__ieee754_asin+0x2e0>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f7f8 fa5b 	bl	8000210 <__aeabi_dsub>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	a142      	add	r1, pc, #264	; (adr r1, 8007e68 <__ieee754_asin+0x2d8>)
 8007d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d64:	f7f8 fa54 	bl	8000210 <__aeabi_dsub>
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfdc      	itt	le
 8007d6e:	4602      	movle	r2, r0
 8007d70:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007d74:	4604      	mov	r4, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	bfdc      	itt	le
 8007d7a:	4614      	movle	r4, r2
 8007d7c:	461d      	movle	r5, r3
 8007d7e:	e743      	b.n	8007c08 <__ieee754_asin+0x78>
 8007d80:	ee10 2a10 	vmov	r2, s0
 8007d84:	ee10 0a10 	vmov	r0, s0
 8007d88:	462b      	mov	r3, r5
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fbf8 	bl	8000580 <__aeabi_dmul>
 8007d90:	a33b      	add	r3, pc, #236	; (adr r3, 8007e80 <__ieee754_asin+0x2f0>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	f7f8 fbf1 	bl	8000580 <__aeabi_dmul>
 8007d9e:	a33a      	add	r3, pc, #232	; (adr r3, 8007e88 <__ieee754_asin+0x2f8>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fa36 	bl	8000214 <__adddf3>
 8007da8:	4632      	mov	r2, r6
 8007daa:	463b      	mov	r3, r7
 8007dac:	f7f8 fbe8 	bl	8000580 <__aeabi_dmul>
 8007db0:	a337      	add	r3, pc, #220	; (adr r3, 8007e90 <__ieee754_asin+0x300>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa2b 	bl	8000210 <__aeabi_dsub>
 8007dba:	4632      	mov	r2, r6
 8007dbc:	463b      	mov	r3, r7
 8007dbe:	f7f8 fbdf 	bl	8000580 <__aeabi_dmul>
 8007dc2:	a335      	add	r3, pc, #212	; (adr r3, 8007e98 <__ieee754_asin+0x308>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fa24 	bl	8000214 <__adddf3>
 8007dcc:	4632      	mov	r2, r6
 8007dce:	463b      	mov	r3, r7
 8007dd0:	f7f8 fbd6 	bl	8000580 <__aeabi_dmul>
 8007dd4:	a332      	add	r3, pc, #200	; (adr r3, 8007ea0 <__ieee754_asin+0x310>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fa19 	bl	8000210 <__aeabi_dsub>
 8007dde:	4632      	mov	r2, r6
 8007de0:	463b      	mov	r3, r7
 8007de2:	f7f8 fbcd 	bl	8000580 <__aeabi_dmul>
 8007de6:	a330      	add	r3, pc, #192	; (adr r3, 8007ea8 <__ieee754_asin+0x318>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fa12 	bl	8000214 <__adddf3>
 8007df0:	4632      	mov	r2, r6
 8007df2:	463b      	mov	r3, r7
 8007df4:	f7f8 fbc4 	bl	8000580 <__aeabi_dmul>
 8007df8:	a32d      	add	r3, pc, #180	; (adr r3, 8007eb0 <__ieee754_asin+0x320>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	4680      	mov	r8, r0
 8007e00:	4689      	mov	r9, r1
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 fbbb 	bl	8000580 <__aeabi_dmul>
 8007e0a:	a32b      	add	r3, pc, #172	; (adr r3, 8007eb8 <__ieee754_asin+0x328>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 f9fe 	bl	8000210 <__aeabi_dsub>
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	f7f8 fbb2 	bl	8000580 <__aeabi_dmul>
 8007e1c:	a328      	add	r3, pc, #160	; (adr r3, 8007ec0 <__ieee754_asin+0x330>)
 8007e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e22:	f7f8 f9f7 	bl	8000214 <__adddf3>
 8007e26:	4632      	mov	r2, r6
 8007e28:	463b      	mov	r3, r7
 8007e2a:	f7f8 fba9 	bl	8000580 <__aeabi_dmul>
 8007e2e:	a326      	add	r3, pc, #152	; (adr r3, 8007ec8 <__ieee754_asin+0x338>)
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 f9ec 	bl	8000210 <__aeabi_dsub>
 8007e38:	4632      	mov	r2, r6
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	f7f8 fba0 	bl	8000580 <__aeabi_dmul>
 8007e40:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <__ieee754_asin+0x348>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	f7f8 f9e6 	bl	8000214 <__adddf3>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fcc0 	bl	80007d4 <__aeabi_ddiv>
 8007e54:	4622      	mov	r2, r4
 8007e56:	462b      	mov	r3, r5
 8007e58:	f7f8 fb92 	bl	8000580 <__aeabi_dmul>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4620      	mov	r0, r4
 8007e62:	4629      	mov	r1, r5
 8007e64:	e6bf      	b.n	8007be6 <__ieee754_asin+0x56>
 8007e66:	bf00      	nop
 8007e68:	54442d18 	.word	0x54442d18
 8007e6c:	3ff921fb 	.word	0x3ff921fb
 8007e70:	33145c07 	.word	0x33145c07
 8007e74:	3c91a626 	.word	0x3c91a626
 8007e78:	8800759c 	.word	0x8800759c
 8007e7c:	7e37e43c 	.word	0x7e37e43c
 8007e80:	0dfdf709 	.word	0x0dfdf709
 8007e84:	3f023de1 	.word	0x3f023de1
 8007e88:	7501b288 	.word	0x7501b288
 8007e8c:	3f49efe0 	.word	0x3f49efe0
 8007e90:	b5688f3b 	.word	0xb5688f3b
 8007e94:	3fa48228 	.word	0x3fa48228
 8007e98:	0e884455 	.word	0x0e884455
 8007e9c:	3fc9c155 	.word	0x3fc9c155
 8007ea0:	03eb6f7d 	.word	0x03eb6f7d
 8007ea4:	3fd4d612 	.word	0x3fd4d612
 8007ea8:	55555555 	.word	0x55555555
 8007eac:	3fc55555 	.word	0x3fc55555
 8007eb0:	b12e9282 	.word	0xb12e9282
 8007eb4:	3fb3b8c5 	.word	0x3fb3b8c5
 8007eb8:	1b8d0159 	.word	0x1b8d0159
 8007ebc:	3fe6066c 	.word	0x3fe6066c
 8007ec0:	9c598ac8 	.word	0x9c598ac8
 8007ec4:	40002ae5 	.word	0x40002ae5
 8007ec8:	1c8a2d4b 	.word	0x1c8a2d4b
 8007ecc:	40033a27 	.word	0x40033a27
 8007ed0:	3fefffff 	.word	0x3fefffff
 8007ed4:	3fdfffff 	.word	0x3fdfffff
 8007ed8:	3ff00000 	.word	0x3ff00000
 8007edc:	3fe00000 	.word	0x3fe00000
 8007ee0:	3fef3332 	.word	0x3fef3332
 8007ee4:	ee10 2a10 	vmov	r2, s0
 8007ee8:	ee10 0a10 	vmov	r0, s0
 8007eec:	465b      	mov	r3, fp
 8007eee:	4659      	mov	r1, fp
 8007ef0:	f7f8 f990 	bl	8000214 <__adddf3>
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	ec41 0b19 	vmov	d9, r0, r1
 8007efc:	ec51 0b18 	vmov	r0, r1, d8
 8007f00:	f7f8 fc68 	bl	80007d4 <__aeabi_ddiv>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	ec51 0b19 	vmov	r0, r1, d9
 8007f0c:	f7f8 fb38 	bl	8000580 <__aeabi_dmul>
 8007f10:	f04f 0800 	mov.w	r8, #0
 8007f14:	4606      	mov	r6, r0
 8007f16:	460f      	mov	r7, r1
 8007f18:	4642      	mov	r2, r8
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4659      	mov	r1, fp
 8007f20:	f7f8 fb2e 	bl	8000580 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 f970 	bl	8000210 <__aeabi_dsub>
 8007f30:	4642      	mov	r2, r8
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	465b      	mov	r3, fp
 8007f38:	4650      	mov	r0, sl
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	f7f8 f96a 	bl	8000214 <__adddf3>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fc44 	bl	80007d4 <__aeabi_ddiv>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	f7f8 f960 	bl	8000214 <__adddf3>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	a113      	add	r1, pc, #76	; (adr r1, 8007fa8 <__ieee754_asin+0x418>)
 8007f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5e:	f7f8 f957 	bl	8000210 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4630      	mov	r0, r6
 8007f68:	4639      	mov	r1, r7
 8007f6a:	f7f8 f951 	bl	8000210 <__aeabi_dsub>
 8007f6e:	4642      	mov	r2, r8
 8007f70:	4604      	mov	r4, r0
 8007f72:	460d      	mov	r5, r1
 8007f74:	465b      	mov	r3, fp
 8007f76:	4640      	mov	r0, r8
 8007f78:	4659      	mov	r1, fp
 8007f7a:	f7f8 f94b 	bl	8000214 <__adddf3>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	a10b      	add	r1, pc, #44	; (adr r1, 8007fb0 <__ieee754_asin+0x420>)
 8007f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f88:	f7f8 f942 	bl	8000210 <__aeabi_dsub>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4620      	mov	r0, r4
 8007f92:	4629      	mov	r1, r5
 8007f94:	f7f8 f93c 	bl	8000210 <__aeabi_dsub>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	a104      	add	r1, pc, #16	; (adr r1, 8007fb0 <__ieee754_asin+0x420>)
 8007f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa2:	e6df      	b.n	8007d64 <__ieee754_asin+0x1d4>
 8007fa4:	f3af 8000 	nop.w
 8007fa8:	33145c07 	.word	0x33145c07
 8007fac:	3c91a626 	.word	0x3c91a626
 8007fb0:	54442d18 	.word	0x54442d18
 8007fb4:	3fe921fb 	.word	0x3fe921fb

08007fb8 <__ieee754_atan2>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	ec57 6b11 	vmov	r6, r7, d1
 8007fc0:	4273      	negs	r3, r6
 8007fc2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008148 <__ieee754_atan2+0x190>
 8007fc6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007fca:	4333      	orrs	r3, r6
 8007fcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007fd0:	4573      	cmp	r3, lr
 8007fd2:	ec51 0b10 	vmov	r0, r1, d0
 8007fd6:	ee11 8a10 	vmov	r8, s2
 8007fda:	d80a      	bhi.n	8007ff2 <__ieee754_atan2+0x3a>
 8007fdc:	4244      	negs	r4, r0
 8007fde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fe2:	4304      	orrs	r4, r0
 8007fe4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007fe8:	4574      	cmp	r4, lr
 8007fea:	ee10 9a10 	vmov	r9, s0
 8007fee:	468c      	mov	ip, r1
 8007ff0:	d907      	bls.n	8008002 <__ieee754_atan2+0x4a>
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	f7f8 f90d 	bl	8000214 <__adddf3>
 8007ffa:	ec41 0b10 	vmov	d0, r0, r1
 8007ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008002:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008006:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800800a:	4334      	orrs	r4, r6
 800800c:	d103      	bne.n	8008016 <__ieee754_atan2+0x5e>
 800800e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008012:	f000 bda9 	b.w	8008b68 <atan>
 8008016:	17bc      	asrs	r4, r7, #30
 8008018:	f004 0402 	and.w	r4, r4, #2
 800801c:	ea53 0909 	orrs.w	r9, r3, r9
 8008020:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008024:	d107      	bne.n	8008036 <__ieee754_atan2+0x7e>
 8008026:	2c02      	cmp	r4, #2
 8008028:	d060      	beq.n	80080ec <__ieee754_atan2+0x134>
 800802a:	2c03      	cmp	r4, #3
 800802c:	d1e5      	bne.n	8007ffa <__ieee754_atan2+0x42>
 800802e:	a142      	add	r1, pc, #264	; (adr r1, 8008138 <__ieee754_atan2+0x180>)
 8008030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008034:	e7e1      	b.n	8007ffa <__ieee754_atan2+0x42>
 8008036:	ea52 0808 	orrs.w	r8, r2, r8
 800803a:	d106      	bne.n	800804a <__ieee754_atan2+0x92>
 800803c:	f1bc 0f00 	cmp.w	ip, #0
 8008040:	da5f      	bge.n	8008102 <__ieee754_atan2+0x14a>
 8008042:	a13f      	add	r1, pc, #252	; (adr r1, 8008140 <__ieee754_atan2+0x188>)
 8008044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008048:	e7d7      	b.n	8007ffa <__ieee754_atan2+0x42>
 800804a:	4572      	cmp	r2, lr
 800804c:	d10f      	bne.n	800806e <__ieee754_atan2+0xb6>
 800804e:	4293      	cmp	r3, r2
 8008050:	f104 34ff 	add.w	r4, r4, #4294967295
 8008054:	d107      	bne.n	8008066 <__ieee754_atan2+0xae>
 8008056:	2c02      	cmp	r4, #2
 8008058:	d84c      	bhi.n	80080f4 <__ieee754_atan2+0x13c>
 800805a:	4b35      	ldr	r3, [pc, #212]	; (8008130 <__ieee754_atan2+0x178>)
 800805c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008060:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008064:	e7c9      	b.n	8007ffa <__ieee754_atan2+0x42>
 8008066:	2c02      	cmp	r4, #2
 8008068:	d848      	bhi.n	80080fc <__ieee754_atan2+0x144>
 800806a:	4b32      	ldr	r3, [pc, #200]	; (8008134 <__ieee754_atan2+0x17c>)
 800806c:	e7f6      	b.n	800805c <__ieee754_atan2+0xa4>
 800806e:	4573      	cmp	r3, lr
 8008070:	d0e4      	beq.n	800803c <__ieee754_atan2+0x84>
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008078:	ea4f 5223 	mov.w	r2, r3, asr #20
 800807c:	da1e      	bge.n	80080bc <__ieee754_atan2+0x104>
 800807e:	2f00      	cmp	r7, #0
 8008080:	da01      	bge.n	8008086 <__ieee754_atan2+0xce>
 8008082:	323c      	adds	r2, #60	; 0x3c
 8008084:	db1e      	blt.n	80080c4 <__ieee754_atan2+0x10c>
 8008086:	4632      	mov	r2, r6
 8008088:	463b      	mov	r3, r7
 800808a:	f7f8 fba3 	bl	80007d4 <__aeabi_ddiv>
 800808e:	ec41 0b10 	vmov	d0, r0, r1
 8008092:	f000 ff09 	bl	8008ea8 <fabs>
 8008096:	f000 fd67 	bl	8008b68 <atan>
 800809a:	ec51 0b10 	vmov	r0, r1, d0
 800809e:	2c01      	cmp	r4, #1
 80080a0:	d013      	beq.n	80080ca <__ieee754_atan2+0x112>
 80080a2:	2c02      	cmp	r4, #2
 80080a4:	d015      	beq.n	80080d2 <__ieee754_atan2+0x11a>
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	d0a7      	beq.n	8007ffa <__ieee754_atan2+0x42>
 80080aa:	a319      	add	r3, pc, #100	; (adr r3, 8008110 <__ieee754_atan2+0x158>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 f8ae 	bl	8000210 <__aeabi_dsub>
 80080b4:	a318      	add	r3, pc, #96	; (adr r3, 8008118 <__ieee754_atan2+0x160>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	e014      	b.n	80080e6 <__ieee754_atan2+0x12e>
 80080bc:	a118      	add	r1, pc, #96	; (adr r1, 8008120 <__ieee754_atan2+0x168>)
 80080be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c2:	e7ec      	b.n	800809e <__ieee754_atan2+0xe6>
 80080c4:	2000      	movs	r0, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	e7e9      	b.n	800809e <__ieee754_atan2+0xe6>
 80080ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ce:	4619      	mov	r1, r3
 80080d0:	e793      	b.n	8007ffa <__ieee754_atan2+0x42>
 80080d2:	a30f      	add	r3, pc, #60	; (adr r3, 8008110 <__ieee754_atan2+0x158>)
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f7f8 f89a 	bl	8000210 <__aeabi_dsub>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	a10d      	add	r1, pc, #52	; (adr r1, 8008118 <__ieee754_atan2+0x160>)
 80080e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e6:	f7f8 f893 	bl	8000210 <__aeabi_dsub>
 80080ea:	e786      	b.n	8007ffa <__ieee754_atan2+0x42>
 80080ec:	a10a      	add	r1, pc, #40	; (adr r1, 8008118 <__ieee754_atan2+0x160>)
 80080ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f2:	e782      	b.n	8007ffa <__ieee754_atan2+0x42>
 80080f4:	a10c      	add	r1, pc, #48	; (adr r1, 8008128 <__ieee754_atan2+0x170>)
 80080f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080fa:	e77e      	b.n	8007ffa <__ieee754_atan2+0x42>
 80080fc:	2000      	movs	r0, #0
 80080fe:	2100      	movs	r1, #0
 8008100:	e77b      	b.n	8007ffa <__ieee754_atan2+0x42>
 8008102:	a107      	add	r1, pc, #28	; (adr r1, 8008120 <__ieee754_atan2+0x168>)
 8008104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008108:	e777      	b.n	8007ffa <__ieee754_atan2+0x42>
 800810a:	bf00      	nop
 800810c:	f3af 8000 	nop.w
 8008110:	33145c07 	.word	0x33145c07
 8008114:	3ca1a626 	.word	0x3ca1a626
 8008118:	54442d18 	.word	0x54442d18
 800811c:	400921fb 	.word	0x400921fb
 8008120:	54442d18 	.word	0x54442d18
 8008124:	3ff921fb 	.word	0x3ff921fb
 8008128:	54442d18 	.word	0x54442d18
 800812c:	3fe921fb 	.word	0x3fe921fb
 8008130:	08009108 	.word	0x08009108
 8008134:	08009120 	.word	0x08009120
 8008138:	54442d18 	.word	0x54442d18
 800813c:	c00921fb 	.word	0xc00921fb
 8008140:	54442d18 	.word	0x54442d18
 8008144:	bff921fb 	.word	0xbff921fb
 8008148:	7ff00000 	.word	0x7ff00000

0800814c <__ieee754_sqrt>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	ec55 4b10 	vmov	r4, r5, d0
 8008154:	4e55      	ldr	r6, [pc, #340]	; (80082ac <__ieee754_sqrt+0x160>)
 8008156:	43ae      	bics	r6, r5
 8008158:	ee10 0a10 	vmov	r0, s0
 800815c:	ee10 3a10 	vmov	r3, s0
 8008160:	462a      	mov	r2, r5
 8008162:	4629      	mov	r1, r5
 8008164:	d110      	bne.n	8008188 <__ieee754_sqrt+0x3c>
 8008166:	ee10 2a10 	vmov	r2, s0
 800816a:	462b      	mov	r3, r5
 800816c:	f7f8 fa08 	bl	8000580 <__aeabi_dmul>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4620      	mov	r0, r4
 8008176:	4629      	mov	r1, r5
 8008178:	f7f8 f84c 	bl	8000214 <__adddf3>
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	ec45 4b10 	vmov	d0, r4, r5
 8008184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008188:	2d00      	cmp	r5, #0
 800818a:	dc10      	bgt.n	80081ae <__ieee754_sqrt+0x62>
 800818c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008190:	4330      	orrs	r0, r6
 8008192:	d0f5      	beq.n	8008180 <__ieee754_sqrt+0x34>
 8008194:	b15d      	cbz	r5, 80081ae <__ieee754_sqrt+0x62>
 8008196:	ee10 2a10 	vmov	r2, s0
 800819a:	462b      	mov	r3, r5
 800819c:	ee10 0a10 	vmov	r0, s0
 80081a0:	f7f8 f836 	bl	8000210 <__aeabi_dsub>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	f7f8 fb14 	bl	80007d4 <__aeabi_ddiv>
 80081ac:	e7e6      	b.n	800817c <__ieee754_sqrt+0x30>
 80081ae:	1512      	asrs	r2, r2, #20
 80081b0:	d074      	beq.n	800829c <__ieee754_sqrt+0x150>
 80081b2:	07d4      	lsls	r4, r2, #31
 80081b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80081b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80081bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80081c0:	bf5e      	ittt	pl
 80081c2:	0fda      	lsrpl	r2, r3, #31
 80081c4:	005b      	lslpl	r3, r3, #1
 80081c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80081ca:	2400      	movs	r4, #0
 80081cc:	0fda      	lsrs	r2, r3, #31
 80081ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80081d2:	107f      	asrs	r7, r7, #1
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	2516      	movs	r5, #22
 80081d8:	4620      	mov	r0, r4
 80081da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80081de:	1886      	adds	r6, r0, r2
 80081e0:	428e      	cmp	r6, r1
 80081e2:	bfde      	ittt	le
 80081e4:	1b89      	suble	r1, r1, r6
 80081e6:	18b0      	addle	r0, r6, r2
 80081e8:	18a4      	addle	r4, r4, r2
 80081ea:	0049      	lsls	r1, r1, #1
 80081ec:	3d01      	subs	r5, #1
 80081ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80081f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80081f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081fa:	d1f0      	bne.n	80081de <__ieee754_sqrt+0x92>
 80081fc:	462a      	mov	r2, r5
 80081fe:	f04f 0e20 	mov.w	lr, #32
 8008202:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008206:	4281      	cmp	r1, r0
 8008208:	eb06 0c05 	add.w	ip, r6, r5
 800820c:	dc02      	bgt.n	8008214 <__ieee754_sqrt+0xc8>
 800820e:	d113      	bne.n	8008238 <__ieee754_sqrt+0xec>
 8008210:	459c      	cmp	ip, r3
 8008212:	d811      	bhi.n	8008238 <__ieee754_sqrt+0xec>
 8008214:	f1bc 0f00 	cmp.w	ip, #0
 8008218:	eb0c 0506 	add.w	r5, ip, r6
 800821c:	da43      	bge.n	80082a6 <__ieee754_sqrt+0x15a>
 800821e:	2d00      	cmp	r5, #0
 8008220:	db41      	blt.n	80082a6 <__ieee754_sqrt+0x15a>
 8008222:	f100 0801 	add.w	r8, r0, #1
 8008226:	1a09      	subs	r1, r1, r0
 8008228:	459c      	cmp	ip, r3
 800822a:	bf88      	it	hi
 800822c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008230:	eba3 030c 	sub.w	r3, r3, ip
 8008234:	4432      	add	r2, r6
 8008236:	4640      	mov	r0, r8
 8008238:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800823c:	f1be 0e01 	subs.w	lr, lr, #1
 8008240:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008244:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008248:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800824c:	d1db      	bne.n	8008206 <__ieee754_sqrt+0xba>
 800824e:	430b      	orrs	r3, r1
 8008250:	d006      	beq.n	8008260 <__ieee754_sqrt+0x114>
 8008252:	1c50      	adds	r0, r2, #1
 8008254:	bf13      	iteet	ne
 8008256:	3201      	addne	r2, #1
 8008258:	3401      	addeq	r4, #1
 800825a:	4672      	moveq	r2, lr
 800825c:	f022 0201 	bicne.w	r2, r2, #1
 8008260:	1063      	asrs	r3, r4, #1
 8008262:	0852      	lsrs	r2, r2, #1
 8008264:	07e1      	lsls	r1, r4, #31
 8008266:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800826a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800826e:	bf48      	it	mi
 8008270:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008274:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008278:	4614      	mov	r4, r2
 800827a:	e781      	b.n	8008180 <__ieee754_sqrt+0x34>
 800827c:	0ad9      	lsrs	r1, r3, #11
 800827e:	3815      	subs	r0, #21
 8008280:	055b      	lsls	r3, r3, #21
 8008282:	2900      	cmp	r1, #0
 8008284:	d0fa      	beq.n	800827c <__ieee754_sqrt+0x130>
 8008286:	02cd      	lsls	r5, r1, #11
 8008288:	d50a      	bpl.n	80082a0 <__ieee754_sqrt+0x154>
 800828a:	f1c2 0420 	rsb	r4, r2, #32
 800828e:	fa23 f404 	lsr.w	r4, r3, r4
 8008292:	1e55      	subs	r5, r2, #1
 8008294:	4093      	lsls	r3, r2
 8008296:	4321      	orrs	r1, r4
 8008298:	1b42      	subs	r2, r0, r5
 800829a:	e78a      	b.n	80081b2 <__ieee754_sqrt+0x66>
 800829c:	4610      	mov	r0, r2
 800829e:	e7f0      	b.n	8008282 <__ieee754_sqrt+0x136>
 80082a0:	0049      	lsls	r1, r1, #1
 80082a2:	3201      	adds	r2, #1
 80082a4:	e7ef      	b.n	8008286 <__ieee754_sqrt+0x13a>
 80082a6:	4680      	mov	r8, r0
 80082a8:	e7bd      	b.n	8008226 <__ieee754_sqrt+0xda>
 80082aa:	bf00      	nop
 80082ac:	7ff00000 	.word	0x7ff00000

080082b0 <__ieee754_rem_pio2f>:
 80082b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082b2:	ee10 6a10 	vmov	r6, s0
 80082b6:	4b8e      	ldr	r3, [pc, #568]	; (80084f0 <__ieee754_rem_pio2f+0x240>)
 80082b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80082bc:	429d      	cmp	r5, r3
 80082be:	b087      	sub	sp, #28
 80082c0:	eef0 7a40 	vmov.f32	s15, s0
 80082c4:	4604      	mov	r4, r0
 80082c6:	dc05      	bgt.n	80082d4 <__ieee754_rem_pio2f+0x24>
 80082c8:	2300      	movs	r3, #0
 80082ca:	ed80 0a00 	vstr	s0, [r0]
 80082ce:	6043      	str	r3, [r0, #4]
 80082d0:	2000      	movs	r0, #0
 80082d2:	e01a      	b.n	800830a <__ieee754_rem_pio2f+0x5a>
 80082d4:	4b87      	ldr	r3, [pc, #540]	; (80084f4 <__ieee754_rem_pio2f+0x244>)
 80082d6:	429d      	cmp	r5, r3
 80082d8:	dc46      	bgt.n	8008368 <__ieee754_rem_pio2f+0xb8>
 80082da:	2e00      	cmp	r6, #0
 80082dc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80084f8 <__ieee754_rem_pio2f+0x248>
 80082e0:	4b86      	ldr	r3, [pc, #536]	; (80084fc <__ieee754_rem_pio2f+0x24c>)
 80082e2:	f025 050f 	bic.w	r5, r5, #15
 80082e6:	dd1f      	ble.n	8008328 <__ieee754_rem_pio2f+0x78>
 80082e8:	429d      	cmp	r5, r3
 80082ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80082ee:	d00e      	beq.n	800830e <__ieee754_rem_pio2f+0x5e>
 80082f0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008500 <__ieee754_rem_pio2f+0x250>
 80082f4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80082f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80082fc:	ed80 0a00 	vstr	s0, [r0]
 8008300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008304:	2001      	movs	r0, #1
 8008306:	edc4 7a01 	vstr	s15, [r4, #4]
 800830a:	b007      	add	sp, #28
 800830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008504 <__ieee754_rem_pio2f+0x254>
 8008312:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008508 <__ieee754_rem_pio2f+0x258>
 8008316:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800831a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800831e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008322:	edc0 6a00 	vstr	s13, [r0]
 8008326:	e7eb      	b.n	8008300 <__ieee754_rem_pio2f+0x50>
 8008328:	429d      	cmp	r5, r3
 800832a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800832e:	d00e      	beq.n	800834e <__ieee754_rem_pio2f+0x9e>
 8008330:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008500 <__ieee754_rem_pio2f+0x250>
 8008334:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008338:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800833c:	ed80 0a00 	vstr	s0, [r0]
 8008340:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	edc4 7a01 	vstr	s15, [r4, #4]
 800834c:	e7dd      	b.n	800830a <__ieee754_rem_pio2f+0x5a>
 800834e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008504 <__ieee754_rem_pio2f+0x254>
 8008352:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008508 <__ieee754_rem_pio2f+0x258>
 8008356:	ee77 7a80 	vadd.f32	s15, s15, s0
 800835a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800835e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008362:	edc0 6a00 	vstr	s13, [r0]
 8008366:	e7eb      	b.n	8008340 <__ieee754_rem_pio2f+0x90>
 8008368:	4b68      	ldr	r3, [pc, #416]	; (800850c <__ieee754_rem_pio2f+0x25c>)
 800836a:	429d      	cmp	r5, r3
 800836c:	dc72      	bgt.n	8008454 <__ieee754_rem_pio2f+0x1a4>
 800836e:	f000 fdaf 	bl	8008ed0 <fabsf>
 8008372:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008510 <__ieee754_rem_pio2f+0x260>
 8008376:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800837a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800837e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008386:	ee17 0a90 	vmov	r0, s15
 800838a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80084f8 <__ieee754_rem_pio2f+0x248>
 800838e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008392:	281f      	cmp	r0, #31
 8008394:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008500 <__ieee754_rem_pio2f+0x250>
 8008398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839c:	eeb1 6a47 	vneg.f32	s12, s14
 80083a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80083a4:	ee16 2a90 	vmov	r2, s13
 80083a8:	dc1c      	bgt.n	80083e4 <__ieee754_rem_pio2f+0x134>
 80083aa:	495a      	ldr	r1, [pc, #360]	; (8008514 <__ieee754_rem_pio2f+0x264>)
 80083ac:	1e47      	subs	r7, r0, #1
 80083ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80083b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80083b6:	428b      	cmp	r3, r1
 80083b8:	d014      	beq.n	80083e4 <__ieee754_rem_pio2f+0x134>
 80083ba:	6022      	str	r2, [r4, #0]
 80083bc:	ed94 7a00 	vldr	s14, [r4]
 80083c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80083ca:	ed84 0a01 	vstr	s0, [r4, #4]
 80083ce:	da9c      	bge.n	800830a <__ieee754_rem_pio2f+0x5a>
 80083d0:	eeb1 7a47 	vneg.f32	s14, s14
 80083d4:	eeb1 0a40 	vneg.f32	s0, s0
 80083d8:	ed84 7a00 	vstr	s14, [r4]
 80083dc:	ed84 0a01 	vstr	s0, [r4, #4]
 80083e0:	4240      	negs	r0, r0
 80083e2:	e792      	b.n	800830a <__ieee754_rem_pio2f+0x5a>
 80083e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80083e8:	15eb      	asrs	r3, r5, #23
 80083ea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80083ee:	2d08      	cmp	r5, #8
 80083f0:	dde3      	ble.n	80083ba <__ieee754_rem_pio2f+0x10a>
 80083f2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008504 <__ieee754_rem_pio2f+0x254>
 80083f6:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008508 <__ieee754_rem_pio2f+0x258>
 80083fa:	eef0 6a40 	vmov.f32	s13, s0
 80083fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008402:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008406:	eea6 0a27 	vfma.f32	s0, s12, s15
 800840a:	eef0 7a40 	vmov.f32	s15, s0
 800840e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008412:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008416:	ee15 2a90 	vmov	r2, s11
 800841a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800841e:	1a5b      	subs	r3, r3, r1
 8008420:	2b19      	cmp	r3, #25
 8008422:	dc04      	bgt.n	800842e <__ieee754_rem_pio2f+0x17e>
 8008424:	edc4 5a00 	vstr	s11, [r4]
 8008428:	eeb0 0a66 	vmov.f32	s0, s13
 800842c:	e7c6      	b.n	80083bc <__ieee754_rem_pio2f+0x10c>
 800842e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008518 <__ieee754_rem_pio2f+0x268>
 8008432:	eeb0 0a66 	vmov.f32	s0, s13
 8008436:	eea6 0a25 	vfma.f32	s0, s12, s11
 800843a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800843e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800851c <__ieee754_rem_pio2f+0x26c>
 8008442:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008446:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800844a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800844e:	ed84 7a00 	vstr	s14, [r4]
 8008452:	e7b3      	b.n	80083bc <__ieee754_rem_pio2f+0x10c>
 8008454:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008458:	db06      	blt.n	8008468 <__ieee754_rem_pio2f+0x1b8>
 800845a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800845e:	edc0 7a01 	vstr	s15, [r0, #4]
 8008462:	edc0 7a00 	vstr	s15, [r0]
 8008466:	e733      	b.n	80082d0 <__ieee754_rem_pio2f+0x20>
 8008468:	15ea      	asrs	r2, r5, #23
 800846a:	3a86      	subs	r2, #134	; 0x86
 800846c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008478:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008520 <__ieee754_rem_pio2f+0x270>
 800847c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008484:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008488:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800848c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008498:	ed8d 7a04 	vstr	s14, [sp, #16]
 800849c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a8:	edcd 7a05 	vstr	s15, [sp, #20]
 80084ac:	d11e      	bne.n	80084ec <__ieee754_rem_pio2f+0x23c>
 80084ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80084b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b6:	bf14      	ite	ne
 80084b8:	2302      	movne	r3, #2
 80084ba:	2301      	moveq	r3, #1
 80084bc:	4919      	ldr	r1, [pc, #100]	; (8008524 <__ieee754_rem_pio2f+0x274>)
 80084be:	9101      	str	r1, [sp, #4]
 80084c0:	2102      	movs	r1, #2
 80084c2:	9100      	str	r1, [sp, #0]
 80084c4:	a803      	add	r0, sp, #12
 80084c6:	4621      	mov	r1, r4
 80084c8:	f000 f88e 	bl	80085e8 <__kernel_rem_pio2f>
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	f6bf af1c 	bge.w	800830a <__ieee754_rem_pio2f+0x5a>
 80084d2:	edd4 7a00 	vldr	s15, [r4]
 80084d6:	eef1 7a67 	vneg.f32	s15, s15
 80084da:	edc4 7a00 	vstr	s15, [r4]
 80084de:	edd4 7a01 	vldr	s15, [r4, #4]
 80084e2:	eef1 7a67 	vneg.f32	s15, s15
 80084e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80084ea:	e779      	b.n	80083e0 <__ieee754_rem_pio2f+0x130>
 80084ec:	2303      	movs	r3, #3
 80084ee:	e7e5      	b.n	80084bc <__ieee754_rem_pio2f+0x20c>
 80084f0:	3f490fd8 	.word	0x3f490fd8
 80084f4:	4016cbe3 	.word	0x4016cbe3
 80084f8:	3fc90f80 	.word	0x3fc90f80
 80084fc:	3fc90fd0 	.word	0x3fc90fd0
 8008500:	37354443 	.word	0x37354443
 8008504:	37354400 	.word	0x37354400
 8008508:	2e85a308 	.word	0x2e85a308
 800850c:	43490f80 	.word	0x43490f80
 8008510:	3f22f984 	.word	0x3f22f984
 8008514:	08009138 	.word	0x08009138
 8008518:	2e85a300 	.word	0x2e85a300
 800851c:	248d3132 	.word	0x248d3132
 8008520:	43800000 	.word	0x43800000
 8008524:	080091b8 	.word	0x080091b8

08008528 <__kernel_cosf>:
 8008528:	ee10 3a10 	vmov	r3, s0
 800852c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008530:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008534:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008538:	da05      	bge.n	8008546 <__kernel_cosf+0x1e>
 800853a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800853e:	ee17 2a90 	vmov	r2, s15
 8008542:	2a00      	cmp	r2, #0
 8008544:	d03d      	beq.n	80085c2 <__kernel_cosf+0x9a>
 8008546:	ee60 5a00 	vmul.f32	s11, s0, s0
 800854a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80085c8 <__kernel_cosf+0xa0>
 800854e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80085cc <__kernel_cosf+0xa4>
 8008552:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80085d0 <__kernel_cosf+0xa8>
 8008556:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <__kernel_cosf+0xac>)
 8008558:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800855c:	4293      	cmp	r3, r2
 800855e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80085d8 <__kernel_cosf+0xb0>
 8008562:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008566:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80085dc <__kernel_cosf+0xb4>
 800856a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800856e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80085e0 <__kernel_cosf+0xb8>
 8008572:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008576:	eeb0 7a66 	vmov.f32	s14, s13
 800857a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800857e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008582:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008586:	ee67 6a25 	vmul.f32	s13, s14, s11
 800858a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800858e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008592:	dc04      	bgt.n	800859e <__kernel_cosf+0x76>
 8008594:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008598:	ee36 0a47 	vsub.f32	s0, s12, s14
 800859c:	4770      	bx	lr
 800859e:	4a11      	ldr	r2, [pc, #68]	; (80085e4 <__kernel_cosf+0xbc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bfda      	itte	le
 80085a4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80085a8:	ee06 3a90 	vmovle	s13, r3
 80085ac:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80085b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085b4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80085b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80085c0:	4770      	bx	lr
 80085c2:	eeb0 0a46 	vmov.f32	s0, s12
 80085c6:	4770      	bx	lr
 80085c8:	ad47d74e 	.word	0xad47d74e
 80085cc:	310f74f6 	.word	0x310f74f6
 80085d0:	3d2aaaab 	.word	0x3d2aaaab
 80085d4:	3e999999 	.word	0x3e999999
 80085d8:	b493f27c 	.word	0xb493f27c
 80085dc:	37d00d01 	.word	0x37d00d01
 80085e0:	bab60b61 	.word	0xbab60b61
 80085e4:	3f480000 	.word	0x3f480000

080085e8 <__kernel_rem_pio2f>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	ed2d 8b04 	vpush	{d8-d9}
 80085f0:	b0d9      	sub	sp, #356	; 0x164
 80085f2:	4688      	mov	r8, r1
 80085f4:	9002      	str	r0, [sp, #8]
 80085f6:	49bb      	ldr	r1, [pc, #748]	; (80088e4 <__kernel_rem_pio2f+0x2fc>)
 80085f8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008600:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008604:	1e59      	subs	r1, r3, #1
 8008606:	1d13      	adds	r3, r2, #4
 8008608:	db27      	blt.n	800865a <__kernel_rem_pio2f+0x72>
 800860a:	f1b2 0b03 	subs.w	fp, r2, #3
 800860e:	bf48      	it	mi
 8008610:	f102 0b04 	addmi.w	fp, r2, #4
 8008614:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008618:	1c45      	adds	r5, r0, #1
 800861a:	00ec      	lsls	r4, r5, #3
 800861c:	1a47      	subs	r7, r0, r1
 800861e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 8008622:	9403      	str	r4, [sp, #12]
 8008624:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008628:	eb0a 0c01 	add.w	ip, sl, r1
 800862c:	ae1c      	add	r6, sp, #112	; 0x70
 800862e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008632:	2400      	movs	r4, #0
 8008634:	4564      	cmp	r4, ip
 8008636:	dd12      	ble.n	800865e <__kernel_rem_pio2f+0x76>
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	ac1c      	add	r4, sp, #112	; 0x70
 800863c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008640:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008644:	f04f 0c00 	mov.w	ip, #0
 8008648:	45d4      	cmp	ip, sl
 800864a:	dc27      	bgt.n	800869c <__kernel_rem_pio2f+0xb4>
 800864c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008650:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 8008654:	4627      	mov	r7, r4
 8008656:	2600      	movs	r6, #0
 8008658:	e016      	b.n	8008688 <__kernel_rem_pio2f+0xa0>
 800865a:	2000      	movs	r0, #0
 800865c:	e7dc      	b.n	8008618 <__kernel_rem_pio2f+0x30>
 800865e:	42e7      	cmn	r7, r4
 8008660:	bf5d      	ittte	pl
 8008662:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008666:	ee07 3a90 	vmovpl	s15, r3
 800866a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800866e:	eef0 7a47 	vmovmi.f32	s15, s14
 8008672:	ece6 7a01 	vstmia	r6!, {s15}
 8008676:	3401      	adds	r4, #1
 8008678:	e7dc      	b.n	8008634 <__kernel_rem_pio2f+0x4c>
 800867a:	ecf9 6a01 	vldmia	r9!, {s13}
 800867e:	ed97 7a00 	vldr	s14, [r7]
 8008682:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008686:	3601      	adds	r6, #1
 8008688:	428e      	cmp	r6, r1
 800868a:	f1a7 0704 	sub.w	r7, r7, #4
 800868e:	ddf4      	ble.n	800867a <__kernel_rem_pio2f+0x92>
 8008690:	eceb 7a01 	vstmia	fp!, {s15}
 8008694:	f10c 0c01 	add.w	ip, ip, #1
 8008698:	3404      	adds	r4, #4
 800869a:	e7d5      	b.n	8008648 <__kernel_rem_pio2f+0x60>
 800869c:	ab08      	add	r3, sp, #32
 800869e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80086a2:	eddf 8a93 	vldr	s17, [pc, #588]	; 80088f0 <__kernel_rem_pio2f+0x308>
 80086a6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80088ec <__kernel_rem_pio2f+0x304>
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80086b0:	4656      	mov	r6, sl
 80086b2:	00b3      	lsls	r3, r6, #2
 80086b4:	9305      	str	r3, [sp, #20]
 80086b6:	ab58      	add	r3, sp, #352	; 0x160
 80086b8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80086bc:	ac08      	add	r4, sp, #32
 80086be:	ab44      	add	r3, sp, #272	; 0x110
 80086c0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80086c4:	46a4      	mov	ip, r4
 80086c6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80086ca:	4637      	mov	r7, r6
 80086cc:	2f00      	cmp	r7, #0
 80086ce:	f1a0 0004 	sub.w	r0, r0, #4
 80086d2:	dc4f      	bgt.n	8008774 <__kernel_rem_pio2f+0x18c>
 80086d4:	4628      	mov	r0, r5
 80086d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80086da:	f000 fc43 	bl	8008f64 <scalbnf>
 80086de:	eeb0 8a40 	vmov.f32	s16, s0
 80086e2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80086e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80086ea:	f000 fbf9 	bl	8008ee0 <floorf>
 80086ee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80086f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80086f6:	2d00      	cmp	r5, #0
 80086f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80086fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008700:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008704:	ee17 9a90 	vmov	r9, s15
 8008708:	ee38 8a40 	vsub.f32	s16, s16, s0
 800870c:	dd44      	ble.n	8008798 <__kernel_rem_pio2f+0x1b0>
 800870e:	f106 3cff 	add.w	ip, r6, #4294967295
 8008712:	ab08      	add	r3, sp, #32
 8008714:	f1c5 0e08 	rsb	lr, r5, #8
 8008718:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800871c:	fa47 f00e 	asr.w	r0, r7, lr
 8008720:	4481      	add	r9, r0
 8008722:	fa00 f00e 	lsl.w	r0, r0, lr
 8008726:	1a3f      	subs	r7, r7, r0
 8008728:	f1c5 0007 	rsb	r0, r5, #7
 800872c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008730:	4107      	asrs	r7, r0
 8008732:	2f00      	cmp	r7, #0
 8008734:	dd3f      	ble.n	80087b6 <__kernel_rem_pio2f+0x1ce>
 8008736:	f04f 0e00 	mov.w	lr, #0
 800873a:	f109 0901 	add.w	r9, r9, #1
 800873e:	4673      	mov	r3, lr
 8008740:	4576      	cmp	r6, lr
 8008742:	dc6b      	bgt.n	800881c <__kernel_rem_pio2f+0x234>
 8008744:	2d00      	cmp	r5, #0
 8008746:	dd04      	ble.n	8008752 <__kernel_rem_pio2f+0x16a>
 8008748:	2d01      	cmp	r5, #1
 800874a:	d078      	beq.n	800883e <__kernel_rem_pio2f+0x256>
 800874c:	2d02      	cmp	r5, #2
 800874e:	f000 8081 	beq.w	8008854 <__kernel_rem_pio2f+0x26c>
 8008752:	2f02      	cmp	r7, #2
 8008754:	d12f      	bne.n	80087b6 <__kernel_rem_pio2f+0x1ce>
 8008756:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800875a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800875e:	b353      	cbz	r3, 80087b6 <__kernel_rem_pio2f+0x1ce>
 8008760:	4628      	mov	r0, r5
 8008762:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008766:	f000 fbfd 	bl	8008f64 <scalbnf>
 800876a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800876e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008772:	e020      	b.n	80087b6 <__kernel_rem_pio2f+0x1ce>
 8008774:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008778:	3f01      	subs	r7, #1
 800877a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800877e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008782:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008786:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800878a:	ecac 0a01 	vstmia	ip!, {s0}
 800878e:	ed90 0a00 	vldr	s0, [r0]
 8008792:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008796:	e799      	b.n	80086cc <__kernel_rem_pio2f+0xe4>
 8008798:	d105      	bne.n	80087a6 <__kernel_rem_pio2f+0x1be>
 800879a:	1e70      	subs	r0, r6, #1
 800879c:	ab08      	add	r3, sp, #32
 800879e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80087a2:	11ff      	asrs	r7, r7, #7
 80087a4:	e7c5      	b.n	8008732 <__kernel_rem_pio2f+0x14a>
 80087a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80087aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80087ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b2:	da31      	bge.n	8008818 <__kernel_rem_pio2f+0x230>
 80087b4:	2700      	movs	r7, #0
 80087b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80087ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087be:	f040 809b 	bne.w	80088f8 <__kernel_rem_pio2f+0x310>
 80087c2:	1e74      	subs	r4, r6, #1
 80087c4:	46a4      	mov	ip, r4
 80087c6:	2000      	movs	r0, #0
 80087c8:	45d4      	cmp	ip, sl
 80087ca:	da4a      	bge.n	8008862 <__kernel_rem_pio2f+0x27a>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d07a      	beq.n	80088c6 <__kernel_rem_pio2f+0x2de>
 80087d0:	ab08      	add	r3, sp, #32
 80087d2:	3d08      	subs	r5, #8
 80087d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8081 	beq.w	80088e0 <__kernel_rem_pio2f+0x2f8>
 80087de:	4628      	mov	r0, r5
 80087e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087e4:	00a5      	lsls	r5, r4, #2
 80087e6:	f000 fbbd 	bl	8008f64 <scalbnf>
 80087ea:	aa44      	add	r2, sp, #272	; 0x110
 80087ec:	1d2b      	adds	r3, r5, #4
 80087ee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80088f0 <__kernel_rem_pio2f+0x308>
 80087f2:	18d1      	adds	r1, r2, r3
 80087f4:	4622      	mov	r2, r4
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	f280 80ae 	bge.w	8008958 <__kernel_rem_pio2f+0x370>
 80087fc:	4622      	mov	r2, r4
 80087fe:	2a00      	cmp	r2, #0
 8008800:	f2c0 80cc 	blt.w	800899c <__kernel_rem_pio2f+0x3b4>
 8008804:	a944      	add	r1, sp, #272	; 0x110
 8008806:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800880a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80088e8 <__kernel_rem_pio2f+0x300>
 800880e:	eddf 7a39 	vldr	s15, [pc, #228]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 8008812:	2000      	movs	r0, #0
 8008814:	1aa1      	subs	r1, r4, r2
 8008816:	e0b6      	b.n	8008986 <__kernel_rem_pio2f+0x39e>
 8008818:	2702      	movs	r7, #2
 800881a:	e78c      	b.n	8008736 <__kernel_rem_pio2f+0x14e>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	b94b      	cbnz	r3, 8008834 <__kernel_rem_pio2f+0x24c>
 8008820:	b118      	cbz	r0, 800882a <__kernel_rem_pio2f+0x242>
 8008822:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008826:	6020      	str	r0, [r4, #0]
 8008828:	2001      	movs	r0, #1
 800882a:	f10e 0e01 	add.w	lr, lr, #1
 800882e:	3404      	adds	r4, #4
 8008830:	4603      	mov	r3, r0
 8008832:	e785      	b.n	8008740 <__kernel_rem_pio2f+0x158>
 8008834:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008838:	6020      	str	r0, [r4, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	e7f5      	b.n	800882a <__kernel_rem_pio2f+0x242>
 800883e:	1e74      	subs	r4, r6, #1
 8008840:	a808      	add	r0, sp, #32
 8008842:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008846:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800884a:	f10d 0c20 	add.w	ip, sp, #32
 800884e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008852:	e77e      	b.n	8008752 <__kernel_rem_pio2f+0x16a>
 8008854:	1e74      	subs	r4, r6, #1
 8008856:	a808      	add	r0, sp, #32
 8008858:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800885c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008860:	e7f3      	b.n	800884a <__kernel_rem_pio2f+0x262>
 8008862:	ab08      	add	r3, sp, #32
 8008864:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008868:	f10c 3cff 	add.w	ip, ip, #4294967295
 800886c:	4318      	orrs	r0, r3
 800886e:	e7ab      	b.n	80087c8 <__kernel_rem_pio2f+0x1e0>
 8008870:	f10c 0c01 	add.w	ip, ip, #1
 8008874:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008878:	2c00      	cmp	r4, #0
 800887a:	d0f9      	beq.n	8008870 <__kernel_rem_pio2f+0x288>
 800887c:	9b05      	ldr	r3, [sp, #20]
 800887e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008882:	eb0d 0003 	add.w	r0, sp, r3
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	18f4      	adds	r4, r6, r3
 800888a:	ab1c      	add	r3, sp, #112	; 0x70
 800888c:	1c77      	adds	r7, r6, #1
 800888e:	384c      	subs	r0, #76	; 0x4c
 8008890:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008894:	4466      	add	r6, ip
 8008896:	42be      	cmp	r6, r7
 8008898:	f6ff af0b 	blt.w	80086b2 <__kernel_rem_pio2f+0xca>
 800889c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80088a0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80088a4:	ee07 3a90 	vmov	s15, r3
 80088a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ac:	f04f 0c00 	mov.w	ip, #0
 80088b0:	ece4 7a01 	vstmia	r4!, {s15}
 80088b4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 80088b8:	46a1      	mov	r9, r4
 80088ba:	458c      	cmp	ip, r1
 80088bc:	dd07      	ble.n	80088ce <__kernel_rem_pio2f+0x2e6>
 80088be:	ece0 7a01 	vstmia	r0!, {s15}
 80088c2:	3701      	adds	r7, #1
 80088c4:	e7e7      	b.n	8008896 <__kernel_rem_pio2f+0x2ae>
 80088c6:	9804      	ldr	r0, [sp, #16]
 80088c8:	f04f 0c01 	mov.w	ip, #1
 80088cc:	e7d2      	b.n	8008874 <__kernel_rem_pio2f+0x28c>
 80088ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80088d2:	ed39 7a01 	vldmdb	r9!, {s14}
 80088d6:	f10c 0c01 	add.w	ip, ip, #1
 80088da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088de:	e7ec      	b.n	80088ba <__kernel_rem_pio2f+0x2d2>
 80088e0:	3c01      	subs	r4, #1
 80088e2:	e775      	b.n	80087d0 <__kernel_rem_pio2f+0x1e8>
 80088e4:	080094fc 	.word	0x080094fc
 80088e8:	080094d0 	.word	0x080094d0
 80088ec:	43800000 	.word	0x43800000
 80088f0:	3b800000 	.word	0x3b800000
 80088f4:	00000000 	.word	0x00000000
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	eeb0 0a48 	vmov.f32	s0, s16
 80088fe:	1a98      	subs	r0, r3, r2
 8008900:	f000 fb30 	bl	8008f64 <scalbnf>
 8008904:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80088ec <__kernel_rem_pio2f+0x304>
 8008908:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800890c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008910:	db19      	blt.n	8008946 <__kernel_rem_pio2f+0x35e>
 8008912:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80088f0 <__kernel_rem_pio2f+0x308>
 8008916:	ee60 7a27 	vmul.f32	s15, s0, s15
 800891a:	aa08      	add	r2, sp, #32
 800891c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008920:	1c74      	adds	r4, r6, #1
 8008922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008926:	3508      	adds	r5, #8
 8008928:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800892c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008930:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008934:	ee10 3a10 	vmov	r3, s0
 8008938:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800893c:	ee17 3a90 	vmov	r3, s15
 8008940:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008944:	e74b      	b.n	80087de <__kernel_rem_pio2f+0x1f6>
 8008946:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800894a:	aa08      	add	r2, sp, #32
 800894c:	ee10 3a10 	vmov	r3, s0
 8008950:	4634      	mov	r4, r6
 8008952:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008956:	e742      	b.n	80087de <__kernel_rem_pio2f+0x1f6>
 8008958:	a808      	add	r0, sp, #32
 800895a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800895e:	9001      	str	r0, [sp, #4]
 8008960:	ee07 0a90 	vmov	s15, r0
 8008964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008968:	3a01      	subs	r2, #1
 800896a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800896e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008972:	ed61 7a01 	vstmdb	r1!, {s15}
 8008976:	e73e      	b.n	80087f6 <__kernel_rem_pio2f+0x20e>
 8008978:	ecfc 6a01 	vldmia	ip!, {s13}
 800897c:	ecb6 7a01 	vldmia	r6!, {s14}
 8008980:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008984:	3001      	adds	r0, #1
 8008986:	4550      	cmp	r0, sl
 8008988:	dc01      	bgt.n	800898e <__kernel_rem_pio2f+0x3a6>
 800898a:	4288      	cmp	r0, r1
 800898c:	ddf4      	ble.n	8008978 <__kernel_rem_pio2f+0x390>
 800898e:	a858      	add	r0, sp, #352	; 0x160
 8008990:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008994:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008998:	3a01      	subs	r2, #1
 800899a:	e730      	b.n	80087fe <__kernel_rem_pio2f+0x216>
 800899c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800899e:	2a02      	cmp	r2, #2
 80089a0:	dc09      	bgt.n	80089b6 <__kernel_rem_pio2f+0x3ce>
 80089a2:	2a00      	cmp	r2, #0
 80089a4:	dc2a      	bgt.n	80089fc <__kernel_rem_pio2f+0x414>
 80089a6:	d043      	beq.n	8008a30 <__kernel_rem_pio2f+0x448>
 80089a8:	f009 0007 	and.w	r0, r9, #7
 80089ac:	b059      	add	sp, #356	; 0x164
 80089ae:	ecbd 8b04 	vpop	{d8-d9}
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d1f5      	bne.n	80089a8 <__kernel_rem_pio2f+0x3c0>
 80089bc:	ab30      	add	r3, sp, #192	; 0xc0
 80089be:	442b      	add	r3, r5
 80089c0:	461a      	mov	r2, r3
 80089c2:	4619      	mov	r1, r3
 80089c4:	4620      	mov	r0, r4
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f1a1 0104 	sub.w	r1, r1, #4
 80089cc:	dc51      	bgt.n	8008a72 <__kernel_rem_pio2f+0x48a>
 80089ce:	4621      	mov	r1, r4
 80089d0:	2901      	cmp	r1, #1
 80089d2:	f1a2 0204 	sub.w	r2, r2, #4
 80089d6:	dc5c      	bgt.n	8008a92 <__kernel_rem_pio2f+0x4aa>
 80089d8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 80089dc:	3304      	adds	r3, #4
 80089de:	2c01      	cmp	r4, #1
 80089e0:	dc67      	bgt.n	8008ab2 <__kernel_rem_pio2f+0x4ca>
 80089e2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80089e6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80089ea:	2f00      	cmp	r7, #0
 80089ec:	d167      	bne.n	8008abe <__kernel_rem_pio2f+0x4d6>
 80089ee:	edc8 6a00 	vstr	s13, [r8]
 80089f2:	ed88 7a01 	vstr	s14, [r8, #4]
 80089f6:	edc8 7a02 	vstr	s15, [r8, #8]
 80089fa:	e7d5      	b.n	80089a8 <__kernel_rem_pio2f+0x3c0>
 80089fc:	aa30      	add	r2, sp, #192	; 0xc0
 80089fe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 8008a02:	4413      	add	r3, r2
 8008a04:	4622      	mov	r2, r4
 8008a06:	2a00      	cmp	r2, #0
 8008a08:	da24      	bge.n	8008a54 <__kernel_rem_pio2f+0x46c>
 8008a0a:	b34f      	cbz	r7, 8008a60 <__kernel_rem_pio2f+0x478>
 8008a0c:	eef1 7a47 	vneg.f32	s15, s14
 8008a10:	edc8 7a00 	vstr	s15, [r8]
 8008a14:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008a18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a1c:	aa31      	add	r2, sp, #196	; 0xc4
 8008a1e:	2301      	movs	r3, #1
 8008a20:	429c      	cmp	r4, r3
 8008a22:	da20      	bge.n	8008a66 <__kernel_rem_pio2f+0x47e>
 8008a24:	b10f      	cbz	r7, 8008a2a <__kernel_rem_pio2f+0x442>
 8008a26:	eef1 7a67 	vneg.f32	s15, s15
 8008a2a:	edc8 7a01 	vstr	s15, [r8, #4]
 8008a2e:	e7bb      	b.n	80089a8 <__kernel_rem_pio2f+0x3c0>
 8008a30:	aa30      	add	r2, sp, #192	; 0xc0
 8008a32:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80088f4 <__kernel_rem_pio2f+0x30c>
 8008a36:	4413      	add	r3, r2
 8008a38:	2c00      	cmp	r4, #0
 8008a3a:	da05      	bge.n	8008a48 <__kernel_rem_pio2f+0x460>
 8008a3c:	b10f      	cbz	r7, 8008a42 <__kernel_rem_pio2f+0x45a>
 8008a3e:	eef1 7a67 	vneg.f32	s15, s15
 8008a42:	edc8 7a00 	vstr	s15, [r8]
 8008a46:	e7af      	b.n	80089a8 <__kernel_rem_pio2f+0x3c0>
 8008a48:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a4c:	3c01      	subs	r4, #1
 8008a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a52:	e7f1      	b.n	8008a38 <__kernel_rem_pio2f+0x450>
 8008a54:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a58:	3a01      	subs	r2, #1
 8008a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a5e:	e7d2      	b.n	8008a06 <__kernel_rem_pio2f+0x41e>
 8008a60:	eef0 7a47 	vmov.f32	s15, s14
 8008a64:	e7d4      	b.n	8008a10 <__kernel_rem_pio2f+0x428>
 8008a66:	ecb2 7a01 	vldmia	r2!, {s14}
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a70:	e7d6      	b.n	8008a20 <__kernel_rem_pio2f+0x438>
 8008a72:	edd1 7a00 	vldr	s15, [r1]
 8008a76:	edd1 6a01 	vldr	s13, [r1, #4]
 8008a7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a7e:	3801      	subs	r0, #1
 8008a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a84:	ed81 7a00 	vstr	s14, [r1]
 8008a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8c:	edc1 7a01 	vstr	s15, [r1, #4]
 8008a90:	e799      	b.n	80089c6 <__kernel_rem_pio2f+0x3de>
 8008a92:	edd2 7a00 	vldr	s15, [r2]
 8008a96:	edd2 6a01 	vldr	s13, [r2, #4]
 8008a9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a9e:	3901      	subs	r1, #1
 8008aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aa4:	ed82 7a00 	vstr	s14, [r2]
 8008aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aac:	edc2 7a01 	vstr	s15, [r2, #4]
 8008ab0:	e78e      	b.n	80089d0 <__kernel_rem_pio2f+0x3e8>
 8008ab2:	ed33 7a01 	vldmdb	r3!, {s14}
 8008ab6:	3c01      	subs	r4, #1
 8008ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008abc:	e78f      	b.n	80089de <__kernel_rem_pio2f+0x3f6>
 8008abe:	eef1 6a66 	vneg.f32	s13, s13
 8008ac2:	eeb1 7a47 	vneg.f32	s14, s14
 8008ac6:	edc8 6a00 	vstr	s13, [r8]
 8008aca:	ed88 7a01 	vstr	s14, [r8, #4]
 8008ace:	eef1 7a67 	vneg.f32	s15, s15
 8008ad2:	e790      	b.n	80089f6 <__kernel_rem_pio2f+0x40e>

08008ad4 <__kernel_sinf>:
 8008ad4:	ee10 3a10 	vmov	r3, s0
 8008ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008adc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008ae0:	da04      	bge.n	8008aec <__kernel_sinf+0x18>
 8008ae2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008ae6:	ee17 3a90 	vmov	r3, s15
 8008aea:	b35b      	cbz	r3, 8008b44 <__kernel_sinf+0x70>
 8008aec:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008af0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b48 <__kernel_sinf+0x74>
 8008af4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008b4c <__kernel_sinf+0x78>
 8008af8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008afc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008b50 <__kernel_sinf+0x7c>
 8008b00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b04:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008b54 <__kernel_sinf+0x80>
 8008b08:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008b0c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008b58 <__kernel_sinf+0x84>
 8008b10:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008b14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008b18:	b930      	cbnz	r0, 8008b28 <__kernel_sinf+0x54>
 8008b1a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008b5c <__kernel_sinf+0x88>
 8008b1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008b22:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008b26:	4770      	bx	lr
 8008b28:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008b2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008b30:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008b34:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008b38:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008b60 <__kernel_sinf+0x8c>
 8008b3c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008b40:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	2f2ec9d3 	.word	0x2f2ec9d3
 8008b4c:	b2d72f34 	.word	0xb2d72f34
 8008b50:	3638ef1b 	.word	0x3638ef1b
 8008b54:	b9500d01 	.word	0xb9500d01
 8008b58:	3c088889 	.word	0x3c088889
 8008b5c:	be2aaaab 	.word	0xbe2aaaab
 8008b60:	3e2aaaab 	.word	0x3e2aaaab
 8008b64:	00000000 	.word	0x00000000

08008b68 <atan>:
 8008b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	ec55 4b10 	vmov	r4, r5, d0
 8008b70:	4bc3      	ldr	r3, [pc, #780]	; (8008e80 <atan+0x318>)
 8008b72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b76:	429e      	cmp	r6, r3
 8008b78:	46ab      	mov	fp, r5
 8008b7a:	dd18      	ble.n	8008bae <atan+0x46>
 8008b7c:	4bc1      	ldr	r3, [pc, #772]	; (8008e84 <atan+0x31c>)
 8008b7e:	429e      	cmp	r6, r3
 8008b80:	dc01      	bgt.n	8008b86 <atan+0x1e>
 8008b82:	d109      	bne.n	8008b98 <atan+0x30>
 8008b84:	b144      	cbz	r4, 8008b98 <atan+0x30>
 8008b86:	4622      	mov	r2, r4
 8008b88:	462b      	mov	r3, r5
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 fb41 	bl	8000214 <__adddf3>
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	e006      	b.n	8008ba6 <atan+0x3e>
 8008b98:	f1bb 0f00 	cmp.w	fp, #0
 8008b9c:	f300 8131 	bgt.w	8008e02 <atan+0x29a>
 8008ba0:	a59b      	add	r5, pc, #620	; (adr r5, 8008e10 <atan+0x2a8>)
 8008ba2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ba6:	ec45 4b10 	vmov	d0, r4, r5
 8008baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	4bb6      	ldr	r3, [pc, #728]	; (8008e88 <atan+0x320>)
 8008bb0:	429e      	cmp	r6, r3
 8008bb2:	dc14      	bgt.n	8008bde <atan+0x76>
 8008bb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008bb8:	429e      	cmp	r6, r3
 8008bba:	dc0d      	bgt.n	8008bd8 <atan+0x70>
 8008bbc:	a396      	add	r3, pc, #600	; (adr r3, 8008e18 <atan+0x2b0>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	ee10 0a10 	vmov	r0, s0
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 fb24 	bl	8000214 <__adddf3>
 8008bcc:	4baf      	ldr	r3, [pc, #700]	; (8008e8c <atan+0x324>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f7f7 ff66 	bl	8000aa0 <__aeabi_dcmpgt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1e6      	bne.n	8008ba6 <atan+0x3e>
 8008bd8:	f04f 3aff 	mov.w	sl, #4294967295
 8008bdc:	e02b      	b.n	8008c36 <atan+0xce>
 8008bde:	f000 f963 	bl	8008ea8 <fabs>
 8008be2:	4bab      	ldr	r3, [pc, #684]	; (8008e90 <atan+0x328>)
 8008be4:	429e      	cmp	r6, r3
 8008be6:	ec55 4b10 	vmov	r4, r5, d0
 8008bea:	f300 80bf 	bgt.w	8008d6c <atan+0x204>
 8008bee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008bf2:	429e      	cmp	r6, r3
 8008bf4:	f300 80a0 	bgt.w	8008d38 <atan+0x1d0>
 8008bf8:	ee10 2a10 	vmov	r2, s0
 8008bfc:	ee10 0a10 	vmov	r0, s0
 8008c00:	462b      	mov	r3, r5
 8008c02:	4629      	mov	r1, r5
 8008c04:	f7f7 fb06 	bl	8000214 <__adddf3>
 8008c08:	4ba0      	ldr	r3, [pc, #640]	; (8008e8c <atan+0x324>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f7f7 fb00 	bl	8000210 <__aeabi_dsub>
 8008c10:	2200      	movs	r2, #0
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7f7 faf9 	bl	8000214 <__adddf3>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	f7f7 fdd3 	bl	80007d4 <__aeabi_ddiv>
 8008c2e:	f04f 0a00 	mov.w	sl, #0
 8008c32:	4604      	mov	r4, r0
 8008c34:	460d      	mov	r5, r1
 8008c36:	4622      	mov	r2, r4
 8008c38:	462b      	mov	r3, r5
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	f7f7 fc9f 	bl	8000580 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4680      	mov	r8, r0
 8008c48:	4689      	mov	r9, r1
 8008c4a:	f7f7 fc99 	bl	8000580 <__aeabi_dmul>
 8008c4e:	a374      	add	r3, pc, #464	; (adr r3, 8008e20 <atan+0x2b8>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4606      	mov	r6, r0
 8008c56:	460f      	mov	r7, r1
 8008c58:	f7f7 fc92 	bl	8000580 <__aeabi_dmul>
 8008c5c:	a372      	add	r3, pc, #456	; (adr r3, 8008e28 <atan+0x2c0>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fad7 	bl	8000214 <__adddf3>
 8008c66:	4632      	mov	r2, r6
 8008c68:	463b      	mov	r3, r7
 8008c6a:	f7f7 fc89 	bl	8000580 <__aeabi_dmul>
 8008c6e:	a370      	add	r3, pc, #448	; (adr r3, 8008e30 <atan+0x2c8>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 face 	bl	8000214 <__adddf3>
 8008c78:	4632      	mov	r2, r6
 8008c7a:	463b      	mov	r3, r7
 8008c7c:	f7f7 fc80 	bl	8000580 <__aeabi_dmul>
 8008c80:	a36d      	add	r3, pc, #436	; (adr r3, 8008e38 <atan+0x2d0>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fac5 	bl	8000214 <__adddf3>
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	f7f7 fc77 	bl	8000580 <__aeabi_dmul>
 8008c92:	a36b      	add	r3, pc, #428	; (adr r3, 8008e40 <atan+0x2d8>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fabc 	bl	8000214 <__adddf3>
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	f7f7 fc6e 	bl	8000580 <__aeabi_dmul>
 8008ca4:	a368      	add	r3, pc, #416	; (adr r3, 8008e48 <atan+0x2e0>)
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f7f7 fab3 	bl	8000214 <__adddf3>
 8008cae:	4642      	mov	r2, r8
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	f7f7 fc65 	bl	8000580 <__aeabi_dmul>
 8008cb6:	a366      	add	r3, pc, #408	; (adr r3, 8008e50 <atan+0x2e8>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	4689      	mov	r9, r1
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 fc5c 	bl	8000580 <__aeabi_dmul>
 8008cc8:	a363      	add	r3, pc, #396	; (adr r3, 8008e58 <atan+0x2f0>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fa9f 	bl	8000210 <__aeabi_dsub>
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	f7f7 fc53 	bl	8000580 <__aeabi_dmul>
 8008cda:	a361      	add	r3, pc, #388	; (adr r3, 8008e60 <atan+0x2f8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fa96 	bl	8000210 <__aeabi_dsub>
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	f7f7 fc4a 	bl	8000580 <__aeabi_dmul>
 8008cec:	a35e      	add	r3, pc, #376	; (adr r3, 8008e68 <atan+0x300>)
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f7f7 fa8d 	bl	8000210 <__aeabi_dsub>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	f7f7 fc41 	bl	8000580 <__aeabi_dmul>
 8008cfe:	a35c      	add	r3, pc, #368	; (adr r3, 8008e70 <atan+0x308>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fa84 	bl	8000210 <__aeabi_dsub>
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	f7f7 fc38 	bl	8000580 <__aeabi_dmul>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4640      	mov	r0, r8
 8008d16:	4649      	mov	r1, r9
 8008d18:	f7f7 fa7c 	bl	8000214 <__adddf3>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	f7f7 fc2e 	bl	8000580 <__aeabi_dmul>
 8008d24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008d28:	4602      	mov	r2, r0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	d14b      	bne.n	8008dc6 <atan+0x25e>
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 fa6d 	bl	8000210 <__aeabi_dsub>
 8008d36:	e72c      	b.n	8008b92 <atan+0x2a>
 8008d38:	ee10 0a10 	vmov	r0, s0
 8008d3c:	4b53      	ldr	r3, [pc, #332]	; (8008e8c <atan+0x324>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fa65 	bl	8000210 <__aeabi_dsub>
 8008d46:	4b51      	ldr	r3, [pc, #324]	; (8008e8c <atan+0x324>)
 8008d48:	4606      	mov	r6, r0
 8008d4a:	460f      	mov	r7, r1
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4620      	mov	r0, r4
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fa5f 	bl	8000214 <__adddf3>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 fd39 	bl	80007d4 <__aeabi_ddiv>
 8008d62:	f04f 0a01 	mov.w	sl, #1
 8008d66:	4604      	mov	r4, r0
 8008d68:	460d      	mov	r5, r1
 8008d6a:	e764      	b.n	8008c36 <atan+0xce>
 8008d6c:	4b49      	ldr	r3, [pc, #292]	; (8008e94 <atan+0x32c>)
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	da1d      	bge.n	8008dae <atan+0x246>
 8008d72:	ee10 0a10 	vmov	r0, s0
 8008d76:	4b48      	ldr	r3, [pc, #288]	; (8008e98 <atan+0x330>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	f7f7 fa48 	bl	8000210 <__aeabi_dsub>
 8008d80:	4b45      	ldr	r3, [pc, #276]	; (8008e98 <atan+0x330>)
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	2200      	movs	r2, #0
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fbf8 	bl	8000580 <__aeabi_dmul>
 8008d90:	4b3e      	ldr	r3, [pc, #248]	; (8008e8c <atan+0x324>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	f7f7 fa3e 	bl	8000214 <__adddf3>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 fd18 	bl	80007d4 <__aeabi_ddiv>
 8008da4:	f04f 0a02 	mov.w	sl, #2
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	e743      	b.n	8008c36 <atan+0xce>
 8008dae:	462b      	mov	r3, r5
 8008db0:	ee10 2a10 	vmov	r2, s0
 8008db4:	4939      	ldr	r1, [pc, #228]	; (8008e9c <atan+0x334>)
 8008db6:	2000      	movs	r0, #0
 8008db8:	f7f7 fd0c 	bl	80007d4 <__aeabi_ddiv>
 8008dbc:	f04f 0a03 	mov.w	sl, #3
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	e737      	b.n	8008c36 <atan+0xce>
 8008dc6:	4b36      	ldr	r3, [pc, #216]	; (8008ea0 <atan+0x338>)
 8008dc8:	4e36      	ldr	r6, [pc, #216]	; (8008ea4 <atan+0x33c>)
 8008dca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008dce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008dd2:	e9da 2300 	ldrd	r2, r3, [sl]
 8008dd6:	f7f7 fa1b 	bl	8000210 <__aeabi_dsub>
 8008dda:	4622      	mov	r2, r4
 8008ddc:	462b      	mov	r3, r5
 8008dde:	f7f7 fa17 	bl	8000210 <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008dea:	f7f7 fa11 	bl	8000210 <__aeabi_dsub>
 8008dee:	f1bb 0f00 	cmp.w	fp, #0
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	f6bf aed6 	bge.w	8008ba6 <atan+0x3e>
 8008dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dfe:	461d      	mov	r5, r3
 8008e00:	e6d1      	b.n	8008ba6 <atan+0x3e>
 8008e02:	a51d      	add	r5, pc, #116	; (adr r5, 8008e78 <atan+0x310>)
 8008e04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e08:	e6cd      	b.n	8008ba6 <atan+0x3e>
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w
 8008e10:	54442d18 	.word	0x54442d18
 8008e14:	bff921fb 	.word	0xbff921fb
 8008e18:	8800759c 	.word	0x8800759c
 8008e1c:	7e37e43c 	.word	0x7e37e43c
 8008e20:	e322da11 	.word	0xe322da11
 8008e24:	3f90ad3a 	.word	0x3f90ad3a
 8008e28:	24760deb 	.word	0x24760deb
 8008e2c:	3fa97b4b 	.word	0x3fa97b4b
 8008e30:	a0d03d51 	.word	0xa0d03d51
 8008e34:	3fb10d66 	.word	0x3fb10d66
 8008e38:	c54c206e 	.word	0xc54c206e
 8008e3c:	3fb745cd 	.word	0x3fb745cd
 8008e40:	920083ff 	.word	0x920083ff
 8008e44:	3fc24924 	.word	0x3fc24924
 8008e48:	5555550d 	.word	0x5555550d
 8008e4c:	3fd55555 	.word	0x3fd55555
 8008e50:	2c6a6c2f 	.word	0x2c6a6c2f
 8008e54:	bfa2b444 	.word	0xbfa2b444
 8008e58:	52defd9a 	.word	0x52defd9a
 8008e5c:	3fadde2d 	.word	0x3fadde2d
 8008e60:	af749a6d 	.word	0xaf749a6d
 8008e64:	3fb3b0f2 	.word	0x3fb3b0f2
 8008e68:	fe231671 	.word	0xfe231671
 8008e6c:	3fbc71c6 	.word	0x3fbc71c6
 8008e70:	9998ebc4 	.word	0x9998ebc4
 8008e74:	3fc99999 	.word	0x3fc99999
 8008e78:	54442d18 	.word	0x54442d18
 8008e7c:	3ff921fb 	.word	0x3ff921fb
 8008e80:	440fffff 	.word	0x440fffff
 8008e84:	7ff00000 	.word	0x7ff00000
 8008e88:	3fdbffff 	.word	0x3fdbffff
 8008e8c:	3ff00000 	.word	0x3ff00000
 8008e90:	3ff2ffff 	.word	0x3ff2ffff
 8008e94:	40038000 	.word	0x40038000
 8008e98:	3ff80000 	.word	0x3ff80000
 8008e9c:	bff00000 	.word	0xbff00000
 8008ea0:	08009528 	.word	0x08009528
 8008ea4:	08009508 	.word	0x08009508

08008ea8 <fabs>:
 8008ea8:	ec51 0b10 	vmov	r0, r1, d0
 8008eac:	ee10 2a10 	vmov	r2, s0
 8008eb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008eb4:	ec43 2b10 	vmov	d0, r2, r3
 8008eb8:	4770      	bx	lr
 8008eba:	0000      	movs	r0, r0
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <nan>:
 8008ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ec8 <nan+0x8>
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	7ff80000 	.word	0x7ff80000

08008ed0 <fabsf>:
 8008ed0:	ee10 3a10 	vmov	r3, s0
 8008ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed8:	ee00 3a10 	vmov	s0, r3
 8008edc:	4770      	bx	lr
	...

08008ee0 <floorf>:
 8008ee0:	ee10 3a10 	vmov	r3, s0
 8008ee4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008ee8:	3a7f      	subs	r2, #127	; 0x7f
 8008eea:	2a16      	cmp	r2, #22
 8008eec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ef0:	dc2a      	bgt.n	8008f48 <floorf+0x68>
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	da11      	bge.n	8008f1a <floorf+0x3a>
 8008ef6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008f58 <floorf+0x78>
 8008efa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008efe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f06:	dd05      	ble.n	8008f14 <floorf+0x34>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	da23      	bge.n	8008f54 <floorf+0x74>
 8008f0c:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <floorf+0x7c>)
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	bf18      	it	ne
 8008f12:	4613      	movne	r3, r2
 8008f14:	ee00 3a10 	vmov	s0, r3
 8008f18:	4770      	bx	lr
 8008f1a:	4911      	ldr	r1, [pc, #68]	; (8008f60 <floorf+0x80>)
 8008f1c:	4111      	asrs	r1, r2
 8008f1e:	420b      	tst	r3, r1
 8008f20:	d0fa      	beq.n	8008f18 <floorf+0x38>
 8008f22:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008f58 <floorf+0x78>
 8008f26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	ddef      	ble.n	8008f14 <floorf+0x34>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfbe      	ittt	lt
 8008f38:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008f3c:	fa40 f202 	asrlt.w	r2, r0, r2
 8008f40:	189b      	addlt	r3, r3, r2
 8008f42:	ea23 0301 	bic.w	r3, r3, r1
 8008f46:	e7e5      	b.n	8008f14 <floorf+0x34>
 8008f48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008f4c:	d3e4      	bcc.n	8008f18 <floorf+0x38>
 8008f4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f52:	4770      	bx	lr
 8008f54:	2300      	movs	r3, #0
 8008f56:	e7dd      	b.n	8008f14 <floorf+0x34>
 8008f58:	7149f2ca 	.word	0x7149f2ca
 8008f5c:	bf800000 	.word	0xbf800000
 8008f60:	007fffff 	.word	0x007fffff

08008f64 <scalbnf>:
 8008f64:	ee10 3a10 	vmov	r3, s0
 8008f68:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008f6c:	d025      	beq.n	8008fba <scalbnf+0x56>
 8008f6e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008f72:	d302      	bcc.n	8008f7a <scalbnf+0x16>
 8008f74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008f78:	4770      	bx	lr
 8008f7a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008f7e:	d122      	bne.n	8008fc6 <scalbnf+0x62>
 8008f80:	4b2a      	ldr	r3, [pc, #168]	; (800902c <scalbnf+0xc8>)
 8008f82:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009030 <scalbnf+0xcc>
 8008f86:	4298      	cmp	r0, r3
 8008f88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008f8c:	db16      	blt.n	8008fbc <scalbnf+0x58>
 8008f8e:	ee10 3a10 	vmov	r3, s0
 8008f92:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008f96:	3a19      	subs	r2, #25
 8008f98:	4402      	add	r2, r0
 8008f9a:	2afe      	cmp	r2, #254	; 0xfe
 8008f9c:	dd15      	ble.n	8008fca <scalbnf+0x66>
 8008f9e:	ee10 3a10 	vmov	r3, s0
 8008fa2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009034 <scalbnf+0xd0>
 8008fa6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009038 <scalbnf+0xd4>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	eeb0 7a67 	vmov.f32	s14, s15
 8008fb0:	bfb8      	it	lt
 8008fb2:	eef0 7a66 	vmovlt.f32	s15, s13
 8008fb6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008fba:	4770      	bx	lr
 8008fbc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800903c <scalbnf+0xd8>
 8008fc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008fc4:	4770      	bx	lr
 8008fc6:	0dd2      	lsrs	r2, r2, #23
 8008fc8:	e7e6      	b.n	8008f98 <scalbnf+0x34>
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	dd06      	ble.n	8008fdc <scalbnf+0x78>
 8008fce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fd2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008fd6:	ee00 3a10 	vmov	s0, r3
 8008fda:	4770      	bx	lr
 8008fdc:	f112 0f16 	cmn.w	r2, #22
 8008fe0:	da1a      	bge.n	8009018 <scalbnf+0xb4>
 8008fe2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	ee10 3a10 	vmov	r3, s0
 8008fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ff0:	dd0a      	ble.n	8009008 <scalbnf+0xa4>
 8008ff2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009034 <scalbnf+0xd0>
 8008ff6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009038 <scalbnf+0xd4>
 8008ffa:	eef0 7a40 	vmov.f32	s15, s0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf18      	it	ne
 8009002:	eeb0 0a47 	vmovne.f32	s0, s14
 8009006:	e7db      	b.n	8008fc0 <scalbnf+0x5c>
 8009008:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800903c <scalbnf+0xd8>
 800900c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009040 <scalbnf+0xdc>
 8009010:	eef0 7a40 	vmov.f32	s15, s0
 8009014:	2b00      	cmp	r3, #0
 8009016:	e7f3      	b.n	8009000 <scalbnf+0x9c>
 8009018:	3219      	adds	r2, #25
 800901a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800901e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009022:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009044 <scalbnf+0xe0>
 8009026:	ee07 3a10 	vmov	s14, r3
 800902a:	e7c4      	b.n	8008fb6 <scalbnf+0x52>
 800902c:	ffff3cb0 	.word	0xffff3cb0
 8009030:	4c000000 	.word	0x4c000000
 8009034:	7149f2ca 	.word	0x7149f2ca
 8009038:	f149f2ca 	.word	0xf149f2ca
 800903c:	0da24260 	.word	0x0da24260
 8009040:	8da24260 	.word	0x8da24260
 8009044:	33000000 	.word	0x33000000

08009048 <__errno>:
 8009048:	4b01      	ldr	r3, [pc, #4]	; (8009050 <__errno+0x8>)
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20000018 	.word	0x20000018

08009054 <__libc_init_array>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4d0d      	ldr	r5, [pc, #52]	; (800908c <__libc_init_array+0x38>)
 8009058:	4c0d      	ldr	r4, [pc, #52]	; (8009090 <__libc_init_array+0x3c>)
 800905a:	1b64      	subs	r4, r4, r5
 800905c:	10a4      	asrs	r4, r4, #2
 800905e:	2600      	movs	r6, #0
 8009060:	42a6      	cmp	r6, r4
 8009062:	d109      	bne.n	8009078 <__libc_init_array+0x24>
 8009064:	4d0b      	ldr	r5, [pc, #44]	; (8009094 <__libc_init_array+0x40>)
 8009066:	4c0c      	ldr	r4, [pc, #48]	; (8009098 <__libc_init_array+0x44>)
 8009068:	f000 f82e 	bl	80090c8 <_init>
 800906c:	1b64      	subs	r4, r4, r5
 800906e:	10a4      	asrs	r4, r4, #2
 8009070:	2600      	movs	r6, #0
 8009072:	42a6      	cmp	r6, r4
 8009074:	d105      	bne.n	8009082 <__libc_init_array+0x2e>
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	f855 3b04 	ldr.w	r3, [r5], #4
 800907c:	4798      	blx	r3
 800907e:	3601      	adds	r6, #1
 8009080:	e7ee      	b.n	8009060 <__libc_init_array+0xc>
 8009082:	f855 3b04 	ldr.w	r3, [r5], #4
 8009086:	4798      	blx	r3
 8009088:	3601      	adds	r6, #1
 800908a:	e7f2      	b.n	8009072 <__libc_init_array+0x1e>
 800908c:	08009550 	.word	0x08009550
 8009090:	08009550 	.word	0x08009550
 8009094:	08009550 	.word	0x08009550
 8009098:	08009558 	.word	0x08009558

0800909c <memcpy>:
 800909c:	440a      	add	r2, r1
 800909e:	4291      	cmp	r1, r2
 80090a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090a4:	d100      	bne.n	80090a8 <memcpy+0xc>
 80090a6:	4770      	bx	lr
 80090a8:	b510      	push	{r4, lr}
 80090aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090b2:	4291      	cmp	r1, r2
 80090b4:	d1f9      	bne.n	80090aa <memcpy+0xe>
 80090b6:	bd10      	pop	{r4, pc}

080090b8 <memset>:
 80090b8:	4402      	add	r2, r0
 80090ba:	4603      	mov	r3, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	d100      	bne.n	80090c2 <memset+0xa>
 80090c0:	4770      	bx	lr
 80090c2:	f803 1b01 	strb.w	r1, [r3], #1
 80090c6:	e7f9      	b.n	80090bc <memset+0x4>

080090c8 <_init>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr

080090d4 <_fini>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr
