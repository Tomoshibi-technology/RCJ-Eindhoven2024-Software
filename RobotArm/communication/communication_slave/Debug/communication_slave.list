
communication_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800290c  0800290c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800290c  0800290c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800290c  0800290c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08002920  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08002920  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f2c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176b  00000000  00000000  00029f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a45  00000000  00000000  0002c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009854  00000000  00000000  00040f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c129  00000000  00000000  0004a7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c68ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000195c  00000000  00000000  000c693c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800287c 	.word	0x0800287c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800287c 	.word	0x0800287c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa6e 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f814 	bl	800024c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8b8 	bl	8000398 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000228:	f000 f898 	bl	800035c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800022c:	f000 f85e 	bl	80002ec <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8000230:	4904      	ldr	r1, [pc, #16]	; (8000244 <main+0x2c>)
 8000232:	4b05      	ldr	r3, [pc, #20]	; (8000248 <main+0x30>)
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	0018      	movs	r0, r3
 8000238:	f001 fcfa 	bl	8001c30 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  receiveData();
 800023c:	f000 f8c2 	bl	80003c4 <_Z11receiveDatav>
 8000240:	e7fc      	b.n	800023c <main+0x24>
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	20000118 	.word	0x20000118
 8000248:	20000028 	.word	0x20000028

0800024c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b093      	sub	sp, #76	; 0x4c
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	2414      	movs	r4, #20
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2334      	movs	r3, #52	; 0x34
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 fb05 	bl	800286c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	0018      	movs	r0, r3
 8000266:	2310      	movs	r3, #16
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 fafe 	bl	800286c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000270:	2380      	movs	r3, #128	; 0x80
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	0018      	movs	r0, r3
 8000276:	f000 ff7f 	bl	8001178 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	193b      	adds	r3, r7, r4
 800027c:	2202      	movs	r2, #2
 800027e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	0052      	lsls	r2, r2, #1
 8000286:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	193b      	adds	r3, r7, r4
 8000290:	2240      	movs	r2, #64	; 0x40
 8000292:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2200      	movs	r2, #0
 8000298:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	193b      	adds	r3, r7, r4
 800029c:	0018      	movs	r0, r3
 800029e:	f000 ffb7 	bl	8001210 <HAL_RCC_OscConfig>
 80002a2:	0003      	movs	r3, r0
 80002a4:	1e5a      	subs	r2, r3, #1
 80002a6:	4193      	sbcs	r3, r2
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <_Z18SystemClock_Configv+0x66>
  {
    Error_Handler();
 80002ae:	f000 f92b 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	0018      	movs	r0, r3
 80002d0:	f001 faae 	bl	8001830 <HAL_RCC_ClockConfig>
 80002d4:	0003      	movs	r3, r0
 80002d6:	1e5a      	subs	r2, r3, #1
 80002d8:	4193      	sbcs	r3, r2
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80002e0:	f000 f912 	bl	8000508 <Error_Handler>
  }
}
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b013      	add	sp, #76	; 0x4c
 80002ea:	bd90      	pop	{r4, r7, pc}

080002ec <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <_ZL19MX_USART2_UART_Initv+0x6c>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 80002f8:	22e1      	movs	r2, #225	; 0xe1
 80002fa:	0252      	lsls	r2, r2, #9
 80002fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b12      	ldr	r3, [pc, #72]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000330:	2200      	movs	r2, #0
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <_ZL19MX_USART2_UART_Initv+0x68>)
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fc24 	bl	8001b84 <HAL_UART_Init>
 800033c:	0003      	movs	r3, r0
 800033e:	1e5a      	subs	r2, r3, #1
 8000340:	4193      	sbcs	r3, r2
 8000342:	b2db      	uxtb	r3, r3
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 8000348:	f000 f8de 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	20000028 	.word	0x20000028
 8000358:	40004400 	.word	0x40004400

0800035c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <_ZL11MX_DMA_Initv+0x38>)
 8000364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <_ZL11MX_DMA_Initv+0x38>)
 8000368:	2101      	movs	r1, #1
 800036a:	430a      	orrs	r2, r1
 800036c:	639a      	str	r2, [r3, #56]	; 0x38
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <_ZL11MX_DMA_Initv+0x38>)
 8000370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000372:	2201      	movs	r2, #1
 8000374:	4013      	ands	r3, r2
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	2009      	movs	r0, #9
 8000380:	f000 fb12 	bl	80009a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000384:	2009      	movs	r0, #9
 8000386:	f000 fb24 	bl	80009d2 <HAL_NVIC_EnableIRQ>

}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b002      	add	sp, #8
 8000390:	bd80      	pop	{r7, pc}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40021000 	.word	0x40021000

08000398 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <_ZL12MX_GPIO_Initv+0x28>)
 80003a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <_ZL12MX_GPIO_Initv+0x28>)
 80003a4:	2101      	movs	r1, #1
 80003a6:	430a      	orrs	r2, r1
 80003a8:	635a      	str	r2, [r3, #52]	; 0x34
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <_ZL12MX_GPIO_Initv+0x28>)
 80003ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ae:	2201      	movs	r2, #1
 80003b0:	4013      	ands	r3, r2
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b002      	add	sp, #8
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	40021000 	.word	0x40021000

080003c4 <_Z11receiveDatav>:

/* USER CODE BEGIN 4 */
void receiveData(){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
	uint8_t checksum = 0;
 80003ca:	2317      	movs	r3, #23
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
	static uint8_t index = 0;

  index = huart2.hdmarx->Instance->CNDTR;
 80003d2:	4b46      	ldr	r3, [pc, #280]	; (80004ec <_Z11receiveDatav+0x128>)
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	589b      	ldr	r3, [r3, r2]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	4b44      	ldr	r3, [pc, #272]	; (80004f0 <_Z11receiveDatav+0x12c>)
 80003e0:	701a      	strb	r2, [r3, #0]
  index = sizeof(rxBuf) - index;
 80003e2:	4b43      	ldr	r3, [pc, #268]	; (80004f0 <_Z11receiveDatav+0x12c>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	4252      	negs	r2, r2
 80003ea:	1ad3      	subs	r3, r2, r3
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b40      	ldr	r3, [pc, #256]	; (80004f0 <_Z11receiveDatav+0x12c>)
 80003f0:	701a      	strb	r2, [r3, #0]

  if (index >= 11)
 80003f2:	4b3f      	ldr	r3, [pc, #252]	; (80004f0 <_Z11receiveDatav+0x12c>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	2b0a      	cmp	r3, #10
 80003f8:	d918      	bls.n	800042c <_Z11receiveDatav+0x68>
  {
    for (int i = 0; i < 11; i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	2b0a      	cmp	r3, #10
 8000402:	dc13      	bgt.n	800042c <_Z11receiveDatav+0x68>
    {
      receiveArray[i] = rxBuf[index - 10 + i];
 8000404:	4b3a      	ldr	r3, [pc, #232]	; (80004f0 <_Z11receiveDatav+0x12c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	3b0a      	subs	r3, #10
 800040a:	001a      	movs	r2, r3
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	18d3      	adds	r3, r2, r3
 8000410:	4a38      	ldr	r2, [pc, #224]	; (80004f4 <_Z11receiveDatav+0x130>)
 8000412:	5cd1      	ldrb	r1, [r2, r3]
 8000414:	4a38      	ldr	r2, [pc, #224]	; (80004f8 <_Z11receiveDatav+0x134>)
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	18d3      	adds	r3, r2, r3
 800041a:	1c0a      	adds	r2, r1, #0
 800041c:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 800041e:	2001      	movs	r0, #1
 8000420:	f000 f9f2 	bl	8000808 <HAL_Delay>
    for (int i = 0; i < 11; i++)
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	3301      	adds	r3, #1
 8000428:	613b      	str	r3, [r7, #16]
 800042a:	e7e8      	b.n	80003fe <_Z11receiveDatav+0x3a>
    }
  }

  for (int i = 0; i < 11; i++)
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2b0a      	cmp	r3, #10
 8000434:	dc22      	bgt.n	800047c <_Z11receiveDatav+0xb8>
  {
    if (receiveArray[i] == 255 && receiveArray[i + 1] == 255)
 8000436:	4a30      	ldr	r2, [pc, #192]	; (80004f8 <_Z11receiveDatav+0x134>)
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2bff      	cmp	r3, #255	; 0xff
 8000440:	d118      	bne.n	8000474 <_Z11receiveDatav+0xb0>
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3301      	adds	r3, #1
 8000446:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <_Z11receiveDatav+0x134>)
 8000448:	5cd3      	ldrb	r3, [r2, r3]
 800044a:	2bff      	cmp	r3, #255	; 0xff
 800044c:	d112      	bne.n	8000474 <_Z11receiveDatav+0xb0>
    {
      for (int j = 0; j < 6; j++)
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	2b05      	cmp	r3, #5
 8000456:	dc0d      	bgt.n	8000474 <_Z11receiveDatav+0xb0>
      {
        read[j] = receiveArray[i + j];
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	18d3      	adds	r3, r2, r3
 800045e:	4a26      	ldr	r2, [pc, #152]	; (80004f8 <_Z11receiveDatav+0x134>)
 8000460:	5cd1      	ldrb	r1, [r2, r3]
 8000462:	4a26      	ldr	r2, [pc, #152]	; (80004fc <_Z11receiveDatav+0x138>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	18d3      	adds	r3, r2, r3
 8000468:	1c0a      	adds	r2, r1, #0
 800046a:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	3301      	adds	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	e7ee      	b.n	8000452 <_Z11receiveDatav+0x8e>
  for (int i = 0; i < 11; i++)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3301      	adds	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	e7d9      	b.n	8000430 <_Z11receiveDatav+0x6c>
      }
    }
  }

  for (int i = 2; i < 5; i++)
 800047c:	2302      	movs	r3, #2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b04      	cmp	r3, #4
 8000484:	dc0d      	bgt.n	80004a2 <_Z11receiveDatav+0xde>
  {
    checksum += read[i];
 8000486:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <_Z11receiveDatav+0x138>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	18d3      	adds	r3, r2, r3
 800048c:	7819      	ldrb	r1, [r3, #0]
 800048e:	2217      	movs	r2, #23
 8000490:	18bb      	adds	r3, r7, r2
 8000492:	18ba      	adds	r2, r7, r2
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	188a      	adds	r2, r1, r2
 8000498:	701a      	strb	r2, [r3, #0]
  for (int i = 2; i < 5; i++)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e7ee      	b.n	8000480 <_Z11receiveDatav+0xbc>
  }
  checksum += 10;
 80004a2:	2117      	movs	r1, #23
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	187a      	adds	r2, r7, r1
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	320a      	adds	r2, #10
 80004ac:	701a      	strb	r2, [r3, #0]
  checksum %= 256;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	7812      	ldrb	r2, [r2, #0]
 80004b4:	701a      	strb	r2, [r3, #0]

  if (read[5] == checksum)
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_Z11receiveDatav+0x138>)
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	187a      	adds	r2, r7, r1
 80004bc:	7812      	ldrb	r2, [r2, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d10f      	bne.n	80004e2 <_Z11receiveDatav+0x11e>
  {
	  angle = read[2] * 256 + read[3];
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <_Z11receiveDatav+0x138>)
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	021b      	lsls	r3, r3, #8
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <_Z11receiveDatav+0x138>)
 80004ce:	78db      	ldrb	r3, [r3, #3]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <_Z11receiveDatav+0x13c>)
 80004d8:	801a      	strh	r2, [r3, #0]
	  speed = read[4];
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <_Z11receiveDatav+0x138>)
 80004dc:	791a      	ldrb	r2, [r3, #4]
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <_Z11receiveDatav+0x140>)
 80004e0:	701a      	strb	r2, [r3, #0]
  }
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b006      	add	sp, #24
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000028 	.word	0x20000028
 80004f0:	200001ad 	.word	0x200001ad
 80004f4:	20000118 	.word	0x20000118
 80004f8:	20000198 	.word	0x20000198
 80004fc:	200001a4 	.word	0x200001a4
 8000500:	200001aa 	.word	0x200001aa
 8000504:	200001ac 	.word	0x200001ac

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_MspInit+0x44>)
 800051c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_MspInit+0x44>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	641a      	str	r2, [r3, #64]	; 0x40
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <HAL_MspInit+0x44>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_MspInit+0x44>)
 8000534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_MspInit+0x44>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0549      	lsls	r1, r1, #21
 800053c:	430a      	orrs	r2, r1
 800053e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <HAL_MspInit+0x44>)
 8000542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	055b      	lsls	r3, r3, #21
 8000548:	4013      	ands	r3, r2
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	2414      	movs	r4, #20
 8000566:	193b      	adds	r3, r7, r4
 8000568:	0018      	movs	r0, r3
 800056a:	2314      	movs	r3, #20
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 f97c 	bl	800286c <memset>
  if(huart->Instance==USART2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a31      	ldr	r2, [pc, #196]	; (8000640 <HAL_UART_MspInit+0xe4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d15b      	bne.n	8000636 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <HAL_UART_MspInit+0xe8>)
 8000580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000582:	4b30      	ldr	r3, [pc, #192]	; (8000644 <HAL_UART_MspInit+0xe8>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0289      	lsls	r1, r1, #10
 8000588:	430a      	orrs	r2, r1
 800058a:	63da      	str	r2, [r3, #60]	; 0x3c
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <HAL_UART_MspInit+0xe8>)
 800058e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	029b      	lsls	r3, r3, #10
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <HAL_UART_MspInit+0xe8>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <HAL_UART_MspInit+0xe8>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	; 0x34
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <HAL_UART_MspInit+0xe8>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005aa:	2201      	movs	r2, #1
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	4a24      	ldr	r2, [pc, #144]	; (8000648 <HAL_UART_MspInit+0xec>)
 80005b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	187a      	adds	r2, r7, r1
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fc68 	bl	8000eb0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_UART_MspInit+0xf0>)
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <HAL_UART_MspInit+0xf4>)
 80005e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_UART_MspInit+0xf0>)
 80005e8:	2234      	movs	r2, #52	; 0x34
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_UART_MspInit+0xf0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <HAL_UART_MspInit+0xf0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_UART_MspInit+0xf0>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <HAL_UART_MspInit+0xf0>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_UART_MspInit+0xf0>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <HAL_UART_MspInit+0xf0>)
 800060c:	2220      	movs	r2, #32
 800060e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_UART_MspInit+0xf0>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_UART_MspInit+0xf0>)
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f9f6 	bl	8000a0c <HAL_DMA_Init>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000624:	f7ff ff70 	bl	8000508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_UART_MspInit+0xf0>)
 800062e:	505a      	str	r2, [r3, r1]
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_UART_MspInit+0xf0>)
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b00b      	add	sp, #44	; 0x2c
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40004400 	.word	0x40004400
 8000644:	40021000 	.word	0x40021000
 8000648:	00008004 	.word	0x00008004
 800064c:	200000bc 	.word	0x200000bc
 8000650:	40020008 	.word	0x40020008

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f8aa 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <DMA1_Channel1_IRQHandler+0x14>)
 800068a:	0018      	movs	r0, r3
 800068c:	f000 face 	bl	8000c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	200000bc 	.word	0x200000bc

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ac:	f7ff fff6 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490d      	ldr	r1, [pc, #52]	; (80006e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0a      	ldr	r4, [pc, #40]	; (80006f4 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d6:	f002 f8a5 	bl	8002824 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006da:	f7ff fd9d 	bl	8000218 <main>

080006de <LoopForever>:

LoopForever:
  b LoopForever
 80006de:	e7fe      	b.n	80006de <LoopForever>
  ldr   r0, =_estack
 80006e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ec:	08002914 	.word	0x08002914
  ldr r2, =_sbss
 80006f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f4:	200001b4 	.word	0x200001b4

080006f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_IRQHandler>
	...

080006fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_Init+0x3c>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_Init+0x3c>)
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	0049      	lsls	r1, r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000716:	2003      	movs	r0, #3
 8000718:	f000 f810 	bl	800073c <HAL_InitTick>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d003      	beq.n	8000728 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e001      	b.n	800072c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000728:	f7ff fef4 	bl	8000514 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40022000 	.word	0x40022000

0800073c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000744:	230f      	movs	r3, #15
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <HAL_InitTick+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d02b      	beq.n	80007ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <HAL_InitTick+0x8c>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <HAL_InitTick+0x88>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	0019      	movs	r1, r3
 800075e:	23fa      	movs	r3, #250	; 0xfa
 8000760:	0098      	lsls	r0, r3, #2
 8000762:	f7ff fccd 	bl	8000100 <__udivsi3>
 8000766:	0003      	movs	r3, r0
 8000768:	0019      	movs	r1, r3
 800076a:	0020      	movs	r0, r4
 800076c:	f7ff fcc8 	bl	8000100 <__udivsi3>
 8000770:	0003      	movs	r3, r0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f93d 	bl	80009f2 <HAL_SYSTICK_Config>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d112      	bne.n	80007a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d80a      	bhi.n	8000798 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2301      	movs	r3, #1
 8000786:	425b      	negs	r3, r3
 8000788:	2200      	movs	r2, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f90c 	bl	80009a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_InitTick+0x90>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	e00d      	b.n	80007b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
 80007a0:	e008      	b.n	80007b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a2:	230f      	movs	r3, #15
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e003      	b.n	80007b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ac:	230f      	movs	r3, #15
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007b4:	230f      	movs	r3, #15
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	781b      	ldrb	r3, [r3, #0]
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b005      	add	sp, #20
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	001a      	movs	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	18d2      	adds	r2, r2, r3
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000008 	.word	0x20000008
 80007f0:	200001b0 	.word	0x200001b0

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200001b0 	.word	0x200001b0

08000808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000810:	f7ff fff0 	bl	80007f4 <HAL_GetTick>
 8000814:	0003      	movs	r3, r0
 8000816:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_Delay+0x44>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	001a      	movs	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	189b      	adds	r3, r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	f7ff ffe0 	bl	80007f4 <HAL_GetTick>
 8000834:	0002      	movs	r2, r0
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	429a      	cmp	r2, r3
 800083e:	d8f7      	bhi.n	8000830 <HAL_Delay+0x28>
  {
  }
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	0002      	movs	r2, r0
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b7f      	cmp	r3, #127	; 0x7f
 8000862:	d809      	bhi.n	8000878 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	231f      	movs	r3, #31
 800086c:	401a      	ands	r2, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_EnableIRQ+0x30>)
 8000870:	2101      	movs	r1, #1
 8000872:	4091      	lsls	r1, r2
 8000874:	000a      	movs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b7f      	cmp	r3, #127	; 0x7f
 8000898:	d828      	bhi.n	80008ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <__NVIC_SetPriority+0xd4>)
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	33c0      	adds	r3, #192	; 0xc0
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	589b      	ldr	r3, [r3, r2]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <__NVIC_SetPriority+0xd4>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	089b      	lsrs	r3, r3, #2
 80008e2:	430a      	orrs	r2, r1
 80008e4:	33c0      	adds	r3, #192	; 0xc0
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ea:	e031      	b.n	8000950 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <__NVIC_SetPriority+0xd8>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	0019      	movs	r1, r3
 80008f4:	230f      	movs	r3, #15
 80008f6:	400b      	ands	r3, r1
 80008f8:	3b08      	subs	r3, #8
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3306      	adds	r3, #6
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	3304      	adds	r3, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1dfa      	adds	r2, r7, #7
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	0011      	movs	r1, r2
 800090c:	2203      	movs	r2, #3
 800090e:	400a      	ands	r2, r1
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	21ff      	movs	r1, #255	; 0xff
 8000914:	4091      	lsls	r1, r2
 8000916:	000a      	movs	r2, r1
 8000918:	43d2      	mvns	r2, r2
 800091a:	401a      	ands	r2, r3
 800091c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	019b      	lsls	r3, r3, #6
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	401a      	ands	r2, r3
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0018      	movs	r0, r3
 800092c:	2303      	movs	r3, #3
 800092e:	4003      	ands	r3, r0
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <__NVIC_SetPriority+0xd8>)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001c      	movs	r4, r3
 800093c:	230f      	movs	r3, #15
 800093e:	4023      	ands	r3, r4
 8000940:	3b08      	subs	r3, #8
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	430a      	orrs	r2, r1
 8000946:	3306      	adds	r3, #6
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	18c3      	adds	r3, r0, r3
 800094c:	3304      	adds	r3, #4
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b003      	add	sp, #12
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	045b      	lsls	r3, r3, #17
 8000970:	429a      	cmp	r2, r3
 8000972:	d301      	bcc.n	8000978 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000974:	2301      	movs	r3, #1
 8000976:	e010      	b.n	800099a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <SysTick_Config+0x44>)
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	3a01      	subs	r2, #1
 800097e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2103      	movs	r1, #3
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff ff7c 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x44>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	210f      	movs	r1, #15
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	1c02      	adds	r2, r0, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <__NVIC_SetPriority>
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	0002      	movs	r2, r0
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff33 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ffaf 	bl	8000960 <SysTick_Config>
 8000a02:	0003      	movs	r3, r0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e077      	b.n	8000b0e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_DMA_Init+0x10c>)
 8000a24:	4694      	mov	ip, r2
 8000a26:	4463      	add	r3, ip
 8000a28:	2114      	movs	r1, #20
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff fb68 	bl	8000100 <__udivsi3>
 8000a30:	0003      	movs	r3, r0
 8000a32:	009a      	lsls	r2, r3, #2
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2225      	movs	r2, #37	; 0x25
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4934      	ldr	r1, [pc, #208]	; (8000b1c <HAL_DMA_Init+0x110>)
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6819      	ldr	r1, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	431a      	orrs	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	431a      	orrs	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	430a      	orrs	r2, r1
 8000a84:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 f9c1 	bl	8000e10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	2380      	movs	r3, #128	; 0x80
 8000a94:	01db      	lsls	r3, r3, #7
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d102      	bne.n	8000aa0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa8:	213f      	movs	r1, #63	; 0x3f
 8000aaa:	400a      	ands	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ab6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d011      	beq.n	8000ae4 <HAL_DMA_Init+0xd8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d80d      	bhi.n	8000ae4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f9cc 	bl	8000e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	e008      	b.n	8000af6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2225      	movs	r2, #37	; 0x25
 8000b00:	2101      	movs	r1, #1
 8000b02:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2224      	movs	r2, #36	; 0x24
 8000b08:	2100      	movs	r1, #0
 8000b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	bffdfff8 	.word	0xbffdfff8
 8000b1c:	ffff800f 	.word	0xffff800f

08000b20 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2e:	2317      	movs	r3, #23
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2224      	movs	r2, #36	; 0x24
 8000b3a:	5c9b      	ldrb	r3, [r3, r2]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_DMA_Start_IT+0x24>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e06f      	b.n	8000c24 <HAL_DMA_Start_IT+0x104>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2224      	movs	r2, #36	; 0x24
 8000b48:	2101      	movs	r1, #1
 8000b4a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2225      	movs	r2, #37	; 0x25
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d157      	bne.n	8000c08 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2225      	movs	r2, #37	; 0x25
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	438a      	bics	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	68b9      	ldr	r1, [r7, #8]
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f907 	bl	8000d90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d008      	beq.n	8000b9c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	210e      	movs	r1, #14
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e00f      	b.n	8000bbc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2104      	movs	r1, #4
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d008      	beq.n	8000bdc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	0049      	lsls	r1, r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e00a      	b.n	8000c1e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2224      	movs	r2, #36	; 0x24
 8000c12:	2100      	movs	r1, #0
 8000c14:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000c16:	2317      	movs	r3, #23
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000c1e:	2317      	movs	r3, #23
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	781b      	ldrb	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b006      	add	sp, #24
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000c34:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	221c      	movs	r2, #28
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	4013      	ands	r3, r2
 8000c54:	d027      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x7a>
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d023      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2220      	movs	r2, #32
 8000c66:	4013      	ands	r3, r2
 8000c68:	d107      	bne.n	8000c7a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2104      	movs	r1, #4
 8000c76:	438a      	bics	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000c7c:	6859      	ldr	r1, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	221c      	movs	r2, #28
 8000c84:	4013      	ands	r3, r2
 8000c86:	2204      	movs	r2, #4
 8000c88:	409a      	lsls	r2, r3
 8000c8a:	4b40      	ldr	r3, [pc, #256]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d100      	bne.n	8000c9a <HAL_DMA_IRQHandler+0x6e>
 8000c98:	e073      	b.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	0010      	movs	r0, r2
 8000ca2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000ca4:	e06d      	b.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	221c      	movs	r2, #28
 8000cac:	4013      	ands	r3, r2
 8000cae:	2202      	movs	r2, #2
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	0013      	movs	r3, r2
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d02e      	beq.n	8000d18 <HAL_DMA_IRQHandler+0xec>
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d02a      	beq.n	8000d18 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2220      	movs	r2, #32
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	210a      	movs	r1, #10
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2225      	movs	r2, #37	; 0x25
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000ce8:	6859      	ldr	r1, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	221c      	movs	r2, #28
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2224      	movs	r2, #36	; 0x24
 8000d00:	2100      	movs	r1, #0
 8000d02:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d03a      	beq.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	0010      	movs	r0, r2
 8000d14:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000d16:	e034      	b.n	8000d82 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	221c      	movs	r2, #28
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2208      	movs	r2, #8
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d02b      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x158>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2208      	movs	r2, #8
 8000d30:	4013      	ands	r3, r2
 8000d32:	d027      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	210e      	movs	r1, #14
 8000d40:	438a      	bics	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000d46:	6859      	ldr	r1, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	221c      	movs	r2, #28
 8000d4e:	4013      	ands	r3, r2
 8000d50:	2201      	movs	r2, #1
 8000d52:	409a      	lsls	r2, r3
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_DMA_IRQHandler+0x160>)
 8000d56:	430a      	orrs	r2, r1
 8000d58:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2225      	movs	r2, #37	; 0x25
 8000d64:	2101      	movs	r1, #1
 8000d66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2224      	movs	r2, #36	; 0x24
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	0010      	movs	r0, r2
 8000d80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46c0      	nop			; (mov r8, r8)
}
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020000 	.word	0x40020000

08000d90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000da6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000db8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <DMA_SetConfig+0x7c>)
 8000dbc:	6859      	ldr	r1, [r3, #4]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	221c      	movs	r2, #28
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <DMA_SetConfig+0x7c>)
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b10      	cmp	r3, #16
 8000dde:	d108      	bne.n	8000df2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000df0:	e007      	b.n	8000e02 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b004      	add	sp, #16
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40020000 	.word	0x40020000

08000e10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000e20:	4694      	mov	ip, r2
 8000e22:	4463      	add	r3, ip
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	001a      	movs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	23ff      	movs	r3, #255	; 0xff
 8000e34:	4013      	ands	r3, r2
 8000e36:	3b08      	subs	r3, #8
 8000e38:	2114      	movs	r1, #20
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff f960 	bl	8000100 <__udivsi3>
 8000e40:	0003      	movs	r3, r0
 8000e42:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000e48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	221f      	movs	r2, #31
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2201      	movs	r2, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	10008200 	.word	0x10008200
 8000e64:	40020880 	.word	0x40020880

08000e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	223f      	movs	r2, #63	; 0x3f
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000e7e:	4694      	mov	ip, r2
 8000e80:	4463      	add	r3, ip
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	001a      	movs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	2201      	movs	r2, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	1000823f 	.word	0x1000823f
 8000eac:	40020940 	.word	0x40020940

08000eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e147      	b.n	8001150 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x28>
 8000ed6:	e138      	b.n	800114a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d005      	beq.n	8000ef0 <HAL_GPIO_Init+0x40>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d017      	beq.n	8000f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d123      	bne.n	8000fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	58d3      	ldr	r3, [r2, r3]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2207      	movs	r2, #7
 8000fac:	4013      	ands	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	409a      	lsls	r2, r3
 8000fb4:	0013      	movs	r3, r2
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	6939      	ldr	r1, [r7, #16]
 8000fe0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2203      	movs	r2, #3
 8001000:	401a      	ands	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	029b      	lsls	r3, r3, #10
 800101e:	4013      	ands	r3, r2
 8001020:	d100      	bne.n	8001024 <HAL_GPIO_Init+0x174>
 8001022:	e092      	b.n	800114a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001024:	4a50      	ldr	r2, [pc, #320]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3318      	adds	r3, #24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	589b      	ldr	r3, [r3, r2]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	220f      	movs	r2, #15
 800103c:	409a      	lsls	r2, r3
 800103e:	0013      	movs	r3, r2
 8001040:	43da      	mvns	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	429a      	cmp	r2, r3
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1ca>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	; (800116c <HAL_GPIO_Init+0x2bc>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1c6>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a44      	ldr	r2, [pc, #272]	; (8001170 <HAL_GPIO_Init+0x2c0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1c2>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a43      	ldr	r2, [pc, #268]	; (8001174 <HAL_GPIO_Init+0x2c4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1be>
 800106a:	2303      	movs	r3, #3
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 800106e:	2305      	movs	r3, #5
 8001070:	e004      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 8001072:	2302      	movs	r3, #2
 8001074:	e002      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x1cc>
 800107a:	2300      	movs	r3, #0
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	2103      	movs	r1, #3
 8001080:	400a      	ands	r2, r1
 8001082:	00d2      	lsls	r2, r2, #3
 8001084:	4093      	lsls	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800108c:	4936      	ldr	r1, [pc, #216]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3318      	adds	r3, #24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43da      	mvns	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	035b      	lsls	r3, r3, #13
 80010b2:	4013      	ands	r3, r2
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43da      	mvns	r2, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	039b      	lsls	r3, r3, #14
 80010dc:	4013      	ands	r3, r2
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 80010f0:	2384      	movs	r3, #132	; 0x84
 80010f2:	58d3      	ldr	r3, [r2, r3]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43da      	mvns	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4914      	ldr	r1, [pc, #80]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001116:	2284      	movs	r2, #132	; 0x84
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	58d3      	ldr	r3, [r2, r3]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	4013      	ands	r3, r2
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001142:	4909      	ldr	r1, [pc, #36]	; (8001168 <HAL_GPIO_Init+0x2b8>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	40da      	lsrs	r2, r3
 8001158:	1e13      	subs	r3, r2, #0
 800115a:	d000      	beq.n	800115e <HAL_GPIO_Init+0x2ae>
 800115c:	e6b0      	b.n	8000ec0 <HAL_GPIO_Init+0x10>
  }
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b006      	add	sp, #24
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021800 	.word	0x40021800
 800116c:	50000400 	.word	0x50000400
 8001170:	50000800 	.word	0x50000800
 8001174:	50000c00 	.word	0x50000c00

08001178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a19      	ldr	r2, [pc, #100]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	430a      	orrs	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	429a      	cmp	r2, r3
 800119a:	d11f      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	0013      	movs	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	189b      	adds	r3, r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4912      	ldr	r1, [pc, #72]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7fe ffa8 	bl	8000100 <__udivsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b6:	e008      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e001      	b.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e009      	b.n	80011de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	401a      	ands	r2, r3
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	429a      	cmp	r2, r3
 80011da:	d0ed      	beq.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40007000 	.word	0x40007000
 80011ec:	fffff9ff 	.word	0xfffff9ff
 80011f0:	20000000 	.word	0x20000000
 80011f4:	000f4240 	.word	0x000f4240

080011f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <LL_RCC_GetAPB1Prescaler+0x14>)
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	23e0      	movs	r3, #224	; 0xe0
 8001202:	01db      	lsls	r3, r3, #7
 8001204:	4013      	ands	r3, r2
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e2f3      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x1e>
 800122c:	e07c      	b.n	8001328 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122e:	4bc3      	ldr	r3, [pc, #780]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2238      	movs	r2, #56	; 0x38
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001238:	4bc0      	ldr	r3, [pc, #768]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x3e>
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d002      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b08      	cmp	r3, #8
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4bb9      	ldr	r3, [pc, #740]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4013      	ands	r3, r2
 800125e:	d062      	beq.n	8001326 <HAL_RCC_OscConfig+0x116>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d15e      	bne.n	8001326 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e2ce      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	429a      	cmp	r2, r3
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x78>
 8001278:	4bb0      	ldr	r3, [pc, #704]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4baf      	ldr	r3, [pc, #700]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	0249      	lsls	r1, r1, #9
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e020      	b.n	80012ca <HAL_RCC_OscConfig+0xba>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	23a0      	movs	r3, #160	; 0xa0
 800128e:	02db      	lsls	r3, r3, #11
 8001290:	429a      	cmp	r2, r3
 8001292:	d10e      	bne.n	80012b2 <HAL_RCC_OscConfig+0xa2>
 8001294:	4ba9      	ldr	r3, [pc, #676]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4ba8      	ldr	r3, [pc, #672]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	02c9      	lsls	r1, r1, #11
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	4ba6      	ldr	r3, [pc, #664]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4ba5      	ldr	r3, [pc, #660]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0249      	lsls	r1, r1, #9
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e00b      	b.n	80012ca <HAL_RCC_OscConfig+0xba>
 80012b2:	4ba2      	ldr	r3, [pc, #648]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4ba1      	ldr	r3, [pc, #644]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012b8:	49a1      	ldr	r1, [pc, #644]	; (8001540 <HAL_RCC_OscConfig+0x330>)
 80012ba:	400a      	ands	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012c4:	499f      	ldr	r1, [pc, #636]	; (8001544 <HAL_RCC_OscConfig+0x334>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d014      	beq.n	80012fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa8f 	bl	80007f4 <HAL_GetTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fa8a 	bl	80007f4 <HAL_GetTick>
 80012e0:	0002      	movs	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e28d      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ee:	4b93      	ldr	r3, [pc, #588]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xcc>
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa7a 	bl	80007f4 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fa75 	bl	80007f4 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e278      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001318:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0xf6>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x124>
 8001332:	e099      	b.n	8001468 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001334:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2238      	movs	r2, #56	; 0x38
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800133e:	4b7f      	ldr	r3, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2203      	movs	r2, #3
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x144>
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d002      	beq.n	800135a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d135      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135a:	4b78      	ldr	r3, [pc, #480]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4013      	ands	r3, r2
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x162>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e24b      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a74      	ldr	r2, [pc, #464]	; (8001548 <HAL_RCC_OscConfig+0x338>)
 8001378:	4013      	ands	r3, r2
 800137a:	0019      	movs	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	021a      	lsls	r2, r3, #8
 8001382:	4b6e      	ldr	r3, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001384:	430a      	orrs	r2, r1
 8001386:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800138e:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x33c>)
 8001394:	4013      	ands	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800139e:	430a      	orrs	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013a2:	4b66      	ldr	r3, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	0adb      	lsrs	r3, r3, #11
 80013a8:	2207      	movs	r2, #7
 80013aa:	4013      	ands	r3, r2
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x340>)
 80013ae:	40da      	lsrs	r2, r3
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x344>)
 80013b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x348>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff f9bf 	bl	800073c <HAL_InitTick>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d051      	beq.n	8001466 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e221      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a5e      	ldr	r2, [pc, #376]	; (800154c <HAL_RCC_OscConfig+0x33c>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	0019      	movs	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013e2:	4b56      	ldr	r3, [pc, #344]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0049      	lsls	r1, r1, #1
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fa00 	bl	80007f4 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff f9fb 	bl	80007f4 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1fe      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4013      	ands	r3, r2
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <HAL_RCC_OscConfig+0x338>)
 800141e:	4013      	ands	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	021a      	lsls	r2, r3, #8
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800142a:	430a      	orrs	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	e01b      	b.n	8001468 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001430:	4b42      	ldr	r3, [pc, #264]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001436:	4949      	ldr	r1, [pc, #292]	; (800155c <HAL_RCC_OscConfig+0x34c>)
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff f9da 	bl	80007f4 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff f9d5 	bl	80007f4 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1d8      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001458:	4b38      	ldr	r3, [pc, #224]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4013      	ands	r3, r2
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x236>
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001466:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2208      	movs	r2, #8
 800146e:	4013      	ands	r3, r2
 8001470:	d047      	beq.n	8001502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2238      	movs	r2, #56	; 0x38
 8001478:	4013      	ands	r3, r2
 800147a:	2b18      	cmp	r3, #24
 800147c:	d10a      	bne.n	8001494 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d03c      	beq.n	8001502 <HAL_RCC_OscConfig+0x2f2>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d138      	bne.n	8001502 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e1ba      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d019      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 800149e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014a2:	2101      	movs	r1, #1
 80014a4:	430a      	orrs	r2, r1
 80014a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff f9a4 	bl	80007f4 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff f99f 	bl	80007f4 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1a2      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d0f1      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2a2>
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	438a      	bics	r2, r1
 80014da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff f98a 	bl	80007f4 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff f985 	bl	80007f4 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e188      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f1      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	d100      	bne.n	800150e <HAL_RCC_OscConfig+0x2fe>
 800150c:	e0c6      	b.n	800169c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150e:	231f      	movs	r3, #31
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2238      	movs	r2, #56	; 0x38
 800151c:	4013      	ands	r3, r2
 800151e:	2b20      	cmp	r3, #32
 8001520:	d11e      	bne.n	8001560 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x32c>)
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2202      	movs	r2, #2
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x31e>
 800152c:	e0b6      	b.n	800169c <HAL_RCC_OscConfig+0x48c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d000      	beq.n	8001538 <HAL_RCC_OscConfig+0x328>
 8001536:	e0b1      	b.n	800169c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e166      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
 800153c:	40021000 	.word	0x40021000
 8001540:	fffeffff 	.word	0xfffeffff
 8001544:	fffbffff 	.word	0xfffbffff
 8001548:	ffff80ff 	.word	0xffff80ff
 800154c:	ffffc7ff 	.word	0xffffc7ff
 8001550:	00f42400 	.word	0x00f42400
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004
 800155c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001560:	4bac      	ldr	r3, [pc, #688]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	4013      	ands	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x360>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x362>
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d011      	beq.n	800159a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4ba7      	ldr	r3, [pc, #668]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800157a:	4ba6      	ldr	r3, [pc, #664]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
 8001584:	4ba3      	ldr	r3, [pc, #652]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001592:	231f      	movs	r3, #31
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159a:	4b9f      	ldr	r3, [pc, #636]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	d11a      	bne.n	80015dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a6:	4b9c      	ldr	r3, [pc, #624]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b9b      	ldr	r3, [pc, #620]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0049      	lsls	r1, r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015b4:	f7ff f91e 	bl	80007f4 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff f919 	bl	80007f4 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e11c      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d0:	4b91      	ldr	r3, [pc, #580]	; (8001818 <HAL_RCC_OscConfig+0x608>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3e2>
 80015e4:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80015e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e8:	4b8a      	ldr	r3, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80015f0:	e01c      	b.n	800162c <HAL_RCC_OscConfig+0x41c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x404>
 80015fa:	4b86      	ldr	r3, [pc, #536]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80015fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015fe:	4b85      	ldr	r3, [pc, #532]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001600:	2104      	movs	r1, #4
 8001602:	430a      	orrs	r2, r1
 8001604:	65da      	str	r2, [r3, #92]	; 0x5c
 8001606:	4b83      	ldr	r3, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800160a:	4b82      	ldr	r3, [pc, #520]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	65da      	str	r2, [r3, #92]	; 0x5c
 8001612:	e00b      	b.n	800162c <HAL_RCC_OscConfig+0x41c>
 8001614:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001618:	4b7e      	ldr	r3, [pc, #504]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800161a:	2101      	movs	r1, #1
 800161c:	438a      	bics	r2, r1
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001626:	2104      	movs	r1, #4
 8001628:	438a      	bics	r2, r1
 800162a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d014      	beq.n	800165e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff f8de 	bl	80007f4 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163c:	e009      	b.n	8001652 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163e:	f7ff f8d9 	bl	80007f4 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	4a74      	ldr	r2, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x60c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0db      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x42e>
 800165c:	e013      	b.n	8001686 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff f8c9 	bl	80007f4 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001666:	e009      	b.n	800167c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff f8c4 	bl	80007f4 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	4a6a      	ldr	r2, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x60c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0c6      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800167c:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001686:	231f      	movs	r3, #31
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001690:	4b60      	ldr	r3, [pc, #384]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001696:	4962      	ldr	r1, [pc, #392]	; (8001820 <HAL_RCC_OscConfig+0x610>)
 8001698:	400a      	ands	r2, r1
 800169a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d100      	bne.n	80016a6 <HAL_RCC_OscConfig+0x496>
 80016a4:	e0b0      	b.n	8001808 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2238      	movs	r2, #56	; 0x38
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d100      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4a4>
 80016b2:	e078      	b.n	80017a6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d153      	bne.n	8001764 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b54      	ldr	r3, [pc, #336]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016c2:	4958      	ldr	r1, [pc, #352]	; (8001824 <HAL_RCC_OscConfig+0x614>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff f894 	bl	80007f4 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f88f 	bl	80007f4 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e092      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f0:	4b48      	ldr	r3, [pc, #288]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x618>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	431a      	orrs	r2, r3
 8001718:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800171a:	430a      	orrs	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0449      	lsls	r1, r1, #17
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800172c:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0549      	lsls	r1, r1, #21
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff f85b 	bl	80007f4 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff f856 	bl	80007f4 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e059      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	049b      	lsls	r3, r3, #18
 800175e:	4013      	ands	r3, r2
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x534>
 8001762:	e051      	b.n	8001808 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800176a:	492e      	ldr	r1, [pc, #184]	; (8001824 <HAL_RCC_OscConfig+0x614>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f840 	bl	80007f4 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff f83b 	bl	80007f4 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e03e      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	049b      	lsls	r3, r3, #18
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <HAL_RCC_OscConfig+0x61c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	e030      	b.n	8001808 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e02b      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_RCC_OscConfig+0x604>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2203      	movs	r2, #3
 80017bc:	401a      	ands	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d11e      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2270      	movs	r2, #112	; 0x70
 80017ca:	401a      	ands	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d117      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	23fe      	movs	r3, #254	; 0xfe
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d10e      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	23f8      	movs	r3, #248	; 0xf8
 80017ea:	039b      	lsls	r3, r3, #14
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	0f5b      	lsrs	r3, r3, #29
 80017fa:	075a      	lsls	r2, r3, #29
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b008      	add	sp, #32
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	00001388 	.word	0x00001388
 8001820:	efffffff 	.word	0xefffffff
 8001824:	feffffff 	.word	0xfeffffff
 8001828:	1fc1808c 	.word	0x1fc1808c
 800182c:	effefffc 	.word	0xeffefffc

08001830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0e9      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2207      	movs	r2, #7
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d91e      	bls.n	8001890 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2207      	movs	r2, #7
 8001858:	4393      	bics	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001864:	f7fe ffc6 	bl	80007f4 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186c:	e009      	b.n	8001882 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186e:	f7fe ffc1 	bl	80007f4 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4a6a      	ldr	r2, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1f4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0ca      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	4013      	ands	r3, r2
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d015      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d006      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018a4:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018aa:	21e0      	movs	r1, #224	; 0xe0
 80018ac:	01c9      	lsls	r1, r1, #7
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_RCC_ClockConfig+0x1fc>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d057      	beq.n	8001980 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d12b      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e097      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f0:	4b4d      	ldr	r3, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	049b      	lsls	r3, r3, #18
 80018f8:	4013      	ands	r3, r2
 80018fa:	d11f      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e08b      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4013      	ands	r3, r2
 8001912:	d113      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e07f      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d106      	bne.n	800192e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d108      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e074      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2202      	movs	r2, #2
 8001934:	4013      	ands	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e06d      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2207      	movs	r2, #7
 8001942:	4393      	bics	r3, r2
 8001944:	0019      	movs	r1, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7fe ff50 	bl	80007f4 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001958:	e009      	b.n	800196e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195a:	f7fe ff4b 	bl	80007f4 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_RCC_ClockConfig+0x1f4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e054      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2238      	movs	r2, #56	; 0x38
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	429a      	cmp	r2, r3
 800197e:	d1ec      	bne.n	800195a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2207      	movs	r2, #7
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d21e      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2207      	movs	r2, #7
 8001994:	4393      	bics	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019a0:	f7fe ff28 	bl	80007f4 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a8:	e009      	b.n	80019be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	f7fe ff23 	bl	80007f4 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_RCC_ClockConfig+0x1f4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e02c      	b.n	8001a18 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2207      	movs	r2, #7
 80019c4:	4013      	ands	r3, r2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1ee      	bne.n	80019aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2204      	movs	r2, #4
 80019d2:	4013      	ands	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_RCC_ClockConfig+0x200>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019ea:	f000 f829 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019ee:	0001      	movs	r1, r0
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	220f      	movs	r2, #15
 80019f8:	401a      	ands	r2, r3
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_RCC_ClockConfig+0x204>)
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	58d3      	ldr	r3, [r2, r3]
 8001a00:	221f      	movs	r2, #31
 8001a02:	4013      	ands	r3, r2
 8001a04:	000a      	movs	r2, r1
 8001a06:	40da      	lsrs	r2, r3
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x208>)
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_ClockConfig+0x20c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe fe93 	bl	800073c <HAL_InitTick>
 8001a16:	0003      	movs	r3, r0
}
 8001a18:	0018      	movs	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b004      	add	sp, #16
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40022000 	.word	0x40022000
 8001a24:	00001388 	.word	0x00001388
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	fffff0ff 	.word	0xfffff0ff
 8001a30:	ffff8fff 	.word	0xffff8fff
 8001a34:	08002894 	.word	0x08002894
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2238      	movs	r2, #56	; 0x38
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d10f      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0adb      	lsrs	r3, r3, #11
 8001a56:	2207      	movs	r2, #7
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	4835      	ldr	r0, [pc, #212]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a66:	f7fe fb4b 	bl	8000100 <__udivsi3>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e05d      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2238      	movs	r2, #56	; 0x38
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e054      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d138      	bne.n	8001b00 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	4824      	ldr	r0, [pc, #144]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ab0:	f7fe fb26 	bl	8000100 <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	227f      	movs	r2, #127	; 0x7f
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	434b      	muls	r3, r1
 8001ac4:	617b      	str	r3, [r7, #20]
        break;
 8001ac6:	e00d      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001acc:	f7fe fb18 	bl	8000100 <__udivsi3>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	227f      	movs	r2, #127	; 0x7f
 8001adc:	4013      	ands	r3, r2
 8001ade:	434b      	muls	r3, r1
 8001ae0:	617b      	str	r3, [r7, #20]
        break;
 8001ae2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0f5b      	lsrs	r3, r3, #29
 8001aea:	2207      	movs	r2, #7
 8001aec:	4013      	ands	r3, r2
 8001aee:	3301      	adds	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7fe fb03 	bl	8000100 <__udivsi3>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e015      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2238      	movs	r2, #56	; 0x38
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d103      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b18      	cmp	r3, #24
 8001b1e:	d103      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b20:	23fa      	movs	r3, #250	; 0xfa
 8001b22:	01db      	lsls	r3, r3, #7
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	e001      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b2c:	693b      	ldr	r3, [r7, #16]
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b006      	add	sp, #24
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000000 	.word	0x20000000

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b5c:	f7ff fff2 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b60:	0004      	movs	r4, r0
 8001b62:	f7ff fb49 	bl	80011f8 <LL_RCC_GetAPB1Prescaler>
 8001b66:	0003      	movs	r3, r0
 8001b68:	0b1a      	lsrs	r2, r3, #12
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	58d3      	ldr	r3, [r2, r3]
 8001b70:	221f      	movs	r2, #31
 8001b72:	4013      	ands	r3, r2
 8001b74:	40dc      	lsrs	r4, r3
 8001b76:	0023      	movs	r3, r4
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	080028d4 	.word	0x080028d4

08001b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e046      	b.n	8001c24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2288      	movs	r2, #136	; 0x88
 8001b9a:	589b      	ldr	r3, [r3, r2]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d107      	bne.n	8001bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2284      	movs	r2, #132	; 0x84
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	0018      	movs	r0, r3
 8001bac:	f7fe fcd6 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2288      	movs	r2, #136	; 0x88
 8001bb4:	2124      	movs	r1, #36	; 0x24
 8001bb6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f000 fa10 	bl	8001ff8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f000 f8a2 	bl	8001d24 <UART_SetConfig>
 8001be0:	0003      	movs	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e01c      	b.n	8001c24 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	490d      	ldr	r1, [pc, #52]	; (8001c2c <HAL_UART_Init+0xa8>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	212a      	movs	r1, #42	; 0x2a
 8001c06:	438a      	bics	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fa9f 	bl	8002160 <UART_CheckIdleState>
 8001c22:	0003      	movs	r3, r0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	ffffb7ff 	.word	0xffffb7ff

08001c30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	1dbb      	adds	r3, r7, #6
 8001c3c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	228c      	movs	r2, #140	; 0x8c
 8001c42:	589b      	ldr	r3, [r3, r2]
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d145      	bne.n	8001cd4 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_UART_Receive_DMA+0x26>
 8001c4e:	1dbb      	adds	r3, r7, #6
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e03d      	b.n	8001cd6 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	015b      	lsls	r3, r3, #5
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d109      	bne.n	8001c7a <HAL_UART_Receive_DMA+0x4a>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	d001      	beq.n	8001c7a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e02d      	b.n	8001cd6 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d019      	beq.n	8001cc2 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c92:	613b      	str	r3, [r7, #16]
  return(result);
 8001c94:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f383 8810 	msr	PRIMASK, r3
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	04c9      	lsls	r1, r1, #19
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f383 8810 	msr	PRIMASK, r3
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001cc2:	1dbb      	adds	r3, r7, #6
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 fb62 	bl	8002394 <UART_Start_Receive_DMA>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	e000      	b.n	8001cd6 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b008      	add	sp, #32
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	000a      	movs	r2, r1
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d2c:	231a      	movs	r3, #26
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4aa1      	ldr	r2, [pc, #644]	; (8001fd8 <UART_SetConfig+0x2b4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a9c      	ldr	r2, [pc, #624]	; (8001fdc <UART_SetConfig+0x2b8>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a93      	ldr	r2, [pc, #588]	; (8001fe0 <UART_SetConfig+0x2bc>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	220f      	movs	r2, #15
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a89      	ldr	r2, [pc, #548]	; (8001fe4 <UART_SetConfig+0x2c0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d127      	bne.n	8001e12 <UART_SetConfig+0xee>
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <UART_SetConfig+0x2c4>)
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <UART_SetConfig+0xda>
 8001dce:	d81b      	bhi.n	8001e08 <UART_SetConfig+0xe4>
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d00a      	beq.n	8001dea <UART_SetConfig+0xc6>
 8001dd4:	d818      	bhi.n	8001e08 <UART_SetConfig+0xe4>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <UART_SetConfig+0xbc>
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d00a      	beq.n	8001df4 <UART_SetConfig+0xd0>
 8001dde:	e013      	b.n	8001e08 <UART_SetConfig+0xe4>
 8001de0:	231b      	movs	r3, #27
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e021      	b.n	8001e2e <UART_SetConfig+0x10a>
 8001dea:	231b      	movs	r3, #27
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e01c      	b.n	8001e2e <UART_SetConfig+0x10a>
 8001df4:	231b      	movs	r3, #27
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2204      	movs	r2, #4
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	e017      	b.n	8001e2e <UART_SetConfig+0x10a>
 8001dfe:	231b      	movs	r3, #27
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2208      	movs	r2, #8
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e012      	b.n	8001e2e <UART_SetConfig+0x10a>
 8001e08:	231b      	movs	r3, #27
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e00d      	b.n	8001e2e <UART_SetConfig+0x10a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a75      	ldr	r2, [pc, #468]	; (8001fec <UART_SetConfig+0x2c8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d104      	bne.n	8001e26 <UART_SetConfig+0x102>
 8001e1c:	231b      	movs	r3, #27
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e003      	b.n	8001e2e <UART_SetConfig+0x10a>
 8001e26:	231b      	movs	r3, #27
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d000      	beq.n	8001e3c <UART_SetConfig+0x118>
 8001e3a:	e065      	b.n	8001f08 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8001e3c:	231b      	movs	r3, #27
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d015      	beq.n	8001e72 <UART_SetConfig+0x14e>
 8001e46:	dc18      	bgt.n	8001e7a <UART_SetConfig+0x156>
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00d      	beq.n	8001e68 <UART_SetConfig+0x144>
 8001e4c:	dc15      	bgt.n	8001e7a <UART_SetConfig+0x156>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <UART_SetConfig+0x134>
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d005      	beq.n	8001e62 <UART_SetConfig+0x13e>
 8001e56:	e010      	b.n	8001e7a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e58:	f7ff fe7e 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	617b      	str	r3, [r7, #20]
        break;
 8001e60:	e012      	b.n	8001e88 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e62:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <UART_SetConfig+0x2cc>)
 8001e64:	617b      	str	r3, [r7, #20]
        break;
 8001e66:	e00f      	b.n	8001e88 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e68:	f7ff fdea 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	617b      	str	r3, [r7, #20]
        break;
 8001e70:	e00a      	b.n	8001e88 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	617b      	str	r3, [r7, #20]
        break;
 8001e78:	e006      	b.n	8001e88 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001e7e:	231a      	movs	r3, #26
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
        break;
 8001e86:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <UART_SetConfig+0x16c>
 8001e8e:	e08d      	b.n	8001fac <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <UART_SetConfig+0x2d0>)
 8001e96:	0052      	lsls	r2, r2, #1
 8001e98:	5ad3      	ldrh	r3, [r2, r3]
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f7fe f92f 	bl	8000100 <__udivsi3>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	18d2      	adds	r2, r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	f7fe f923 	bl	8000100 <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d91c      	bls.n	8001efe <UART_SetConfig+0x1da>
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d217      	bcs.n	8001efe <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	200e      	movs	r0, #14
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	438a      	bics	r2, r1
 8001eda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	b299      	uxth	r1, r3
 8001ee8:	183b      	adds	r3, r7, r0
 8001eea:	183a      	adds	r2, r7, r0
 8001eec:	8812      	ldrh	r2, [r2, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	183a      	adds	r2, r7, r0
 8001ef8:	8812      	ldrh	r2, [r2, #0]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	e056      	b.n	8001fac <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001efe:	231a      	movs	r3, #26
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	e051      	b.n	8001fac <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f08:	231b      	movs	r3, #27
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d015      	beq.n	8001f3e <UART_SetConfig+0x21a>
 8001f12:	dc18      	bgt.n	8001f46 <UART_SetConfig+0x222>
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d00d      	beq.n	8001f34 <UART_SetConfig+0x210>
 8001f18:	dc15      	bgt.n	8001f46 <UART_SetConfig+0x222>
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <UART_SetConfig+0x200>
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d005      	beq.n	8001f2e <UART_SetConfig+0x20a>
 8001f22:	e010      	b.n	8001f46 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f24:	f7ff fe18 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	617b      	str	r3, [r7, #20]
        break;
 8001f2c:	e012      	b.n	8001f54 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <UART_SetConfig+0x2cc>)
 8001f30:	617b      	str	r3, [r7, #20]
        break;
 8001f32:	e00f      	b.n	8001f54 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f34:	f7ff fd84 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	617b      	str	r3, [r7, #20]
        break;
 8001f3c:	e00a      	b.n	8001f54 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	617b      	str	r3, [r7, #20]
        break;
 8001f44:	e006      	b.n	8001f54 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001f4a:	231a      	movs	r3, #26
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
        break;
 8001f52:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d028      	beq.n	8001fac <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <UART_SetConfig+0x2d0>)
 8001f60:	0052      	lsls	r2, r2, #1
 8001f62:	5ad3      	ldrh	r3, [r2, r3]
 8001f64:	0019      	movs	r1, r3
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7fe f8ca 	bl	8000100 <__udivsi3>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	001a      	movs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	18d2      	adds	r2, r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	0010      	movs	r0, r2
 8001f80:	f7fe f8be 	bl	8000100 <__udivsi3>
 8001f84:	0003      	movs	r3, r0
 8001f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d90a      	bls.n	8001fa4 <UART_SetConfig+0x280>
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	025b      	lsls	r3, r3, #9
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d205      	bcs.n	8001fa4 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	e003      	b.n	8001fac <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001fa4:	231a      	movs	r3, #26
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	226a      	movs	r2, #106	; 0x6a
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2268      	movs	r2, #104	; 0x68
 8001fb8:	2101      	movs	r1, #1
 8001fba:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001fc8:	231a      	movs	r3, #26
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b008      	add	sp, #32
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	cfff69f3 	.word	0xcfff69f3
 8001fdc:	ffffcfff 	.word	0xffffcfff
 8001fe0:	11fff4ff 	.word	0x11fff4ff
 8001fe4:	40013800 	.word	0x40013800
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40004400 	.word	0x40004400
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	080028f4 	.word	0x080028f4

08001ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	2208      	movs	r2, #8
 8002006:	4013      	ands	r3, r2
 8002008:	d00b      	beq.n	8002022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a4a      	ldr	r2, [pc, #296]	; (800213c <UART_AdvFeatureConfig+0x144>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d00b      	beq.n	8002044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a43      	ldr	r2, [pc, #268]	; (8002140 <UART_AdvFeatureConfig+0x148>)
 8002034:	4013      	ands	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	2202      	movs	r2, #2
 800204a:	4013      	ands	r3, r2
 800204c:	d00b      	beq.n	8002066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <UART_AdvFeatureConfig+0x14c>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	d00b      	beq.n	8002088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a34      	ldr	r2, [pc, #208]	; (8002148 <UART_AdvFeatureConfig+0x150>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2210      	movs	r2, #16
 800208e:	4013      	ands	r3, r2
 8002090:	d00b      	beq.n	80020aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a2c      	ldr	r2, [pc, #176]	; (800214c <UART_AdvFeatureConfig+0x154>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	2220      	movs	r2, #32
 80020b0:	4013      	ands	r3, r2
 80020b2:	d00b      	beq.n	80020cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <UART_AdvFeatureConfig+0x158>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	4013      	ands	r3, r2
 80020d4:	d01d      	beq.n	8002112 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <UART_AdvFeatureConfig+0x15c>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	035b      	lsls	r3, r3, #13
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d10b      	bne.n	8002112 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <UART_AdvFeatureConfig+0x160>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	4013      	ands	r3, r2
 800211a:	d00b      	beq.n	8002134 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <UART_AdvFeatureConfig+0x164>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
  }
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}
 800213c:	ffff7fff 	.word	0xffff7fff
 8002140:	fffdffff 	.word	0xfffdffff
 8002144:	fffeffff 	.word	0xfffeffff
 8002148:	fffbffff 	.word	0xfffbffff
 800214c:	ffffefff 	.word	0xffffefff
 8002150:	ffffdfff 	.word	0xffffdfff
 8002154:	ffefffff 	.word	0xffefffff
 8002158:	ff9fffff 	.word	0xff9fffff
 800215c:	fff7ffff 	.word	0xfff7ffff

08002160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b092      	sub	sp, #72	; 0x48
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2290      	movs	r2, #144	; 0x90
 800216c:	2100      	movs	r1, #0
 800216e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002170:	f7fe fb40 	bl	80007f4 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2208      	movs	r2, #8
 8002180:	4013      	ands	r3, r2
 8002182:	2b08      	cmp	r3, #8
 8002184:	d12d      	bne.n	80021e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	0391      	lsls	r1, r2, #14
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4a47      	ldr	r2, [pc, #284]	; (80022ac <UART_CheckIdleState+0x14c>)
 8002190:	9200      	str	r2, [sp, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	f000 f88e 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d022      	beq.n	80021e2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219c:	f3ef 8310 	mrs	r3, PRIMASK
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a6:	2301      	movs	r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	f383 8810 	msr	PRIMASK, r3
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	438a      	bics	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	f383 8810 	msr	PRIMASK, r3
}
 80021cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2288      	movs	r2, #136	; 0x88
 80021d2:	2120      	movs	r1, #32
 80021d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2284      	movs	r2, #132	; 0x84
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e060      	b.n	80022a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2204      	movs	r2, #4
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d146      	bne.n	800227e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	03d1      	lsls	r1, r2, #15
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <UART_CheckIdleState+0x14c>)
 80021fa:	9200      	str	r2, [sp, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f000 f859 	bl	80022b4 <UART_WaitOnFlagUntilTimeout>
 8002202:	1e03      	subs	r3, r0, #0
 8002204:	d03b      	beq.n	800227e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002206:	f3ef 8310 	mrs	r3, PRIMASK
 800220a:	60fb      	str	r3, [r7, #12]
  return(result);
 800220c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f383 8810 	msr	PRIMASK, r3
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4922      	ldr	r1, [pc, #136]	; (80022b0 <UART_CheckIdleState+0x150>)
 8002228:	400a      	ands	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f383 8810 	msr	PRIMASK, r3
}
 8002236:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002238:	f3ef 8310 	mrs	r3, PRIMASK
 800223c:	61bb      	str	r3, [r7, #24]
  return(result);
 800223e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
 8002242:	2301      	movs	r3, #1
 8002244:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f383 8810 	msr	PRIMASK, r3
}
 800224c:	46c0      	nop			; (mov r8, r8)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	438a      	bics	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f383 8810 	msr	PRIMASK, r3
}
 8002268:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	228c      	movs	r2, #140	; 0x8c
 800226e:	2120      	movs	r1, #32
 8002270:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2284      	movs	r2, #132	; 0x84
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e012      	b.n	80022a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2288      	movs	r2, #136	; 0x88
 8002282:	2120      	movs	r1, #32
 8002284:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	228c      	movs	r2, #140	; 0x8c
 800228a:	2120      	movs	r1, #32
 800228c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2284      	movs	r2, #132	; 0x84
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b010      	add	sp, #64	; 0x40
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	01ffffff 	.word	0x01ffffff
 80022b0:	fffffedf 	.word	0xfffffedf

080022b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c4:	e051      	b.n	800236a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3301      	adds	r3, #1
 80022ca:	d04e      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022cc:	f7fe fa92 	bl	80007f4 <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e051      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	d03b      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0xb6>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d038      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0xb6>
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d035      	beq.n	800236a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2208      	movs	r2, #8
 8002306:	4013      	ands	r3, r2
 8002308:	2b08      	cmp	r3, #8
 800230a:	d111      	bne.n	8002330 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2208      	movs	r2, #8
 8002312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f922 	bl	8002560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2290      	movs	r2, #144	; 0x90
 8002320:	2108      	movs	r1, #8
 8002322:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2284      	movs	r2, #132	; 0x84
 8002328:	2100      	movs	r1, #0
 800232a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e02c      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	401a      	ands	r2, r3
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	429a      	cmp	r2, r3
 8002342:	d112      	bne.n	800236a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 f905 	bl	8002560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2290      	movs	r2, #144	; 0x90
 800235a:	2120      	movs	r1, #32
 800235c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2284      	movs	r2, #132	; 0x84
 8002362:	2100      	movs	r1, #0
 8002364:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e00f      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	4013      	ands	r3, r2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	425a      	negs	r2, r3
 800237a:	4153      	adcs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	001a      	movs	r2, r3
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d09e      	beq.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b090      	sub	sp, #64	; 0x40
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1dba      	adds	r2, r7, #6
 80023ac:	215c      	movs	r1, #92	; 0x5c
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2290      	movs	r2, #144	; 0x90
 80023b6:	2100      	movs	r1, #0
 80023b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	228c      	movs	r2, #140	; 0x8c
 80023be:	2122      	movs	r1, #34	; 0x22
 80023c0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	589b      	ldr	r3, [r3, r2]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02d      	beq.n	8002428 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	589b      	ldr	r3, [r3, r2]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <UART_Start_Receive_DMA+0x140>)
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	589b      	ldr	r3, [r3, r2]
 80023dc:	4a3e      	ldr	r2, [pc, #248]	; (80024d8 <UART_Start_Receive_DMA+0x144>)
 80023de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	589b      	ldr	r3, [r3, r2]
 80023e6:	4a3d      	ldr	r2, [pc, #244]	; (80024dc <UART_Start_Receive_DMA+0x148>)
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	2200      	movs	r2, #0
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	5898      	ldr	r0, [r3, r2]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3324      	adds	r3, #36	; 0x24
 8002400:	0019      	movs	r1, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	001a      	movs	r2, r3
 8002408:	1dbb      	adds	r3, r7, #6
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	f7fe fb88 	bl	8000b20 <HAL_DMA_Start_IT>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d009      	beq.n	8002428 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2290      	movs	r2, #144	; 0x90
 8002418:	2110      	movs	r1, #16
 800241a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	228c      	movs	r2, #140	; 0x8c
 8002420:	2120      	movs	r1, #32
 8002422:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e050      	b.n	80024ca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d019      	beq.n	8002464 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002430:	f3ef 8310 	mrs	r3, PRIMASK
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243a:	2301      	movs	r3, #1
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	f383 8810 	msr	PRIMASK, r3
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2180      	movs	r1, #128	; 0x80
 8002452:	0049      	lsls	r1, r1, #1
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	f383 8810 	msr	PRIMASK, r3
}
 8002462:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002464:	f3ef 8310 	mrs	r3, PRIMASK
 8002468:	613b      	str	r3, [r7, #16]
  return(result);
 800246a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f383 8810 	msr	PRIMASK, r3
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002496:	f3ef 8310 	mrs	r3, PRIMASK
 800249a:	61fb      	str	r3, [r7, #28]
  return(result);
 800249c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
 80024a0:	2301      	movs	r3, #1
 80024a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f383 8810 	msr	PRIMASK, r3
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2140      	movs	r1, #64	; 0x40
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f383 8810 	msr	PRIMASK, r3
}
 80024c6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b010      	add	sp, #64	; 0x40
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	0800262d 	.word	0x0800262d
 80024d8:	0800275d 	.word	0x0800275d
 80024dc:	0800279f 	.word	0x0800279f

080024e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e8:	f3ef 8310 	mrs	r3, PRIMASK
 80024ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ee:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	2301      	movs	r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f383 8810 	msr	PRIMASK, r3
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	21c0      	movs	r1, #192	; 0xc0
 800250a:	438a      	bics	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f383 8810 	msr	PRIMASK, r3
}
 8002518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251a:	f3ef 8310 	mrs	r3, PRIMASK
 800251e:	617b      	str	r3, [r7, #20]
  return(result);
 8002520:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	2301      	movs	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f383 8810 	msr	PRIMASK, r3
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <UART_EndTxTransfer+0x7c>)
 800253c:	400a      	ands	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f383 8810 	msr	PRIMASK, r3
}
 800254a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2288      	movs	r2, #136	; 0x88
 8002550:	2120      	movs	r1, #32
 8002552:	5099      	str	r1, [r3, r2]
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b00a      	add	sp, #40	; 0x28
 800255a:	bd80      	pop	{r7, pc}
 800255c:	ff7fffff 	.word	0xff7fffff

08002560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	; 0x38
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002568:	f3ef 8310 	mrs	r3, PRIMASK
 800256c:	617b      	str	r3, [r7, #20]
  return(result);
 800256e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	2301      	movs	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f383 8810 	msr	PRIMASK, r3
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4926      	ldr	r1, [pc, #152]	; (8002624 <UART_EndRxTransfer+0xc4>)
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f383 8810 	msr	PRIMASK, r3
}
 8002598:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800259a:	f3ef 8310 	mrs	r3, PRIMASK
 800259e:	623b      	str	r3, [r7, #32]
  return(result);
 80025a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	2301      	movs	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	f383 8810 	msr	PRIMASK, r3
}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	491b      	ldr	r1, [pc, #108]	; (8002628 <UART_EndRxTransfer+0xc8>)
 80025bc:	400a      	ands	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	f383 8810 	msr	PRIMASK, r3
}
 80025ca:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d118      	bne.n	8002606 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d4:	f3ef 8310 	mrs	r3, PRIMASK
 80025d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	2301      	movs	r3, #1
 80025e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f383 8810 	msr	PRIMASK, r3
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2110      	movs	r1, #16
 80025f6:	438a      	bics	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	228c      	movs	r2, #140	; 0x8c
 800260a:	2120      	movs	r1, #32
 800260c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	675a      	str	r2, [r3, #116]	; 0x74
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b00e      	add	sp, #56	; 0x38
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	fffffedf 	.word	0xfffffedf
 8002628:	effffffe 	.word	0xeffffffe

0800262c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b094      	sub	sp, #80	; 0x50
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2220      	movs	r2, #32
 8002642:	4013      	ands	r3, r2
 8002644:	d16f      	bne.n	8002726 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002648:	225e      	movs	r2, #94	; 0x5e
 800264a:	2100      	movs	r1, #0
 800264c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264e:	f3ef 8310 	mrs	r3, PRIMASK
 8002652:	61bb      	str	r3, [r7, #24]
  return(result);
 8002654:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
 8002658:	2301      	movs	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f383 8810 	msr	PRIMASK, r3
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	493a      	ldr	r1, [pc, #232]	; (8002758 <UART_DMAReceiveCplt+0x12c>)
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002676:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002680:	f3ef 8310 	mrs	r3, PRIMASK
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002688:	647b      	str	r3, [r7, #68]	; 0x44
 800268a:	2301      	movs	r3, #1
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	f383 8810 	msr	PRIMASK, r3
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	438a      	bics	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	f383 8810 	msr	PRIMASK, r3
}
 80026b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b2:	f3ef 8310 	mrs	r3, PRIMASK
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
 80026bc:	2301      	movs	r3, #1
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	f383 8810 	msr	PRIMASK, r3
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2140      	movs	r1, #64	; 0x40
 80026d4:	438a      	bics	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	f383 8810 	msr	PRIMASK, r3
}
 80026e2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	228c      	movs	r2, #140	; 0x8c
 80026e8:	2120      	movs	r1, #32
 80026ea:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d118      	bne.n	8002726 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f4:	f3ef 8310 	mrs	r3, PRIMASK
 80026f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80026fa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026fe:	2301      	movs	r3, #1
 8002700:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f383 8810 	msr	PRIMASK, r3
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2110      	movs	r1, #16
 8002716:	438a      	bics	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f383 8810 	msr	PRIMASK, r3
}
 8002724:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002728:	2200      	movs	r2, #0
 800272a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	225c      	movs	r2, #92	; 0x5c
 8002738:	5a9a      	ldrh	r2, [r3, r2]
 800273a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273c:	0011      	movs	r1, r2
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff fae5 	bl	8001d0e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002744:	e003      	b.n	800274e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	0018      	movs	r0, r3
 800274a:	f7ff fac8 	bl	8001cde <HAL_UART_RxCpltCallback>
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b014      	add	sp, #80	; 0x50
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	fffffeff 	.word	0xfffffeff

0800275c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d10a      	bne.n	800278e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	225c      	movs	r2, #92	; 0x5c
 800277c:	5a9b      	ldrh	r3, [r3, r2]
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff fac1 	bl	8001d0e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800278c:	e003      	b.n	8002796 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff faac 	bl	8001cee <HAL_UART_RxHalfCpltCallback>
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b004      	add	sp, #16
 800279c:	bd80      	pop	{r7, pc}

0800279e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2288      	movs	r2, #136	; 0x88
 80027b0:	589b      	ldr	r3, [r3, r2]
 80027b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	228c      	movs	r2, #140	; 0x8c
 80027b8:	589b      	ldr	r3, [r3, r2]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d10a      	bne.n	80027e0 <UART_DMAError+0x42>
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b21      	cmp	r3, #33	; 0x21
 80027ce:	d107      	bne.n	80027e0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2256      	movs	r2, #86	; 0x56
 80027d4:	2100      	movs	r1, #0
 80027d6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	0018      	movs	r0, r3
 80027dc:	f7ff fe80 	bl	80024e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d10a      	bne.n	8002804 <UART_DMAError+0x66>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b22      	cmp	r3, #34	; 0x22
 80027f2:	d107      	bne.n	8002804 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	225e      	movs	r2, #94	; 0x5e
 80027f8:	2100      	movs	r1, #0
 80027fa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff feae 	bl	8002560 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2290      	movs	r2, #144	; 0x90
 8002808:	589b      	ldr	r3, [r3, r2]
 800280a:	2210      	movs	r2, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2190      	movs	r1, #144	; 0x90
 8002812:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	0018      	movs	r0, r3
 8002818:	f7ff fa71 	bl	8001cfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b006      	add	sp, #24
 8002822:	bd80      	pop	{r7, pc}

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	2600      	movs	r6, #0
 8002828:	4d0c      	ldr	r5, [pc, #48]	; (800285c <__libc_init_array+0x38>)
 800282a:	4c0d      	ldr	r4, [pc, #52]	; (8002860 <__libc_init_array+0x3c>)
 800282c:	1b64      	subs	r4, r4, r5
 800282e:	10a4      	asrs	r4, r4, #2
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	2600      	movs	r6, #0
 8002836:	f000 f821 	bl	800287c <_init>
 800283a:	4d0a      	ldr	r5, [pc, #40]	; (8002864 <__libc_init_array+0x40>)
 800283c:	4c0a      	ldr	r4, [pc, #40]	; (8002868 <__libc_init_array+0x44>)
 800283e:	1b64      	subs	r4, r4, r5
 8002840:	10a4      	asrs	r4, r4, #2
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	00b3      	lsls	r3, r6, #2
 800284a:	58eb      	ldr	r3, [r5, r3]
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	00b3      	lsls	r3, r6, #2
 8002854:	58eb      	ldr	r3, [r5, r3]
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	0800290c 	.word	0x0800290c
 8002860:	0800290c 	.word	0x0800290c
 8002864:	0800290c 	.word	0x0800290c
 8002868:	08002910 	.word	0x08002910

0800286c <memset>:
 800286c:	0003      	movs	r3, r0
 800286e:	1882      	adds	r2, r0, r2
 8002870:	4293      	cmp	r3, r2
 8002872:	d100      	bne.n	8002876 <memset+0xa>
 8002874:	4770      	bx	lr
 8002876:	7019      	strb	r1, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	e7f9      	b.n	8002870 <memset+0x4>

0800287c <_init>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002882:	bc08      	pop	{r3}
 8002884:	469e      	mov	lr, r3
 8002886:	4770      	bx	lr

08002888 <_fini>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr
