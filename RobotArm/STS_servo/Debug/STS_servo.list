
STS_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003424  08003424  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800342c  0800342c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08003444  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003444  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e4e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b60  00000000  00000000  00029e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002c160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221b7  00000000  00000000  0002c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a190  00000000  00000000  0004e9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4dcb  00000000  00000000  00058b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d94a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d30  00000000  00000000  0011d99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080033ec 	.word	0x080033ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080033ec 	.word	0x080033ec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_ZN3STSC1EP20__UART_HandleTypeDefh>:
#include "STS.h"

STS::STS(UART_HandleTypeDef *uart, uint8_t id)
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4613      	mov	r3, r2
 8000514:	71fb      	strb	r3, [r7, #7]
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2200      	movs	r2, #0
 800051a:	715a      	strb	r2, [r3, #5]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2200      	movs	r2, #0
 8000520:	80da      	strh	r2, [r3, #6]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	2200      	movs	r2, #0
 8000526:	811a      	strh	r2, [r3, #8]
{
  UART = uart;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	601a      	str	r2, [r3, #0]
  ID = id;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	79fa      	ldrb	r2, [r7, #7]
 8000532:	711a      	strb	r2, [r3, #4]
}
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <_ZN3STS4moveEsss>:

void STS::move(int16_t speed, int16_t goal_position, int16_t now_position)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	4608      	mov	r0, r1
 800054e:	4611      	mov	r1, r2
 8000550:	461a      	mov	r2, r3
 8000552:	4603      	mov	r3, r0
 8000554:	817b      	strh	r3, [r7, #10]
 8000556:	460b      	mov	r3, r1
 8000558:	813b      	strh	r3, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	80fb      	strh	r3, [r7, #6]
  uint8_t send_Buf[9] = {255, 255, ID, 5, 3, 46, 0, 0, 0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	721a      	strb	r2, [r3, #8]
 800056a:	23ff      	movs	r3, #255	; 0xff
 800056c:	753b      	strb	r3, [r7, #20]
 800056e:	23ff      	movs	r3, #255	; 0xff
 8000570:	757b      	strb	r3, [r7, #21]
 8000572:	2305      	movs	r3, #5
 8000574:	75fb      	strb	r3, [r7, #23]
 8000576:	2303      	movs	r3, #3
 8000578:	763b      	strb	r3, [r7, #24]
 800057a:	232e      	movs	r3, #46	; 0x2e
 800057c:	767b      	strb	r3, [r7, #25]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	791b      	ldrb	r3, [r3, #4]
 8000582:	75bb      	strb	r3, [r7, #22]
  uint8_t checksum = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((goal_position - now_position > 0 && speed > 0) || (goal_position - now_position < 0 && speed < 0))
 800058a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	dd03      	ble.n	80005a0 <_ZN3STS4moveEsss+0x5c>
 8000598:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800059c:	2b00      	cmp	r3, #0
 800059e:	dc0a      	bgt.n	80005b6 <_ZN3STS4moveEsss+0x72>
 80005a0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80005a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	da18      	bge.n	80005e0 <_ZN3STS4moveEsss+0x9c>
 80005ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da14      	bge.n	80005e0 <_ZN3STS4moveEsss+0x9c>
  {
    if (speed < 0)
 80005b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da04      	bge.n	80005c8 <_ZN3STS4moveEsss+0x84>
    {
      speed = 32768 - speed;
 80005be:	897a      	ldrh	r2, [r7, #10]
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <_ZN3STS4moveEsss+0xf0>)
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	817b      	strh	r3, [r7, #10]
    }
    send_Buf[6] = speed;
 80005c8:	897b      	ldrh	r3, [r7, #10]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	76bb      	strb	r3, [r7, #26]
    send_Buf[7] = speed >> 8;
 80005ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005d2:	121b      	asrs	r3, r3, #8
 80005d4:	b21b      	sxth	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	76fb      	strb	r3, [r7, #27]

    HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fce6 	bl	8000fac <HAL_Delay>
  }

  for (int i = 2; i < 8; i++)
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	dc0d      	bgt.n	8000606 <_ZN3STS4moveEsss+0xc2>
  {
    checksum += send_Buf[i];
 80005ea:	f107 0214 	add.w	r2, r7, #20
 80005ee:	6a3b      	ldr	r3, [r7, #32]
 80005f0:	4413      	add	r3, r2
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f8:	4413      	add	r3, r2
 80005fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for (int i = 2; i < 8; i++)
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	3301      	adds	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
 8000604:	e7ee      	b.n	80005e4 <_ZN3STS4moveEsss+0xa0>
  }
  checksum = ~checksum;
 8000606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800060a:	43db      	mvns	r3, r3
 800060c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  send_Buf[8] = checksum;
 8000610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000614:	773b      	strb	r3, [r7, #28]

  HAL_UART_Transmit(UART, send_Buf, 9, 50);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	f107 0114 	add.w	r1, r7, #20
 800061e:	2332      	movs	r3, #50	; 0x32
 8000620:	2209      	movs	r2, #9
 8000622:	f002 f8c6 	bl	80027b2 <HAL_UART_Transmit>
  HAL_Delay(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f000 fcc0 	bl	8000fac <HAL_Delay>
}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	ffff8000 	.word	0xffff8000

08000638 <_ZN3STS4sendEv>:

void STS::send()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint8_t send_Buf[8] = {255, 255, ID, 4, 2, 56, 2, 0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	23ff      	movs	r3, #255	; 0xff
 800064c:	723b      	strb	r3, [r7, #8]
 800064e:	23ff      	movs	r3, #255	; 0xff
 8000650:	727b      	strb	r3, [r7, #9]
 8000652:	2304      	movs	r3, #4
 8000654:	72fb      	strb	r3, [r7, #11]
 8000656:	2302      	movs	r3, #2
 8000658:	733b      	strb	r3, [r7, #12]
 800065a:	2338      	movs	r3, #56	; 0x38
 800065c:	737b      	strb	r3, [r7, #13]
 800065e:	2302      	movs	r3, #2
 8000660:	73bb      	strb	r3, [r7, #14]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	72bb      	strb	r3, [r7, #10]
  uint8_t checksum = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	75fb      	strb	r3, [r7, #23]

  for (int i = 2; i < 7; i++)
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	2b06      	cmp	r3, #6
 8000674:	dc0b      	bgt.n	800068e <_ZN3STS4sendEv+0x56>
  {
    checksum += send_Buf[i];
 8000676:	f107 0208 	add.w	r2, r7, #8
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	4413      	add	r3, r2
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	4413      	add	r3, r2
 8000684:	75fb      	strb	r3, [r7, #23]
  for (int i = 2; i < 7; i++)
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	3301      	adds	r3, #1
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	e7f0      	b.n	8000670 <_ZN3STS4sendEv+0x38>
  }
  checksum = ~checksum;
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	43db      	mvns	r3, r3
 8000692:	75fb      	strb	r3, [r7, #23]
  send_Buf[7] = checksum;
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	73fb      	strb	r3, [r7, #15]

  HAL_UART_Transmit(UART, send_Buf, 8, 100);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 0108 	add.w	r1, r7, #8
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2208      	movs	r2, #8
 80006a4:	f002 f885 	bl	80027b2 <HAL_UART_Transmit>
}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <_ZN3STS18calculate_positionEs>:


int16_t STS::calculate_position(int16_t now_position)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
  if ((now_position - pre_position) > 3000)
 80006bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006cc:	4293      	cmp	r3, r2
 80006ce:	dd08      	ble.n	80006e2 <_ZN3STS18calculate_positionEs+0x32>
  {
    rotation--;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3b01      	subs	r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	b25a      	sxtb	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	715a      	strb	r2, [r3, #5]
  }
  if ((pre_position - now_position) > 3000)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80006e8:	461a      	mov	r2, r3
 80006ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006f4:	4293      	cmp	r3, r2
 80006f6:	dd08      	ble.n	800070a <_ZN3STS18calculate_positionEs+0x5a>
  {
    rotation++;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	715a      	strb	r2, [r3, #5]
  }

  position = now_position + rotation * 4096;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000710:	b29b      	uxth	r3, r3
 8000712:	031b      	lsls	r3, r3, #12
 8000714:	b29a      	uxth	r2, r3
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	4413      	add	r3, r2
 800071a:	b29b      	uxth	r3, r3
 800071c:	b21a      	sxth	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	80da      	strh	r2, [r3, #6]

  pre_position = now_position;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	811a      	strh	r2, [r3, #8]

  return position;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fbc2 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f83e 	bl	80007c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f000 f8f6 	bl	8000938 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800074c:	f000 f8d4 	bl	80008f8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000750:	f000 f8a2 	bl	8000898 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, rxBuf, sizeof(rxBuf));
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	4914      	ldr	r1, [pc, #80]	; (80007a8 <main+0x6c>)
 8000758:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0x70>)
 800075a:	f002 f8bc 	bl	80028d6 <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(servo_sw_GPIO_Port, servo_sw_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2102      	movs	r1, #2
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <main+0x74>)
 8000764:	f001 fa5c 	bl	8001c20 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f000 fc1e 	bl	8000fac <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		get_position(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 f913 	bl	800099c <_Z12get_positionh>
		servo0.move(2000, 10000, pos0);
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <main+0x78>)
 8000778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000780:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <main+0x7c>)
 8000786:	f7ff fedd 	bl	8000544 <_ZN3STS4moveEsss>
		get_position(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 f906 	bl	800099c <_Z12get_positionh>
		servo1.move(2000, 10000, pos1);
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <main+0x80>)
 8000792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000796:	f242 7210 	movw	r2, #10000	; 0x2710
 800079a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <main+0x84>)
 80007a0:	f7ff fed0 	bl	8000544 <_ZN3STS4moveEsss>
		get_position(0);
 80007a4:	e7e4      	b.n	8000770 <main+0x34>
 80007a6:	bf00      	nop
 80007a8:	20000104 	.word	0x20000104
 80007ac:	20000028 	.word	0x20000028
 80007b0:	40020000 	.word	0x40020000
 80007b4:	200000fc 	.word	0x200000fc
 80007b8:	200000cc 	.word	0x200000cc
 80007bc:	200000fe 	.word	0x200000fe
 80007c0:	200000d8 	.word	0x200000d8

080007c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2234      	movs	r2, #52	; 0x34
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fe02 	bl	80033dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <_Z18SystemClock_Configv+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <_Z18SystemClock_Configv+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <_Z18SystemClock_Configv+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <_Z18SystemClock_Configv+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000810:	4a20      	ldr	r2, [pc, #128]	; (8000894 <_Z18SystemClock_Configv+0xd0>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <_Z18SystemClock_Configv+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2310      	movs	r3, #16
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fccf 	bl	80021dc <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800084e:	f000 f9e9 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f9f1 	bl	8001c54 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000882:	f000 f9cf 	bl	8000c24 <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3750      	adds	r7, #80	; 0x50
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <_ZL19MX_USART2_UART_Initv+0x58>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <_ZL19MX_USART2_UART_Initv+0x5c>)
 80008a6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008bc:	220c      	movs	r2, #12
 80008be:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x54>)
 80008ce:	f001 ff23 	bl	8002718 <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bf14      	ite	ne
 80008d8:	2301      	movne	r3, #1
 80008da:	2300      	moveq	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <_ZL19MX_USART2_UART_Initv+0x4e>
  {
    Error_Handler();
 80008e2:	f000 f99f 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000028 	.word	0x20000028
 80008f0:	40004400 	.word	0x40004400
 80008f4:	000f4240 	.word	0x000f4240

080008f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <_ZL11MX_DMA_Initv+0x3c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <_ZL11MX_DMA_Initv+0x3c>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <_ZL11MX_DMA_Initv+0x3c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2010      	movs	r0, #16
 8000920:	f000 fc43 	bl	80011aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000924:	2010      	movs	r0, #16
 8000926:	f000 fc5c 	bl	80011e2 <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_ZL12MX_GPIO_Initv+0x5c>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <_ZL12MX_GPIO_Initv+0x5c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <_ZL12MX_GPIO_Initv+0x5c>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(servo_sw_GPIO_Port, servo_sw_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	480a      	ldr	r0, [pc, #40]	; (8000998 <_ZL12MX_GPIO_Initv+0x60>)
 800096e:	f001 f957 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : servo_sw_Pin */
  GPIO_InitStruct.Pin = servo_sw_Pin;
 8000972:	2302      	movs	r3, #2
 8000974:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(servo_sw_GPIO_Port, &GPIO_InitStruct);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	; (8000998 <_ZL12MX_GPIO_Initv+0x60>)
 8000988:	f000 ffb6 	bl	80018f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <_Z12get_positionh>:

/* USER CODE BEGIN 4 */
void get_position(uint8_t ID)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	static int16_t inst_pos0 = 0;
	static int16_t inst_pos1 = 0;
	static int16_t inst_pos2 = 0;
	static int16_t inst_pos3 = 0;
	static uint8_t index = 0;
	uint8_t checksum = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t read[15] = {0};
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	f107 0318 	add.w	r3, r7, #24
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t position[6] = {0};
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	2300      	movs	r3, #0
 80009c4:	823b      	strh	r3, [r7, #16]

  switch (ID)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d81b      	bhi.n	8000a04 <_Z12get_positionh+0x68>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <_Z12get_positionh+0x38>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	080009ed 	.word	0x080009ed
 80009dc:	080009f5 	.word	0x080009f5
 80009e0:	080009fd 	.word	0x080009fd
  {
  case 0:
    servo0.send();
 80009e4:	4880      	ldr	r0, [pc, #512]	; (8000be8 <_Z12get_positionh+0x24c>)
 80009e6:	f7ff fe27 	bl	8000638 <_ZN3STS4sendEv>
    break;
 80009ea:	e00c      	b.n	8000a06 <_Z12get_positionh+0x6a>
  case 1:
    servo1.send();
 80009ec:	487f      	ldr	r0, [pc, #508]	; (8000bec <_Z12get_positionh+0x250>)
 80009ee:	f7ff fe23 	bl	8000638 <_ZN3STS4sendEv>
    break;
 80009f2:	e008      	b.n	8000a06 <_Z12get_positionh+0x6a>
  case 2:
    servo2.send();
 80009f4:	487e      	ldr	r0, [pc, #504]	; (8000bf0 <_Z12get_positionh+0x254>)
 80009f6:	f7ff fe1f 	bl	8000638 <_ZN3STS4sendEv>
    break;
 80009fa:	e004      	b.n	8000a06 <_Z12get_positionh+0x6a>
  case 3:
    servo3.send();
 80009fc:	487d      	ldr	r0, [pc, #500]	; (8000bf4 <_Z12get_positionh+0x258>)
 80009fe:	f7ff fe1b 	bl	8000638 <_ZN3STS4sendEv>
    break;
 8000a02:	e000      	b.n	8000a06 <_Z12get_positionh+0x6a>
  default:
    break;
 8000a04:	bf00      	nop
  }


  index = huart2.hdmarx->Instance->NDTR; // バッファー残容�?
 8000a06:	4b7c      	ldr	r3, [pc, #496]	; (8000bf8 <_Z12get_positionh+0x25c>)
 8000a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b7a      	ldr	r3, [pc, #488]	; (8000bfc <_Z12get_positionh+0x260>)
 8000a12:	701a      	strb	r2, [r3, #0]
  index = sizeof(rxBuf) - index;         // �?新の受信�?ータ位置
 8000a14:	4b79      	ldr	r3, [pc, #484]	; (8000bfc <_Z12get_positionh+0x260>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b76      	ldr	r3, [pc, #472]	; (8000bfc <_Z12get_positionh+0x260>)
 8000a22:	701a      	strb	r2, [r3, #0]

  if (index >= 15)
 8000a24:	4b75      	ldr	r3, [pc, #468]	; (8000bfc <_Z12get_positionh+0x260>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b0e      	cmp	r3, #14
 8000a2a:	d919      	bls.n	8000a60 <_Z12get_positionh+0xc4>
  {
    for (int i = 0; i < 15; i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8000a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a32:	2b0e      	cmp	r3, #14
 8000a34:	dc14      	bgt.n	8000a60 <_Z12get_positionh+0xc4>
    {
      read[i] = rxBuf[index - 14 + i];
 8000a36:	4b71      	ldr	r3, [pc, #452]	; (8000bfc <_Z12get_positionh+0x260>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f1a3 020e 	sub.w	r2, r3, #14
 8000a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a40:	4413      	add	r3, r2
 8000a42:	4a6f      	ldr	r2, [pc, #444]	; (8000c00 <_Z12get_positionh+0x264>)
 8000a44:	5cd1      	ldrb	r1, [r2, r3]
 8000a46:	f107 0214 	add.w	r2, r7, #20
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	4413      	add	r3, r2
 8000a4e:	460a      	mov	r2, r1
 8000a50:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 faaa 	bl	8000fac <HAL_Delay>
    for (int i = 0; i < 15; i++)
 8000a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a5e:	e7e7      	b.n	8000a30 <_Z12get_positionh+0x94>
    }
  }

  for (int i = 0; i < 8; i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a66:	2b07      	cmp	r3, #7
 8000a68:	dc29      	bgt.n	8000abe <_Z12get_positionh+0x122>
  {
    if (read[i] == 255 && read[i + 1] == 255)
 8000a6a:	f107 0214 	add.w	r2, r7, #20
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	4413      	add	r3, r2
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d11e      	bne.n	8000ab6 <_Z12get_positionh+0x11a>
 8000a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	3338      	adds	r3, #56	; 0x38
 8000a7e:	443b      	add	r3, r7
 8000a80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000a84:	2bff      	cmp	r3, #255	; 0xff
 8000a86:	d116      	bne.n	8000ab6 <_Z12get_positionh+0x11a>
    {
      for (int j = 0; j < 6; j++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	dc11      	bgt.n	8000ab6 <_Z12get_positionh+0x11a>
      {
        position[j] = read[i + j + 2];
 8000a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	4413      	add	r3, r2
 8000a98:	3302      	adds	r3, #2
 8000a9a:	3338      	adds	r3, #56	; 0x38
 8000a9c:	443b      	add	r3, r7
 8000a9e:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa8:	4413      	add	r3, r2
 8000aaa:	460a      	mov	r2, r1
 8000aac:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 6; j++)
 8000aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab4:	e7ea      	b.n	8000a8c <_Z12get_positionh+0xf0>
  for (int i = 0; i < 8; i++)
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	3301      	adds	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000abc:	e7d2      	b.n	8000a64 <_Z12get_positionh+0xc8>
      }
    }
  }

  for (int i = 0; i < 5; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	dc0d      	bgt.n	8000ae4 <_Z12get_positionh+0x148>
  {
    checksum += position[i];
 8000ac8:	f107 020c 	add.w	r2, r7, #12
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	4413      	add	r3, r2
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ad6:	4413      	add	r3, r2
 8000ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  for (int i = 0; i < 5; i++)
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	3301      	adds	r3, #1
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	e7ee      	b.n	8000ac2 <_Z12get_positionh+0x126>
  }
  checksum = ~checksum;
 8000ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (checksum == position[5] && position[0] == 0)
 8000aee:	7c7b      	ldrb	r3, [r7, #17]
 8000af0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d118      	bne.n	8000b2a <_Z12get_positionh+0x18e>
 8000af8:	7b3b      	ldrb	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d115      	bne.n	8000b2a <_Z12get_positionh+0x18e>
  {
    inst_pos0 = position[3] + position[4] * 256;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	7c3b      	ldrb	r3, [r7, #16]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <_Z12get_positionh+0x268>)
 8000b12:	801a      	strh	r2, [r3, #0]
    pos0 = servo0.calculate_position(inst_pos0);
 8000b14:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <_Z12get_positionh+0x268>)
 8000b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4832      	ldr	r0, [pc, #200]	; (8000be8 <_Z12get_positionh+0x24c>)
 8000b1e:	f7ff fdc7 	bl	80006b0 <_ZN3STS18calculate_positionEs>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <_Z12get_positionh+0x26c>)
 8000b28:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 1)
 8000b2a:	7c7b      	ldrb	r3, [r7, #17]
 8000b2c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d118      	bne.n	8000b66 <_Z12get_positionh+0x1ca>
 8000b34:	7b3b      	ldrb	r3, [r7, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d115      	bne.n	8000b66 <_Z12get_positionh+0x1ca>
  {
	inst_pos1 = position[3] + position[4] * 256;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	7c3b      	ldrb	r3, [r7, #16]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	4413      	add	r3, r2
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <_Z12get_positionh+0x270>)
 8000b4e:	801a      	strh	r2, [r3, #0]
	pos1 = servo1.calculate_position(inst_pos1);
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <_Z12get_positionh+0x270>)
 8000b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4824      	ldr	r0, [pc, #144]	; (8000bec <_Z12get_positionh+0x250>)
 8000b5a:	f7ff fda9 	bl	80006b0 <_ZN3STS18calculate_positionEs>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <_Z12get_positionh+0x274>)
 8000b64:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 2)
 8000b66:	7c7b      	ldrb	r3, [r7, #17]
 8000b68:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d118      	bne.n	8000ba2 <_Z12get_positionh+0x206>
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d115      	bne.n	8000ba2 <_Z12get_positionh+0x206>
  {
	inst_pos2 = position[3] + position[4] * 256;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	7c3b      	ldrb	r3, [r7, #16]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <_Z12get_positionh+0x278>)
 8000b8a:	801a      	strh	r2, [r3, #0]
	pos2 = servo2.calculate_position(inst_pos2);
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <_Z12get_positionh+0x278>)
 8000b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <_Z12get_positionh+0x254>)
 8000b96:	f7ff fd8b 	bl	80006b0 <_ZN3STS18calculate_positionEs>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <_Z12get_positionh+0x27c>)
 8000ba0:	801a      	strh	r2, [r3, #0]
  }
  if (checksum == position[5] && position[0] == 3)
 8000ba2:	7c7b      	ldrb	r3, [r7, #17]
 8000ba4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d118      	bne.n	8000bde <_Z12get_positionh+0x242>
 8000bac:	7b3b      	ldrb	r3, [r7, #12]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d115      	bne.n	8000bde <_Z12get_positionh+0x242>
  {
	inst_pos3 = position[3] + position[4] * 256;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	7c3b      	ldrb	r3, [r7, #16]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <_Z12get_positionh+0x280>)
 8000bc6:	801a      	strh	r2, [r3, #0]
	pos3 = servo3.calculate_position(inst_pos3);
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <_Z12get_positionh+0x280>)
 8000bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <_Z12get_positionh+0x258>)
 8000bd2:	f7ff fd6d 	bl	80006b0 <_ZN3STS18calculate_positionEs>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <_Z12get_positionh+0x284>)
 8000bdc:	801a      	strh	r2, [r3, #0]
  }
}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	; 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000cc 	.word	0x200000cc
 8000bec:	200000d8 	.word	0x200000d8
 8000bf0:	200000e4 	.word	0x200000e4
 8000bf4:	200000f0 	.word	0x200000f0
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	2000018c 	.word	0x2000018c
 8000c00:	20000104 	.word	0x20000104
 8000c04:	20000184 	.word	0x20000184
 8000c08:	200000fc 	.word	0x200000fc
 8000c0c:	20000186 	.word	0x20000186
 8000c10:	200000fe 	.word	0x200000fe
 8000c14:	20000188 	.word	0x20000188
 8000c18:	20000100 	.word	0x20000100
 8000c1c:	2000018a 	.word	0x2000018a
 8000c20:	20000102 	.word	0x20000102

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d118      	bne.n	8000c72 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d113      	bne.n	8000c72 <_Z41__static_initialization_and_destruction_0ii+0x42>
STS servo0(&huart2, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	490b      	ldr	r1, [pc, #44]	; (8000c7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000c50:	f7ff fc5a 	bl	8000508 <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo1(&huart2, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	4909      	ldr	r1, [pc, #36]	; (8000c7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000c5a:	f7ff fc55 	bl	8000508 <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo2(&huart2, 2);
 8000c5e:	2202      	movs	r2, #2
 8000c60:	4906      	ldr	r1, [pc, #24]	; (8000c7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000c64:	f7ff fc50 	bl	8000508 <_ZN3STSC1EP20__UART_HandleTypeDefh>
STS servo3(&huart2, 3);
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4904      	ldr	r1, [pc, #16]	; (8000c7c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000c6e:	f7ff fc4b 	bl	8000508 <_ZN3STSC1EP20__UART_HandleTypeDefh>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	200000cc 	.word	0x200000cc
 8000c84:	200000d8 	.word	0x200000d8
 8000c88:	200000e4 	.word	0x200000e4
 8000c8c:	200000f0 	.word	0x200000f0

08000c90 <_GLOBAL__sub_I_huart2>:
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ffc9 	bl	8000c30 <_Z41__static_initialization_and_destruction_0ii>
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_UART_MspInit+0xe4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d15b      	bne.n	8000dca <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_UART_MspInit+0xe8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	481d      	ldr	r0, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0xec>)
 8000d66:	f000 fdc7 	bl	80018f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_UART_MspInit+0xf4>)
 8000d6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000da2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000da6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000db0:	f000 fa32 	bl	8001218 <HAL_DMA_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000dba:	f7ff ff33 	bl	8000c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_UART_MspInit+0xf0>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	2000006c 	.word	0x2000006c
 8000de4:	40026088 	.word	0x40026088

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f89a 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA1_Stream5_IRQHandler+0x10>)
 8000e42:	f000 faef 	bl	8001424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000006c 	.word	0x2000006c

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f002 fa77 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fc49 	bl	800073c <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eb8:	08003438 	.word	0x08003438
  ldr r2, =_sbss
 8000ebc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ec0:	20000194 	.word	0x20000194

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fed0 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f967 	bl	80011fe <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 f92f 	bl	80011aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000190 	.word	0x20000190

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000190 	.word	0x20000190

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff29 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011bc:	f7ff ff3e 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	6978      	ldr	r0, [r7, #20]
 80011c8:	f7ff ff8e 	bl	80010e8 <NVIC_EncodePriority>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff31 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffa2 	bl	8001150 <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff feb6 	bl	8000f94 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e099      	b.n	8001368 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001254:	e00f      	b.n	8001276 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001256:	f7ff fe9d 	bl	8000f94 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b05      	cmp	r3, #5
 8001262:	d908      	bls.n	8001276 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2220      	movs	r2, #32
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e078      	b.n	8001368 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e8      	bne.n	8001256 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_DMA_Init+0x158>)
 8001290:	4013      	ands	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d107      	bne.n	80012e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4313      	orrs	r3, r2
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4313      	orrs	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f023 0307 	bic.w	r3, r3, #7
 80012f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4313      	orrs	r3, r2
 8001300:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2b04      	cmp	r3, #4
 8001308:	d117      	bne.n	800133a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00e      	beq.n	800133a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fa6f 	bl	8001800 <DMA_CheckFifoParam>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2240      	movs	r2, #64	; 0x40
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001336:	2301      	movs	r3, #1
 8001338:	e016      	b.n	8001368 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fa26 	bl	8001794 <DMA_CalcBaseAndBitshift>
 8001348:	4603      	mov	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	223f      	movs	r2, #63	; 0x3f
 8001352:	409a      	lsls	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	f010803f 	.word	0xf010803f

08001374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_DMA_Start_IT+0x26>
 8001396:	2302      	movs	r3, #2
 8001398:	e040      	b.n	800141c <HAL_DMA_Start_IT+0xa8>
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d12f      	bne.n	800140e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f9b8 	bl	8001738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	223f      	movs	r2, #63	; 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0216 	orr.w	r2, r2, #22
 80013e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e005      	b.n	800141a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001416:	2302      	movs	r3, #2
 8001418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001430:	4b8e      	ldr	r3, [pc, #568]	; (800166c <HAL_DMA_IRQHandler+0x248>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a8e      	ldr	r2, [pc, #568]	; (8001670 <HAL_DMA_IRQHandler+0x24c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0a9b      	lsrs	r3, r3, #10
 800143c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	2208      	movs	r2, #8
 8001450:	409a      	lsls	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01a      	beq.n	8001490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147c:	2208      	movs	r2, #8
 800147e:	409a      	lsls	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	2201      	movs	r2, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d012      	beq.n	80014c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	2201      	movs	r2, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014be:	f043 0202 	orr.w	r2, r3, #2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ca:	2204      	movs	r2, #4
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d012      	beq.n	80014fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e8:	2204      	movs	r2, #4
 80014ea:	409a      	lsls	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	f043 0204 	orr.w	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	2210      	movs	r2, #16
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d043      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03c      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	2210      	movs	r2, #16
 8001520:	409a      	lsls	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d018      	beq.n	8001566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d108      	bne.n	8001554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d024      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
 8001552:	e01f      	b.n	8001594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01b      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
 8001564:	e016      	b.n	8001594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0208 	bic.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001598:	2220      	movs	r2, #32
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 808f 	beq.w	80016c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8087 	beq.w	80016c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	2220      	movs	r2, #32
 80015bc:	409a      	lsls	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d136      	bne.n	800163c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0216 	bic.w	r2, r2, #22
 80015dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d103      	bne.n	80015fe <HAL_DMA_IRQHandler+0x1da>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	223f      	movs	r2, #63	; 0x3f
 8001614:	409a      	lsls	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07e      	beq.n	8001730 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
        }
        return;
 800163a:	e079      	b.n	8001730 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01d      	beq.n	8001686 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	2b00      	cmp	r3, #0
 800165e:	d031      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
 8001668:	e02c      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e01e      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0210 	bic.w	r2, r2, #16
 80016a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d032      	beq.n	8001732 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d307      	bcc.n	800170c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f2      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x2cc>
 800170a:	e000      	b.n	800170e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800170c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
 800172e:	e000      	b.n	8001732 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001730:	bf00      	nop
    }
  }
}
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	d108      	bne.n	8001778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001776:	e007      	b.n	8001788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3b10      	subs	r3, #16
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <DMA_CalcBaseAndBitshift+0x64>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <DMA_CalcBaseAndBitshift+0x68>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d909      	bls.n	80017d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
 80017d4:	e007      	b.n	80017e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	aaaaaaab 	.word	0xaaaaaaab
 80017fc:	0800341c 	.word	0x0800341c

08001800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11f      	bne.n	800185a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d856      	bhi.n	80018ce <DMA_CheckFifoParam+0xce>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <DMA_CheckFifoParam+0x28>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	0800184b 	.word	0x0800184b
 8001830:	08001839 	.word	0x08001839
 8001834:	080018cf 	.word	0x080018cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d046      	beq.n	80018d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e043      	b.n	80018d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001852:	d140      	bne.n	80018d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001858:	e03d      	b.n	80018d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001862:	d121      	bne.n	80018a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d837      	bhi.n	80018da <DMA_CheckFifoParam+0xda>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <DMA_CheckFifoParam+0x70>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001887 	.word	0x08001887
 8001878:	08001881 	.word	0x08001881
 800187c:	08001899 	.word	0x08001899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      break;
 8001884:	e030      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d025      	beq.n	80018de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001896:	e022      	b.n	80018de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018a6:	e01c      	b.n	80018e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d903      	bls.n	80018b6 <DMA_CheckFifoParam+0xb6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018b4:	e018      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      break;
 80018ba:	e015      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
      break;
 80018cc:	e00b      	b.n	80018e6 <DMA_CheckFifoParam+0xe6>
      break;
 80018ce:	bf00      	nop
 80018d0:	e00a      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d2:	bf00      	nop
 80018d4:	e008      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
 80018d8:	e006      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018da:	bf00      	nop
 80018dc:	e004      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018de:	bf00      	nop
 80018e0:	e002      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
    }
  } 
  
  return status; 
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e165      	b.n	8001be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 8154 	bne.w	8001bda <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b01      	cmp	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	2b02      	cmp	r3, #2
 8001948:	d130      	bne.n	80019ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68da      	ldr	r2, [r3, #12]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	69b9      	ldr	r1, [r7, #24]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80ae 	beq.w	8001bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_GPIO_Init+0x300>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <HAL_GPIO_Init+0x300>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b5a      	ldr	r3, [pc, #360]	; (8001bf8 <HAL_GPIO_Init+0x300>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9a:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_GPIO_Init+0x304>)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_GPIO_Init+0x308>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d025      	beq.n	8001b12 <HAL_GPIO_Init+0x21a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_GPIO_Init+0x30c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01f      	beq.n	8001b0e <HAL_GPIO_Init+0x216>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_GPIO_Init+0x310>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x212>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <HAL_GPIO_Init+0x314>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x20e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4b      	ldr	r2, [pc, #300]	; (8001c10 <HAL_GPIO_Init+0x318>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x20a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4a      	ldr	r2, [pc, #296]	; (8001c14 <HAL_GPIO_Init+0x31c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x206>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <HAL_GPIO_Init+0x320>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x202>
 8001af6:	2306      	movs	r3, #6
 8001af8:	e00c      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00a      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001afe:	2305      	movs	r3, #5
 8001b00:	e008      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001b06:	2303      	movs	r3, #3
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x21c>
 8001b12:	2300      	movs	r3, #0
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f002 0203 	and.w	r2, r2, #3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b24:	4935      	ldr	r1, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x304>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b56:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_GPIO_Init+0x324>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f ae96 	bls.w	8001914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40021400 	.word	0x40021400
 8001c18:	40021800 	.word	0x40021800
 8001c1c:	40013c00 	.word	0x40013c00

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c3c:	e003      	b.n	8001c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0cc      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b68      	ldr	r3, [pc, #416]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d90c      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b65      	ldr	r3, [pc, #404]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0b8      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b50      	ldr	r3, [pc, #320]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	494d      	ldr	r1, [pc, #308]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d044      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e06f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e067      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4934      	ldr	r1, [pc, #208]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d44:	f7ff f926 	bl	8000f94 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7ff f922 	bl	8000f94 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e04f      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d20c      	bcs.n	8001d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e032      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4916      	ldr	r1, [pc, #88]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dda:	f000 f855 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	490a      	ldr	r1, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	5ccb      	ldrb	r3, [r1, r3]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f886 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00
 8001e10:	40023800 	.word	0x40023800
 8001e14:	08003404 	.word	0x08003404
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e3c:	f7ff fff0 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	0a9b      	lsrs	r3, r3, #10
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08003414 	.word	0x08003414

08001e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e64:	f7ff ffdc 	bl	8001e20 <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0b5b      	lsrs	r3, r3, #13
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4903      	ldr	r1, [pc, #12]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	08003414 	.word	0x08003414

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e8c:	b0a6      	sub	sp, #152	; 0x98
 8001e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eae:	4bc8      	ldr	r3, [pc, #800]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	f200 817e 	bhi.w	80021b8 <HAL_RCC_GetSysClockFreq+0x330>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ef9 	.word	0x08001ef9
 8001ec8:	080021b9 	.word	0x080021b9
 8001ecc:	080021b9 	.word	0x080021b9
 8001ed0:	080021b9 	.word	0x080021b9
 8001ed4:	08001f01 	.word	0x08001f01
 8001ed8:	080021b9 	.word	0x080021b9
 8001edc:	080021b9 	.word	0x080021b9
 8001ee0:	080021b9 	.word	0x080021b9
 8001ee4:	08001f09 	.word	0x08001f09
 8001ee8:	080021b9 	.word	0x080021b9
 8001eec:	080021b9 	.word	0x080021b9
 8001ef0:	080021b9 	.word	0x080021b9
 8001ef4:	08002073 	.word	0x08002073
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4bb6      	ldr	r3, [pc, #728]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001efe:	e15f      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f00:	4bb5      	ldr	r3, [pc, #724]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f06:	e15b      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f08:	4bb1      	ldr	r3, [pc, #708]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f14:	4bae      	ldr	r3, [pc, #696]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d031      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f20:	4bab      	ldr	r3, [pc, #684]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	2200      	movs	r2, #0
 8001f28:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f32:	663b      	str	r3, [r7, #96]	; 0x60
 8001f34:	2300      	movs	r3, #0
 8001f36:	667b      	str	r3, [r7, #100]	; 0x64
 8001f38:	4ba7      	ldr	r3, [pc, #668]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f3e:	462a      	mov	r2, r5
 8001f40:	fb03 f202 	mul.w	r2, r3, r2
 8001f44:	2300      	movs	r3, #0
 8001f46:	4621      	mov	r1, r4
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4aa2      	ldr	r2, [pc, #648]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f50:	4621      	mov	r1, r4
 8001f52:	fba1 1202 	umull	r1, r2, r1, r2
 8001f56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f58:	460a      	mov	r2, r1
 8001f5a:	67ba      	str	r2, [r7, #120]	; 0x78
 8001f5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001f5e:	4413      	add	r3, r2
 8001f60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f66:	2200      	movs	r2, #0
 8001f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f70:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001f74:	f7fe f946 	bl	8000204 <__aeabi_uldivmod>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f82:	e064      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f84:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8001f8e:	657a      	str	r2, [r7, #84]	; 0x54
 8001f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f98:	2300      	movs	r3, #0
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	0159      	lsls	r1, r3, #5
 8001fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb2:	0150      	lsls	r0, r2, #5
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4621      	mov	r1, r4
 8001fba:	1a51      	subs	r1, r2, r1
 8001fbc:	6139      	str	r1, [r7, #16]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fd2:	4659      	mov	r1, fp
 8001fd4:	018b      	lsls	r3, r1, #6
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fdc:	4651      	mov	r1, sl
 8001fde:	018a      	lsls	r2, r1, #6
 8001fe0:	4651      	mov	r1, sl
 8001fe2:	ebb2 0801 	subs.w	r8, r2, r1
 8001fe6:	4659      	mov	r1, fp
 8001fe8:	eb63 0901 	sbc.w	r9, r3, r1
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ff8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ffc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002000:	4690      	mov	r8, r2
 8002002:	4699      	mov	r9, r3
 8002004:	4623      	mov	r3, r4
 8002006:	eb18 0303 	adds.w	r3, r8, r3
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	462b      	mov	r3, r5
 800200e:	eb49 0303 	adc.w	r3, r9, r3
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002020:	4629      	mov	r1, r5
 8002022:	028b      	lsls	r3, r1, #10
 8002024:	4621      	mov	r1, r4
 8002026:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202a:	4621      	mov	r1, r4
 800202c:	028a      	lsls	r2, r1, #10
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002036:	2200      	movs	r2, #0
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
 800203a:	647a      	str	r2, [r7, #68]	; 0x44
 800203c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002040:	f7fe f8e0 	bl	8000204 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800204e:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002060:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002070:	e0a6      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800207a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800207e:	4b54      	ldr	r3, [pc, #336]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02a      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	2200      	movs	r2, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
 8002094:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800209c:	2100      	movs	r1, #0
 800209e:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80020a0:	fb03 f201 	mul.w	r2, r3, r1
 80020a4:	2300      	movs	r3, #0
 80020a6:	fb00 f303 	mul.w	r3, r0, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80020ae:	fba0 1202 	umull	r1, r2, r0, r2
 80020b2:	677a      	str	r2, [r7, #116]	; 0x74
 80020b4:	460a      	mov	r2, r1
 80020b6:	673a      	str	r2, [r7, #112]	; 0x70
 80020b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020ba:	4413      	add	r3, r2
 80020bc:	677b      	str	r3, [r7, #116]	; 0x74
 80020be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020c2:	2200      	movs	r2, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
 80020c6:	637a      	str	r2, [r7, #52]	; 0x34
 80020c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80020d0:	f7fe f898 	bl	8000204 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4613      	mov	r3, r2
 80020da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020de:	e05b      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	2200      	movs	r2, #0
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020fc:	4642      	mov	r2, r8
 80020fe:	464b      	mov	r3, r9
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0159      	lsls	r1, r3, #5
 800210a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210e:	0150      	lsls	r0, r2, #5
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4641      	mov	r1, r8
 8002116:	ebb2 0a01 	subs.w	sl, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800212c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002134:	ebb2 040a 	subs.w	r4, r2, sl
 8002138:	eb63 050b 	sbc.w	r5, r3, fp
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	00eb      	lsls	r3, r5, #3
 8002146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214a:	00e2      	lsls	r2, r4, #3
 800214c:	4614      	mov	r4, r2
 800214e:	461d      	mov	r5, r3
 8002150:	4643      	mov	r3, r8
 8002152:	18e3      	adds	r3, r4, r3
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	464b      	mov	r3, r9
 8002158:	eb45 0303 	adc.w	r3, r5, r3
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216a:	4629      	mov	r1, r5
 800216c:	028b      	lsls	r3, r1, #10
 800216e:	4621      	mov	r1, r4
 8002170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002174:	4621      	mov	r1, r4
 8002176:	028a      	lsls	r2, r1, #10
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002180:	2200      	movs	r2, #0
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	61fa      	str	r2, [r7, #28]
 8002186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218a:	f7fe f83b 	bl	8000204 <__aeabi_uldivmod>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4613      	mov	r3, r2
 8002194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0f1b      	lsrs	r3, r3, #28
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80021a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80021b6:	e003      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80021ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80021be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3798      	adds	r7, #152	; 0x98
 80021c8:	46bd      	mov	sp, r7
 80021ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	017d7840 	.word	0x017d7840

080021dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e28d      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8083 	beq.w	8002302 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021fc:	4b94      	ldr	r3, [pc, #592]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b04      	cmp	r3, #4
 8002206:	d019      	beq.n	800223c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002208:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002210:	2b08      	cmp	r3, #8
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002220:	d00c      	beq.n	800223c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002222:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d112      	bne.n	8002254 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222e:	4b88      	ldr	r3, [pc, #544]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223a:	d10b      	bne.n	8002254 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05b      	beq.n	8002300 <HAL_RCC_OscConfig+0x124>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d157      	bne.n	8002300 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e25a      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x90>
 800225e:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7b      	ldr	r2, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0xcc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0xb4>
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a72      	ldr	r2, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0xcc>
 8002290:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6e      	ldr	r2, [pc, #440]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b6c      	ldr	r3, [pc, #432]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6b      	ldr	r2, [pc, #428]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fe70 	bl	8000f94 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b8:	f7fe fe6c 	bl	8000f94 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e21f      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b61      	ldr	r3, [pc, #388]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0xdc>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe5c 	bl	8000f94 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe fe58 	bl	8000f94 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e20b      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x104>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06f      	beq.n	80023ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800230e:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	d017      	beq.n	800234a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800231a:	4b4d      	ldr	r3, [pc, #308]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002322:	2b08      	cmp	r3, #8
 8002324:	d105      	bne.n	8002332 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002326:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b44      	ldr	r3, [pc, #272]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x186>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1d3      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4937      	ldr	r1, [pc, #220]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e03a      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b34      	ldr	r3, [pc, #208]	; (8002454 <HAL_RCC_OscConfig+0x278>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fe05 	bl	8000f94 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7fe fe01 	bl	8000f94 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e1b4      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b28      	ldr	r3, [pc, #160]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4925      	ldr	r1, [pc, #148]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b24      	ldr	r3, [pc, #144]	; (8002454 <HAL_RCC_OscConfig+0x278>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fde4 	bl	8000f94 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe fde0 	bl	8000f94 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e193      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d036      	beq.n	8002468 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_RCC_OscConfig+0x27c>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fdc4 	bl	8000f94 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe fdc0 	bl	8000f94 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e173      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x274>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x234>
 800242e:	e01b      	b.n	8002468 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_OscConfig+0x27c>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe fdad 	bl	8000f94 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	e00e      	b.n	800245c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243e:	f7fe fda9 	bl	8000f94 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d907      	bls.n	800245c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e15c      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
 8002450:	40023800 	.word	0x40023800
 8002454:	42470000 	.word	0x42470000
 8002458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	4b8a      	ldr	r3, [pc, #552]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800245e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ea      	bne.n	800243e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8097 	beq.w	80025a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247a:	4b83      	ldr	r3, [pc, #524]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	4b7f      	ldr	r3, [pc, #508]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a7e      	ldr	r2, [pc, #504]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	4b79      	ldr	r3, [pc, #484]	; (800268c <HAL_RCC_OscConfig+0x4b0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d118      	bne.n	80024e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b2:	4b76      	ldr	r3, [pc, #472]	; (800268c <HAL_RCC_OscConfig+0x4b0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a75      	ldr	r2, [pc, #468]	; (800268c <HAL_RCC_OscConfig+0x4b0>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe fd69 	bl	8000f94 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe fd65 	bl	8000f94 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e118      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	4b6c      	ldr	r3, [pc, #432]	; (800268c <HAL_RCC_OscConfig+0x4b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x31e>
 80024ec:	4b66      	ldr	r3, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	e01c      	b.n	8002534 <HAL_RCC_OscConfig+0x358>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x340>
 8002502:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a60      	ldr	r2, [pc, #384]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0x358>
 800251c:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a59      	ldr	r2, [pc, #356]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	4b57      	ldr	r3, [pc, #348]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800252e:	f023 0304 	bic.w	r3, r3, #4
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d015      	beq.n	8002568 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fd2a 	bl	8000f94 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe fd26 	bl	8000f94 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0d7      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0ee      	beq.n	8002544 <HAL_RCC_OscConfig+0x368>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fd14 	bl	8000f94 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002570:	f7fe fd10 	bl	8000f94 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0c1      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ee      	bne.n	8002570 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4a3a      	ldr	r2, [pc, #232]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800259e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80ad 	beq.w	8002708 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d060      	beq.n	800267c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d145      	bne.n	800264e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_RCC_OscConfig+0x4b4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fce4 	bl	8000f94 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fce0 	bl	8000f94 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e093      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	019b      	lsls	r3, r3, #6
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	3b01      	subs	r3, #1
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	071b      	lsls	r3, r3, #28
 800261a:	491b      	ldr	r1, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x4b4>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fcb5 	bl	8000f94 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262e:	f7fe fcb1 	bl	8000f94 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e064      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x452>
 800264c:	e05c      	b.n	8002708 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCC_OscConfig+0x4b4>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fc9e 	bl	8000f94 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fc9a 	bl	8000f94 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04d      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x480>
 800267a:	e045      	b.n	8002708 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e040      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000
 8002690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_RCC_OscConfig+0x538>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d030      	beq.n	8002704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d129      	bne.n	8002704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d122      	bne.n	8002704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d119      	bne.n	8002704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	085b      	lsrs	r3, r3, #1
 80026dc:	3b01      	subs	r3, #1
 80026de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d10f      	bne.n	8002704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800

08002718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e03f      	b.n	80027aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fad6 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fba5 	bl	8002eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b08a      	sub	sp, #40	; 0x28
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d17c      	bne.n	80028cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <HAL_UART_Transmit+0x2c>
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e075      	b.n	80028ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_UART_Transmit+0x3e>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e06e      	b.n	80028ce <HAL_UART_Transmit+0x11c>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2221      	movs	r2, #33	; 0x21
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002806:	f7fe fbc5 	bl	8000f94 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	88fa      	ldrh	r2, [r7, #6]
 8002816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002820:	d108      	bne.n	8002834 <HAL_UART_Transmit+0x82>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d104      	bne.n	8002834 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e003      	b.n	800283c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002844:	e02a      	b.n	800289c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f992 	bl	8002b7a <UART_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e036      	b.n	80028ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	3302      	adds	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	e007      	b.n	800288e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3301      	adds	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1cf      	bne.n	8002846 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2140      	movs	r1, #64	; 0x40
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f962 	bl	8002b7a <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e006      	b.n	80028ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d11d      	bne.n	800292c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Receive_DMA+0x26>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e016      	b.n	800292e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_UART_Receive_DMA+0x38>
 800290a:	2302      	movs	r3, #2
 800290c:	e00f      	b.n	800292e <HAL_UART_Receive_DMA+0x58>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	461a      	mov	r2, r3
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f998 	bl	8002c58 <UART_Start_Receive_DMA>
 8002928:	4603      	mov	r3, r0
 800292a:	e000      	b.n	800292e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b09c      	sub	sp, #112	; 0x70
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d172      	bne.n	8002a8c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	2200      	movs	r2, #0
 80029aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80029ce:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e5      	bne.n	80029ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	e853 3f00 	ldrex	r3, [r3]
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	667b      	str	r3, [r7, #100]	; 0x64
 80029f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a00:	647a      	str	r2, [r7, #68]	; 0x44
 8002a02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e5      	bne.n	80029e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	e853 3f00 	ldrex	r3, [r3]
 8002a22:	623b      	str	r3, [r7, #32]
   return(result);
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3314      	adds	r3, #20
 8002a32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a34:	633a      	str	r2, [r7, #48]	; 0x30
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e5      	bne.n	8002a14 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d119      	bne.n	8002a8c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0310 	bic.w	r3, r3, #16
 8002a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a78:	61fa      	str	r2, [r7, #28]
 8002a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	e841 2300 	strex	r3, r2, [r1]
 8002a84:	617b      	str	r3, [r7, #20]
   return(result);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e5      	bne.n	8002a58 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a9c:	f7ff ff69 	bl	8002972 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002aa0:	e002      	b.n	8002aa8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002aa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002aa4:	f7ff ff47 	bl	8002936 <HAL_UART_RxCpltCallback>
}
 8002aa8:	bf00      	nop
 8002aaa:	3770      	adds	r7, #112	; 0x70
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	4619      	mov	r1, r3
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff4e 	bl	8002972 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ad6:	e002      	b.n	8002ade <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ff36 	bl	800294a <HAL_UART_RxHalfCpltCallback>
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b80      	cmp	r3, #128	; 0x80
 8002b04:	bf0c      	ite	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	2300      	movne	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b21      	cmp	r3, #33	; 0x21
 8002b18:	d108      	bne.n	8002b2c <UART_DMAError+0x46>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b26:	68b8      	ldr	r0, [r7, #8]
 8002b28:	f000 f934 	bl	8002d94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	bf0c      	ite	eq
 8002b3a:	2301      	moveq	r3, #1
 8002b3c:	2300      	movne	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b22      	cmp	r3, #34	; 0x22
 8002b4c:	d108      	bne.n	8002b60 <UART_DMAError+0x7a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	f000 f942 	bl	8002de4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0210 	orr.w	r2, r3, #16
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6c:	68b8      	ldr	r0, [r7, #8]
 8002b6e:	f7ff fef6 	bl	800295e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b090      	sub	sp, #64	; 0x40
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8a:	e050      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d04c      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <UART_WaitOnFlagUntilTimeout+0x30>
 8002b9a:	f7fe f9fb 	bl	8000f94 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d241      	bcs.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bca:	637a      	str	r2, [r7, #52]	; 0x34
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e5      	bne.n	8002baa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	613b      	str	r3, [r7, #16]
   return(result);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3314      	adds	r3, #20
 8002bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bfe:	623a      	str	r2, [r7, #32]
 8002c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	69f9      	ldr	r1, [r7, #28]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e5      	bne.n	8002bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e00f      	b.n	8002c4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d09f      	beq.n	8002b8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3740      	adds	r7, #64	; 0x40
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b098      	sub	sp, #96	; 0x60
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2222      	movs	r2, #34	; 0x22
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	4a40      	ldr	r2, [pc, #256]	; (8002d88 <UART_Start_Receive_DMA+0x130>)
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	4a3f      	ldr	r2, [pc, #252]	; (8002d8c <UART_Start_Receive_DMA+0x134>)
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	4a3e      	ldr	r2, [pc, #248]	; (8002d90 <UART_Start_Receive_DMA+0x138>)
 8002c96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002ca0:	f107 0308 	add.w	r3, r7, #8
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	f7fe fb5c 	bl	8001374 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d019      	beq.n	8002d16 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d02:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e5      	bne.n	8002ce2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d36:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e5      	bne.n	8002d16 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	617b      	str	r3, [r7, #20]
   return(result);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d60:	653b      	str	r3, [r7, #80]	; 0x50
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d6a:	627a      	str	r2, [r7, #36]	; 0x24
 8002d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6a39      	ldr	r1, [r7, #32]
 8002d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e5      	bne.n	8002d4a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3760      	adds	r7, #96	; 0x60
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	0800298b 	.word	0x0800298b
 8002d8c:	08002ab1 	.word	0x08002ab1
 8002d90:	08002ae7 	.word	0x08002ae7

08002d94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	61ba      	str	r2, [r7, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6979      	ldr	r1, [r7, #20]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002dd8:	bf00      	nop
 8002dda:	3724      	adds	r7, #36	; 0x24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b095      	sub	sp, #84	; 0x54
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e0c:	643a      	str	r2, [r7, #64]	; 0x40
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e5      	bne.n	8002dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3314      	adds	r3, #20
 8002e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e5      	bne.n	8002e20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d119      	bne.n	8002e90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f023 0310 	bic.w	r3, r3, #16
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e7c:	61ba      	str	r2, [r7, #24]
 8002e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e5      	bne.n	8002e5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e9e:	bf00      	nop
 8002ea0:	3754      	adds	r7, #84	; 0x54
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b0c0      	sub	sp, #256	; 0x100
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec8:	68d9      	ldr	r1, [r3, #12]
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	ea40 0301 	orr.w	r3, r0, r1
 8002ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f04:	f021 010c 	bic.w	r1, r1, #12
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f12:	430b      	orrs	r3, r1
 8002f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	6999      	ldr	r1, [r3, #24]
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	ea40 0301 	orr.w	r3, r0, r1
 8002f32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b8f      	ldr	r3, [pc, #572]	; (8003178 <UART_SetConfig+0x2cc>)
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d005      	beq.n	8002f4c <UART_SetConfig+0xa0>
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b8d      	ldr	r3, [pc, #564]	; (800317c <UART_SetConfig+0x2d0>)
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d104      	bne.n	8002f56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7fe ff88 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 8002f50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f54:	e003      	b.n	8002f5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f56:	f7fe ff6f 	bl	8001e38 <HAL_RCC_GetPCLK1Freq>
 8002f5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f68:	f040 810c 	bne.w	8003184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f70:	2200      	movs	r2, #0
 8002f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f7e:	4622      	mov	r2, r4
 8002f80:	462b      	mov	r3, r5
 8002f82:	1891      	adds	r1, r2, r2
 8002f84:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f86:	415b      	adcs	r3, r3
 8002f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f8e:	4621      	mov	r1, r4
 8002f90:	eb12 0801 	adds.w	r8, r2, r1
 8002f94:	4629      	mov	r1, r5
 8002f96:	eb43 0901 	adc.w	r9, r3, r1
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fae:	4690      	mov	r8, r2
 8002fb0:	4699      	mov	r9, r3
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	eb18 0303 	adds.w	r3, r8, r3
 8002fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	eb49 0303 	adc.w	r3, r9, r3
 8002fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fda:	460b      	mov	r3, r1
 8002fdc:	18db      	adds	r3, r3, r3
 8002fde:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	eb42 0303 	adc.w	r3, r2, r3
 8002fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ff0:	f7fd f908 	bl	8000204 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4b61      	ldr	r3, [pc, #388]	; (8003180 <UART_SetConfig+0x2d4>)
 8002ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	011c      	lsls	r4, r3, #4
 8003002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800300c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	1891      	adds	r1, r2, r2
 800301a:	64b9      	str	r1, [r7, #72]	; 0x48
 800301c:	415b      	adcs	r3, r3
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003024:	4641      	mov	r1, r8
 8003026:	eb12 0a01 	adds.w	sl, r2, r1
 800302a:	4649      	mov	r1, r9
 800302c:	eb43 0b01 	adc.w	fp, r3, r1
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800303c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003044:	4692      	mov	sl, r2
 8003046:	469b      	mov	fp, r3
 8003048:	4643      	mov	r3, r8
 800304a:	eb1a 0303 	adds.w	r3, sl, r3
 800304e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003052:	464b      	mov	r3, r9
 8003054:	eb4b 0303 	adc.w	r3, fp, r3
 8003058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003068:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800306c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003070:	460b      	mov	r3, r1
 8003072:	18db      	adds	r3, r3, r3
 8003074:	643b      	str	r3, [r7, #64]	; 0x40
 8003076:	4613      	mov	r3, r2
 8003078:	eb42 0303 	adc.w	r3, r2, r3
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
 800307e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003086:	f7fd f8bd 	bl	8000204 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4611      	mov	r1, r2
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <UART_SetConfig+0x2d4>)
 8003092:	fba3 2301 	umull	r2, r3, r3, r1
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2264      	movs	r2, #100	; 0x64
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	1acb      	subs	r3, r1, r3
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030a6:	4b36      	ldr	r3, [pc, #216]	; (8003180 <UART_SetConfig+0x2d4>)
 80030a8:	fba3 2302 	umull	r2, r3, r3, r2
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b4:	441c      	add	r4, r3
 80030b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030c8:	4642      	mov	r2, r8
 80030ca:	464b      	mov	r3, r9
 80030cc:	1891      	adds	r1, r2, r2
 80030ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d0:	415b      	adcs	r3, r3
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030d8:	4641      	mov	r1, r8
 80030da:	1851      	adds	r1, r2, r1
 80030dc:	6339      	str	r1, [r7, #48]	; 0x30
 80030de:	4649      	mov	r1, r9
 80030e0:	414b      	adcs	r3, r1
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f0:	4659      	mov	r1, fp
 80030f2:	00cb      	lsls	r3, r1, #3
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fa:	4651      	mov	r1, sl
 80030fc:	00ca      	lsls	r2, r1, #3
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	4603      	mov	r3, r0
 8003104:	4642      	mov	r2, r8
 8003106:	189b      	adds	r3, r3, r2
 8003108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800310c:	464b      	mov	r3, r9
 800310e:	460a      	mov	r2, r1
 8003110:	eb42 0303 	adc.w	r3, r2, r3
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003124:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800312c:	460b      	mov	r3, r1
 800312e:	18db      	adds	r3, r3, r3
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	4613      	mov	r3, r2
 8003134:	eb42 0303 	adc.w	r3, r2, r3
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800313e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003142:	f7fd f85f 	bl	8000204 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <UART_SetConfig+0x2d4>)
 800314c:	fba3 1302 	umull	r1, r3, r3, r2
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	2164      	movs	r1, #100	; 0x64
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	3332      	adds	r3, #50	; 0x32
 800315e:	4a08      	ldr	r2, [pc, #32]	; (8003180 <UART_SetConfig+0x2d4>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	f003 0207 	and.w	r2, r3, #7
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4422      	add	r2, r4
 8003172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003174:	e105      	b.n	8003382 <UART_SetConfig+0x4d6>
 8003176:	bf00      	nop
 8003178:	40011000 	.word	0x40011000
 800317c:	40011400 	.word	0x40011400
 8003180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003188:	2200      	movs	r2, #0
 800318a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800318e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003196:	4642      	mov	r2, r8
 8003198:	464b      	mov	r3, r9
 800319a:	1891      	adds	r1, r2, r2
 800319c:	6239      	str	r1, [r7, #32]
 800319e:	415b      	adcs	r3, r3
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031a6:	4641      	mov	r1, r8
 80031a8:	1854      	adds	r4, r2, r1
 80031aa:	4649      	mov	r1, r9
 80031ac:	eb43 0501 	adc.w	r5, r3, r1
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	00eb      	lsls	r3, r5, #3
 80031ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031be:	00e2      	lsls	r2, r4, #3
 80031c0:	4614      	mov	r4, r2
 80031c2:	461d      	mov	r5, r3
 80031c4:	4643      	mov	r3, r8
 80031c6:	18e3      	adds	r3, r4, r3
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031cc:	464b      	mov	r3, r9
 80031ce:	eb45 0303 	adc.w	r3, r5, r3
 80031d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031f2:	4629      	mov	r1, r5
 80031f4:	008b      	lsls	r3, r1, #2
 80031f6:	4621      	mov	r1, r4
 80031f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fc:	4621      	mov	r1, r4
 80031fe:	008a      	lsls	r2, r1, #2
 8003200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003204:	f7fc fffe 	bl	8000204 <__aeabi_uldivmod>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4b60      	ldr	r3, [pc, #384]	; (8003390 <UART_SetConfig+0x4e4>)
 800320e:	fba3 2302 	umull	r2, r3, r3, r2
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	011c      	lsls	r4, r3, #4
 8003216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003220:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	1891      	adds	r1, r2, r2
 800322e:	61b9      	str	r1, [r7, #24]
 8003230:	415b      	adcs	r3, r3
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003238:	4641      	mov	r1, r8
 800323a:	1851      	adds	r1, r2, r1
 800323c:	6139      	str	r1, [r7, #16]
 800323e:	4649      	mov	r1, r9
 8003240:	414b      	adcs	r3, r1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003250:	4659      	mov	r1, fp
 8003252:	00cb      	lsls	r3, r1, #3
 8003254:	4651      	mov	r1, sl
 8003256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325a:	4651      	mov	r1, sl
 800325c:	00ca      	lsls	r2, r1, #3
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	4603      	mov	r3, r0
 8003264:	4642      	mov	r2, r8
 8003266:	189b      	adds	r3, r3, r2
 8003268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800326c:	464b      	mov	r3, r9
 800326e:	460a      	mov	r2, r1
 8003270:	eb42 0303 	adc.w	r3, r2, r3
 8003274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	67bb      	str	r3, [r7, #120]	; 0x78
 8003282:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003290:	4649      	mov	r1, r9
 8003292:	008b      	lsls	r3, r1, #2
 8003294:	4641      	mov	r1, r8
 8003296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329a:	4641      	mov	r1, r8
 800329c:	008a      	lsls	r2, r1, #2
 800329e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032a2:	f7fc ffaf 	bl	8000204 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <UART_SetConfig+0x4e4>)
 80032ac:	fba3 1302 	umull	r1, r3, r3, r2
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	2164      	movs	r1, #100	; 0x64
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	3332      	adds	r3, #50	; 0x32
 80032be:	4a34      	ldr	r2, [pc, #208]	; (8003390 <UART_SetConfig+0x4e4>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ca:	441c      	add	r4, r3
 80032cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d0:	2200      	movs	r2, #0
 80032d2:	673b      	str	r3, [r7, #112]	; 0x70
 80032d4:	677a      	str	r2, [r7, #116]	; 0x74
 80032d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	1891      	adds	r1, r2, r2
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	415b      	adcs	r3, r3
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ea:	4641      	mov	r1, r8
 80032ec:	1851      	adds	r1, r2, r1
 80032ee:	6039      	str	r1, [r7, #0]
 80032f0:	4649      	mov	r1, r9
 80032f2:	414b      	adcs	r3, r1
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003302:	4659      	mov	r1, fp
 8003304:	00cb      	lsls	r3, r1, #3
 8003306:	4651      	mov	r1, sl
 8003308:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800330c:	4651      	mov	r1, sl
 800330e:	00ca      	lsls	r2, r1, #3
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	4603      	mov	r3, r0
 8003316:	4642      	mov	r2, r8
 8003318:	189b      	adds	r3, r3, r2
 800331a:	66bb      	str	r3, [r7, #104]	; 0x68
 800331c:	464b      	mov	r3, r9
 800331e:	460a      	mov	r2, r1
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	663b      	str	r3, [r7, #96]	; 0x60
 8003330:	667a      	str	r2, [r7, #100]	; 0x64
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800333e:	4649      	mov	r1, r9
 8003340:	008b      	lsls	r3, r1, #2
 8003342:	4641      	mov	r1, r8
 8003344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003348:	4641      	mov	r1, r8
 800334a:	008a      	lsls	r2, r1, #2
 800334c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003350:	f7fc ff58 	bl	8000204 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <UART_SetConfig+0x4e4>)
 800335a:	fba3 1302 	umull	r1, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2164      	movs	r1, #100	; 0x64
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	4a08      	ldr	r2, [pc, #32]	; (8003390 <UART_SetConfig+0x4e4>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	f003 020f 	and.w	r2, r3, #15
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4422      	add	r2, r4
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	bf00      	nop
 8003384:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003388:	46bd      	mov	sp, r7
 800338a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338e:	bf00      	nop
 8003390:	51eb851f 	.word	0x51eb851f

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	4d0d      	ldr	r5, [pc, #52]	; (80033cc <__libc_init_array+0x38>)
 8003398:	4c0d      	ldr	r4, [pc, #52]	; (80033d0 <__libc_init_array+0x3c>)
 800339a:	1b64      	subs	r4, r4, r5
 800339c:	10a4      	asrs	r4, r4, #2
 800339e:	2600      	movs	r6, #0
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	4d0b      	ldr	r5, [pc, #44]	; (80033d4 <__libc_init_array+0x40>)
 80033a6:	4c0c      	ldr	r4, [pc, #48]	; (80033d8 <__libc_init_array+0x44>)
 80033a8:	f000 f820 	bl	80033ec <_init>
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	2600      	movs	r6, #0
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	0800342c 	.word	0x0800342c
 80033d0:	0800342c 	.word	0x0800342c
 80033d4:	0800342c 	.word	0x0800342c
 80033d8:	08003434 	.word	0x08003434

080033dc <memset>:
 80033dc:	4402      	add	r2, r0
 80033de:	4603      	mov	r3, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d100      	bne.n	80033e6 <memset+0xa>
 80033e4:	4770      	bx	lr
 80033e6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ea:	e7f9      	b.n	80033e0 <memset+0x4>

080033ec <_init>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	bf00      	nop
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr

080033f8 <_fini>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	bf00      	nop
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr
