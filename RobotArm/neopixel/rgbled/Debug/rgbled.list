
rgbled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005334  08005334  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800533c  0800533c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e44  2000000c  08005354  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e50  08005354  00022e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d122  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa9  00000000  00000000  0002d15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002f108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024016  00000000  00000000  00030650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7b7  00000000  00000000  00054666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0adb  00000000  00000000  00061e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001328f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  00132948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004f34 	.word	0x08004f34

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004f34 	.word	0x08004f34

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d52:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d56:	f003 fb67 	bl	8004428 <cosf>
 8000d5a:	eef0 7a40 	vmov.f32	s15, s0
 8000d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_ZN4CALC14similarityPeakEhsttt>:
#include "calc.h"
#include "math.h"

int16_t CALC::similarityPeak(uint8_t ledNum, int16_t refference, uint16_t widthAngle, uint16_t center, uint16_t widthHue){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4603      	mov	r3, r0
 8000d78:	72fb      	strb	r3, [r7, #11]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	813b      	strh	r3, [r7, #8]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = ledNum * 360 / 16 + 360 / 32;
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000d90:	fb02 f303 	mul.w	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	da00      	bge.n	8000d9a <_ZN4CALC14similarityPeakEhsttt+0x32>
 8000d98:	330f      	adds	r3, #15
 8000d9a:	111b      	asrs	r3, r3, #4
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	330b      	adds	r3, #11
 8000da0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t diff = abs(angle - refference);
 8000da2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000da4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfb8      	it	lt
 8000dae:	425b      	neglt	r3, r3
 8000db0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (diff > 180) {
 8000db2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000db4:	2bb4      	cmp	r3, #180	; 0xb4
 8000db6:	d903      	bls.n	8000dc0 <_ZN4CALC14similarityPeakEhsttt+0x58>
		diff = 360 - diff;
 8000db8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000dba:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8000dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	if (diff >= widthAngle / 2) {
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	085b      	lsrs	r3, r3, #1
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d301      	bcc.n	8000dd0 <_ZN4CALC14similarityPeakEhsttt+0x68>
		return 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e09a      	b.n	8000f06 <_ZN4CALC14similarityPeakEhsttt+0x19e>
	}

	float angleRad = angle * M_PI / 180.0;
 8000dd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb6a 	bl	80004ac <__aeabi_i2d>
 8000dd8:	a34d      	add	r3, pc, #308	; (adr r3, 8000f10 <_ZN4CALC14similarityPeakEhsttt+0x1a8>)
 8000dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dde:	f7ff fbcf 	bl	8000580 <__aeabi_dmul>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8000df0:	f7ff fcf0 	bl	80007d4 <__aeabi_ddiv>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f7ff fdd2 	bl	80009a4 <__aeabi_d2f>
 8000e00:	4603      	mov	r3, r0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
	float refferenceRad = refference * M_PI / 180.0;
 8000e04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb4f 	bl	80004ac <__aeabi_i2d>
 8000e0e:	a340      	add	r3, pc, #256	; (adr r3, 8000f10 <_ZN4CALC14similarityPeakEhsttt+0x1a8>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fbb4 	bl	8000580 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8000e26:	f7ff fcd5 	bl	80007d4 <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff fdb7 	bl	80009a4 <__aeabi_d2f>
 8000e36:	4603      	mov	r3, r0
 8000e38:	623b      	str	r3, [r7, #32]
	float widthAngleRad = widthAngle * M_PI / 180.0;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb35 	bl	80004ac <__aeabi_i2d>
 8000e42:	a333      	add	r3, pc, #204	; (adr r3, 8000f10 <_ZN4CALC14similarityPeakEhsttt+0x1a8>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fb9a 	bl	8000580 <__aeabi_dmul>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <_ZN4CALC14similarityPeakEhsttt+0x1b0>)
 8000e5a:	f7ff fcbb 	bl	80007d4 <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fd9d 	bl	80009a4 <__aeabi_d2f>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	61fb      	str	r3, [r7, #28]

	float result = cos(angleRad - refferenceRad);
 8000e6e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e72:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7e:	f7ff ff63 	bl	8000d48 <_ZSt3cosf>
 8000e82:	ed87 0a06 	vstr	s0, [r7, #24]
	float zeroPoint = cos(widthAngleRad / 2);
 8000e86:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000e8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e92:	eeb0 0a47 	vmov.f32	s0, s14
 8000e96:	f7ff ff57 	bl	8000d48 <_ZSt3cosf>
 8000e9a:	ed87 0a05 	vstr	s0, [r7, #20]
	float normalizedResult = (result - zeroPoint) / (1 - zeroPoint);
 8000e9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ea6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eba:	edc7 7a04 	vstr	s15, [r7, #16]

	int16_t output = center + (normalizedResult - 1) * widthHue;
 8000ebe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ed0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8000ed4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000ed6:	ee07 3a90 	vmov	s15, r3
 8000eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eea:	ee17 3a90 	vmov	r3, s15
 8000eee:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if(output < 0){
 8000ef0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da04      	bge.n	8000f02 <_ZN4CALC14similarityPeakEhsttt+0x19a>
		output += 256;
 8000ef8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000efa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	85bb      	strh	r3, [r7, #44]	; 0x2c
	}

	return output;
 8000f02:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3730      	adds	r7, #48	; 0x30
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	54442d18 	.word	0x54442d18
 8000f14:	400921fb 	.word	0x400921fb
 8000f18:	40668000 	.word	0x40668000

08000f1c <_ZN4CALC5rangeEast>:
    float output = (result - zeroPoint) / (1 - zeroPoint);

    return output * 255;
}

uint8_t CALC::range(int8_t ledNum, int16_t refference, uint16_t width){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	72fb      	strb	r3, [r7, #11]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	813b      	strh	r3, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	80fb      	strh	r3, [r7, #6]
	ledNum %= 16;
 8000f36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f3a:	425a      	negs	r2, r3
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	f002 020f 	and.w	r2, r2, #15
 8000f44:	bf58      	it	pl
 8000f46:	4253      	negpl	r3, r2
 8000f48:	72fb      	strb	r3, [r7, #11]
	uint16_t angle = ledNum * 360 / 16 + 360 / 32;
 8000f4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f4e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da00      	bge.n	8000f5c <_ZN4CALC5rangeEast+0x40>
 8000f5a:	330f      	adds	r3, #15
 8000f5c:	111b      	asrs	r3, r3, #4
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	330b      	adds	r3, #11
 8000f62:	82bb      	strh	r3, [r7, #20]
	uint16_t diff = abs(angle - refference);
 8000f64:	8aba      	ldrh	r2, [r7, #20]
 8000f66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bfb8      	it	lt
 8000f70:	425b      	neglt	r3, r3
 8000f72:	82fb      	strh	r3, [r7, #22]
    if (diff > 180) {
 8000f74:	8afb      	ldrh	r3, [r7, #22]
 8000f76:	2bb4      	cmp	r3, #180	; 0xb4
 8000f78:	d903      	bls.n	8000f82 <_ZN4CALC5rangeEast+0x66>
        diff = 360 - diff;
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8000f80:	82fb      	strh	r3, [r7, #22]
    }

    if (diff >= width / 2) {
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	8afa      	ldrh	r2, [r7, #22]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d301      	bcc.n	8000f92 <_ZN4CALC5rangeEast+0x76>
        return 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <_ZN4CALC5rangeEast+0x78>
    }else{
    	return 1;
 8000f92:	2301      	movs	r3, #1
    }
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	   NeopixelBoard.execute();
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000faa:	f000 fcb1 	bl	8001910 <_ZN7WS2812C7executeEv>
	   NeopixelTape.execute();
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000fb0:	f000 fcae 	bl	8001910 <_ZN7WS2812C7executeEv>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000130 	.word	0x20000130
 8000fc0:	200017b8 	.word	0x200017b8

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f000 fd89 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 f86d 	bl	80010ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 f9a9 	bl	8001328 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000fd6:	f000 f97f 	bl	80012d8 <_ZL11MX_DMA_Initv>
  MX_TIM3_Init();
 8000fda:	f000 f8dd 	bl	8001198 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  NeopixelBoard.init();
 8000fde:	482d      	ldr	r0, [pc, #180]	; (8001094 <main+0xd0>)
 8000fe0:	f000 fd1f 	bl	8001a22 <_ZN7WS2812C4initEv>
  NeopixelTape.init();
 8000fe4:	482c      	ldr	r0, [pc, #176]	; (8001098 <main+0xd4>)
 8000fe6:	f000 fd1c 	bl	8001a22 <_ZN7WS2812C4initEv>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t i = 0;
	  i++;
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <main+0xd8>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <main+0xd8>)
 8000ff4:	801a      	strh	r2, [r3, #0]
	  if(i >= 360){
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <main+0xd8>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000ffe:	d306      	bcc.n	800100e <main+0x4a>
		  i -= 360;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <main+0xd8>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0xd8>)
 800100c:	801a      	strh	r2, [r3, #0]
	  }
		  for(uint8_t led = 0; led < 32; led++){
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b1f      	cmp	r3, #31
 8001016:	d834      	bhi.n	8001082 <main+0xbe>
			  NeopixelBoard.set_hsv(led, calc.similarityPeak(led, i, 180, i * 2 / 3, 50), 255, calc.range(led, i, 180) * 10);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	b29c      	uxth	r4, r3
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <main+0xd8>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	b218      	sxth	r0, r3
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <main+0xd8>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <main+0xdc>)
 800102a:	fb82 1203 	smull	r1, r2, r2, r3
 800102e:	17db      	asrs	r3, r3, #31
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	79f9      	ldrb	r1, [r7, #7]
 8001036:	2232      	movs	r2, #50	; 0x32
 8001038:	9201      	str	r2, [sp, #4]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	23b4      	movs	r3, #180	; 0xb4
 800103e:	4602      	mov	r2, r0
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <main+0xe0>)
 8001042:	f7ff fe91 	bl	8000d68 <_ZN4CALC14similarityPeakEhsttt>
 8001046:	4603      	mov	r3, r0
 8001048:	461d      	mov	r5, r3
 800104a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <main+0xd8>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b21a      	sxth	r2, r3
 8001054:	23b4      	movs	r3, #180	; 0xb4
 8001056:	4813      	ldr	r0, [pc, #76]	; (80010a4 <main+0xe0>)
 8001058:	f7ff ff60 	bl	8000f1c <_ZN4CALC5rangeEast>
 800105c:	4603      	mov	r3, r0
 800105e:	b29b      	uxth	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21b      	sxth	r3, r3
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	23ff      	movs	r3, #255	; 0xff
 8001070:	462a      	mov	r2, r5
 8001072:	4621      	mov	r1, r4
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <main+0xd0>)
 8001076:	f000 fb71 	bl	800175c <_ZN7WS2812C7set_hsvEtsss>
		  for(uint8_t led = 0; led < 32; led++){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	3301      	adds	r3, #1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	e7c7      	b.n	8001012 <main+0x4e>
		  }
		  NeopixelBoard.show();
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <main+0xd0>)
 8001084:	f000 fc34 	bl	80018f0 <_ZN7WS2812C4showEv>
	  m++;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <main+0xe4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <main+0xe4>)
 8001090:	6013      	str	r3, [r2, #0]





  }
 8001092:	e7aa      	b.n	8000fea <main+0x26>
 8001094:	20000130 	.word	0x20000130
 8001098:	200017b8 	.word	0x200017b8
 800109c:	20002e48 	.word	0x20002e48
 80010a0:	55555556 	.word	0x55555556
 80010a4:	20002e40 	.word	0x20002e40
 80010a8:	20002e44 	.word	0x20002e44

080010ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2234      	movs	r2, #52	; 0x34
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 ff32 	bl	8004f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <_Z18SystemClock_Configv+0xe4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <_Z18SystemClock_Configv+0xe4>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <_Z18SystemClock_Configv+0xe4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010ec:	2300      	movs	r3, #0
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <_Z18SystemClock_Configv+0xe8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <_Z18SystemClock_Configv+0xe8>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <_Z18SystemClock_Configv+0xe8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001120:	2310      	movs	r3, #16
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001124:	23c0      	movs	r3, #192	; 0xc0
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001128:	2306      	movs	r3, #6
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fe6d 	bl	8002e18 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	bf14      	ite	ne
 8001144:	2301      	movne	r3, #1
 8001146:	2300      	moveq	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800114e:	f000 f921 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2302      	movs	r3, #2
 8001158:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2101      	movs	r1, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fb3f 	bl	80027f0 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001182:	f000 f907 	bl	8001394 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08e      	sub	sp, #56	; 0x38
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
 80011c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011ca:	4a42      	ldr	r2, [pc, #264]	; (80012d4 <_ZL12MX_TIM3_Initv+0x13c>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40-1;
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011dc:	2227      	movs	r2, #39	; 0x27
 80011de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ec:	4838      	ldr	r0, [pc, #224]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80011ee:	f002 f8b1 	bl	8003354 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <_ZL12MX_TIM3_Initv+0x6e>
  {
    Error_Handler();
 8001202:	f000 f8c7 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001210:	4619      	mov	r1, r3
 8001212:	482f      	ldr	r0, [pc, #188]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 8001214:	f002 fbd0 	bl	80039b8 <HAL_TIM_ConfigClockSource>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <_ZL12MX_TIM3_Initv+0x94>
  {
    Error_Handler();
 8001228:	f000 f8b4 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800122c:	4828      	ldr	r0, [pc, #160]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 800122e:	f002 f8e0 	bl	80033f2 <HAL_TIM_PWM_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8001242:	f000 f8a7 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	4619      	mov	r1, r3
 8001254:	481e      	ldr	r0, [pc, #120]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 8001256:	f003 f86b 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <_ZL12MX_TIM3_Initv+0xd6>
  {
    Error_Handler();
 800126a:	f000 f893 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	2360      	movs	r3, #96	; 0x60
 8001270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 8001286:	f002 fad5 	bl	8003834 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZL12MX_TIM3_Initv+0x106>
  {
    Error_Handler();
 800129a:	f000 f87b 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800129e:	2304      	movs	r3, #4
 80012a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2204      	movs	r2, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80012aa:	f002 fac3 	bl	8003834 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZL12MX_TIM3_Initv+0x12a>
  {
    Error_Handler();
 80012be:	f000 f869 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <_ZL12MX_TIM3_Initv+0x138>)
 80012c4:	f000 f956 	bl	8001574 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3738      	adds	r7, #56	; 0x38
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000028 	.word	0x20000028
 80012d4:	40000400 	.word	0x40000400

080012d8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_ZL11MX_DMA_Initv+0x4c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <_ZL11MX_DMA_Initv+0x4c>)
 80012e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <_ZL11MX_DMA_Initv+0x4c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 fd3b 	bl	8001d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001304:	200f      	movs	r0, #15
 8001306:	f000 fd54 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2010      	movs	r0, #16
 8001310:	f000 fd33 	bl	8001d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001314:	2010      	movs	r0, #16
 8001316:	f000 fd4c 	bl	8001db2 <HAL_NVIC_EnableIRQ>

}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a16      	ldr	r2, [pc, #88]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <_ZL12MX_GPIO_Initv+0x68>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d110      	bne.n	80013d2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10b      	bne.n	80013d2 <_Z41__static_initialization_and_destruction_0ii+0x32>
WS2812C NeopixelBoard(&htim3, TIM_CHANNEL_2, &hdma_tim3_ch2);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80013bc:	2204      	movs	r2, #4
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80013c2:	f000 f981 	bl	80016c8 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
WS2812C NeopixelTape(&htim3, TIM_CHANNEL_1, &hdma_tim3_ch1_trig);
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	4905      	ldr	r1, [pc, #20]	; (80013e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80013ce:	f000 f97b 	bl	80016c8 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000070 	.word	0x20000070
 80013e0:	20000028 	.word	0x20000028
 80013e4:	20000130 	.word	0x20000130
 80013e8:	200000d0 	.word	0x200000d0
 80013ec:	200017b8 	.word	0x200017b8

080013f0 <_GLOBAL__sub_I_htim3>:
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff ffd1 	bl	80013a0 <_Z41__static_initialization_and_destruction_0ii>
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_TIM_Base_MspInit+0x10c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d177      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x102>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_TIM_Base_MspInit+0x110>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a3d      	ldr	r2, [pc, #244]	; (8001560 <HAL_TIM_Base_MspInit+0x110>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_TIM_Base_MspInit+0x110>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 8001480:	4a39      	ldr	r2, [pc, #228]	; (8001568 <HAL_TIM_Base_MspInit+0x118>)
 8001482:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 8001486:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800148a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 800148e:	2240      	movs	r2, #64	; 0x40
 8001490:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 800149a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80014b0:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80014c6:	4827      	ldr	r0, [pc, #156]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014c8:	f000 fc8e 	bl	8001de8 <HAL_DMA_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80014d2:	f7ff ff5f 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_TIM_Base_MspInit+0x114>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HAL_TIM_Base_MspInit+0x120>)
 80014e6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 80014ea:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 80014f2:	2240      	movs	r2, #64	; 0x40
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 80014fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001502:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 8001506:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800150a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 800150e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001512:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 8001516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 800151e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001522:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 800152c:	f000 fc5c 	bl	8001de8 <HAL_DMA_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_TIM_Base_MspInit+0xea>
    {
      Error_Handler();
 8001536:	f7ff ff2d 	bl	8001394 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 800154a:	639a      	str	r2, [r3, #56]	; 0x38
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_TIM_Base_MspInit+0x11c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40000400 	.word	0x40000400
 8001560:	40023800 	.word	0x40023800
 8001564:	20000070 	.word	0x20000070
 8001568:	40026088 	.word	0x40026088
 800156c:	200000d0 	.word	0x200000d0
 8001570:	40026070 	.word	0x40026070

08001574 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <HAL_TIM_MspPostInit+0xa4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d13b      	bne.n	800160e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_TIM_MspPostInit+0xa8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a1f      	ldr	r2, [pc, #124]	; (800161c <HAL_TIM_MspPostInit+0xa8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_TIM_MspPostInit+0xa8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_TIM_MspPostInit+0xa8>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <HAL_TIM_MspPostInit+0xa8>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_TIM_MspPostInit+0xa8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ce:	2340      	movs	r3, #64	; 0x40
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015de:	2302      	movs	r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_TIM_MspPostInit+0xac>)
 80015ea:	f000 ff6d 	bl	80024c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ee:	2320      	movs	r3, #32
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015fe:	2302      	movs	r3, #2
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_TIM_MspPostInit+0xb0>)
 800160a:	f000 ff5d 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40000400 	.word	0x40000400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 fa86 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Stream4_IRQHandler+0x10>)
 8001682:	f000 fcb7 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000d0 	.word	0x200000d0

08001690 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA1_Stream5_IRQHandler+0x10>)
 8001696:	f000 fcad 	bl	8001ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000070 	.word	0x20000070

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <_ZN7WS2812CC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDef>:
#include "ws2812c.h"

WS2812C::WS2812C(TIM_HandleTypeDef* htim, uint32_t tim_channel_x, DMA_HandleTypeDef* hdma){
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
    HTIM = htim;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	605a      	str	r2, [r3, #4]
    TIM_CHANNEL_X = tim_channel_x;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	701a      	strb	r2, [r3, #0]
    HDMA =hdma;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	609a      	str	r2, [r3, #8]
}
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_ZN7WS2812C7set_rgbEthhh>:

void WS2812C::set_rgb(uint16_t PIXEL_NUM, uint8_t red, uint8_t green, uint8_t blue){
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4603      	mov	r3, r0
 8001708:	807b      	strh	r3, [r7, #2]
 800170a:	460b      	mov	r3, r1
 800170c:	707b      	strb	r3, [r7, #1]
 800170e:	4613      	mov	r3, r2
 8001710:	703b      	strb	r3, [r7, #0]
	if(PIXEL_NUM<LED_NUM){
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	2b2f      	cmp	r3, #47	; 0x2f
 8001716:	d81a      	bhi.n	800174e <_ZN7WS2812C7set_rgbEthhh+0x56>
		rgb_buf[PIXEL_NUM][0]=green;
 8001718:	887a      	ldrh	r2, [r7, #2]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	440b      	add	r3, r1
 8001724:	330c      	adds	r3, #12
 8001726:	783a      	ldrb	r2, [r7, #0]
 8001728:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][1]=red;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	440b      	add	r3, r1
 8001736:	330d      	adds	r3, #13
 8001738:	787a      	ldrb	r2, [r7, #1]
 800173a:	701a      	strb	r2, [r3, #0]
		rgb_buf[PIXEL_NUM][2]=blue;
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	440b      	add	r3, r1
 8001748:	330e      	adds	r3, #14
 800174a:	7c3a      	ldrb	r2, [r7, #16]
 800174c:	701a      	strb	r2, [r3, #0]
	}
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_ZN7WS2812C7set_hsvEtsss>:

void WS2812C::set_hsv(uint16_t PIXEL_NUM, int16_t h , int16_t s, int16_t v){
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af02      	add	r7, sp, #8
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	817b      	strh	r3, [r7, #10]
 800176e:	460b      	mov	r3, r1
 8001770:	813b      	strh	r3, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
	uint8_t r, g, b;
	if(s == 0){
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10b      	bne.n	8001796 <_ZN7WS2812C7set_hsvEtsss+0x3a>
		r = g = b = v;
 800177e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001780:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001784:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800178c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001794:	e09c      	b.n	80018d0 <_ZN7WS2812C7set_hsvEtsss+0x174>
	}else{
		h = h * 6;
 8001796:	893b      	ldrh	r3, [r7, #8]
 8001798:	461a      	mov	r2, r3
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	813b      	strh	r3, [r7, #8]
		int i = h / 256;
 80017a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da00      	bge.n	80017ae <_ZN7WS2812C7set_hsvEtsss+0x52>
 80017ac:	33ff      	adds	r3, #255	; 0xff
 80017ae:	121b      	asrs	r3, r3, #8
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	623b      	str	r3, [r7, #32]
		int f = h % 256;
 80017b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80017b8:	425a      	negs	r2, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	bf58      	it	pl
 80017c0:	4253      	negpl	r3, r2
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	61fb      	str	r3, [r7, #28]
		int p = (v * (256 - s)) / 256;
 80017c6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80017ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017ce:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da00      	bge.n	80017dc <_ZN7WS2812C7set_hsvEtsss+0x80>
 80017da:	33ff      	adds	r3, #255	; 0xff
 80017dc:	121b      	asrs	r3, r3, #8
 80017de:	61bb      	str	r3, [r7, #24]
		int q = (v * (256 - (s * f) / 256)) / 256;
 80017e0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80017e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e8:	69f9      	ldr	r1, [r7, #28]
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da00      	bge.n	80017f4 <_ZN7WS2812C7set_hsvEtsss+0x98>
 80017f2:	33ff      	adds	r3, #255	; 0xff
 80017f4:	121b      	asrs	r3, r3, #8
 80017f6:	425b      	negs	r3, r3
 80017f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	da00      	bge.n	8001806 <_ZN7WS2812C7set_hsvEtsss+0xaa>
 8001804:	33ff      	adds	r3, #255	; 0xff
 8001806:	121b      	asrs	r3, r3, #8
 8001808:	617b      	str	r3, [r7, #20]
		int t = (v * (256 - (s * (256 - f)) / 256)) / 256;
 800180a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	69f9      	ldr	r1, [r7, #28]
 8001814:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8001818:	fb01 f303 	mul.w	r3, r1, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	da00      	bge.n	8001822 <_ZN7WS2812C7set_hsvEtsss+0xc6>
 8001820:	33ff      	adds	r3, #255	; 0xff
 8001822:	121b      	asrs	r3, r3, #8
 8001824:	425b      	negs	r3, r3
 8001826:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	da00      	bge.n	8001834 <_ZN7WS2812C7set_hsvEtsss+0xd8>
 8001832:	33ff      	adds	r3, #255	; 0xff
 8001834:	121b      	asrs	r3, r3, #8
 8001836:	613b      	str	r3, [r7, #16]

		switch (i) {
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	2b04      	cmp	r3, #4
 800183c:	d83e      	bhi.n	80018bc <_ZN7WS2812C7set_hsvEtsss+0x160>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <_ZN7WS2812C7set_hsvEtsss+0xe8>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	08001859 	.word	0x08001859
 8001848:	0800186d 	.word	0x0800186d
 800184c:	08001881 	.word	0x08001881
 8001850:	08001895 	.word	0x08001895
 8001854:	080018a9 	.word	0x080018a9
			case 0: r = v; g = t; b = p; break;
 8001858:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800186a:	e031      	b.n	80018d0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 1: r = q; g = v; b = p; break;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001872:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800187e:	e027      	b.n	80018d0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 2: r = p; g = v; b = t; break;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001886:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001892:	e01d      	b.n	80018d0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 3: r = p; g = q; b = v; break;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80018a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018a6:	e013      	b.n	80018d0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			case 4: r = t; g = p; b = v; break;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80018b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018ba:	e009      	b.n	80018d0 <_ZN7WS2812C7set_hsvEtsss+0x174>
			default: r = v; g = p;b = q; break;
 80018bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80018ce:	bf00      	nop
		}
	}
	set_rgb(PIXEL_NUM, r, g, b);
 80018d0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80018d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4603      	mov	r3, r0
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff ff08 	bl	80016f8 <_ZN7WS2812C7set_rgbEthhh>
}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <_ZN7WS2812C4showEv>:

void WS2812C::show(){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	pwm_buf_status = 1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_ZN7WS2812C7executeEv>:

void WS2812C::execute(){
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	if(pwm_buf_status==1){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191e:	f893 3684 	ldrb.w	r3, [r3, #1668]	; 0x684
 8001922:	2b01      	cmp	r3, #1
 8001924:	d179      	bne.n	8001a1a <_ZN7WS2812C7executeEv+0x10a>
		for(int i=0; i<RST; i++){
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2bf9      	cmp	r3, #249	; 0xf9
 800192e:	dc0a      	bgt.n	8001946 <_ZN7WS2812C7executeEv+0x36>
			pwm_buf[i]=0;
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3326      	adds	r3, #38	; 0x26
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
		for(int i=0; i<RST; i++){
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3301      	adds	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e7f1      	b.n	800192a <_ZN7WS2812C7executeEv+0x1a>
		}

		for(int i=0; i<LED_NUM; i++){
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	2b2f      	cmp	r3, #47	; 0x2f
 800194e:	dc52      	bgt.n	80019f6 <_ZN7WS2812C7executeEv+0xe6>
			for(int j=0; j<3; j++){
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b02      	cmp	r3, #2
 8001958:	dc49      	bgt.n	80019ee <_ZN7WS2812C7executeEv+0xde>
				for(int k=7; k>=0; k--){
 800195a:	2307      	movs	r3, #7
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db40      	blt.n	80019e6 <_ZN7WS2812C7executeEv+0xd6>
					int x=(rgb_buf[i][j]>>k)&1;
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	18ca      	adds	r2, r1, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	4413      	add	r3, r2
 8001974:	330c      	adds	r3, #12
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa42 f303 	asr.w	r3, r2, r3
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
					if(x==1){pwm_buf[RST+(i*24)+(j*8)+(7-k)]=HIGH;}
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d114      	bne.n	80019b6 <_ZN7WS2812C7executeEv+0xa6>
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	441a      	add	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	4413      	add	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	3326      	adds	r3, #38	; 0x26
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	2214      	movs	r2, #20
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	e013      	b.n	80019de <_ZN7WS2812C7executeEv+0xce>
					else{pwm_buf[RST+(i*24)+(j*8)+(7-k)]=LOW;}
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	441a      	add	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	f1c3 0307 	rsb	r3, r3, #7
 80019d0:	4413      	add	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	3326      	adds	r3, #38	; 0x26
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	220a      	movs	r2, #10
 80019dc:	605a      	str	r2, [r3, #4]
				for(int k=7; k>=0; k--){
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	e7bb      	b.n	800195e <_ZN7WS2812C7executeEv+0x4e>
			for(int j=0; j<3; j++){
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e7b2      	b.n	8001954 <_ZN7WS2812C7executeEv+0x44>
		for(int i=0; i<LED_NUM; i++){
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	e7a9      	b.n	800194a <_ZN7WS2812C7executeEv+0x3a>
				}
			}
		}

		HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6858      	ldr	r0, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001a06:	f240 537a 	movw	r3, #1402	; 0x57a
 8001a0a:	f001 fd4b 	bl	80034a4 <HAL_TIM_PWM_Start_DMA>
		pwm_buf_status = 0;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
		// (uint32_t*)

	}else{

	}
}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZN7WS2812C4initEv>:

void WS2812C::init(){
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
	for(int i=0; i<RST; i++){
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2bf9      	cmp	r3, #249	; 0xf9
 8001a32:	dc0a      	bgt.n	8001a4a <_ZN7WS2812C4initEv+0x28>
	        pwm_buf[i]=0;
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3326      	adds	r3, #38	; 0x26
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
	for(int i=0; i<RST; i++){
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e7f1      	b.n	8001a2e <_ZN7WS2812C4initEv+0xc>
	}

	for(int i=RST; i<LED_NUM*24; i++){
 8001a4a:	23fa      	movs	r3, #250	; 0xfa
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001a54:	da0a      	bge.n	8001a6c <_ZN7WS2812C4initEv+0x4a>
		pwm_buf[i]=LOW;
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	3326      	adds	r3, #38	; 0x26
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	220a      	movs	r2, #10
 8001a62:	605a      	str	r2, [r3, #4]
	for(int i=RST; i<LED_NUM*24; i++){
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	e7f0      	b.n	8001a4e <_ZN7WS2812C4initEv+0x2c>
	}

	HAL_TIM_PWM_Start_DMA(HTIM, TIM_CHANNEL_X, pwm_buf, RST+(LED_NUM*24));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6858      	ldr	r0, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8001a7c:	f240 537a 	movw	r3, #1402	; 0x57a
 8001a80:	f001 fd10 	bl	80034a4 <HAL_TIM_PWM_Start_DMA>
	// (uint32_t*)
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a92:	490e      	ldr	r1, [pc, #56]	; (8001acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa8:	4c0b      	ldr	r4, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab6:	f7ff fdf5 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f003 fa0f 	bl	8004edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7ff fa81 	bl	8000fc4 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001acc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ad0:	08005348 	.word	0x08005348
  ldr r2, =_sbss
 8001ad4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ad8:	20002e50 	.word	0x20002e50

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_Init+0x40>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <HAL_Init+0x40>)
 8001af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x40>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f000 f92b 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fc74 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f943 	bl	8001dce <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 f90b 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20002e4c 	.word	0x20002e4c

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20002e4c 	.word	0x20002e4c

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db0b      	blt.n	8001c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f003 021f 	and.w	r2, r3, #31
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <__NVIC_EnableIRQ+0x38>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	2001      	movs	r0, #1
 8001c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff8e 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff29 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff3e 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff8e 	bl	8001cb8 <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5d 	bl	8001c64 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff31 	bl	8001c28 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff feda 	bl	8001bac <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e099      	b.n	8001f38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0201 	bic.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e24:	e00f      	b.n	8001e46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e26:	f7ff fec1 	bl	8001bac <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d908      	bls.n	8001e46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e078      	b.n	8001f38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e8      	bne.n	8001e26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_DMA_Init+0x158>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d107      	bne.n	8001eb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f023 0307 	bic.w	r3, r3, #7
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d117      	bne.n	8001f0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00e      	beq.n	8001f0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fa6f 	bl	80023d0 <DMA_CheckFifoParam>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2240      	movs	r2, #64	; 0x40
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f06:	2301      	movs	r3, #1
 8001f08:	e016      	b.n	8001f38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fa26 	bl	8002364 <DMA_CalcBaseAndBitshift>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	223f      	movs	r2, #63	; 0x3f
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	f010803f 	.word	0xf010803f

08001f44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_DMA_Start_IT+0x26>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e040      	b.n	8001fec <HAL_DMA_Start_IT+0xa8>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d12f      	bne.n	8001fde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f9b8 	bl	8002308 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	223f      	movs	r2, #63	; 0x3f
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0216 	orr.w	r2, r2, #22
 8001fb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0208 	orr.w	r2, r2, #8
 8001fca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e005      	b.n	8001fea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002000:	4b8e      	ldr	r3, [pc, #568]	; (800223c <HAL_DMA_IRQHandler+0x248>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a8e      	ldr	r2, [pc, #568]	; (8002240 <HAL_DMA_IRQHandler+0x24c>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a9b      	lsrs	r3, r3, #10
 800200c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	2208      	movs	r2, #8
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2208      	movs	r2, #8
 800204e:	409a      	lsls	r2, r3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002064:	2201      	movs	r2, #1
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209a:	2204      	movs	r2, #4
 800209c:	409a      	lsls	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2204      	movs	r2, #4
 80020ba:	409a      	lsls	r2, r3
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2210      	movs	r2, #16
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d043      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03c      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2210      	movs	r2, #16
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d018      	beq.n	8002136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d108      	bne.n	8002124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
 8002122:	e01f      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01b      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
 8002134:	e016      	b.n	8002164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0208 	bic.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2220      	movs	r2, #32
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 808f 	beq.w	8002294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8087 	beq.w	8002294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2220      	movs	r2, #32
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b05      	cmp	r3, #5
 800219c:	d136      	bne.n	800220c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0216 	bic.w	r2, r2, #22
 80021ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d103      	bne.n	80021ce <HAL_DMA_IRQHandler+0x1da>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0208 	bic.w	r2, r2, #8
 80021dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	223f      	movs	r2, #63	; 0x3f
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d07e      	beq.n	8002300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
        }
        return;
 800220a:	e079      	b.n	8002300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10d      	bne.n	8002244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	2b00      	cmp	r3, #0
 800222e:	d031      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
 8002238:	e02c      	b.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
 800223a:	bf00      	nop
 800223c:	20000000 	.word	0x20000000
 8002240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d023      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e01e      	b.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0210 	bic.w	r2, r2, #16
 8002272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	2b00      	cmp	r3, #0
 800229a:	d032      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d022      	beq.n	80022ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d307      	bcc.n	80022dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f2      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x2cc>
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e000      	b.n	8002302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002300:	bf00      	nop
    }
  }
}
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002324:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b40      	cmp	r3, #64	; 0x40
 8002334:	d108      	bne.n	8002348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002346:	e007      	b.n	8002358 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3b10      	subs	r3, #16
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <DMA_CalcBaseAndBitshift+0x64>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237e:	4a13      	ldr	r2, [pc, #76]	; (80023cc <DMA_CalcBaseAndBitshift+0x68>)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d909      	bls.n	80023a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	659a      	str	r2, [r3, #88]	; 0x58
 80023a4:	e007      	b.n	80023b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	aaaaaaab 	.word	0xaaaaaaab
 80023cc:	08004f5c 	.word	0x08004f5c

080023d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d856      	bhi.n	800249e <DMA_CheckFifoParam+0xce>
 80023f0:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <DMA_CheckFifoParam+0x28>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800241b 	.word	0x0800241b
 8002400:	08002409 	.word	0x08002409
 8002404:	0800249f 	.word	0x0800249f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d046      	beq.n	80024a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e043      	b.n	80024a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002422:	d140      	bne.n	80024a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002428:	e03d      	b.n	80024a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	d121      	bne.n	8002478 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d837      	bhi.n	80024aa <DMA_CheckFifoParam+0xda>
 800243a:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <DMA_CheckFifoParam+0x70>)
 800243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002440:	08002451 	.word	0x08002451
 8002444:	08002457 	.word	0x08002457
 8002448:	08002451 	.word	0x08002451
 800244c:	08002469 	.word	0x08002469
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e030      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d025      	beq.n	80024ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002466:	e022      	b.n	80024ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002470:	d11f      	bne.n	80024b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002476:	e01c      	b.n	80024b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d903      	bls.n	8002486 <DMA_CheckFifoParam+0xb6>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d003      	beq.n	800248c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002484:	e018      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
      break;
 800248a:	e015      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00e      	beq.n	80024b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e00b      	b.n	80024b6 <DMA_CheckFifoParam+0xe6>
      break;
 800249e:	bf00      	nop
 80024a0:	e00a      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e008      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
 80024a8:	e006      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024aa:	bf00      	nop
 80024ac:	e004      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
 80024b0:	e002      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <DMA_CheckFifoParam+0xe8>
      break;
 80024b6:	bf00      	nop
    }
  } 
  
  return status; 
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e165      	b.n	80027b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8154 	bne.w	80027aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ae 	beq.w	80027aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_GPIO_Init+0x300>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a5c      	ldr	r2, [pc, #368]	; (80027c8 <HAL_GPIO_Init+0x300>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_GPIO_Init+0x300>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266a:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_GPIO_Init+0x304>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	089b      	lsrs	r3, r3, #2
 8002670:	3302      	adds	r3, #2
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	220f      	movs	r2, #15
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_GPIO_Init+0x308>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d025      	beq.n	80026e2 <HAL_GPIO_Init+0x21a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_GPIO_Init+0x30c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01f      	beq.n	80026de <HAL_GPIO_Init+0x216>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x310>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0x212>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_GPIO_Init+0x314>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0x20e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_GPIO_Init+0x318>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00d      	beq.n	80026d2 <HAL_GPIO_Init+0x20a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x31c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x206>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a49      	ldr	r2, [pc, #292]	; (80027e8 <HAL_GPIO_Init+0x320>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_GPIO_Init+0x202>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00c      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e00a      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026ce:	2305      	movs	r3, #5
 80026d0:	e008      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026d6:	2303      	movs	r3, #3
 80026d8:	e004      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026da:	2302      	movs	r3, #2
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_GPIO_Init+0x21c>
 80026e2:	2300      	movs	r3, #0
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f002 0203 	and.w	r2, r2, #3
 80026ea:	0092      	lsls	r2, r2, #2
 80026ec:	4093      	lsls	r3, r2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f4:	4935      	ldr	r1, [pc, #212]	; (80027cc <HAL_GPIO_Init+0x304>)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002726:	4a31      	ldr	r2, [pc, #196]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800272c:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_GPIO_Init+0x324>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_GPIO_Init+0x324>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_GPIO_Init+0x324>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_GPIO_Init+0x324>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	f67f ae96 	bls.w	80024e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0cc      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d90c      	bls.n	800282c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d044      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e067      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4934      	ldr	r1, [pc, #208]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7ff f964 	bl	8001bac <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f960 	bl	8001bac <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d20c      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8c4 	bl	8001b24 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08004f4c 	.word	0x08004f4c
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0ae      	sub	sp, #184	; 0xb8
 80029c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4bcb      	ldr	r3, [pc, #812]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	f200 8204 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x43c>
 80029f0:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002df9 	.word	0x08002df9
 8002a00:	08002df9 	.word	0x08002df9
 8002a04:	08002df9 	.word	0x08002df9
 8002a08:	08002a35 	.word	0x08002a35
 8002a0c:	08002df9 	.word	0x08002df9
 8002a10:	08002df9 	.word	0x08002df9
 8002a14:	08002df9 	.word	0x08002df9
 8002a18:	08002a3d 	.word	0x08002a3d
 8002a1c:	08002df9 	.word	0x08002df9
 8002a20:	08002df9 	.word	0x08002df9
 8002a24:	08002df9 	.word	0x08002df9
 8002a28:	08002c2d 	.word	0x08002c2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4bb9      	ldr	r3, [pc, #740]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a32:	e1e5      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a34:	4bb7      	ldr	r3, [pc, #732]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a3a:	e1e1      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3c:	4bb4      	ldr	r3, [pc, #720]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a48:	4bb1      	ldr	r3, [pc, #708]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d071      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a54:	4bae      	ldr	r3, [pc, #696]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	462b      	mov	r3, r5
 8002a7e:	f04f 0000 	mov.w	r0, #0
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	0159      	lsls	r1, r3, #5
 8002a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a8c:	0150      	lsls	r0, r2, #5
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4621      	mov	r1, r4
 8002a94:	1a51      	subs	r1, r2, r1
 8002a96:	6439      	str	r1, [r7, #64]	; 0x40
 8002a98:	4629      	mov	r1, r5
 8002a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002aac:	4649      	mov	r1, r9
 8002aae:	018b      	lsls	r3, r1, #6
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	018a      	lsls	r2, r1, #6
 8002aba:	4641      	mov	r1, r8
 8002abc:	1a51      	subs	r1, r2, r1
 8002abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	00cb      	lsls	r3, r1, #3
 8002ad8:	4641      	mov	r1, r8
 8002ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ade:	4641      	mov	r1, r8
 8002ae0:	00ca      	lsls	r2, r1, #3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4622      	mov	r2, r4
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
 8002aee:	462b      	mov	r3, r5
 8002af0:	460a      	mov	r2, r1
 8002af2:	eb42 0303 	adc.w	r3, r2, r3
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b04:	4629      	mov	r1, r5
 8002b06:	028b      	lsls	r3, r1, #10
 8002b08:	4621      	mov	r1, r4
 8002b0a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b0e:	4621      	mov	r1, r4
 8002b10:	028a      	lsls	r2, r1, #10
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b28:	f7fd ff8c 	bl	8000a44 <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b36:	e067      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b38:	4b75      	ldr	r3, [pc, #468]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b50:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b52:	2300      	movs	r3, #0
 8002b54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b5a:	4622      	mov	r2, r4
 8002b5c:	462b      	mov	r3, r5
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	0159      	lsls	r1, r3, #5
 8002b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6c:	0150      	lsls	r0, r2, #5
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4621      	mov	r1, r4
 8002b74:	1a51      	subs	r1, r2, r1
 8002b76:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b78:	4629      	mov	r1, r5
 8002b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b8c:	4649      	mov	r1, r9
 8002b8e:	018b      	lsls	r3, r1, #6
 8002b90:	4641      	mov	r1, r8
 8002b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b96:	4641      	mov	r1, r8
 8002b98:	018a      	lsls	r2, r1, #6
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bba:	4692      	mov	sl, r2
 8002bbc:	469b      	mov	fp, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc4:	623b      	str	r3, [r7, #32]
 8002bc6:	462b      	mov	r3, r5
 8002bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8002bf4:	677a      	str	r2, [r7, #116]	; 0x74
 8002bf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bfa:	f7fd ff23 	bl	8000a44 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4613      	mov	r3, r2
 8002c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c2a:	e0e9      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d069      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b32      	ldr	r3, [pc, #200]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c56:	663b      	str	r3, [r7, #96]	; 0x60
 8002c58:	2300      	movs	r3, #0
 8002c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c60:	4622      	mov	r2, r4
 8002c62:	462b      	mov	r3, r5
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	0159      	lsls	r1, r3, #5
 8002c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c72:	0150      	lsls	r0, r2, #5
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4621      	mov	r1, r4
 8002c7a:	1a51      	subs	r1, r2, r1
 8002c7c:	61b9      	str	r1, [r7, #24]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	eb63 0301 	sbc.w	r3, r3, r1
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c92:	4659      	mov	r1, fp
 8002c94:	018b      	lsls	r3, r1, #6
 8002c96:	4651      	mov	r1, sl
 8002c98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	018a      	lsls	r2, r1, #6
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca6:	4659      	mov	r1, fp
 8002ca8:	eb63 0901 	sbc.w	r9, r3, r1
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc0:	4690      	mov	r8, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	eb18 0303 	adds.w	r3, r8, r3
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	462b      	mov	r3, r5
 8002cce:	eb49 0303 	adc.w	r3, r9, r3
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	028b      	lsls	r3, r1, #10
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cea:	4621      	mov	r1, r4
 8002cec:	028a      	lsls	r2, r1, #10
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cfa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002cfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d00:	f7fd fea0 	bl	8000a44 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d0e:	e063      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x41c>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d18:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x454>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	2200      	movs	r2, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	4611      	mov	r1, r2
 8002d24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d28:	653b      	str	r3, [r7, #80]	; 0x50
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	657b      	str	r3, [r7, #84]	; 0x54
 8002d2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d32:	4642      	mov	r2, r8
 8002d34:	464b      	mov	r3, r9
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	0159      	lsls	r1, r3, #5
 8002d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d44:	0150      	lsls	r0, r2, #5
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	1a51      	subs	r1, r2, r1
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	4649      	mov	r1, r9
 8002d52:	eb63 0301 	sbc.w	r3, r3, r1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d64:	4659      	mov	r1, fp
 8002d66:	018b      	lsls	r3, r1, #6
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6e:	4651      	mov	r1, sl
 8002d70:	018a      	lsls	r2, r1, #6
 8002d72:	4651      	mov	r1, sl
 8002d74:	1a54      	subs	r4, r2, r1
 8002d76:	4659      	mov	r1, fp
 8002d78:	eb63 0501 	sbc.w	r5, r3, r1
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	00eb      	lsls	r3, r5, #3
 8002d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	4614      	mov	r4, r2
 8002d8e:	461d      	mov	r5, r3
 8002d90:	4643      	mov	r3, r8
 8002d92:	18e3      	adds	r3, r4, r3
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	464b      	mov	r3, r9
 8002d98:	eb45 0303 	adc.w	r3, r5, r3
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002daa:	4629      	mov	r1, r5
 8002dac:	028b      	lsls	r3, r1, #10
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db4:	4621      	mov	r1, r4
 8002db6:	028a      	lsls	r2, r1, #10
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dca:	f7fd fe3b 	bl	8000a44 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x454>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0f1b      	lsrs	r3, r3, #28
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002df6:	e003      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	37b8      	adds	r7, #184	; 0xb8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	00f42400 	.word	0x00f42400

08002e18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e28d      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8083 	beq.w	8002f3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e38:	4b94      	ldr	r3, [pc, #592]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d019      	beq.n	8002e78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e44:	4b91      	ldr	r3, [pc, #580]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e50:	4b8e      	ldr	r3, [pc, #568]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b8b      	ldr	r3, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b84      	ldr	r3, [pc, #528]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x124>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e25a      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x90>
 8002e9a:	4b7c      	ldr	r3, [pc, #496]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7b      	ldr	r2, [pc, #492]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xcc>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0xb4>
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a72      	ldr	r2, [pc, #456]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xcc>
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6e      	ldr	r2, [pc, #440]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6b      	ldr	r2, [pc, #428]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fe5e 	bl	8001bac <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fe5a 	bl	8001bac <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e21f      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xdc>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe4a 	bl	8001bac <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fe46 	bl	8001bac <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e20b      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x104>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06f      	beq.n	800302a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f4a:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f56:	4b4d      	ldr	r3, [pc, #308]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x186>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1d3      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4937      	ldr	r1, [pc, #220]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_OscConfig+0x278>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fdf3 	bl	8001bac <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fdef 	bl	8001bac <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1b4      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4925      	ldr	r1, [pc, #148]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x278>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fdd2 	bl	8001bac <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fdce 	bl	8001bac <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e193      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d036      	beq.n	80030a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCC_OscConfig+0x27c>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fdb2 	bl	8001bac <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fdae 	bl	8001bac <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e173      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8003060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x234>
 800306a:	e01b      	b.n	80030a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_OscConfig+0x27c>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe fd9b 	bl	8001bac <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	e00e      	b.n	8003098 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307a:	f7fe fd97 	bl	8001bac <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d907      	bls.n	8003098 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e15c      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
 800308c:	40023800 	.word	0x40023800
 8003090:	42470000 	.word	0x42470000
 8003094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	4b8a      	ldr	r3, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ea      	bne.n	800307a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8097 	beq.w	80031e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b6:	4b83      	ldr	r3, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b7f      	ldr	r3, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a7e      	ldr	r2, [pc, #504]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fd57 	bl	8001bac <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fe fd53 	bl	8001bac <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e118      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x31e>
 8003128:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	e01c      	b.n	8003170 <HAL_RCC_OscConfig+0x358>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x340>
 800313e:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a60      	ldr	r2, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0x358>
 8003158:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a59      	ldr	r2, [pc, #356]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe fd18 	bl	8001bac <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fe fd14 	bl	8001bac <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0d7      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ee      	beq.n	8003180 <HAL_RCC_OscConfig+0x368>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fd02 	bl	8001bac <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fe fcfe 	bl	8001bac <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0c1      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ee      	bne.n	80031ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80ad 	beq.w	8003344 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d060      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d145      	bne.n	800328a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_RCC_OscConfig+0x4b4>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fcd2 	bl	8001bac <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fcce 	bl	8001bac <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e093      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4b4>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe fca3 	bl	8001bac <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fc9f 	bl	8001bac <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e064      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x452>
 8003288:	e05c      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x4b4>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fc8c 	bl	8001bac <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fc88 	bl	8001bac <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04d      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x480>
 80032b6:	e045      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e040      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_RCC_OscConfig+0x538>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d030      	beq.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d129      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d122      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	4293      	cmp	r3, r2
 800330a:	d119      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d10f      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e041      	b.n	80033ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7fe f868 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f000 fcbc 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e041      	b.n	8003488 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f839 	bl	8003490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 fc6d 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e022      	b.n	8003516 <HAL_TIM_PWM_Start_DMA+0x72>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d109      	bne.n	80034ea <HAL_TIM_PWM_Start_DMA+0x46>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e015      	b.n	8003516 <HAL_TIM_PWM_Start_DMA+0x72>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d109      	bne.n	8003504 <HAL_TIM_PWM_Start_DMA+0x60>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e008      	b.n	8003516 <HAL_TIM_PWM_Start_DMA+0x72>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	e171      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_TIM_PWM_Start_DMA+0x94>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e022      	b.n	800357e <HAL_TIM_PWM_Start_DMA+0xda>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d109      	bne.n	8003552 <HAL_TIM_PWM_Start_DMA+0xae>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e015      	b.n	800357e <HAL_TIM_PWM_Start_DMA+0xda>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d109      	bne.n	800356c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e008      	b.n	800357e <HAL_TIM_PWM_Start_DMA+0xda>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d024      	beq.n	80035cc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_PWM_Start_DMA+0xee>
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e137      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	e016      	b.n	80035d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	e00e      	b.n	80035d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c0:	e006      	b.n	80035d0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ca:	e001      	b.n	80035d0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e118      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	f200 80ae 	bhi.w	8003734 <HAL_TIM_PWM_Start_DMA+0x290>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	08003735 	.word	0x08003735
 80035e8:	08003735 	.word	0x08003735
 80035ec:	08003735 	.word	0x08003735
 80035f0:	0800365d 	.word	0x0800365d
 80035f4:	08003735 	.word	0x08003735
 80035f8:	08003735 	.word	0x08003735
 80035fc:	08003735 	.word	0x08003735
 8003600:	080036a5 	.word	0x080036a5
 8003604:	08003735 	.word	0x08003735
 8003608:	08003735 	.word	0x08003735
 800360c:	08003735 	.word	0x08003735
 8003610:	080036ed 	.word	0x080036ed
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	4a7c      	ldr	r2, [pc, #496]	; (800380c <HAL_TIM_PWM_Start_DMA+0x368>)
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	4a7b      	ldr	r2, [pc, #492]	; (8003810 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	4a7a      	ldr	r2, [pc, #488]	; (8003814 <HAL_TIM_PWM_Start_DMA+0x370>)
 800362a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3334      	adds	r3, #52	; 0x34
 8003638:	461a      	mov	r2, r3
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	f7fe fc82 	bl	8001f44 <HAL_DMA_Start_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0db      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003658:	60da      	str	r2, [r3, #12]
      break;
 800365a:	e06e      	b.n	800373a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	4a6a      	ldr	r2, [pc, #424]	; (800380c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	4a69      	ldr	r2, [pc, #420]	; (8003810 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	4a68      	ldr	r2, [pc, #416]	; (8003814 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003672:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3338      	adds	r3, #56	; 0x38
 8003680:	461a      	mov	r2, r3
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	f7fe fc5e 	bl	8001f44 <HAL_DMA_Start_IT>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0b7      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036a0:	60da      	str	r2, [r3, #12]
      break;
 80036a2:	e04a      	b.n	800373a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a58      	ldr	r2, [pc, #352]	; (800380c <HAL_TIM_PWM_Start_DMA+0x368>)
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a57      	ldr	r2, [pc, #348]	; (8003810 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_TIM_PWM_Start_DMA+0x370>)
 80036ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	333c      	adds	r3, #60	; 0x3c
 80036c8:	461a      	mov	r2, r3
 80036ca:	887b      	ldrh	r3, [r7, #2]
 80036cc:	f7fe fc3a 	bl	8001f44 <HAL_DMA_Start_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e093      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e8:	60da      	str	r2, [r3, #12]
      break;
 80036ea:	e026      	b.n	800373a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4a46      	ldr	r2, [pc, #280]	; (800380c <HAL_TIM_PWM_Start_DMA+0x368>)
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4a44      	ldr	r2, [pc, #272]	; (8003814 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003702:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3340      	adds	r3, #64	; 0x40
 8003710:	461a      	mov	r2, r3
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	f7fe fc16 	bl	8001f44 <HAL_DMA_Start_IT>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e06f      	b.n	8003802 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003730:	60da      	str	r2, [r3, #12]
      break;
 8003732:	e002      	b.n	800373a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
      break;
 8003738:	bf00      	nop
  }

  if (status == HAL_OK)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d15f      	bne.n	8003800 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2201      	movs	r2, #1
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fdcb 	bl	80042e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a31      	ldr	r2, [pc, #196]	; (8003818 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_TIM_PWM_Start_DMA+0x378>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a25      	ldr	r2, [pc, #148]	; (8003818 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d022      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d01d      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d018      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_TIM_PWM_Start_DMA+0x380>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <HAL_TIM_PWM_Start_DMA+0x384>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_TIM_PWM_Start_DMA+0x378>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_TIM_PWM_Start_DMA+0x388>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_TIM_PWM_Start_DMA+0x328>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d111      	bne.n	80037f0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d010      	beq.n	8003800 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	e007      	b.n	8003800 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	08003c01 	.word	0x08003c01
 8003810:	08003ca9 	.word	0x08003ca9
 8003814:	08003b6f 	.word	0x08003b6f
 8003818:	40010000 	.word	0x40010000
 800381c:	40010400 	.word	0x40010400
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40014000 	.word	0x40014000
 8003830:	40001800 	.word	0x40001800

08003834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0ae      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	f200 809f 	bhi.w	80039a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	0800389d 	.word	0x0800389d
 800386c:	080039a1 	.word	0x080039a1
 8003870:	080039a1 	.word	0x080039a1
 8003874:	080039a1 	.word	0x080039a1
 8003878:	080038dd 	.word	0x080038dd
 800387c:	080039a1 	.word	0x080039a1
 8003880:	080039a1 	.word	0x080039a1
 8003884:	080039a1 	.word	0x080039a1
 8003888:	0800391f 	.word	0x0800391f
 800388c:	080039a1 	.word	0x080039a1
 8003890:	080039a1 	.word	0x080039a1
 8003894:	080039a1 	.word	0x080039a1
 8003898:	0800395f 	.word	0x0800395f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fad4 	bl	8003e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	619a      	str	r2, [r3, #24]
      break;
 80038da:	e064      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb24 	bl	8003f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6999      	ldr	r1, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	021a      	lsls	r2, r3, #8
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	619a      	str	r2, [r3, #24]
      break;
 800391c:	e043      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fb79 	bl	800401c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0208 	orr.w	r2, r2, #8
 8003938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0204 	bic.w	r2, r2, #4
 8003948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69d9      	ldr	r1, [r3, #28]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	61da      	str	r2, [r3, #28]
      break;
 800395c:	e023      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fbcd 	bl	8004104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69d9      	ldr	r1, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	021a      	lsls	r2, r3, #8
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	61da      	str	r2, [r3, #28]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      break;
 80039a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0b4      	b.n	8003b3e <HAL_TIM_ConfigClockSource+0x186>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d03e      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0xd4>
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a12:	f200 8087 	bhi.w	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	f000 8086 	beq.w	8003b2a <HAL_TIM_ConfigClockSource+0x172>
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	d87f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b70      	cmp	r3, #112	; 0x70
 8003a26:	d01a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xa6>
 8003a28:	2b70      	cmp	r3, #112	; 0x70
 8003a2a:	d87b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b60      	cmp	r3, #96	; 0x60
 8003a2e:	d050      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a30:	2b60      	cmp	r3, #96	; 0x60
 8003a32:	d877      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b50      	cmp	r3, #80	; 0x50
 8003a36:	d03c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a38:	2b50      	cmp	r3, #80	; 0x50
 8003a3a:	d873      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d058      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d86f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b30      	cmp	r3, #48	; 0x30
 8003a46:	d064      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b30      	cmp	r3, #48	; 0x30
 8003a4a:	d86b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d060      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d867      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d05a      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	e062      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f000 fc19 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	609a      	str	r2, [r3, #8]
      break;
 8003a8a:	e04f      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f000 fc02 	bl	80042a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e03c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 fb76 	bl	80041b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2150      	movs	r1, #80	; 0x50
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fbcf 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e02c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 fb95 	bl	800420e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2160      	movs	r1, #96	; 0x60
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fbbf 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003af0:	e01c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fb56 	bl	80041b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fbaf 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003b10:	e00c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f000 fba6 	bl	800426e <TIM_ITRx_SetConfig>
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d107      	bne.n	8003b96 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b94:	e02a      	b.n	8003bec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d107      	bne.n	8003bb0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bae:	e01d      	b.n	8003bec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d107      	bne.n	8003bca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc8:	e010      	b.n	8003bec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d107      	bne.n	8003be4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be2:	e003      	b.n	8003bec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff ffb4 	bl	8003b5a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d10b      	bne.n	8003c30 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d136      	bne.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c2e:	e031      	b.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d10b      	bne.n	8003c52 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d125      	bne.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c50:	e020      	b.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d10b      	bne.n	8003c74 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d114      	bne.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c72:	e00f      	b.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10a      	bne.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2208      	movs	r2, #8
 8003c82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7fd f983 	bl	8000fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d103      	bne.n	8003cc8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	771a      	strb	r2, [r3, #28]
 8003cc6:	e019      	b.n	8003cfc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d103      	bne.n	8003cda <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	771a      	strb	r2, [r3, #28]
 8003cd8:	e010      	b.n	8003cfc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d103      	bne.n	8003cec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	771a      	strb	r2, [r3, #28]
 8003cea:	e007      	b.n	8003cfc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d102      	bne.n	8003cfc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff ff22 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a40      	ldr	r2, [pc, #256]	; (8003e24 <TIM_Base_SetConfig+0x114>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d00f      	beq.n	8003d50 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3d      	ldr	r2, [pc, #244]	; (8003e28 <TIM_Base_SetConfig+0x118>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3c      	ldr	r2, [pc, #240]	; (8003e2c <TIM_Base_SetConfig+0x11c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3b      	ldr	r2, [pc, #236]	; (8003e30 <TIM_Base_SetConfig+0x120>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3a      	ldr	r2, [pc, #232]	; (8003e34 <TIM_Base_SetConfig+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d108      	bne.n	8003d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <TIM_Base_SetConfig+0x114>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02b      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d70:	d027      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <TIM_Base_SetConfig+0x118>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d023      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <TIM_Base_SetConfig+0x11c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01f      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <TIM_Base_SetConfig+0x120>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01b      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <TIM_Base_SetConfig+0x124>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d017      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <TIM_Base_SetConfig+0x128>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a27      	ldr	r2, [pc, #156]	; (8003e3c <TIM_Base_SetConfig+0x12c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00f      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <TIM_Base_SetConfig+0x130>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <TIM_Base_SetConfig+0x134>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <TIM_Base_SetConfig+0x138>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a23      	ldr	r2, [pc, #140]	; (8003e4c <TIM_Base_SetConfig+0x13c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <TIM_Base_SetConfig+0x114>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0xf8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <TIM_Base_SetConfig+0x124>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	615a      	str	r2, [r3, #20]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	40010400 	.word	0x40010400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800
 8003e44:	40001800 	.word	0x40001800
 8003e48:	40001c00 	.word	0x40001c00
 8003e4c:	40002000 	.word	0x40002000

08003e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f023 0302 	bic.w	r3, r3, #2
 8003e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <TIM_OC1_SetConfig+0xd8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC1_SetConfig+0x64>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <TIM_OC1_SetConfig+0xdc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10c      	bne.n	8003ece <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0308 	bic.w	r3, r3, #8
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a15      	ldr	r2, [pc, #84]	; (8003f28 <TIM_OC1_SetConfig+0xd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_OC1_SetConfig+0x8e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <TIM_OC1_SetConfig+0xdc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d111      	bne.n	8003f02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	621a      	str	r2, [r3, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40010400 	.word	0x40010400

08003f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0210 	bic.w	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0320 	bic.w	r3, r3, #32
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a22      	ldr	r2, [pc, #136]	; (8004014 <TIM_OC2_SetConfig+0xe4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC2_SetConfig+0x68>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a21      	ldr	r2, [pc, #132]	; (8004018 <TIM_OC2_SetConfig+0xe8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10d      	bne.n	8003fb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a17      	ldr	r2, [pc, #92]	; (8004014 <TIM_OC2_SetConfig+0xe4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC2_SetConfig+0x94>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a16      	ldr	r2, [pc, #88]	; (8004018 <TIM_OC2_SetConfig+0xe8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d113      	bne.n	8003fec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	40010400 	.word	0x40010400

0800401c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0303 	bic.w	r3, r3, #3
 8004052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a21      	ldr	r2, [pc, #132]	; (80040fc <TIM_OC3_SetConfig+0xe0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_OC3_SetConfig+0x66>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a20      	ldr	r2, [pc, #128]	; (8004100 <TIM_OC3_SetConfig+0xe4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10d      	bne.n	800409e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a16      	ldr	r2, [pc, #88]	; (80040fc <TIM_OC3_SetConfig+0xe0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_OC3_SetConfig+0x92>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <TIM_OC3_SetConfig+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d113      	bne.n	80040d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40010000 	.word	0x40010000
 8004100:	40010400 	.word	0x40010400

08004104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800414e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <TIM_OC4_SetConfig+0xa4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_OC4_SetConfig+0x68>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a11      	ldr	r2, [pc, #68]	; (80041ac <TIM_OC4_SetConfig+0xa8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d109      	bne.n	8004180 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	019b      	lsls	r3, r3, #6
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40010400 	.word	0x40010400

080041b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 030a 	bic.w	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b087      	sub	sp, #28
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	031b      	lsls	r3, r3, #12
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	f043 0307 	orr.w	r3, r3, #7
 8004290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e05a      	b.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d01d      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10c      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40010400 	.word	0x40010400
 8004420:	40014000 	.word	0x40014000
 8004424:	40001800 	.word	0x40001800

08004428 <cosf>:
 8004428:	ee10 3a10 	vmov	r3, s0
 800442c:	b507      	push	{r0, r1, r2, lr}
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <cosf+0x80>)
 8004430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004434:	4293      	cmp	r3, r2
 8004436:	dc06      	bgt.n	8004446 <cosf+0x1e>
 8004438:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80044ac <cosf+0x84>
 800443c:	b003      	add	sp, #12
 800443e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004442:	f000 b971 	b.w	8004728 <__kernel_cosf>
 8004446:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800444a:	db04      	blt.n	8004456 <cosf+0x2e>
 800444c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004450:	b003      	add	sp, #12
 8004452:	f85d fb04 	ldr.w	pc, [sp], #4
 8004456:	4668      	mov	r0, sp
 8004458:	f000 f82a 	bl	80044b0 <__ieee754_rem_pio2f>
 800445c:	f000 0003 	and.w	r0, r0, #3
 8004460:	2801      	cmp	r0, #1
 8004462:	d009      	beq.n	8004478 <cosf+0x50>
 8004464:	2802      	cmp	r0, #2
 8004466:	d010      	beq.n	800448a <cosf+0x62>
 8004468:	b9b0      	cbnz	r0, 8004498 <cosf+0x70>
 800446a:	eddd 0a01 	vldr	s1, [sp, #4]
 800446e:	ed9d 0a00 	vldr	s0, [sp]
 8004472:	f000 f959 	bl	8004728 <__kernel_cosf>
 8004476:	e7eb      	b.n	8004450 <cosf+0x28>
 8004478:	eddd 0a01 	vldr	s1, [sp, #4]
 800447c:	ed9d 0a00 	vldr	s0, [sp]
 8004480:	f000 fc28 	bl	8004cd4 <__kernel_sinf>
 8004484:	eeb1 0a40 	vneg.f32	s0, s0
 8004488:	e7e2      	b.n	8004450 <cosf+0x28>
 800448a:	eddd 0a01 	vldr	s1, [sp, #4]
 800448e:	ed9d 0a00 	vldr	s0, [sp]
 8004492:	f000 f949 	bl	8004728 <__kernel_cosf>
 8004496:	e7f5      	b.n	8004484 <cosf+0x5c>
 8004498:	eddd 0a01 	vldr	s1, [sp, #4]
 800449c:	ed9d 0a00 	vldr	s0, [sp]
 80044a0:	2001      	movs	r0, #1
 80044a2:	f000 fc17 	bl	8004cd4 <__kernel_sinf>
 80044a6:	e7d3      	b.n	8004450 <cosf+0x28>
 80044a8:	3f490fd8 	.word	0x3f490fd8
 80044ac:	00000000 	.word	0x00000000

080044b0 <__ieee754_rem_pio2f>:
 80044b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b2:	ee10 6a10 	vmov	r6, s0
 80044b6:	4b8e      	ldr	r3, [pc, #568]	; (80046f0 <__ieee754_rem_pio2f+0x240>)
 80044b8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80044bc:	429d      	cmp	r5, r3
 80044be:	b087      	sub	sp, #28
 80044c0:	eef0 7a40 	vmov.f32	s15, s0
 80044c4:	4604      	mov	r4, r0
 80044c6:	dc05      	bgt.n	80044d4 <__ieee754_rem_pio2f+0x24>
 80044c8:	2300      	movs	r3, #0
 80044ca:	ed80 0a00 	vstr	s0, [r0]
 80044ce:	6043      	str	r3, [r0, #4]
 80044d0:	2000      	movs	r0, #0
 80044d2:	e01a      	b.n	800450a <__ieee754_rem_pio2f+0x5a>
 80044d4:	4b87      	ldr	r3, [pc, #540]	; (80046f4 <__ieee754_rem_pio2f+0x244>)
 80044d6:	429d      	cmp	r5, r3
 80044d8:	dc46      	bgt.n	8004568 <__ieee754_rem_pio2f+0xb8>
 80044da:	2e00      	cmp	r6, #0
 80044dc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80046f8 <__ieee754_rem_pio2f+0x248>
 80044e0:	4b86      	ldr	r3, [pc, #536]	; (80046fc <__ieee754_rem_pio2f+0x24c>)
 80044e2:	f025 050f 	bic.w	r5, r5, #15
 80044e6:	dd1f      	ble.n	8004528 <__ieee754_rem_pio2f+0x78>
 80044e8:	429d      	cmp	r5, r3
 80044ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044ee:	d00e      	beq.n	800450e <__ieee754_rem_pio2f+0x5e>
 80044f0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004700 <__ieee754_rem_pio2f+0x250>
 80044f4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80044f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80044fc:	ed80 0a00 	vstr	s0, [r0]
 8004500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004504:	2001      	movs	r0, #1
 8004506:	edc4 7a01 	vstr	s15, [r4, #4]
 800450a:	b007      	add	sp, #28
 800450c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004704 <__ieee754_rem_pio2f+0x254>
 8004512:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004708 <__ieee754_rem_pio2f+0x258>
 8004516:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800451a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800451e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004522:	edc0 6a00 	vstr	s13, [r0]
 8004526:	e7eb      	b.n	8004500 <__ieee754_rem_pio2f+0x50>
 8004528:	429d      	cmp	r5, r3
 800452a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800452e:	d00e      	beq.n	800454e <__ieee754_rem_pio2f+0x9e>
 8004530:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004700 <__ieee754_rem_pio2f+0x250>
 8004534:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004538:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800453c:	ed80 0a00 	vstr	s0, [r0]
 8004540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	edc4 7a01 	vstr	s15, [r4, #4]
 800454c:	e7dd      	b.n	800450a <__ieee754_rem_pio2f+0x5a>
 800454e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004704 <__ieee754_rem_pio2f+0x254>
 8004552:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004708 <__ieee754_rem_pio2f+0x258>
 8004556:	ee77 7a80 	vadd.f32	s15, s15, s0
 800455a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800455e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004562:	edc0 6a00 	vstr	s13, [r0]
 8004566:	e7eb      	b.n	8004540 <__ieee754_rem_pio2f+0x90>
 8004568:	4b68      	ldr	r3, [pc, #416]	; (800470c <__ieee754_rem_pio2f+0x25c>)
 800456a:	429d      	cmp	r5, r3
 800456c:	dc72      	bgt.n	8004654 <__ieee754_rem_pio2f+0x1a4>
 800456e:	f000 fbf9 	bl	8004d64 <fabsf>
 8004572:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004710 <__ieee754_rem_pio2f+0x260>
 8004576:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800457a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800457e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004586:	ee17 0a90 	vmov	r0, s15
 800458a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80046f8 <__ieee754_rem_pio2f+0x248>
 800458e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004592:	281f      	cmp	r0, #31
 8004594:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004700 <__ieee754_rem_pio2f+0x250>
 8004598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459c:	eeb1 6a47 	vneg.f32	s12, s14
 80045a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80045a4:	ee16 2a90 	vmov	r2, s13
 80045a8:	dc1c      	bgt.n	80045e4 <__ieee754_rem_pio2f+0x134>
 80045aa:	495a      	ldr	r1, [pc, #360]	; (8004714 <__ieee754_rem_pio2f+0x264>)
 80045ac:	1e47      	subs	r7, r0, #1
 80045ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80045b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80045b6:	428b      	cmp	r3, r1
 80045b8:	d014      	beq.n	80045e4 <__ieee754_rem_pio2f+0x134>
 80045ba:	6022      	str	r2, [r4, #0]
 80045bc:	ed94 7a00 	vldr	s14, [r4]
 80045c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80045c4:	2e00      	cmp	r6, #0
 80045c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80045ca:	ed84 0a01 	vstr	s0, [r4, #4]
 80045ce:	da9c      	bge.n	800450a <__ieee754_rem_pio2f+0x5a>
 80045d0:	eeb1 7a47 	vneg.f32	s14, s14
 80045d4:	eeb1 0a40 	vneg.f32	s0, s0
 80045d8:	ed84 7a00 	vstr	s14, [r4]
 80045dc:	ed84 0a01 	vstr	s0, [r4, #4]
 80045e0:	4240      	negs	r0, r0
 80045e2:	e792      	b.n	800450a <__ieee754_rem_pio2f+0x5a>
 80045e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80045e8:	15eb      	asrs	r3, r5, #23
 80045ea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80045ee:	2d08      	cmp	r5, #8
 80045f0:	dde3      	ble.n	80045ba <__ieee754_rem_pio2f+0x10a>
 80045f2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004704 <__ieee754_rem_pio2f+0x254>
 80045f6:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004708 <__ieee754_rem_pio2f+0x258>
 80045fa:	eef0 6a40 	vmov.f32	s13, s0
 80045fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004602:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004606:	eea6 0a27 	vfma.f32	s0, s12, s15
 800460a:	eef0 7a40 	vmov.f32	s15, s0
 800460e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004612:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004616:	ee15 2a90 	vmov	r2, s11
 800461a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800461e:	1a5b      	subs	r3, r3, r1
 8004620:	2b19      	cmp	r3, #25
 8004622:	dc04      	bgt.n	800462e <__ieee754_rem_pio2f+0x17e>
 8004624:	edc4 5a00 	vstr	s11, [r4]
 8004628:	eeb0 0a66 	vmov.f32	s0, s13
 800462c:	e7c6      	b.n	80045bc <__ieee754_rem_pio2f+0x10c>
 800462e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004718 <__ieee754_rem_pio2f+0x268>
 8004632:	eeb0 0a66 	vmov.f32	s0, s13
 8004636:	eea6 0a25 	vfma.f32	s0, s12, s11
 800463a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800463e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800471c <__ieee754_rem_pio2f+0x26c>
 8004642:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004646:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800464a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800464e:	ed84 7a00 	vstr	s14, [r4]
 8004652:	e7b3      	b.n	80045bc <__ieee754_rem_pio2f+0x10c>
 8004654:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004658:	db06      	blt.n	8004668 <__ieee754_rem_pio2f+0x1b8>
 800465a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800465e:	edc0 7a01 	vstr	s15, [r0, #4]
 8004662:	edc0 7a00 	vstr	s15, [r0]
 8004666:	e733      	b.n	80044d0 <__ieee754_rem_pio2f+0x20>
 8004668:	15ea      	asrs	r2, r5, #23
 800466a:	3a86      	subs	r2, #134	; 0x86
 800466c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004678:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004720 <__ieee754_rem_pio2f+0x270>
 800467c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004680:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004684:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004688:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800468c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004690:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004698:	ed8d 7a04 	vstr	s14, [sp, #16]
 800469c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80046a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	edcd 7a05 	vstr	s15, [sp, #20]
 80046ac:	d11e      	bne.n	80046ec <__ieee754_rem_pio2f+0x23c>
 80046ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80046b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b6:	bf14      	ite	ne
 80046b8:	2302      	movne	r3, #2
 80046ba:	2301      	moveq	r3, #1
 80046bc:	4919      	ldr	r1, [pc, #100]	; (8004724 <__ieee754_rem_pio2f+0x274>)
 80046be:	9101      	str	r1, [sp, #4]
 80046c0:	2102      	movs	r1, #2
 80046c2:	9100      	str	r1, [sp, #0]
 80046c4:	a803      	add	r0, sp, #12
 80046c6:	4621      	mov	r1, r4
 80046c8:	f000 f88e 	bl	80047e8 <__kernel_rem_pio2f>
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	f6bf af1c 	bge.w	800450a <__ieee754_rem_pio2f+0x5a>
 80046d2:	edd4 7a00 	vldr	s15, [r4]
 80046d6:	eef1 7a67 	vneg.f32	s15, s15
 80046da:	edc4 7a00 	vstr	s15, [r4]
 80046de:	edd4 7a01 	vldr	s15, [r4, #4]
 80046e2:	eef1 7a67 	vneg.f32	s15, s15
 80046e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80046ea:	e779      	b.n	80045e0 <__ieee754_rem_pio2f+0x130>
 80046ec:	2303      	movs	r3, #3
 80046ee:	e7e5      	b.n	80046bc <__ieee754_rem_pio2f+0x20c>
 80046f0:	3f490fd8 	.word	0x3f490fd8
 80046f4:	4016cbe3 	.word	0x4016cbe3
 80046f8:	3fc90f80 	.word	0x3fc90f80
 80046fc:	3fc90fd0 	.word	0x3fc90fd0
 8004700:	37354443 	.word	0x37354443
 8004704:	37354400 	.word	0x37354400
 8004708:	2e85a308 	.word	0x2e85a308
 800470c:	43490f80 	.word	0x43490f80
 8004710:	3f22f984 	.word	0x3f22f984
 8004714:	08004f64 	.word	0x08004f64
 8004718:	2e85a300 	.word	0x2e85a300
 800471c:	248d3132 	.word	0x248d3132
 8004720:	43800000 	.word	0x43800000
 8004724:	08004fe4 	.word	0x08004fe4

08004728 <__kernel_cosf>:
 8004728:	ee10 3a10 	vmov	r3, s0
 800472c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004730:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004734:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004738:	da05      	bge.n	8004746 <__kernel_cosf+0x1e>
 800473a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800473e:	ee17 2a90 	vmov	r2, s15
 8004742:	2a00      	cmp	r2, #0
 8004744:	d03d      	beq.n	80047c2 <__kernel_cosf+0x9a>
 8004746:	ee60 5a00 	vmul.f32	s11, s0, s0
 800474a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80047c8 <__kernel_cosf+0xa0>
 800474e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80047cc <__kernel_cosf+0xa4>
 8004752:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80047d0 <__kernel_cosf+0xa8>
 8004756:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <__kernel_cosf+0xac>)
 8004758:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800475c:	4293      	cmp	r3, r2
 800475e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80047d8 <__kernel_cosf+0xb0>
 8004762:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004766:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80047dc <__kernel_cosf+0xb4>
 800476a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800476e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80047e0 <__kernel_cosf+0xb8>
 8004772:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004776:	eeb0 7a66 	vmov.f32	s14, s13
 800477a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800477e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004782:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004786:	ee67 6a25 	vmul.f32	s13, s14, s11
 800478a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800478e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004792:	dc04      	bgt.n	800479e <__kernel_cosf+0x76>
 8004794:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004798:	ee36 0a47 	vsub.f32	s0, s12, s14
 800479c:	4770      	bx	lr
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <__kernel_cosf+0xbc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bfda      	itte	le
 80047a4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80047a8:	ee06 3a90 	vmovle	s13, r3
 80047ac:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80047b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047b4:	ee36 0a66 	vsub.f32	s0, s12, s13
 80047b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80047c0:	4770      	bx	lr
 80047c2:	eeb0 0a46 	vmov.f32	s0, s12
 80047c6:	4770      	bx	lr
 80047c8:	ad47d74e 	.word	0xad47d74e
 80047cc:	310f74f6 	.word	0x310f74f6
 80047d0:	3d2aaaab 	.word	0x3d2aaaab
 80047d4:	3e999999 	.word	0x3e999999
 80047d8:	b493f27c 	.word	0xb493f27c
 80047dc:	37d00d01 	.word	0x37d00d01
 80047e0:	bab60b61 	.word	0xbab60b61
 80047e4:	3f480000 	.word	0x3f480000

080047e8 <__kernel_rem_pio2f>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	ed2d 8b04 	vpush	{d8-d9}
 80047f0:	b0d9      	sub	sp, #356	; 0x164
 80047f2:	4688      	mov	r8, r1
 80047f4:	9002      	str	r0, [sp, #8]
 80047f6:	49bb      	ldr	r1, [pc, #748]	; (8004ae4 <__kernel_rem_pio2f+0x2fc>)
 80047f8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004800:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004804:	1e59      	subs	r1, r3, #1
 8004806:	1d13      	adds	r3, r2, #4
 8004808:	db27      	blt.n	800485a <__kernel_rem_pio2f+0x72>
 800480a:	f1b2 0b03 	subs.w	fp, r2, #3
 800480e:	bf48      	it	mi
 8004810:	f102 0b04 	addmi.w	fp, r2, #4
 8004814:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8004818:	1c45      	adds	r5, r0, #1
 800481a:	00ec      	lsls	r4, r5, #3
 800481c:	1a47      	subs	r7, r0, r1
 800481e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004822:	9403      	str	r4, [sp, #12]
 8004824:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004828:	eb0a 0c01 	add.w	ip, sl, r1
 800482c:	ae1c      	add	r6, sp, #112	; 0x70
 800482e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8004832:	2400      	movs	r4, #0
 8004834:	4564      	cmp	r4, ip
 8004836:	dd12      	ble.n	800485e <__kernel_rem_pio2f+0x76>
 8004838:	9b01      	ldr	r3, [sp, #4]
 800483a:	ac1c      	add	r4, sp, #112	; 0x70
 800483c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004840:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8004844:	f04f 0c00 	mov.w	ip, #0
 8004848:	45d4      	cmp	ip, sl
 800484a:	dc27      	bgt.n	800489c <__kernel_rem_pio2f+0xb4>
 800484c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004850:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004854:	4627      	mov	r7, r4
 8004856:	2600      	movs	r6, #0
 8004858:	e016      	b.n	8004888 <__kernel_rem_pio2f+0xa0>
 800485a:	2000      	movs	r0, #0
 800485c:	e7dc      	b.n	8004818 <__kernel_rem_pio2f+0x30>
 800485e:	42e7      	cmn	r7, r4
 8004860:	bf5d      	ittte	pl
 8004862:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8004866:	ee07 3a90 	vmovpl	s15, r3
 800486a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800486e:	eef0 7a47 	vmovmi.f32	s15, s14
 8004872:	ece6 7a01 	vstmia	r6!, {s15}
 8004876:	3401      	adds	r4, #1
 8004878:	e7dc      	b.n	8004834 <__kernel_rem_pio2f+0x4c>
 800487a:	ecf9 6a01 	vldmia	r9!, {s13}
 800487e:	ed97 7a00 	vldr	s14, [r7]
 8004882:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004886:	3601      	adds	r6, #1
 8004888:	428e      	cmp	r6, r1
 800488a:	f1a7 0704 	sub.w	r7, r7, #4
 800488e:	ddf4      	ble.n	800487a <__kernel_rem_pio2f+0x92>
 8004890:	eceb 7a01 	vstmia	fp!, {s15}
 8004894:	f10c 0c01 	add.w	ip, ip, #1
 8004898:	3404      	adds	r4, #4
 800489a:	e7d5      	b.n	8004848 <__kernel_rem_pio2f+0x60>
 800489c:	ab08      	add	r3, sp, #32
 800489e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80048a2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004af0 <__kernel_rem_pio2f+0x308>
 80048a6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004aec <__kernel_rem_pio2f+0x304>
 80048aa:	9304      	str	r3, [sp, #16]
 80048ac:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80048b0:	4656      	mov	r6, sl
 80048b2:	00b3      	lsls	r3, r6, #2
 80048b4:	9305      	str	r3, [sp, #20]
 80048b6:	ab58      	add	r3, sp, #352	; 0x160
 80048b8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80048bc:	ac08      	add	r4, sp, #32
 80048be:	ab44      	add	r3, sp, #272	; 0x110
 80048c0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80048c4:	46a4      	mov	ip, r4
 80048c6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80048ca:	4637      	mov	r7, r6
 80048cc:	2f00      	cmp	r7, #0
 80048ce:	f1a0 0004 	sub.w	r0, r0, #4
 80048d2:	dc4f      	bgt.n	8004974 <__kernel_rem_pio2f+0x18c>
 80048d4:	4628      	mov	r0, r5
 80048d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80048da:	f000 fa8d 	bl	8004df8 <scalbnf>
 80048de:	eeb0 8a40 	vmov.f32	s16, s0
 80048e2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80048e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80048ea:	f000 fa43 	bl	8004d74 <floorf>
 80048ee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80048f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80048fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004900:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004904:	ee17 9a90 	vmov	r9, s15
 8004908:	ee38 8a40 	vsub.f32	s16, s16, s0
 800490c:	dd44      	ble.n	8004998 <__kernel_rem_pio2f+0x1b0>
 800490e:	f106 3cff 	add.w	ip, r6, #4294967295
 8004912:	ab08      	add	r3, sp, #32
 8004914:	f1c5 0e08 	rsb	lr, r5, #8
 8004918:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800491c:	fa47 f00e 	asr.w	r0, r7, lr
 8004920:	4481      	add	r9, r0
 8004922:	fa00 f00e 	lsl.w	r0, r0, lr
 8004926:	1a3f      	subs	r7, r7, r0
 8004928:	f1c5 0007 	rsb	r0, r5, #7
 800492c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004930:	4107      	asrs	r7, r0
 8004932:	2f00      	cmp	r7, #0
 8004934:	dd3f      	ble.n	80049b6 <__kernel_rem_pio2f+0x1ce>
 8004936:	f04f 0e00 	mov.w	lr, #0
 800493a:	f109 0901 	add.w	r9, r9, #1
 800493e:	4673      	mov	r3, lr
 8004940:	4576      	cmp	r6, lr
 8004942:	dc6b      	bgt.n	8004a1c <__kernel_rem_pio2f+0x234>
 8004944:	2d00      	cmp	r5, #0
 8004946:	dd04      	ble.n	8004952 <__kernel_rem_pio2f+0x16a>
 8004948:	2d01      	cmp	r5, #1
 800494a:	d078      	beq.n	8004a3e <__kernel_rem_pio2f+0x256>
 800494c:	2d02      	cmp	r5, #2
 800494e:	f000 8081 	beq.w	8004a54 <__kernel_rem_pio2f+0x26c>
 8004952:	2f02      	cmp	r7, #2
 8004954:	d12f      	bne.n	80049b6 <__kernel_rem_pio2f+0x1ce>
 8004956:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800495a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800495e:	b353      	cbz	r3, 80049b6 <__kernel_rem_pio2f+0x1ce>
 8004960:	4628      	mov	r0, r5
 8004962:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004966:	f000 fa47 	bl	8004df8 <scalbnf>
 800496a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800496e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004972:	e020      	b.n	80049b6 <__kernel_rem_pio2f+0x1ce>
 8004974:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004978:	3f01      	subs	r7, #1
 800497a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800497e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004982:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004986:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800498a:	ecac 0a01 	vstmia	ip!, {s0}
 800498e:	ed90 0a00 	vldr	s0, [r0]
 8004992:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004996:	e799      	b.n	80048cc <__kernel_rem_pio2f+0xe4>
 8004998:	d105      	bne.n	80049a6 <__kernel_rem_pio2f+0x1be>
 800499a:	1e70      	subs	r0, r6, #1
 800499c:	ab08      	add	r3, sp, #32
 800499e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80049a2:	11ff      	asrs	r7, r7, #7
 80049a4:	e7c5      	b.n	8004932 <__kernel_rem_pio2f+0x14a>
 80049a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80049aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	da31      	bge.n	8004a18 <__kernel_rem_pio2f+0x230>
 80049b4:	2700      	movs	r7, #0
 80049b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	f040 809b 	bne.w	8004af8 <__kernel_rem_pio2f+0x310>
 80049c2:	1e74      	subs	r4, r6, #1
 80049c4:	46a4      	mov	ip, r4
 80049c6:	2000      	movs	r0, #0
 80049c8:	45d4      	cmp	ip, sl
 80049ca:	da4a      	bge.n	8004a62 <__kernel_rem_pio2f+0x27a>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d07a      	beq.n	8004ac6 <__kernel_rem_pio2f+0x2de>
 80049d0:	ab08      	add	r3, sp, #32
 80049d2:	3d08      	subs	r5, #8
 80049d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8081 	beq.w	8004ae0 <__kernel_rem_pio2f+0x2f8>
 80049de:	4628      	mov	r0, r5
 80049e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049e4:	00a5      	lsls	r5, r4, #2
 80049e6:	f000 fa07 	bl	8004df8 <scalbnf>
 80049ea:	aa44      	add	r2, sp, #272	; 0x110
 80049ec:	1d2b      	adds	r3, r5, #4
 80049ee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004af0 <__kernel_rem_pio2f+0x308>
 80049f2:	18d1      	adds	r1, r2, r3
 80049f4:	4622      	mov	r2, r4
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	f280 80ae 	bge.w	8004b58 <__kernel_rem_pio2f+0x370>
 80049fc:	4622      	mov	r2, r4
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	f2c0 80cc 	blt.w	8004b9c <__kernel_rem_pio2f+0x3b4>
 8004a04:	a944      	add	r1, sp, #272	; 0x110
 8004a06:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004a0a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004ae8 <__kernel_rem_pio2f+0x300>
 8004a0e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004a12:	2000      	movs	r0, #0
 8004a14:	1aa1      	subs	r1, r4, r2
 8004a16:	e0b6      	b.n	8004b86 <__kernel_rem_pio2f+0x39e>
 8004a18:	2702      	movs	r7, #2
 8004a1a:	e78c      	b.n	8004936 <__kernel_rem_pio2f+0x14e>
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	b94b      	cbnz	r3, 8004a34 <__kernel_rem_pio2f+0x24c>
 8004a20:	b118      	cbz	r0, 8004a2a <__kernel_rem_pio2f+0x242>
 8004a22:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004a26:	6020      	str	r0, [r4, #0]
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f10e 0e01 	add.w	lr, lr, #1
 8004a2e:	3404      	adds	r4, #4
 8004a30:	4603      	mov	r3, r0
 8004a32:	e785      	b.n	8004940 <__kernel_rem_pio2f+0x158>
 8004a34:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004a38:	6020      	str	r0, [r4, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	e7f5      	b.n	8004a2a <__kernel_rem_pio2f+0x242>
 8004a3e:	1e74      	subs	r4, r6, #1
 8004a40:	a808      	add	r0, sp, #32
 8004a42:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004a46:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004a4a:	f10d 0c20 	add.w	ip, sp, #32
 8004a4e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004a52:	e77e      	b.n	8004952 <__kernel_rem_pio2f+0x16a>
 8004a54:	1e74      	subs	r4, r6, #1
 8004a56:	a808      	add	r0, sp, #32
 8004a58:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004a5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004a60:	e7f3      	b.n	8004a4a <__kernel_rem_pio2f+0x262>
 8004a62:	ab08      	add	r3, sp, #32
 8004a64:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004a68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a6c:	4318      	orrs	r0, r3
 8004a6e:	e7ab      	b.n	80049c8 <__kernel_rem_pio2f+0x1e0>
 8004a70:	f10c 0c01 	add.w	ip, ip, #1
 8004a74:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004a78:	2c00      	cmp	r4, #0
 8004a7a:	d0f9      	beq.n	8004a70 <__kernel_rem_pio2f+0x288>
 8004a7c:	9b05      	ldr	r3, [sp, #20]
 8004a7e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004a82:	eb0d 0003 	add.w	r0, sp, r3
 8004a86:	9b01      	ldr	r3, [sp, #4]
 8004a88:	18f4      	adds	r4, r6, r3
 8004a8a:	ab1c      	add	r3, sp, #112	; 0x70
 8004a8c:	1c77      	adds	r7, r6, #1
 8004a8e:	384c      	subs	r0, #76	; 0x4c
 8004a90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004a94:	4466      	add	r6, ip
 8004a96:	42be      	cmp	r6, r7
 8004a98:	f6ff af0b 	blt.w	80048b2 <__kernel_rem_pio2f+0xca>
 8004a9c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004aa0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aac:	f04f 0c00 	mov.w	ip, #0
 8004ab0:	ece4 7a01 	vstmia	r4!, {s15}
 8004ab4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004ab8:	46a1      	mov	r9, r4
 8004aba:	458c      	cmp	ip, r1
 8004abc:	dd07      	ble.n	8004ace <__kernel_rem_pio2f+0x2e6>
 8004abe:	ece0 7a01 	vstmia	r0!, {s15}
 8004ac2:	3701      	adds	r7, #1
 8004ac4:	e7e7      	b.n	8004a96 <__kernel_rem_pio2f+0x2ae>
 8004ac6:	9804      	ldr	r0, [sp, #16]
 8004ac8:	f04f 0c01 	mov.w	ip, #1
 8004acc:	e7d2      	b.n	8004a74 <__kernel_rem_pio2f+0x28c>
 8004ace:	ecfe 6a01 	vldmia	lr!, {s13}
 8004ad2:	ed39 7a01 	vldmdb	r9!, {s14}
 8004ad6:	f10c 0c01 	add.w	ip, ip, #1
 8004ada:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ade:	e7ec      	b.n	8004aba <__kernel_rem_pio2f+0x2d2>
 8004ae0:	3c01      	subs	r4, #1
 8004ae2:	e775      	b.n	80049d0 <__kernel_rem_pio2f+0x1e8>
 8004ae4:	08005328 	.word	0x08005328
 8004ae8:	080052fc 	.word	0x080052fc
 8004aec:	43800000 	.word	0x43800000
 8004af0:	3b800000 	.word	0x3b800000
 8004af4:	00000000 	.word	0x00000000
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	eeb0 0a48 	vmov.f32	s0, s16
 8004afe:	1a98      	subs	r0, r3, r2
 8004b00:	f000 f97a 	bl	8004df8 <scalbnf>
 8004b04:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004aec <__kernel_rem_pio2f+0x304>
 8004b08:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b10:	db19      	blt.n	8004b46 <__kernel_rem_pio2f+0x35e>
 8004b12:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004af0 <__kernel_rem_pio2f+0x308>
 8004b16:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b1a:	aa08      	add	r2, sp, #32
 8004b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b20:	1c74      	adds	r4, r6, #1
 8004b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b26:	3508      	adds	r5, #8
 8004b28:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b34:	ee10 3a10 	vmov	r3, s0
 8004b38:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004b3c:	ee17 3a90 	vmov	r3, s15
 8004b40:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004b44:	e74b      	b.n	80049de <__kernel_rem_pio2f+0x1f6>
 8004b46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b4a:	aa08      	add	r2, sp, #32
 8004b4c:	ee10 3a10 	vmov	r3, s0
 8004b50:	4634      	mov	r4, r6
 8004b52:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004b56:	e742      	b.n	80049de <__kernel_rem_pio2f+0x1f6>
 8004b58:	a808      	add	r0, sp, #32
 8004b5a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004b5e:	9001      	str	r0, [sp, #4]
 8004b60:	ee07 0a90 	vmov	s15, r0
 8004b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004b6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004b72:	ed61 7a01 	vstmdb	r1!, {s15}
 8004b76:	e73e      	b.n	80049f6 <__kernel_rem_pio2f+0x20e>
 8004b78:	ecfc 6a01 	vldmia	ip!, {s13}
 8004b7c:	ecb6 7a01 	vldmia	r6!, {s14}
 8004b80:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b84:	3001      	adds	r0, #1
 8004b86:	4550      	cmp	r0, sl
 8004b88:	dc01      	bgt.n	8004b8e <__kernel_rem_pio2f+0x3a6>
 8004b8a:	4288      	cmp	r0, r1
 8004b8c:	ddf4      	ble.n	8004b78 <__kernel_rem_pio2f+0x390>
 8004b8e:	a858      	add	r0, sp, #352	; 0x160
 8004b90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004b94:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	e730      	b.n	80049fe <__kernel_rem_pio2f+0x216>
 8004b9c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004b9e:	2a02      	cmp	r2, #2
 8004ba0:	dc09      	bgt.n	8004bb6 <__kernel_rem_pio2f+0x3ce>
 8004ba2:	2a00      	cmp	r2, #0
 8004ba4:	dc2a      	bgt.n	8004bfc <__kernel_rem_pio2f+0x414>
 8004ba6:	d043      	beq.n	8004c30 <__kernel_rem_pio2f+0x448>
 8004ba8:	f009 0007 	and.w	r0, r9, #7
 8004bac:	b059      	add	sp, #356	; 0x164
 8004bae:	ecbd 8b04 	vpop	{d8-d9}
 8004bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d1f5      	bne.n	8004ba8 <__kernel_rem_pio2f+0x3c0>
 8004bbc:	ab30      	add	r3, sp, #192	; 0xc0
 8004bbe:	442b      	add	r3, r5
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f1a1 0104 	sub.w	r1, r1, #4
 8004bcc:	dc51      	bgt.n	8004c72 <__kernel_rem_pio2f+0x48a>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	2901      	cmp	r1, #1
 8004bd2:	f1a2 0204 	sub.w	r2, r2, #4
 8004bd6:	dc5c      	bgt.n	8004c92 <__kernel_rem_pio2f+0x4aa>
 8004bd8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2c01      	cmp	r4, #1
 8004be0:	dc67      	bgt.n	8004cb2 <__kernel_rem_pio2f+0x4ca>
 8004be2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004be6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	d167      	bne.n	8004cbe <__kernel_rem_pio2f+0x4d6>
 8004bee:	edc8 6a00 	vstr	s13, [r8]
 8004bf2:	ed88 7a01 	vstr	s14, [r8, #4]
 8004bf6:	edc8 7a02 	vstr	s15, [r8, #8]
 8004bfa:	e7d5      	b.n	8004ba8 <__kernel_rem_pio2f+0x3c0>
 8004bfc:	aa30      	add	r2, sp, #192	; 0xc0
 8004bfe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004c02:	4413      	add	r3, r2
 8004c04:	4622      	mov	r2, r4
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	da24      	bge.n	8004c54 <__kernel_rem_pio2f+0x46c>
 8004c0a:	b34f      	cbz	r7, 8004c60 <__kernel_rem_pio2f+0x478>
 8004c0c:	eef1 7a47 	vneg.f32	s15, s14
 8004c10:	edc8 7a00 	vstr	s15, [r8]
 8004c14:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c1c:	aa31      	add	r2, sp, #196	; 0xc4
 8004c1e:	2301      	movs	r3, #1
 8004c20:	429c      	cmp	r4, r3
 8004c22:	da20      	bge.n	8004c66 <__kernel_rem_pio2f+0x47e>
 8004c24:	b10f      	cbz	r7, 8004c2a <__kernel_rem_pio2f+0x442>
 8004c26:	eef1 7a67 	vneg.f32	s15, s15
 8004c2a:	edc8 7a01 	vstr	s15, [r8, #4]
 8004c2e:	e7bb      	b.n	8004ba8 <__kernel_rem_pio2f+0x3c0>
 8004c30:	aa30      	add	r2, sp, #192	; 0xc0
 8004c32:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004af4 <__kernel_rem_pio2f+0x30c>
 8004c36:	4413      	add	r3, r2
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	da05      	bge.n	8004c48 <__kernel_rem_pio2f+0x460>
 8004c3c:	b10f      	cbz	r7, 8004c42 <__kernel_rem_pio2f+0x45a>
 8004c3e:	eef1 7a67 	vneg.f32	s15, s15
 8004c42:	edc8 7a00 	vstr	s15, [r8]
 8004c46:	e7af      	b.n	8004ba8 <__kernel_rem_pio2f+0x3c0>
 8004c48:	ed33 7a01 	vldmdb	r3!, {s14}
 8004c4c:	3c01      	subs	r4, #1
 8004c4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c52:	e7f1      	b.n	8004c38 <__kernel_rem_pio2f+0x450>
 8004c54:	ed73 7a01 	vldmdb	r3!, {s15}
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c5e:	e7d2      	b.n	8004c06 <__kernel_rem_pio2f+0x41e>
 8004c60:	eef0 7a47 	vmov.f32	s15, s14
 8004c64:	e7d4      	b.n	8004c10 <__kernel_rem_pio2f+0x428>
 8004c66:	ecb2 7a01 	vldmia	r2!, {s14}
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c70:	e7d6      	b.n	8004c20 <__kernel_rem_pio2f+0x438>
 8004c72:	edd1 7a00 	vldr	s15, [r1]
 8004c76:	edd1 6a01 	vldr	s13, [r1, #4]
 8004c7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c7e:	3801      	subs	r0, #1
 8004c80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c84:	ed81 7a00 	vstr	s14, [r1]
 8004c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8c:	edc1 7a01 	vstr	s15, [r1, #4]
 8004c90:	e799      	b.n	8004bc6 <__kernel_rem_pio2f+0x3de>
 8004c92:	edd2 7a00 	vldr	s15, [r2]
 8004c96:	edd2 6a01 	vldr	s13, [r2, #4]
 8004c9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c9e:	3901      	subs	r1, #1
 8004ca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ca4:	ed82 7a00 	vstr	s14, [r2]
 8004ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cac:	edc2 7a01 	vstr	s15, [r2, #4]
 8004cb0:	e78e      	b.n	8004bd0 <__kernel_rem_pio2f+0x3e8>
 8004cb2:	ed33 7a01 	vldmdb	r3!, {s14}
 8004cb6:	3c01      	subs	r4, #1
 8004cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cbc:	e78f      	b.n	8004bde <__kernel_rem_pio2f+0x3f6>
 8004cbe:	eef1 6a66 	vneg.f32	s13, s13
 8004cc2:	eeb1 7a47 	vneg.f32	s14, s14
 8004cc6:	edc8 6a00 	vstr	s13, [r8]
 8004cca:	ed88 7a01 	vstr	s14, [r8, #4]
 8004cce:	eef1 7a67 	vneg.f32	s15, s15
 8004cd2:	e790      	b.n	8004bf6 <__kernel_rem_pio2f+0x40e>

08004cd4 <__kernel_sinf>:
 8004cd4:	ee10 3a10 	vmov	r3, s0
 8004cd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cdc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004ce0:	da04      	bge.n	8004cec <__kernel_sinf+0x18>
 8004ce2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004ce6:	ee17 3a90 	vmov	r3, s15
 8004cea:	b35b      	cbz	r3, 8004d44 <__kernel_sinf+0x70>
 8004cec:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004cf0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004d48 <__kernel_sinf+0x74>
 8004cf4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004d4c <__kernel_sinf+0x78>
 8004cf8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004cfc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004d50 <__kernel_sinf+0x7c>
 8004d00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d04:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004d54 <__kernel_sinf+0x80>
 8004d08:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004d0c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004d58 <__kernel_sinf+0x84>
 8004d10:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004d14:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004d18:	b930      	cbnz	r0, 8004d28 <__kernel_sinf+0x54>
 8004d1a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004d5c <__kernel_sinf+0x88>
 8004d1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004d22:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004d26:	4770      	bx	lr
 8004d28:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004d2c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004d30:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004d34:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004d38:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004d60 <__kernel_sinf+0x8c>
 8004d3c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004d40:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	2f2ec9d3 	.word	0x2f2ec9d3
 8004d4c:	b2d72f34 	.word	0xb2d72f34
 8004d50:	3638ef1b 	.word	0x3638ef1b
 8004d54:	b9500d01 	.word	0xb9500d01
 8004d58:	3c088889 	.word	0x3c088889
 8004d5c:	be2aaaab 	.word	0xbe2aaaab
 8004d60:	3e2aaaab 	.word	0x3e2aaaab

08004d64 <fabsf>:
 8004d64:	ee10 3a10 	vmov	r3, s0
 8004d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	ee00 3a10 	vmov	s0, r3
 8004d70:	4770      	bx	lr
	...

08004d74 <floorf>:
 8004d74:	ee10 3a10 	vmov	r3, s0
 8004d78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004d7c:	3a7f      	subs	r2, #127	; 0x7f
 8004d7e:	2a16      	cmp	r2, #22
 8004d80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d84:	dc2a      	bgt.n	8004ddc <floorf+0x68>
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	da11      	bge.n	8004dae <floorf+0x3a>
 8004d8a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004dec <floorf+0x78>
 8004d8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	dd05      	ble.n	8004da8 <floorf+0x34>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	da23      	bge.n	8004de8 <floorf+0x74>
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <floorf+0x7c>)
 8004da2:	2900      	cmp	r1, #0
 8004da4:	bf18      	it	ne
 8004da6:	4613      	movne	r3, r2
 8004da8:	ee00 3a10 	vmov	s0, r3
 8004dac:	4770      	bx	lr
 8004dae:	4911      	ldr	r1, [pc, #68]	; (8004df4 <floorf+0x80>)
 8004db0:	4111      	asrs	r1, r2
 8004db2:	420b      	tst	r3, r1
 8004db4:	d0fa      	beq.n	8004dac <floorf+0x38>
 8004db6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004dec <floorf+0x78>
 8004dba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004dbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc6:	ddef      	ble.n	8004da8 <floorf+0x34>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbe      	ittt	lt
 8004dcc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004dd0:	fa40 f202 	asrlt.w	r2, r0, r2
 8004dd4:	189b      	addlt	r3, r3, r2
 8004dd6:	ea23 0301 	bic.w	r3, r3, r1
 8004dda:	e7e5      	b.n	8004da8 <floorf+0x34>
 8004ddc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004de0:	d3e4      	bcc.n	8004dac <floorf+0x38>
 8004de2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004de6:	4770      	bx	lr
 8004de8:	2300      	movs	r3, #0
 8004dea:	e7dd      	b.n	8004da8 <floorf+0x34>
 8004dec:	7149f2ca 	.word	0x7149f2ca
 8004df0:	bf800000 	.word	0xbf800000
 8004df4:	007fffff 	.word	0x007fffff

08004df8 <scalbnf>:
 8004df8:	ee10 3a10 	vmov	r3, s0
 8004dfc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004e00:	d025      	beq.n	8004e4e <scalbnf+0x56>
 8004e02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004e06:	d302      	bcc.n	8004e0e <scalbnf+0x16>
 8004e08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e0c:	4770      	bx	lr
 8004e0e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004e12:	d122      	bne.n	8004e5a <scalbnf+0x62>
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <scalbnf+0xc8>)
 8004e16:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004ec4 <scalbnf+0xcc>
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e20:	db16      	blt.n	8004e50 <scalbnf+0x58>
 8004e22:	ee10 3a10 	vmov	r3, s0
 8004e26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e2a:	3a19      	subs	r2, #25
 8004e2c:	4402      	add	r2, r0
 8004e2e:	2afe      	cmp	r2, #254	; 0xfe
 8004e30:	dd15      	ble.n	8004e5e <scalbnf+0x66>
 8004e32:	ee10 3a10 	vmov	r3, s0
 8004e36:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004ec8 <scalbnf+0xd0>
 8004e3a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ecc <scalbnf+0xd4>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	eeb0 7a67 	vmov.f32	s14, s15
 8004e44:	bfb8      	it	lt
 8004e46:	eef0 7a66 	vmovlt.f32	s15, s13
 8004e4a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004e4e:	4770      	bx	lr
 8004e50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004ed0 <scalbnf+0xd8>
 8004e54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004e58:	4770      	bx	lr
 8004e5a:	0dd2      	lsrs	r2, r2, #23
 8004e5c:	e7e6      	b.n	8004e2c <scalbnf+0x34>
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	dd06      	ble.n	8004e70 <scalbnf+0x78>
 8004e62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e66:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004e6a:	ee00 3a10 	vmov	s0, r3
 8004e6e:	4770      	bx	lr
 8004e70:	f112 0f16 	cmn.w	r2, #22
 8004e74:	da1a      	bge.n	8004eac <scalbnf+0xb4>
 8004e76:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e7a:	4298      	cmp	r0, r3
 8004e7c:	ee10 3a10 	vmov	r3, s0
 8004e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e84:	dd0a      	ble.n	8004e9c <scalbnf+0xa4>
 8004e86:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004ec8 <scalbnf+0xd0>
 8004e8a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004ecc <scalbnf+0xd4>
 8004e8e:	eef0 7a40 	vmov.f32	s15, s0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf18      	it	ne
 8004e96:	eeb0 0a47 	vmovne.f32	s0, s14
 8004e9a:	e7db      	b.n	8004e54 <scalbnf+0x5c>
 8004e9c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004ed0 <scalbnf+0xd8>
 8004ea0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004ed4 <scalbnf+0xdc>
 8004ea4:	eef0 7a40 	vmov.f32	s15, s0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	e7f3      	b.n	8004e94 <scalbnf+0x9c>
 8004eac:	3219      	adds	r2, #25
 8004eae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004eb2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004eb6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ed8 <scalbnf+0xe0>
 8004eba:	ee07 3a10 	vmov	s14, r3
 8004ebe:	e7c4      	b.n	8004e4a <scalbnf+0x52>
 8004ec0:	ffff3cb0 	.word	0xffff3cb0
 8004ec4:	4c000000 	.word	0x4c000000
 8004ec8:	7149f2ca 	.word	0x7149f2ca
 8004ecc:	f149f2ca 	.word	0xf149f2ca
 8004ed0:	0da24260 	.word	0x0da24260
 8004ed4:	8da24260 	.word	0x8da24260
 8004ed8:	33000000 	.word	0x33000000

08004edc <__libc_init_array>:
 8004edc:	b570      	push	{r4, r5, r6, lr}
 8004ede:	4d0d      	ldr	r5, [pc, #52]	; (8004f14 <__libc_init_array+0x38>)
 8004ee0:	4c0d      	ldr	r4, [pc, #52]	; (8004f18 <__libc_init_array+0x3c>)
 8004ee2:	1b64      	subs	r4, r4, r5
 8004ee4:	10a4      	asrs	r4, r4, #2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	42a6      	cmp	r6, r4
 8004eea:	d109      	bne.n	8004f00 <__libc_init_array+0x24>
 8004eec:	4d0b      	ldr	r5, [pc, #44]	; (8004f1c <__libc_init_array+0x40>)
 8004eee:	4c0c      	ldr	r4, [pc, #48]	; (8004f20 <__libc_init_array+0x44>)
 8004ef0:	f000 f820 	bl	8004f34 <_init>
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	2600      	movs	r6, #0
 8004efa:	42a6      	cmp	r6, r4
 8004efc:	d105      	bne.n	8004f0a <__libc_init_array+0x2e>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f04:	4798      	blx	r3
 8004f06:	3601      	adds	r6, #1
 8004f08:	e7ee      	b.n	8004ee8 <__libc_init_array+0xc>
 8004f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0e:	4798      	blx	r3
 8004f10:	3601      	adds	r6, #1
 8004f12:	e7f2      	b.n	8004efa <__libc_init_array+0x1e>
 8004f14:	0800533c 	.word	0x0800533c
 8004f18:	0800533c 	.word	0x0800533c
 8004f1c:	0800533c 	.word	0x0800533c
 8004f20:	08005344 	.word	0x08005344

08004f24 <memset>:
 8004f24:	4402      	add	r2, r0
 8004f26:	4603      	mov	r3, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d100      	bne.n	8004f2e <memset+0xa>
 8004f2c:	4770      	bx	lr
 8004f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f32:	e7f9      	b.n	8004f28 <memset+0x4>

08004f34 <_init>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr

08004f40 <_fini>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr
